<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1252">
<META NAME="Generator" CONTENT="Microsoft Word 97">
<TITLE>IFilter Test Suite User Documentation</TITLE>
<META NAME="Template" CONTENT="C:\MSOffice\Templates\Reports\CAIRO.DOT">
</HEAD>
<BODY bgcolor="#FFFFFF" text="#000000" link="#0000FF" vlink="#800080">

<table width=100%>
<tr><td><img src="idx_logo.gif" align=bottom width=170 height=72></td><td><h1 align=center>IFilter Test Suite v1.0</h1>
<p align=center><strong>Windows Design Team, October 1, 1996</strong></p>
</td></tr>
</table>

<FONT SIZE=2>
<P>The IFilter Test Suite is designed to help IFilter designers validate their implementation.  It performs a series of tests to ensure that the filter complies with the IFilter specification.</P>
</FONT>
<hr>
<B><P><h1>Contents</h1></P>
</B>
<blockquote>
<P><a href="#IFilter Test Suite"><strong>IFilter Test Suite</strong></a></p>
<P><a href="#IFilter Test Suite Overview"><strong>IFilter Test Suite Overview</strong></a></P>
<blockquote>
<P><a href="#Command Line Parameters">Command Line Parameters</a></P>
<P><a href="#System Requirements">System Requirements</a></P>
</blockquote>
<P><a href="#The ifilttst.ini File"><strong>The ifilttst.ini File</strong></a></P>

<P><a href="#Sample Ifilttst.ini file"><strong>Sample Ifilttst.ini file</strong></a></P>

<P><a href="#IFilter Test Procedure"><strong>IFilter Test Procedure</strong></a></P>
<blockquote>
<P><a href="#Validation Test">Validation Test</a></P>
<P><a href="#Consistency Test">Consistency Test</a></P>
<P><a href="#Invalid Input Test">Invalid Input Test</a></P>
<P><a href="#Testing Different IFilter Configurations">Testing Different IFilter Configurations</a></P>
</blockquote>
<P><a href="#Sample Log File"><strong>Sample Log File</strong></a></P>
<P><a href="#Sample Dump File"><strong>Sample Dump File</strong></a></P>
</blockquote>
</P>
<hr>
<h1><A NAME="IFilter Test Suite">IFilter Test Suite</A></h1>
<FONT SIZE=2>
</FONT><P>The IFilter Test Suite helps validate IFilter implementations.  This document describes some of the significant features of the tool, and how to use it.  </P>
<hr>
<h1><A NAME="IFilter Test Suite Overview">IFilter Test Suite Overview</A></h1>

<P>The IFilter Test Suite validates IFilter implementations by calling IFilter methods and checking the returned values for compliance with the IFilter specification.  Some examples of things the test looks for are: that chunk id’s are unique and increasing, that the IFilter behaves consistently after re-initialization, and that IFilter method calls with invalid parameters return expected error codes.  </P>

<P>The test consists of a single executable, ifilttst.exe, and a initialization file, ifilttst.ini.  ifilttst.exe is a command-line application.</P>

<blockquote>
<h2><A NAME="Command Line Parameters">Command Line Parameters</A></h2>
<FONT SIZE=2><P> </P></FONT>
<TABLE BORDER CELLSPACING=1 BORDERCOLOR="#000000" CELLPADDING=7 WIDTH=590>
<TR><TD WIDTH="26%" VALIGN="TOP">
<B><P>Parameter</B></TD>
<TD WIDTH="74%" VALIGN="TOP">
<B><P>Meaning</B></TD>
</TR>
<TR><TD WIDTH="26%" VALIGN="TOP">
<FONT SIZE=3><P>/i  &lt;filename&gt;</FONT></TD>
<TD WIDTH="74%" VALIGN="TOP">
<FONT SIZE=3><P>The input file or directory to be filtered.  The filename can contain the wildcard characters * and ?.  </FONT></TD>
</TR>
<TR><TD WIDTH="26%" VALIGN="TOP">
<FONT SIZE=3><P>/l</FONT></TD>
<TD WIDTH="74%" VALIGN="TOP">
<FONT SIZE=3><P>Log messages are directed to a file, instead of the screen.  Log messages describe the individual tests performed and the pass/fail result of the test.  The log filename is the same as the input filename with a .log extension.</FONT></TD>
</TR>
<TR><TD WIDTH="26%" VALIGN="TOP">
<FONT SIZE=3><P>/d</FONT></TD>
<TD WIDTH="74%" VALIGN="TOP">
<FONT SIZE=3><P>Dump messages are directed to a file instead of the screen.  Dump messages describe the contents of the chunks.  The chunk structure is dumped when the verbosity level is 3.  The dump filename is the same as the input filename with a .dmp extension.</FONT></TD>
</TR>
<TR><TD WIDTH="26%" VALIGN="TOP">
<FONT SIZE=3><P>/-l</FONT></TD>
<TD WIDTH="74%" VALIGN="TOP">
<FONT SIZE=3><P>Disable logging.  This flag overrides /l</FONT></TD>
</TR>
<TR><TD WIDTH="26%" VALIGN="TOP">
<FONT SIZE=3><P>/-d</FONT></TD>
<TD WIDTH="74%" VALIGN="TOP">
<FONT SIZE=3><P>Disable dumping.  This flag overrides /d</FONT></TD>
</TR>
<TR><TD WIDTH="26%" VALIGN="TOP">
<FONT SIZE=3><P>/v &lt;integer&gt;</FONT></TD>
<TD WIDTH="74%" VALIGN="TOP">
<FONT SIZE=3><P>The verbosity level.  </P>
<OL START=0>

<LI>The test logs only messages concerning specific IFilter failures.  The test dumps the chunk contents.</LI>
<LI VALUE=1>The test logs warning messages.</LI>
<LI VALUE=1>The test logs messages concerning tests which passed.</LI>
<LI VALUE=1>The test logs informational messages.  In addition, the test dumps the structure of the chunks.</OL>
</FONT></TD>
</TR>
<TR><TD WIDTH="26%" VALIGN="TOP">
<FONT SIZE=3><P>/t &lt;integer&gt;</FONT></TD>
<TD WIDTH="74%" VALIGN="TOP">
<FONT SIZE=3><P>The number of threads to launch.  One by default.</FONT></TD>
</TR>
<TR><TD WIDTH="26%" VALIGN="TOP">
<FONT SIZE=3><P>/r [&lt;integer&gt;]</FONT></TD>
<TD WIDTH="74%" VALIGN="TOP">
<FONT SIZE=3><P>Recursively filter subdirectories.  The optional integer parameter specifies the depth to which to recurse.  If no integer is specified, or if the integer is 0, full recursion is assumed.  By default, the recursion depth is 1.</FONT></TD>
</TR>
<TR><TD WIDTH="26%" VALIGN="TOP">
<FONT SIZE=3><P>/c &lt;integer&gt;</FONT></TD>
<TD WIDTH="74%" VALIGN="TOP">
<FONT SIZE=3><P>The number of times to loop.  If the integer is 0, the test loops infinitely.  By default, the test loops only once.</FONT></TD>
</TR>
</TABLE>

<P>NOTE: You must include a space between the command line switch and the value.</P>

<P>You can invoke the IFilter Test Suite from the command line as follows:</P>

<P>ifilttst /i test.htm /l /d /v 1</P>

<P>The above command line tells the program to filter the file &quot;test.htm&quot;, redirect the log messages to &quot;test.htm.log&quot;, redirect the dump messages to &quot;test.htm.dmp&quot; and to set the verbosity to 1.  </P>

<P>For the above command to work, three files must be located in the current working directory: ifilttst.exe, ifilttst.ini and test.htm.  The significance of ifilttst.ini is described in the next section. </P>
<h2><A NAME="System Requirements">System Requirements</A></h2>

<P>To run the filter test suite on your machine, you must have IIS installed on Windows NT Server or IIS Peer Web Services installed on Windows NT Workstation, and Microsoft Index Server, version 1.0 or later.</P>
</blockquote>

<hr>
<h1><A NAME="The ifilttst.ini File">The ifilttst.ini File</A></h1>

<P>An IFilter object is initialized by calling IFilter::Init().  Init() takes four parameters, grfFlags, cAttributes, aAttributes and pdwFlags.  The user of the IFilter Test Suite can specify the values for these parameters in a file called ifilttst.ini.  Page 6 shows a sample ifilttst.ini file.  </P>

<P>The file is broken up into sections, with the section name enclosed in square brackets.  In the example, the sections are named Test1, Test2, etc..  All section names must be unique.  The test will read the values from the first  section and initialize the filter with them.  Then it will run all of its tests using this filter configuration.  It will then release the filter and reinitialize it, using parameters from the next section.  It repeats the process until there are no more configurations left to test.  </P>

<P>Each section contains a complete description of the parameters for IFilter::Init().   The parameters are described in separate fields, called entries.  The entries are described on the next page.</P>


<TABLE BORDER CELLSPACING=1 BORDERCOLOR="#000000" CELLPADDING=7 WIDTH=590>
<TR><TD WIDTH="17%" VALIGN="TOP">
<FONT SIZE=4><P>Entry</FONT></TD>
<TD WIDTH="83%" VALIGN="TOP">
<FONT SIZE=4><P>Value of entry</FONT></TD>
</TR>
<TR><TD WIDTH="17%" VALIGN="TOP">
<P>Flags</TD>
<TD WIDTH="83%" VALIGN="TOP">
<P>the names of the IFILTER_INIT flags that are to be OR’ed together to form the grfFlags parameter.  They must be in all caps, and they must all be on the same line.</TD>
</TR>
<TR><TD WIDTH="17%" VALIGN="TOP">
<P>cAttributes</TD>
<TD WIDTH="83%" VALIGN="TOP">
<P>A decimal integer representing the value of the cAttributes parameter. </TD>
</TR>
<TR><TD WIDTH="17%" VALIGN="TOP">
<P>aAttributes<a href="#FOOTNOTE_1">[1]</a></TD>
<TD WIDTH="83%" VALIGN="TOP">
<P>The first token must be a GUID.  The GUID must be formatted exactly as shown in section [Test3].  The second token may be either a propid (consisting of a number in hexadecimal notation) or a lpwstr (a pointer to a wide character string).  A lpwstr can be specified by enclosing the string in double quotes (see section [Test6]).  </TD>
</TR>
</TABLE>


<P>If the Flags and cAttributes entries are not specified, they default to zero.  If you set cAttributes equal to 2, you will usually want to specify 2 aAttributes;  however, you do not have to.  In section [Test5], cAttributes is 1, but no aAttributes have been specified.   The test will then call IFilter::Init() with cAttributes equal to 1, and aAttributes equal to NULL.  This is a useful test case, since it is likely to cause an access violation in IFilter::Init().  </P>

<P>There is no entry for the pdwFlags parameter since this parameter is used solely to return a value to the caller; it does not need to have any special value prior to the call to Init().</P>

<P>If ifilttst.exe cannot find a file named ifilttst.ini in the present working directory,  it uses a default configuration to initialize the filter object.  Below is the default configuration:</P>


<blockquote>
<FONT FACE="Courier">[default]<br>
grfFlags = IFILTER_INIT_APPLY_INDEX_ATTRIBUTES<br>
cAttributes = 0<br>
</FONT>
</blockquote>

<hr>
<h1><A NAME="Sample Ifilttst.ini file">Sample Ifilttst.ini file</A></h1>
<blockquote>
<p><FONT FACE="Courier" SIZE=2>; Only extract text from the object<br>
[Test1]<br>
Flags = <br>
cAttributes = 0<br></p>

<p>; Get all attributes (text and pseudo-properties)<br>
[Test2]<br>
Flags = IFILTER_INIT_APPLY_INDEX_ATTRIBUTES<br>
cAttributes = 0<br></p>

<p>; This also extracts just text from the object (the GUID is PSGUID_STORAGE, and the propid is <br>
; PID_STG_CONTENTS)<br>
[Test3]<br>
Flags = IFILTER_INIT_CANON_PARAGRAPHS IFILTER_INIT_HARD_LINE_BREAKS <br>
cAttributes = 1<br>
aAttributes1 = b725f130-47ef-101a-a5f1-02608c9eebac 13<br></p>

<p>; Only extract requested attribute from the html object (the GUID corresponds to the html filter)<br>
[Test4]<br>
Flags = IFILTER_INIT_CANON_HYPHENS IFILTER_INIT_CANON_SPACES <br>
cAttributes = 1<br>
aAttributes1 = 70eb7a10-55d9-11cf-b75b-00aa0051fe20 2<br></p>

<p>; What happens if cAttributes is non-zero, but aAttributes is empty?<br>
[Test5]<br>
Flags = IFILTER_INIT_CANON_SPACES IFILTER_INIT_APPLY_INDEX_ATTRIBUTES IFILTER_INIT_APPLY_OTHER_ATTRIBUTES<br>
cAttributes = 1<br></p>

<p>; Here is an attribute with a lpwstr instead of a propid (the lpwstr is enclosed in quotes)<br>
; The GUID corresponds to the meta tag clsid for the HTML filter.<br>
[Test6]<br>
Flags = <br>
cAttributes = 1<br>
aAttributes1 = D1B5D3F0-C0B3-11CF-9A92-00A0C908DBF1 &quot;GENERATOR&quot;<br>
</FONT>
</p>
</blockquote>

<hr>
<h1><A NAME="IFilter Test Procedure">IFilter Test Procedure</A></h1>

<P>Once the filter has been initialized, the program conducts a series of tests on the filter.  These tests are described below.</P>

<blockquote>
<h2><A NAME="Validation Test">Validation Test</A></h2>

<P>The validation test steps through the object one chunk at a time, verifying each individual chunk and all return codes.  This function will save all returned STAT_CHUNK objects in a list.  The validation test verifies the following:</P>


<UL>
<LI>Chunk ID’s are unique and increasing</LI>
<LI>STAT_CHUNK.flags is a recognized chunk state (CHUNK_TEXT or CHUNK_VALUE)</LI>
<LI>STAT_CHUNK.breakType is a recognized break type (0,1,2,3,4)</LI>
<LI>If the filter initialization attributes specify that the filter should only return chunks containing pseudo-properties, idChunkSource must equal 0.</LI>
<LI>If chunk is not derived, i.e., it is not a pseudo-property, idChunkSource must equal idChunk.  </LI>
<LI>GetChunk() returns S_OK or an accepted value (FILTER_E_END_OF_CHUNKS, FILTER_E_LINK_UNAVAILABLE, etc.)</LI>
<LI>If the chunk contains text, GetText() returns S_OK,  FILTER_S_LAST_TEXT, or FILTER_E_NO_MORE_TEXT.</LI>
<LI>If GetText() returns FILTER_S_LAST_TEXT, the next call to GetText() should return FILTER_E_NO_MORE_TEXT.</LI>
<LI>If the chunk contains a value, GetValue() returns S_OK or FILTER_E_NO_MORE_VALUES.</LI></UL>

<h2><A NAME="Consistency Test">Consistency Test</A></h2>

<P>The test suite reinitializes the IFilter with the same parameters as before and performs a consistency test.  This test checks to make sure that the STAT_CHUNK structures returned are identical to those returned earlier in the validation test.  The consistency test verifies the following:</P>


<UL>
<LI>Each STAT_CHUNK returned by GetChunk() is exactly identical to the corresponding STAT_CHUNK returned in the validation test.</LI>
<LI>GetChunk() returns S_OK or an accepted value (FILTER_E_END_OF_CHUNKS, FILTER_E_LINK_UNAVAILABLE, etc.)</LI></UL>

<h2><A NAME="Invalid Input Test">Invalid Input Test</A></h2>

<P>The test suite reinitializes the IFilter with the same parameters and performs an invalid input test, which steps through the document one chunk at a time making incorrect function calls, such as GetValue() when the current chuck contains text.  The test checks all return codes for compliance with the IFilter specification.  The invalid input test verifies the following:</P>


<UL>
<LI>If the current chunk contains text, GetValue() returns FILTER_E_NO_VALUES.  Then, a call to GetText() should succeed.</LI>
<LI>If the current chunk contains a value, GetText() should return FILTER_E_NO_TEXT.  Then a call to GetValue() should succeed.</LI>
<LI>If the previous call to GetText() returned FILTER_E_NO_MORE_TEXT, successive calls to GetText() should return FILTER_E_NO_MORE_TEXT.</LI>
<LI>If the previous call to GetValue() returned FILTER_E_NO_MORE_VALUES, successive calls to GetValue() should return FILTER_E_NO_MORE_VALUES.</LI>
<LI>If the previous call to GetChunk() returned FILTER_E_END_OF_CHUNKS, successive calls to GetChunk() should return FILTER_E_END_OF_CHUNKS.</LI>
<LI>In addition, the test compares the current chunk structures to those returned in the validation test to make sure they are identical.</LI></UL>

<h2><A NAME="Testing Different IFilter Configurations">Testing Different IFilter Configurations</A></h2>

<P>The test suite releases the IFilter object and rebinds, this time initializing it with the next set of parameters.  The test repeats the cycle: validation test, consistency test, and invalid input test, until all the desired IFilter configurations, as specified in ifilttst.ini, have been tested.</P>
</blockquote>

<hr>
<h1><A NAME="Sample Log File">Sample Log File</A></h1>

<P>Here is some excerpts from a log file, with the verbosity set to 3 (highest verbosity):  </P>

<OL>

<FONT FACE="Courier" SIZE=1><LI>INFO----**** New configuration ****</LI>
<LI VALUE=1></LI>
<LI VALUE=2>Section name : Test2</LI>
<LI VALUE=3>grfFlags     : 63</LI>
<LI VALUE=4>cAttributes  : 0</LI>
<LI VALUE=5>aAttributes  : NONE</LI>
<LI VALUE=6>pdwFlags     : 0</LI>
<LI VALUE=7></LI>
<LI VALUE=8>INFO----Successfully bound filter.</LI>
<LI VALUE=9></LI>
<LI VALUE=10>PASS----Init() returned a valid value for pdwFlags.</LI>
<LI VALUE=11></LI>
<LI VALUE=12>INFO----Successfully initialized filter.</LI>
<LI VALUE=13></LI>
<LI VALUE=14>INFO----Performing validation test. In this part of the test, the chunks structures</LI>
<LI VALUE=15>        returned by the filter are checked for correctness, and the return values</LI>
<LI VALUE=16>        of the filter calls are checked.</LI>
<LI VALUE=17></LI>
<LI VALUE=18>PASS----GetChunk() succeeded.</LI>
<LI VALUE=19></LI>
<LI VALUE=20>PASS----The current chunk has a legal value for the flags field.</LI></OL>

</FONT>
<P>The first line is an informational message, indicating that a new configuration has been loaded from the ifilttst.ini file.  Line (3) indicates the section name in the ifilttst.ini file from which the current configuration has been read.  Lines (4) through (7) list the parameters to IFilter::Init().  The lines starting with "INFO" are informational messages about the binding of the filter and start of the validation test.  Lines starting with "PASS" are messages regarding specific tests which have passed.</P>

<FONT FACE="Courier" SIZE=1><P>WARNING-First call to GetText() returned FILTER_E_NO_MORE_TEXT.</P>
</FONT>
<P>The line above is a warning.  Warnings call attention to filter behavior that is suspicious, although legal.  The above warning indicates that GetChunk() has returned a text chunk with no text in it.  </P>

<FONT FACE="Courier" SIZE=1><P>ERROR---The filter has emitted a chunk which it was not requested to emit. Check</P>
<P> the initialization parameters in section Test1 of the initialization file.</P>
<P></P>
<P>INFO----Current chunk propid : 0x5</P>
</FONT>
<P>Here is an example of an error message.  In this case, the filter has emitted a chunk with a propid of 0x5.  Inspection of section [Test1] in ifilttst.ini would show that the filter was configured to not emit chunks with this propid.  For instance, if neither IFILTER_INIT_ APPLY_INDEX_ATTRIBUTES nor IFILTER_INIT_APPLY_OTHER_ATTRIBUTES were specified in the Flags entry and cAttributes is 0, the filter should only emit chunks with a propid of 0x13, corresponding to PID_STG_CONTENTS.</P>


<hr>
<h1><A NAME="Sample Dump File">Sample Dump File</A></h1>

<P>Here is an excerpt from a dump file:</P>

<OL>

<FONT FACE="Courier" SIZE=1><LI>Chunk ID: ........... 2</LI>
<LI VALUE=1>Chunk Break Type: ... END OF SENTENCE</LI>
<LI VALUE=2>Chunk State: ........ TEXT</LI>
<LI VALUE=3>Chunk Locale: ....... 0x411</LI>
<LI VALUE=4>Chunk Source ID: .... 2</LI>
<LI VALUE=5>Chunk Start Source .. 0x0</LI>
<LI VALUE=6>Chunk Length Source . 0x0</LI>
<LI VALUE=7>GUID ................ b725f130-47ef-101a-a5f1-02608c9eebac</LI>
<LI VALUE=8>Property ID ......... 0x13</LI>
<P></P>
<LI VALUE=9>This is a HTML filter test page</LI>
<P></P>
<LI VALUE=10>Chunk ID: ........... 3</LI>
<LI VALUE=11>Chunk Break Type: ... END OF SENTENCE</LI>
<LI VALUE=12>Chunk State: ........ TEXT</LI>
<LI VALUE=13>Chunk Locale: ....... 0x411</LI>
<LI VALUE=14>Chunk Source ID: .... 2</LI>
<LI VALUE=15>Chunk Start Source .. 0x0</LI>
<LI VALUE=16>Chunk Length Source . 0x0</LI>
<LI VALUE=17>GUID ................ f29f85e0-4ff9-1068-ab91-08002b27b3d9</LI>
<LI VALUE=18>Property ID ......... 0x2</LI>
<P></P>
<LI VALUE=19>This is a HTML filter test page</LI>
<P></P>
<LI VALUE=20>Chunk ID: ........... 4</LI>
<LI VALUE=21>Chunk Break Type: ... END OF SENTENCE</LI>
<LI VALUE=22>Chunk State: ........ VALUE</LI>
<LI VALUE=23>Chunk Locale: ....... 0x411</LI>
<LI VALUE=24>Chunk Source ID: .... 2</LI>
<LI VALUE=25>Chunk Start Source .. 0x0</LI>
<LI VALUE=26>Chunk Length Source . 0x0</LI>
<LI VALUE=27>GUID ................ f29f85e0-4ff9-1068-ab91-08002b27b3d9</LI>
<LI VALUE=28>Property ID ......... 0x2</LI>
<P></P>
<LI VALUE=29>This is a HTML filter test page</LI></OL>
<P></P>

</FONT><P>The first 9 lines describe the current chunk structure.  Note that the GUID and the Property ID correspond to PSGUID_STORAGE / PID_STG_CONTENTS.  This is a chunk containing plain text.  The text follows the chunk structure: &quot;This is a HTML filter test page&quot;.  </P>

<P>The next chunk, starting at line (11), has a different GUID, corresponding to the HTML filter, and a different propid, corresponding to a HTML Href.  This is a pseudo-property, exported by the HTML filter.  The next chunk, starting at line (21), has the same GUID and propid, but its chunk state is VALUE instead of TEXT.  Note that the text in these last two chunks are the same as for the first chunk.  The filter wanted three attributes (plain text, HTML Href as text, and HTML Href as a value) to be applied to this particular phrase, so it was emitted in three separate chunks.  </P>


<hr>
<h4>Footnotes</h4>
<p><a name="FOOTNOTE_1">[1]</a> The name of this entry must start with "aAttributes" and must be different from every other aAttributes entry within the suction.  Legal names for the aAttributes entry are: aAttributes, aAttributes1, aAttributes2, etc.</p>

</BODY>
</HTML>
