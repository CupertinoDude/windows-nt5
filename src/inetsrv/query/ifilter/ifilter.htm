<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">

<html>

<head>
<title>IFilter Interface</title>
<meta name="GENERATOR" content="Microsoft FrontPage 1.1">
</head>

<body bgcolor="#FFFFFF" text="#000000" link="#0000FF" vlink="#800080">
<p>&#160;</p>
<table width=100%>
<tr><td><img src="idx_logo.gif" align=bottom width=170 height=72></td><td><h1 align=center>IFilter Specification v1.5 </h1>
<p align=center><strong>Windows Design Team, September 7, 1996</strong></p>
</td></tr>
</table>
<p>This document describes the IFilter interface, which is used to extract text from objects. The principle use for IFilter is to create document
content filters for use with Microsoft Index Server.</p>
<hr>
<h1>Contents</h1>
<blockquote>
<p><a href="#Introduction"><strong>Introduction</strong></a></p>
<p><a href="#Chunks"><strong>Chunks</strong></a></p>
<p><a href="#Properties and Pseudo-Properties"><strong>Properties and Pseudo-Properties </strong></a></p>
<p><a href="#Embedded and Linked Objects"><strong>Embedded and Linked Objects</strong></a></p>
<p><a href="#Proposed Uses of IFilter"><strong>Proposed Uses of IFilter</strong></a></p>
</blockquote>
<blockquote>
<blockquote>
<p><a href="#Full Text Search">Full Text Search</a></p>
<p><a href="#Viewing">Viewing</a></p>
</blockquote>
<p><a href="#IFilter"><strong>IFilter</strong></a></p>
<blockquote>
<p><a href="#IFilter::Init">IFilter::Init</a></p>
<blockquote>
<p><a href="#Text canonicalization"><em>Text canonicalization</em></a></p>
<p><a href="#Attributes"><em>Attributes</em></a></p>
<p><a href="#Chunk Information"><em>Chunk Information</em></a></p>
<p><a href="#Links"><em>Links</em></a></p>
<p><a href="#Flags"><em>Flags</em></a></p>
<p><a href="#Access Failure"><em>Access Failure</em></a></p>
</blockquote>
</blockquote>
<blockquote>
<p><a href="#IFilter::GetChunk">IFilter::GetChunk</a></p>
<p><a href="#IFilter::GetText">IFilter::GetText</a></p>
<p><a href="#IFilter::GetValue">IFilter::GetValue</a></p>
<p><a href="#IFilter::BindRegion">IFilter::BindRegion</a></p>
</blockquote>
</blockquote>
<p>&#160;</p>
<hr>
<h1><a name="Introduction">Introduction</a></h1>
<p>The primary purpose of the IFilter interface is to extract text, without formatting, from documents. IFilter is the foundation upon which higher
level operations such as document indexing or application-independent viewers can be built. </p>
<p>Although clients of IFilter may use the interface in any way they see fit, it was designed to meet the specific needs of full text search engines.
An IFilter will scan objects for plain text and properties (attributes). The search engine must break the result of <tt>IFilter::GetText</tt> apart
into words, normalize them and store the results in an index. It may use the locale identifier specified with a text chunk to perform proper
language-specific word breaking and normalization. </p>
<hr>
<h1><a name="Chunks">Chunks</a></h1>
<p>Each object can be asked to produce the &#147;chunks&#148; of Unicode text contained within itself. Text within one chunk is intended to be a linear,
sequential flow of text with the same attribute and locale. Thus, two pieces of text that do not have such a relationship between each other
would be in different chunks. Separate text boxes in a graphics file, labels and titles on charts, and possibly even text in separate cells of a
spreadsheet are all examples of text in separate chunks. </p>
<p>Each chunk is given a chunk id that uniquely identifies the chunk. These ids are guaranteed to remain constant until the IFilter interface is
released. Repeated instantiations of the IFilter interface with the same initial parameters will produce the same set of chunks. Multiple
instantiations with different initial parameters may produce a different set of chunks. Changing the set of attributes (see following section) may
re-partition the chunks of an object. Chunk id 0 is invalid. </p>
<p>Chunks may overlap, but a specific attribute should be applied to a given character at most one time. </p>
<hr>
<h1><a name="Properties and Pseudo-Properties">Properties and Pseudo-Properties </a></h1>
<p>Text extracted via IFilter may be tagged with many attributes, but only one attribute at a time. When these attributes refer to textual chunks
they are treated as properties by the content index but are not treated as properties by the system. They are known as <i>pseudo-properties</i>. </p>
<p>Pseudo-properties are not accessible through the standard OLE IPropertyStorage interface. Pseudo-properties allow the user to search for
documents based on the value of some internal field in the document that has not been exposed as a property to the system. For example, a
spreadsheet describing monthly sales for an employee might export <i>employee-id</i> and <i>total-sales</i> pseudo-properties. This would enable a
query for all spreadsheets (months) in which some employee sold more than <i>x</i> dollars. </p>
<p>Pseudo-property names must follow OLE property naming conventions. Each pseudo-property must be specified as <i>property set\property</i>.
Failure to follow this naming convention will result in unpredictable query behavior. Specifying a pseudo-property name which matches a true
property name may also result in undefined query behavior. </p>
<p>The IFilter author may also choose to publish OLE style properties via IFilter. These properties are retrieved using the <tt>IFilter::GetValue</tt>
call. Logically, they should be considered external annotations of a document. For example, this mechanism can be used to publish HTML
anchors. If a class supports retrieval of OLE properties via IPropertyStorage, the IFilter author has the option of requesting the caller of
IFilter use IPropertyStorage to enumerate OLE properties, either in lieu of or to supplement properties emitted via <tt>IFilter::GetValue</tt>. </p>
<hr>
<h1><a name="Embedded and Linked Objects">Embedded and Linked Objects</a></h1>
<p>An object must enumerate the chunks of text in its embeddings. These nested chunks appear to the original caller as chunks of the outer
object. There is no operating system support provided for this operation. Providers of IFilter are responsible for binding to the IFilter interface
of embedded objects. If the current chunk is within an embedding, all <tt>GetText</tt> and <tt>GetValue</tt> calls should be passed directly to the
embedding's IFilter and the return values from the embedding should be returned to the client. Other calls require some additional work.
<tt>GetChunk</tt>, for example, may require renumbering chunk ids to make them unique. </p>
<p>An object can optionally be asked to enumerate the chunks of text `contained' in its linked objects. As with embedded objects, providers of
IFilter are responsible for binding to the IFilter interface of linked objects, then renumbering the chunks of the linked objects so they will
appear to the original caller as chunks of the outer object. The same rules that apply to an embedding's chunks apply to a link's chunks. </p>
<p>The original source of a chunk (embedding, link, or top-level object) is not exposed by IFilter. </p>
<hr>
<h1><a name="Proposed Uses of IFilter">Proposed Uses of IFilter</a></h1>
<p>Although clients of IFilter may use the interface in any way they see fit, it was designed to meet the specific needs for two tasks: filtering and
viewing (browsing / hit-highlighting). They are described below. </p>
<blockquote>
<h2><a name="Full Text Search">Full Text Search</a></h2>
<p>Full text search engines are the simpler of the two filter clients. They will merely scan objects for plain text, pseudo properties
and full properties. They will break the result of <tt>IFilter::GetText</tt> apart into words, normalize them and then store the
result in an inverted index. The locale identifier specified with a text chunk is used to perform proper language-specific word
breaking and normalization. Full properties are retrieved via <tt>IFilter::GetValue</tt> and are (optionally) stored in a lookaside
property cache. </p>
<h2><a name="Viewing">Viewing</a></h2>
<p>Document viewing will be used to display the results of full text queries. A simplistic model of the viewing process is that
documents matching a query will be 'indexed' on-the-fly and the resulting in-memory index will be searched to locate query
hits. A document viewer will highlight and navigate between these hits. </p>
</blockquote>
<hr>
<h1><a name="IFilter">IFilter</a></h1>
<blockquote>
<p><tt>interface IFilter : public IUnknown<br>
{<br>
SCODE Init( ULONG grfFlags,<br>
ULONG cAttributes,<br>
FULLPROPSPEC const * aAttributes,<br>
DWORD * pdwFlags );<br>
<br>
SCODE GetChunk( STAT_CHUNK * pStat );<br>
<br>
SCODE GetText( ULONG * pcwcBuffer,<br>
WCHAR * awcBuffer );<br>
<br>
SCODE GetValue( PROPVARIANT ** ppPropValue );<br>
<br>
SCODE BindRegion( FILTERREGION origPos,</tt> </p>
<p><tt>REFIID riid,<br>
void * * ppunk );<br>
<br>
}</tt> </p>
</blockquote>
<blockquote>
<h2><a name="IFilter::Init">IFilter::Init</a></h2>
<blockquote>
<p><tt>SCODE IFilter::Init( ULONG grfFlags,<br>
ULONG cAttributes,<br>
FULLPROPSPEC const * aAttributes,<br>
DWORD * pdwFlags );<br>
</tt></p>
</blockquote>
<p>This method is called to initialize the filtering session. If the interface is successfully initialized then calls to other IFilter functions
may be made. Once a successful call has been made to <tt>Init</tt> the object must appear frozen from the point of view of the
caller. The object is frozen until the filter object is released. </p>
<p>Multiple calls to <tt>Init</tt> reset the state of the filter object. The filter is re-positioned to the beginning of the object and the object
state is frozen. Chunk ids must remain consistent across multiple calls to <tt>Init</tt> with the same parameters. </p>
<p><tt>grfFlags</tt> is a group of flags taken from the enumeration <tt>IFILTER_INIT</tt>. They control text canonicalization, attribute output,
embedding scope and IFilter access patterns. </p>
<p><tt>typedef enum tagIFILTER_INIT<br>
{<br>
IFILTER_INIT_CANON_PARAGRAPHS = 1,<br>
IFILTER_INIT_HARD_LINE_BREAKS = 2,<br>
IFILTER_INIT_CANON_HYPHENS = 4,<br>
IFILTER_INIT_CANON_SPACES = 8,<br>
<br>
IFILTER_INIT_APPLY_INDEX_ATTRIBUTES = 16,<br>
IFILTER_INIT_APPLY_OTHER_ATTRIBUTES = 32,<br>
IFILTER_INIT_INDEXING_ONLY = 64,<br>
<br>
IFILTER_INIT_SEARCH_LINKS = 128<br>
} IFILTER_INIT;</tt> </p>
<p><tt>typedef enum tagIFILTER_FLAGS</tt> </p>
<p><tt>{</tt> </p>
<p><tt>IFILTER_FLAGS_OLE_PROPERTIES = 1</tt> </p>
<p><tt>} IFILTER_FLAGS;</tt> </p>
</blockquote>
<blockquote>
<blockquote>
<h3><a name="Text canonicalization">Text canonicalization</a></h3>
<p>Generally the text output via <tt>GetText</tt> should exactly match the actual text of the document, but in order to
achieve maximum interoperability some canonicalization of common features is desirable. These features
include paragraph breaks, line breaks, hyphens and spaces. </p>
<p>The four flags controlling canonicalization of the output text are defined as follows: </p>
<p><tt>IFILTER_INIT_CANON_PARAGRAPHS<br>
</tt>Paragraph breaks should be marked with the Unicode PARAGRAPH SEPARATOR (0x2029). I don't think
anyone is actually planning on using this right now but it doesn't cost anything to define.. </p>
<p><tt>IFILTER_INIT_HARD_LINE_BREAKS</tt><br>
Soft line breaks (such as end of line in Microsoft&#174; Word) should be replaced by hard line breaks, LINE
SEPARATOR (0x2028). Existing hard line breaks may be doubled. Any of carriage return (0x000D), line
feed (0x000A), or the carriage return and line feed combination should be considered a hard line break. The
intent is to enable pattern-expression matchers that match against the observed line breaks. </p>
<p><tt>IFILTER_INIT_CANON_HYPHENS</tt><br>
Various word processors have forms of hyphens that are not represented in the host character set, such as
optional hyphens (appearing only at end of line) and non-breaking hyphens. This flag indicates that optional
hyphens are to be nulled out, and non-breaking hyphens are to be converted to normal, plain hyphens
(0x2010), or HYPHEN-MINUSES (0x002D). </p>
<p><tt>IFILTER_INIT_CANON_SPACES</tt><br>
As the previous flag canonicalizes hyphens, this one canonicalizes spaces. All special space characters, such
as non-breaking spaces, etc., are to be converted to the standard SPACE character (0x0020). </p>
<p>IFilter servers are also allowed to embed null characters in the text, which will be [nearly] ignored by clients.
Unicode character 0x0000 will be completely ignored, and 0x0001 will be treated as a word break. <a href="#FOOTNOTE_1">[1]</a> </p>
<h3><a name="Attributes">Attributes</a></h3>
<p>Different clients of the IFilter interface will want different views of an object. Two flags in <tt>grfFlags</tt> control
the set of attributes that should be applied to chunks. They are defined as follows: </p>
<p><tt>IFILTER_INIT_APPLY_INDEX_ATTRIBUTES</tt><br>
The client wants text split into chunks representing pseudo-properties. </p>
<p><tt>IFILTER_INIT_APPLY_OTHER_ATTRIBUTES</tt><br>
Any attributes not covered by the previous two flags should be emitted. </p>
<p>It's not clear what these attributes would be. This flag exists for completeness. </p>
<p>In addition to the attribute categories specified above, specific attributes may also be requested as an array of
size <tt>cAttributes,</tt> stored in <tt>aAttributes</tt>. If <tt>cAttributes</tt> is non-zero this takes precedence over
attribute specification in <tt>grfFlags</tt> and only the attributes in <tt>aAttributes</tt> will be returned. </p>
<p>If no attribute flags are specified and <tt>cAttributes</tt> is zero then CONTENTS <a href="#FOOTNOTE_2">[2]</a> is assumed. </p>
<h3><a name="Chunk Information">Chunk Information</a></h3>
<p>Because the IFilter implementation will need to store some chunk information when operations other than
content indexing occur, the following flag has been added to allow IFilter to be optimized for the indexing
situation: </p>
<p><tt>IFILTER_INIT_INDEXING_ONLY<br>
</tt>The client will only be calling <tt>Init</tt> once. The client will not be using the function <tt>BindRegion</tt>. The eliminates
the possibility of accessing a chunk both before and after accessing another chunk. </p>
<h3><a name="Links">Links</a></h3>
<p>For viewing purposes, it may be desirable to search across links as well as in the document and its
embeddings. For this reason, we have defined the following flag: </p>
<p><tt>IFILTER_INIT_SEARCH_LINKS<br>
</tt>This flag indicates that the text extraction process must recursively search all links within the document. If a
link is unavailable, the <tt>GetChunk</tt> call where the first chunk of the link would have been returned should return
<tt>FILTER_E_LINK_UNAVAILABLE</tt>. </p>
<h3><a name="Flags">Flags</a></h3>
<p>The <tt>pdwFlags</tt> parameter allows the IFilter implementation to pass information back to the caller. Currently,
the only valid flag is: </p>
<p><tt>IFILTER_FLAGS_OLE_PROPERTIES<br>
</tt>This flag indicates that the caller should use the IPropertySetStorage and IPropertyStorage interfaces to
locate additional properties. When this flag is set, properties available via OLE property enumeration should
not be returned from IFilter. </p>
<p>If OLE properties should not be enumerated, then <tt>pdwFlags</tt> should be set to zero. </p>
<h3><a name="Access Failure">Access Failure</a></h3>
<p>For some implementations of IFilter, it may not be possible (or may be computationally expensive) to detect
failure to access a document until <tt>Init</tt> is called, or possibly even later. If access is denied due to password
protection or other similar security measures then <tt>FILTER_E_PASSWORD</tt> should be returned. Other access
failures can be reported via <tt>FILTER_E_ACCESS</tt>. </p>
</blockquote>
</blockquote>
<blockquote>
<h2><a name="IFilter::GetChunk">IFilter::GetChunk</a></h2>
<p><tt>SCODE IFilter::GetChunk( STAT_CHUNK * pStat );<br>
</tt></p>
<p><tt>GetChunk</tt> positions the filter at the beginning of the next chunk and returns a description of the chunk in <tt>pStat</tt>. After this
call, the chunk described in <tt>pStat</tt> is the <i>current chunk</i>. The chunk descriptor is owned by the caller, but the property name
pointer which may be set in the property specification is owned by the callee and should <b>not</b> be freed. Several operations (see
below) can only be applied to the current chunk. Before <tt>GetChunk</tt> has been called for the first time, there is no current
chunk. When the current chunk is the last chunk, additional call(s) to <tt>GetChunk</tt> will return <tt>FILTER_E_END_OF_CHUNKS</tt>. If
the next chunk is an embedding for which a filter is not available, this call will return <tt>FILTER_E_EMBEDDING_UNAVAILABLE</tt>.
If the next chunk is in an unavailable link, this call will return <tt>FILTER_E_LINK_UNAVAILABLE</tt>. Access failure may also be
reported with <tt>FILTER_E_PASSWORD</tt> and <tt>FILTER_E_ACCESS</tt>. After an error return code of anything other than
<tt>FILTER_E_END_OF_CHUNKS</tt> the next call to IFilter will still fetch the next chunk after the unavailable one. </p>
<p>A description of the active chunk will be placed in <tt>*pStat</tt>. This structure is defined as follows: </p>
<blockquote>
<p><tt>typedef enum tagCHUNKSTATE<br>
{<br>
CHUNK_TEXT = 0x1,<br>
CHUNK_VALUE = 0x2<br>
} CHUNKSTATE;<br>
</tt></p>
<p><tt>typedef enum tagCHUNK_BREAKTYPE<br>
{<br>
CHUNK_NO_BREAK = 0,<br>
CHUNK_EOW = 1,<br>
CHUNK_EOS = 2,<br>
CHUNK_EOP = 3,<br>
CHUNK_EOC = 4<br>
} CHUNK_BREAKTYPE;<br>
</tt></p>
<p><tt>typedef tagSTAT_CHUNK<br>
{<br>
ULONG idChunk;<br>
CHUNK_BREAKTYPE breakType;<br>
CHUNKSTATE flags;<br>
LCID locale;<br>
FULLPROPSPEC attribute;</tt> </p>
<p><tt>ULONG idChunkSource;</tt> </p>
<p><tt>ULONG cwcStartSource;</tt> </p>
<p><tt>ULONG cwcLenSource;<br>
} STAT_CHUNK;</tt> </p>
</blockquote>
<p>The chunk id for this chunk is returned in <tt>idChunk</tt>. It must be unique from every other chunk id returned by <tt>GetChunk</tt>
during a single instantiation of IFilter. Chunk ids must be in increasing order. The order in which chunks are returned should
correspond to the order of their text in the source document. Some search engines may take advantage of the inter-attribute
proximity exposed between chunks of various attributes. </p>
<p>The <tt>breakType</tt> field contains the type of break that precedes this chunk. These are defined as follows: </p>
<blockquote>
<p><tt>CHUNK_NO_BREAK</tt><br>
This means that there will be no break placed between this chunk and the previous chunk-- the chunks will be
glued together. All of the information in <tt>pStat</tt> except for <tt>breakType</tt> and <tt>idChunk</tt> will be taken from the
most recent <tt>STAT_CHUNK</tt> that did not specify <tt>CHUNK_NO_BREAK</tt>. The other fields in <tt>pStat</tt> will not be
modified. On exit, they will contain whatever value was in them on entry to <tt>GetChunk</tt>. Derived chunks
cannot be glued using <tt>CHUNK_NO_BREAK</tt>. A single word cannot span more than two glued chunks. </p>
<p><tt>CHUNK_EOW</tt><br>
This means that there will be a word break placed between this chunk and the previous chunk that had the
same attribute. Use of <tt>CHUNK_EOW</tt> should be minimized. <a href="#FOOTNOTE_3">[3]</a> </p>
<p><tt>CHUNK_EOS</tt><br>
This means that there will be a sentence break placed between this chunk and the previous chunk that had the
same attribute. </p>
<p><tt>CHUNK_EOP</tt><br>
This means that there will be a paragraph break placed between this chunk and the previous chunk that had
the same attribute. </p>
<p><tt>CHUNK_EOC</tt><br>
This means that there will be a chapter break placed between this chunk and the previous chunk that had the
same attribute. </p>
</blockquote>
<p>A change in attribute implies a word, sentence, paragraph or chapter break. </p>
<p>The <tt>flags</tt> field indicates whether this chunk should be treated as text (for example, a sequence of words) or value. If <tt>flags</tt>
is <tt>CHUNK_TEXT</tt> then <tt>IFilter::GetText</tt> should be used to retrieve the contents of the chunk and parse it as a series of
words. If <tt>flags</tt> is <tt>CHUNK_VALUE</tt> then <tt>IFilter::GetValue</tt> should be used to retrieve the value and treat it as a single
property value. If the filter wishes the same text to be treated as both text and value it should be emitted twice in two different
chunks. </p>
<p>The <tt>locale</tt> field specifies the language and sub-language of this text. Chunk locale will be used by document indexers to
perform proper normalization of text. If the chunk is not text or a value of type <tt>VT_LPWSTR, VT_LPSTR </tt>or<tt> VT_BSTR </tt>then
this field is ignored. </p>
<p>The <tt>attribute</tt> field specifies which attribute should be applied to this chunk. If the filter wishes the same text to have more
than one attribute, the filter needs to emit the text once for each attribute in separate chunks. </p>
<p>Take the following example that might appear in a book: </p>
<p>&#160;</p>
<table border=1 width=75%>
<tr><td width=100%>The small detective exclaimed, &quot;C'est finis!&quot; <p align=center><b>Confessions</b> </p>
<p>The room was silent for several minutes. After thinking very hard about it, the young woman asked, &quot;But
how did you know?&quot; </p>
</td></tr>
</table>
<p>This section might be broken into chunks as follows: </p>
<table border=1>
<tr><td valign=top><strong>id</strong></td><td valign=top><strong>Text</strong></td><td valign=top><font size=2><strong>breakType</strong></font></td><td valign=top><font size=2><strong>flags</strong></font></td><td valign=top><font size=2><strong>locale</strong></font></td><td valign=top><font size=2><strong>attribute</strong></font></td></tr>
<tr><td valign=top><strong>1</strong></td><td valign=top>The small dete</td><td valign=top><font size=1>N/A</font></td><td valign=top><font size=1>CHUNK_TEXT</font></td><td valign=top><font size=1>ENGLISH_UK</font></td><td valign=top><font size=1>CONTENT</font></td></tr>
<tr><td valign=top><strong>2</strong></td><td valign=top>ctive exclaimed,</td><td valign=top><font size=1>CHUNK_NO_BREAK</font></td><td valign=top><font size=1>N/A</font></td><td valign=top><font size=1>N/A</font></td><td valign=top><font size=1>N/A</font></td></tr>
<tr><td valign=top><strong>3</strong></td><td valign=top>&quot;C'est finis!&quot;</td><td valign=top><font size=2>CHUNK_EOW</font></td><td valign=top><font size=2>CHUNK_TEXT</font></td><td valign=top><font size=2>FRENCH_BELGIAN</font></td><td valign=top><font size=2>CONTENT</font></td></tr>
<tr><td valign=top><strong>4</strong></td><td valign=top>Confessions</td><td valign=top><font size=2>CHUNK_EOC</font></td><td valign=top><font size=2>CHUNK_TEXT</font></td><td valign=top><font size=2>ENGLISH_UK</font></td><td valign=top><font size=2>CHAPTER_NAMES</font></td></tr>
<tr><td valign=top><strong>5</strong></td><td valign=top>Confessions</td><td valign=top><font size=2>CHUNK_EOP</font></td><td valign=top><font size=2>CHUNK_TEXT</font></td><td valign=top><font size=2>ENGLISH_UK</font></td><td valign=top><font size=2>CONTENT</font></td></tr>
<tr><td valign=top><strong>6</strong></td><td valign=top>The room was silent for several minutes.</td><td valign=top><font size=2>CHUNK_EOP</font></td><td valign=top><font size=2>CHUNK_TEXT</font></td><td valign=top><font size=2>ENGLISH_UK</font></td><td valign=top><font size=2>CONTENT</font></td></tr>
<tr><td valign=top><strong>7</strong></td><td valign=top>After thinking very hard about it, the young woman asked, &quot;But
how did you know?&quot;</td><td valign=top><font size=2>CHUNK_EOS</font></td><td valign=top><font size=2>CHUNK_TEXT</font></td><td valign=top><font size=2>ENGLISH_UK</font></td><td valign=top><font size=2>CONTENT</font></td></tr>
</table>
<p>If a <tt>GetChunk</tt> call to an IFilter of an embedding or link returns <tt>FILTER_E_END_OF_CHUNKS</tt>, then it is the responsibility of
the outer IFilter to check to see if there are any more chunks outside of that embedding or link to be returned. For example, if
a document has two embeddings and the first has returned <tt>FILTER_E_END_OF_CHUNKS</tt>, then the outer IFilter must call
<tt>GetChunk</tt> on the IFilter for the next embedding. </p>
<p>In addition, before returning the results of a call to <tt>GetChunk</tt> of an embedded or linked object, the provider must check to
make sure that the chunk id is unique, and if it is not, renumber the chunk and keep a mapping of the new chunk id. </p>
<p>The fields </p>
<blockquote>
<p><tt>ULONG idChunkSource;</tt> </p>
<p><tt>ULONG cwcStartSource;</tt> </p>
<p><tt>ULONG cwcLenSource;</tt> </p>
</blockquote>
<p>are used to describe the source of a derived chunk. If the text of the current non-contents chunk (psuedo-property or
property) is derived from some contents chunk, the idChunkSource is set to the id of the source chunk, cwcStartSource is set
to the offset at which the source text for the chunk starts in the source chunk, and finally cwcLenSource is either set to zero or
to the length of the source text from which the current chunk was derived. Zero signifies that there is character-by-character
correspondence between the source text and the derived text. A non-zero value means that there is no such direct
correspondence. This information is useful for the search engine when it wants to highlight the hits. If the query is done for a
pseudo-property, the search engine will highlight the original text from which the text of the property has been derived. For
instance, for a C++ code filter, when searching for Foo in a pseudo-property &#147;function definitions,&#148; the browser will highlight
the function header inside the contents of a file. If the chunk is not derived, idChunkSource must be the same as idChunk. If
the filter attributes specify a pseudo-property only, then there is no content chunk from which the current pseudo-property
chunk is derived. In this case, idChunkSource must be set to 0, which is an invalid chunk id. </p>
</blockquote>
<blockquote>
<h2><a name="IFilter::GetText">IFilter::GetText</a></h2>
<blockquote>
<p><tt>SCODE IFilter::GetText( ULONG * pcwcBuffer,<br>
WCHAR * awcBuffer );<br>
</tt></p>
</blockquote>
<p><tt>GetText</tt> is used to retrieve the text from the current chunk. If the current chunk does not have a <tt>flags</tt> value of
<tt>CHUNK_TEXT</tt> then the error <tt>FILTER_E_NO_TEXT</tt> will be returned. </p>
<p>On entry, <tt>pcwcBuffer</tt> contains the size, in (Unicode) characters, of <tt>awcBuffer</tt>. On exit, <tt>pcwcBuffer</tt> contains the number
of characters actually written to <tt>awcBuffer</tt>. More than one call to <tt>GetText</tt> may be required to retrieve all the text in the
current chunk. Each call to <tt>GetText</tt> retrieves text immediately following the last call to <tt>GetText</tt>. Note that it is perfectly
legitimate for the last character in one call to be in the middle of a word, and the first character in the next call to continue the
word. Search engines must handle this situation. </p>
<p>When all text in a chunk has been returned the next call to <tt>GetText</tt> should return <tt>FILTER_E_NO_MORE_TEXT</tt>. All additional
calls to <tt>GetText</tt> should return this error until <tt>GetChunk</tt> has been called successfully, advancing to the next chunk. As an
optimization, the last call that returns text may return <tt>FILTER_S_LAST_TEXT,</tt> indicating the next call to <tt>GetText</tt> will return
<tt>FILTER_E_NO_MORE_TEXT</tt>. This can save the client a call. </p>
<h2><a name="IFilter::GetValue">IFilter::GetValue</a></h2>
<blockquote>
<p><tt>SCODE IFilter::GetValue( PROPVARIANT ** ppPropValue );<br>
</tt></p>
</blockquote>
<p><tt>GetValue</tt> is the analog to <tt>GetText</tt> for non-textual attribute values. <tt>GetValue</tt> should only be called once per chunk. Any
additional calls to <tt>GetValue</tt> should return <tt>FILTER_E_NO_MORE_VALUES</tt> until <tt>GetChunk</tt> has been called successfully,
advancing to the next chunk. </p>
<p>Indirect values must be allocated with <tt>CoTaskMemAlloc</tt>. They are owned by the caller of <tt>GetValue</tt>, who must free them
with <tt>CoTaskMemFree</tt>. </p>
<p>If the current chunk does not have a <tt>flags</tt> value of <tt>CHUNK_VALUE</tt> then the error <tt>FILTER_E_NO_VALUES</tt> will be returned.
The effect of publishing the same value from more than 1 chunk is undefined. </p>
</blockquote>
<blockquote>
<h2><a name="IFilter::BindRegion">IFilter::BindRegion</a></h2>
<blockquote>
<p><tt>SCODE IFilter::BindRegion ( FILTERREGION origPos, </tt></p>
<p><tt>REFIID iid<br>
void ** ppunk );<br>
</tt></p>
</blockquote>
<p><tt>BindRegion</tt> is used to retrieve an interface representing the specified portion of the object. This method is for future use, for
example, to enable document viewing. </p>
<p>A <tt>FILTERREGION</tt> structure will be filled in to describe the position of the text. The structure is defined as: </p>
<blockquote>
<p><tt>typedef struct tagFILTERREGION<br>
{<br>
ULONG idChunk;<br>
ULONG cwcStart;<br>
ULONG cwcExtent;<br>
} FILTERREGION;</tt> </p>
</blockquote>
<p>If <tt>cwcExtent</tt> characters beginning at offset <tt>cwcStart</tt> in chunk <tt>idChunk</tt> extends beyond the end of the chunk then the
continuation should be in the next chunk with an identical attribute. If this operation is impossible then
<tt>FILTER_W_REGION_CLIPPED</tt> should be returned. This situation arises when the next identical chunk is in a link or
embedding. </p>
<p>It is acceptable not to implement <tt>BindRegion</tt> and return <tt>E_NOTIMPL</tt>. Not all filters are capable of supporting this method in
a rational way. Filters which are implemented by viewing applications will benefit the most from <tt>IFilter::BindRegion</tt>. </p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><font size=2>The information contained in this document represents the current view of Microsoft Corporation on the issues discussed as of the date of
publication. Because Microsoft must respond to changing market conditions, it should not be interpreted to be a commitment on the part of
Microsoft, and Microsoft cannot guarantee the accuracy of any information presented after the date of publication.<br>
<br>
This document is for informational purposes only. <strong>MICROSOFT MAKES NO WARRANTIES, EXPRESS OR IMPLIED, IN THIS
DOCUMENT.</strong><br>
<br>
&#169; 1996 Microsoft Corporation. All rights reserved.<br>
<br>
Microsoft is a registered trademark of Microsoft Corporation. Other product and company names herein may be the trademarks of their
respective owners.<br>
</font></p>
<p>&nbsp;</p>
</blockquote>
<hr>
<h4>Footnotes</h4>
<p><a name="FOOTNOTE_1">[1]</a> The intent is to provide implementors of IFilter an efficient means to `remove' embedded formatting from text without modifying positional
information. A scrap of HTML such as: </p>
<p><tt>&lt;p&gt;This is a paragraph with &lt;em&gt;emphasized&lt;/em&gt; text.&lt;/p&gt;</tt> </p>
<p>could be filtered as: </p>
<p><tt>***This is a paragraph with ****emphasized**** text.****</tt> </p>
<p>where the `*' represents Unicode 0x0000. </p>
<p><a name="FOOTNOTE_2">[2]</a> CONTENTS is my short name for PSGUID_STORAGE\PID_STG_CONTENTS. </p>
<p><a name="FOOTNOTE_3">[3]</a> Clients of IFilter may choose a word breaking algorithm that is in conflict with <tt>CHUNK_EOW</tt> decisions made in an IFilter implementation. A
content query returns optimal results when the word breaking algorithm used to split phrases in the user's query matches the algorithm used to
split words in the documents. The former is always provided by the search engine. The search engine algorithm is also used to split words
within a chunk, but many small chunks separated by <tt>CHUNK_EOW</tt> may affect its accuracy. </p>
</body>

</html>
