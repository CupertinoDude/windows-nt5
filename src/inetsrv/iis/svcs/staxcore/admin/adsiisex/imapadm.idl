//
// imapadm.idl : IDL source for imapadm.dll
//

// This file will be processed by the MIDL tool to
// produce the type library (imapadm.tlb) and marshalling code.

cpp_quote("")
cpp_quote("/*++")
cpp_quote("")
cpp_quote("Copyright (c) 1997 Microsoft Corporation")
cpp_quote("")
cpp_quote("Module Name: imapadm.h")
cpp_quote("")
cpp_quote("    Imap Admin Object Interfaces")
cpp_quote("")
cpp_quote("--*/")
cpp_quote("")
cpp_quote("#ifndef _IMAPADM_IDL_INCLUDED_")
cpp_quote("#define _IMAPADM_IDL_INCLUDED_")

//
//  Define GUIDS:
//

cpp_quote("")
cpp_quote("/* LIBIDs: */")
cpp_quote("")
cpp_quote("DEFINE_GUID(LIBID_IMAPADMLib, 0x760bef6e, 0xe6ad, 0x11d0, 0xb9, 0x8d, 0x00, 0xc0, 0x4f, 0xc2, 0xf5, 0x10);")


cpp_quote("")
cpp_quote("/* IIDs: */")
cpp_quote("")

#ifndef _ADSIIEX_BUILD
cpp_quote("DEFINE_GUID(IID_IImapAdmin, 0x760bef6f, 0xe6ad, 0x11d0, 0xb9, 0x8d, 0x00, 0xc0, 0x4f, 0xc2, 0xf5, 0x10);")
cpp_quote("DEFINE_GUID(IID_IImapAdminService, 0x760bef70, 0xe6ad, 0x11d0, 0xb9, 0x8d, 0x00, 0xc0, 0x4f, 0xc2, 0xf5, 0x10);")
cpp_quote("DEFINE_GUID(IID_IImapAdminVirtualServer, 0x760bef71, 0xe6ad, 0x11d0, 0xb9, 0x8d, 0x00, 0xc0, 0x4f, 0xc2, 0xf5, 0x10);")
cpp_quote("DEFINE_GUID(IID_IImapAdminVirtualDirectory, 0x760bef73, 0xe6ad, 0x11d0, 0xb9, 0x8d, 0x00, 0xc0, 0x4f, 0xc2, 0xf5, 0x10);")
#endif

cpp_quote("DEFINE_GUID(IID_IImapAdminSessions, 0x760bef72, 0xe6ad, 0x11d0, 0xb9, 0x8d, 0x00, 0xc0, 0x4f, 0xc2, 0xf5, 0x10);")

cpp_quote("")
cpp_quote("/* CLSID: */")
cpp_quote("")

#ifndef _ADSIIEX_BUILD
cpp_quote("DEFINE_GUID(CLSID_CImapAdmin, 0x760bef74, 0xe6ad, 0x11d0, 0xb9, 0x8d, 0x00, 0xc0, 0x4f, 0xc2, 0xf5, 0x10);")
cpp_quote("DEFINE_GUID(CLSID_CImapAdminService, 0x760bef75, 0xe6ad, 0x11d0, 0xb9, 0x8d, 0x00, 0xc0, 0x4f, 0xc2, 0xf5, 0x10);")
cpp_quote("DEFINE_GUID(CLSID_CImapAdminVirtualServer, 0x760bef76, 0xe6ad, 0x11d0, 0xb9, 0x8d, 0x00, 0xc0, 0x4f, 0xc2, 0xf5, 0x10);")
cpp_quote("DEFINE_GUID(CLSID_CImapAdminVirtualDirectory, 0x760bef78, 0xe6ad, 0x11d0, 0xb9, 0x8d, 0x00, 0xc0, 0x4f, 0xc2, 0xf5, 0x10);")
#endif

cpp_quote("DEFINE_GUID(CLSID_CImapAdminSessions, 0x760bef77, 0xe6ad, 0x11d0, 0xb9, 0x8d, 0x00, 0xc0, 0x4f, 0xc2, 0xf5, 0x10);")

cpp_quote("")
cpp_quote("#include <iads.h>")
cpp_quote("")


import "oaidl.idl";


[
	uuid(760bef6e-e6ad-11d0-b98d-00c04fc2f510),
	version(1.0),
	helpstring("imapadm 1.0 Type Library")
]
library IMAPADMLib
{
	importlib("stdole2.tlb");
	importlib("activeds.tlb");

#ifndef _ADSIIEX_BUILD
    #include "binding.idl"
    #include "ipaccess.idl"
    #include "rtsrc.idl"
#endif

	// forward decl
#ifndef _ADSIIEX_BUILD
	interface IImapAdmin;
	interface IImapAdminService;
	interface IImapAdminVirtualServer;
	interface IImapAdminVirtualDirectory;
#endif
	interface IImapAdminSessions;

	//////////////////////////////////////////////////////////////////////
	//
	//      Type definitions:
	//
	//////////////////////////////////////////////////////////////////////

	typedef enum {
			IMAP_SERVER_STATE_UNKNOWN = 0,
			IMAP_SERVER_STATE_STARTING,
			IMAP_SERVER_STATE_STARTED,
			IMAP_SERVER_STATE_STOPPING,
			IMAP_SERVER_STATE_STOPPED,
			IMAP_SERVER_STATE_PAUSING,
			IMAP_SERVER_STATE_PAUSED,
			IMAP_SERVER_STATE_CONTINUING
	} IMAP_SERVER_STATE;



#ifndef _ADSIIEX_BUILD
	[
		object,
		uuid(760bef6f-e6ad-11d0-b98d-00c04fc2f510),
		dual,
		helpstring("IImapAdmin Interface"),
		pointer_default(unique)
	]
	interface IImapAdmin : IDispatch
	{
		//////////////////////////////////////////////////////////////////////
		// Properties:
		//////////////////////////////////////////////////////////////////////

		// Pointers to other IImapAdmin interfaces:
		[propget, helpstring("IImapAdminService")]
			HRESULT ServiceAdmin([out, retval] IDispatch ** ppIDispatch );

		[propget, helpstring("IImapAdminVirtualServer interface")]
			HRESULT	VirtualServerAdmin([out, retval] IDispatch ** ppIDispatch);

		[propget, helpstring("IImapAdminSessions")]
			HRESULT SessionsAdmin([out, retval] IDispatch ** ppIDispatch);

		[propget, helpstring("IImapAdminVirtualDirectory")]
			HRESULT VirtualDirectoryAdmin([out, retval] IDispatch ** ppIDispatch);

		// Which service to configure:

		[propget, helpstring("Computer Name to Configure")]
			HRESULT Server([out, retval] BSTR * pstrServer);
		[propput]
			HRESULT Server ([in] BSTR strServer);

		[propget, helpstring("")]
			HRESULT ServiceInstance([out, retval] long * plServiceInstance);
		[propput]
			HRESULT ServiceInstance([in] long lServiceInstance);

		// Versioning:

		[propget, helpstring("Versioning Information")]
			HRESULT	HighVersion([out, retval] long * plHighVersion);
		
		[propget, helpstring("Versioning Information")]
			HRESULT LowVersion([out, retval] long * plLowVersion);

		[propget, helpstring("Build Number")]
			HRESULT BuildNum([out, retval] long * plBuildNumber);

		[propget, helpstring("Service version #")]
			HRESULT	ServiceVersion([out, retval] long * pdwServiceVersion);


		//////////////////////////////////////////////////////////////////////
		// Methods:
		//////////////////////////////////////////////////////////////////////

		[helpstring("Enumerate service instances")]
			HRESULT EnumerateInstances([out] SAFEARRAY (long) * psaInstanceIds);

		[helpstring("VB script version")]
			HRESULT EnumerateInstancesVariant ( [out, retval] SAFEARRAY (VARIANT) * psaInstanceIds );

		[helpstring("Create a new service instance")]
			HRESULT CreateInstance([out, retval] long * plInstanceId);

		[helpstring("Delete a service instance")]
			HRESULT DestroyInstance([in] long lInstanceId);

		[helpstring("Translate an error code into a string")]
			HRESULT ErrorToString([in] DWORD lErrorCode, [out, retval] BSTR * pstrError);

        [helpstring("HTML tokenize the given string")]
            HRESULT Tokenize ( [in] BSTR strIn, [out, retval] BSTR * pstrOut );
	};


	[
		object,
		uuid(760bef70-e6ad-11d0-b98d-00c04fc2f510),
		dual,
		helpstring("IImapAdminService Interface"),
		pointer_default(unique)
	]
	interface IImapAdminService : IDispatch
	{
		//////////////////////////////////////////////////////////////////////
		// Properties:
		//////////////////////////////////////////////////////////////////////

		// Which service to configure:

		[propget, helpstring("Computer Name to Configure")]
			HRESULT Server ([out, retval] BSTR * pstrServer);
		[propput]
			HRESULT Server ([in] BSTR strServer);

		//
		// general server properties:
		//
		[propget, helpstring("Virtual Server comment")]
			HRESULT Comment([out, retval] BSTR * pstrComment);
		[propput]
			HRESULT Comment([in] BSTR strComment);

		[propget, helpstring("Available authentication packages")]
			HRESULT AuthenticationPackages([out, retval] BSTR * pstrAuthPackages);
		[propput]
			HRESULT AuthenticationPackages([in] BSTR strAuthPackages);

		[propget, helpstring("Clear text authentication package")]
			HRESULT ClearTextAuthPackage([out, retval] BSTR * pstrAuthPackages);
		[propput]
			HRESULT ClearTextAuthPackage([in] BSTR strAuthPackages);

		[propget, helpstring("Authentication mechanism, ie: anon, basic, ntlm")]
			HRESULT AuthenticationMethod([out, retval] long *plAuthMethod);
		[propput]
			HRESULT AuthenticationMethod([in] long lAuthMethod);

		[propget, helpstring("Default logon domain for clear text (basic) authentication")]
			HRESULT DefaultLogonDomain([out, retval] BSTR *pstrLogonDomain);
		[propput]
			HRESULT DefaultLogonDomain([in] BSTR strLogonDomain);

		[propget, helpstring("Server Bindgings")]
			HRESULT ServerBindings([out, retval] SAFEARRAY (BSTR) * psastrServerBindings);
		[propput]
			HRESULT ServerBindings([in] SAFEARRAY (BSTR) sastrServerBindings);

		[propget, helpstring("Secure Bindgings")]
			HRESULT SecureBindings([out, retval] SAFEARRAY (BSTR) * psastrSecureBindings);
		[propput]
			HRESULT SecureBindings([in] SAFEARRAY (BSTR) sastrSecureBindings);

		[propget, helpstring("")]
			HRESULT MaxConnection([out, retval] long * lMaxConnection);
		[propput]
			HRESULT MaxConnection([in] long lMaxConnection);

		[propget, helpstring("")]
			HRESULT ConnectionTimeout([out, retval] long * lConnectionTimeout);
		[propput]
			HRESULT ConnectionTimeout([in] long lConnectionTimeout);

		[propget, helpstring("")]
			HRESULT LogFileDirectory([out, retval] BSTR * pstrLogFileDirectory);
		[propput]
			HRESULT LogFileDirectory([in] BSTR strLogFileDirectory);

		[propget, helpstring("")]
			HRESULT LogFilePeriod([out, retval] long * lLogFilePeriod);
		[propput]
			HRESULT LogFilePeriod([in] long lLogFilePeriod);

		[propget, helpstring("")]
			HRESULT LogFileTruncateSize([out, retval] long * lLogFileTruncateSize);
		[propput]
			HRESULT LogFileTruncateSize([in] long lLogFileTruncateSize);

		[propget, helpstring("")]
			HRESULT LogType([out, retval] long * lLogType);
		[propput]
			HRESULT LogType([in] long lLogType);

		[propget, helpstring("")]
			HRESULT AutoStart([out, retval] BOOL * pfAutoStart);
		[propput]
			HRESULT AutoStart([in] BOOL fAutoStart);

		[propget, helpstring("")]
			HRESULT SSLAccessPermission ( [out, retval] long* plAccessPermission );
		[propput]
			HRESULT SSLAccessPermission ( [in] long lAccessPermission );

		//	Service Status Properties:

		[propget, helpstring("")]
			HRESULT ServerState([out, retval] DWORD * pdwServerState);

		// imap specific:

		[propget, helpstring("")]
			HRESULT DefaultDomain([out, retval] BSTR *pstrDefaultDomainName );
		[propput]
			HRESULT DefaultDomain([in] BSTR strDefaultDomainName );

		[propget, helpstring("")]
			HRESULT RoutingDll([out, retval] BSTR *pstrRoutingDLL);
		[propput]
			HRESULT RoutingDll([in] BSTR strRoutingDLL);

		[propget, helpstring("")]
			HRESULT RoutingSources([out, retval] SAFEARRAY (BSTR) * psastrRoutingSources);
		[propput]
			HRESULT RoutingSources([in] SAFEARRAY (BSTR) sastrRoutingSources);

		[propget, helpstring("To enable/disable expire thread at instance level")]
			HRESULT ExpireInstanceMail([out, retval] long *plExpireInstanceMail);
		[propput]
			HRESULT ExpireInstanceMail([in] long lExpireInstanceMail);

		[propget, helpstring("")]
			HRESULT ExpireDelay([out, retval] long *plExpireDelay);
		[propput]
			HRESULT ExpireDelay([in] long lExpireInstanceDelay);

		[propget, helpstring("")]
			HRESULT ExpireStart([out, retval] long *plExpireStart);
		[propput]
			HRESULT ExpireStart([in] long lExpireInstanceStart);

		//////////////////////////////////////////////////////////////////////
		// Methods:
		//////////////////////////////////////////////////////////////////////

		[helpstring("Get server properties")]
			HRESULT Get();

		[helpstring("Set server properties")]
			HRESULT Set([in, defaultvalue(FALSE)] BOOL fFailIfChanged);
	};


	[
		object,
		uuid(760bef71-e6ad-11d0-b98d-00c04fc2f510),
		dual,
		helpstring("IImapAdminVirtualServer Interface"),
		pointer_default(unique)
	]
	interface IImapAdminVirtualServer : IDispatch
	{
		//////////////////////////////////////////////////////////////////////
		// Properties:
		//////////////////////////////////////////////////////////////////////

		// other interfaces on virtual server
		[propget, helpstring("ITcpAccess ")]
			HRESULT TcpAccess ( [out, retval] ITcpAccess ** ppTcpAccess );

		// Which service to configure:

		[propget, helpstring("Computer Name to Configure")]
			HRESULT Server([out, retval] BSTR * pstrServer);
		[propput]
			HRESULT Server([in] BSTR strServer);

		[propget, helpstring("")]
			HRESULT ServiceInstance([out, retval] long * plServiceInstance);
		[propput]
			HRESULT ServiceInstance([in] long lServiceInstance);

		[propget, helpstring("")]
			HRESULT Administrators([out, retval] SAFEARRAY(BSTR) * psastrAdmins);
		[propput]
			HRESULT Administrators([in] SAFEARRAY(BSTR) psastrAdmins);

		//
		// general server properties:
		//
		[propget, helpstring("Virtual Server comment")]
			HRESULT Comment([out, retval] BSTR *pstrComment);
		[propput]
			HRESULT Comment([in] BSTR strComment);

		[propget, helpstring("")]
			HRESULT Bindings ( [out, retval] IServerBindings ** ppBindings );
		[propget, helpstring("")]
			HRESULT BindingsDispatch ( [out, retval] IDispatch ** ppBindings );

        [propget, helpstring("")]
            HRESULT RoutingSource( [out, retval] IRoutingSource ** ppRoutingSource );
        [propget, helpstring("")]
            HRESULT RoutingSourceDispatch ( [out, retval] IDispatch ** ppRoutingSourceDisp );

		[propget, helpstring("Available authentication packages")]
			HRESULT AuthenticationPackages([out, retval] BSTR * pstrAuthPackages);
		[propput]
			HRESULT AuthenticationPackages([in] BSTR strAuthPackages);

		[propget, helpstring("Clear text authentication package")]
			HRESULT ClearTextAuthPackage([out, retval] BSTR * pstrAuthPackages);
		[propput]
			HRESULT ClearTextAuthPackage([in] BSTR strAuthPackages);

		[propget, helpstring("Authentication mechanism, ie: anon, basic, ntlm")]
			HRESULT AuthenticationMethod([out, retval] long *plAuthentMethod);
		[propput]
			HRESULT AuthenticationMethod([in] long lAuthentMethod);

		[propget, helpstring("Default logon domain for clear text (basic) authentication")]
			HRESULT DefaultLogonDomain([out, retval] BSTR *pstrLogonDomain);
		[propput]
			HRESULT DefaultLogonDomain([in] BSTR strLogonDomain);

		[propget, helpstring("Server Bindgings")]
			HRESULT ServerBindings([out, retval] SAFEARRAY (BSTR) * psastrServerBindings);
		[propput]
			HRESULT ServerBindings([in] SAFEARRAY (BSTR) sastrServerBindings);

		[propget, helpstring("Secure Bindgings")]
			HRESULT SecureBindings([out, retval] SAFEARRAY (BSTR) * psastrSecureBindings);
		[propput]
			HRESULT SecureBindings([in] SAFEARRAY (BSTR) sastrSecureBindings);

		[propget, helpstring("")]
			HRESULT MaxConnection([out, retval] long * lMaxConnection);
		[propput]
			HRESULT MaxConnection([in] long lMaxConnection);

		[propget, helpstring("")]
			HRESULT ConnectionTimeout([out, retval] long * lConnectionTimeout);
		[propput]
			HRESULT ConnectionTimeout([in] long lConnectionTimeout);

		[propget, helpstring("")]
			HRESULT LogFileDirectory([out, retval] BSTR * pstrLogFileDirectory);
		[propput]
			HRESULT LogFileDirectory([in] BSTR strLogFileDirectory);

		[propget, helpstring("")]
			HRESULT LogFilePeriod([out, retval] long * lLogFilePeriod);
		[propput]
			HRESULT LogFilePeriod([in] long lLogFilePeriod);

		[propget, helpstring("")]
			HRESULT LogFileTruncateSize([out, retval] long * lLogFileTruncateSize);
		[propput]
			HRESULT LogFileTruncateSize([in] long lLogFileTruncateSize);

		[propget, helpstring("")]
			HRESULT LogType([out, retval] long * lLogType);
		[propput]
			HRESULT LogType([in] long lLogType);

		[propget, helpstring("")]
			HRESULT AutoStart([out, retval] BOOL * pfAutoStart);
		[propput]
			HRESULT AutoStart([in] BOOL fAutoStart);

		[propget, helpstring("")]
			HRESULT SSLAccessPermission ( [out, retval] long* plAccessPermission );
		[propput]
			HRESULT SSLAccessPermission ( [in] long lAccessPermission );

		//	Service Status Properties:

		[propget, helpstring("")]
			HRESULT ServerState([out, retval] DWORD * pdwServerState);

		// imap specific:

		[propget, helpstring("")]
			HRESULT DefaultDomain([out, retval] BSTR *pstrDefaultDomainName );
		[propput]
			HRESULT DefaultDomain([in] BSTR strDefaultDomainName );

		[propget, helpstring("")]
			HRESULT RoutingDll([out, retval] BSTR *pstrRoutingDLL);
		[propput]
			HRESULT RoutingDll([in] BSTR strRoutingDLL);

		[propget, helpstring("")]
			HRESULT RoutingSources([out, retval] SAFEARRAY (BSTR) * psastrRoutingSources);
		[propput]
			HRESULT RoutingSources([in] SAFEARRAY (BSTR) sastrRoutingSources);

		[propget, helpstring("To enable/disable expire thread at instance level")]
			HRESULT ExpireInstanceMail([out, retval] long *plExpireInstanceMail);
		[propput]
			HRESULT ExpireInstanceMail([in] long lExpireInstanceMail);

		[propget, helpstring("")]
			HRESULT ExpireDelay([out, retval] long *plExpireDelay);
		[propput]
			HRESULT ExpireDelay([in] long lExpireInstanceDelay);

		[propget, helpstring("")]
			HRESULT ExpireStart([out, retval] long *plExpireStart);
		[propput]
			HRESULT ExpireStart([in] long lExpireInstanceStart);

		//////////////////////////////////////////////////////////////////////
		// Methods:
		//////////////////////////////////////////////////////////////////////

		[helpstring("Get service properties")]
			HRESULT Get();

		[helpstring("Set service properties")]
			HRESULT Set([in, defaultvalue(FALSE)] BOOL fFailIfChanged);

		[helpstring("")]
			HRESULT Start();

		[helpstring("")]
			HRESULT Pause();

		[helpstring("")]
			HRESULT Continue();

		[helpstring("")]
			HRESULT Stop();
	};



	[
		object,
		uuid(760bef73-e6ad-11d0-b98d-00c04fc2f510),
		dual,
		helpstring("IImapAdminVirtualDirectory Interface"),
		pointer_default(unique)
	]
	interface IImapAdminVirtualDirectory : IDispatch
	{
		//////////////////////////////////////////////////////////////////////
		// Properties:
		//////////////////////////////////////////////////////////////////////

		// Which service to configure:

		[propget, helpstring("Computer Name to Configure")]
			HRESULT Server([out, retval] BSTR * pstrServer);
		[propput]
			HRESULT Server([in] BSTR strServer);

		[propget, helpstring("")]
			HRESULT ServiceInstance([out, retval] long * plServiceInstance);
		[propput]
			HRESULT ServiceInstance([in] long lServiceInstance);

		// Enumeration properties:

		[propget, helpstring("")]
			HRESULT Count([out, retval] long * plCount);

		// The current virtual directory's properties:
		[propget, helpstring("Email Id to Configure")]
			HRESULT VirtualName([out, retval] BSTR * pstrName);
		[propput]
			HRESULT VirtualName([in] BSTR strName );

		[propget, helpstring("Alias' domain name to Configure")]
			HRESULT Directory ([out, retval] BSTR * pstrPath);
		[propput]
			HRESULT Directory ([in] BSTR strPath );

		[propget, helpstring("Email Id to Configure")]
			HRESULT User([out, retval] BSTR * pstrUserName );
		[propput]
			HRESULT User([in] BSTR strUserName);

		[propget, helpstring("Alias' domain name to Configure")]
			HRESULT Password([out, retval] BSTR * pstrPassword);
		[propput]
			HRESULT Password([in] BSTR strPassword);

		[propget, helpstring("Log Access")]
			HRESULT LogAccess([out, retval] BOOL* pfLogAccess);
		[propput]
			HRESULT LogAccess([in] BOOL fLogAccess);

		[propget, helpstring("To enable/disable vroot expiration")]
			HRESULT ExpireMail([out, retval] long *plExpireMail);
		[propput]
			HRESULT ExpireMail([in] long lExpireMail);

		[propget, helpstring("To set the expired age of vroot")]
			HRESULT ExpireMsgHours([out, retval] long *plExpireMsgHours);
		[propput]
			HRESULT ExpireMsgHours([in] long lExpireMsgHours);

		[propget, helpstring("")]
			HRESULT AccessPermission ( [out, retval] long* plAccessPermission );
		[propput]
			HRESULT AccessPermission ( [in] long lAccessPermission );

		[propget, helpstring("")]
			HRESULT SSLAccessPermission ( [out, retval] long* plAccessPermission );
		[propput]
			HRESULT SSLAccessPermission ( [in] long lAccessPermission );


		//////////////////////////////////////////////////////////////////////
		// Methods:
		//////////////////////////////////////////////////////////////////////

		[helpstring("")]
			HRESULT GetHomeDirectory();

		[helpstring("")]
			HRESULT SetHomeDirectory();

		// create new entry
		[helpstring("")]
			HRESULT Create();

		// delete current entry
		[helpstring("")]
			HRESULT Delete();

		// get property
		[helpstring("Get user properties")]
			HRESULT Get();

		// set property
		[helpstring("")]
			HRESULT Set();

		// enumeration
		[helpstring("")]
			HRESULT Enumerate();

		[helpstring("")]
			HRESULT GetNth([in] long lIndex);
	};
#endif


	[
		object,
		uuid(760bef72-e6ad-11d0-b98d-00c04fc2f510),
		dual,
		helpstring("IImapAdminSessions Interface"),
		pointer_default(unique)
	]
	interface IImapAdminSessions : IADs
	{
		//////////////////////////////////////////////////////////////////////
		// Properties:
		//////////////////////////////////////////////////////////////////////

		// Which service to configure:

		[propget, helpstring("Computer Name to Configure")]
			HRESULT Server ( [out, retval] BSTR * pstrServer );
		[propput]
			HRESULT Server ( [in] BSTR strServer );

		[propget, helpstring("")]
			HRESULT ServiceInstance ( [out, retval] long * plServiceInstance );
		[propput]
			HRESULT ServiceInstance ( [in] long lServiceInstance );

		[propget, helpstring("")]
			HRESULT IADsPointer ( [out, retval] IADs** ppADs );
		[propput]
			HRESULT IADsPointer ( [in] IADs* pADs );

		[propget, helpstring("")]
			HRESULT KeyType ( [out, retval] BSTR * pstrKeyType );
		[propput]
			HRESULT KeyType ( [in] BSTR strKeyType );

		[propget, helpstring("Number of current sessions")]
			HRESULT	Count ( [out, retval] long * plCount );

		[propget, helpstring("User id")]
			HRESULT UserId([out, retval] long * plId);
		[propput, helpstring("User id")]
			HRESULT UserId([in] long plId);

		[propget, helpstring("")]
			HRESULT UserName([out, retval] BSTR * pstrUsername);

		[propget, helpstring("User's Host Value")]
			HRESULT Host([out, retval] BSTR * pstrHost);

		[propget, helpstring("How long it has connected")]
			HRESULT ConnectTime( [out, retval] long * plConnectTime);

		//////////////////////////////////////////////////////////////////////
		// Methods:
		//////////////////////////////////////////////////////////////////////

		[helpstring("Retrieves a list of current sessions")]
			HRESULT Enumerate();

		[helpstring("Sets the cursor at the given session. Call Enumerate before calling GetNth")]
			HRESULT GetNth([in] long lIndex);

		[helpstring("Terminates the given session.  Set Username and/or IpAddress before calling.")]
			HRESULT Terminate();

		[helpstring("Terminates all sessions")]
			HRESULT TerminateAll();

	};


	// Class Definitions:

#ifndef _ADSIIEX_BUILD
	[
		uuid(760bef74-e6ad-11d0-b98d-00c04fc2f510),
		helpstring("ImapAdmin Class")
	]
	coclass CImapAdmin
	{
		[default] interface IImapAdmin;
	};

	[
		uuid(760bef75-e6ad-11d0-b98d-00c04fc2f510),
		helpstring("ImapAdminService Class")
	]
	coclass CImapAdminService
	{
		[default] interface IImapAdminService;
	};

	[
		uuid(760bef76-e6ad-11d0-b98d-00c04fc2f510),
		helpstring("ImapAdminVirtualServer Class")
	]
	coclass CImapAdminVirtualServer
	{
		[default] interface IImapAdminVirtualServer;
	};

	[
		uuid(760bef78-e6ad-11d0-b98d-00c04fc2f510),
		helpstring("ImapAdminVirtualDirectory Class")
	]
	coclass CImapAdminVirtualDirectory
	{
		[default] interface IImapAdminVirtualDirectory;
	};
#endif

	[
		uuid(760bef77-e6ad-11d0-b98d-00c04fc2f510),
		helpstring("ImapAdminSessions Class")
	]
	coclass CImapAdminSessions
	{
		[default] interface IImapAdminSessions;
	};
};

cpp_quote("#endif  // _IMAPADM_IDL_INCLUDED_")
