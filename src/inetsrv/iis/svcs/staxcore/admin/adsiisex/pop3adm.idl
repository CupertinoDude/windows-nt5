//
// pop3adm.idl : IDL source for pop3adm.dll
//

// This file will be processed by the MIDL tool to
// produce the type library (pop3adm.tlb) and marshalling code.

cpp_quote("")
cpp_quote("/*++")
cpp_quote("")
cpp_quote("Copyright (c) 1997 Microsoft Corporation")
cpp_quote("")
cpp_quote("Module Name: pop3adm.h")
cpp_quote("")
cpp_quote("    Pop3 Admin Object Interfaces")
cpp_quote("")
cpp_quote("--*/")
cpp_quote("")
cpp_quote("#ifndef _POP3ADM_IDL_INCLUDED_")
cpp_quote("#define _POP3ADM_IDL_INCLUDED_")

//
//  Define GUIDS:
//

cpp_quote("")
cpp_quote("/* LIBIDs: */")
cpp_quote("")
cpp_quote("DEFINE_GUID(LIBID_POP3ADMLib, 0xb1d2a1de, 0xc835, 0x11d0, 0xbc, 0x2, 0x0, 0xc0, 0x4f, 0xc3, 0x9, 0x2d);")


cpp_quote("")
cpp_quote("/* IIDs: */")
cpp_quote("")

#ifndef _ADSIIEX_BUILD
cpp_quote("DEFINE_GUID(IID_IPop3Admin, 0x6fc75f6f, 0xc833, 0x11d0, 0xbc, 0x2, 0x0, 0xc0, 0x4f, 0xc3, 0x9, 0x2d);")
cpp_quote("DEFINE_GUID(IID_IPop3AdminService, 0x6fc75f70, 0xc833, 0x11d0, 0xbc, 0x2, 0x0, 0xc0, 0x4f, 0xc3, 0x9, 0x2d);")
cpp_quote("DEFINE_GUID(IID_IPop3AdminVirtualServer, 0x6fc75f71, 0xc833, 0x11d0, 0xbc, 0x2, 0x0, 0xc0, 0x4f, 0xc3, 0x9, 0x2d);")
cpp_quote("DEFINE_GUID(IID_IPop3AdminVirtualDirectory, 0x6fc75f74, 0xc833, 0x11d0, 0xbc, 0x2, 0x0, 0xc0, 0x4f, 0xc3, 0x9, 0x2d);")
cpp_quote("DEFINE_GUID(IID_ITcpAccess, 0x25ed205b, 0xcf50, 0x11d0, 0xbc, 0x7, 0x0, 0xc0, 0x4f, 0xc3, 0x9, 0x2d);")
cpp_quote("DEFINE_GUID(IID_ITcpAccessExceptions, 0x25ed205c, 0xcf50, 0x11d0, 0xbc, 0x7, 0x0, 0xc0, 0x4f, 0xc3, 0x9, 0x2d);")
cpp_quote("DEFINE_GUID(IID_ITcpAccessException, 0x25ed205d, 0xcf50, 0x11d0, 0xbc, 0x7, 0x0, 0xc0, 0x4f, 0xc3, 0x9, 0x2d);")
cpp_quote("DEFINE_GUID(IID_IPop3ServerBinding, 0x7f2ee512, 0xe554, 0x11d0, 0xac, 0xa4, 0x0, 0x0, 0x86, 0xf, 0x61, 0x4c);")
cpp_quote("DEFINE_GUID(IID_IPop3ServerBindings, 0x7f2ee514, 0xe554, 0x11d0, 0xac, 0xa4, 0x0, 0x0, 0x86, 0xf, 0x61, 0x4c);")
#endif

cpp_quote("DEFINE_GUID(IID_IPop3AdminSessions, 0x6fc75f72, 0xc833, 0x11d0, 0xbc, 0x2, 0x0, 0xc0, 0x4f, 0xc3, 0x9, 0x2d);")



cpp_quote("")
cpp_quote("/* CLSID: */")
cpp_quote("")

#ifndef _ADSIIEX_BUILD
cpp_quote("DEFINE_GUID(CLSID_CPop3Admin, 0xb1d2a1df, 0xc835, 0x11d0, 0xbc, 0x2, 0x0, 0xc0, 0x4f, 0xc3, 0x9, 0x2d);")
cpp_quote("DEFINE_GUID(CLSID_CPop3AdminService, 0xb1d2a1e0, 0xc835, 0x11d0, 0xbc, 0x2, 0x0, 0xc0, 0x4f, 0xc3, 0x9, 0x2d);")
cpp_quote("DEFINE_GUID(CLSID_CPop3AdminVirtualServer, 0xb1d2a1e1, 0xc835, 0x11d0, 0xbc, 0x2, 0x0, 0xc0, 0x4f, 0xc3, 0x9, 0x2d);")
cpp_quote("DEFINE_GUID(CLSID_CPop3AdminVirtualDirectory, 0xb1d2a1e3, 0xc835, 0x11d0, 0xbc, 0x2, 0x0, 0xc0, 0x4f, 0xc3, 0x9, 0x2d);")
cpp_quote("DEFINE_GUID(CLSID_CPop3ServerBinding, 0x7f2ee515, 0xe554, 0x11d0, 0xac, 0xa4, 0x0, 0x0, 0x86, 0xf, 0x61, 0x4c);")
cpp_quote("DEFINE_GUID(CLSID_CPop3ServerBindings, 0x7f2ee516, 0xe554, 0x11d0, 0xac, 0xa4, 0x0, 0x0, 0x86, 0xf, 0x61, 0x4c);")
#endif

cpp_quote("DEFINE_GUID(CLSID_CPop3AdminSessions, 0xb1d2a1e2, 0xc835, 0x11d0, 0xbc, 0x2, 0x0, 0xc0, 0x4f, 0xc3, 0x9, 0x2d);")

cpp_quote("")
cpp_quote("#include <iads.h>")
cpp_quote("")


[
	uuid(B1D2A1DE-C835-11d0-BC02-00C04FC3092D),
	version(1.0),
	helpstring("pop3adm 1.0 Type Library")
]
library POP3ADMLib
{
	importlib("stdole2.tlb");
	importlib("activeds.tlb");

#ifndef _ADSIIEX_BUILD
    #include "rtsrc.idl"
#endif

	// forward decl
#ifndef _ADSIIEX_BUILD
	interface IPop3Admin;
	interface IPop3AdminService;
	interface IPop3AdminVirtualServer;
	interface IPop3AdminVirtualDirectory;
	interface ITcpAccess;
	interface ITcpAccessExceptions;
	interface ITcpAccessException;
	interface IPop3ServerBindings;
	interface IPop3ServerBinding;
#endif

	interface IPop3AdminSessions;

	//////////////////////////////////////////////////////////////////////
	//
	//      Type definitions:
	//
	//////////////////////////////////////////////////////////////////////

	typedef enum {
			POP3_SERVER_STATE_UNKNOWN = 0,
			POP3_SERVER_STATE_STARTING,
			POP3_SERVER_STATE_STARTED,
			POP3_SERVER_STATE_STOPPING,
			POP3_SERVER_STATE_STOPPED,
			POP3_SERVER_STATE_PAUSING,
			POP3_SERVER_STATE_PAUSED,
			POP3_SERVER_STATE_CONTINUING
	} POP3_SERVER_STATE;


#ifndef _ADSIIEX_BUILD

	[
		object,
		uuid(6FC75F6F-C833-11d0-BC02-00C04FC3092D),
		dual,
		helpstring("IPop3Admin Interface"),
		pointer_default(unique)
	]
	interface IPop3Admin : IDispatch
	{
		import "oaidl.idl";

		//////////////////////////////////////////////////////////////////////
		// Properties:
		//////////////////////////////////////////////////////////////////////

		// Pointers to other IPop3Admin interfaces:
		[propget, helpstring("IPop3AdminService")]
			HRESULT ServiceAdmin([out, retval] IDispatch ** ppIDispatch );

		[propget, helpstring("IPop3AdminVirtualServer interface")]
			HRESULT	VirtualServerAdmin([out, retval] IDispatch ** ppIDispatch);

		[propget, helpstring("IPop3AdminSessions")]
			HRESULT SessionsAdmin([out, retval] IDispatch ** ppIDispatch);

		[propget, helpstring("IPop3AdminVirtualDirectory")]
			HRESULT VirtualDirectoryAdmin([out, retval] IDispatch ** ppIDispatch);

		// Which service to configure:

		[propget, helpstring("Computer Name to Configure")]
			HRESULT Server([out, retval] BSTR * pstrServer);
		[propput]
			HRESULT Server ([in] BSTR strServer);

		[propget, helpstring("")]
			HRESULT ServiceInstance([out, retval] long * plServiceInstance);
		[propput]
			HRESULT ServiceInstance([in] long lServiceInstance);

		// Versioning:

		[propget, helpstring("Versioning Information")]
			HRESULT	HighVersion([out, retval] long * plHighVersion);
		
		[propget, helpstring("Versioning Information")]
			HRESULT LowVersion([out, retval] long * plLowVersion);

		[propget, helpstring("Build Number")]
			HRESULT BuildNum([out, retval] long * plBuildNumber);

		[propget, helpstring("Service version #")]
			HRESULT	ServiceVersion([out, retval] long * pdwServiceVersion);


		//////////////////////////////////////////////////////////////////////
		// Methods:
		//////////////////////////////////////////////////////////////////////

		[helpstring("Enumerate service instances")]
			HRESULT EnumerateInstances([out] SAFEARRAY (long) * psaInstanceIds);

		[helpstring("Create a new service instance")]
			HRESULT CreateInstance([out, retval] long * plInstanceId);

		[helpstring("Delete a service instance")]
			HRESULT DestroyInstance([in] long lInstanceId);

		[helpstring("Translate an error code into a string")]
			HRESULT ErrorToString([in] DWORD lErrorCode, [out, retval] BSTR * pstrError);

		[helpstring("VB script version")]
			HRESULT EnumerateInstancesVariant ( [out, retval] SAFEARRAY (VARIANT) * psaInstanceIds );

		[helpstring("HTML tokenize the given string")]
			HRESULT Tokenize ( [in] BSTR strIn, [out, retval] BSTR * pstrOut );
	};


	[
		object,
		uuid(6FC75F70-C833-11d0-BC02-00C04FC3092D),
		dual,
		helpstring("IPop3AdminService Interface"),
		pointer_default(unique)
	]
	interface IPop3AdminService : IDispatch
	{
		import "oaidl.idl";

		//////////////////////////////////////////////////////////////////////
		// Properties:
		//////////////////////////////////////////////////////////////////////

		// Which service to configure:

		[propget, helpstring("Computer Name to Configure")]
			HRESULT Server ([out, retval] BSTR * pstrServer);
		[propput]
			HRESULT Server ([in] BSTR strServer);

		//
		// general server properties:
		//
		[propget, helpstring("Virtual Server comment")]
			HRESULT Comment([out, retval] BSTR * pstrComment);
		[propput]
			HRESULT Comment([in] BSTR strComment);

		[propget, helpstring("Available authentication packages")]
			HRESULT AuthenticationPackages([out, retval] BSTR * pstrAuthPackages);
		[propput]
			HRESULT AuthenticationPackages([in] BSTR strAuthPackages);

		[propget, helpstring("Clear text authentication package")]
			HRESULT ClearTextAuthPackage([out, retval] BSTR * pstrAuthPackages);
		[propput]
			HRESULT ClearTextAuthPackage([in] BSTR strAuthPackages);

		[propget, helpstring("Authentication mechanism, ie: anon, basic, ntlm")]
			HRESULT AuthenticationMethod([out, retval] long *plAuthMethod);
		[propput]
			HRESULT AuthenticationMethod([in] long lAuthMethod);

		[propget, helpstring("Default logon domain for clear text (basic) authentication")]
			HRESULT DefaultLogonDomain([out, retval] BSTR *pstrLogonDomain);
		[propput]
			HRESULT DefaultLogonDomain([in] BSTR strLogonDomain);

		[propget, helpstring("Server Bindgings")]
			HRESULT ServerBindings([out, retval] SAFEARRAY (BSTR) * psastrServerBindings);
		[propput]
			HRESULT ServerBindings([in] SAFEARRAY (BSTR) sastrServerBindings);

		[propget, helpstring("Secure Bindgings")]
			HRESULT SecureBindings([out, retval] SAFEARRAY (BSTR) * psastrSecureBindings);
		[propput]
			HRESULT SecureBindings([in] SAFEARRAY (BSTR) sastrSecureBindings);

		[propget, helpstring("")]
			HRESULT MaxConnection([out, retval] long * lMaxConnection);
		[propput]
			HRESULT MaxConnection([in] long lMaxConnection);

		[propget, helpstring("")]
			HRESULT ConnectionTimeout([out, retval] long * lConnectionTimeout);
		[propput]
			HRESULT ConnectionTimeout([in] long lConnectionTimeout);

		[propget, helpstring("")]
			HRESULT LogFileDirectory([out, retval] BSTR * pstrLogFileDirectory);
		[propput]
			HRESULT LogFileDirectory([in] BSTR strLogFileDirectory);

		[propget, helpstring("")]
			HRESULT LogFilePeriod([out, retval] long * lLogFilePeriod);
		[propput]
			HRESULT LogFilePeriod([in] long lLogFilePeriod);

		[propget, helpstring("")]
			HRESULT LogFileTruncateSize([out, retval] long * lLogFileTruncateSize);
		[propput]
			HRESULT LogFileTruncateSize([in] long lLogFileTruncateSize);

		[propget, helpstring("")]
			HRESULT LogType([out, retval] long * lLogType);
		[propput]
			HRESULT LogType([in] long lLogType);

		[propget, helpstring("")]
			HRESULT AutoStart([out, retval] BOOL * pfAutoStart);
		[propput]
			HRESULT AutoStart([in] BOOL fAutoStart);

		[propget, helpstring("")]
			HRESULT SSLAccessPermission ( [out, retval] long* plAccessPermission );
		[propput]
			HRESULT SSLAccessPermission ( [in] long lAccessPermission );

		//	Service Status Properties:

		[propget, helpstring("")]
			HRESULT ServerState([out, retval] DWORD * pdwServerState);

		// pop3 specific:

		[propget, helpstring("")]
			HRESULT DefaultDomain([out, retval] BSTR *pstrDefaultDomainName );
		[propput]
			HRESULT DefaultDomain([in] BSTR strDefaultDomainName );

		[propget, helpstring("")]
			HRESULT RoutingDll([out, retval] BSTR *pstrRoutingDLL);
		[propput]
			HRESULT RoutingDll([in] BSTR strRoutingDLL);

		[propget, helpstring("")]
			HRESULT RoutingSources([out, retval] SAFEARRAY (BSTR) * psastrRoutingSources);
		[propput]
			HRESULT RoutingSources([in] SAFEARRAY (BSTR) sastrRoutingSources);

		[propget, helpstring("To enable/disable expire thread at instance level")]
			HRESULT ExpireInstanceMail([out, retval] long *plExpireInstanceMail);
		[propput]
			HRESULT ExpireInstanceMail([in] long lExpireInstanceMail);

		[propget, helpstring("")]
			HRESULT ExpireDelay([out, retval] long *plExpireDelay);
		[propput]
			HRESULT ExpireDelay([in] long lExpireInstanceDelay);

		[propget, helpstring("")]
			HRESULT ExpireStart([out, retval] long *plExpireStart);
		[propput]
			HRESULT ExpireStart([in] long lExpireInstanceStart);

		//////////////////////////////////////////////////////////////////////
		// Methods:
		//////////////////////////////////////////////////////////////////////

		[helpstring("Get server properties")]
			HRESULT Get();

		[helpstring("Set server properties")]
			HRESULT Set([in, defaultvalue(FALSE)] BOOL fFailIfChanged);
	};


	[
		object,
		uuid(6FC75F71-C833-11d0-BC02-00C04FC3092D),
		dual,
		helpstring("IPop3AdminVirtualServer Interface"),
		pointer_default(unique)
	]
	interface IPop3AdminVirtualServer : IDispatch
	{
		import "oaidl.idl";

		//////////////////////////////////////////////////////////////////////
		// Properties:
		//////////////////////////////////////////////////////////////////////

		// other interfaces on virtual server
		[propget, helpstring("ITcpAccess ")]
			HRESULT TcpAccess ( [out, retval] ITcpAccess ** ppTcpAccess );

		// Which service to configure:

		[propget, helpstring("Computer Name to Configure")]
			HRESULT Server([out, retval] BSTR * pstrServer);
		[propput]
			HRESULT Server([in] BSTR strServer);

		[propget, helpstring("")]
			HRESULT ServiceInstance([out, retval] long * plServiceInstance);
		[propput]
			HRESULT ServiceInstance([in] long lServiceInstance);

		[propget, helpstring("")]
			HRESULT Administrators([out, retval] SAFEARRAY(BSTR) * psastrAdmins);
		[propput]
			HRESULT Administrators([in] SAFEARRAY(BSTR) psastrAdmins);

		//
		// general server properties:
		//
		[propget, helpstring("Virtual Server comment")]
			HRESULT Comment([out, retval] BSTR *pstrComment);
		[propput]
			HRESULT Comment([in] BSTR strComment);

        [propget, helpstring("")]
            HRESULT RoutingSource( [out, retval] IRoutingSource ** ppRoutingSource );
        [propget, helpstring("")]
            HRESULT RoutingSourceDispatch ( [out, retval] IDispatch ** ppRoutingSourceDisp );

		[propget, helpstring("Available authentication packages")]
			HRESULT AuthenticationPackages([out, retval] BSTR * pstrAuthPackages);
		[propput]
			HRESULT AuthenticationPackages([in] BSTR strAuthPackages);

		[propget, helpstring("Clear text authentication package")]
			HRESULT ClearTextAuthPackage([out, retval] BSTR * pstrAuthPackages);
		[propput]
			HRESULT ClearTextAuthPackage([in] BSTR strAuthPackages);

		[propget, helpstring("Authentication mechanism, ie: anon, basic, ntlm")]
			HRESULT AuthenticationMethod([out, retval] long *plAuthentMethod);
		[propput]
			HRESULT AuthenticationMethod([in] long lAuthentMethod);

		[propget, helpstring("Default logon domain for clear text (basic) authentication")]
			HRESULT DefaultLogonDomain([out, retval] BSTR *pstrLogonDomain);
		[propput]
			HRESULT DefaultLogonDomain([in] BSTR strLogonDomain);

		[propget, helpstring("Server Bindgings")]
			HRESULT ServerBindings([out, retval] SAFEARRAY (BSTR) * psastrServerBindings);
		[propput]
			HRESULT ServerBindings([in] SAFEARRAY (BSTR) sastrServerBindings);

		[propget, helpstring("Secure Bindgings")]
			HRESULT SecureBindings([out, retval] SAFEARRAY (BSTR) * psastrSecureBindings);
		[propput]
			HRESULT SecureBindings([in] SAFEARRAY (BSTR) sastrSecureBindings);

		[propget, helpstring("")]
			HRESULT Bindings ( [out, retval] IPop3ServerBindings ** ppBindings );

		[propget, helpstring("")]
			HRESULT BindingsDispatch ( [out, retval] IDispatch ** ppBindings );

		[propget, helpstring("")]
			HRESULT MaxConnection([out, retval] long * lMaxConnection);
		[propput]
			HRESULT MaxConnection([in] long lMaxConnection);

		[propget, helpstring("")]
			HRESULT ConnectionTimeout([out, retval] long * lConnectionTimeout);
		[propput]
			HRESULT ConnectionTimeout([in] long lConnectionTimeout);

		[propget, helpstring("")]
			HRESULT LogFileDirectory([out, retval] BSTR * pstrLogFileDirectory);
		[propput]
			HRESULT LogFileDirectory([in] BSTR strLogFileDirectory);

		[propget, helpstring("")]
			HRESULT LogFilePeriod([out, retval] long * lLogFilePeriod);
		[propput]
			HRESULT LogFilePeriod([in] long lLogFilePeriod);

		[propget, helpstring("")]
			HRESULT LogFileTruncateSize([out, retval] long * lLogFileTruncateSize);
		[propput]
			HRESULT LogFileTruncateSize([in] long lLogFileTruncateSize);

		[propget, helpstring("")]
			HRESULT LogType([out, retval] long * lLogType);
		[propput]
			HRESULT LogType([in] long lLogType);

		[propget, helpstring("")]
			HRESULT AutoStart([out, retval] BOOL * pfAutoStart);
		[propput]
			HRESULT AutoStart([in] BOOL fAutoStart);

		[propget, helpstring("")]
			HRESULT SSLAccessPermission ( [out, retval] long* plAccessPermission );
		[propput]
			HRESULT SSLAccessPermission ( [in] long lAccessPermission );

		//	Service Status Properties:

		[propget, helpstring("")]
			HRESULT ServerState([out, retval] DWORD * pdwServerState);

		// pop3 specific:

		[propget, helpstring("")]
			HRESULT DefaultDomain([out, retval] BSTR *pstrDefaultDomainName );
		[propput]
			HRESULT DefaultDomain([in] BSTR strDefaultDomainName );

		[propget, helpstring("")]
			HRESULT RoutingDll([out, retval] BSTR *pstrRoutingDLL);
		[propput]
			HRESULT RoutingDll([in] BSTR strRoutingDLL);

		[propget, helpstring("")]
			HRESULT RoutingSources([out, retval] SAFEARRAY (BSTR) * psastrRoutingSources);
		[propput]
			HRESULT RoutingSources([in] SAFEARRAY (BSTR) sastrRoutingSources);

		[propget, helpstring("To enable/disable expire thread at instance level")]
			HRESULT ExpireInstanceMail([out, retval] long *plExpireInstanceMail);
		[propput]
			HRESULT ExpireInstanceMail([in] long lExpireInstanceMail);

		[propget, helpstring("")]
			HRESULT ExpireDelay([out, retval] long *plExpireDelay);
		[propput]
			HRESULT ExpireDelay([in] long lExpireInstanceDelay);

		[propget, helpstring("")]
			HRESULT ExpireStart([out, retval] long *plExpireStart);
		[propput]
			HRESULT ExpireStart([in] long lExpireInstanceStart);

		//////////////////////////////////////////////////////////////////////
		// Methods:
		//////////////////////////////////////////////////////////////////////

		[helpstring("Get service properties")]
			HRESULT Get();

		[helpstring("Set service properties")]
			HRESULT Set([in, defaultvalue(FALSE)] BOOL fFailIfChanged);

		[helpstring("")]
			HRESULT Start();

		[helpstring("")]
			HRESULT Pause();

		[helpstring("")]
			HRESULT Continue();

		[helpstring("")]
			HRESULT Stop();
	};


	[
		object,
		uuid(6FC75F74-C833-11d0-BC02-00C04FC3092D),
		dual,
		helpstring("IPop3AdminVirtualDirectory Interface"),
		pointer_default(unique)
	]
	interface IPop3AdminVirtualDirectory : IDispatch
	{
		import "oaidl.idl";

		//////////////////////////////////////////////////////////////////////
		// Properties:
		//////////////////////////////////////////////////////////////////////

		// Which service to configure:

		[propget, helpstring("Computer Name to Configure")]
			HRESULT Server([out, retval] BSTR * pstrServer);
		[propput]
			HRESULT Server([in] BSTR strServer);

		[propget, helpstring("")]
			HRESULT ServiceInstance([out, retval] long * plServiceInstance);
		[propput]
			HRESULT ServiceInstance([in] long lServiceInstance);

		// Enumeration properties:

		[propget, helpstring("")]
			HRESULT Count([out, retval] long * plCount);

		// The current virtual directory's properties:
		[propget, helpstring("Email Id to Configure")]
			HRESULT VirtualName([out, retval] BSTR * pstrName);
		[propput]
			HRESULT VirtualName([in] BSTR strName );

		[propget, helpstring("Alias' domain name to Configure")]
			HRESULT Directory ([out, retval] BSTR * pstrPath);
		[propput]
			HRESULT Directory ([in] BSTR strPath );

		[propget, helpstring("Email Id to Configure")]
			HRESULT User([out, retval] BSTR * pstrUserName );
		[propput]
			HRESULT User([in] BSTR strUserName);

		[propget, helpstring("Alias' domain name to Configure")]
			HRESULT Password([out, retval] BSTR * pstrPassword);
		[propput]
			HRESULT Password([in] BSTR strPassword);

		[propget, helpstring("Log Access")]
			HRESULT LogAccess([out, retval] BOOL* pfLogAccess);
		[propput]
			HRESULT LogAccess([in] BOOL fLogAccess);

		[propget, helpstring("To enable/disable vroot expiration")]
			HRESULT ExpireMail([out, retval] long *plExpireMail);
		[propput]
			HRESULT ExpireMail([in] long lExpireMail);

		[propget, helpstring("To set the expired age of vroot")]
			HRESULT ExpireMsgHours([out, retval] long *plExpireMsgHours);
		[propput]
			HRESULT ExpireMsgHours([in] long lExpireMsgHours);

		[propget, helpstring("")]
			HRESULT AccessPermission ( [out, retval] long* plAccessPermission );
		[propput]
			HRESULT AccessPermission ( [in] long lAccessPermission );

		[propget, helpstring("")]
			HRESULT SSLAccessPermission ( [out, retval] long* plAccessPermission );
		[propput]
			HRESULT SSLAccessPermission ( [in] long lAccessPermission );


		//////////////////////////////////////////////////////////////////////
		// Methods:
		//////////////////////////////////////////////////////////////////////

		[helpstring("")]
			HRESULT GetHomeDirectory();

		[helpstring("")]
			HRESULT SetHomeDirectory();

		// create new entry
		[helpstring("")]
			HRESULT Create();

		// delete current entry
		[helpstring("")]
			HRESULT Delete();

		// get property
		[helpstring("Get user properties")]
			HRESULT Get();

		// set property
		[helpstring("")]
			HRESULT Set();

		// enumeration
		[helpstring("")]
			HRESULT Enumerate();

		[helpstring("")]
			HRESULT GetNth([in] long lIndex);
	};


	[
		object,
		uuid(25ED205B-CF50-11d0-BC07-00C04FC3092D),
		dual,
		helpstring("ITcpAccess Interface"),
		pointer_default(unique)
	]
	interface ITcpAccess : IDispatch
	{
		import "oaidl.idl";

		[propget, helpstring("")]
			HRESULT GrantedList ( [out, retval] ITcpAccessExceptions ** ppGrantedList );

		[propget, helpstring("")]
			HRESULT DeniedList ( [out, retval] ITcpAccessExceptions ** ppDeniedList );
	};


	[
		object,
		uuid(25ED205C-CF50-11d0-BC07-00C04FC3092D),
		dual,
		helpstring("ITcpAccessExceptions Interface"),
		pointer_default(unique)
	]
	interface ITcpAccessExceptions : IDispatch
	{
		import "oaidl.idl";

		[propget, helpstring("")]
			HRESULT Count ( [out, retval] long * pcCount );

		[helpstring("")]
			HRESULT AddDnsName ( [in] BSTR strDnsName );

		[helpstring("")]
			HRESULT AddIpAddress ( [in] long lIpAddress, [in] long lIpMask );

		[helpstring("")]
			HRESULT Item ( [in] long index, [out, retval] ITcpAccessException ** ppItem );

		[helpstring("")]
			HRESULT Remove ( [in] long index );

		[helpstring("")]
			HRESULT	Clear ( );

		[helpstring("")]
			HRESULT FindDnsIndex ( [in] BSTR strDnsName, [out, retval] long * pIndex );

		[helpstring("")]
			HRESULT FindIpIndex ( [in] long lIpAddress, [in] long lIpMask, [out, retval] long * pIndex );
	};


	[
		object,
		uuid(25ED205D-CF50-11d0-BC07-00C04FC3092D),
		dual,
		helpstring("ITcpAccessException Interface"),
		pointer_default(unique)
	]
	interface ITcpAccessException : IDispatch
	{
		import "oaidl.idl";

		[propget, helpstring("")]
			HRESULT IsDnsName ( [out, retval] BOOL * pfIsDnsName );

		[propget, helpstring("")]
			HRESULT IsIpAddress ( [out, retval] BOOL * pfIsIpAddress );

		[propget, helpstring("")]
			HRESULT DnsName ( [out, retval] BSTR * pstrDnsName );
		[propput]
			HRESULT DnsName ( [in] BSTR strDnsName );

		[propget, helpstring("")]
			HRESULT IpAddress ( [out, retval] long * plIpAddress );
		[propput]
			HRESULT IpAddress ( [in] long lIpAddress );

		[propget, helpstring("")]
			HRESULT IpMask ( [out, retval] long * plIpMask );
		[propput]
			HRESULT IpMask ( [in] long lIpMask );
	};


	[
		object,
		uuid(7F2EE512-E554-11d0-ACA4-0000860F614C),
		dual,
		helpstring("IPop3ServerBinding Interface"),
		pointer_default(unique)
	]
	interface IPop3ServerBinding : IDispatch
	{
		import "oaidl.idl";

		//////////////////////////////////////////////////////////////////////
		// Properties:
		//////////////////////////////////////////////////////////////////////

		[propget, helpstring("")]
			HRESULT IpAddress ( [out, retval] BSTR * pstrIpAddress );
		[propput]
			HRESULT IpAddress ( [in] BSTR strIpAddress );

		[propget, helpstring("")]
			HRESULT TcpPort ( [out, retval] long * pdwTcpPort );
		[propput]
			HRESULT TcpPort ( [in] long dwTcpPort );

		[propget, helpstring("")]
			HRESULT SslPort ( [out, retval] long * plSslPort );
		[propput]
			HRESULT SslPort ( [in] long lSslPort );
	};


	[
		object,
		uuid(7F2EE514-E554-11d0-ACA4-0000860F614C),
		dual,
		helpstring("IPop3ServerBindings Interface"),
		pointer_default(unique)
	]
	interface IPop3ServerBindings : IDispatch
	{
		import "oaidl.idl";

		//
		// Standard collection methods & properties:
		//

		[propget, helpstring("")]
			HRESULT Count ( [out, retval] long * pdwCount );

		[helpstring("")]
			HRESULT Item ( [in] long index, [out, retval] IPop3ServerBinding ** ppBinding );

		[helpstring("")]
			HRESULT	ItemDispatch ( [in] long index, [out, retval] IDispatch ** ppBinding );

		[helpstring("")]
			HRESULT Add ( [in] BSTR strIpAddress, [in] long dwTcpPort, [in] long dwSslPort );

		[helpstring("")]
			HRESULT ChangeBinding ( [in] long index, [in] IPop3ServerBinding * pBinding );

		[helpstring("")]
			HRESULT	ChangeBindingDispatch ( [in] long index, [in] IDispatch * pBinding );

		[helpstring("")]
			HRESULT Remove ( [in] long index );

		[helpstring("")]
			HRESULT	Clear ( );
	};
#endif


	[
		object,
		uuid(6FC75F72-C833-11d0-BC02-00C04FC3092D),
		dual,
		helpstring("IPop3AdminSessions Interface"),
		pointer_default(unique)
	]
	interface IPop3AdminSessions : IADs
	{
		import "oaidl.idl";

		//////////////////////////////////////////////////////////////////////
		// Properties:
		//////////////////////////////////////////////////////////////////////

		// Which service to configure:

		[propget, helpstring("Computer Name to Configure")]
			HRESULT Server ( [out, retval] BSTR * pstrServer );
		[propput]
			HRESULT Server ( [in] BSTR strServer );

		[propget, helpstring("")]
			HRESULT ServiceInstance ( [out, retval] long * plServiceInstance );
		[propput]
			HRESULT ServiceInstance ( [in] long lServiceInstance );

		[propget, helpstring("")]
			HRESULT IADsPointer ( [out, retval] IADs** ppADs );
		[propput]
			HRESULT IADsPointer ( [in] IADs* pADs );

		[propget, helpstring("")]
			HRESULT KeyType ( [out, retval] BSTR * pstrKeyType );
		[propput]
			HRESULT KeyType ( [in] BSTR strKeyType );

		[propget, helpstring("Number of current sessions")]
			HRESULT	Count ( [out, retval] long * plCount );

		[propget, helpstring("User id")]
			HRESULT UserId([out, retval] long * plId);
		[propput, helpstring("User id")]
			HRESULT UserId([in] long plId);

		[propget, helpstring("")]
			HRESULT UserName([out, retval] BSTR * pstrUsername);

		[propget, helpstring("User's Host Value")]
			HRESULT Host([out, retval] BSTR * pstrHost);

		[propget, helpstring("How long it has connected")]
			HRESULT ConnectTime( [out, retval] long * plConnectTime);

		//////////////////////////////////////////////////////////////////////
		// Methods:
		//////////////////////////////////////////////////////////////////////

		[helpstring("Retrieves a list of current sessions")]
			HRESULT Enumerate();

		[helpstring("Sets the cursor at the given session. Call Enumerate before calling GetNth")]
			HRESULT GetNth([in] long lIndex);

		[helpstring("Terminates the given session.  Set Username and/or IpAddress before calling.")]
			HRESULT Terminate();

		[helpstring("Terminates all sessions")]
			HRESULT TerminateAll();

	};



	// Class Definitions:
#ifndef _ADSIIEX_BUILD

	[
		uuid(B1D2A1DF-C835-11d0-BC02-00C04FC3092D),
		helpstring("Pop3Admin Class")
	]
	coclass CPop3Admin
	{
		[default] interface IPop3Admin;
	};

	[
		uuid(B1D2A1E0-C835-11d0-BC02-00C04FC3092D),
		helpstring("Pop3AdminService Class")
	]
	coclass CPop3AdminService
	{
		[default] interface IPop3AdminService;
	};

	[
		uuid(B1D2A1E1-C835-11d0-BC02-00C04FC3092D),
		helpstring("Pop3AdminVirtualServer Class")
	]
	coclass CPop3AdminVirtualServer
	{
		[default] interface IPop3AdminVirtualServer;
	};

	[
		uuid(B1D2A1E3-C835-11d0-BC02-00C04FC3092D),
		helpstring("Pop3AdminVirtualDirectory Class")
	]
	coclass CPop3AdminVirtualDirectory
	{
		[default] interface IPop3AdminVirtualDirectory;
	};


	[
		uuid(7F2EE515-E554-11d0-ACA4-0000860F614C),
		helpstring("CPop3ServerBinding")
	]
	coclass CPop3ServerBinding
	{
		[default] interface IPop3ServerBinding;
	}

	[
		uuid(7F2EE516-E554-11d0-ACA4-0000860F614C),
		helpstring("CPop3ServerBindings")
	]
	coclass CPop3ServerBindings
	{
		[default] interface IPop3ServerBindings;
	}
#endif

	[
		uuid(B1D2A1E2-C835-11d0-BC02-00C04FC3092D),
		helpstring("Pop3AdminSessions Class")
	]
	coclass CPop3AdminSessions
	{
		[default] interface IPop3AdminSessions;
	};

};

cpp_quote("#endif  // _POP3ADM_IDL_INCLUDED_")
