<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Developing Scalable Components</TITLE>
<SCRIPT LANGUAGE="JavaScript">
<!--
	TempString = navigator.appVersion
	if (navigator.appName == "Microsoft Internet Explorer"){	
// Check to see if browser is Microsoft
		if (TempString.indexOf ("4.") >= 0){
// Check to see if it is IE 4
			document.writeln('<link rel="stylesheet" type="text/css" href="/iishelp/common/coua.css">');
		}
		else {
			document.writeln('<link rel="stylesheet" type="text/css" href="/iishelp/common/cocss.css">');
		}
	}
	else if (navigator.appName == "Netscape") {						
// Check to see if browser is Netscape
		document.writeln('<link rel="stylesheet" type="text/css" href="/iishelp/common/coua.css">');
	}
	else
		document.writeln('<link rel="stylesheet" type="text/css" href="/iishelp/common/cocss.css">');
//-->
</script>
<SCRIPT LANGUAGE="VBScript">
<!--
Sub Window_OnLoad()
   Dim frmContents
   On Error Resume Next
   If Not Parent Is Nothing Then
      Set frmContents = Parent.Contents
      If Not frmContents Is Nothing Then
            frmContents.Window.TOCSynch_Click
      End If
   End If
End Sub
//--></SCRIPT><META NAME="DESCRIPTION" CONTENT="Internet Information Services reference information">
<META HTTP-EQUIV="PICS-Label" CONTENT='(PICS-1.1 "<http://www.rsac.org/ratingsv01.html>" l comment "RSACi North America Server" by "inet@microsoft.com <mailto:inet@microsoft.com>" r (n 0 s 0 v 0 l 0))'>
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="MS-IT-LOC" Content="Internet Information Services"> 
</HEAD>

<BODY BGCOLOR="#FFFFFF" TEXT="#000000">

<H1><A NAME="_k2_developing_scalable_components"></A><SUP></SUP>Developing Scalable Components</H1>

<P>Because you should encapsulate most of your business logic within COM components, it is important that your components be designed for high performance, in addition to being readily scalable.</P>

<P>Here are some suggestions for creating scalable components:

<UL type=disc>
	<LI><B>Optimize your algorithms.</B></li>

	<LI><B>Make your component adhere to the proper threading. </B>Page-scope components should be use either the Apartment or Both threading model; application-scope components should use the Both threading model, and should also aggregate the free-threaded marshaller. For more information about component threading issues, see the topic <B>Selecting a Threading Model</B> in the IIS documentation in the Platform SDK.</li>

	<LI><B>If your component uses the heap intensively, consider other heap alternatives</B>. Intensive use of the Windows<sup>&reg;</sup> heap can cause resource contention. Several memory allocation alternatives are worth exploring, including:
<UL type=disc>
	<LI><B>Heap Partitioning</B>, accomplished by creating multiple custom heaps, in addition to the default process heap. Each custom heap would then be controlled by a separate, non-global lock, and lock contention would be reduced.</li>

	<LI><B>Cached Allocation</B>, which involves using custom allocation operations that operate at a middle layer between the object users and the heap. Calls to the Win32 heap are made infrequently, and only for large memory blocks. These blocks are then subdivided and managed by the custom allocator.</li>

	<LI><B>Stack Allocation</B>, using the C run-time function <B>_alloca</B> to allocate memory for your objects on the stack instead of the heap. This method is feasible only for relatively small objects, because the space available on the stack is limited. In addition, your newly allocated object will be available only within the current functions, or functions called by that function. Once the current function returns, the storage allocated on the stack will be lost.</li>

	<LI><B>Object Encapsulation</B>, accomplished by simply incorporating a buffer as a member data structure of your component class. This buffer is then used for tasks that would otherwise require accesses to the Win32 heap.</li>
</UL>
</li>

	<LI><B>Avoid using global locks within your component</B>, if possible. Global locks can often adversely affect component scalability.</li>

	<LI><B>If your component is running as part of an application, designate the application as out-of-process for application debugging only.</B> Process isolation, introduced in IIS 4.0. is a useful capability. The cross-process marshalling required to support process isolation, however, can introduce a certain amount of overhead to component execution. This difference in overhead is most significant for simple components, and is less of a concern for more complex components. To maximize scalability and performance, however, consider running the application out-of-process only until it is sufficiently debugged and stable to be run in-process with IIS.</li>

	<LI><B>Consider placing your component in a library (in-process) COM+ application. </B>As part of the Just-In-Time activation feature of Component Services, the component's COM class factory is cached, and reused for each instantiation request through CreateInstance.</li>
</UL>
<hr class="iis" size="1">
<p align="center"><em><a href="../../../common/colegal.htm">&copy; 1997-2001 Microsoft Corporation. All rights reserved.</a></em></p>
</BODY>
</HTML>
