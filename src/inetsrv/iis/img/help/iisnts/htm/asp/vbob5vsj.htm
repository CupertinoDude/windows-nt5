<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>ServerVariables</TITLE>
<SCRIPT LANGUAGE="JavaScript">
<!--
	TempString = navigator.appVersion
	if (navigator.appName == "Microsoft Internet Explorer"){	
// Check to see if browser is Microsoft
		if (TempString.indexOf ("4.") >= 0){
// Check to see if it is IE 4
			document.writeln('<link rel="stylesheet" type="text/css" href="/iishelp/common/coua.css">');
		}
		else {
			document.writeln('<link rel="stylesheet" type="text/css" href="/iishelp/common/cocss.css">');
		}
	}
	else if (navigator.appName == "Netscape") {						
// Check to see if browser is Netscape
		document.writeln('<link rel="stylesheet" type="text/css" href="/iishelp/common/coua.css">');
	}
	else
		document.writeln('<link rel="stylesheet" type="text/css" href="/iishelp/common/cocss.css">');
//-->
</script>
<SCRIPT LANGUAGE="VBScript">
<!--
Sub Window_OnLoad()
   Dim frmContents
   On Error Resume Next
   If Not Parent Is Nothing Then
      Set frmContents = Parent.Contents
      If Not frmContents Is Nothing Then
            frmContents.Window.TOCSynch_Click
      End If
   End If
End Sub
//--></SCRIPT><META NAME="DESCRIPTION" CONTENT="Internet Information Services reference information">
<META HTTP-EQUIV="PICS-Label" CONTENT='(PICS-1.1 "<http://www.rsac.org/ratingsv01.html>" l comment "RSACi North America Server" by "inet@microsoft.com <mailto:inet@microsoft.com>" r (n 0 s 0 v 0 l 0))'>
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="MS-IT-LOC" Content="Internet Information Services"> 
</HEAD>

<BODY BGCOLOR="#FFFFFF" TEXT="#000000">

<H4><A NAME="_servervariables"></A><SUP></SUP>ServerVariables</H4>

<P>The <B>ServerVariables </B>collection retrieves the values of predetermined environment variables.</P>

<H6>Syntax</H6>

<P><B>Request.ServerVariables (</B><I>server environment</I> <I>variable</I><B>)</B></P>

<P><B>&nbsp;</B></P>

<H6>Parameters</H6>

<DL>
<DT><I>server environment variable</I></DT>

<DD>Specifies the name of the server environment variable to retrieve. It can be one of the following values.

<TABLE border=0 cellpadding=5 cols=2 frame=box rules=all>

<TR VALIGN="top">
<TD class=blue width=47%><B>Variable</B></TD>
<TD class=blue width=53%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=47%>ALL_HTTP</TD>
<TD width=53%>All HTTP headers sent by the client.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>ALL_RAW</TD>
<TD width=53%>Retrieves all headers in raw form. The difference between ALL_RAW and ALL_HTTP is that ALL_HTTP places an HTTP_ prefix before the header name and the header name is always capitalized. In ALL_RAW the header name and values appear as they are sent by the client. </TD>
</TR>

<TR VALIGN="top">
<TD width=47%>APPL_MD_PATH</TD>
<TD width=53%>Retrieves the metabase path for the Application for the ISAPI DLL.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>APPL_PHYSICAL_PATH</TD>
<TD width=53%>Retrieves the physical path corresponding to the metabase path. IIS converts the APPL_MD_PATH to the physical (directory) path to return this value.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>AUTH_PASSWORD</TD>
<TD width=53%>The value entered in the client's authentication dialog. This variable is available only if Basic authentication is used. </TD>
</TR>

<TR VALIGN="top">
<TD width=47%>AUTH_TYPE</TD>
<TD width=53%>The authentication method that the server uses to validate users when they attempt to access a protected script.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>AUTH_USER</TD>
<TD width=53%>Raw authenticated user name. </TD>
</TR>

<TR VALIGN="top">
<TD width=47%>CERT_COOKIE</TD>
<TD width=53%>Unique ID for client certificate, returned as a string. Can be used as a signature for the whole client certificate.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>CERT_FLAGS</TD>
<TD width=53%>bit0 is set to 1 if the client certificate is present.
<P>bit1 is set to 1 if the cCertification authority of the client certificate is invalid (it is not in the list of recognized CAs on the server).</P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>CERT_ISSUER</TD>
<TD width=53%>Issuer field of the client certificate (O=MS, OU=IAS, CN=user name, C=USA).</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>CERT_KEYSIZE</TD>
<TD width=53%>Number of bits in Secure Sockets Layer connection key size. For example, 128.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>CERT_SECRETKEYSIZE</TD>
<TD width=53%>Number of bits in server certificate private key. For example, 1024.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>CERT_SERIALNUMBER</TD>
<TD width=53%>Serial number field of the client certificate.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>CERT_SERVER_ISSUER</TD>
<TD width=53%>Issuer field of the server certificate.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>CERT_SERVER_SUBJECT</TD>
<TD width=53%>Subject field of the server certificate.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>CERT_SUBJECT</TD>
<TD width=53%>Subject field of the client certificate.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>CONTENT_LENGTH</TD>
<TD width=53%>The length of the content as given by the client. </TD>
</TR>

<TR VALIGN="top">
<TD width=47%>CONTENT_TYPE</TD>
<TD width=53%>The data type of the content. Used with queries that have attached information, such as the HTTP queries GET, POST,<B> </B>and PUT.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>GATEWAY_INTERFACE</TD>
<TD width=53%>The revision of the CGI specification used by the server. The format is CGI/<I>revision</I>. </TD>
</TR>

<TR VALIGN="top">
<TD width=47%>HTTP_&lt;<I>HeaderName</I>&gt;</TD>
<TD width=53%>The value stored in the header <I>HeaderName</I>. Any header other than those listed in this table must be prefixed by HTTP_ in order for the <B>ServerVariables</B> collection to retrieve its value.
<P><span class=le><B>Note</B></span>&nbsp;&nbsp;&nbsp;The server interprets any underscore (_) characters in <I>HeaderName</I> as dashes in the actual header. For example if you specify HTTP_MY_HEADER, the server searches for a header sent as MY-HEADER.</P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>HTTP_ACCEPT</TD>
<TD width=53%>Returns the value of the Accept header.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>HTTP_ACCEPT_LANGUAGE</TD>
<TD width=53%>Returns a string describing the language to use for displaying content.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>HTTP_USER_AGENT</TD>
<TD width=53%>Returns a string describing the browser that sent the request.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>HTTP_COOKIE</TD>
<TD width=53%>Returns the cookie string that was included with the request.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>HTTP_REFERER</TD>
<TD width=53%>Returns a string containing the URL of the page that referred the request to the current page, but does not include redirect requests. Redirect requests are not captured.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>HTTPS</TD>
<TD width=53%>Returns ON if the request came in through secure channel (SSL) or it returns OFF if the request is for a non-secure channel.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>HTTPS_KEYSIZE</TD>
<TD width=53%>Number of bits in Secure Sockets Layer connection key size. For example, 128.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>HTTPS_SECRETKEYSIZE</TD>
<TD width=53%>Number of bits in server certificate private key. For example, 1024.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>HTTPS_SERVER_ISSUER</TD>
<TD width=53%>Issuer field of the server certificate.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>HTTPS_SERVER_SUBJECT</TD>
<TD width=53%>Subject field of the server certificate.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>INSTANCE_ID</TD>
<TD width=53%>The ID for the IIS instance in textual format. If the instance ID is 1, it appears as a string. You can use this variable to retrieve the ID of the Web-server instance (in the metabase) to which the request belongs.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>INSTANCE_META_PATH</TD>
<TD width=53%>The metabase path for the instance of IIS that responds to the request.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>LOCAL_ADDR</TD>
<TD width=53%>Returns the Server Address on which the request came in. This is important on multi-homed computers where there can be multiple IP addresses bound to the computer and you want to find out which address the request used.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>LOGON_USER</TD>
<TD width=53%>The Windows account that the user is logged into.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>PATH_INFO</TD>
<TD width=53%>Extra path information as given by the client. You can access scripts by using their virtual path and the PATH_INFO server variable. If this information comes from a URL, it is decoded by the server before it is passed to the CGI script.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>PATH_TRANSLATED</TD>
<TD width=53%>A translated version of PATH_INFO that takes the path and performs any necessary virtual-to-physical mapping.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>QUERY_STRING</TD>
<TD width=53%>Query information stored in the string following the question mark (?) in the HTTP request.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>REMOTE_ADDR</TD>
<TD width=53%>The IP address of the remote host making the request.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>REMOTE_HOST</TD>
<TD width=53%>The name of the host making the request. If the server does not have this information, it will set REMOTE_ADDR and leave this empty.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>REMOTE_USER</TD>
<TD width=53%>Unmapped user-name string sent in by the user. This is the name that is really sent by the user, as opposed to the names that are modified by any authentication filter installed on the server.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>REQUEST_METHOD</TD>
<TD width=53%>The method used to make the request. For HTTP, this is GET, HEAD, POST, and so on.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>SCRIPT_NAME</TD>
<TD width=53%>A virtual path to the script being executed. This is used for self-referencing URLs.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>SERVER_NAME</TD>
<TD width=53%>The server's host name, DNS alias, or IP address as it would appear in self-referencing URLs.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>SERVER_PORT</TD>
<TD width=53%>The port number to which the request was sent.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>SERVER_PORT_SECURE</TD>
<TD width=53%>A string that contains either 0 or 1. If the request is being handled on the secure port, then this will be 1. Otherwise, it will be 0.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>SERVER_PROTOCOL</TD>
<TD width=53%>The name and revision of the request information protocol. The format is <I>protocol</I>/<I>revision</I>.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>SERVER_SOFTWARE</TD>
<TD width=53%>The name and version of the server software that answers the request and runs the gateway. The format is <I>name</I>/<I>version</I>.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>URL </TD>
<TD width=53%>Gives the base portion of the URL.</TD>
</TR>
</TABLE><BR>

</DD>
</DL>

<H6>Remarks</H6>

<P>If a client sends a header other than those specified in the preceding table, you can retrieve the value of that header by prefixing the header name with HTTP_ in the call to <B>Request.ServerVariables</B>. For example, if the client sends the header:</P>

<PRE><CODE>  SomeNewHeader:SomeNewValue</CODE></PRE>

<P>You can retrieve <CODE>SomeNewValue</CODE> by using the following syntax:</P>

<PRE><CODE>  &lt;% Request.ServerVariables("HTTP_SomeNewHeader") %&gt;
 </CODE></PRE>

<H6>Example</H6>

<P>This example displays several server variables by name:</P>

<PRE><CODE>&lt;HTML&gt;
&lt;!-- This example displays the content of several ServerVariables. --&gt; 
ALL_HTTP server variable = 
&lt;%= Request.ServerVariables("ALL_HTTP") %&gt; &lt;BR&gt;
CONTENT_LENGTH server variable = 
&lt;%= Request.ServerVariables("CONTENT_LENGTH") %&gt; &lt;BR&gt; 
CONTENT_TYPE server variable = 
&lt;%= Request.ServerVariables("CONTENT_TYPE") %&gt; &lt;BR&gt;
QUERY_STRING server variable = 
&lt;%= Request.ServerVariables("QUERY_STRING") %&gt; &lt;BR&gt; 
SERVER_SOFTWARE server variable = 
&lt;%= Request.ServerVariables("SERVER_SOFTWARE") %&gt; &lt;BR&gt; 
&lt;/HTML&gt;</CODE></PRE>

<P>This example uses the VBScript For Each loop to iterate through each existing server variable name. Some will be empty if you have Anonymous Access enabled. The following script prints out all of the server variables in a table:</P>

<PRE><CODE>&lt;TABLE BORDER="1"&gt;
&lt;TR&gt;&lt;TD&gt;&lt;B&gt;Server Variable&lt;/B&gt;&lt;/TD&gt;&lt;TD&gt;&lt;B&gt;Value&lt;/B&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;% For Each strKey In Request.ServerVariables %&gt; 
&lt;TR&gt;
&lt;TD&gt;&lt;%= strKey %&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;%= Request.ServerVariables(strKey) %&gt;&lt;/TD&gt;
&lt;/TR&gt;
&lt;% Next %&gt;
&lt;/TABLE&gt;
 </CODE></PRE>

<P>This example inserts the name of the server into a hyperlink. </P>

<PRE><CODE>&lt;A HREF= "http://&lt;%=Request.ServerVariables("SERVER_NAME")%&gt;/scripts/MyPage.asp"&gt;
Link to MyPage.asp
&lt;/A&gt;
 </CODE></PRE>

<H6>Applies To</H6>

<P><A HREF="/iishelp/iis/htm/asp/vbob5ulw.htm"><B>Request</B> Object</A> </P>

<H6>See Also</H6>

<P><A HREF="/iishelp/iis/htm/asp/vbob8q5h.htm"><B>ClientCertificate</B></A>, <A HREF="/iishelp/iis/htm/asp/vbob0z3o.htm"><B>Cookies</B></A>, <A HREF="/iishelp/iis/htm/asp/vbob4fl9.htm"><B>Form</B></A>, <A HREF="/iishelp/iis/htm/asp/vbob53hj.htm"><B>QueryString</B></A></P>
<hr class="iis" size="1">
<p align="center"><em><a href="../../../common/colegal.htm">&copy; 1997-2001 Microsoft Corporation. All rights reserved.</a></em></p>
</BODY>
</HTML>
