<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<html dir=ltr><head><title>Setting Object Scope</title>

<SCRIPT LANGUAGE="JavaScript">
<!--
	TempString = navigator.appVersion
	if (navigator.appName == "Microsoft Internet Explorer"){	
// Check to see if browser is Microsoft
		if (TempString.indexOf ("4.") >= 0){
// Check to see if it is IE 4
			document.writeln('<link rel="stylesheet" type="text/css" href="/iishelp/common/coua.css">');
		}
		else {
			document.writeln('<link rel="stylesheet" type="text/css" href="/iishelp/common/cocss.css">');
		}
	}
	else if (navigator.appName == "Netscape") {						
// Check to see if browser is Netscape
		document.writeln('<link rel="stylesheet" type="text/css" href="/iishelp/common/coua.css">');
	}
	else
		document.writeln('<link rel="stylesheet" type="text/css" href="/iishelp/common/cocss.css">');
//-->
</script> 

 

<SCRIPT LANGUAGE="VBScript">
<!--
Sub Window_OnLoad()
   Dim frmContents
   On Error Resume Next
   If Not Parent Is Nothing Then
      Set frmContents = Parent.Contents
      If Not frmContents Is Nothing Then
            frmContents.Window.TOCSynch_Click
      End If
   End If
End Sub
//--></SCRIPT>

<META NAME="DESCRIPTION" CONTENT="Explains the ASP script commands to use to set the scope of objects, and gives recommendations. Also provides performance tips and recommendations for which threading model to use for particular situations."><META HTTP-EQUIV="Content-Type" content="text/html; charset=Windows-1252">
<META HTTP-EQUIV="PICS-Label" CONTENT='(PICS-1.1 "<http://www.rsac.org/ratingsv01.html>" l comment "RSACi North America Server" by "inet@microsoft.com <mailto:inet@microsoft.com>" r (n 0 s 0 v 0 l 0))'>
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="MS-IT-LOC" Content="Internet Information Services">

</head>

<body bgcolor="#FFFFFF" text="#000000"><font face="Verdana,Arial,Helvetica">	

<h1><a name="settingcomponentscope">Setting Object Scope</a></h1>


<p>The scope of an object determines which scripts can use that object.  By default, when you create an object instance, the object has page scope.  Any script command in the same ASP page can use a page-scope object; the object is released when the .asp file completes processing the request.  The recommended scope for most objects is page scope.  You can change the scope of an object, however, to make it accessible from scripts on other pages.  This topic explains how to work with page scope objects and how to change the scope of objects.<p>

<h2><a name="H2_37778304">Using Page Scope Objects</a></h2>

<p>An object that you create by using <strong>Server.CreateObject</strong> or the HTML &lt;OBJECT&gt; tag on an ASP page exists for the duration of that page.  The object is accessible to any script commands on that page, and it is released when ASP has finished processing the page.  Thus an object has the scope, or lifetime, of a page.</p>

<H3>Creating Objects in Loops</H3>

<p>In general, you should avoid creating objects inside a loop.  If you must create objects in a loop, you should manually release the resources used by an object:</p>

<pre>&lt;%
  Dim objAd
  For i = 0 To 1000
    Set objAd = Server.CreateObject("MSWC.AdRotator")
    .
    .
    .		
    objAd.GetAdvertisement
    .
    .
    .
    Set objAd = Nothing		
  Next
%&gt;</pre>

<h2><a name="sessionscope">Giving an Object Session Scope</a></h2>

<p>A <em>session-scope</em> object is created for each new session in an application and released when the session ends; thus, there is one object per active session.   Session scope is used for objects that  are called from multiple scripts but affect one user session.  You should give objects session scope only when needed. If you do use session scope, you must know the threading model of the component that provides the object because the threading model affects the performance and security context of the object.  For more information, see <a href="#performanceissues">Advanced Information: Performance Issues</a> in this topic.</p>

<p>To give an object session scope,  store the object in the ASP <strong>Session </strong> built-in object.  You can use either the HTML &lt;OBJECT&gt; tag in a Global.asa file or the <strong>Server.CreateObject </strong> method on an ASP page to create a session scope object instance.</p>

<p>In the Global.asa file, you can use the &lt;OBJECT&gt; tag, extended with RUNAT attribute (which must be set to SERVER) and the SCOPE attribute (which must be set to  Session). The following example creates a session-scope instance of the Browser Type object of the Browser Capabilities component:</p>

<pre>&lt;OBJECT RUNAT=SERVER SCOPE=Session ID=MyBrowser PROGID="MSWC.BrowserType"&gt;
&lt;/OBJECT&gt;</pre>

<p>Once you have stored the object in the <strong>Session</strong> object, you can access the object from any page in the application.  The following statement uses the object instance created by the &lt;OBJECT&gt; tag in the previous example:</p>

<pre>&lt;%= If MyBrowser.browser = "IE"  and  MyBrowser.majorver >= 4  Then . . .%&gt;</pre>

<p>On an ASP page, you can also use the <strong>Server.CreateObject</strong> method to store an object in the <strong>Session</strong> built-in object. The following example stores an instance of the Browser Type object in the <strong>Session</strong> object.</p>

<pre>&lt;% Set Session("MyBrowser") = Server.CreateObject("MSWC.BrowserType") %&gt; </pre>

<p>To display browser information in a different .asp file, you first retrieve the instance of the <STRONG>BrowserType</STRONG> object stored in the <strong>Session</strong> object, and then call the <STRONG>Browser</STRONG> method to display the name of the browser:</p>

<pre>&lt;% Set MyBrowser = Session("MyBrowser") %&gt; 
&lt;%= MyBrowser.browser %&gt;</pre>

<p>ASP does not instantiate an object that you declare with the &lt;OBJECT&gt; tag until that object is referenced by a script command from an .asp file. The <strong>Server.CreateObject</strong> method instantiates the object immediately. Thus, the &lt;OBJECT&gt; tag offers better scalability than the <strong>Server.CreateObject</strong> method for session-scope objects.</p>

<h2><a name="H2_37783263">Giving an Object Application Scope</a></h2>

<p>An <em>application-scope</em> object is a single instance of an object that is created when the application starts. This object is shared by all client requests.  Some utility objects, such as the objects of the <A HREF="comp00vo.htm">Page Counter Component</A>, might perform better in application scope, but generally you should use the alternatives proposed in the following section.  In addition, the threading model affects the performance and security context of the object (see <a href="#performanceissues">Advanced Information: Performance Issues</a> in this topic).</p>

<p>To give an object application scope, store the object in the ASP <strong>Application</strong> built-in object.  You can use either the &lt;OBJECT&gt; tag in a Global.asa file or the <strong>Server.CreateObject </strong> method in an .asp file to create an application scope object instance.</p>

<p>In the Global.asa file, you can use the &lt;OBJECT&gt; tag, extended with RUNAT attribute (which must be set to Server) and the SCOPE attribute (which must be set to  Application).   For example, the following is an example of using the &lt;OBJECT&gt; tag to create an application-scope instance of the Ad Rotator object:

<pre>&lt;OBJECT RUNAT=SERVER SCOPE=Application ID=MyAds PROGID="MSWC.AdRotator"&gt;
&lt;/OBJECT&gt;</pre>

<P>After storing the Ad Rotator object in Application state, you can access from any page in you application using a statement such as the following:</P>

<PRE>&lt;%=MyAds.GetAdvertisement("CustomerAds.txt")&nbsp;%&gt;</PRE>

<P>Alternatively, in an .asp file, you can use <strong>Server.CreateObject</strong> to store an object instance in the <strong>Application</strong> built-in object, such as in the following example:</P>

&lt;% Set Application("MyAds") = Server.CreateObject("MSWC.Adrotator")%&gt;

<P>You can display the advertisement in your application's .asp files by retrieving the instance of the Ad Rotator object from Application state, as in the following example:</P>

&lt;%Set MyAds = Application("MyAds")  %&gt;
&lt;%=MyAds.GetAdvertisement("CustomerAds.txt")  %&gt;

<h2><a name="alternativestosession">Alternatives to Session and Application Scope</a></h2>

<p>In general, you should try to extensively use application or session state for items or objects that take a long time to initialize, such as dictionary objects or recordsets. However, if you find that objects in session or application state are  consuming too many resources, such as memory or database connections, you should seek alternative ways to implement these objects. For example, the threading model of a component can affect the performance of objects you create from it, especially objects with session or application scope.</p>

<p>In many cases, a better solution than creating application or session scope objects is to use session or application scope variables that pass information to objects created at the page level.  For example, you should not give an ADO <strong>Connection</strong> object session or application scope because the connection it creates remains open for a long time and because your script no longer takes advantage of connection pooling.  You can, however, store an ODBC or OLE DB connection string in the <strong>Session</strong> or <strong>Application</strong> built-in object and access the string to set a property on the  <strong>Connection</strong> object instance that you create on a page.  In this way, you store frequently used information in session or application state but you create the object that uses the information only when needed.  For more information about scoping variables, see <a href="iiwavar.htm">Using Variables and Constants</a>.</p>

<h2><a name="jscriptobjects">User-Defined JScript Objects</a></h2>

<p>You can create your own JScript object by defining a constructor function that creates and initializes the properties and methods of the new object.  The object instance is created when your script uses the <strong>new</strong> operator to invoke the constructor.  User-defined JScript objects are supported in ASP server-side scripts and work well when they have page scope.  However, you cannot give a user-defined object application scope.  Also, giving a user-defined JScript object session scope may affect the functionality of the object.  In particular, if an object has session scope, scripts on other pages can access the object's properties but cannot call its methods. Also, giving a user-defined JScript object session scope can affect Web application performance.</p>

<h2><a name="performanceissues">Advanced Information: Performance Issues</a></h2>

<p>The threading model of a component may affect the performance of your Web site.  Generally, objects that are marked Both are the recommended objects to use in .asp files if they will be stored in <strong>Session</strong> and <strong>Application</strong> state.  Single-threaded, Apartment, and free-threaded objects are not recommended.</p>

<p>Because you may not always have control over the threading model of the objects you use, the following guidelines will help you get the best performance:</p>

<ul>
<li><strong>Page scope objects</strong>  Objects marked Both or Apartment will give you the best performance.</li>

<li><strong>Application scope objects</strong>  Objects marked Both, that also aggregate the FreeThreadedMarshaler, will give you the best performance.  You can use either the &lt;OBJECT&gt; tag or the <strong>Server.CreateObject</strong> method to store objects marked Both in the <strong>Application</strong> object.  You  must use the HTML&nbsp;&lt;OBJECT&gt; tag with apartment-threaded objects.</li>

<li><strong>Session scope objects</strong>  Objects marked Both will give you the best performance.   Using  single-threaded or apartment-threaded objects will cause the Web server to lock the session down to one thread. Free-threaded objects do not lock down the session, but are slow.  You can use either the &lt;OBJECT&gt; tag or the <strong>Server.CreateObject</strong> method to store objects in the <strong>Session</strong> object.</li>

</ul>




<hr class="iis" size="1">
<p align="center"><em><a href="/iishelp/common/colegal.htm">&copy; 1997-2001 Microsoft Corporation. All rights reserved.</a></em></p>

</font>
</body>
</html>
