<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<html dir=ltr><head><title>Creating an ASP Page</title>

<SCRIPT LANGUAGE="JavaScript">
<!--
	TempString = navigator.appVersion
	if (navigator.appName == "Microsoft Internet Explorer"){	
// Check to see if browser is Microsoft
		if (TempString.indexOf ("4.") >= 0){
// Check to see if it is IE 4
			document.writeln('<link rel="stylesheet" type="text/css" href="/iishelp/common/coua.css">');
		}
		else {
			document.writeln('<link rel="stylesheet" type="text/css" href="/iishelp/common/cocss.css">');
		}
	}
	else if (navigator.appName == "Netscape") {						
// Check to see if browser is Netscape
		document.writeln('<link rel="stylesheet" type="text/css" href="/iishelp/common/coua.css">');
	}
	else
		document.writeln('<link rel="stylesheet" type="text/css" href="/iishelp/common/cocss.css">');
//-->
</script> 



<META NAME="DESCRIPTION" CONTENT="Explains how to create an .asp file and insert script commands into the file."><META HTTP-EQUIV="Content-Type" content="text/html; charset=Windows-1252">

<META HTTP-EQUIV="PICS-Label" CONTENT='(PICS-1.1 "<http://www.rsac.org/ratingsv01.html>" l comment "RSACi North America Server" by "inet@microsoft.com <mailto:inet@microsoft.com>" r (n 0 s 0 v 0 l 0))'>
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="MS-IT-LOC" Content="Internet Information Services">

</head>

<body bgcolor="#FFFFFF" text="#000000">

<font face="Verdana,Arial,Helvetica">


<h1><a name="H1_37765342">Creating an ASP Page</a></h1>


<p>An Active Server Pages (ASP) file is a text file with the extension .asp that contains any combination of the following:</p>

<ul>
<li>Text</li>
<li>HTML tags</li>
<li>Server-side scripts</li>
</ul>

<p>A quick way to create an .asp file is to rename your HTML files by replacing the existing .htm or .html file name extension with an .asp extension. If your file does not contain any ASP functionality, then the server dispenses with the ASP script processing and efficiently sends the file to the client. As a Web developer, this affords you tremendous flexibility because you can assign your files .asp extensions, even if you do not plan on adding ASP functionality until later.</p>

<p>To publish an .asp file on the Web, save the new file in a virtual directory on your Web site (be sure that the directory has Script or Execute permission enabled). Next, request the file with your browser by typing in the file's URL.  (Remember, ASP pages must be served, so you cannot request an .asp file by typing in its physical path.) After the file loads in your browser, you will notice that the server has returned an HTML page.  This may seem strange at first, but remember that the server parses and executes all ASP server-side scripts prior to sending the file.  The user will always receive standard HTML.</p>

<p>You can use any text editor to create .asp files.  As you progress, you may find it more productive to use an editor with enhanced support for ASP, such as Microsoft&#174; Visual InterDev&#153;. (For more information, visit the <A HREF="http://www.microsoft.com/isapi/redir.dll?prd=vinterdev&ar=home&pver=6.0" target="_blank">Microsoft Visual InterDev Web site</A>.) </P>

<h2><a name="whatisascript">Adding Server-Side Script Commands</a></h2>

<p>A server-side script is a series of instructions used to sequentially issue commands to the Web server.  (If you have developed Web sites previously, then you are probably familiar with client-side scripts, which run on the Web browser.) In .asp files, scripts are differentiated from text and HTML by delimiters. A <em>delimiter</em> is a character or sequence of characters that marks the beginning or end of a unit. In the case of HTML, these delimiters are the less than (&lt;) and greater than (&gt;) symbols, which enclose HTML tags.</p>

<p>ASP uses the delimiters &lt;% and  %&gt; to enclose script commands. Within the delimiters, you can include any command that is valid for the scripting language you are using.  The following example shows a simple HTML page that contains a script command:</p>

<pre>&lt;HTML&gt;
  &lt;BODY&gt;
  This page was last refreshed on &lt;%= Now() %&gt;.
  &lt;/BODY&gt;
&lt;/HTML&gt;</pre>

<p>The VBScript function <strong>Now()</strong> returns the current date and time.  When the Web server processes this page, it replaces <code>&lt;%= Now() %&gt;</code> with the current date and time and returns the page to the browser with the following result:</p>

<pre>This page was last refreshed on 01/29/99 2:20:00 PM.</pre>

<p>Commands enclosed by delimiters are called <em>primary script commands</em>, which are processed using the primary scripting language.  Any command that you use within script delimiters must be valid for the primary scripting language.  By default, the primary scripting language is VBScript, but you can also set a different default language.  See <a href="iiwascln.htm">Working with Scripting Languages</a>.</p>

<p>If you are already familiar with client-side scripting, you are aware that the HTML &lt;SCRIPT&gt; tag is used to enclose script commands and expressions.  You can also use the &lt;SCRIPT&gt; tag for server-side scripting,  whenever you need to define procedures in multiple languages within an .asp file.  For more information, see <a href="iiwascln.htm">Working with Scripting Languages</a>.</p>

<h2><a name="singleexpressions">Mixing HTML and Script Commands</a></h2>

<p>You can include, within ASP delimiters, any statement, expression, procedure, or operator that is valid for your primary scripting language.  A <em>statement</em>, in VBScript and other scripting languages, is a syntactically complete unit that expresses one kind of action, declaration, or definition. The conditional <strong>If...Then...Else</strong> statement that appears below is a common VBScript statement:</p>

<pre>&lt;% 
  Dim dtmHour
  
  dtmHour = Hour(Now())

  If dtmHour &lt; 12 Then
    strGreeting = &quot;Good Morning!&quot;
  Else 	
    strGreeting = &quot;Hello!&quot;
  End If   
%&gt; 

&lt;%= strGreeting %&gt;</pre>

<p>Depending on the hour, this script assigns either the value <code>"Good Morning!"</code> or the value <code>"Hello!"</code> to the string variable <code>strGreeting</code>.  The <code>&lt;%= strGreeting %&gt;</code> statement sends the current value of the variable to the browser.</p>

<p>Thus, a user viewing this script before 12:00 noon (in the Web server&#146;s time zone) would see this line of text:</p>

<pre>Good Morning!</pre>

<p>A user viewing the script at or after 12:00 noon would see this line of text:</p>

<pre>Hello!</pre>

<p>You can include HTML text between the sections of a statement. For example, the following script, which mixes HTML within an <strong>If...Then...Else</strong> statement, produces the same result as the script in the previous example:</p>

<pre>&lt;%
  Dim dtmHour

  dtmHour = Hour(Now())

  If dtmHour &lt; 12 Then
%&gt; 
  Good Morning!
&lt;% Else %&gt;
  Hello!
&lt;% End If %&gt;</pre>

<p>If the condition is true&#151;that is, if the time is before noon&#151;then the Web server sends the HTML that follows the condition (&#147;Good Morning&#148;) to the browser; otherwise, it sends the HTML that follows <strong>Else</strong> (&#147;Hello!&#148;) to the browser.  This way of mixing HTML and script commands is convenient for wrapping the <strong>If...Then...Else</strong> statement around several lines of HTML text.  The previous example is more useful if you want to display a greeting in several places on your Web page.  You can set the value of the variable once and then display it repeatedly.</p>

<p>Rather than interspersing HTML text with script commands, you can return HTML text to the browser from within a script command.  To return text to the browser, use the ASP built-in object <strong>Response</strong>.  The following example produces the same result as the previous scripts:</p>

<pre>&lt;% 
  Dim dtmHour
  
  dtmHour = Hour(Now())

  If dtmHour &lt; 12 Then
    Response.Write &quot;Good Morning!&quot;
  Else 	
    Response.Write &quot;Hello!&quot;
  End If   
%&gt; 
</pre>

<p><strong>Response.Write</strong> sends the text that follows it to the browser. Use <strong>Response.Write</strong> from within a statement when you want to dynamically construct the text returned to the browser.  For example, you might want to build a string that contains the values of several variables.  You will learn more about the <strong>Response</strong> object, and objects in general, in <a href="iiwacomu.htm">Using Components and Objects</a> and <a href="iiwacont.htm">Sending Content to the Browser</a>.  For now, simply note that you have several ways to insert script commands into an HTML page.</p>

<p>You can include procedures written in your default primary scripting language within ASP delimiters. Refer to <a href="iiwascln.htm">Working with Scripting Languages</a> for more information.</p>

<p>If you are working with JScript commands,  you can insert the curly braces, which indicate a block of statements, directly into your ASP commands, even if they are interspersed with HTML tags and text.  For example:</p>

<pre>&lt;% 
  if (screenresolution == &quot;low&quot;)
  {
%&gt;
This is the text version of a page.
&lt;%
  }
  else
  {
%&gt;
This is the multimedia version of a page.
&lt;%
  } 
%&gt;</pre>

<p>--Or--</p>

<pre>&lt;% 
  if (screenresolution == &quot;low&quot;)
  { 
    Response.Write(&quot;This is the text version of a page.&quot;)
  }
  else
  { 
    Response.Write(&quot;This is the multimedia version of a page.&quot;)
  } 
%&gt;</pre>



<h2><a name="aspdirectives">Using ASP Directives</a></h2>

<p>ASP provides directives that are not part of the scripting language you use:  the output directive and the processing directive.</p>

<p>The ASP <em>output directive</em> <code>&lt;%= <em>expression</em> %&gt;</code> displays the value of an expression.  This output directive is equivalent to using <strong>Response.Write</strong> to display information.  For example, the output expression <code>&lt;%= city %&gt;</code> displays the word <code>Baltimore</code> (the current value of the variable) on the browser.</p>

<p>The ASP <em>processing directive</em> <code>&lt;%@ <em>keyword</em> %&gt;</code> gives ASP the information it needs to process an .asp file.  For example, the following directive sets VBScript as the primary scripting language for the page:</p>

<pre>&lt;%@ LANGUAGE=VBScript %&gt;</pre>

<p>The processing directive must appear on the first line of an .asp file.  To add more than one directive to a page, the directive must be within the same delimiter.  Do not put the processing directive in a file included with the <strong>#include</strong> statement.  (For more information, see <a href="iiwainc.htm">Including Files</a>.) You must use a space between the at sign (@) and the keyword. The processing directive has the following keywords:</p>

<ul>
<li>The <A HREF="dire0bz9.htm">LANGUAGE</A> keyword sets the scripting language for the .asp file.  See <a href="iiwascln.htm">Working with Scripting Languages</a>.</li>
<li>The <A HREF="dire92zp.htm">ENABLESESSIONSTATE</A> keyword specifies whether an .asp file uses session state.  See <a href="iiapsess.htm">Managing Sessions</a>.</li>
<li>The <A HREF="dire7ixx.htm">CODEPAGE</A> keyword sets the code page (the character encoding) for the .asp file.</li>
<li>The <A HREF="dire8dr8.htm">LCID</A> keyword sets the locale identifier for the file.</li>
<li>The <A HREF="dire5t0u.htm">TRANSACTION</A> keyword specifies that the .asp file will run under a transaction context.  See <a href="iiaptran.htm">Understanding Transactions</a>.</li>
</ul>

<p><strong>Important</strong>&nbsp;&nbsp;&nbsp;You can include more than one keyword in a single directive. Keyword/value pairs must be separated by a space. Do not put spaces around the equal sign (=).</p>

<p>The following example sets both the scripting language and the code page:</p>

<pre>&lt;%@ LANGUAGE=&quot;JScript&quot; CODEPAGE=&quot;932&quot; %&gt;</pre>

<h2><a name="H2_37775911">White Space in Scripts</a></h2>

<p>If your primary scripting language is either VBScript or JScript, ASP removes white space from commands.  For all other scripting languages, ASP preserves white space so that languages dependent upon position or indentation are correctly interpreted.  White space includes spaces, tabs, returns, and line feeds.</p>

<p>For VBScript and JScript, you can use white space after the opening delimiter and before the closing delimiter to make commands easier to read. All of the following statements are valid:</p>

<pre>&lt;% Color = &quot;Green&quot; %&gt;

&lt;%Color=&quot;Green&quot;%&gt;

&lt;%
Color = &quot;Green&quot;
%&gt;</pre>

<p>ASP removes white space between the closing delimiter of a statement and the opening delimiter of the following statement. However, it is good practice to use spaces to improve readability. If you need to preserve the white space between two statements, such as when you are displaying the values of variables in a sentence, use an HTML nonbreaking space character (&amp;nbsp;).  For example:</p>

<pre>&lt;%
  'Define two variables with string values.
  strFirstName = &quot;Jeff&quot;
  strLastName = &quot;Smith&quot;
%&gt;

&lt;P&gt;This Web page is customized for &quot;&lt;%= strFirstName %&gt;&amp;nbsp;&lt;%= strLastName %&gt;.&quot; &lt;/P&gt;</pre>


<hr class="iis" size="1">
<p align="center"><em><a href="/iishelp/common/colegal.htm">&copy; 1997-2001 Microsoft Corporation. All rights reserved.</a></em></p>

</font>

</font>
</body>

</html>
