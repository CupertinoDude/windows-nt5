<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML DIR=LTR><HEAD><TITLE>Using Components and Objects</TITLE>

<SCRIPT LANGUAGE="JavaScript">
<!--
	TempString = navigator.appVersion
	if (navigator.appName == "Microsoft Internet Explorer"){	
// Check to see if browser is Microsoft
		if (TempString.indexOf ("4.") >= 0){
// Check to see if it is IE 4
			document.writeln('<link rel="stylesheet" type="text/css" href="/iishelp/common/coua.css">');
		}
		else {
			document.writeln('<link rel="stylesheet" type="text/css" href="/iishelp/common/cocss.css">');
		}
	}
	else if (navigator.appName == "Netscape") {						
// Check to see if browser is Netscape
		document.writeln('<link rel="stylesheet" type="text/css" href="/iishelp/common/coua.css">');
	}
	else
		document.writeln('<link rel="stylesheet" type="text/css" href="/iishelp/common/cocss.css">');
//-->
</script> 

 

<SCRIPT LANGUAGE="VBScript">
<!--
Sub Window_OnLoad()
   Dim frmContents
   On Error Resume Next
   If Not Parent Is Nothing Then
      Set frmContents = Parent.Contents
      If Not frmContents Is Nothing Then
            frmContents.Window.TOCSynch_Click
      End If
   End If
End Sub
//--></SCRIPT>

<META NAME="DESCRIPTION" CONTENT="Explains how to create an instance of a COM component in an ASP server-side script and how to set component scope. Includes VBScript sample code for working with Java classes and monikers, and for creating COM component by  scripting."><META HTTP-EQUIV="Content-Type" content="text/html; charset=Windows-1252">
<META HTTP-EQUIV="PICS-Label" CONTENT='(PICS-1.1 "<http://www.rsac.org/ratingsv01.html>" l comment "RSACi North America Server" by "inet@microsoft.com <mailto:inet@microsoft.com>" r (n 0 s 0 v 0 l 0))'>
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="MS-IT-LOC" Content="Internet Information Services">

</head>

<BODY BGCOLOR="#FFFFFF" TEXT="#000000"><FONT FACE="Verdana,Arial,Helvetica">	

<H1><A NAME="H1_37767305">Using  Components and Objects</A></H1>


<P>COM components are the key to building powerful, real-world Web applications.  Components provide functionality that you use in your scripts to perform specialized tasks, such as executing financial transactions or validating data.  ASP also provides a set of base components that you can use to greatly enhance your scripts.  

<H2><A NAME="H2_37767923">About Components</A></H2>

<P>A <EM>COM component</EM> is a reusable, programmatic building block that contains code for performing a task or set of tasks.  Components can be combined with other components (even across networks) to create a Web application.  COM components execute common tasks so that you do not have to create your own code to perform these tasks.  For example, you can use a stock ticker component to display the latest stock quotes on a Web page.  However, it would be difficult to create a script that provides the same functionality.  Also, the script would not be as reusable as a component.

<P>If you are new to scripting, you can write scripts that use components without knowing anything about how the component works.  ASP comes with base components that you can use immediately.  For example, you can use the ActiveX Data Objects (ADO) components to add database connectivity to your Web pages. Additional components can also be obtained from third-party developers.</P>

<P>If you are a Web application developer, components are the best way to encapsulate your business logic into reusable, secure modules.  For example, you could use a component to verify credit card numbers by calling the component from a script that processes sales orders.  Because the verification is isolated from the order process, you can update the component when the credit card verification process changes, without changing your order process. Also, since COM components are reusable, you could reuse the component in other scripts and applications.  Once you have installed a component on your Web server, you can call it from a ASP server-side script, an ISAPI extension, another component on the server, or a program written in another COM-compatible language.</P>

<P>You can create components in any programming language that supports the Component Object Model (COM), such as C, C++, Java, Visual Basic, or numerous scripting languages.  (If you are familiar with COM programming, COM components are also known as Automation servers.)  To run on the Web server, your COM components cannot have any graphical user interface elements, such as the Visual Basic <STRONG>MsgBox</STRONG> function; graphical interface elements would only be viewable on the server, and not the browser.</P> 

<H2><A NAME="H2_37769966">Creating an Instance of a Component&#146;s Object</A></H2>

<P>A component is executable code contained in a dynamic-link library (.dll) or in an executable (.exe) file.  Components provide one or more <EM>objects</EM>, self contained units of code which perform specific functions within the component.  Each object has methods (programmed procedures) and properties (behavioral attributes).  To use an object provided by a component, you create an instance of the object and assign the new instance to a variable name.  Use the ASP <STRONG>Server.CreateObject</STRONG> method or the HTML &lt;OBJECT&gt; tag to create the object instance.  Use your scripting language&#146;s variable assignment statement to give your object instance a name.  When you create the object instance, you must provide its registered name (PROGID).  For the base components provided with ASP, you can get the PROGID for the objects from the reference pages  (see <A HREF="comp275c.htm">Installable Components for ASP</A>).</P>

<P>For example, the Ad Rotator component randomly rotates through a series of graphical advertisements.  The Ad Rotator component provides one object, called the Ad Rotator object, whose PROGID is "MSWC.AdRotator."  To create an instance  of the Ad Rotator object, use one of the following statements:</P>

<P><STRONG>VBScript:</STRONG></P>

<PRE>&lt;% Set MyAds = Server.CreateObject("MSWC.AdRotator") %&gt;</PRE>

<P><STRONG>JScript:</STRONG></P> 

<PRE>&lt;% var MyAds = Server.CreateObject("MSWC.AdRotator") %&gt;</PRE>

<P>If you are already familiar with VBScript or JScript, note that you do not use the scripting language&#146;s function for creating a new object instance (<STRONG>CreateObject</STRONG> in VBScript or <STRONG>New</STRONG> in JScript).  You must use the ASP <STRONG>Server.CreateObject</STRONG> method; otherwise, ASP cannot track your use of the object in your scripts.</P>

<P>You can also use the HTML &lt;OBJECT&gt; tag to create an object instance. You must supply the RUNAT attribute with a value of Server, and you must provide the ID attribute set to the variable name you will use in your scripts.  You can identify the object by using either its registered name (PROGID) or its registered number (CLSID).The following example uses the registered name (PROGID) to create an instance of  the Ad Rotator object:</P>

<PRE>&lt;OBJECT RUNAT=Server ID=MyAds PROGID="MSWC.AdRotator"&gt;&lt;/OBJECT&gt;</PRE>

<P>The following example uses the registered number (CLSID)  to create an instance of the Ad Rotator object:</P>

<PRE>&lt;OBJECT RUNAT=SERVER ID=MyAds 
CLASSID="Clsid:1621F7C0-60AC-11CF-9427-444553540000"&gt;&lt;/OBJECT&gt; </PRE>

<H2><A NAME="scriptlets">Use Scripting to Create COM Components</A></H2>

<P>ASP supports Windows Script Components, Microsoft's powerful scripting technology that you can use to create COM components.  Specifically, you can encapsulate common scripts, such as those used for database access or content generation, into reusable components accessible from any .asp file or program.  You can create Windows Script Components by writing scripts in a language such as VBScript or JScript without a special development tool. You can also incorporate Windows Script Components into programs written in COM compliant programming languages, such as Visual Basic, C++, or Java.</P>

<P>The following is an example of a Windows Script Components, written in VBScript, that defines methods for converting temperature measurements between Fahrenheit and Celsius:</P>

<PRE>&lt;SCRIPTLET&gt;

&lt;Registration
	Description="ConvertTemp"
	ProgID="ConvertTemp.Scriptlet"
	Version="1.00"
&gt;
&lt;/Registration&gt;

&lt;implements id=Automation type=Automation&gt;
	&lt;method name=Celsius&gt;
		&lt;PARAMETER name=F/&gt;
	&lt;/method&gt;
	&lt;method name=Fahrenheit&gt;
		&lt;PARAMETER name=C/&gt;
	&lt;/method&gt;
&lt;/implements&gt;

&lt;SCRIPT LANGUAGE=VBScript&gt;

  Function Celsius(F)
	  Celsius = 5/9 * (F - 32)
  End Function

  Function Fahrenheit(C)
	  Fahrenheit = (9/5 * C) + 32
  End Function

&lt;/SCRIPT&gt;
&lt;/SCRIPTLET&gt;</PRE>


<P>Before implementing this Windows Script Component you must save this file with an .sct extension and then in Windows Explorer, right-click this file and select <STRONG>Register</STRONG>. To use this Windows Script Component in a Web page, you would use a server-side script such as the following:</P>

<PRE>&lt;%
  Option Explicit

  Dim objConvert
  Dim sngFvalue, sngCvalue

  sngFvalue = 50
  sngCvalue = 21 

  Set objConvert = Server.CreateObject("ConvertTemp.Scriptlet")
%&gt;

&lt;%= sngFvalue %&gt; degrees Fahrenheit is equivalent to &lt;%= objConvert.Celsius(sngFvalue) %&gt; degrees Celsius&lt;BR&gt;

&lt;%= sngCvalue %&gt; degrees Celsius is equivalent to &lt;%= objConvert.Fahrenheit(sngCValue) %&gt; degrees Fahrenheit&lt;BR&gt;</PRE>

<H2><A NAME="H2_37773690">Using ASP Built-in Objects</A></H2>

<P>ASP also provides built-in objects for performing useful tasks that simplify Web development. For example, you can use the <STRONG>Request</STRONG> object to easily access information associated with an HTTP request, such as user input coming from HTML forms or cookies. Unlike using the objects provided by a COM component, you do not need to create an instance of an ASP built-in object to use it in your scripts.  These objects are automatically created for you when the ASP request starts processing. You access the methods and properties of a built-in object in the same way in which you access the methods and properties of a component&#146;s objects, as described in this topic.   For a complete description of the built-in objects, see <A HREF="iiwaref.htm">Active Server Pages Objects Quick Reference Card</A>.</P>

<H2><A NAME="H2_37774333">Calling an Object Method</A></H2>

<P>A <EM>method</EM> is an action you can perform on an object or with an object.  The syntax for calling a method is:</P>

<P><STRONG>Object.Method</STRONG>&nbsp;<EM>parameters</EM></P>

<P>The <EM>parameters</EM> vary depending on the method.</P>


<P>For example, you can use the <STRONG>Write</STRONG> method of the <STRONG>Response</STRONG> built-in object to send information to the browser as shown in the following statement:</P>

<PRE>&lt;% Response.Write "Hello World" %&gt;</PRE>

<P><STRONG>Note</STRONG>&nbsp;&nbsp;&nbsp;Some scripting languages do not support the <STRONG>Object.Method</STRONG> syntax.  If your language does not, you must add an entry to the registry in order to use that language as your primary scripting language.  See  <A HREF="iiwascln.htm">Working with Scripting Languages</A> for more information.</P>

<H2><A NAME="H2_37775276">Setting an Object Property</A></H2>

<P>A <EM>property</EM> is an attribute that describes the object.  Properties define object characteristics, such as the type of the object, or describe the state of an object, such as enabled or disabled. The syntax is:</P>

<P><STRONG>Object.Property</STRONG></P>

<P>You can sometimes read and set the value of a property.  In addition, for some objects, you can also add new properties.</P>

<P>For example, the Ad Rotator component has a property, <STRONG>Border</STRONG>, which specifies whether the ad has a border around it and determines the border thickness.  The following expression specifies no border:</P>

<PRE>&lt;% MyAds.Border = 0 %&gt;</PRE>

<P>For some properties, you can display the current value by using the ASP output directive.  For example, the following statement returns TRUE if the browser is still connected to the server:</P>

<PRE>&lt;%= Response.IsClientConnected %&gt;</PRE>

<H2><A NAME="H2_37772661">Creating an Object from a Java Class</A></H2>

<P>To use <STRONG>Server.CreateObject</STRONG> to create an instance of a Java class, you must use the JavaReg program to register the class as a COM component.  You can then use <STRONG>Server.CreateObject</STRONG> method or an HTML &lt;OBJECT&gt; tag with the PROGID or CLSID.</P>

<P>Alternatively, you can use the mechanism provided by Java monikers to instantiate the Java class directly without using the JavaReg program.  To instantiate a class with monikers, use the VBScript or JScript <STRONG>GetObject</STRONG> statement and provide the full name of the Java class in the form <CODE>java:<EM>classname</EM></CODE>.  The following VBScript example creates an instance of the Java <STRONG>Date</STRONG> class.</P>

<PRE>&lt;% 
  Dim dtmDate
  Set dtmDate = GetObject("java:java.util.Date")
%&gt;

The date is &lt;%= dtmDate.toString() %&gt;</PRE>

<P>Objects created by calling <STRONG>GetObject</STRONG> instead of <STRONG>Server.CreateObject</STRONG> can also access the ASP built-in objects and participate in a transaction. To use Java monikers, however, you must be using version&nbsp;2.0, or later, of the Microsoft virtual machine.</P>

<hr class="iis" size="1">
<p align="center"><em><a href="/iishelp/common/colegal.htm">&copy; 1997-2001 Microsoft Corporation. All rights reserved.</a></em></p>

</FONT>
</BODY>
</HTML>
