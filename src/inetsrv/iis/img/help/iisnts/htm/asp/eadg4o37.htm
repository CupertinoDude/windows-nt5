<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Accommodating International Clients</TITLE>
<SCRIPT LANGUAGE="JavaScript">
<!--
	TempString = navigator.appVersion
	if (navigator.appName == "Microsoft Internet Explorer"){	
// Check to see if browser is Microsoft
		if (TempString.indexOf ("4.") >= 0){
// Check to see if it is IE 4
			document.writeln('<link rel="stylesheet" type="text/css" href="/iishelp/common/coua.css">');
		}
		else {
			document.writeln('<link rel="stylesheet" type="text/css" href="/iishelp/common/cocss.css">');
		}
	}
	else if (navigator.appName == "Netscape") {						
// Check to see if browser is Netscape
		document.writeln('<link rel="stylesheet" type="text/css" href="/iishelp/common/coua.css">');
	}
	else
		document.writeln('<link rel="stylesheet" type="text/css" href="/iishelp/common/cocss.css">');
//-->
</script>
<SCRIPT LANGUAGE="VBScript">
<!--
Sub Window_OnLoad()
   Dim frmContents
   On Error Resume Next
   If Not Parent Is Nothing Then
      Set frmContents = Parent.Contents
      If Not frmContents Is Nothing Then
            frmContents.Window.TOCSynch_Click
      End If
   End If
End Sub
//--></SCRIPT><META NAME="DESCRIPTION" CONTENT="Internet Information Services reference information">
<META HTTP-EQUIV="PICS-Label" CONTENT='(PICS-1.1 "<http://www.rsac.org/ratingsv01.html>" l comment "RSACi North America Server" by "inet@microsoft.com <mailto:inet@microsoft.com>" r (n 0 s 0 v 0 l 0))'>
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="MS-IT-LOC" Content="Internet Information Services"> 
</HEAD>

<BODY BGCOLOR="#FFFFFF" TEXT="#000000">

<H1><A NAME="_k2_accommodating_international_clients"></A><SUP></SUP>Accommodating International Clients</H1>

<P>One of the advantages of distributing information over the Internet or an intranet is that you can create international Web sites that users can access from different countries/regions. Users can request pages that have been localized into their own language, which they read in localized browser versions.</P>

<P>When you create a Web site that contains pages in different languages, you may need to convert strings that are passed between the browser and the Web server, or between an ASP script and a COM component. If all pages on the Web site are written in the default character set used by the Web server, ASP does the conversion automatically. If you author pages in different character sets for browsers of different languages, however, you need to use ASP commands that specify how the strings should be converted. For example, if your site contains some pages in one of the Japanese character sets and others in one of the Chinese character sets, you need to specify which character set ASP should use while processing strings for a particular page.</P>

<P>ASP also provides commands that support the cultural conventions for different locales, such as the format used for currency, time, date, and numbers. As with the string conversion commands, you need to use the locale commands only if your scripts do not use the default locale for the Web server and the browser.</P>

<P>There are many design scenarios for the structure of an international Web site. After finances and time are taken into consideration, the best structure might be a mix of scenarios. Three possible scenarios follow:</P>

<P><B>Scenario One - Translate each Web page</B></P>

<P>If you pay localizers to translate your pages, translating each Web page may not be the most economical solution. However, your server processes requests faster than in the other scenarios, especially if you maximize static content.

<OL>
	<LI>For each language you support, create a sub folder to store translated Web pages.</li>

	<LI>Use an ASP file in your root folder to determine the accepted languages of the browser, and redirect the translated Web pages to the corresponding sub folder. If you do not support the languages of the browser, provide links to the start pages of each sub folder to let the viewer choose a language. Use Request.ServerVariables("HTTP_ACCEPT_LANGUAGE") to determine what languages the browser accepts.</li>

	<LI>Set the locale dynamically because some languages contain multiple locales. For example, the codepage for English is 1252, but the locale can be 2057 for Britain, 1033 for the United States, or 4105 for Canada.</li>
</OL>

<P><B>Scenario Two - Translate text segments stored in a database</B></P>

<P>If you have a small Web site, or one with content that changes frequently, you can store all of your text segments in a database that is indexed by the codepage of the segment. SQL handles strings in different codepages. Access handles Unicode strings that you can write out with Response.BinaryWrite. When you translate text segments that are stored in a database, a localizer is given one file to work with. Because the database calls are simple queries, the speed of serving pages suffers only slightly.

<OL>
	<LI>In each ASP file, determine the accepted languages of the browser, and insert a text segment from the database that is translated in the right language. Use Request.ServerVariables("HTTP_ACCEPT_LANGUAGE") to determine what languages the browser accepts.</li>

	<LI>Set the locale dynamically because some languages contain multiple locales. For an example, see Step 3 in Scenario One.</li>
</OL>

<P><B>Scenario Three - Rely on a translation tool</B></P>

<P>Because individual locales may not be handled by the translation tool and there may be subtle errors in the translation, have someone proof read all your translated pages.

<UL type=disc>
	<LI>Subscribe to a Web service that provides instant translation of each of your Web pages, while maintaining the graphics and formatting of your page. <a href="http://www.microsoft.com/isapi/redir.dll?prd=external&sbp=translation&pver=1.0&ar=altavista" target=_blank><b>Alta Vista</b></a> has a downloadable document translation tool, as well as an online tool to translate posted Web pages.</li>
</UL>

<P>There have been some changes since IIS 5.0 was released on Windows 2000. UTF-8 support is extended to all multi-byte characters including surrogate characters like those for Japanese. The IIS intrinsic objects are able to store and retrieve strings using different codepages. For example, form data and server variables can contain strings that are encoded using a different codepage than the default of the Web server. The IIS installable components like Ad Rotator and Content Rotator also support localized characters. Lastly, there are two new Response properties called CodePage and LCID, and a new metabase property called AspLCID, which change the hierarchy of how codepages and locales are set on a page. For more information, see the following topics.

<UL type=disc>
	<LI><A HREF="/iishelp/iis/htm/asp/eadg6e7n.htm">Setting the Code Page for String Conversions</A>: Includes sample code for converting strings used by ASP.</li>

	<LI><A HREF="/iishelp/iis/htm/asp/eadg9s8i.htm">Setting the Locale Identifier</A>: Describes how to change the format used for currency, time, and date.</li>

	<LI>For articles and case studies on globalization and localization, go to <a href="http://www.microsoft.com/isapi/redir.dll?prd=technet&ar=iis" target=_blank><b>TechNet</b></a>.</li>
</UL>
<hr class="iis" size="1">
<p align="center"><em><a href="../../../common/colegal.htm">&copy; 1997-2001 Microsoft Corporation. All rights reserved.</a></em></p>
</BODY>
</HTML>
