<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML DIR=LTR><HEAD><TITLE>Using Variables and Constants</TITLE>

<SCRIPT LANGUAGE="JavaScript">
<!--
	TempString = navigator.appVersion
	if (navigator.appName == "Microsoft Internet Explorer"){	
// Check to see if browser is Microsoft
		if (TempString.indexOf ("4.") >= 0){
// Check to see if it is IE 4
			document.writeln('<link rel="stylesheet" type="text/css" href="/iishelp/common/coua.css">');
		}
		else {
			document.writeln('<link rel="stylesheet" type="text/css" href="/iishelp/common/cocss.css">');
		}
	}
	else if (navigator.appName == "Netscape") {						
// Check to see if browser is Netscape
		document.writeln('<link rel="stylesheet" type="text/css" href="/iishelp/common/coua.css">');
	}
	else
		document.writeln('<link rel="stylesheet" type="text/css" href="/iishelp/common/cocss.css">');
//-->
</SCRIPT> 



<META NAME="DESCRIPTION" CONTENT="Explains how to use variables and constants in the ASP scripting environment. Includes VBScript and JScript samples."><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<META HTTP-EQUIV="PICS-Label" CONTENT='(PICS-1.1 "<http://www.rsac.org/ratingsv01.html>" l comment "RSACi North America Server" by "inet@microsoft.com <mailto:inet@microsoft.com>" r (n 0 s 0 v 0 l 0))'>
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="MS-IT-LOC" Content="Internet Information Services">

</head>

<BODY BGCOLOR="#FFFFFF" TEXT="#000000">

<FONT FACE="Verdana,Arial,Helvetica">	


<H1><A NAME="H1_37780314">Using Variables and Constants</A></H1>


<P>A <EM>variable</EM> is a named storage location in the computer's memory that contains data, such as a number or a text string.  The data contained in a variable is called the variable's <EM>value</EM>.  Variables give you a way to store, retrieve, and manipulate values using names that help you understand what the script does.</P>

<H2><A NAME="H2_37780793">Declaring and Naming Variables</A></H2>

<P>Follow the rules and guidelines of your scripting language for naming and declaring variables.  Even if you are not required to declare a variable before using it, it is a good habit to develop because it helps prevent errors.  <EM>Declaring</EM> a variable means telling the script engine that a variable with a particular name exists so that you can use references to the variable throughout a script.</P>


<H3><A NAME="H3_37781338">VBScript</A></H3>

<P>VBScript does not require variable declarations, but it is good scripting practice to declare all variables before using them.  To declare a variable in VBScript, use the <STRONG>Dim</STRONG>, <STRONG>Public</STRONG>, or <STRONG>Private</STRONG> statement. For example:</P>

<PRE>&lt;% Dim UserName %&gt;</PRE>

<P>You can use the VBScript <STRONG>Option Explicit</STRONG> statement in an .asp file to require variables to be explicitly declared with the <STRONG>Dim</STRONG>, <STRONG>Private</STRONG>, <STRONG>Public</STRONG>, and <STRONG>ReDim</STRONG> statements.  The <STRONG>Option Explicit</STRONG> statement must appear after any ASP directives and before any HTML text or script commands.  This statement only affects ASP commands that are written in VBScript; it has no effect on JScript commands.</P>

<PRE>&lt;% Option Explicit %&gt;
&lt;HTML&gt;
&lt;%
  Dim strUserName
  Public lngAccountNumber
%&gt;
.
.
.
</PRE>


<P>For more information on these commands, see the VBScript Language Reference, which can be found at the <a href="http://www.microsoft.com/isapi/redir.dll?prd=msdn&pver=6.0&ar=scripting" target=_blank><b>Windows Script Technologies</b></a> Web site.</P>


<H3><A NAME="H3_37782240">JScript</A></H3>

<P>Although JScript does not usually require variable declarations, it is good scripting practice to declare all variables before using them.  To declare a variable, use the <STRONG>var</STRONG> statement.  For example:</P>

<PRE>&lt;% var UserName %&gt;</PRE>

<P>Typically, you will only need to declare a variable in JScript when you need to distinguish a variable inside a function from a <EM>global</EM> variable  used outside the function.  In this case, if you do not distinguish between the two variables, JScript will assume that that you referring exclusively to the global variable. For more information on the <STRONG>var</STRONG> statement, see the JScript Language Reference.  You can find this reference at the <a href="http://www.microsoft.com/isapi/redir.dll?prd=msdn&pver=6.0&ar=scripting" target=_blank><b>Windows Script Technologies</b></a> Web site.</P>

<H2><A NAME="H2_37782652">Variable Scope</A></H2>

<P>The <EM>scope</EM>, or lifetime, of a variable determines which script commands can access a variable.  A variable declared inside a procedure has <EM>local scope</EM>; the variable is created and destroyed every time the procedure is executed.  It cannot be accessed by anything outside the procedure.  A variable declared outside a procedure has <EM>global scope</EM>; its value is accessible and modifiable by any script command on an ASP page.</P>

<P><STRONG>Note</STRONG>&nbsp;&nbsp;&nbsp;Limiting variable scope to a procedure will enhance performance.</P>


<P>If you declare variables, a local variable and a global variable can have the same name.  Modifying the value of one will not modify the value of the other.  If you do not declare variables, however, you might inadvertently modify the value of a global variable.  For example, the following script commands return the value 1 even though there are two variables named Y:</P>

<PRE>&lt;%
  Option Explicit 
  Dim Y

  Y = 1

  SetLocalVariable

  Response.Write Y

Sub SetLocalVariable
    Dim Y
    Y = 2
End Sub
%&gt;</PRE>

<P>The following script commands, on the other hand, return the value 2 because the variables are not explicitly declared.  When the procedure call sets Y to 2,  the scripting engine assumes the procedure intended to modify the global variable:</P>

<PRE>&lt;% 
  Option Explicit
  Dim Y = 1

  SetLocalVariable

  Response.Write Y

Sub SetLocalVariable
    Y = 2
End Sub
%&gt;</PRE>

<P>To avoid problems, develop the habit of explicitly declaring all variables. This is particularly important if you use the <STRONG>#include</STRONG> statement to include files into your .asp file.  The included script is contained in a separate file but is treated as though it were part of the including file.   It is easy to forget that you must use different names for variables used in the main script and in the included script unless you declare the variables.</P> 

<H2><A NAME="H2_37784611">Giving Variables Session or Application Scope </A></H2>

<P>Global variables are accessible only in a single .asp file.  To make a variable accessible beyond a single page, give the variable either session or application scope.  Session-scoped variables are available to all pages in one ASP application that are requested by one user.  Application-scoped variables are available to all pages in one ASP application that are requested by any user.  Session variables are a good way to store information for a single user, such as preferences or the user's name or identification.  Application variables are a good way to store information for all users of a particular application, such as an application-specific greeting or general values needed by the application.</P>

<P>ASP provides two built-in objects into which you can store variables: the <STRONG>Session</STRONG> object and the <STRONG>Application</STRONG> object.</P>

<P>You can also create object instances with session or application scope.  For more information, see <A HREF="iiwaobu.htm">Setting Object Scope</A>.</P>

<H3><A NAME="H3_37785903">Session Scope</A></H3>

<P>To give a variable session scope, store it in the <STRONG>Session</STRONG> object by assigning a value to a named entry in the object.  For example, the following commands store two new variables in the <STRONG>Session</STRONG> object:</P>

<PRE>&lt;% 
  Session(&quot;FirstName&quot;) = &quot;Jeff&quot;
  Session(&quot;LastName&quot;) = &quot;Smith&quot; 
%&gt;</PRE>

<P>To retrieve information from the <STRONG>Session</STRONG> object, access the named entry by using the output directive (<CODE>&lt;%=</CODE>) or <STRONG>Response.Write</STRONG>.  The following example uses the output directive to display the current value of Session("FirstName"):</P>

<PRE>Welcome &lt;%= Session(&quot;FirstName&quot;) %&gt;</PRE>

<P>You can store user preferences in the <STRONG>Session</STRONG> object, and then access those preferences to determine what page to return to the user.  For example, you can allow a user to specify a text-only version of your content in the first page of the application and apply this choice on all subsequent pages that the user visits in this application.</P>

<PRE>&lt;%
  strScreenResolution = Session(&quot;ScreenResolution&quot;)
  If strScreenResolution = &quot;Low&quot; Then
%&gt; 
  This is the text version of the page.
&lt;% Else %&gt; 
  This is the multimedia version of the page.
&lt;% End If %&gt;</PRE>

<P><STRONG>Note</STRONG>&nbsp;&nbsp;&nbsp;If you refer to a session-scoped variable more than once in a script, consider assigning it to a local variable, as in the previous example, to improve performance.</P>


<H3><A NAME="H3_37787278">Application Scope</A></H3>

<P>To give a variable application scope, store it in the <STRONG>Application</STRONG> object by assigning a value to a named entry in the object.  For example, the following command stores an application-specific greeting in the <STRONG>Application</STRONG> object:</P>

<PRE>&lt;% Application(&quot;Greeting&quot;) = &quot;Welcome to the Sales Department!&quot; %&gt;</PRE>

<P>To retrieve information from the <STRONG>Application</STRONG> object, use the ASP output directive (<CODE>&lt;%=</CODE>) or <STRONG>Response.Write</STRONG> to access the named entry from any subsequent page in the application.  The following example uses the output directive to display the value of Application("Greeting"):</P>

<PRE>&lt;%= Application(&quot;Greeting&quot;) %&gt;</PRE>

<P>Again, if your script repeatedly refers to an application-scoped variable, you should assign it to a local variable to improve performance.</P>

<H2><A NAME="usingconstants">Using Constants</A></H2>

<P>A <EM>constant</EM> is a name that takes the place of a number or string.  Some of the base components provided with ASP, such as ActiveX Data Objects (ADO), define constants that you can use in your scripts.  A component can declare constants in a <EM>component type library</EM>, a file that contains information about objects and types supported by an COM component.  Once you have declared a type library in your  .asp file you can use the defined constants in any scripts in the same .asp file.  Likewise, you can declare a type library in your Global.asa file to use the defined constants in any .asp file in an application.</P>

<P>To declare a type library, use the &lt;METADATA&gt; tag in your .asp file or Global.asa file.  For example, to declare the ADO type library, use the following statements:</P>  

<PRE>&lt;!--METADATA NAME=&quot;Microsoft ActiveX Data Objects 2.5 Library&quot; TYPE=&quot;TypeLib&quot; UUID=&quot;{00000205-0000-0010-8000-00AA006D2EA4}&quot;--&gt;</PRE>

<P>Or, rather than referring to the type library's universal unique indentifier (UUID), you can also refer to the type library by file path:</P>

<PRE>&lt;!-- METADATA TYPE=&quot;typelib&quot; FILE=&quot;c:\program files\common files\system\ado\msado15.dll&quot;--&gt;</PRE> 
	

<P>You can then use ADO constants in the .asp file where you declared the type library, or in an .asp file residing to an application containing a Global.asa file with the ADO type library declaration.  In the following example, <CODE>adOpenKeyset</CODE> and <CODE>adLockOptimistic</CODE> are ADO constants:</P>

<PRE>&lt;%
  'Create and Open Recordset Object.
  Set rstCustomerList = Server.CreateObject(&quot;ADODB.Recordset&quot;)

  rstCustomerList.ActiveConnection = cnnPubs
  rstCustomerList.CursorType = adOpenKeyset
  rstCustomerList.LockType = adLockOptimistic
%&gt;</PRE>

<P>The following table lists commonly used type libraries and UUIDs:</P>

<TABLE BORDER="1" CELLPADDING="5" CELLSPACING="1" WIDTH="80%">
	<TR>
	  <TH WIDTH=20% BGCOLOR="#c0c0c0">Type Library</TH>
	  <TH WIDTH=80% BGCOLOR="#c0c0c0">UUID</TH>
	</TR>
	<TR><TD>Microsoft ActiveX Data Objects 2.5 Library</TD><TD>{00000205-0000-0010-8000-00AA006D2EA4}</TD></TR>
	<TR><TD>Microsoft CDO 1.2 Library for Windows 2000 Server</TD><TD>{0E064ADD-9D99-11D0-ABE5-00AA0064D470}</TD></TR>
	<TR><TD>MSWC Advertisement Rotator Object Library</TD><TD>{090ACFA1-1580-11D1-8AC0-00C0F00910F9}</TD></TR>
	<TR><TD>MSWC IIS Log Object Library</TD><TD>{B758F2F9-A3D6-11D1-8B9C-080009DCC2FA}</TD></TR>
</TABLE>

<P>For reference information about the &lt;METADATA&gt; tag, see <A HREF="glob4b5f.htm">TypeLibrary Declarations</A>.</P>

<P>In previous versions of ASP,  some components provided constant definitions in files that had to be included in each ASP file that used those constants.  The use of the <STRONG><A HREF="../core/iisiinc.htm">#include</A></STRONG> directive to include constant definitions is still supported, but type libraries are generally easier to use and make your scripts more easily upgraded.  Components might not provide constant definition files in future releases of ASP.</P>

<P><STRONG>Note</STRONG>&nbsp;&nbsp;&nbsp;Using the &lt;METADATA&gt; tag rather than the <STRONG>#include</STRONG> directive may improve the performance of your Web application.</P>

<P>You can define your own constants.  In VBScript, use the <STRONG>Const</STRONG> statement.  In  JScript, you can the <STRONG>var</STRONG> statement to assign a constant value to variable.  If you want to use your constants on more than one .asp file, put the definitions in a separate file and include them in each .asp file that uses the constants.</P>


<HR CLASS="iis" SIZE="1">
<P ALIGN="center"><EM><A HREF="/iishelp/common/colegal.htm">&copy; 1997-2001 Microsoft Corporation. All rights reserved.</A></EM></P>

</font>

</font>
</BODY>

</HTML>
