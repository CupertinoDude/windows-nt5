<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Designing Transactional Web Applications</TITLE>
<SCRIPT LANGUAGE="JavaScript">
<!--
	TempString = navigator.appVersion
	if (navigator.appName == "Microsoft Internet Explorer"){	
// Check to see if browser is Microsoft
		if (TempString.indexOf ("4.") >= 0){
// Check to see if it is IE 4
			document.writeln('<link rel="stylesheet" type="text/css" href="/iishelp/common/coua.css">');
		}
		else {
			document.writeln('<link rel="stylesheet" type="text/css" href="/iishelp/common/cocss.css">');
		}
	}
	else if (navigator.appName == "Netscape") {						
// Check to see if browser is Netscape
		document.writeln('<link rel="stylesheet" type="text/css" href="/iishelp/common/coua.css">');
	}
	else
		document.writeln('<link rel="stylesheet" type="text/css" href="/iishelp/common/cocss.css">');
//-->
</script>
<SCRIPT LANGUAGE="VBScript">
<!--
Sub Window_OnLoad()
   Dim frmContents
   On Error Resume Next
   If Not Parent Is Nothing Then
      Set frmContents = Parent.Contents
      If Not frmContents Is Nothing Then
            frmContents.Window.TOCSynch_Click
      End If
   End If
End Sub
//--></SCRIPT><META NAME="DESCRIPTION" CONTENT="Internet Information Services reference information">
<META HTTP-EQUIV="PICS-Label" CONTENT='(PICS-1.1 "<http://www.rsac.org/ratingsv01.html>" l comment "RSACi North America Server" by "inet@microsoft.com <mailto:inet@microsoft.com>" r (n 0 s 0 v 0 l 0))'>
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="MS-IT-LOC" Content="Internet Information Services"> 
</HEAD>

<BODY BGCOLOR="#FFFFFF" TEXT="#000000">

<H1><A NAME="_k2_designing_transacted_web_applications"></A><SUP></SUP>Designing Transactional Web Applications</H1>

<P>One of the most important design concepts for transactional Web applications is the distinction between business processes and physical transactions. Business processes are the day-to-day processes of most organizations; an example is processing a sales order. A physical transaction corresponds to the actual updating of the data resources that are used to record the business process. A business process will usually be made up of more than one physical transaction.</P>

<P>For example, when a sales order is processed, there are at least three distinct steps that need to be accomplished:

<UL type=disc>
	<LI>Verify product availability.</li>

	<LI>Obtain payment.</li>

	<LI>Commit the order.</li>
</UL>

<P>Each of these steps could represent one or more physical transactions, depending on the system design.</P>

<P>The connectionless nature of the Internet mandates that steps be broken into distinct physical transactions. When a physical transaction is begun, all other users will be prevented from updating the resources that participate in the transaction until the transaction completes. Imagine what would happen if the entire sales order process described above was grouped into a single physical transaction. A user could begin a transaction by indicating his or her interest in a product, which would lock the customer's account and mark the product as no longer available in the inventory database. The customer could then leave his or her browser running while attending to other business, but before committing to the sale. Because the entire order has been treated as one physical transaction, all of the resources are locked either until the customer commits, or until your system throws out the order due to a business rule. Such a design is not feasible for a transaction-processing system that is exposed on the Web.</P>

<P>The design requirements for transactional Web applications will probably always be presented in terms of business processes. It is important, therefore, to establish some design techniques for breaking business processes into physical transactions. One important technique is to always limit physical transactions to a single .asp file.</P>

<P><span class=le><B>Note&nbsp;&nbsp;&nbsp;</B></span>Business processes can span multiple .asp files, but physical transactions should not.</P>

<P>Another design technique is the use of status codes within transactional resources to indicate if a transaction is pending or committed. By including status codes you can reserve a resource without actually committing it. When the business process is complete, you can initiate another physical transaction that commits all pending resources by changing their status code. The Crawford &amp; Sons Custom Bicycle Company case study illustrates how these two principles affect the implementation of transactional Web applications.</P>
<span style="display:none"><LAYER VISIBILITY=HIDE> (The following words are used by Search; they are not intended to be displayed on the page.) MSMQ </layer></span>
<H4>The Crawford &amp; Sons Web Application</H4>

<P>The Crawford &amp; Sons Custom Bicycle Company is a manufacturer of hand-made bicycles distributed throughout North America. Employees have decided to begin taking orders for their bicycles through a Web application. They use Microsoft<sup>&reg;</sup> SQL Server to maintain customer and inventory records and have already developed data and business-logic components that are registered with Component Services. Now they need to develop the .asp files that will allow their customers to access these components within the scope of a single business process. The following diagram illustrates the distinct physical transactions and the .asp files that make up their Web application design.</P>

<P><IMG SRC="/iishelp/iis/htm/asp/art/transcook.gif" ALT="Transaction Example" BORDER=0></P>

<P>The sales order application is made up of four .asp files: Login.asp, Credit.asp, Inventory.asp, and Commit.asp. Notice that each of the physical transactions is represented by a separate .asp file. (Each .asp file contains the @Transaction = Required directive.) Login, Credit, and Inventory each interact with a COM component called Sales Order, which exposes methods for accomplishing the three steps of taking an order.</P>

<P>When the customer is ready to commit to the sale (that is, when the business process is completed), Commit.asp groups the entire logical transaction into a single physical transaction that changes all of the status codes in the data resources from "pending" to "complete." This design accommodates both the connectionless nature of the Web and the need to provide the user with a unified business process.</P>

<P>For more information on Component Services transactions, see <A HREF="iiaptran.htm">Understanding Transactions</A>and the "Component Services" and "Message Queuing" documentation in the Platform SDK. To view samples of transactional scripting, see <b>ASP Samples</b> in the IIS section of the Platform SDK or at 
<a href="http://go.microsoft.com/fwlink/?LinkId=1753" target="_blank">MSDN Online - Internet Information Services</a>.</P>
<hr class="iis" size="1">
<p align="center"><em><a href="../../../common/colegal.htm">&copy; 1997-2001 Microsoft Corporation. All rights reserved.</a></em></p>
</BODY>
</HTML>
