<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Data Access Performance</TITLE>
<SCRIPT LANGUAGE="JavaScript">
<!--
	TempString = navigator.appVersion
	if (navigator.appName == "Microsoft Internet Explorer"){	
// Check to see if browser is Microsoft
		if (TempString.indexOf ("4.") >= 0){
// Check to see if it is IE 4
			document.writeln('<link rel="stylesheet" type="text/css" href="/iishelp/common/coua.css">');
		}
		else {
			document.writeln('<link rel="stylesheet" type="text/css" href="/iishelp/common/cocss.css">');
		}
	}
	else if (navigator.appName == "Netscape") {						
// Check to see if browser is Netscape
		document.writeln('<link rel="stylesheet" type="text/css" href="/iishelp/common/coua.css">');
	}
	else
		document.writeln('<link rel="stylesheet" type="text/css" href="/iishelp/common/cocss.css">');
//-->
</script>
<SCRIPT LANGUAGE="VBScript">
<!--
Sub Window_OnLoad()
   Dim frmContents
   On Error Resume Next
   If Not Parent Is Nothing Then
      Set frmContents = Parent.Contents
      If Not frmContents Is Nothing Then
            frmContents.Window.TOCSynch_Click
      End If
   End If
End Sub
//--></SCRIPT><META NAME="DESCRIPTION" CONTENT="Internet Information Services reference information">
<META HTTP-EQUIV="PICS-Label" CONTENT='(PICS-1.1 "<http://www.rsac.org/ratingsv01.html>" l comment "RSACi North America Server" by "inet@microsoft.com <mailto:inet@microsoft.com>" r (n 0 s 0 v 0 l 0))'>
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="MS-IT-LOC" Content="Internet Information Services"> 
</HEAD>

<BODY BGCOLOR="#FFFFFF" TEXT="#000000">

<H1><A NAME="_k2_data_access_performance"></A><SUP></SUP>Data Access Performance</H1>

<P>Data access and retrieval is often the most challenging performance area for the Web application developer.</P>

<P>Many of the scalability and performance concerns that arise around data access are not in your control, as a Web application developer. However, there are some techniques that you can use to maximize your performance:

<UL type=disc>
	<LI><B>Cache results</B> <B>from data sources that are stable, or that vary predictably.</B> You can cache either the recordset returned by a query to the data source, or cache the pure HTML output that was created using the results of the query. 
<P class=tl>For instance, if you are using ADO to populate a listbox that will contain the cities in which you have offices, the first caller to ADO can insert the ADO query results into Application scope. Subsequent requests for that listbox information could be fulfilled from the <B>Application</B> object, instead of an expensive call, through ADO, to a data source.

<P class=tl>If you wish to cache the resultant recordset directly, you should use a client-side cursor, and disassociate the recordset from the <B>Command</B> object by setting the ADO <B>ActiveConnection</B> property to <B>Nothing</B>. 

<P class=tl>For more information on data caching, see <A HREF="/iishelp/iis/htm/asp/eadg6cbl.htm">Caching Data</A>.
</li>

	<LI><B>In general, avoid putting ADO connections in session state,</B> because ODBC (version 3.0 and later) automatically does connection pooling for you, and OLE DB provides session pooling.</li>

	<LI><B>Use the native OLE DB connection strings as much as possible.</B> Native OLE DB connection strings are generally faster than most ODBC DNSs. In addition, OLE DB connection strings are more flexible because your application will be able to make use of any OLE DB provider.</li>

	<LI><B>If using a data source that supports them, such as Microsoft SQL Server, use stored procedures whenever possible.</B> A query executed from a stored procedure is faster than a query passed through a SQL query string.</li>

	<LI><B>To optimize performance, avoid using the ADO record addition and deletion methods, such as AddNew and Delete.</B> If your application adds and deletes records intensively, your application will perform better if it uses direct SQL statements, such as INSERT.</li>

	<LI><B>Set the ADO CacheSize property to a larger number than the default (1).</B> By forcing ADO to retrieve multiple records in one transaction with the data source, you will eliminate a portion of the overhead involved in that transaction, and your application may become more scalable. Generally, you are most likely to see benefits if you set <B>CacheSize </B>to equal to either the number of records expected, or 100, whichever is less.</li>

	<LI><B>Use the ADO 2.0 AdExecuteNoRecords flag when executing commands that don't return data rows, or that return rows that you don't need to access or save.</B> This new feature, introduced in ADO 2.0, was created to reduce the amount of overhead incurred by ADO, and thus increase performance and scalability.</li>

	<LI><B>Disable temporary stored procedures, if your data source supports them.</B></li>
</UL>

<P>For more information on data access, see <A HREF="iiwadata.htm">Accessing a Data Source</A> and <A HREF="/iishelp/iis/htm/asp/eadg3l80.htm">Accessing Data with ASP</A>.</P>
<hr class="iis" size="1">
<p align="center"><em><a href="../../../common/colegal.htm">&copy; 1997-2001 Microsoft Corporation. All rights reserved.</a></em></p>
</BODY>
</HTML>
