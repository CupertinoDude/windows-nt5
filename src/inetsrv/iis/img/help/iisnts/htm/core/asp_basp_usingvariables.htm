<html xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:myScript="http://iisue">
<head>
<META http-equiv="Content-Type" content="text/html; charset=UTF-16">
<meta http-equiv="Content-Type" content="text/html; charset=Windows-1252">
<meta http-equiv="PICS-Label" content="(PICS-1.1 &quot;<http://www.rsac.org/ratingsv01.html>&quot; l comment &quot;RSACi North America Server&quot; by &quot;inet@microsoft.com <mailto:inet@microsoft.com>&quot; r (n 0 s 0 v 0 l 0))">
<meta name="MS.LOCALE" content="EN-US">
<meta name="MS-IT-LOC" content="Internet Information Services">
<meta name="MS-HAID" content="Using_Variables_and_Constants">
<meta name="description" content="Explains how to use variables and constants in the ASP scripting environment. Includes VBScript and JScript samples.">
<title>Using Variables and Constants</title><SCRIPT LANGUAGE="JScript" SRC="iishelp.js"></SCRIPT></head>
<body>
<p style="color:red">[This is preliminary documentation and subject to change]</p>
<h1>Using Variables and Constants</h1><p>A <i>variable</i> is a named storage location in the computer's
memory that contains data, such as a number or a text string. The
data contained in a variable is called the variable's <i>value</i>.
Variables give you a way to store, retrieve, and manipulate values
using names that help you understand what the script does.</p><h2><a name="H2_37780793">Declaring and Naming
Variables</a></h2><p>Follow the rules and guidelines of your scripting language for
naming and declaring variables. Even if you are not required to
declare a variable before using it, it is a good habit to develop
because it helps prevent errors. <i>Declaring</i> a variable means
telling the script engine that a variable with a particular name
exists so that you can use references to the variable throughout a
script.</p><h3><a name="H3_37781338">VBScript</a></h3><p>VBScript does not require variable declarations, but it is good
scripting practice to declare all variables before using them. To
declare a variable in VBScript, use the <b>Dim</b>, <b>Public</b>,
or <b>Private</b> statement. For example:</p><pre>
&lt;% Dim UserName %&gt;
</pre><p>You can use the VBScript <b>Option Explicit</b> statement in an
.asp file to require variables to be explicitly declared with the
<b>Dim</b>, <b>Private</b>, <b>Public</b>, and <b>ReDim</b>
statements. The <b>Option Explicit</b> statement must appear after
any ASP directives and before any HTML text or script commands.
This statement only affects ASP commands that are written in
VBScript; it has no effect on JScript commands.</p><pre>
&lt;% Option Explicit %&gt;
&lt;HTML&gt;
&lt;%
  Dim strUserName
  Public lngAccountNumber
%&gt;
.
.
.

</pre><p>For more information on these commands, see the VBScript
Language Reference, which can be found at the <a href="http://www.microsoft.com/isapi/redir.dll?prd=msdn&amp;pver=6.0&amp;ar=scripting" target="_New"><b>Microsoft Script Technologies</b></a> Web site.</p><h3><a name="H3_37782240">JScript</a></h3><p>Although JScript does not usually require variable declarations,
it is good scripting practice to declare all variables before using
them. To declare a variable, use the <b>var</b> statement. For
example:</p><pre>
&lt;% var UserName %&gt;
</pre><p>Typically, you will only need to declare a variable in JScript
when you need to distinguish a variable inside a function from a
<i>global</i> variable used outside the function. In this case, if
you do not distinguish between the two variables, JScript will
assume that that you referring exclusively to the global variable.
For more information on the <b>var</b> statement, see the JScript
Language Reference. You can find this reference at the <a href="http://www.microsoft.com/isapi/redir.dll?prd=msdn&amp;pver=6.0&amp;ar=scripting" target="_New"><b>Microsoft Script Technologies</b></a> Web site.</p><h2><a name="H2_37782652">Variable Scope</a></h2><p>The <i>scope</i>, or lifetime, of a variable determines which
script commands can access a variable. A variable declared inside a
procedure has <i>local scope</i>; the variable is created and
destroyed every time the procedure is executed. It cannot be
accessed by anything outside the procedure. A variable declared
outside a procedure has <i>global scope</i>; its value is
accessible and modifiable by any script command on an ASP page.</p><p><img src="note.gif" alt="note"><b>
      Note
      </b>Limiting variable scope to a procedure will enhance
performance.</p>
<p>If you declare variables, a local variable and a global variable
can have the same name. Modifying the value of one will not modify
the value of the other. If you do not declare variables, however,
you might inadvertently modify the value of a global variable. For
example, the following script commands return the value 1 even
though there are two variables named Y:</p><pre>
&lt;%
  Option Explicit 
  Dim Y

  Y = 1

  SetLocalVariable

  Response.Write Y

Sub SetLocalVariable
    Dim Y
    Y = 2
End Sub
%&gt;
</pre><p>The following script commands, on the other hand, return the
value 2 because the variables are not explicitly declared. When the
procedure call sets Y to 2, the scripting engine assumes the
procedure intended to modify the global variable:</p><pre>
&lt;% 
  Option Explicit
  Dim Y = 1

  SetLocalVariable

  Response.Write Y

Sub SetLocalVariable
    Y = 2
End Sub
%&gt;
</pre><p>To avoid problems, develop the habit of explicitly declaring all
variables. This is particularly important if you use the <b>
#include</b> statement to include files into your .asp file. The
included script is contained in a separate file but is treated as
though it were part of the including file. It is easy to forget
that you must use different names for variables used in the main
script and in the included script unless you declare the
variables.</p><h2><a name="H2_37784611">Giving Variables Session
or Application Scope</a></h2><p>Global variables are accessible only in a single .asp file. To
make a variable accessible beyond a single page, give the variable
either session or application scope. Session-scoped variables are
available to all pages in one ASP application that are requested by
one user. Application-scoped variables are available to all pages
in one ASP application that are requested by any user. Session
variables are a good way to store information for a single user,
such as preferences or the user's name or identification.
Application variables are a good way to store information for all
users of a particular application, such as an application-specific
greeting or general values needed by the application.</p><p>ASP provides two built-in objects into which you can store
variables: the <b>Session</b> object and the <b>Application</b>
object.</p><p>You can also create object instances with session or application
scope. For more information, see <a href="asp_basp_setobjscope.htm"><b>Setting Object Scope</b></a>.</p><h3><a name="H3_37785903">Session Scope</a></h3><p>To give a variable session scope, store it in the <b>Session</b>
object by assigning a value to a named entry in the object. For
example, the following commands store two new variables in the <b>
Session</b> object:</p><pre>
&lt;% 
  Session("FirstName") = "Jeff"
  Session("LastName") = "Smith" 
%&gt;
</pre><p>To retrieve information from the <b>Session</b> object, access
the named entry by using the output directive (<code>&lt;%=</code>)
or <b>Response.Write</b>. The following example uses the output
directive to display the current value of Session("FirstName"):</p><pre>
Welcome &lt;%= Session("FirstName") %&gt;
</pre><p>You can store user preferences in the <b>Session</b> object, and
then access those preferences to determine what page to return to
the user. For example, you can allow a user to specify a text-only
version of your content in the first page of the application and
apply this choice on all subsequent pages that the user visits in
this application.</p><pre>
&lt;%
  strScreenResolution = Session("ScreenResolution")
  If strScreenResolution = "Low" Then
%&gt; 
  This is the text version of the page.
&lt;% Else %&gt; 
  This is the multimedia version of the page.
&lt;% End If %&gt;
</pre><p><img src="note.gif" alt="note"><b>
      Note
      </b>If you refer to a session-scoped variable more than
once in a script, consider assigning it to a local variable, as in
the previous example, to improve performance.</p>
<h3><a name="H3_37787278">Application
Scope</a></h3><p>To give a variable application scope, store it in the <b>
Application</b> object by assigning a value to a named entry in the
object. For example, the following command stores an
application-specific greeting in the <b>Application</b> object:</p><pre>
&lt;% Application("Greeting") = "Welcome to the Sales Department!" %&gt;
</pre><p>To retrieve information from the <b>Application</b> object, use
the ASP output directive (<code>&lt;%=</code>) or <b>
Response.Write</b> to access the named entry from any subsequent
page in the application. The following example uses the output
directive to display the value of Application("Greeting"):</p><pre>
&lt;%= Application("Greeting") %&gt;
</pre><p>Again, if your script repeatedly refers to an application-scoped
variable, you should assign it to a local variable to improve
performance.</p><h2><a name="usingconstants">Using
Constants</a></h2><p>A <i>constant</i> is a name that takes the place of a number or
string. Some of the base components provided with ASP, such as
ActiveX Data Objects (ADO), define constants that you can use in
your scripts. A component can declare constants in a <i>component
type library</i>, a file that contains information about objects
and types supported by an COM component. Once you have declared a
type library in your .asp file you can use the defined constants in
any scripts in the same .asp file. Likewise, you can declare a type
library in your Global.asa file to use the defined constants in any
.asp file in an application.</p><p>To declare a type library, use the &lt;METADATA&gt; tag in your
.asp file or Global.asa file. For example, to declare the ADO type
library, use the following statements:</p><pre>
&lt;!--METADATA NAME="Microsoft ActiveX Data Objects 2.5 Library" TYPE="TypeLib" UU--&gt;
</pre><p>Or, rather than referring to the type library's universal unique
indentifier (UUID), you can also refer to the type library by file
path:</p><pre>
&lt;!-- METADATA TYPE="typelib" FILE="c:\program files\common files\system\ado\msado15.dll"--&gt;
</pre><p>You can then use ADO constants in the .asp file where you
declared the type library, or in an .asp file residing to an
application containing a Global.asa file with the ADO type library
declaration. In the following example, <code>adOpenKeyset</code>
and <code>adLockOptimistic</code> are ADO constants:</p><pre>
&lt;%
  'Create and Open Recordset Object.
  Set rstCustomerList = Server.CreateObject("ADODB.Recordset")

  rstCustomerList.ActiveConnection = cnnPubs
  rstCustomerList.CursorType = adOpenKeyset
  rstCustomerList.LockType = adLockOptimistic
%&gt;
</pre><p>The following table lists commonly used type libraries and
UUIDs:</p><table width="" height=""><tr><th width="" height="" colspan="1" rowspan="1">Type Library</th><th width="" height="" colspan="1" rowspan="1">UUID</th></tr><tr><td width="" height="" colspan="1" rowspan="1">Microsoft ActiveX Data Objects 2.5 Library</td><td width="" height="" colspan="1" rowspan="1">{00000205-0000-0010-8000-00AA006D2EA4}</td></tr><tr><td width="" height="" colspan="1" rowspan="1">Microsoft CDO 1.2 Library for Windows 2000 Server</td><td width="" height="" colspan="1" rowspan="1">{0E064ADD-9D99-11D0-ABE5-00AA0064D470}</td></tr><tr><td width="" height="" colspan="1" rowspan="1">MSWC Advertisement Rotator Object Library</td><td width="" height="" colspan="1" rowspan="1">{090ACFA1-1580-11D1-8AC0-00C0F00910F9}</td></tr><tr><td width="" height="" colspan="1" rowspan="1">MSWC IIS Log Object Library</td><td width="" height="" colspan="1" rowspan="1">{B758F2F9-A3D6-11D1-8B9C-080009DCC2FA}</td></tr></table><p>For reference information about the &lt;METADATA&gt; tag, see <a href="ref_scrpt_gltyplibdeclarns.htm"><b>TypeLibrary Declarations</b></a>.</p><p>In previous versions of ASP, some components provided constant
definitions in files that had to be included in each ASP file that
used those constants. The use of the <b>#include</b> directive to
include constant definitions is still supported, but type libraries
are generally easier to use and make your scripts more easily
upgraded. Components might not provide constant definition files in
future releases of ASP.</p><p><img src="note.gif" alt="note"><b>
      Note
      </b>Using the &lt;METADATA&gt; tag rather than the <b>
#include</b> directive may improve the performance of your Web
application.</p>
<p>You can define your own constants. In VBScript, use the <b>
Const</b> statement. In JScript, you can the <b>var</b> statement
to assign a constant value to variable. If you want to use your
constants on more than one .asp file, put the definitions in a
separate file and include them in each .asp file that uses the
constants.</p><hr class="iis" size="1">
<p align="center"><i><a href="/iishelp/common/colegal.htm">© 1997-2001 Microsoft Corporation. All rights reserved.</a></i></p>
</body>
</html>
