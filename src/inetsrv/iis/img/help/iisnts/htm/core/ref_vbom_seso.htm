<html xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:myScript="http://iisue">
<head>
<META http-equiv="Content-Type" content="text/html; charset=UTF-16">
<meta http-equiv="Content-Type" content="text/html; charset=Windows-1252">
<meta http-equiv="PICS-Label" content="(PICS-1.1 &quot;<http://www.rsac.org/ratingsv01.html>&quot; l comment &quot;RSACi North America Server&quot; by &quot;inet@microsoft.com <mailto:inet@microsoft.com>&quot; r (n 0 s 0 v 0 l 0))">
<meta name="MS.LOCALE" content="EN-US">
<meta name="MS-IT-LOC" content="Internet Information Services">
<meta name="MS-HAID" content="Session_Object">
<meta name="description" content="Internet Information Services reference information">
<title>Session Object</title><SCRIPT LANGUAGE="JScript" SRC="iishelp.js"></SCRIPT></head>
<body>
<p style="color:red">[This is preliminary documentation and subject to change]</p>
<h2>Session Object</h2><p>You can use the <b>Session</b> object to store information
needed for a particular user-session. Variables stored in the <b>
Session</b> object are not discarded when the user jumps between
pages in the application; instead, these variables persist for the
entire user-session.</p><p>The Web server automatically creates a <b>Session</b> object
when a Web page from the application is requested by a user who
does not already have a session. The server destroys the <b>
Session</b> object when the session expires or is abandoned.</p><p>One common use for the <b>Session</b> object is to store user
preferences. For example, if a user indicates that they prefer not
to view graphics, you could store that information in the <b>
Session</b> object. For more information on using the <b>
Session</b> object, see <a href="asp_basp_managingsessions.htm"><b>Managing Sessions</b></a> in the ASP Applications section.</p><p><img src="note.gif" alt="note"><b>
      Note
      </b>Session state is only maintained for browsers that
support cookies.</p>
<h6>Syntax</h6><p><b>
Session.</b><i>collection</i>|<i>property</i>|<i>method</i></p><p><i> </i></p><h6>Collections</h6><table width="" height=""><tr><td width="" height="" colspan="1" rowspan="1"><a href="ref_vbom_sesoccon.htm"><b>Session Contents Collection</b></a></td><td width="" height="" colspan="1" rowspan="1">Contains the items that you have added to the session with
script commands.</td></tr><tr><td width="" height="" colspan="1" rowspan="1"><a href="ref_vbom_sesocsoc.htm"><b>Session StaticObjects Collection</b></a></td><td width="" height="" colspan="1" rowspan="1">Contains the objects created with the &lt;OBJECT&gt; tag and
given session scope.</td></tr></table><br><h6>Properties</h6><table width="" height=""><tr><td width="" height="" colspan="1" rowspan="1"><a href="ref_vbom_sesopcp.htm"><b>CodePage</b></a></td><td width="" height="" colspan="1" rowspan="1">Sets the Codepage for data in the intrinsic objects for an
entire session. The codepage tells the server how to encode
characters for different languages.</td></tr><tr><td width="" height="" colspan="1" rowspan="1"><a href="ref_vbom_sesoplcid.htm"><b>LCID</b></a></td><td width="" height="" colspan="1" rowspan="1">Sets the LCID for data for an entire session. The LCID refers
to how dates, times, and currency are formatted for a specific
geographical locale.</td></tr><tr><td width="" height="" colspan="1" rowspan="1"><a href="ref_vbom_sesopsid.htm"><b>SessionID</b></a></td><td width="" height="" colspan="1" rowspan="1">Returns the session identification for this user.</td></tr><tr><td width="" height="" colspan="1" rowspan="1"><a href="ref_vbom_sesoptime.htm"><b>Timeout</b></a></td><td width="" height="" colspan="1" rowspan="1">The timeout period for the session state for this application,
in minutes.</td></tr></table><br><h6>Methods</h6><table width="" height=""><tr><td width="" height="" colspan="1" rowspan="1"><a href="ref_vbom_sesomaband.htm"><b>Abandon</b></a></td><td width="" height="" colspan="1" rowspan="1">This method destroys a <b>Session</b> object and releases its
resources.</td></tr><tr><td width="" height="" colspan="1" rowspan="1"><a href="ref_vbom_sesomcr.htm"><b>Contents.Remove</b></a></td><td width="" height="" colspan="1" rowspan="1">This method deletes an item from the <b>Contents</b>
collection.</td></tr><tr><td width="" height="" colspan="1" rowspan="1"><a href="ref_vbom_sesomsra.htm"><b>Contents.RemoveAll</b></a></td><td width="" height="" colspan="1" rowspan="1">This method deletes all items from the <b>Contents</b>
collection.</td></tr></table><br><h6>Events</h6><p>Scripts for the following events are declared in the Global.asa
file.</p><table width="" height=""><tr><td width="" height="" colspan="1" rowspan="1"><a href="ref_scrpt_glsesevntonend.htm"><b>Session_OnEnd</b></a></td></tr><tr><td width="" height="" colspan="1" rowspan="1"><a href="ref_scrpt_glsesevntonstart.htm"><b>Session_OnStart</b></a></td></tr></table><br><p>For more information about these events and the Global.asa file,
see the <a href="ref_scrpt_globalasaref.htm"><b>Global.asa Reference</b></a>.</p><h6>Remarks</h6><p>You can store values in the <b>Session</b> object. Information
stored in the <b>Session</b> object is available throughout the
session and has session scope. The following script demonstrates
storage of two types of variables.</p><pre><code>&lt;% 
Session("username") = "Janine"
Session("age") = 24
%&gt;
</code></pre><p>However, if you store an object in the <b>Session</b> object and
use VBScript as your primary scripting language, you must use the
<b>Set</b> keyword. This is illustrated in the following
script.</p><pre><code>&lt;% Set Session("Obj1") = Server.CreateObject("MyComponent.class1") %&gt;
</code></pre><p>You can then call the methods and properties exposed by <code>
MyComponent.class1</code> on subsequent Web pages, by using the
following.</p><pre><code>&lt;% Session("Obj1").MyMethod %&gt;
</code></pre><p>Or by extracting a local copy of the object and using the
following.</p><pre><code>&lt;% 
Set MyLocalObj1 = Session("Obj1") 
MyLocalObj1.MyObjMethod
%&gt;
</code></pre><p>Another way to create objects with session scope is to use the
&lt;OBJECT&gt; tags in the Global.asa file.</p><p>You cannot, however, store a built-in object in a <b>Session</b>
object. For example, each of the following lines would return an
error.</p><pre><code>&lt;%
Set Session("var1") = Session
Set Session("var2") = Request
Set Session("var3") = Response
Set Session("var4") = Server
Set Session("var5") = Application
%&gt;
</code></pre><p>Before you store an object in the <b>Session</b> object, you
should know what threading model it uses. Only objects marked as
both can be stored in the <b>Session</b> object without locking the
session to a single thread.</p>For more information, see the Platform
SDK.<p>If you store an array in a <b>Session</b> object, you should not
attempt to alter the elements of the stored array directly. For
example, the following script will not work:</p><pre><code>&lt;% Session("StoredArray")(3) = "new value" %&gt;
</code></pre><p>This is because the <b>Session</b> object is implemented as a
collection. The array element <code>StoredArray(3)</code> does not
receive the new value. Instead, the value is indexed into the
collection, overwriting any information stored at that
location.</p><p>It is strongly recommended that if you store an array in the <b>
Session</b> object, you retrieve a copy of the array before
retrieving or changing any of the elements of the array. When you
are done with the array, you should store the array in the <b>
Session</b> object again so that any changes you made are saved.
This is demonstrated in the following example:</p><pre><code>---file1.asp---
&lt;%
'Creating and initializing the array
Dim MyArray()
Redim MyArray(5)
MyArray(0) = "hello"
MyArray(1) = "some other string"

'Storing the array in the Session object.
Session("StoredArray") = MyArray

Response.Redirect("file2.asp")
%&gt;

---file2.asp---
&lt;%
'Retrieving the array from the Session Object
'and modifying its second element.
LocalArray = Session("StoredArray")
LocalArray(1) = " there"

'Printing out the string "hello there."
Response.Write(LocalArray(0)&amp;LocalArray(1))

'Re-storing the array in the Session object.
'This overwrites the values in StoredArray with the new values.
Session("StoredArray") = LocalArray
%&gt;
</code></pre><h6>Example</h6><p>The following code assigns the string <code>MyName</code> to a
session variable called <code>name</code>, assigns a value to a
session variable called <code>year,</code> and assigns an instance
of the <code>some.Obj</code> component to a variable called <code>
myObj</code>.</p><pre><code>&lt;%
Session("name") = "MyName" 
Session("year") = 96 
Set Session("myObj") = Server.CreateObject("someObj") 
%&gt;</code></pre><p>For more information, see <a href="asp_basp_managingsessions.htm"><b>Managing Sessions</b></a>.</p><hr class="iis" size="1">
<p align="center"><i><a href="/iishelp/common/colegal.htm">© 1997-2001 Microsoft Corporation. All rights reserved.</a></i></p>
</body>
</html>
