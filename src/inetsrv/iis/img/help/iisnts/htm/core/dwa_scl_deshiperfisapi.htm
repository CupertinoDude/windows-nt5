<html xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:myScript="http://iisue">
<head>
<META http-equiv="Content-Type" content="text/html; charset=UTF-16">
<meta http-equiv="Content-Type" content="text/html; charset=Windows-1252">
<meta http-equiv="PICS-Label" content="(PICS-1.1 &quot;<http://www.rsac.org/ratingsv01.html>&quot; l comment &quot;RSACi North America Server&quot; by &quot;inet@microsoft.com <mailto:inet@microsoft.com>&quot; r (n 0 s 0 v 0 l 0))">
<meta name="MS.LOCALE" content="EN-US">
<meta name="MS-IT-LOC" content="Internet Information Services">
<meta name="MS-HAID" content="Designing_High-Performance_ISAPI_Applications">
<meta name="description" content="Internet Information Services reference information">
<title>Designing High-Performance ISAPI Applications</title><SCRIPT LANGUAGE="JScript" SRC="iishelp.js"></SCRIPT></head>
<body>
<p style="color:red">[This is preliminary documentation and subject to change]</p>
<h1>Designing High-Performance ISAPI Applications</h1><p>ISAPI is the highest-performance interface for Web applications.
If you create an ISAPI extension or filter, chances are that it can
outperform scripts in ASP pages or even components performing
similar tasks. However, the inherent speed of the ISAPI interface
does not mean that you can ignore performance and scalability
considerations.ISAPI cannot utilize much of the application support
services provided by ASP and COM. If you want your ISAPI
application to maintain session state, for instance, you need to
implement much of that session-state functionality .</p><p>The following are suggestions to improve the scalability and
performance of your ISAPI extensions:</p><ul><li><b>Avoid ISAPI filters</b>-Avoid ISAPI filters unless adding an
ISAPI filter is absolutely necessary to your application
architecture. You should especially avoid filters that perform
processing on raw incoming or outgoing data. If you determine that
a filter is absolutely necessary, be sure to carefully optimize the
main code paths through the filter event notification code.</li><li><b>Create your own worker thread pool</b>-You should create
your own worker thread pool so that the main I/O threads are free
to accomplish other tasks. This option is only available for ISAPI
extensions.</li><li><b>Consider using asynchronous operations and I/O completion
ports</b>-IIS supports asynchronous reading and writing by using
the I/O completion ports, available in Windows NT 4.0 and Windows
2000 or later. Depending on the type of I/O operations being
performed, asynchronous operations can make better use of the CPU
time available. Asynchronous operations also work particularly well
when implemented using a worker thread pool.</li><li><b>Use the Win32 TransmitFile function</b>--When sending an
HTML or image file, ISAPI extensions should use the Win32
TransmitFile function, which is exposed by the 

HSE_REQ_TRANSMIT_FILE
ServerSupportFunction of ISAPI, which is documented in the
PSDK .</li><li><b>Use Connection: Keep-Alive headers</b>-In most cases keeping
persistent HTTP connections provides better performance than using
non-persistent connections.</li><li><b>Minimize need for thread synchronization</b>-By maintaining
session state information with the request context, you can
minimize the need for thread synchronization. If thread
synchronization is required, make sure that critical sections are
kept short.</li><li><b>Consider other heap alternatives</b>-If your ISAPI
application uses the heap intensively, you should consider other
heap alternatives. Intensive use of the Windows<sup>®</sup>
heap can cause resource contention. Several memory allocation
alternatives are worth exploring, including: 

<ul><li><b>Heap Partitioning-</b>Create multiple custom heaps, one for
each thread, in addition to the default process heap. A separate,
non-global lock controls each custom heap and lock contention is
reduced.</li><li><b>Cached Allocation</b>-Use custom allocation operations that
operate at a middle layer between the object users and the heap.
Calls to the Win32 heap are made infrequently and only for large
memory blocks. These blocks are then subdivided and managed by the
custom allocator.</li><li><b>Stack Allocation-</b>Use the C run-time function <b>
_alloca</b> to allocate memory for your objects on the stack
instead of the heap. This method is feasible only for relatively
small objects because the space available on the stack is limited.
In addition, your newly allocated object is only available within
the current functions, or functions called by that function. Once
the current function returns to the main calling program, the
storage allocated on the stack is lost.</li><li><b>Object Encapsulation</b>-Include a buffer as a member data
structure of a class. Use this buffer for tasks that require
accesses to the Win32 heap.</li></ul></li><li><b>Avoid using global locks within your ISAPI</b>-Global locks
always adversely affect scalability.</li></ul><p>For more information about ISAPI
extensions and filters, please see the section called <a href="http://www.microsoft.com/isapi/redir.dll?prd=msdn&amp;pver=6.0&amp;ar=IIS&amp;sbp=library&amp;sba=ISAPIref" target="_New"><b><b>Developing ISAPI Extensions and Filters</b></b></a>
or the section called <a href="http://www.microsoft.com/isapi/redir.dll?prd=msdn&amp;pver=6.0&amp;ar=IIS&amp;sbp=library&amp;sba=ISAPI" target="_New"><b><b>ISAPI Reference</b></b></a> in the MSDN Online
Library.</p><hr class="iis" size="1">
<p align="center"><i><a href="/iishelp/common/colegal.htm">© 1997-2001 Microsoft Corporation. All rights reserved.</a></i></p>
</body>
</html>
