<html xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:myScript="http://iisue">
<head>
<META http-equiv="Content-Type" content="text/html; charset=UTF-16">
<meta http-equiv="Content-Type" content="text/html; charset=Windows-1252">
<meta http-equiv="PICS-Label" content="(PICS-1.1 &quot;<http://www.rsac.org/ratingsv01.html>&quot; l comment &quot;RSACi North America Server&quot; by &quot;inet@microsoft.com <mailto:inet@microsoft.com>&quot; r (n 0 s 0 v 0 l 0))">
<meta name="MS.LOCALE" content="EN-US">
<meta name="MS-IT-LOC" content="Internet Information Services">
<meta name="MS-HAID" content="Developing_Scalable_Components">
<meta name="description" content="Internet Information Services reference information">
<title>Developing Scalable Components</title><SCRIPT LANGUAGE="JScript" SRC="iishelp.js"></SCRIPT></head>
<body>
<p style="color:red">[This is preliminary documentation and subject to change]</p>
<h1>Developing Scalable Components</h1><p>Because you should encapsulate most of your business logic
within COM components, it is important that your components be
designed for high performance, in addition to being readily
scalable.</p><p>Here are some suggestions for creating scalable components:</p><ul><li><b>Optimize your algorithms.</b></li><li><b>Make your component adhere to the proper threading.</b>
Page-scope components should be use either the Apartment or Both
threading model; application-scope components should use the Both
threading model, and should also aggregate the free-threaded
marshaller. For more information about component threading issues,
see the topic <b>Selecting a Threading Model</b> in the IIS
documentation in the Platform SDK.</li><li><b>If your component uses the heap intensively, consider other
heap alternatives</b>. Intensive use of the Windows<sup>®</sup>
heap can cause resource contention. Several memory allocation
alternatives are worth exploring, including: 

<ul><li><b>Heap Partitioning</b>, accomplished by creating multiple
custom heaps, in addition to the default process heap. Each custom
heap would then be controlled by a separate, non-global lock, and
lock contention would be reduced.</li><li><b>Cached Allocation</b>, which involves using custom
allocation operations that operate at a middle layer between the
object users and the heap. Calls to the Win32 heap are made
infrequently, and only for large memory blocks. These blocks are
then subdivided and managed by the custom allocator.</li><li><b>Stack Allocation</b>, using the C run-time function <b>
_alloca</b> to allocate memory for your objects on the stack
instead of the heap. This method is feasible only for relatively
small objects, because the space available on the stack is limited.
In addition, your newly allocated object will be available only
within the current functions, or functions called by that function.
Once the current function returns, the storage allocated on the
stack will be lost.</li><li><b>Object Encapsulation</b>, accomplished by simply
incorporating a buffer as a member data structure of your component
class. This buffer is then used for tasks that would otherwise
require accesses to the Win32 heap.</li></ul></li><li><b>Avoid using global locks within your component</b>, if
possible. Global locks can often adversely affect component
scalability.</li><li><b>If your component is running as part of an application,
designate the application as out-of-process for application
debugging only.</b> Process isolation, introduced in IIS 4.0. is a
useful capability. The cross-process marshalling required to
support process isolation, however, can introduce a certain amount
of overhead to component execution. This difference in overhead is
most significant for simple components, and is less of a concern
for more complex components. To maximize scalability and
performance, however, consider running the application
out-of-process only until it is sufficiently debugged and stable to
be run in-process with IIS.</li><li><b>Consider placing your component in a library (in-process)
COM+ application.</b> As part of the Just-In-Time activation
feature of Component Services, the component's COM class factory is
cached, and reused for each instantiation request through
CreateInstance.</li></ul><hr class="iis" size="1">
<p align="center"><i><a href="/iishelp/common/colegal.htm">© 1997-2001 Microsoft Corporation. All rights reserved.</a></i></p>
</body>
</html>
