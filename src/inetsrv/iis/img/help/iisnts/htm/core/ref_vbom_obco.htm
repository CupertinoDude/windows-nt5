<html xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:myScript="http://iisue">
<head>
<META http-equiv="Content-Type" content="text/html; charset=UTF-16">
<meta http-equiv="Content-Type" content="text/html; charset=Windows-1252">
<meta http-equiv="PICS-Label" content="(PICS-1.1 &quot;<http://www.rsac.org/ratingsv01.html>&quot; l comment &quot;RSACi North America Server&quot; by &quot;inet@microsoft.com <mailto:inet@microsoft.com>&quot; r (n 0 s 0 v 0 l 0))">
<meta name="MS.LOCALE" content="EN-US">
<meta name="MS-IT-LOC" content="Internet Information Services">
<meta name="MS-HAID" content="ObjectContext_Object">
<meta name="description" content="ASP ObjectContext Object">
<title>ObjectContext Object</title><SCRIPT LANGUAGE="JScript" SRC="iishelp.js"></SCRIPT></head>
<body>
<p style="color:red">[This is preliminary documentation and subject to change]</p>
<h2>ObjectContext Object</h2><p>You can use the <b>ObjectContext</b> object to either commit or
abort a transaction, managed by Component Services, that has been
initiated by a script contained in an ASP page.</p><p>When an .asp file contains the <a href="ref_scrpt_vbstransaction.htm"><b>@TRANSACTION</b></a> directive, the
page runs in a transaction and does not finish processing until the
transaction either succeeds completely or fails.</p><h6>Syntax</h6><p><b>ObjectContext</b>.<i>method</i></p><p><i> </i></p><h6>Methods</h6><table width="" height=""><tr><td width="" height="" colspan="1" rowspan="1"><a href="ref_vbom_obcomsa.htm"><b>SetAbort</b></a></td><td width="" height="" colspan="1" rowspan="1">The <b>SetAbort</b> method declares that the transaction
initiated by the script has not completed and the resources should
not be updated.</td></tr><tr><td width="" height="" colspan="1" rowspan="1"><a href="ref_vbom_obcomsc.htm"><b>SetComplete</b></a></td><td width="" height="" colspan="1" rowspan="1">The <b>SetComplete</b> method declares that the script is not
aware of any reason for the transaction not to complete. If all
components participating in the transaction also call <b>
SetComplete</b>, the transaction will complete.</td></tr></table><br><h6>Events</h6><table width="" height=""><tr><td width="" height="" colspan="1" rowspan="1"><a href="ref_vbom_obcoeota.htm"><b>OnTransactionAbort</b></a></td></tr><tr><td width="" height="" colspan="1" rowspan="1"><a href="ref_vbom_obcoeotc.htm"><b>OnTransactionCommit</b></a></td></tr></table><br><h6>Remarks</h6><p>The ASP <b>ObjectContext</b> object implements two methods of
the COM+ <b>ObjectContext</b> object. The <b>SetAbort</b> method
explicitly aborts the transaction. This causes Component Services
to prevent any updates to resources that were contacted during the
first phase of the transaction. When the transaction aborts, the
script's <b>OnTransactionAbort</b> event will be processed.</p><p>Calling the <b>SetComplete</b> method does not necessarily mean
that the transaction is complete. The transaction will only
complete if all of the transactional components called by the
script call <b>SetComplete</b>. In most instances, you will not
need to call <b>SetComplete</b> within the script, as the script is
assumed to be complete if it finishes processing without calling
<b>SetAbort</b>.</p><p>The COM+ <b>ObjectContext</b> object exposes methods in addition
to <b>SetAbort</b> and <b>SetComplete</b>. These other methods are
not available to ASP scripts; however, they are available to COM+
components that can be called by the ASP scripts.</p><h6>Example</h6><p>The following example uses the <b>SetAbort</b> and <b>
SetComplete</b> methods. The Sales.htm file obtains data required
to process a sales request. The second file, SalesVerify.asp
contains a script that uses two objects, <b>Inventory</b> and <b>
Sales</b>, to process the sale. <b>SetAbort</b> is called if <b>
Inventory</b> returns an error code indicating that there is not
sufficient inventory on hand to process the sale. If the <b>
Inventory</b> object does not return the error code, <b>
SetComplete</b> is called and the sale is processed.</p><p><b>Sales.htm</b></p><pre><code>&lt;!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN"&gt;

&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Sales Order&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY BGCOLOR="#FFFFFF"&gt;&lt;FONT FACE="ARIAL,HELVETICA"&gt;
&lt;H2&gt;Sales Order Form &lt;/H2&gt;

&lt;FORM METHOD=POST ACTION="SalesVerify.asp"&gt; 
&lt;P&gt;Please enter the product code, quantity, and your account number.
&lt;INPUT TYPE=TEXT NAME=QuantityToBuy&gt; 
&lt;INPUT TYPE=TEXT NAME=ProductCode&gt; 
&lt;INPUT TYPE=TEXT NAME=AccountIn&gt; 
&lt;P&gt;
&lt;INPUT TYPE=SUBMIT&gt; 
&lt;/FONT&gt; 
&lt;/BODY&gt;
&lt;/HTML&gt;
</code></pre><p><b>SalesVerify.asp file</b></p><pre><code>&lt;%@ Transaction = Required %&gt;
&lt;%
  Set CurrentQOH = Server.CreateObject("Mycomp.Inventory")
  Set CurrentSales = Server.CreateObject("Mycomp.Sales")
 
  CheckQuantity = Request("QuantityToBuy")
  CheckProduct = Request("ProductCode")
  QuantityStatus = CurrentQOH.CheckQOH(CheckQuantity,CheckProduct)
 
  If QuantityStatus = None
    ObjectContext.SetAbort
    Response.Write "Sorry, there is not sufficient quantity on hand to
    process your sale."
  Else 
    ObjectContext.SetComplete
    Account = Request("AccountIn")
    Saleupdate = CurrentSales.PostIt(AccountIn)
  End If
%&gt;
</code></pre><p>For more information, see <a href="asp_basp_understandtrans.htm"><b>Understanding Transactions</b></a>.</p><hr class="iis" size="1">
<p align="center"><i><a href="/iishelp/common/colegal.htm">© 1997-2001 Microsoft Corporation. All rights reserved.</a></i></p>
</body>
</html>
