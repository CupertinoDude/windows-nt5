<html xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:myScript="http://iisue">
<head>
<META http-equiv="Content-Type" content="text/html; charset=UTF-16">
<meta http-equiv="Content-Type" content="text/html; charset=Windows-1252">
<meta http-equiv="PICS-Label" content="(PICS-1.1 &quot;<http://www.rsac.org/ratingsv01.html>&quot; l comment &quot;RSACi North America Server&quot; by &quot;inet@microsoft.com <mailto:inet@microsoft.com>&quot; r (n 0 s 0 v 0 l 0))">
<meta name="MS.LOCALE" content="EN-US">
<meta name="MS-IT-LOC" content="Internet Information Services">
<meta name="MS-HAID" content="Metabase_History_Scenario_4">
<meta name="description" content="Metabase History Scenario.">
<title>Metabase History Scenario 4</title><SCRIPT LANGUAGE="JScript" SRC="iishelp.js"></SCRIPT></head>
<body>
<p style="color:red">[This is preliminary documentation and subject to change]</p>
<h1>Metabase History Scenario 4</h1><p>This scenario illustrates how the metabase history feature works
under the following conditions:</p><ul><li>An administrator copies an old version file into the history
folder.</li><li>The value of the <b>HistoryMajorVersionNumber</b> property
within the in-memory metabase is at the maximum value of
9999999999.</li><li>MetaBase.xml is not write-locked.</li><li>MetaBase.xml is not read-only.</li><li>MetaBase.xml is not newer than the temporary file.</li></ul><p>What you will learn:</p><ul><li>How IIS avoids overwriting files in the history folder that
have non sequential version numbers.</li></ul><p><b>Step 1</b>:<br>
Copy MetaBase_0000000001_000000000.xml into the history folder.</p><p><img src="MB_Scenario_History4step1.gif" alt="Describes step 1 of this scenario."></p><p><b>Step 2</b>:<br>
Change the value of A (A=3) within the in-memory metabase, and
write the in-memory metabase to disk.</p><p><img src="MB_Scenario_History4step2.gif" alt="Describes step 2 of this scenario."></p><ol><li>IIS determines whether there are changes pending in the
in-memory metabase. &lt;Changes are pending.&gt;</li><li>IIS locks the in-memory metabase to prevent writes.</li><li>IIS looks within the in-memory metabase for the value of the
<b>HistoryMajorVersionNumber</b> property and increments this value
by 1. IIS then checks whether a file within the history folder is
named with the same major version number. If a file exists in the
history folder using the same major version number, IIS checks the
history folder to determine whether the next higher version number
is available. This process is repeated until an available major
version number is found. 

<p><img src="note.gif" alt="note"><b>
      Note
      </b>Because the <b>HistoryMajorVersionNumber</b>
value within the in-memory metabase is at the maximum value in this
scenario, the value is rolled over to 1 and IIS looks for a history
file with a major version number of 1. IIS determines that the
major version number 1 is available.</p></li><li>IIS writes a temporary file with the contents of the in-memory
metabase and writes the value of the <b>
HistoryMajorVersionNumber</b> property within the temporary file
that was determined in step 3.</li><li>IIS unlocks the in-memory metabase to allow writes.</li><li>IIS copies the temporary file to the history folder and renames
the file to MetaBase_0000000001_0000000000.xml.</li><li>IIS verifies that the MetaBase.xml file is not write-locked.
&lt;Passed verification.&gt;</li><li>IIS verifies that the MetaBase.xml file is not read-only.
&lt;Passed verification.&gt;</li><li>IIS verifies that the MetaBase.xml file is not newer than the
temporary file. &lt;Passed verification.&gt;</li><li>Because the MetaBase.xml file is not write-locked, not
read-only, and is not newer than the temporary file, the temporary
file is copied over MetaBase.xml and the temporary file is
deleted.</li></ol><p><b>Step 3</b>:<br>
Change the value of B (B=3) within the in-memory metabase, and
write the in-memory metabase to disk.</p><p><img src="MB_Scenario_History4step3.gif" alt="Describes step 3 of this scenario."></p><ol><li>IIS determines whether there are changes pending in the
in-memory metabase. &lt;Changes are pending.&gt;</li><li>IIS locks the in-memory metabase to prevent writes.</li><li>IIS looks within the in-memory metabase for the value of the
<b>HistoryMajorVersionNumber</b> property and increments this value
by 1. IIS then checks whether a file within the history folder is
named with the same major version number. If a file exists in the
history folder using the same major version number, IIS checks the
history folder to determine whether the next higher version number
is available. This process is repeated until an available major
version number is found. 

<p><img src="note.gif" alt="note"><b>
      Note
      </b>Because the <b>HistoryMajorVersionNumber</b>
within the in-memory metabase was at the maximum value, the value
is rolled over to 1. IIS determines that the next available major
version number is 3.</p></li><li>IIS writes a temporary file with the contents of the in-memory
metabase and writes the value of the <b>
HistoryMajorVersionNumber</b> property within the temporary file
that was determined in step 3.</li><li>IIS unlocks the in-memory metabase to allow writes.</li><li>IIS copies the temporary file to the history folder and renames
the file to MetaBase_0000000001_0000000000.xml.</li><li>IIS verifies that the MetaBase.xml file is not write-locked.
&lt;Passed verification.&gt;</li><li>IIS verifies that the MetaBase.xml file is not read-only.
&lt;Passed Verification&gt;</li><li>IIS verifies that the MetaBase.xml file is not newer than the
temporary file. &lt;Passed verification.&gt;</li><li>Because the MetaBase.xml file is not write-locked, not
read-only, and is not newer than the temporary file, the temporary
file is copied over MetaBase.xml and the temporary file is
deleted.</li></ol><div class="search-terms">phrase 1, phrase 2, phrase 3</div>
<hr class="iis" size="1">
<p align="center"><i><a href="/iishelp/common/colegal.htm">© 1997-2001 Microsoft Corporation. All rights reserved.</a></i></p>
</body>
</html>
