<html xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:myScript="http://iisue">
<head>
<META http-equiv="Content-Type" content="text/html; charset=UTF-16">
<meta http-equiv="Content-Type" content="text/html; charset=Windows-1252">
<meta http-equiv="PICS-Label" content="(PICS-1.1 &quot;<http://www.rsac.org/ratingsv01.html>&quot; l comment &quot;RSACi North America Server&quot; by &quot;inet@microsoft.com <mailto:inet@microsoft.com>&quot; r (n 0 s 0 v 0 l 0))">
<meta name="MS.LOCALE" content="EN-US">
<meta name="MS-IT-LOC" content="Internet Information Services">
<meta name="MS-HAID" content="Application_Object">
<meta name="description" content="Internet Information Services reference information">
<title>Application Object</title><SCRIPT LANGUAGE="JScript" SRC="iishelp.js"></SCRIPT></head>
<body>
<p style="color:red">[This is preliminary documentation and subject to change]</p>
<h2>Application Object</h2><p>You can use the <b>Application</b> object to share information
among all users of a given application. An ASP-based application is
defined as all the .asp files in a virtual directory and its
subdirectories. Because the <b>Application</b> object can be shared
by more than one user, there are <b>Lock</b> and <b>Unlock</b>
methods to ensure that multiple users do not try to alter a
property simultaneously.</p><h6>Syntax</h6><p><b>Application.</b><i>method</i></p><p> </p><h6>Collections</h6><table width="" height=""><tr><td width="" height="" colspan="1" rowspan="1"><a href="ref_vbom_apoccc.htm"><b>Application Contents Collection</b></a></td><td width="" height="" colspan="1" rowspan="1">Contains all of the items that have been added to the
application through script commands.</td></tr><tr><td width="" height="" colspan="1" rowspan="1"><a href="ref_vbom_apocsoc.htm"><b>Application StaticObjects Collection</b></a></td><td width="" height="" colspan="1" rowspan="1">Contains all of the objects added to the session with the
&lt;OBJECT&gt; tag.</td></tr></table><br><h6>Methods</h6><table width="" height=""><tr><td width="" height="" colspan="1" rowspan="1"><a href="ref_vbom_apomcr.htm"><b>Contents.Remove</b></a></td><td width="" height="" colspan="1" rowspan="1">The <a href="ref_vbom_apomcr.htm"><b>Contents.Remove</b></a>
method deletes an item from the <b>Application</b> object's <b>
Contents</b> collection.</td></tr><tr><td width="" height="" colspan="1" rowspan="1"><a href="ref_vbom_apomcra.htm"><b>Contents.RemoveAll</b></a></td><td width="" height="" colspan="1" rowspan="1">The <a href="ref_vbom_apomcra.htm"><b>Contents.RemoveAll</b></a> method deletes all items from the <b>
Application</b> object's <b>Contents</b> collection.</td></tr><tr><td width="" height="" colspan="1" rowspan="1"><a href="ref_vbom_apoml.htm"><b>Lock</b></a></td><td width="" height="" colspan="1" rowspan="1">The <b>Lock</b> method prevents other clients from modifying
<b>Application</b> object properties.</td></tr><tr><td width="" height="" colspan="1" rowspan="1"><a href="ref_vbom_apomu.htm"><b>Unlock</b></a></td><td width="" height="" colspan="1" rowspan="1">The <b>Unlock</b> method allows other clients to modify <b>
Application</b> object properties.</td></tr></table><br><h6>Events</h6><table width="" height=""><tr><td width="" height="" colspan="1" rowspan="1"><a href="ref_scrpt_glappevntsonend.htm"><b>Application_OnEnd</b></a></td></tr><tr><td width="" height="" colspan="1" rowspan="1"><a href="ref_scrpt_glappevntsonstart.htm"><b>Application_OnStart</b></a></td></tr></table><br><p>Scripts for the preceding events are declared in the Global.asa
file. For more information about these events and the Global.asa
file, see the <a href="ref_scrpt_globalasaref.htm"><b>Global.asa Reference</b></a>.</p><h6>Remarks</h6><p>You can store values in the <a href="ref_vbom_apoc.htm"><b>Application Collections</b></a>. Information stored in the <b>
Application</b> collections is available throughout the application
and has application scope. The following script demonstrates
storage of two types of variables.</p><pre><code>&lt;% 
Application("greeting") = "Welcome to My Web World!"
Application("num") = 25
%&gt;
</code></pre><p>Each of these variables would be members of the <a href="ref_vbom_apoccc.htm"><b>Application Contents Collection</b></a>.</p><p>You can also assign a component instance to a variable that has
application scope. If you assign a component instance to a variable
with the <b>Server.CreateObject</b> method, the variable will be a
member of the <b>Application.Contents</b> collection. If the
variable is assigned with the &lt;OBJECT&gt; tag, the variable will
be a member of the <a href="ref_vbom_apocsoc.htm"><b>Application StaticObjects Collection</b></a>.</p><p>You should be careful about assigning component instances to
variables with application scope, because some components are not
designed to be given application scope. For more information, see
the Platform SDK.</p><p>If you assign a component instance to a variable in the <a href="ref_vbom_apoccc.htm"><b>Application Contents Collection</b></a>, and
use Visual Basic<sup>®</sup> Scripting Edition (VBScript) as
your primary scripting language, you must use the <b>Set</b>
keyword. This is illustrated in the following script.</p><pre><code>&lt;% Set Application("Obj1") = Server.CreateObject("MyComponent") %&gt;
</code></pre><p>You can then reference the methods and properties of <code>
MyComponent</code> on subsequent Web pages by using this script</p><pre><code>&lt;% Application("Obj1").MyObjMethod %&gt;
</code></pre><p>or by extracting a local copy of the object and using the
following</p><pre><code>&lt;% 
Set MyLocalObj1 = Application("Obj1") 
MyLocalObj1.MyObjMethod
%&gt;
</code></pre><p>Another way to create objects with application scope is by using
the &lt;OBJECT&gt; tag in the Global.asa file. For more
information, see the <a href="ref_scrpt_globalasaref.htm"><b>Global.asa Reference</b></a>.</p><p>You cannot store a built-in object in the <b>Application</b>
object. For example, each of the following lines returns an
error.</p><pre><code>&lt;%
Set Application("var1") = Session
Set Application("var2") = Request
Set Application("var3") = Response
Set Application("var4") = Server
Set Application("var5") = Application
Set Application("var6") = ObjectContext
%&gt;
</code></pre><p>You should be aware of the threading model used by any
components you give application scope. The threading model used to
develop the component will have a significant impact on whether a
component instance should be assigned to a variable in one of the
<b>Application</b> collections.</p><p>If you store an array in an <b>Application</b> object, you
should not attempt to alter the elements of the stored array
directly. For example, the following script does not work:</p><pre><code>&lt;% Application("StoredArray")(3) = "new value" %&gt;
</code></pre><p>This is because the <b>Application</b> object is implemented as
a collection. The array element <code>StoredArray(3)</code> does
not receive the new value. Instead, the value would be included in
the <b>Application</b> object collection, and would overwrite any
information that had previously been stored at that location.</p><p>It is strongly recommended that if you store an array in the <b>
Application</b> object, you retrieve a copy of the array before
retrieving or changing any of the elements of the array. When you
are done with the array, you should store the array in the <b>
Application</b> object again, so that any changes you made are
saved. This is demonstrated in the following scripts.</p><pre><code>---file1.asp---
&lt;%
'Creating and initializing the array.
dim MyArray()
Redim MyArray(5)
MyArray(0) = "hello"
MyArray(1) = "some other string"

'Storing the array in the Application object.
Application.Lock
Application("StoredArray") = MyArray
Application.Unlock

Server.Transfer("file2.asp")
%&gt;

---file2.asp---
&lt;%
'Retrieving the array from the Application Object
'and modifying its second element.
LocalArray = Application("StoredArray")
LocalArray(1) = " there"

'Printing out the string "hello there."
Response.Write(LocalArray(0)&amp;LocalArray(1))

'Re-storing the array in the Application object.
'This overwrites the values in StoredArray with the new values.
Application.Lock
Application("StoredArray") = LocalArray
Application.Unlock
%&gt;
</code></pre><h6>Example</h6><p>The following example uses the application variable <i>
NumVisits</i> to store the number of times that a particular page
has been accessed. The <b>Lock</b> method is called to ensure that
only the current client can access or alter <code>NumVisits</code>.
Calling the <b>Unlock</b> method then enables other users to access
the <b>Application</b> object.</p><pre><code>&lt;%
Application.Lock
Application("NumVisits") = Application("NumVisits") + 1
Application.Unlock
%&gt; 
 
This application page has been visited 
&lt;%= Application("NumVisits") %&gt; times!
</code></pre><p>You can see a working sample .asp file that uses the <b>
Application</b> object in the Building ASP Applications section of
the <a href="samp_asp_introduction.htm"><b>ASP Samples</b></a>.</p><hr class="iis" size="1">
<p align="center"><i><a href="/iishelp/common/colegal.htm">© 1997-2001 Microsoft Corporation. All rights reserved.</a></i></p>
</body>
</html>
