<html xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:myScript="http://iisue">
<head>
<META http-equiv="Content-Type" content="text/html; charset=UTF-16">
<meta http-equiv="Content-Type" content="text/html; charset=Windows-1252">
<meta http-equiv="PICS-Label" content="(PICS-1.1 &quot;<http://www.rsac.org/ratingsv01.html>&quot; l comment &quot;RSACi North America Server&quot; by &quot;inet@microsoft.com <mailto:inet@microsoft.com>&quot; r (n 0 s 0 v 0 l 0))">
<meta name="MS.LOCALE" content="EN-US">
<meta name="MS-IT-LOC" content="Internet Information Services">
<meta name="MS-HAID" content="About_Editing_the_MetaBase.xml_File_While_IIS_Is
Running">
<meta name="description" content="Overview of the Edit-While-Running feature.">
<title>About Editing the MetaBase.xml File While IIS Is
Running</title><SCRIPT LANGUAGE="JScript" SRC="iishelp.js"></SCRIPT></head>
<body>
<p style="color:red">[This is preliminary documentation and subject to change]</p>
<h1>About Editing the MetaBase.xml File While IIS Is
Running</h1><p>With the release of IIS 6.0, IIS administrators can edit the
metabase file directly while IIS is running and the changes are
immediately applied to the in-memory metabase. This capability,
known as edit-while-running, is possible because MetaBase.XML is a
text file. Direct editing can be accomplished using common text
tools like Microsoft Notepad when edit while running is
enabled.</p><p>Edit-while-running is dependent on the <a href="mb_history_history.htm"><b>The Metabase History Feature</b></a> feature to keep
track of the changes that an administrator makes to the
MetaBase.XML file. The metabase history feature is enabled by
default. For information about configuring metabase history, see <a href="mb_history_ConfigHistory.htm"><b>Configuring the Metabase History Feature</b></a>.</p><p><img src="note.gif" alt="note"><b>
      Note
      </b>Edit-while-running is not enabled by default.
For information about enabling edit-while-running, see <a href="mb_ewr_EnablingEditWhileRunning.htm"><b>Enabling Edit-While-Running</b></a>.</p><h2>How Edit-While-Running Works</h2><p>IIS uses the Windows file change notification to determine when
the MetaBase.XML file has been saved. When IIS detects that the
metabase file has been saved, a series of checks are made as
illustrated by the steps in the following illustration. Several
possible scenarios are presented, based on the results of the steps
shown in the illustration, to demonstrate the behavior of
edit-while-running.</p><p><img src="important.gif" alt="important"><span style="color:blue;"><b>
     Important
      </b></span>The MBSchema.XML file cannot be edited
directly by using the edit-while-running feature. Changes made to
metabase schema must be made programmatically. For information
about writing changes to metabase schema, see <a href="mb_config_extendschema.htm"><b>Extending the Metabase Schema</b></a>.</p><p><b>The Edit-While-Running Process</b></p><p><img src="mb_ewr_flowchart1.gif" alt="Describes how edit-while-running works."></p><p><b>Step 1:  IIS receives a file change notification that
MetaBase.XML has been saved.</b></p><p>IIS receives a file change notification from Windows when the
metabase file is saved. If MetaBase.XML is write-locked or
read-only when an administrator attempts to save MetaBase.XML
directly with an application such as Notepad, an error will be
generated and a file change notification will not occur.</p><p><b>Step 2:  IIS looks within MetaBase.XML for the
HistoryMajorVersionNumber value.</b></p><p>IIS reads the value of the <b>HistoryMajorVersionNumber</b>
property within the MetaBase.XML file to determine the major
version number.</p><p><b>Step 3:  IIS looks within the history folder for the
corresponding history file.</b></p><p>The corresponding history file is the file that is named with
the highest minor version number with the same <b>
HistoryMajorVersionNumber</b> value that was found in MetaBase.XML
in step 2.</p><p><b>Was the corresponding history file found?</b></p><p>If the corresponding history file is found, IIS proceeds to the
step 4. <u><a href="mb_scenario_ewr7.htm"><b>Edit-While-Running Scenario 7</b></a></u> illustrates what happens if the corresponding
history file is not found in the history folder during this
step.</p><p><b>Step 4:  Parse MetaBase.XML.</b></p><p>IIS parses the MetaBase.XML file to determine whether there are
fatal XML errors, such as missing XML end tags. If MetaBase.XML can
be parsed successfully, IIS proceeds to step 5. <u><a href="mb_scenario_ewr8.htm"><b>Edit-While-Running Scenario 8</b></a></u>
illustrates what happens if there are parse errors in MetaBase.XML
during this step.</p><p><b>Step 5:  Compare MetaBase.XML to the corresponding
history file.</b></p><p>IIS compares the MetaBase.XML file to the corresponding history
file of the same major version within the history folder. IIS
determines the differences between the two files.</p><ul><li>If changes were not made to MetaBase.XML, a history file is not
created and no further action is taken.</li><li>If changes were made to MetaBase.XML, IIS proceeds to step
6.</li></ul><p><b>Step 6:  Check that the level exists in the in-memory
metabase that changes were made to in MetaBase.XML.</b></p><p>IIS determines whether the level/node exists within the
in-memory metabase that changes were made to in the MetaBase.XML
file. If the level/node exists within the in-memory metabase, IIS
proceeds to step 7. <u><a href="mb_scenario_ewr5.htm"><b>Edit-While-Running Scenario 5</b></a></u> illustrates what happens if
the level does not exist within the in-memory metabase.</p><p><b>Step 7:  Write the changes to the in-memory metabase
through Admin Base Objects.</b></p><p>The changes are written to the in-memory metabase through Admin
Base Objects.</p><p><img src="important.gif" alt="important"><span style="color:blue;"><b>
     Important
      </b></span>A change that was made in MetaBase.XML
might not be sent to the in-memory metabase for the following
reasons:</p><ul><li>The change violates metabase schema-for example, a property
name is misspelled.</li><li>A node or property within the in-memory metabase is
write-locked by someone making a simultaneous programmatic change
to the same metabase node or property. </li></ul><p>In either case, an error or warning is sent to the event log and
the change might not be written to the in-memory metabase or to the
history file. For more information about simultaneous updates, see
Simultaneous Updates below.</p><p><b>Step 8:  IIS creates a new history file that contains
the contents of the corresponding history file and the changes that
were written to the in-memory metabase in step 7.</b></p><p>A history file is created in the history folder. This new file
includes the combination of contents of the corresponding history
file plus the changes that were written to the in-memory metabase
in step 7. The new history file is named with the major version
number that was found within the MetaBase.XML file (the value of
the <b>HistoryMajorVersionNumber</b> property that was determined
in step 2) and the next highest minor version number. IIS looks
within the history folder to find the highest minor version number
that was used for the same major version number, and uses the next
highest minor version number to name the new history file. 
This naming convention permits succeeding edits to the same major
version of the file to work correctly as outlined in <u><a href="mb_scenario_ewr1.htm"><b>Edit-While-Running Scenario 1</b></a></u>
and <u><a href="mb_scenario_ewr3.htm"><b>Edit-While-Running Scenario 3</b></a></u>.</p><h3>Simultaneous Updates</h3><p>IIS supports simultaneous updates between programmatic
interfaces such as ADSI and WMI. However, under some circumstances,
errors can occur as described in step 7 above. The rule is that the
last write always wins. <u><a href="mb_scenario_ewr5.htm"><b>Edit-While-Running Scenario 5</b></a></u> illustrates how IIS behaves
when an administrator programmatically deletes a site within the
in-memory metabase and another administrator attempts to save
changes to the same site by editing the MetaBase.XML file
directly.</p><p>IIS also supports simultaneous updates between the programmatic
interfaces and one administrator directly editing the MetaBase.XML
file. However, simultaneous writes to the same metabase node or
property can result in an error condition.</p><p><u><a href="mb_scenario_ewr6.htm"><b>Edit-While-Running Scenario 6</b></a></u> illustrates why edit-while-running does not support
multiple administrators simultaneously editing the MetaBase.XML
file directly.</p><div class="search-terms">phrase 1, phrase 2, phrase 3</div>
<hr class="iis" size="1">
<p align="center"><i><a href="/iishelp/common/colegal.htm">© 1997-2001 Microsoft Corporation. All rights reserved.</a></i></p>
</body>
</html>
