<html xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:myScript="http://iisue">
<head>
<META http-equiv="Content-Type" content="text/html; charset=UTF-16">
<meta http-equiv="Content-Type" content="text/html; charset=Windows-1252">
<meta http-equiv="PICS-Label" content="(PICS-1.1 &quot;<http://www.rsac.org/ratingsv01.html>&quot; l comment &quot;RSACi North America Server&quot; by &quot;inet@microsoft.com <mailto:inet@microsoft.com>&quot; r (n 0 s 0 v 0 l 0))">
<meta name="MS.LOCALE" content="EN-US">
<meta name="MS-IT-LOC" content="Internet Information Services">
<meta name="MS-HAID" content="Remote_Data_Binding_with_Remote_Data_Service">
<meta name="description" content="Internet Information Services reference information">
<title>Remote Data Binding with Remote Data Service</title><SCRIPT LANGUAGE="JScript" SRC="iishelp.js"></SCRIPT></head>
<body>
<p style="color:red">[This is preliminary documentation and subject to change]</p>
<h1>Remote Data Binding with Remote Data Service</h1><p>If your Web application provides clients with the ability to
access data, you can distribute the processing of that data between
the client and the server with Remote Data Service (RDS).
Client-side RDS components send queries to the Web server. The
server-side RDS components process these requests and send them to
the Database Management System (DBMS) by use of a business object.
The DBMS responds to the request, sending back the data to the Web
server. The RDS components on the Web server transform that data
into an ADO <b>Recordset</b> object. The data is parsed for
transport to the client and sent back across the network to the
client computer where it may be displayed in data-aware controls,
such as a text or combo box.</p><p>The two main objects that you will use to accomplish remote data
binding are <b>RDS.DataControl</b> and <b>RDS.DataFactory</b>.
First, create a copy of the <b>RDS.DataControl</b> object on the
client computer by inserting an object tag in an HTML page. For
example:</p><pre><code>&lt;OBJECT CLASS &gt;
   &lt;PARAM NAME="SQL" VALUE="SELECT Author, ID FROM Authors"&gt;
   &lt;PARAM NAME="CONNECT" VALUE="DSN=Pubs;"&gt;
   &lt;PARAM NAME="SERVER" VALUE=http://Bookweb/&gt;
&lt;/OBJECT&gt;
</code></pre><p>The preceding object tag creates an instance of the <b>
RDS.DataControl</b> object and sets the SQL, Connect, and Server
parameters for it. If you add this tag to an HTML page, you could
then bind the data control object to multiple data-aware controls
on the HTML page. For example, the following HTML tags display an
HTML table that is bound to the above <b>RDS.DataControl</b>
object.</p><pre><code>&lt;TABLE id=Tasks DataSrc=#RDSDC1 WIDTH=100% BORDER=1 style="display: none"&gt;
&lt;THEAD ALIGN=left&gt;
    &lt;TR&gt;
        &lt;TH&gt;&lt;em&gt;ID&lt;/TH&gt; 
        &lt;TH&gt;&lt;em&gt;Author&lt;/TH&gt; 
&lt;/TR&gt;
&lt;/THEAD&gt;
    &lt;TR&gt;
        &lt;TD&gt;&lt;DIV DATAFLD=ID&gt;&lt;/DIV&gt;&lt;/TD&gt;
        &lt;TD&gt;&lt;DIV DATAFLD=Author&gt;&lt;/DIV&gt;&lt;/TD&gt;
&lt;/TR&gt;
&lt;/TABLE&gt;
</code></pre><p>The object on the server that communicates with the <b>
RDS.DataControl</b> object is either the <b>RDS.DataFactory</b>, or
a business component. You can instantiate the <b>
RDS.DataFactory</b> object by first creating a <b>RDS.DataSpace</b>
object on the client, which then creates an instance of the <b>
DataFactory</b> object on the server with the <b>CreateObject</b>
method. The following example script demonstrates this process.</p><p>If your data access needs cannot be served by the <b>
RDS.DataFactory</b> object, you can either a create a custom
business component to communicate with the client, or you can use
ADO directly from your ASP script to retrieve the data. In the
following example, the custom business component, Inventory,
exposes a method called <b>getQuantityonHand</b>. The <b>
RDS.DataControl</b> object creates an instance of <b>Inventory</b>
on the server, and then calls the <b>getQuantityonHand</b> method
to retrieve records.</p><pre><code>&lt;HTML&gt;
&lt;HEAD&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;!-- RDS.DataControl --&gt; 
&lt;OBJECT class ID=ADC1&gt;&lt;/OBJECT&gt;
&lt;!-- RDS.DataSpace --&gt;
&lt;OBJECT  WIDTH=1 HEIGHT=1 CLASS&gt; 
&lt;/OBJECT&gt;

&lt;SCRIPT LANGUAGE="VBScript"&gt;
  Option Explicit
  Sub GetRecords() 
  Dim objInventory, myRS 
  Set objInventory =
  ADS1.CreateObject("Company.Inventory", _
  "http://&lt;%=Request.ServerVariables("SERVER_NAME")%&gt;") 
  ' Inventory exposes a method called 
  ' getQuantityonHand that takes connection string and SQL parameters. 
  Set myRS = objInventory.getQuantityonHand _
  ("DSN=pubs;UID=sa;PWD=permission;","Select Quantity From Inventory") 
  ' Assign the returned recordset to SourceRecordset. 
  ADC1.SourceRecordset = myRS
  End Sub
&lt;/SCRIPT&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</code></pre><p>The same issues that are described in <b>Component Design
Guidelines</b>, in the IIS documentation in the Platform SDK, apply
to any custom data business components you create to communicate
with <b>RDS.DataControl</b>. For example, you should make sure that
the component supports either the Apartment or Both threading
model.</p><p><img src="note.gif" alt="note"><b>
      Note
      </b>Remote Data Service (RDS) replaces the Advanced
Data Connector (ADC), which is now considered obsolete. In
particular, the ADC remoting functionality (the ability to
manipulate and modify sets of records on the client) has been
integrated into ADO as RDS.</p>
<p>For more information, see 

the Remote Data Service documentation in the
Platform SDK.</p><hr class="iis" size="1">
<p align="center"><i><a href="/iishelp/common/colegal.htm">© 1997-2001 Microsoft Corporation. All rights reserved.</a></i></p>
</body>
</html>
