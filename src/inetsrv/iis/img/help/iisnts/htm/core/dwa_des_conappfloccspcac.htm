<html xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:myScript="http://iisue">
<head>
<META http-equiv="Content-Type" content="text/html; charset=UTF-16">
<meta http-equiv="Content-Type" content="text/html; charset=Windows-1252">
<meta http-equiv="PICS-Label" content="(PICS-1.1 &quot;<http://www.rsac.org/ratingsv01.html>&quot; l comment &quot;RSACi North America Server&quot; by &quot;inet@microsoft.com <mailto:inet@microsoft.com>&quot; r (n 0 s 0 v 0 l 0))">
<meta name="MS.LOCALE" content="EN-US">
<meta name="MS-IT-LOC" content="Internet Information Services">
<meta name="MS-HAID" content="Caching_Data">
<meta name="description" content="Internet Information Services reference information">
<title>Caching Data</title><SCRIPT LANGUAGE="JScript" SRC="iishelp.js"></SCRIPT></head>
<body>
<p style="color:red">[This is preliminary documentation and subject to change]</p>
<h3>Caching Data</h3><p>When clients access your ASP page, there are basically two ways
to provide them with the information they need:</p><ul><li>Your ASP page can either obtain information from server
resources, such as from data that has been persisted to a database,
or</li><li>Your ASP page can obtain information from within the
application.</li></ul><p>Retrieving data from a resource outside the application will
require more processing steps, and will therefore require more time
than generating the data from within the application space.</p><p>If the data you are going to send to the browser has already
been prepared by a previous request, your application will be able
to retrieve that data faster if you store it in a cache. This form
of caching is called <i>output caching</i>. Output caching is
particularly suitable when you expect to return the same data in
the same format for many different requests. For example, one
common task for developing an input form is to gather persisted
data as members of a drop-down list box. This is preferable to
writing the entries directly into the HTML page, because updates to
the persisted data will automatically be reflected in the form.</p><p>The following script is an example of output caching. In this
example, the <b>getSportsListBox</b> function creates a list box
from persisted data. The list box is added to the application space
so that clients can access it more quickly than they could if they
populated the list box on an individual basis. The example assumes
that a Data Source Name (DSN) called "Sports" is defined on the
server.</p><pre><code>&lt;%@ LANGUAGE=JavaScript %&gt;&lt;HTML&gt;&lt;BODY&gt;
&lt;FORM METHOD=post&gt;

What is your favorite sport? &lt;%= getSportsListBox() %&gt;
&lt;P&gt;

&lt;INPUT TYPE=submit&gt;
&lt;/FORM&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;

&lt;%

function getSportsListBox()
{
  SportsListBox = Application("SportsListBox")
  If (SportsListBox != null) return SportsListBox;
  crlf = String.fromCharCode(13, 10)
  SportsListBox = "&lt;select name=Sports&gt;" + crlf;
  SQL = "SELECT SportName FROM Sports ORDER BY SportName";
  cnnSports = Server.CreateObject("ADODB.Connection");
  cnnSports.Open("Sports", "WebUser", "WebPassword");
  rstSports = cnnSports.Execute(SQL);
  fldSportName = rstSports("SportName");
  While (!rstSports.EOF)
{    SportsListBox = SportsListBox + "  &lt;option&gt;" +      fldSportName + "&lt;/option&gt;" + crlf;    rstSports.MoveNext();  }
  SportsListBox = SportsListBox + "&lt;/select&gt;"
  Application("SportsListBox") = SportsListBox
  return SportsListBox;
}
%&gt;
</code></pre><p>In some circumstances, your application will receive many
different requests for the same data, but you will need to change
the presentation of that data for each request. In that case, you
use <i>input caching</i>. With input caching you save the data, but
not the presentation of it. You accomplish this by caching the data
with a <b>Dictionary</b> object provided by VBScript, or with an
ADO recordset.</p><p>The following example demonstrates caching data by adding a
connectionless recordset to your application. ASP scripts within
the application space can then access the recordset rather than
retrieve the data from the database. The following two ASP scripts
demonstrate this technique.</p><p>Excerpt from Global.asa:</p><pre><code>&lt;OBJECT ID=rsCustomers PROG RUNAT="Server" SCOPE="Application"&gt;
&lt;/OBJECT&gt;&lt;!--METADATA TYPE="TypeLib" FILE = "C:\Program Files\Common Files\system\ado\msado15.dll"
--&gt;

&lt;%  SQL = "SELECT CompanyName, City FROM Customers"  Cnn = "DSN=AdvWorks"  rsCustomers.CursorLocation = adUseClient  rsCustomers.Open SQL, Cnn, adOpenStatic, AdLockReadOnly  rsCustomers.ActiveConnection = Nothing
  Set myCustomers = Application("rsCustomers").Clone  Set CompanyName = myCustomers("CompanyName")  Set City        = myCustomers("City")
  Do Until myCustomers.EOF%&gt;&lt;B&gt;&lt;%= CompanyName %&gt;&lt;/B&gt; is located in &lt;B&gt;&lt;%= City %&gt;&lt;/B&gt;.&lt;P&gt;
&lt;%
    myCustomers.MoveNext
  Loop
%&gt;
</code></pre><p>The application's Global.asa file creates the recordset and adds
it to the application space. The ASP script then populates the
recordset and makes it connectionless by setting the <b>
ActiveConnection</b> property to Nothing. The ASP script then
clones this recordset and iterates through its values, which is
much faster than accessing the database itself. This technique is
appropriate only if you know that the data that will be used to
populate the recordset is relatively stable.</p><hr class="iis" size="1">
<p align="center"><i><a href="/iishelp/common/colegal.htm">© 1997-2001 Microsoft Corporation. All rights reserved.</a></i></p>
</body>
</html>
