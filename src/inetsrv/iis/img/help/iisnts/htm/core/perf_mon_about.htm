<html xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:myScript="http://iisue">
<head>
<META http-equiv="Content-Type" content="text/html; charset=UTF-16">
<meta http-equiv="Content-Type" content="text/html; charset=Windows-1252">
<meta http-equiv="PICS-Label" content="(PICS-1.1 &quot;<http://www.rsac.org/ratingsv01.html>&quot; l comment &quot;RSACi North America Server&quot; by &quot;inet@microsoft.com <mailto:inet@microsoft.com>&quot; r (n 0 s 0 v 0 l 0))">
<meta name="MS.LOCALE" content="EN-US">
<meta name="MS-IT-LOC" content="Internet Information Services">
<meta name="MS-HAID" content="About_Performance_Monitoring">
<meta name="description" content="This topic describes how to monitor the performance of your IIS Web server. This topic also describes the concepts of response time and resource utilization, as well as how to troubleshoot performance bottlenecks. ">
<title>About Performance Monitoring</title><SCRIPT LANGUAGE="JScript" SRC="iishelp.js"></SCRIPT></head>
<body>
<p style="color:red">[This is preliminary documentation and subject to change]</p>
<h1>About Performance Monitoring</h1><p>Performance monitoring is the process of capturing and analyzing
the performance data that applications, services, and drivers
provide to determine system bottlenecks and fine-tune system and
application performance. You can monitor performance by writing a
program that calls the Performance Monitor registry interface or
the Performance Data Helper (PDH) interface, or by using
applications provided with Windows Whistler. The method you
choose will typically depend on how much data you want to monitor
and what kind of analysis you want to perform on the data.</p><p>Once you have configured your IIS server, you can review the
design by tracking system performance. You can use the System
Monitor tool and the Performance Logs and Alerts tool, which ship
with Windows Whistler, to log actual workload statistics for any
system objects you want to review. Then you can analyze the logging
data to determine if configuration adjustments are required to
ensure that messages and alerts are processed efficiently.</p><p>You can customize the logging process to track different types
of information. You choose the system objects you want to monitor
and then set counters to track their performance. To fine-tune the
tracking and increase administrator response time to events, you
can set the Performance Logs and Alerts tool to generate an alert
whenever a counter exceeds or drops below a measurement you
specify. Once the data is generated, you can export it to
spreadsheets or databases for further review and analysis.</p><div><ul><li><a href="#procbottles"><b>Troubleshooting Performance
Bottlenecks</b></a></li><li><a href="#response"><b>Response Time and Resource
Utilization</b></a></li></ul></div><h2><a name="procbottles">Troubleshooting
Performance Bottlenecks</a></h2><p>A processor bottleneck develops when threads of a process
require more processor cycles than are available. Long processor
queues can build up and system response suffers. The two most
common causes of processor bottlenecks are CPU-bound programs and
drivers or subsystem components (typically disk or network
components) that generate excessive interrupts.</p><p>Analysis of your monitoring data may reveal problems such as
excessive demand on certain resources resulting in bottlenecks.
Demand may become extreme enough to cause resource bottlenecks for
the following reasons:</p><ul><li>Resources are insufficient and additional or upgraded
components are required.</li><li>Resources are not sharing workloads evenly and need to be
balanced.</li><li>A resource is malfunctioning and needs to be replaced.</li><li>A program is monopolizing a particular resource; this may
require substituting another program, having a developer rewrite
the program, adding or upgrading resources, or running the program
during periods of low demand.</li><li>A resource is incorrectly configured and configuration settings
should be changed.</li></ul><p>To determine whether a processor bottleneck exists due to high
levels of demand for processor time and high CPU percentage, check
the value of the System\ Processor Queue Length counter. A queue of
two or more items indicates a bottleneck. If more than a few
program processes are contending for most of the processor's time,
installing a faster processor will improve throughput. An
additional processor can help if you are running multithreaded
processes, but be aware that scaling to additional processors is
dependent on application design and may have limited benefits.</p><p>To determine whether interrupt activity is causing a bottleneck,
watch the values of the Processor\ Interrupts/sec counter, which
measures the rate of service requests from input/output (I/O)
devices. If this counter value increases dramatically without a
corresponding increase in system activity, it can indicate a
hardware problem.</p><p>You can also monitor Processor\ % Interrupt Time for an
indirect indicator of the activity of disk drivers, network
adapters, and other devices that generate interrupts.</p><p><img src="note.gif" alt="note"><b>
      Note
      </b>The following counters will also help you identify
bottlenecks:</p>
<table width="" height=""><tr><th width="" height="" colspan="1" rowspan="1">Where</th><th width="" height="" colspan="1" rowspan="1">Counters</th></tr><tr><td width="" height="" colspan="1" rowspan="1">In memory resources:</td><td width="" height="" colspan="1" rowspan="1">Memory\Available Bytes<br>
 Memory\Pages/sec <br>
 Memory\Pool Nonpaged Bytes<br>
 Memory\Pool Paged Bytes</td></tr><tr><td width="" height="" colspan="1" rowspan="1">In disk resources:</td><td width="" height="" colspan="1" rowspan="1">PhysicalDisk\ % Disk Time and % Idle Time<br>
 PhysicalDisk\ Disk Reads/sec and Disk Writes/sec<br>
 PhysicalDisk\ Avg. Disk Queue Length <br>
 LogicalDisk\ % Free Space <p>Note  Be sure to monitor memory counters to determine
whether excessive paging is putting a strain on the disk.</p></td></tr><tr><td width="" height="" colspan="1" rowspan="1">In processor resources:</td><td width="" height="" colspan="1" rowspan="1">Processor\ Interrupts/sec <br>
 Processor\ % Processor Time <br>
 Process(inetinfo)\ % Processor Time <br>
 Process(w3svc)\ % Processor Time<br>
 System\Context Switches/sec<br>
 System\ Processor Queue Length </td></tr><tr><td width="" height="" colspan="1" rowspan="1">In network resources:</td><td width="" height="" colspan="1" rowspan="1"><p>Network Interface\ Bytes Total/sec<br>
 Bytes Sent/sec<br>
 Bytes Received/sec</p><p>Segments Sent/sec<br>
 Frames Sent/sec<br>
 Frames Received/sec<br></p><p>Server\ Bytes Total/sec<br>
 Bytes Received/sec<br>
 Bytes Sent/sec</p></td></tr></table><p>For more information on counters related to IIS, performance,
and hardware performance, see the <a href="ref_we_counters.htm"><b>Counters Reference</b></a> and <a href="perf_mon_hardware.htm"><b>Measuring Hardware Performance</b></a>.</p><h2><a name="response">Response Time and Resource
Utilization</a></h2><p>Response time is the time (often an average) that elapses
between the issue of a request and the return of the data requested
(or notification of inability to provide it). Response time is a
measure of your server and Web site performance. When your server
is under load, requests may take longer to complete than if the
server were unloaded. For user requests, this can result in
increased response time for clients. If the server is under an
excessive load, users may perceive the server as slow or
unresponsive.</p><p>The ability for IIS to handle heavy loads and maintain good
response time is primarily dependent on the performance and
scalability of your applications. Factors like network latency
and database processing also affect response time, but those
factors may be out of your control. You can improve response time
through better application design and by using some of the IIS
features designed to manage your server resources so heavy loads do
not cause bottlenecks or overload the Web service. By monitoring
your server performance, you can determine if poor response time is
actually a symptom of a bigger problem on the server side (for
example a poorly-designed application, poor resource utilization,
or improper cache settings) or if the problem is network latency.
Before making any changes to your system, use the System Monitor
tool to establish a performance baseline about your system and to
monitor memory, CPU utilization, and disk space to make certain
your system has enough of these resources. You can also use System
Monitor to see how often your system reads from disk. If your
system is accessing the disk often, see <a href="perf_tune_disk.htm"><b>Disk Optimization</b></a> for ways to
decrease hard-disk bottlenecks. For more information on monitoring
your hardware, see <a href="perf_mon_hardware.htm"><b>Measuring Hardware Performance</b></a>. For more information on the System
Monitor tool, see <a href="perf_mon_tools.htm"><b>Tools Used to Monitor Performance</b></a>.</p><p>If, after monitoring your hardware, you determine that your
system has enough resources, monitor and tune your applications.
For more information, see <a href="perf_mon_apps.htm"><b>Monitoring Your Web Applications</b></a>. If you need to redesign an
application to improve response time, consider replacing Visual
Basic applications with C or C++ applications and test your
applications under heavy loads (twice the expected load) to see how
they perform. You can load test and measure response time with
Microsoft's Web Application Stress Tool (WAST) and the Application
Center Test (ACT) tool. For more information, see <a href="perf_mon_tools.htm"><b>Tools Used to Monitor Performance</b></a>.</p><p>If, after monitoring your hardware, you determine that system
resources are causing problems consider adding resources and
enabling the following features to help control resources. Note
that most of these features require IIS to be in dedicated
application mode:</p><ul><li><a href="ca_apppoolque.htm"><b>Application Pool Queue Length Limits</b></a>: Prevents too many requests from queuing up and
overloading the system. </li><li><a href="ca_cpuaccount.htm"><b>CPU Accounting</b></a>: Includes
several features that control system resources used by a process or
group of processes. </li><li><a href="perf_net_throttlebw.htm"><b>Throttling Bandwidth</b></a>:
Controls the maximum amount of bandwidth dedicated to Internet
traffic on a server.</li><li><a href="ca_dedappmode.htm"><b>Dedicated Application Mode</b></a>:
Forces all application code to run in an isolated environment. This
design removes some of the existing bottlenecks and points of
contention and cuts down on the need to restart your server.</li><li><a href="ca_processrecycling.htm"><b>Process Recycling</b></a>: Allows
you to configure IIS to periodically restart worker processes in an
application pool for better process management.</li><li><a href="ca_webgardens.htm"><b>Web Gardens</b></a>: Creates an
application pool that has multiple worker processes serving the
requests routed to that pool, which reduces lock contention.</li></ul><hr class="iis" size="1">
<p align="center"><i><a href="/iishelp/common/colegal.htm">© 1997-2001 Microsoft Corporation. All rights reserved.</a></i></p>
</body>
</html>
