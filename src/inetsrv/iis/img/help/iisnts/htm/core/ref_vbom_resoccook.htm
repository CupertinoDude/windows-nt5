<html xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:myScript="http://iisue">
<head>
<META http-equiv="Content-Type" content="text/html; charset=UTF-16">
<meta http-equiv="Content-Type" content="text/html; charset=Windows-1252">
<meta http-equiv="PICS-Label" content="(PICS-1.1 &quot;<http://www.rsac.org/ratingsv01.html>&quot; l comment &quot;RSACi North America Server&quot; by &quot;inet@microsoft.com <mailto:inet@microsoft.com>&quot; r (n 0 s 0 v 0 l 0))">
<meta name="MS.LOCALE" content="EN-US">
<meta name="MS-IT-LOC" content="Internet Information Services">
<meta name="MS-HAID" content="Cookies">
<meta name="description" content="Internet Information Services reference information">
<title>Cookies</title><SCRIPT LANGUAGE="JScript" SRC="iishelp.js"></SCRIPT></head>
<body>
<p style="color:red">[This is preliminary documentation and subject to change]</p>
<h3>Cookies</h3><p>The <b>Cookies</b> collection sets the value of a cookie. If the
specified cookie does not exist, it is created. If the cookie
exists, it takes the new value and the old value is discarded.</p><h6>Syntax</h6><p><b>
Response.Cookies(</b><i>cookie</i><b>)</b>[<b>(</b><i>key</i><b>)</b>|<b>
.</b><i>attribute</i>] <b>=</b><i>value</i></p><p> </p><h6>Parameters</h6><dl><dt><i>cookie</i></dt><dd>The name of the cookie.<br></dd><dt><i>key</i></dt><dd>An optional parameter. If <i>key</i> is specified, cookie is a
dictionary, and <i>key</i> is set to <i>value</i>.<br></dd><dt><i>attribute</i></dt><dd>Specifies information about the cookie itself. The attribute
parameter can be one of the following. 

<table width="" height=""><tr><td width="" height="" colspan="1" rowspan="1"><b>Name</b></td><td width="" height="" colspan="1" rowspan="1"><b>Description</b></td></tr><tr><td width="" height="" colspan="1" rowspan="1">Domain</td><td width="" height="" colspan="1" rowspan="1">Write-only. If specified, the cookie is sent only to requests
to this domain.</td></tr><tr><td width="" height="" colspan="1" rowspan="1">Expires</td><td width="" height="" colspan="1" rowspan="1">Write-only. The date on which the cookie expires. This date
must be set in order for the cookie to be stored on the client's
disk after the session ends. If this attribute is not set to a date
beyond the current date, the cookie will expire when the session
ends.</td></tr><tr><td width="" height="" colspan="1" rowspan="1">HasKeys</td><td width="" height="" colspan="1" rowspan="1">Read-only. Specifies whether the cookie contains keys.</td></tr><tr><td width="" height="" colspan="1" rowspan="1">Path</td><td width="" height="" colspan="1" rowspan="1">Write-only. If specified, the cookie is sent only to requests
to this path. If this attribute is not set, the application path is
used.</td></tr><tr><td width="" height="" colspan="1" rowspan="1">Secure</td><td width="" height="" colspan="1" rowspan="1">Write-only. Specifies whether the cookie is secure.</td></tr></table></dd><dt><i>Value</i></dt><dd>Specifies the value to assign to <i>key</i> or <i>
attribute</i>.</dd></dl><h6>Remarks</h6><p>If a cookie with a key is created, as in the following
script,</p><pre><code>&lt;% 
  Response.Cookies("mycookie")("type1") = "sugar"
  Response.Cookies("mycookie")("type2") = "ginger snap"
%&gt; 
</code></pre><p>this header is sent:</p><pre><code>Set-Cookie:MYCOOKIE=TYPE1=sugar&amp;TYPE2=ginger+snap
</code></pre><p>A subsequent assignment to <code>myCookie</code> without
specifying a key, would destroy <code>type1</code> and <code>
type2</code>. This is shown in the following example.</p><pre><code>&lt;% Response.Cookies("myCookie") = "chocolate chip" %&gt; 
</code></pre><p>In the preceding example, the keys <code>type1</code> and <code>
type2</code> are destroyed and their values are discarded. The
<code>myCookie</code> cookie now has the value <code>chocolate
chip</code>.</p><p>Conversely, if you call a cookie with a key, it destroys any
non-key values the cookie contained. For example, if after the
preceding code you call <b>Response.Cookies</b> with the
following</p><pre><code>&lt;% Response.Cookies("myCookie")("newType") = "peanut butter" %&gt; 
</code></pre><p>The value <code>chocolate chip</code> is discarded and <code>
newType</code> would be set to <code>peanut butter</code>.</p><p>To determine whether a cookie has keys, use the following
syntax.</p><pre><code>&lt;%= Response.Cookies("myCookie").HasKeys %&gt; 
</code></pre><p>If <code>myCookie</code> is a cookie dictionary, the preceding
value is TRUE. Otherwise, it is FALSE.</p><p>You can use an iterator to set cookie attributes. For example,
to set all of the cookies to expire on a particular date, use the
following syntax.</p><pre><code>&lt;% 
  For Each cookie in Response.Cookies
    Response.Cookie(cookie).Expires = #July 4, 1997#
  Next
%&gt; 
</code></pre><p>You can also iterate through the values of all the cookies in a
collection, or all the keys in a cookie. However, if you try to
iterate through the values for a cookie that does not have keys,
nothing will be returned. To avoid this, you can first use the <b>
.HasKeys</b> syntax to check whether a cookie has any keys. This is
demonstrated in the following example.</p><pre><code>&lt;% 
  If Not cookie.HasKeys Then
    'Set the value of the cookie. 
    Response.Cookies(cookie) = ""
  Else
    'Set the value for each key in the cookie collection.
    For Each key in Response.Cookies(cookie)
      Response.Cookies(cookie)(key) = ""
    Next
%&gt; 
</code></pre><h6>Example</h6><p>The following examples demonstrate how you can set a value for a
cookie and assign values to its attributes.</p><pre><code>&lt;%
  Response.Cookies("Type") = "Chocolate Chip"
  Response.Cookies("Type").Expires = "July 31, 2001"
  Response.Cookies("Type").Path = "/"
%&gt;
</code></pre><h6>Applies To</h6><p><a href="ref_vbom_reso.htm"><b>Response Object</b></a></p><h6>See Also</h6><p><a href="ref_vbom_reqoccookie.htm"><b>Cookies</b></a></p><hr class="iis" size="1">
<p align="center"><i><a href="/iishelp/common/colegal.htm">© 1997-2001 Microsoft Corporation. All rights reserved.</a></i></p>
</body>
</html>
