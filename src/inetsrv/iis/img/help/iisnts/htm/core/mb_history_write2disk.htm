<html xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:myScript="http://iisue">
<head>
<META http-equiv="Content-Type" content="text/html; charset=UTF-16">
<meta http-equiv="Content-Type" content="text/html; charset=Windows-1252">
<meta http-equiv="PICS-Label" content="(PICS-1.1 &quot;<http://www.rsac.org/ratingsv01.html>&quot; l comment &quot;RSACi North America Server&quot; by &quot;inet@microsoft.com <mailto:inet@microsoft.com>&quot; r (n 0 s 0 v 0 l 0))">
<meta name="MS.LOCALE" content="EN-US">
<meta name="MS-IT-LOC" content="Internet Information Services">
<meta name="MS-HAID" content="Writing_the_Metabase_to_Disk">
<meta name="description" content="Describes how the In-Memory metabase is written to disk.">
<title>Writing the Metabase to Disk</title><SCRIPT LANGUAGE="JScript" SRC="iishelp.js"></SCRIPT></head>
<body>
<p style="color:red">[This is preliminary documentation and subject to change]</p>
<h1>Writing the Metabase to Disk</h1><p>The metabase configuration is written to disk either when the
MetaBase.xml file is edited directly using a text editor and
manually saved to disk or when the in-memory metabase is saved to
disk.</p><p><img src="important.gif" alt="important"><span style="color:blue;"><b>
     Important
      </b></span>The MetaBase.xml file can be edited and
saved to disk only when <a href="mb_ewr_ewr.htm"><b>Editing the MetaBase.XML File While IIS Is Running</b></a> is enabled or when the IIS service is
stopped before the MetaBase.xml file is edited and
saved.</p><p>Further, the in-memory metabase is written to disk only under
the following circumstances:</p><ul><li>When the IIS service is stopped and there are changes pending
in the in-memory metabase.</li><li>After a predetermined number of changes have been made to the
in-memory metabase within a 5-minute interval or, regardless
of whether changes have been made, after a maximum interval of
every 4 hours.</li><li>Programmatically,<span></span>
as when using a resource such as ADSI.</li></ul><h2>How the In-Memory Metabase Is Written to Disk</h2><p>The following illustration and discussion describe how the
in-memory metabase configuration is written to disk. The
verification checks can influence how IIS saves the in-memory
metabase to disk, as illustrated by the possible scenarios shown in
the illustration. The in-memory schema is written to disk in a
similar way and will be discussed later in this topic.</p><h3>Writing the In-Memory Metabase Configuration to Disk</h3><img src="mb_history_Write2Disk.gif" alt="Describes how the In-Memory metabase is written to disk."><p><b>Step 1:  Are there changes pending in the in-memory
metabase?</b><br>
When a write-to-disk event occurs, IIS first checks for pending
changes in the in-memory metabase. Changes that are written to the
MetaBase.xml file while edit-while-running is enabled are counted
as pending changes in the in-memory metabase. If there are no
pending changes within the in-memory metabase, no further action is
taken and the in-memory metabase is written to disk. Otherwise, IIS
proceeds to step 2.</p><p><b>Step 2:  IIS locks the in-memory metabase to prevent
external writes.</b><br>
The in-memory metabase is locked to prevent writes while the
in-memory metabase is written to disk. This ensures that a valid
copy of the in-memory metabase is used.</p><p><b>Step 3:  IIS determines the major version
number.</b></p><ol><li>IIS reads the value of the <b>HistoryMajorVersionNumber</b>
property within the in-memory metabase and increments the value by
1.</li><li>IIS then checks to determine whether a file within the history
folder is named with the same major version number. If a file using
the same major version number exists in the history folder, IIS
checks the history folder to determine whether the next highest
version number is available. This process is repeated until an
available major version number is found.</li></ol><p>This method of determining the major version number prevents the
possibility of overwriting a file within the history folder.
Although unlikely under normal circumstances, the possibility
exists that a file within the history folder could have a
nonsequential version number for the following reasons:</p><ul><li>An administrator changes the value of the <b>
HistoryMajorVersionNumber</b> property, which causes the value of
the <b>HistoryMajorVersionNumber</b> property to roll over to 1 or
to the lowest available major version number. For more information
about this scenario, see <a href="MB_Scenario_History3.htm"><b>Metabase History Scenario 3</b></a>.</li><li>An administrator copies an old history file into the history
folder. For more information about this scenario, see <a href="MB_Scenario_History4.htm"><b>Metabase History Scenario 4</b></a>.</li></ul><p><b>Step 4:  IIS creates a temporary file containing the
in-memory metabase configuration.</b><br>
When the major version number is determined, a temporary file named
MetaBase.bak is created within the same folder as MetaBase.xml. The
major version number that was determined in step 3 is written
within the temporary file.</p><p><b>Step 5:  IIS unlocks the in-memory metabase to allow
writes.<br></b>After the temporary file is created, the in-memory metabase is
unlocked to allow writes through Admin Base Objects.</p><p><b>Step 6:  IIS copies the temporary file to the history
folder and renames the history file using the major and minor
version numbers.</b><br>
The temporary file is copied to the history folder and renamed in
the following format, where <i>HistoryMajorVersionNumber</i> is the
major version number that was determined in step 3 and the minor
version number is reset to 0:</p><p>MetaBase_<i>HistoryMajorVersionNumber</i><i>_minor version
number</i>.xml</p><p>For more information about how history files are versioned, see
<a href="mb_history_namingfiles.htm"><b>Naming the Metabase History Files</b></a>.</p><p><b>Step 7:  Is MetaBase.xml write-locked?</b><br>
The MetaBase.xml file can become write-locked by an application if
the administrator opens the MetaBase.xml file for editing and the
editing application enforces a write-lock. An application that
enforces a write-lock releases the lock when the file is
closed. However, in most circumstances, the MetaBase.xml file
is not write-locked. How IIS works when the in-memory metabase is
written to disk and the MetaBase.xml file is not write-locked is
outlined in <a href="mb_scenario_history1.htm"><b>Metabase History Scenario 1</b></a>.</p><p>If MetaBase.xml is write-locked by an application, IIS cannot
write changes to the MetaBase.xml file. Instead, a history file is
created and an error is sent to the event log as outlined in <a href="mb_scenario_history2.htm"><b>Metabase History Scenario 2</b></a>.</p><p><b>Step 8:  Is MetaBase.xml read-only?</b><br>
The administrator has full control access of the MetaBase.xml file
by default. Therefore, under most circumstances, the MetaBase.xml
file is not read-only. If MetaBase.xml is read-only when the
in-memory metabase is written to disk, IIS behaves the same as if
MetaBase.xml were write-locked, as described in step 7.</p><p><b>Step 9:  Is MetaBase.xml newer than the temporary
file?</b><br>
IIS checks to determine whether the MetaBase.xml file is newer than
the temporary file. The MetaBase.xml file can be newer than the
temporary file when the in-memory metabase is written to disk at
about the same time that an administrator saves changes to the
MetaBase.xml file when <a href="mb_ewr_ewr.htm"><b>Editing the MetaBase.XML File While IIS Is Running</b></a> is enabled.</p><p>If the MetaBase.xml file is newer than the temporary file, the
MetaBase.xml file is not overwritten with the temporary file.
Instead, an error is sent to the event log as outlined in <a href="mb_scenario_ewr4.htm"><b>Edit-While-Running Scenario 4</b></a>.</p><p><b>Step 10:  The temporary file is copied over
MetaBase.xml, and then the temporary file is deleted.</b><br>
If all verification tests pass, the MetaBase.xml file is
overwritten with the temporary file and the temporary file is
deleted.</p><p><b>Step 11:  Delete oldest history file?</b><br>
IIS checks to determine whether the number of history file pairs
contained in the history folder exceeds the value of the <a href="ref_mb_MaxHistoryFiles.htm"><b>MaxHistoryFiles</b></a> property. (A
history file pair is a MetaBase.xml and MBSchema.xml history file
versioned with the same major and minor version numbers.) If the
number of history file pairs exceed the <b>MaxHistoryFiles</b>
value, the oldest history file pair, based on the
timestamp value, is deleted.</p><h3>Writing the In-Memory Schema to Disk</h3><p>IIS can distinguish changes that were made to the in-memory
metabase schema separately from changes made to the in-memory
metabase configuration. The process of writing the in-memory
metabase schema to disk is similar to writing the in-memory
metabase configuration to disk, as follows:</p><ul><li>If there are no pending changes within the in-memory metabase
schema when a write-to-disk event occurs, the in-memory metabase
schema node is not written to disk. Instead, the MBSchema.xml file
is copied to the history folder and renamed with the same major and
minor version numbers that were used to version and name the
metabase configuration history file in step 6 above.</li><li>Otherwise, if changes were made to the in-memory metabase
schema, the following happens: 

<ul><li>The MBSchema.xml file is renamed to a temporary file.</li><li>The in-memory schema is written to MBSchema.xml.</li><li>The MBSchema_00000000h.bin file is recompiled with the contents
from the new MBSchema.xml file.</li><li>The temporary schema file is copied to the history folder and
renamed with the same major and minor version numbers that were
used in step 6 above.</li></ul></li></ul><div><p><b>Related Topics</b></p><ul><li>For more information about the edit-while-running feature, see
<a href="mb_ewr_ewr.htm"><b>Editing the MetaBase.XML File While IIS Is Running</b></a>.</li><li>For information about configuring metabase history, see <a href="mb_history_ConfigHistory.htm"><b>Configuring the Metabase History Feature</b></a>.</li><li>For information about configuring metabase rollback, see <a href="mb_rely_reliability.htm"><b>Metabase Reliability</b></a>.</li><li>For more information about the MBSchema MBSchema_00000000h.bin
file, see <a href="mb_startingiis.htm"><b>Starting IIS</b></a> and <a href="mb_stoppingiis.htm"><b>Stopping IIS</b></a>.</li></ul></div><div class="search-terms">phrase 1, phrase 2, phrase 3</div>
<hr class="iis" size="1">
<p align="center"><i><a href="/iishelp/common/colegal.htm">© 1997-2001 Microsoft Corporation. All rights reserved.</a></i></p>
</body>
</html>
