<html xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:myScript="http://iisue">
<head>
<META http-equiv="Content-Type" content="text/html; charset=UTF-16">
<meta http-equiv="Content-Type" content="text/html; charset=Windows-1252">
<meta http-equiv="PICS-Label" content="(PICS-1.1 &quot;<http://www.rsac.org/ratingsv01.html>&quot; l comment &quot;RSACi North America Server&quot; by &quot;inet@microsoft.com <mailto:inet@microsoft.com>&quot; r (n 0 s 0 v 0 l 0))">
<meta name="MS.LOCALE" content="EN-US">
<meta name="MS-IT-LOC" content="Internet Information Services">
<meta name="MS-HAID" content="Execute">
<meta name="description" content="Internet Information Services reference information">
<title>Execute</title><SCRIPT LANGUAGE="JScript" SRC="iishelp.js"></SCRIPT></head>
<body>
<p style="color:red">[This is preliminary documentation and subject to change]</p>
<h3>Execute</h3><p>The <b>Execute</b> method calls an .asp file and processes it as
if it were part of the calling ASP script. The <b>Execute</b>
method is similar to a procedure call in many programming
languages.</p><h6>Syntax</h6><p><b>Server.Execute(</b><i>Path</i><b>)</b></p><p> </p><h6>Parameters</h6><dl><dt><i>Path</i></dt><dd>A string specifying the location of the .asp file to execute.
The <i>Path</i> parameter may be for either an absolute or a
relative path. If the <i>Path</i> is absolute, it must map to an
ASP script in the same application as the calling .asp file. <i>
Path</i> can be a string variable name that is set at run-time. The
<i>Path</i> parameter must not contain a query string or IIS
returns an error.</dd></dl><h6>Remarks</h6><p>The <b>Server.Execute</b> method provides a way of dividing a
complex application into individual modules. By employing the <b>
Server.Execute</b> method, you can develop a library of .asp files
that you can call as needed. This approach is an alternative to
server-side includes. The major difference is that you can
dynamically call an .asp file with <b>Server.Execute</b>.</p><p>After IIS processes the .asp file specified in the input
parameter to <b>Server.Execute</b>, the response is returned to the
calling ASP script.</p><p>Collections and properties available to the executed .asp page
are:</p><ul><li>Application variables, even if they are set in the calling
page.</li><li>Session properties, even if they are set in the calling
page.</li><li>Server variables and properties, even if they are set in the
calling page.</li><li>Request collections and properties, even if they are set in the
calling page. This includes Form and QueryString data passed to the
calling page.</li><li>Response collections and properties. The executed .asp file may
modify HTTP headers. However, as with any .asp file, if the
executed .asp file attempts to modify HTTP headers after it sends a
response to the client, it will generate an error.</li></ul><p>If a file is included in the calling page with #include, the
executed .asp will not see it.  For example, you may have a
subroutine in a file that is included in your calling page, but the
executed .asp will not recognize the subroutine name.  You
must include the file in each executed .asp that requires the
subroutine.</p><p>If either the calling or called .asp file contains a transaction
directive, the status of the transaction will apply to the .asp
file that contains the directive. For example, if ASP1 below calls
ASP2 and the transaction is aborted while ASP2 is being processed,
ASP2's <b>OnTransactionAbort</b> (if present) will be called. After
ASP2 completes processing, ASP1's <b>OnTransactionAbort</b> (if
present) will be called.</p><pre><code>ASP1:
&lt;%@ Transaction=Required %&gt;
&lt;% 
  Server.Execute ("ASP2.asp") 
  Sub OnTransactionAbort
  Sub OnTransactionCommit
%&gt;

ASP2.asp:
&lt;%@ Transaction=Required %&gt;
&lt;%
  Sub OnTransactionAbort
  Sub OnTransactionCommit
%&gt;
</code></pre><h6>Example</h6><p>In the following example, the browser language determines which
.asp file is executed. The output from these scripts on a US system
is:</p><p>Company Name</p><p>Welcome to my website!</p><p>The output from these scripts on a German system is:</p><p>Company Name</p><p>Willkommen zu meinem website!</p><p>The output from these scripts on a Spanish system is:</p><p>Company Name</p><p>Recepción a mi website!</p><p>(Languages with multi-byte characters have not been included in
this example because CodePage incompatibilities.)</p><p><b>Welcome.asp</b></p><pre><code>&lt;HTML&gt;
&lt;BODY&gt;
&lt;H1&gt;Company Name&lt;/H1&gt;
&lt;%
  AcceptLang = Request.ServerVariables("HTTP_ACCEPT_LANGUAGE")
  Lang = Left(AcceptLang, 2)
  Server.Execute(Lang &amp; "Welcome.asp")
%&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</code></pre><p><b>enWelcome.asp</b></p><pre><code>&lt;% Response.Write "Welcome to my website!" %&gt;
</code></pre><p><b>deWelcome.asp</b></p><pre><code>&lt;% Response.Write "Willkommen zu meinem website!" %&gt;
</code></pre><p><b>esWelcome.asp</b></p><pre><code>&lt;% Response.Write "Recepción a mi website!" %&gt;
</code></pre><h6>Applies to</h6><p><a href="ref_vbom_sero.htm"><b>Server Object</b></a></p><h6>See Also</h6><p><a href="ref_vbom_seromtr.htm"><b>Transfer</b></a>, <a href="ref_vbom_obcoeota.htm"><b>OnTransactionAbort</b></a>, <a href="ref_vbom_obcoeotc.htm"><b>OnTransactionCommit</b></a></p><hr class="iis" size="1">
<p align="center"><i><a href="/iishelp/common/colegal.htm">© 1997-2001 Microsoft Corporation. All rights reserved.</a></i></p>
</body>
</html>
