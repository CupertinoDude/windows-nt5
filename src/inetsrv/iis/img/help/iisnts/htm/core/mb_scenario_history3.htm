<html xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:myScript="http://iisue">
<head>
<META http-equiv="Content-Type" content="text/html; charset=UTF-16">
<meta http-equiv="Content-Type" content="text/html; charset=Windows-1252">
<meta http-equiv="PICS-Label" content="(PICS-1.1 &quot;<http://www.rsac.org/ratingsv01.html>&quot; l comment &quot;RSACi North America Server&quot; by &quot;inet@microsoft.com <mailto:inet@microsoft.com>&quot; r (n 0 s 0 v 0 l 0))">
<meta name="MS.LOCALE" content="EN-US">
<meta name="MS-IT-LOC" content="Internet Information Services">
<meta name="MS-HAID" content="Metabase_History_Scenario_3">
<meta name="description" content="Metabase History Scenario.">
<title>Metabase History Scenario 3</title><SCRIPT LANGUAGE="JScript" SRC="iishelp.js"></SCRIPT></head>
<body>
<p style="color:red">[This is preliminary documentation and subject to change]</p>
<h1>Metabase History Scenario 3</h1><p>This scenario illustrates how the metabase history feature works
under the following conditions:</p><ul><li>The value of the <b>HistoryMajorVersionNumber</b> property
within the in-memory metabase is at the maximum value of
9999999999.</li><li>There are changes pending in the in-memory metabase and a write
to disk event occurs.</li><li>MetaBase.xml is not write-locked.</li><li>MetaBase.xml is not read-only.</li><li>MetaBase.xml is not newer than the temporary file.</li></ul><p>What you will learn:</p><ul><li>How IIS handles major version number rollover.</li></ul><p>It is unlikely that the <b>HistoryMajorVersionNumber</b>value
will ever exceed the highest possible 10-digit value (9999999999),
which is just under 10 billion. If the value of the <b>
HistoryMajorVersionNumber</b> property exceeds the maximum value,
however, the value of the <b>HistoryMajorVersionNumber</b> property
rolls over to 1 or the next available <b>
HistoryMajorVersionNumber</b> value as illustrated in this
scenario.</p><p><img src="note.gif" alt="note"><b>
      Note
      </b>The minor version number will never roll over
because the in-memory metabase is automatically written to disk
periodically, which causes the <b>HistoryMajorVersionNumber</b>
value to increment automatically and the minor version number to be
reset to zero.</p><p><b>Step 1</b>:</p><ol><li>The administrator stops the IISAdmin service.</li><li>The administrator opens MetaBase.xml using Notepad, changes the
value of the <b>HistoryMajorVersionNumber</b> property to the
maximum value of 9999999999, and saves MetaBase.xml.</li><li>The administrator restarts IIS.</li></ol><p><img src="MB_Scenario_History3step1.gif" alt="Describes step 1 of this scenario."></p><p>When IIS is restarted, the MetaBase.xml file is read into the
in-memory metabase.</p><p><b>Step 2</b>:<br>
The administrator changes the value of C (C=3) within the in-memory
metabase and writes the in-memory metabase to disk.</p><p><img src="MB_Scenario_History3step2.gif" alt="Describes step 2 of this scenario."></p><ol><li>IIS determines whether there are changes pending in the
in-memory metabase. &lt;Changes are pending.&gt;</li><li>IIS locks the in-memory metabase to prevent writes.</li><li>IIS looks within the in-memory metabase for the value of the
<b>HistoryMajorVersionNumber</b> property.</li><li>IIS then verifies whether a file within the history folder is
named with a major version number equal to the <b>
HistoryMajorVersionNumber</b> value plus 1. If a file exists in the
history folder using this calculated major version number, IIS
checks the history folder to determine whether the next higher
major version number is available. This process is repeated until
an available major version number is found. 

<p><img src="note.gif" alt="note"><b>
      Note
      </b>Because a file exists in the history folder
(in this scenario) with the major version number of 1, IIS looks
for a history file with a major version number of 2. IIS determines
that the next available major version number is 2.</p></li><li>IIS writes a temporary file with the contents of the in-memory
metabase and writes the value of the <b>
HistoryMajorVersionNumber</b> property within the temporary file
that was determined in step 4.</li><li>IIS unlocks the in-memory metabase to allow writes.</li><li>IIS copies the temporary file to the history folder and renames
the file to MetaBase_0000000002_0000000000.xml.</li><li>IIS verifies that the MetaBase.xml file is not write-locked.
&lt;Passed verification.&gt;</li><li>IIS verifies that the MetaBase.xml file is not read-only.
&lt;Passed verification.&gt;</li><li>IIS verifies that the MetaBase.xml file is not newer than the
temporary file. &lt;Passed verification.&gt;</li><li>Because the MetaBase.xml file is not write-locked, not
read-only, and is not newer than the temporary file, the temporary
file is copied over MetaBase.xml and the temporary file is
deleted.</li><li>IIS checks to determine whether the number of history file
pairs contained in the history folder exceeds the value of the <a href="ref_mb_MaxHistoryFiles.htm"><b>MaxHistoryFiles</b></a> property. (A
history file pair consists of a MetaBase.xml and MBSchema.xml
history file versioned with the same major and minor version
numbers.) If the number of history file pairs exceeds the <b>
MaxHistoryFiles</b> value, the oldest history file pair, based on
the timestamp value, is deleted.</li></ol><div class="search-terms">phrase 1, phrase 2, phrase 3</div>
<hr class="iis" size="1">
<p align="center"><i><a href="/iishelp/common/colegal.htm">© 1997-2001 Microsoft Corporation. All rights reserved.</a></i></p>
</body>
</html>
