<html xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:myScript="http://iisue">
<head>
<META http-equiv="Content-Type" content="text/html; charset=UTF-16">
<meta http-equiv="Content-Type" content="text/html; charset=Windows-1252">
<meta http-equiv="PICS-Label" content="(PICS-1.1 &quot;<http://www.rsac.org/ratingsv01.html>&quot; l comment &quot;RSACi North America Server&quot; by &quot;inet@microsoft.com <mailto:inet@microsoft.com>&quot; r (n 0 s 0 v 0 l 0))">
<meta name="MS.LOCALE" content="EN-US">
<meta name="MS-IT-LOC" content="Internet Information Services">
<meta name="MS-HAID" content="Client_Capabilities">
<meta name="description" content="Internet Information Services reference information">
<title>Client Capabilities</title><SCRIPT LANGUAGE="JScript" SRC="iishelp.js"></SCRIPT></head>
<body>
<p style="color:red">[This is preliminary documentation and subject to change]</p>
<h3>Client Capabilities</h3><p>One of the more significant design decisions you will make is
how your application will handle differing client capabilities. For
example, one of the most important issues for users is the speed of
the connection. If your application can determine this speed, it
can adjust the response to match that capacity. The only way for
your application to be aware of the current connection speed is if
the client includes this information as part of its request.</p><p>You can solve the client capabilities problem on either the
client side or server side. The client-side solution relies on <a href="dwa_tec_dhtml.htm"><b>Dynamic HTML</b></a> (DHTML) to include a
description of the client's current configuration as part of the
request, as depicted in the graphic below.</p><p><img src="browcap3.gif" alt="Browser Capabilities"></p><p>The benefits of this approach include:</p><ul><li>Reduction in roundtrips between the client and server.</li><li>Reduced load on the server.</li><li>Improved application responsiveness due to proxy server caching
technology.</li></ul><p>There are some situations where client-side scripting will not
be feasible. For example, applications that are exposed on the
Internet cannot guarantee that the client will support scripting,
which means the applications may fail for some clients. In
addition, server-side resources may not be accessible from the
client side, as the client may reside on a network that does not
allow scripting for security reasons.</p><p>The server-side approach relies on the <a href="ica_bcc.htm"><b>Browser Capabilities Component</b></a>. This component reads the User
Agent HTTP header included with the request to determine the
client's capabilities. The version of the Browser Capabilities
component that shipped with IIS 3.0 and 4.0 determined client
capabilities by looking them up in a static list. The following
graphic shows the sequence of events.</p><p><img src="browcap1.gif" alt="Browser Capabilities"></p><p>This approach presented difficulties for application designers
when the list became out of date. More importantly, this technique
did not cover configurable aspects of a client's capabilities and
did not provide a means of what was actually <i>enabled</i> at the
time the request was made.</p><p>In IIS 5.0, the Browser Capabilities component was improved to
overcome these earlier design limitations. It can now be modified
for an individual request by the client returning a cookie
describing its capabilities. In addition, if the initial request
for an .asp file does not include a cookie, you can call back to a
script that will run on the client in order to create the cookie.
The following illustration shows the sequence of events.</p><p><img src="browcap2.gif" alt="Browser Capabilities"></p><p>This improvement to the Browser Capabilities component creates
another alternative to the server-side solution. This technique
uses a special status code to call back to the client when a
request comes in that does not include a cookie. You can generate
this status code by placing a special meta tag as the first line in
your .asp file. For example:</p><pre><code>&lt;!-- METADATA TYPE="Cookie" NAME="BrowsCap" SRC="sendcook.htm" --&gt;
</code></pre><p>instructs IIS to send the special status code-an HTTP 449 status
code-to Internet Explorer 5; it then tells Internet Explorer 5 to
run the script in Sendcook.htm, which will generate a cookie
describing the client capabilities. When the server receives this
cookie, it will use it in conjunction with the Browser Capabilities
component to determine how to send the response back to the
client.</p><p><img src="important.gif" alt="important"><span style="color:blue;"><b>
     Important
      </b></span>If the METADATA meta tag exists in a file that
is requested by the client as a result of a redirection using the
<a href="ref_vbom_seromtr.htm"><b>Transfer</b></a> or <a href="ref_vbom_seromexe.htm"><b>Execute</b></a> methods, IIS
will ignore the meta tag. METADATA meta tags in the file that
actually contains the redirect, however, will be processed
normally.</p>
<p>For more details on how to use this feature, see <a href="ica_bcc_retbrowsecc.htm"><b>Retrieving Browser Capabilities from a Cookie</b></a>.</p><p>For more information on DHTML client capabilities, see the DHTML
reference information on <a href="http://www.microsoft.com/isapi/redir.dll?prd=msdn&amp;ar=home&amp;pver=6.0" target="_New"><b>MSDN Online</b></a>. For an example of the new Client
Capabilities component functionality, see the <a href="ica_bcc.htm"><b>Browser Capabilities Component</b></a> and <a href="samp_asp_introduction.htm"><b>ASP Samples</b></a>.</p><hr class="iis" size="1">
<p align="center"><i><a href="/iishelp/common/colegal.htm">© 1997-2001 Microsoft Corporation. All rights reserved.</a></i></p>
</body>
</html>
