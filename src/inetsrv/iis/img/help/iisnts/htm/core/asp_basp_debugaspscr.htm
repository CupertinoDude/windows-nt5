<html xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:myScript="http://iisue">
<head>
<META http-equiv="Content-Type" content="text/html; charset=UTF-16">
<meta http-equiv="Content-Type" content="text/html; charset=Windows-1252">
<meta http-equiv="PICS-Label" content="(PICS-1.1 &quot;<http://www.rsac.org/ratingsv01.html>&quot; l comment &quot;RSACi North America Server&quot; by &quot;inet@microsoft.com <mailto:inet@microsoft.com>&quot; r (n 0 s 0 v 0 l 0))">
<meta name="MS.LOCALE" content="EN-US">
<meta name="MS-IT-LOC" content="Internet Information Services">
<meta name="MS-HAID" content="Debugging_ASP_Scripts">
<meta name="description" content="This topic describes how to use the Microsoft Script Debugger to find and correct ASP scripting errors.">
<title>Debugging ASP Scripts</title><SCRIPT LANGUAGE="JScript" SRC="iishelp.js"></SCRIPT></head>
<body>
<p style="color:red">[This is preliminary documentation and subject to change]</p>
<h1>Debugging ASP Scripts</h1><p>Regardless of your level of experience, you will encounter
programmatic errors, or <i>bugs</i>, that will prevent your
server-side scripts from working correctly. For this reason,
debugging, the process of finding and correcting scripting errors,
is crucial for developing successful and robust ASP applications,
especially as the complexity of your application grows.</p><h2><a name="themicrosoftscriptdebuggertool">The Microsoft Script Debugger
Tool</a></h2><p>The Microsoft® Script Debugger is a powerful debugging tool
that can help you quickly locate bugs and interactively test your
server-side scripts. With Script Debugger, which also works with
Windows Internet Explorer version 3.0 or later, you
can:</p><ul><li>Run your server-side scripts one line at a time.</li><li>Open a command window to monitor the value of variables,
properties, or array elements, during the execution of your
server-side scripts.</li><li>Set pauses to suspend execution of your server-side scripts
(using either the debugger or a script command) at a particular
line of script.</li><li>Trace procedures while running your server-side script.</li></ul><p><img src="note.gif" alt="note"><b>
      Note
      </b>You can use the debugger to view scripts and locate
bugs, but not to directly edit your scripts. To fix bugs, you must
edit your script with an editing program, save your changes, and
run the script again.</p>
<h2><a name="enablingdebugging">Enabling
Debugging</a></h2><p>Before you can begin debugging your server-side scripts, you
must first configure your Web server to support ASP debugging.</p><p>After enabling Web server debugging, you can use either of the
following methods to debug your scripts:</p><ul><li>Manually open Script Debugger to debug your ASP server-side
scripts.</li><li>Use Internet Explorer to request an .asp file. If the file
contains a bug or an intentional statement to halt execution,
Script Debugger will automatically start, display your script, and
indicate the source of the error.</li></ul><h2><a name="scriptingerrors">Scripting
Errors</a></h2><p>While debugging your server-side scripts you might encounter
several types of errors. Some of these errors can cause your
scripts to execute incorrectly, halt the execution of your program,
or return incorrect results.</p><h3><a name="syntaxerrors">Syntax Errors</a></h3><p>A <i>syntax</i> error is a commonly encountered error that
results from incorrect scripting syntax. For example, a misspelled
command or an incorrect number of arguments passed to a function
generates an error. Syntax errors can prevent your script from
running.</p><h3><a name="runtimeerrors">Run-Time
Errors</a></h3><p><i>Run-time</i> errors occur after your script commences
execution and result from scripting instructions that attempt to
perform impossible actions. For example, the following script
contains a function that divides a variable by zero (an illegal
mathematical operation) and generates a run-time error:</p><pre>
&lt;SCRIPT LANGUAGE=VBScript RUNAT=SERVER&gt;
  Result = Findanswer(15)
  Document.Write ("The answer is " &amp;Result)

  Function Findanswer(x) 
  'This statement generates a run-time error.
   Findanswer = x/0      
  End Function
&lt;/SCRIPT&gt;
</pre><p>Bugs that result in run-time errors must be corrected for your
script to execute without interruption.</p><h3><a name="logicalerrors">Logical
Errors</a></h3><p>A <i>logical</i> error can be the most difficult bug to detect.
With logical errors, which are caused by typing mistakes or flaws
in programmatic logic, your script runs successfully, but yields
incorrect results. For example, a server-side script intended to
sort a list of values may return an inaccurate ordering if the
script contains a &gt; (greater than) sign for comparing values,
when it should have used a &lt; (less than) sign.</p><h2><a name="errordebuggingtechniques">Error Debugging Techniques</a></h2><p>You can use several different debugging techniques to locate the
source of bugs and to test your applications.</p><h3><a name="justintimedebugging">
Just-In-Time (JIT) Debugging</a></h3><p>When a run-time error interrupts execution of your server-side
script, the Microsoft Script Debugger automatically starts,
displays the .asp file with a statement pointer pointing to the
line that caused the error, and generates an error message. With
this type of debugging, called <i>Just-In-Time</i> (JIT)
debugging, your computer suspends further execution of the program.
You must correct the errors with an editing program and save your
changes before you can resume running the script.</p><h3><a name="breakpointdebugging">
Breakpoint Debugging</a></h3><p>When an error occurs and you cannot easily locate the source of
the error, it is sometimes useful to preset a <i>breakpoint</i>. A
breakpoint suspends execution at a specific line in your script.
You can set one or many different breakpoints before a suspect line
of script and then use the debugger to inspect the values of
variables or properties set in the script. After you correct the
error, you can clear your breakpoints so that your script can run
uninterrupted.</p><p>To set a breakpoint, open your script with Script Debugger,
select a line of script where you want to interrupt execution, and
from the <b>Debug</b> menu choose <b>Toggle Breakpoint</b>. Then
use your Web browser to request the script again. After executing
the lines of script up to the breakpoint, your computer starts the
Script Debugger, which displays the script with a statement pointer
pointing to the line where you set the breakpoint.</p><h4>The Break at Next Statement</h4><p>In certain cases, you may want to enable the Script Debugger <b>
Break at Next Statement</b> if the next statement that runs is not
in the .asp file that you are working with. For example, if you set
<b>Break at Next Statement</b> in an .asp file residing in an
application called Sales, the debugger will start when you run a
script in any file in the Sales application, or in any application
for which debugging has been enabled. For this reason, when you set
<b>Break at Next Statement</b>, you need to be aware that whatever
script statement runs next will start the debugger.</p><h3><a name="vbscriptstopstatementdebugging">VBScript Stop Statement
Debugging</a></h3><p>You can also add breakpoints to your server-side scripts written
in VBScript by inserting a <b>Stop</b> statement at a location
before a questionable section of server-side script. For example,
the following server-side script contains a <b>Stop</b> statement
that suspends execution before the script calls a custom
function:</p><pre>
&lt;% 
  intDay = Day(Now())
  lngAccount = Request.Form("AccountNumber")
  dtmExpires = Request.Form("ExpirationDate")
      
  strCustomerID  =  "RETAIL" &amp; intDay &amp; lngAccount &amp; dtmExpires

  'Set breakpoint here.
  Stop

  'Call registration component.             
  RegisterUser(strCustomerID)
%&gt;
</pre><p>When you request this script, the debugger starts and
automatically displays the .asp file with the statement pointer
indicating the location of the <b>Stop</b> statement. At this point
you could choose to inspect the values assigned to variables before
passing those variables to the component.</p><p><img src="important.gif" alt="important"><span style="color:blue;"><b>
     Important
      </b></span>Remember to remove <b>Stop</b> statements from
production .asp files.</p>
<h3><a name="jscriptdebuggerstatementdebugging">JScript Debugger Statement
Debugging</a></h3><p>To add breakpoints to your server-side scripts written in
JScript, insert a <b>debugger</b> statement before a suspect line
of script. For example, the following script includes a <b>
debugger</b> statement that interrupts execution and automatically
starts Script Debugger each time the script loops through a new
value.</p><pre>
&lt;%@ LANGUAGE=JScript %&gt;
&lt;%
  for (var count = 1; count &lt;= 10; count++)
  {        
    var eventest = count%2
    //Set breakpoint so that user can step through execution of script.
    debugger                            
    if (eventest == 0)
          Response.Write("Even value is " + count + "&lt;br&gt;")
   }
%&gt;
</pre><p>Remember to remove <b>debugger</b> statements from production
.asp files.</p><p><img src="note.gif" alt="note"><b>
      Note
      </b>Do not confuse the <b>debugger</b> statement with
the JScript <b>break</b> statement. The <b>break</b> statement
exits a currently running loop during execution and does not
activate the Microsoft Script Debugger, nor pause execution.</p>
<h2><a name="tipsfordebuggingscripts">
Tips for Debugging Scripts</a></h2><p>Aside from Script Debugger, a good set of debugging tips can
greatly reduce the amount of time you spend investigating the
source of scripting errors. Although most bugs result from obvious
sources, misspelled commands or missing variables, certain types of
logical and execution errors can be hard to find.</p>

For more information about Microsoft Script Debugger, see the <a href="http://www.microsoft.com/isapi/redir.dll?prd=msdn&amp;pver=6.0&amp;ar=scripting" target="_New"><b>Microsoft Scripting Technologies</b></a> Web site.
<hr class="iis" size="1">
<p align="center"><i><a href="/iishelp/common/colegal.htm">© 1997-2001 Microsoft Corporation. All rights reserved.</a></i></p>
</body>
</html>
