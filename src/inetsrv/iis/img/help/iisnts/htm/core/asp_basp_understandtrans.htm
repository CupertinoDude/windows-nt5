<html xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:myScript="http://iisue">
<head>
<META http-equiv="Content-Type" content="text/html; charset=UTF-16">
<meta http-equiv="Content-Type" content="text/html; charset=Windows-1252">
<meta http-equiv="PICS-Label" content="(PICS-1.1 &quot;<http://www.rsac.org/ratingsv01.html>&quot; l comment &quot;RSACi North America Server&quot; by &quot;inet@microsoft.com <mailto:inet@microsoft.com>&quot; r (n 0 s 0 v 0 l 0))">
<meta name="MS.LOCALE" content="EN-US">
<meta name="MS-IT-LOC" content="Internet Information Services">
<meta name="MS-HAID" content="Understanding_Transactions">
<meta name="description" content="Explains how to run scripts within a transaction, so that if any portion of the script fails, the entire transaction is aborted.">
<title>Understanding Transactions</title><SCRIPT LANGUAGE="JScript" SRC="iishelp.js"></SCRIPT></head>
<body>
<p style="color:red">[This is preliminary documentation and subject to change]</p>
<h1>Understanding Transactions</h1><p>Business applications frequently need to be able to run scripts
and components within transactions. A <i>transaction</i> is a
server operation that succeeds or fails as a whole, even if the
operation involves many steps (for example, ordering, checking
inventory, and billing). You can create server-side scripts that
run within a transaction so that if any portion of the script
fails, the entire transaction is aborted.</p><p>ASP transaction processing is based on Component Services
transactioning environment, a transaction processing system for
developing, deploying, and managing high performance, scalable, and
robust enterprise, Internet, and intranet server applications. This
transactioning environment defines an application programming model
for developing distributed, component-based applications. It also
provides a run-time environment for deploying and managing these
applications.</p><p>The functionality required to create transactional scripts is
built into your Web server. If you install Component Services, you
can also package components so they run within transactions.</p><h2><a name="H2_37685449">About
Transactions</a></h2><p>A <i>transaction</i> is an operation that succeeds or fails as a
whole. Transaction processing is used to update databases reliably.
When you are making many related changes to a database or updating
several databases at once, you want to ensure that all of the
changes are correctly executed. If any of the changes fail, you
want to restore the original state of the database tables.</p><p>Without Component Services, you would have to write your scripts
and components to manually track the requested changes and restore
data if any changes failed. With Component Services, you simply
declare your scripts and components to require transactions and let
Component Services handle the transaction coordination. Transaction
processing applies only to database access; Component Services
cannot roll back changes to the file system or changes to other,
nontransactional resources. The database your application accesses
must be supported by Component Services. Currently Component
Services supports SQL Server and any database that supports the XA
protocol from the X/Open consortium. Component Services will
continue to expand its support for other databases in the
future.</p><p>Using the <a href="ref_vbom_seromtr.htm"><b>Transfer</b></a> and <a href="ref_vbom_seromexe.htm"><b>Execute</b></a> methods a transaction can span multiple ASP
pages. If a script contains the @TRANSACTION directive, with the
value specified as Required, and the script is called by either the
<b>Server.Transfer</b> or <b>Server.Execute</b> method, then the
script will continue the transaction of the calling .asp file if
the calling .asp file was transacted. If the calling .asp file was
not transacted, the called .asp file will then automatically create
a new transaction.</p><p>For example, the following script initiates a transaction:</p><pre>
&lt;%@ TRANSACTION=Required %&gt;

&lt;%
  .
  .
  . 
  'End transaction.
  Server.Transfer("/BookSales/EndTrans.asp")        
%&gt;
</pre><p>However, following script calls another script that also
initializes a transaction:</p><pre>
&lt;%@ TRANSACTION=Required%&gt;

&lt;%
  'Instantiate a custom component to close transactions.
  Set objSale = Server.CreateObject("SalesTransacted.Complete")
  .
  .
  .
%&gt;

</pre><p>However, the interaction between the two scripts would
constitute only a single transaction. For more information about
writing scripts with <b>Server.Transfer</b> and <b>
Server.Execute</b>, see <a href="asp_basp_sendcontent.htm"><b>Sending Content to the Browser</b></a>.</p><h2><a name="H2_37686692">Declaring a
Transactional Script</a></h2><p>When you declare a page to be transactional, any script commands
and objects used on the page are run under the same transaction
context. Component Services handles the details of creating the
transaction and determining whether the transaction succeeds
(commits) or fails (aborts). To declare a page transactional, add
the <a href="ref_scrpt_vbstransaction.htm"><b>@TRANSACTION</b></a>
directive to the top of the page:</p><pre>
&lt;%@ TRANSACTION = <i>value</i> %&gt;
</pre><p>For more information on the <i>value</i> argument, see the <a href="ref_scrpt_vbstransaction.htm"><b>@TRANSACTION</b></a> directive
reference.</p><p>The @TRANSACTION directive must be the very first line on the
page, otherwise an error is generated. You must add the directive
to each page that should be run under a transaction. The current
transaction ends when the script finishes processing.</p><p>Most applications only require transaction context for certain
operations. For example, an airline site might use transactional
scripts for ticket purchasing and seat assignments. All other
scripts could be safely run without a transaction context. Because
transactions should be used only for pages that need transaction
processing, you cannot declare an application's Global.asa file as
transactional.</p><p>If a transaction is aborted, Component Services rolls back any
changes made to resources that support transactions. Currently,
only database servers fully support transactions because this data
is the most critical to enterprise applications. Component Services
does not roll back changes to files on a hard disk, ASP session and
application variables, or collections. You can, however, write
scripts that restore variables and collections by writing
transaction events, as described later in this topic. Your script
can also explicitly commit or abort a transaction if an operation
such as writing data to a file fails.</p><h2><a name="H2_37689450">Committing or Aborting a
Script</a></h2><p>Because Component Services tracks transaction processing, it
determines whether a transaction has completed successfully or
failed. A script can explicitly declare that it is aborting a
transaction by calling <b>ObjectContext.SetAbort</b>. For example,
your script might abort a transaction if it receives an error from
a component, if a business rule is violated (for example, if the
account balance falls below 0), or if a nontransactional
operation (such as reading from or writing to a file) fails. The
transaction is also aborted if the page times out before the
transaction is completed.</p><h2><a name="H2_37690014">Writing Transaction
Events</a></h2><p>A script itself cannot determine whether a transaction has
succeeded or failed. However, you can write events that are called
when the transaction commits or aborts. For example, suppose you
have a script that credits a bank account, and you want to return
different pages to the user depending on the status of the
transaction. You can use the <b>OnTransactionCommit</b> and <b>
OnTransactionAbort</b> events to write different responses to the
user.</p><pre>
&lt;%@ TRANSACTION=Required %&gt;

&lt;%
  'Buffer output so that different pages can be displayed.
  Response.Buffer = True
%&gt;

&lt;HTML&gt;
  &lt;BODY&gt;
  &lt;H1&gt;Welcome to the online banking service&lt;/H1&gt;


  &lt;%
    Set BankAction = Server.CreateObject("MyExample.BankComponent")
    BankAction.Deposit(Request("AcctNum"))
  %&gt;

  &lt;P&gt;Thank you.  Your transaction is being processed.&lt;/P&gt;
  &lt;/BODY&gt;
&lt;/HTML&gt;

&lt;%
  'Display this page if the transaction succeeds.
  Sub OnTransactionCommit()
%&gt;
  &lt;HTML&gt;
    &lt;BODY&gt;

    Thank you.  Your account has been credited.

    &lt;/BODY&gt;
  &lt;/HTML&gt;

&lt;%
  Response.Flush()
  End Sub
%&gt;

&lt;%
  'Display this page if the transaction fails.
  Sub OnTransactionAbort()
    Response.Clear()
%&gt;       
  &lt;HTML&gt;
    &lt;BODY&gt;

    We are unable to complete your transaction.

    &lt;/BODY&gt;
  &lt;/HTML&gt;
&lt;%
    Response.Flush()
  End Sub
%&gt;
</pre><h2><a name="H2_37691717">Registering a Component
in Component Services Manager</a></h2><p>To participate in a transaction, a component must be registered
in a COM+ application and must be configured to require a
transaction. For example, if your script processes orders by
calling a component that updates an inventory database and a
component that updates a payment database, you would want both
components to run under a transaction context. Component Services
ensures that if either component fails, the entire order is rolled
back and neither database is updated. Some components do not
require transactions; for example, the Ad Rotator component has no
need of transactions.</p><p>You use Component Services Manager to register and configure a
transactional component. Components must be registered in an COM+
application. Do not put your components in the IIS in-process COM+
application; instead, create your own COM+ application. Generally,
you should put all your components in one Library application.
Components in Library applications can be used by multiple ASP
applications and are run in the ASP application process.</p><p>You can also register transactional components in a Server
application, a COM+ application that always runs in a separate
process on the server. You use Server applications for your
transactional components if you want to use role-based security or
if you want your components to be accessible from applications on
remote computers.</p><p>You must have Component Services installed to use Component
Services Manager.</p><h2><a name="H2_37693171">Object Scope</a></h2><p>Generally, you should not store objects created from an COM
component in the ASP <b>Application</b> or <b>Session</b> objects.
COM objects are deactivated when the transaction is completed.
Because the <b>Session</b> and <b>Application</b> objects are
intended for object instances that can be used across multiple ASP
pages, you should not use them to hold objects that will be
released at the end of a transaction.</p><p>An ASP script is the root, or start, of a declared transaction.
Any COM object used on a transactional ASP page is considered part
of the transaction. When the transaction is completed, COM objects
used on the page are deactivated, including objects stored in the
<b>Session</b> or <b>Application</b> object. Subsequent attempts to
call the session-scope or application-scope object from another
transactional page will fail.</p><h2><a name="queuingtransactions">Queuing
Transactions</a></h2><p>Updates to a database on a remote server could delay or abort
the completion of a transaction due to network delays or failures.
Because all portions of a transaction must be committed, your
application might be held up waiting for the commit or abort
message from the remote server or might abort a transaction because
the database update could not be sent.</p><p>For updates that must be completed simultaneously, it is
appropriate to abort or even delay the completion of the
transaction until all participants in the transaction can commit.
For example, an airline ticket-ordering application should complete
both the debit to a customer's bank account and the credit to the
airline's bank account simultaneously. If an update is integral to
a transaction but could occur later than the other updates, you
might prefer not to keep the customer waiting for the completion of
the update. For example, a transaction to order an airline ticket
might also send a special meal request to a food services vendor or
update the customer's mileage. These activities must be completed,
but could be completed later.</p><p>You can use Message Queuing to bundle an update or set of
updates into a transactional message that is delivered to a remote
server. Message Queuing guarantees that updates will be delivered
to the remote server, even if the network is currently unavailable.
Your application receives a commit message and can continue with
the transaction.</p><div class="search-terms">(The following words are used by Search;
they are not intended to be displayed on the page.) MSMQ</div>
<hr class="iis" size="1">
<p align="center"><i><a href="/iishelp/common/colegal.htm">© 1997-2001 Microsoft Corporation. All rights reserved.</a></i></p>
</body>
</html>
