<html xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:myScript="http://iisue">
<head>
<META http-equiv="Content-Type" content="text/html; charset=UTF-16">
<meta http-equiv="Content-Type" content="text/html; charset=Windows-1252">
<meta http-equiv="PICS-Label" content="(PICS-1.1 &quot;<http://www.rsac.org/ratingsv01.html>&quot; l comment &quot;RSACi North America Server&quot; by &quot;inet@microsoft.com <mailto:inet@microsoft.com>&quot; r (n 0 s 0 v 0 l 0))">
<meta name="MS.LOCALE" content="EN-US">
<meta name="MS-IT-LOC" content="Internet Information Services">
<meta name="MS-HAID" content="About_Configuring_the_Metabase">
<meta name="description" content="Overview of configuring the metabase.">
<title>About Configuring the Metabase</title><SCRIPT LANGUAGE="JScript" SRC="iishelp.js"></SCRIPT></head>
<body>
<p style="color:red">[This is preliminary documentation and subject to change]</p>
<h1>About Configuring the Metabase</h1><p>IIS provides several public avenues of interacting with the
metabase. As shown in the illustration below, you can set or view
metabase values programmatically by using any of the following
resources:</p><ul><li><b>IIS snap-in-</b>The user interface used to update the
in-memory metabase.</li><li><b>Active Directory Service Interfaces (ADSI)-</b>A set of
scripting interfaces that can be used at a command window or run
from a script.</li><li><b>Windows Management Instrumentation (WMI)-</b>A set of
scripting interfaces that can be used at a command window or run
from a script.</li><li><b>COM DLLs or executable programs (EXEs) such as
MetaEdit-</b>A custom COM object (DLL) or an executable (EXE) can
be used to configure the in-memory metabase.</li></ul><p>All configuration settings made using the resources listed above
are written to the In-Memory metabase through Admin Base Objects.
The In-Memory metabase is a copy of the MetaBase.xml and
MBSchema.xml files in the IIS file cache.</p><p><b>The Metabase Updating Process</b></p><p><img src="mb_interfaces.gif" alt="Shows the interfaces to the In-memory metabase."></p><h2>About the IIS Admin Base Objects</h2><p>As shown in the preceding illustration, the Admin Base Objects
are central to updating the in-memory metabase. The IIS Admin Base
Objects are COM Automation objects that are used to write IIS
configuration values stored within the IIS metabase. Individual IIS
Admin Base Objects correspond to metabase key names in the metabase
and are addressed by their paths within the metabase. Each object
has properties, and each property is stored in the metabase. You
can manipulate IIS configuration by using IIS Admin Base Objects to
add new virtual directories, new Web sites, and so on.</p><p>The IIS snap-in and the other resources shown in the
illustration that are used to update the in-memory metabase all
write directly to the Admin Base Objects. The Admin Base Objects
then write the changes to the in-memory metabase. Admin Base
Objects can also be directly accessed, programmatically, by using C
or Microsoft® Visual C++® code to update the in-memory
metabase.</p><p><img src="note.gif" alt="note"><b>
      Note
      </b>The safest way to update the metabase is by
using the IIS snap-in because this user interface is least likely
to introduce errors into the metabase.</p><h2>Metabase Storage Layer</h2><p>Because the In-Memory metabase is located in memory, which is
temporary storage, the In-Memory metabase is periodically written
to disk via the Metabase Storage Layer. The metabase storage layer
is the part of IIS that reads the metabase files into the In-Memory
metabase and also writes the In-Memory metabase to the metabase
files. The metabase storage layer takes care of the XML to binary
conversion that takes place during these events. The metabase
storage layer writes the metabase files into the in-memory metabase
via the Admin Base Objects when IIS is started. For information
about how the metabase files are read into memory when IIS is
started, see <a href="mb_startingiis.htm"><b>Starting IIS</b></a>. The
storage layer writes the In-Memory metabase directly to the
metabase files when a write-to-disk event occurs or when IIS is
shut down. For information about how IIS iis is written to disk,
see <a href="mb_history_write2disk.htm"><b>Writing the Metabase to Disk</b></a> and <a href="mb_stoppingiis.htm"><b>Stopping IIS</b></a>.</p><h2>Metabase Files</h2><p>IIS 6.0 replaces the IIS 5.0 metabase configuration file, which
used a proprietary binary file named metabase.bin, with a
plain-text file named MetaBase.xml. Additionally,
the MBSchema.xml file contains the schema, defines default
attributes for all metabase properties, and enforces
rules—for example, at what nodes properties can be written in
the metabase configuration. A binary file named
MBSchema_00000000h.bin is used to enable faster IIS startup times
and should not be modified by administrators.</p><p>Because the MetaBase.xml file is a plain text file, you can
directly configure MetaBase.xml using common text tools such as
Notepad. For information about configuring the MetaBase.xml file
directly, see <a href="mb_ewr_ewr.htm"><b>Editing the MetaBase.XML File While IIS Is Running</b></a>.</p><div><p><b>Related Topics</b></p><ul><li>For more information about metabase schema, see <a href="mb_structure_schema.htm"><b>Metabase Schema</b></a>.</li><li>For more information about the MBSchema_00000000h.bin file, see
<a href="mb_startingiis.htm"><b>Starting IIS</b></a>.</li></ul></div><div class="search-terms">phrase 1, phrase 2, phrase 3</div>
<hr class="iis" size="1">
<p align="center"><i><a href="/iishelp/common/colegal.htm">© 1997-2001 Microsoft Corporation. All rights reserved.</a></i></p>
</body>
</html>
