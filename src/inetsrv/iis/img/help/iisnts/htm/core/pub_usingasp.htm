<html xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:myScript="http://iisue">
<head>
<META http-equiv="Content-Type" content="text/html; charset=UTF-16">
<meta http-equiv="Content-Type" content="text/html; charset=Windows-1252">
<meta http-equiv="PICS-Label" content="(PICS-1.1 &quot;<http://www.rsac.org/ratingsv01.html>&quot; l comment &quot;RSACi North America Server&quot; by &quot;inet@microsoft.com <mailto:inet@microsoft.com>&quot; r (n 0 s 0 v 0 l 0))">
<meta name="MS.LOCALE" content="EN-US">
<meta name="MS-IT-LOC" content="Internet Information Services">
<meta name="MS-HAID" content="Using_ASP_to_Manage_Web_Site_Content">
<meta name="description" content="Discusses how to use ASP to centralize and automate routine content updates, ensure consistent appearance of all pages on a Web site, incorporate content from multiple authors, support various brands and versions of Web browser, and to help perform other site-management tasks.">
<title>Using ASP to Manage Web Site Content</title><SCRIPT LANGUAGE="JScript" SRC="iishelp.js"></SCRIPT></head>
<body>
<p style="color:red">[This is preliminary documentation and subject to change]</p>
<h1>Using ASP to Manage Web Site Content</h1><p>After learning HTML and creating a Web page, you are probably
ready to begin designing a Web site. However, before doing so, you
should consider the following issues:</p><ul><li>How will you maintain a consistent appearance across your
entire site?</li><li>How will you update content that appears on every page, such as
copyright information or logo images?</li><li>How will you incorporate Web content from multiple
authors?</li></ul><p>Even if your site is not large, these and other Web management
issues can pose daunting and time-consuming challenges.
Fortunately, your Web server includes Microsoft Active Server
Pages (ASP), a <i>server-side</i> scripting environment that you
can use to automate and centralize many of your Web site management
tasks.</p><h2><a name="H2_448395770"></a>Discover
Scripting</h2><p>A <i>script</i> is a series of instructions and commands that
you can use to programmatically alter the content of your Web
pages. If you have ever visited an online store that enabled you to
search for items and check product availability, you have
undoubtedly encountered some type of script. Equipped with a good
understanding of scripting you can further realize the potential of
Web based publishing.</p><p>To begin, there are two kinds of scripting: client-side and
server-side.</p>

Client-side scripts run on the Web browser and are embedded in a
Web page between HTML &lt;SCRIPT&gt; and &lt;/SCRIPT&gt; tags. If
you view the HTML source for a highly dynamic Web page, most likely
you will discover a client-side script. 

<p>Server-side scripts run exclusively on the Web server and are
most often used to modify Web pages before they are delivered to
the browser. Server-side scripts can instruct the Web server to
perform an action such as processing user input or logging how
often a user visits your Web site. You can think of server-side
scripts as affecting how the Web server "assembles" a Web page
before it's sent to the browser. Useful for processing data and
automatically updating Web pages, server-side scripts can greatly
facilitate your management of Web content.</p><h2><a name="H2_448397151"></a>ASP: A Brief
Overview</h2><p>Just as you might write a custom macro to automate repetitive
spreadsheet or word processing tasks, you create a server-side
script to automatically perform difficult or repetitious Web
management tasks. Imagine that you need to update a Web site
consisting of several dozen pages containing identical formatting
information (bylines, company logos, copyright information, and so
on). Normally, such work is time-consuming and requires updating
(and testing) each page by hand. Alternatively, you can use ASP to
automate such work.</p><p>ASP is a powerful, server-side scripting environment that you
can use to write scripts with only a standard text editor, such as
Notepad. For example, using ASP you could create a central file
that contains information common to all of the pages of a Web site.
While designing the Web site, you could add a one-line script
command to each page which inserts the contents of the central
file. Whenever you need to update your site's navigation menu, for
example, you need only update the central file; changes would
automatically appear the next time a user reloads and views the Web
content.</p><p>ASP uses <i>delimiters</i> to differentiate script commands from
regular text and HTML. Specifically, &lt;% and %&gt; delimiters
enclose script commands that are to be executed by the server, as
opposed to &lt; and &gt; delimiters used by HTML to denote tags
that are to be parsed by a Web browser.</p><p>The following example illustrates how ASP works:</p><pre>
&lt;%
  author = "Kim Yoshida" 
  department= "Quality Assurance"
%&gt;

This page was updated &lt;B&gt;today&lt;/B&gt;, by &lt;%= author %&gt; from 
the &lt;%= department %&gt; Department.

</pre><p>When viewed in a Web browser, a page containing this script
appears as:</p><pre>
This page was updated <b>today</b>, by Kim Yoshida from the Quality 
Assurance Department.
</pre><p>However, a user viewing the source for this page would see only
the following text and HTML:</p><pre>
This page was updated &lt;B&gt;today&lt;/B&gt;, by Kim Yoshida from the Quality 
Assurance Department.
</pre><p>The script runs on the server (that is, commands within the
&lt;% and %&gt; delimiters are executed on the server) and returns
only HTML to a user's browser.</p><p>At a minimum, all ASP files must have an .asp extension and
contain script commands written in a scripting language such as
Microsoft Visual Basic® Scripting Edition (VBScript) or
Microsoft JScript. If you are new to scripting and need to learn
the fundamentals, your local bookseller or the <a href="http://www.microsoft.com/isapi/redir.dll?prd=msdn&amp;pver=6.0&amp;ar=scripting" target="_New"><b><b>Windows Script Technologies</b></b></a>, are good
places to start.</p><p>After you familiarize yourself with a scripting language, see <a href="asp_asp.htm"><b>Getting Started with ASP</b></a> to learn the
fundamentals of ASP server-side scripting. This section also
contains a hands-on, instructional tutorial. For more information,
see <a href="asp_tut_00.asp#"><b>ASP Tutorial</b></a>.</p><h2><a name="H2_448400575"></a>ASP Solutions</h2><p>The following is a list a Web management tasks and suggested ASP
solutions:</p><table width="" height=""><tr><th width="" height="" colspan="1" rowspan="1">Web Task</th><th width="" height="" colspan="1" rowspan="1">ASP Solution</th></tr><tr><td width="" height="" colspan="1" rowspan="1">Update Web page formatting</td><td width="" height="" colspan="1" rowspan="1"><p>Use the ASP server-side <b>#include</b> directive to insert
information into each page from one central file. For example, when
designing your site, insert the following statement in your Web
page template:</p><pre>
&lt;!- - #include file="Logo.txt"  - -&gt;
</pre><p>After your site has been deployed and you need to to update your
logo image, you only need to update the Logo.txt file containing
image information. For more information, see <a href="asp_basp_includingfiles.htm"><b>Including Files</b></a>.</p></td></tr><tr><td width="" height="" colspan="1" rowspan="1">Alert users about relocated Web content</td><td width="" height="" colspan="1" rowspan="1">Rather than alert users, <i>redirect</i> them. Use the ASP <b>
Redirect</b> method to automatically redirect or route a browser to
another Web page or Web site. For example, insert the following
statement at the top of a Web page to redirect users to another
page: 

<pre>
&lt;% Response.Redirect(<i>URL of new Web page</i>) %&gt;
</pre>

For more information, see <a href="asp_basp_sendcontent.htm"><b>Sending Content to the Browser</b></a>.</td></tr><tr><td width="" height="" colspan="1" rowspan="1">Support disparate versions and brands of Web browsers</td><td width="" height="" colspan="1" rowspan="1">Use the ASP Browser Capabilities component feature to tailor
Web content based on a browser's capabilities. For example, you can
determine whether a user's browser supports frames, and if not,
substitute appropriate Web content. For more information, see the
<b>Using COM Components</b> module of the <a href="asp_tut_02.asp#"><b>ASP Tutorial</b></a>.</td></tr><tr><td width="" height="" colspan="1" rowspan="1">Monitor user preferences and behavior</td><td width="" height="" colspan="1" rowspan="1">You can use ASP to place <i>cookies</i>, small text files
stored on the user's browser by the server, to determine which part
of the Web site a user is looking at and how long that user lingers
on certain Web pages. For more information, see <a href="asp_basp_managingsessions.htm"><b>Managing Sessions</b></a>.</td></tr><tr><td width="" height="" colspan="1" rowspan="1">Obtain user feedback</td><td width="" height="" colspan="1" rowspan="1">Use the ASP <b>Form</b> and <b>QueryString</b> collections to
gather user input from an HTML form. These collections simplify the
creation of Web sites that process user feedback, such as a
departmental bulletin board, an online survey, or a data retrieval
system. For more information, see <a href="asp_basp_processuserin.htm"><b>Processing User Input</b></a>.</td></tr></table><hr class="iis" size="1">
<p align="center"><i><a href="/iishelp/common/colegal.htm">© 1997-2001 Microsoft Corporation. All rights reserved.</a></i></p>
</body>
</html>
