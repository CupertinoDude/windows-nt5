<html xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:myScript="http://iisue">
<head>
<META http-equiv="Content-Type" content="text/html; charset=UTF-16">
<meta http-equiv="Content-Type" content="text/html; charset=Windows-1252">
<meta http-equiv="PICS-Label" content="(PICS-1.1 &quot;<http://www.rsac.org/ratingsv01.html>&quot; l comment &quot;RSACi North America Server&quot; by &quot;inet@microsoft.com <mailto:inet@microsoft.com>&quot; r (n 0 s 0 v 0 l 0))">
<meta name="MS.LOCALE" content="EN-US">
<meta name="MS-IT-LOC" content="Internet Information Services">
<meta name="MS-HAID" content="Simplify_Development_With_Process_Isolation">
<meta name="description" content="Internet Information Services reference information">
<title>Simplify Development With Process Isolation</title><SCRIPT LANGUAGE="JScript" SRC="iishelp.js"></SCRIPT></head>
<body>
<p style="color:red">[This is preliminary documentation and subject to change]</p>
<h2>Simplify Development With Process Isolation</h2><p>In earlier versions of IIS, all ISAPI applications (including
ASP) shared the resources and memory of the server process.
Although this provided fast performance, unstable components could
cause the server to crash-not an acceptable behavior for a
mission-critical application such as IIS. To make matters worse,
in-process components couldn't be unloaded unless the server was
restarted-which meant that modifying existing components would
affect all sites that shared the same server, whether they were
directly affected by the upgrade or not.</p><p>Thanks to close integration with Component Services,
applications in IIS version 4.0 and above can be started in an
isolated process. There are two reasons for doing this:</p><ol><li>Component development; rather than taking down the entire
server to update a single component, you can stop and restart just
a single application. In earlier versions of IIS, to add an updated
component to an application, or an entirely new application, you
previously had to stop the Web service, replace the old DLL with
your new version in its shared location on the server, and restart
the Web service again. Now with an isolated process, you can update
a production Web site without shutting down all applications.</li><li>Process isolation, which limits the effects of a crash to the
single application that caused it. In addition to protecting your
primary Web service from the crash, the application can be
configured to restart automatically as often as you like. In the
case of an application fatal error, the application's process is
automatically terminated. Because the application is running in the
Component Services system process, all transactions in progress are
aborted. The Windows event log stores a record of the event, and
Component Services restarts the application. The only clients
affected by the failure are those with outstanding requests to that
specific application.</li></ol><h4> Process Isolation</h4><p>If you decide to run your application as a separate process, or
with other applications in a single pooled process, you will need
to select <b>High (Isolated)</b> or <b>Medium (Pooled)</b> from the
<b>Application Protection</b> drop-down list on the <b>Home
Directory</b> or <b>Virtual Directory</b> property sheet. You
should first create an application for your application
starting-point directory, if you haven't already done so.
Components that will run in the new process must be installed into
the appropriate COM application. For more information, see the
Component Services documentation.</p><hr class="iis" size="1">
<p align="center"><i><a href="/iishelp/common/colegal.htm">© 1997-2001 Microsoft Corporation. All rights reserved.</a></i></p>
</body>
</html>
