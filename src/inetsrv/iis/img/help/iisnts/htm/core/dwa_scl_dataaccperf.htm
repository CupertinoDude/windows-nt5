<html xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:myScript="http://iisue">
<head>
<META http-equiv="Content-Type" content="text/html; charset=UTF-16">
<meta http-equiv="Content-Type" content="text/html; charset=Windows-1252">
<meta http-equiv="PICS-Label" content="(PICS-1.1 &quot;<http://www.rsac.org/ratingsv01.html>&quot; l comment &quot;RSACi North America Server&quot; by &quot;inet@microsoft.com <mailto:inet@microsoft.com>&quot; r (n 0 s 0 v 0 l 0))">
<meta name="MS.LOCALE" content="EN-US">
<meta name="MS-IT-LOC" content="Internet Information Services">
<meta name="MS-HAID" content="Data_Access_Performance">
<meta name="description" content="Internet Information Services reference information">
<title>Data Access Performance</title><SCRIPT LANGUAGE="JScript" SRC="iishelp.js"></SCRIPT></head>
<body>
<p style="color:red">[This is preliminary documentation and subject to change]</p>
<h1>Data Access Performance</h1><p>Data access and retrieval is often the most challenging
performance area for the Web application developer.</p><p>Many of the scalability and performance concerns that arise
around data access are not in your control, as a Web application
developer. However, there are some techniques that you can use to
maximize your performance:</p><ul><li><b>Cache results</b><b>from data sources that are stable, or
that vary predictably.</b> You can cache either the recordset
returned by a query to the data source, or cache the pure HTML
output that was created using the results of the query. 

<p>For instance, if you are using ADO to populate a listbox that
will contain the cities in which you have offices, the first caller
to ADO can insert the ADO query results into Application scope.
Subsequent requests for that listbox information could be fulfilled
from the <b>Application</b> object, instead of an expensive call,
through ADO, to a data source.</p><p>If you wish to cache the resultant recordset directly, you
should use a client-side cursor, and disassociate the recordset
from the <b>Command</b> object by setting the ADO <b>
ActiveConnection</b> property to <b>Nothing</b>.</p><p>For more information on data caching, see <a href="dwa_des_conappfloccspcac.htm"><b>Caching Data</b></a>.</p></li><li><b>In general, avoid putting ADO connections in session
state,</b> because ODBC (version 3.0 and later) automatically does
connection pooling for you, and OLE DB provides session
pooling.</li><li><b>Use the native OLE DB connection strings as much as
possible.</b> Native OLE DB connection strings are generally faster
than most ODBC DNSs. In addition, OLE DB connection strings are
more flexible because your application will be able to make use of
any OLE DB provider.</li><li><b>If using a data source that supports them, such as Microsoft
SQL Server, use stored procedures whenever possible.</b> A query
executed from a stored procedure is faster than a query passed
through a SQL query string.</li><li><b>To optimize performance, avoid using the ADO record addition
and deletion methods, such as AddNew and Delete.</b> If your
application adds and deletes records intensively, your application
will perform better if it uses direct SQL statements, such as
INSERT.</li><li><b>Set the ADO CacheSize property to a larger number than the
default (1).</b> By forcing ADO to retrieve multiple records in one
transaction with the data source, you will eliminate a portion of
the overhead involved in that transaction, and your application may
become more scalable. Generally, you are most likely to see
benefits if you set <b>CacheSize</b> to equal to either the number
of records expected, or 100, whichever is less.</li><li><b>Use the ADO 2.0 AdExecuteNoRecords flag when executing
commands that don't return data rows, or that return rows that you
don't need to access or save.</b> This new feature, introduced in
ADO 2.0, was created to reduce the amount of overhead incurred by
ADO, and thus increase performance and scalability.</li><li><b>Disable temporary stored procedures, if your data source
supports them.</b></li></ul><p>For more information on data access, see <a href="asp_basp_accdatasource.htm"><b>Accessing a Data Source</b></a> and
<a href="dwa_ada_ada.htm"><b>Accessing Data with ASP</b></a>.</p><hr class="iis" size="1">
<p align="center"><i><a href="/iishelp/common/colegal.htm">© 1997-2001 Microsoft Corporation. All rights reserved.</a></i></p>
</body>
</html>
