<html xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:myScript="http://iisue">
<head>
<META http-equiv="Content-Type" content="text/html; charset=UTF-16">
<meta http-equiv="Content-Type" content="text/html; charset=Windows-1252">
<meta http-equiv="PICS-Label" content="(PICS-1.1 &quot;<http://www.rsac.org/ratingsv01.html>&quot; l comment &quot;RSACi North America Server&quot; by &quot;inet@microsoft.com <mailto:inet@microsoft.com>&quot; r (n 0 s 0 v 0 l 0))">
<meta name="MS.LOCALE" content="EN-US">
<meta name="MS-IT-LOC" content="Internet Information Services">
<meta name="MS-HAID" content="Using_Components_and_Objects">
<meta name="description" content="Explains how to create an instance of a COM component in an ASP server-side script and how to set component scope. Includes VBScript sample code for working with Java classes and monikers, and for creating COM component by scripting.">
<title>Using Components and Objects</title><SCRIPT LANGUAGE="JScript" SRC="iishelp.js"></SCRIPT></head>
<body>
<p style="color:red">[This is preliminary documentation and subject to change]</p>
<h1>Using Components and Objects</h1><p>COM components are the key to building powerful, real-world Web
applications. Components provide functionality that you use in your
scripts to perform specialized tasks, such as executing financial
transactions or validating data. ASP also provides a set of base
components that you can use to greatly enhance your scripts.</p><h2><a name="H2_37767923">About
Components</a></h2><p>A <i>COM component</i> is a reusable, programmatic building
block that contains code for performing a task or set of tasks.
Components can be combined with other components (even across
networks) to create a Web application. COM components execute
common tasks so that you do not have to create your own code to
perform these tasks. For example, you can use a stock ticker
component to display the latest stock quotes on a Web page.
However, it would be difficult to create a script that provides the
same functionality. Also, the script would not be as reusable as a
component.</p><p>If you are new to scripting, you can write scripts that use
components without knowing anything about how the component works.
ASP comes with base components that you can use immediately. For
example, you can use the ActiveX Data Objects (ADO) components to
add database connectivity to your Web pages. Additional components
can also be obtained from third-party developers.</p><p>If you are a Web application developer, components are the best
way to encapsulate your business logic into reusable, secure
modules. For example, you could use a component to verify credit
card numbers by calling the component from a script that processes
sales orders. Because the verification is isolated from the order
process, you can update the component when the credit card
verification process changes, without changing your order process.
Also, since COM components are reusable, you could reuse the
component in other scripts and applications. Once you have
installed a component on your Web server, you can call it from a
ASP server-side script, an ISAPI extension, another component on
the server, or a program written in another COM-compatible
language.</p><p>You can create components in any programming language that
supports the Component Object Model (COM), such as C, C++, Java,
Visual Basic, or numerous scripting languages. (If you are familiar
with COM programming, COM components are also known as Automation
servers.) To run on the Web server, your COM components cannot have
any graphical user interface elements, such as the Visual Basic <b>
MsgBox</b> function; graphical interface elements would only be
viewable on the server, and not the browser.</p><h2><a name="H2_37769966">Creating an Instance of
a Component's Object</a></h2><p>A component is executable code contained in a dynamic-link
library (.dll) or in an executable (.exe) file. Components provide
one or more <i>objects</i>, self contained units of code which
perform specific functions within the component. Each object has
methods (programmed procedures) and properties (behavioral
attributes). To use an object provided by a component, you create
an instance of the object and assign the new instance to a variable
name. Use the ASP <b>Server.CreateObject</b> method or the HTML
&lt;OBJECT&gt; tag to create the object instance. Use your
scripting language's variable assignment statement to give your
object instance a name. When you create the object instance, you
must provide its registered name (PROGID). For the base components
provided with ASP, you can get the PROGID for the objects from the
reference pages (see <a href="ica.htm"><b>ASP Installable Components Reference</b></a>).</p><p>For example, the Ad Rotator component randomly rotates through a
series of graphical advertisements. The Ad Rotator component
provides one object, called the Ad Rotator object, whose PROGID is
"MSWC.AdRotator." To create an instance of the Ad Rotator object,
use one of the following statements:</p><p><b>VBScript:</b></p><pre>
&lt;% Set MyAds = Server.CreateObject("MSWC.AdRotator") %&gt;
</pre><p><b>JScript:</b></p><pre>
&lt;% var MyAds = Server.CreateObject("MSWC.AdRotator") %&gt;
</pre><p>If you are already familiar with VBScript or JScript, note that
you do not use the scripting language's function for creating a new
object instance (<b>CreateObject</b> in VBScript or <b>New</b> in
JScript). You must use the ASP <b>Server.CreateObject</b> method;
otherwise, ASP cannot track your use of the object in your
scripts.</p><p>You can also use the HTML &lt;OBJECT&gt; tag to create an object
instance. You must supply the RUNAT attribute with a value of
Server, and you must provide the ID attribute set to the variable
name you will use in your scripts. You can identify the object by
using either its registered name (PROGID) or its registered number
(CLSID).The following example uses the registered name (PROGID) to
create an instance of the Ad Rotator object:</p><pre>
&lt;OBJECT RUNAT=Server ID=MyAds PROG&gt;&lt;/OBJECT&gt;
</pre><p>The following example uses the registered number (CLSID) to
create an instance of the Ad Rotator object:</p><pre>
&lt;OBJECT RUNAT=SERVER ID=MyAds 
CLASS&gt;&lt;/OBJECT&gt; 
</pre><h2><a name="scriptlets">Use Scripting to Create
COM Components</a></h2><p>ASP supports Windows Script Components, Microsoft's powerful
scripting technology that you can use to create COM components.
Specifically, you can encapsulate common scripts, such as those
used for database access or content generation, into reusable
components accessible from any .asp file or program. You can create
Windows Script Components by writing scripts in a language such as
VBScript or JScript without a special development tool. You can
also incorporate Windows Script Components into programs written in
COM compliant programming languages, such as Visual Basic, C++, or
Java.</p><p>The following is an example of a Windows Script Components,
written in VBScript, that defines methods for converting
temperature measurements between Fahrenheit and Celsius:</p><pre>
&lt;SCRIPTLET&gt;

&lt;Registration
    Description="ConvertTemp"
    Prog
    Version="1.00"
&gt;
&lt;/Registration&gt;

&lt;implements id=Automation type=Automation&gt;
    &lt;method name=Celsius&gt;
        &lt;PARAMETER name=F/&gt;
    &lt;/method&gt;
    &lt;method name=Fahrenheit&gt;
        &lt;PARAMETER name=C/&gt;
    &lt;/method&gt;
&lt;/implements&gt;

&lt;SCRIPT LANGUAGE=VBScript&gt;

  Function Celsius(F)
      Celsius = 5/9 * (F - 32)
  End Function

  Function Fahrenheit(C)
      Fahrenheit = (9/5 * C) + 32
  End Function

&lt;/SCRIPT&gt;
&lt;/SCRIPTLET&gt;
</pre><p>Before implementing this Windows Script Component you must save
this file with an .sct extension and then in Windows Explorer,
right-click this file and select <b>Register</b>. To use this
Windows Script Component in a Web page, you would use a server-side
script such as the following:</p><pre>
&lt;%
  Option Explicit

  Dim objConvert
  Dim sngFvalue, sngCvalue

  sngFvalue = 50
  sngCvalue = 21 

  Set objConvert = Server.CreateObject("ConvertTemp.Scriptlet")
%&gt;

&lt;%= sngFvalue %&gt; degrees Fahrenheit is equivalent to &lt;%= objConvert.Celsius(sngFvalue) %&gt; degrees Celsius&lt;BR&gt;

&lt;%= sngCvalue %&gt; degrees Celsius is equivalent to &lt;%= objConvert.Fahrenheit(sngCValue) %&gt; degrees Fahrenheit&lt;BR&gt;
</pre><h2><a name="H2_37773690">Using ASP Built-in
Objects</a></h2><p>ASP also provides built-in objects for performing useful tasks
that simplify Web development. For example, you can use the <b>
Request</b> object to easily access information associated with an
HTTP request, such as user input coming from HTML forms or cookies.
Unlike using the objects provided by a COM component, you do not
need to create an instance of an ASP built-in object to use it in
your scripts. These objects are automatically created for you when
the ASP request starts processing. You access the methods and
properties of a built-in object in the same way in which you access
the methods and properties of a component's objects, as described
in this topic. For a complete description of the built-in objects,
see <a href="asp_basp_aspobjqrefc.htm"><b>ASP Object Quick Reference Card</b></a>.</p><h2><a name="H2_37774333">Calling an Object
Method</a></h2><p>A <i>method</i> is an action you can perform on an object or
with an object. The syntax for calling a method is:</p><p><b>Object.Method</b> <i>parameters</i></p><p>The <i>parameters</i> vary depending on the method.</p><p>For example, you can use the <b>Write</b> method of the <b>
Response</b> built-in object to send information to the browser as
shown in the following statement:</p><pre>
&lt;% Response.Write "Hello World" %&gt;
</pre><p><img src="note.gif" alt="note"><b>
      Note
      </b>Some scripting languages do not support the <b>
Object.Method</b> syntax. If your language does not, you must add
an entry to the registry in order to use that language as your
primary scripting language. See <a href="asp_basp_workingwithscript.htm"><b>Working with Scripting Languages</b></a> for more information.</p>
<h2><a name="H2_37775276">Setting an Object
Property</a></h2><p>A <i>property</i> is an attribute that describes the object.
Properties define object characteristics, such as the type of the
object, or describe the state of an object, such as enabled or
disabled. The syntax is:</p><p><b>Object.Property</b></p><p>You can sometimes read and set the value of a property. In
addition, for some objects, you can also add new properties.</p><p>For example, the Ad Rotator component has a property, <b>
Border</b>, which specifies whether the ad has a border around it
and determines the border thickness. The following expression
specifies no border:</p><pre>
&lt;% MyAds.Border = 0 %&gt;
</pre><p>For some properties, you can display the current value by using
the ASP output directive. For example, the following statement
returns TRUE if the browser is still connected to the server:</p><pre>
&lt;%= Response.IsClientConnected %&gt;
</pre><h2><a name="H2_37772661">Creating an Object from
a Java Class</a></h2><p>To use <b>Server.CreateObject</b> to create an instance of a
Java class, you must use the JavaReg program to register the class
as a COM component. You can then use <b>Server.CreateObject</b>
method or an HTML &lt;OBJECT&gt; tag with the PROGID or CLSID.</p><p>Alternatively, you can use the mechanism provided by Java
monikers to instantiate the Java class directly without using the
JavaReg program. To instantiate a class with monikers, use the
VBScript or JScript <b>GetObject</b> statement and provide the full
name of the Java class in the form <code>
java:<i>classname</i></code>. The following VBScript example
creates an instance of the Java <b>Date</b> class.</p><pre>
&lt;% 
  Dim dtmDate
  Set dtmDate = GetObject("java:java.util.Date")
%&gt;

The date is &lt;%= dtmDate.toString() %&gt;
</pre><p>Objects created by calling <b>GetObject</b> instead of <b>
Server.CreateObject</b> can also access the ASP built-in objects
and participate in a transaction. To use Java monikers, however,
you must be using version 2.0, or later, of the Microsoft
virtual machine.</p><hr class="iis" size="1">
<p align="center"><i><a href="/iishelp/common/colegal.htm">© 1997-2001 Microsoft Corporation. All rights reserved.</a></i></p>
</body>
</html>
