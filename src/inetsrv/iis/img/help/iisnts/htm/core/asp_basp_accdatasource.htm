<html xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:myScript="http://iisue">
<head>
<META http-equiv="Content-Type" content="text/html; charset=UTF-16">
<meta http-equiv="Content-Type" content="text/html; charset=Windows-1252">
<meta http-equiv="PICS-Label" content="(PICS-1.1 &quot;<http://www.rsac.org/ratingsv01.html>&quot; l comment &quot;RSACi North America Server&quot; by &quot;inet@microsoft.com <mailto:inet@microsoft.com>&quot; r (n 0 s 0 v 0 l 0))">
<meta name="MS.LOCALE" content="EN-US">
<meta name="MS-IT-LOC" content="Internet Information Services">
<meta name="MS-HAID" content="Accessing_a_Data_Source">
<meta name="description" content="This topic describes how to use ASP and ActiveX Data Objects (ADO) to add database access to your Web pages.">
<title>Accessing a Data Source</title><SCRIPT LANGUAGE="JScript" SRC="iishelp.js"></SCRIPT></head>
<body>
<p style="color:red">[This is preliminary documentation and subject to change]</p>
<h1>Accessing a Data Source</h1><p>ActiveX Data Objects (ADO) are an easy-to-use yet extensible
technology for adding database access to your Web pages. You can
use ADO to write compact and scalable scripts for connecting to OLE
DB compliant data sources, such as databases, spreadsheets,
sequential data files, or e-mail directories. OLE DB is a
system-level programming interface that provides standard set of
COM interfaces for exposing database management system
functionality. With ADO's object model you can easily access these
interfaces (using scripting languages, such as VBScript or JScript)
to add database functionality to your Web applications. In
addition, you can also use ADO to access Open Database Connectivity
(ODBC) compliant databases.</p><p>If you are a scripter with a modest understanding of database
connectivity, you will find ADO's command syntax uncomplicated and
easy-to-use. If you are an experienced developer you will
appreciate the scalable, high-performance access ADO provides to a
variety of data sources.</p><p>For more information about ADO, visit the <a href="http://www.microsoft.com/data/default.htm" target="_New"><b>Microsoft
Universal Data Access (UDA) Web site</b></a>.</p><h2><a name="H2_37771874">Creating a Connection
String</a></h2><p>The first step in creating a Web data application is to provide
a way for ADO to locate and identify your data source. This is
accomplished by means of a <i>connection string</i>, a series of
semicolon delimited arguments that define parameters such as the
data source provider and the location of the data source. ADO uses
the connection string to identify the OLE DB <i>provider</i> and to
direct the provider to the data source. The provider is a component
that represents the data source and exposes information to your
application in the form of rowsets.</p><p>The following table lists OLE DB connection strings for several
common data sources:</p><table width="" height=""><tr><td width="" height="" colspan="1" rowspan="1"><b>Data Source</b></td><td width="" height="" colspan="1" rowspan="1"><b>OLE DB Connection String</b></td></tr><tr><td width="" height="" colspan="1" rowspan="1">Microsoft® Access</td><td width="" height="" colspan="1" rowspan="1">Provider=Microsoft.Jet.OLEDB.4.0;Data Source=<i>physical path
to .mdb file</i></td></tr><tr><td width="" height="" colspan="1" rowspan="1">Microsoft SQL Server</td><td width="" height="" colspan="1" rowspan="1">Provider=SQLOLEDB.1;Data Source=<i>path to database on
server</i></td></tr><tr><td width="" height="" colspan="1" rowspan="1">Oracle</td><td width="" height="" colspan="1" rowspan="1">Provider=MSDAORA.1;Data Source=<i>path to database on
server</i></td></tr><tr><td width="" height="" colspan="1" rowspan="1">Microsoft Indexing Service</td><td width="" height="" colspan="1" rowspan="1">Provider=MSIDXS.1;Data Source=<i>path to file</i></td></tr></table><p>To provide for backward compatibility, the OLE DB Provider for
ODBC supports ODBC connection string syntax. The following table
lists commonly used ODBC connection strings:</p><table width="" height=""><tr><td width="" height="" colspan="1" rowspan="1"><b>Data Source Driver</b></td><td width="" height="" colspan="1" rowspan="1"><b>ODBC Connection String</b></td></tr><tr><td width="" height="" colspan="1" rowspan="1">Microsoft Access</td><td width="" height="" colspan="1" rowspan="1">Driver={Microsoft Access Driver (*.mdb)};DBQ=<i>physical path
to .mdb file</i></td></tr><tr><td width="" height="" colspan="1" rowspan="1">SQL Server</td><td width="" height="" colspan="1" rowspan="1">DRIVER={SQL Server};SERVER=<i>path to server</i></td></tr><tr><td width="" height="" colspan="1" rowspan="1">Oracle</td><td width="" height="" colspan="1" rowspan="1">DRIVER={Microsoft ODBC for Oracle};SERVER=<i>path to
server</i></td></tr><tr><td width="" height="" colspan="1" rowspan="1">Microsoft Excel</td><td width="" height="" colspan="1" rowspan="1">Driver={Microsoft Excel Driver (*.xls)};DBQ=<i>physical path to
.xls file</i>; DriverID=278</td></tr><tr><td width="" height="" colspan="1" rowspan="1">Microsoft Excel 97</td><td width="" height="" colspan="1" rowspan="1">Driver={Microsoft Excel Driver (*.xls)};DBQ=<i>physical path to
.xls file</i>;DriverID=790</td></tr><tr><td width="" height="" colspan="1" rowspan="1">Paradox</td><td width="" height="" colspan="1" rowspan="1">Driver={Microsoft Paradox Driver (*.db)};DBQ=<i>physical path
to .db file</i>;DriverID=26</td></tr><tr><td width="" height="" colspan="1" rowspan="1">Text</td><td width="" height="" colspan="1" rowspan="1">Driver={Microsoft Text Driver
(*.txt;*.csv)};DefaultDir=<i>physical path to .txt file</i></td></tr><tr><td width="" height="" colspan="1" rowspan="1">Microsoft Visual FoxPro® (with a database container)</td><td width="" height="" colspan="1" rowspan="1">Driver={Microsoft Visual FoxPro
Driver};SourceType=DBC;SourceDb=<i>physical path to .dbc
file</i></td></tr><tr><td width="" height="" colspan="1" rowspan="1">Microsoft Visual FoxPro (without a database container)</td><td width="" height="" colspan="1" rowspan="1">Driver={Microsoft Visual FoxPro
Driver};SourceType=DBF;SourceDb=<i>physical path to .dbf
file</i></td></tr></table><br><p><img src="note.gif" alt="note"><b>
      Note
      </b>Connection strings that use a UNC path to refer to
a data source located on a remote computer can pose a potential
security issue. To prevent unauthorized access of your data source,
create a Windows account for computers requiring access to the data
and then apply appropriate NTFS permissions to the data source. 

For more information, see <a href="sec_acc_ntfssecfiles.htm"><b>Securing Your Files with NTFS</b></a>. </p>
<h2>Advanced Issues to Consider When Designing Web Data
Applications</h2><p>For performance and reliability reasons, it is strongly
recommended that you use a client-server database engine for the
deployment of data driven Web applications that require high-demand
access from more than approximately 10 concurrent users. Although
ADO works with any OLE DB compliant data source, it has been
extensively tested and is designed to work with client server
databases such as Microsoft SQL Server or Oracle.</p><p>ASP supports shared file databases (Microsoft Access or
Microsoft FoxPro) as valid data sources. Although some examples in
the ASP documentation use a <i>shared file</i> database, it is
recommended that these types of database engines be used only for
development purposes or limited deployment scenarios. Shared file
databases may not be as well suited as client-server databases for
very high-demand, production-quality Web applications.</p><p>If you are developing an ASP database application intended to
connect to a remote SQL Server database you should also be aware of
the following issues:</p><ul><li><b>Choosing Connection Scheme for SQL Server</b> You can
choose between the TCP/IP Sockets and Named Pipes methods for
accessing a remote SQL Server database. With Named Pipes, database
clients must be authenticated by Windows before establishing a
connection, raising the possibility that a remote computer running
named pipes might deny access to a user who has the appropriate SQL
Server access credentials, but does not have a Windows user account
on that computer. Alternatively, connections using TCP/IP Sockets
connect directly to the database server, without connecting through
an intermediary computer - as is the case with Named Pipes. And
because connections made with TCP/IP Sockets connect directly to
the database server, users can gain access through SQL Server
authentication, rather than Windows authentication.</li><li><b>ODBC 80004005 Error</b> If the connection scheme for
accessing SQL Server is not set correctly, users viewing your
database application may receive an ODBC 80004005 error message. To
correct this situation, try using a local named pipe connection
instead of a network named pipe connection if SQL Server is running
on the same computer as IIS. Windows Whistler security rules will
not be enforced because the pipe is a local connection rather than
a network connection, which can be impersonated by the anonymous
user account. Also, in the SQL Server connection string (either in
the Global.asa file or in a page-level script), change the
parameter <b>SERVER=<i>server name</i></b> to <b>
SERVER=(local)</b>. The keyword (local) is a special parameter
recognized by the SQL Server ODBC driver. If this solution does not
work, then try to use a non-authenticated protocol between IIS and
SQL Server, such as TCP/IP sockets. This protocol will work when
SQL Server is running locally or on remote computer.</li><li><p><img src="note.gif" alt="note"><b>
      Note
      </b>To improve performance when connecting to a remote
databases, use TCP/IP Sockets.</p>
</li><li><b>SQL Server Security</b> If you use SQL Server's <i>
Integrated</i> or <i>Mixed</i> security features, and the SQL
Server database resides on a remote server, you will not be able to
use integrated Windows authentication. Specifically, you cannot
forward integrated Windows authentication credentials to the remote
computer. This means that you may have to use Basic authentication,
which relies on the user to provide user name and password
information.</li></ul><p>For more information about these issues, <a href="http://www.microsoft.com/windows2000/support/" target="_New"><b>Microsoft
Product Support Services Web site</b></a>.</p><h2><a name="H2_37777925">Connecting to a Data
Source</a></h2><p>ADO provides the <b>Connection</b> object for establishing and
managing connections between your applications and OLE DB compliant
data sources or ODBC compliant databases. The <b>Connection</b>
object features properties and methods you can use to open and
close database connections, and to issue queries for updating
information.</p><p>To establish a database connection, you first create an instance
of the <b>Connection</b> object. For example, the following script
instantiates the <b>Connection</b> object and proceeds to open a
connection:</p><pre>
&lt;%
  'Create a connection object.
  Set cnn = Server.CreateObject("ADODB.Connection")
  'Open a connection using the OLE DB connection string.
  cnn.Open  "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=C:\MarketData\ProjectedSales.mdb"
%&gt;
</pre><p><img src="note.gif" alt="note"><b>
      Note
      </b>The connection string does not contain spaces
before or after the equal sign (=).</p>
<p>In this case, the <b>Connection</b> object's <b>Open</b> method
refers to the connection string.</p><h2><a name="H2_37779470">Executing SQL Queries
with the Connection Object</a></h2><p>With the <b>Execute</b> method of the <b>Connection</b> object
you can issue commands to the data sources, such as Structured
Query Language (SQL) queries. (SQL, an industry standard language
for communicating with databases, defines commands for retrieving
and updating information.) The <b>Execute</b> method can accept
parameters that specify the command (or query), the number of data
records affected, and the type of command being used.</p><p>The following script uses the <b>Execute</b> method to issue a
query in the form of a SQL <b>INSERT</b> command, which inserts
data into a specific database table. In this case, the script block
inserts the name <i>Jose Lugo</i> into a database table named <i>
Customers</i>.</p><pre>
&lt;%
  'Define the OLE DB connection string.
  strConnectionString = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=C:\Data\Employees.mdb"

  'Instantiate the Connection object and open a database connection.
  Set cnn = Server.CreateObject("ADODB.Connection")
  cnn.Open strConnectionString

  'Define SQL SELECT statement. 
  strSQL = "INSERT INTO Customers (FirstName, LastName) VALUES ('Jose','Lugo')"   

  'Use the Execute method to issue a SQL query to database. 
  cnn.Execute strSQL,,adCmdText + adExecuteNoRecords
%&gt;
</pre><p>Note that two parameters are specified in the statement used to
execute the query: <b>adCmdText</b> and <b>adExecuteNoRecords</b>.
The optional <b>adCmdText</b> parameter specifies the type of
command, indicating that the provider should evaluate the query
statement (in this case, a SQL query) as a textual definition of a
command. The <b>adExecuteNoRecords</b> parameter instructs ADO to
not create a set of data records if there are no results returned
to the application. This parameter works only with command types
defined as a text definition, such as SQL queries, or stored
database procedures. Although the <b>adCmdText</b> and <b>
adExecuteNoRecords</b> parameters are optional, you should specify
theses parameters when using the <b>Execute</b> method to improve
the performance of your data application.</p><p><img src="important.gif" alt="important"><span style="color:blue;"><b>
     Important
      </b></span>ADO parameters, such as <b>adCmdText</b>, need
to be defined before you can use them in a script. A convenient way
to define parameters is to use a <i>component type library</i>,
which is a file containing definitions for all ADO parameters. To
implement a component type library, it must first be declared. Add
the following the &lt;METADATA&gt; tag to your .asp file or
Global.asa file to declare the ADO type library:</p>
<pre>
&lt;!--METADATA NAME="Microsoft ActiveX Data Objects 2.5 Library" TYPE="TypeLib" UU--&gt;
</pre><p>For details about implementing component type libraries, see the
<a href="asp_basp_usingvariables.htm#usingconstants"><b>Using
Constants</b></a> section of the <a href="asp_basp_usingvariables.htm"><b>Using Variables and Constants</b></a> topic.</p><p>In addition to the SQL <b>INSERT</b> command, you can use the
SQL <b>UPDATE</b> and <b>DELETE</b> commands to change and remove
database information.</p><p>With the SQL <b>UPDATE</b> command you can change the values of
items in a database table. The following script uses the <b>
UPDATE</b> command to change the <code>Customers</code> table's
<code>FirstName</code> fields to <code>Jeff</code> for every <code>
LastName</code> field containing the last name <code>
Smith</code>.</p><pre>
&lt;%
  Set cnn = Server.CreateObject("ADODB.Connection")
  cnn.Open "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=C:\Data\Employees.mdb"
  cnn.Execute "UPDATE Customers SET FirstName = 'Jeff' WHERE LastName = 'Smith' ",,adCmdText + adExecuteNoRecords
%&gt;
</pre><p>To remove specific records from a database table, use the SQL
<b>DELETE</b> command. The following script removes all rows from
the Customers table where the last name is <code>Smith</code>:</p><pre>
&lt;%
  Set cnn = Server.CreateObject("ADODB.Connection")
  cnn.Open "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=C:\Data\Employees.mdb"
  cnn.Execute "DELETE FROM Customers WHERE LastName = 'Smith'",,adCmdText + adExecuteNoRecords
%&gt;
</pre><p><img src="note.gif" alt="note"><b>
      Note
      </b>You must be careful when using the SQL <b>
DELETE</b> command. A <b>DELETE</b> command without an accompanying
<b>WHERE</b> clause will delete all rows from a table. Be sure to
include a SQL <b>WHERE</b> clause, which specifies the exact rows
to be deleted.</p>
<h2><a name="H2_37782547">Using the Recordset
Object for Manipulating Results</a></h2><p>For retrieving data, examining results, and making changes to
your database, ADO provides the <b>Recordset</b> object. As its
name implies, the <b>Recordset</b> object has features that you can
use, depending on your query constraints, for retrieving and
displaying a set of database rows, or <i>records</i>. The <b>
Recordset</b> object maintains the position of each record returned
by a query, thus enabling you to step through results one item at a
time.</p><h3><a name="H3_37784801">Retrieving a Record
Set</a></h3><p>Successful Web data applications employ both the <b>
Connection</b> object, to establish a link, and the <b>
Recordset</b> object, to manipulate returned data. By combining the
specialized functions of both objects you can develop database
applications to carry out almost any data handling task. For
example, the following server-side script uses the <b>Recordset</b>
object to execute a SQL <b>SELECT</b> command. The <b>SELECT</b>
command retrieves a specific set of information based on query
constraints. The query also contains a SQL <b>WHERE</b> clause,
used to narrow down a query to a specific criterion. In this
example, the <b>WHERE</b> clause limits the query to all records
containing the last name <i>Smith</i> from the <i>Customers</i>
database table.</p><pre>
&lt;%
  'Establish a connection with data source.  
  strConnectionString  = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=C:\Data\Employees.mdb"  
  Set cnn = Server.CreateObject("ADODB.Connection")
  cnn.Open strConnectionString

  'Instantiate a Recordset object.
  Set rstCustomers = Server.CreateObject("ADODB.Recordset")
  
  'Open a recordset using the Open method
  'and use the connection established by the Connection object.
  strSQL = "SELECT FirstName, LastName FROM Customers WHERE LastName = 'Smith' "
  rstCustomers.Open  strSQL, cnn    
  
  'Cycle through record set and display the results
  'and increment record position with MoveNext method.
   Set objFirstName = rstCustomers("FirstName") 
   Set objLastName = rstCustomers("LastName")  
   Do Until rstCustomers.EOF   
     Response.Write objFirstName &amp; " " &amp; objLastName &amp; "&lt;BR&gt;"
     rstCustomers.MoveNext
   Loop

%&gt;
</pre><p>Note that in the previous example, the <b>Connection</b> object
established the database connection, and the <b>Recordset</b>
object used the same connection to retrieve results from the
database. This method is advantageous when you need to precisely
configure the way in which the link with the database is
established. For example, if you needed to specify the time delay
before a connection attempt aborts, you would need to use the <b>
Connection</b> object to set this property. However, if you just
wanted to establish a connection using ADO's default connection
properties, you could use <b>Recordset</b> object's <b>Open</b>
method to establish a link:</p><pre>
&lt;%
  strConnectionString  = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=C:\Data\Employees.mdb"
  strSQL = "SELECT FirstName, LastName FROM Customers WHERE LastName = 'Smith' "
  Set rstCustomers = Server.CreateObject("ADODB.Recordset")

  'Open a connection using the Open method
  'and use the connection established by the Connection object.
  rstCustomers.Open  strSQL, strConnectionString    
  
  'Cycle through the record set, display the results,
  'and increment record position with MoveNext method.
   Set objFirstName = rstCustomers("FirstName") 
   Set objLastName = rstCustomers("LastName") 
   Do Until rstCustomers.EOF
      Response.Write objFirstName &amp; " " &amp; objLastName &amp; "&lt;BR&gt;"
      rstCustomers.MoveNext
   Loop
%&gt;
</pre><p>When you establish a connection using the <b>Recordset</b>
object's <b>Open</b> method to establish a connection, you are
implicitly using the <b>Connection</b> object to secure the link.
For more information, see Microsoft ActiveX Data Objects (ADO)
documentation available from the <a href="http://www.microsoft.com/data/default.htm" target="_New"><b>Microsoft
Universal Data Access Web site</b></a>.</p><p><img src="note.gif" alt="note"><b>
      Note
      </b>To significantly improve the performance of your
ASP database applications, consider caching the recordset in <b>
Application</b> state. For more information, see <a href="dwa_des_conappfloccspcac.htm"><b>Caching Data</b></a>.</p>
<p>It is often useful to count the number of records returned in a
recordset. The <b>Open</b> method of the <b>Recordset</b> object
enables you to specify an optional <i>cursor</i> parameter that
determines how the underlying provider retrieves and navigates the
recordset. By adding the <b>adOpenKeyset</b> cursor parameter to
the statement used to execute the query, you enable the client
application to fully navigate the recordset. As a result, the
application can use the <b>RecordCount</b> property to accurately
count the number of records in the recordset. See the following
example:</p><pre>
&lt;%
    Set rs = Server.CreateObject("ADODB.Recordset")
    rs.Open "SELECT * FROM NewOrders", "Provider=Microsoft.Jet.OLEDB.3.51;Data Source='C:\CustomerOrders\Orders.mdb'", adOpenKeyset, adLockOptimistic, adCmdText 
    
    'Use the RecordCount property of the Recordset object to get count.
    If rs.RecordCount &gt;= 5 then
      Response.Write "We've received the following " &amp; rs.RecordCount &amp; " new orders&lt;BR&gt;" 
    
      Do Until rs.EOF
        Response.Write rs("CustomerFirstName") &amp; " " &amp; rs("CustomerLastName") &amp; "&lt;BR&gt;"
        Response.Write rs("AccountNumber") &amp; "&lt;BR&gt;"
        Response.Write rs("Quantity") &amp; "&lt;BR&gt;"         
        Response.Write rs("DeliveryDate") &amp; "&lt;BR&gt;&lt;BR&gt;"
            rs.MoveNext
      Loop

    Else             
      Response.Write "There are less than " &amp; rs.RecordCount &amp; " new orders."       
    End If
       
   rs.Close
%&gt;
</pre><h2><a name="H2_37787604">Improving Queries with
the Command Object</a></h2><p>With the ADO <b>Command</b> object you can execute queries in
the same way as queries executed with the <b>Connection</b> and <b>
Recordset</b> object, except that with the <b>Command</b> object
you can prepare, or compile, your query on the database source and
then repeatedly reissue the query with a different set of values.
The benefit of compiling queries in this manner is that you can
vastly reduce the time required to reissue modifications to an
existing query. In addition, you can leave your SQL queries
partially undefined, with the option of altering portions of your
queries just prior to execution.</p><p>The <b>Command</b> object's <b>Parameters</b> collection saves
you the trouble of reconstructing your query each time you want to
reissue your query. For example, if you need to regularly update
supply and cost information in your Web-based inventory system, you
can predefine your query in the following way:</p><pre>
&lt;%  
    'Open a connection using Connection object. Notice that the Command object
    'does not have an Open method for establishing a connection.
    strConnectionString = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=C:\Data\Inventory.mdb" 
    Set cnn = Server.CreateObject("ADODB.Connection")
    cnn.Open strConnectionString

    'Instantiate Command object; use ActiveConnection property to attach 
    'connection to Command object.
    Set cmn= Server.CreateObject("ADODB.Command")
    Set cmn.ActiveConnection = cnn
 
    'Define SQL query.
    cmn.CommandText = "INSERT INTO Inventory (Material, Quantity) VALUES (?, ?)" 

    'Save a prepared (or pre-compiled) version of the query specified in CommandText
    'property before a Command object's first execution. 
    cmn.Prepared = True

    'Define query parameter configuration information.
    cmn.Parameters.Append cmn.CreateParameter("material_type",adVarChar, ,255 )
    cmn.Parameters.Append cmn.CreateParameter("quantity",adVarChar, ,255 )

    'Define and execute first insert.
    cmn("material_type") = "light bulbs" 
    cmn("quantity") = "40" 
    cmn.Execute ,,adCmdText + adExecuteNoRecords
  
    'Define and execute second insert.
    cmn("material_type") = "fuses" 
    cmn("quantity") = "600" 
    cmn.Execute ,,adCmdText + adExecuteNoRecords
    .
    .
    .
  %&gt;
</pre><p><img src="important.gif" alt="important"><span style="color:blue;"><b>
     Important
      </b></span>ADO parameters, such as <b>adCmdText</b>, are
simply variables, this means that before using an ADO parameter in
a data access script you need to define its value. Since ADO uses a
large number of parameters, it is easier to define parameters by
means of a <i>component type library</i>, a file containing
definitions for every ADO parameter and constant. For details about
implementing ADO's type library, see the <a href="asp_basp_usingvariables.htm#usingconstants"><b>Using
Constants</b></a> section of the <a href="asp_basp_usingvariables.htm"><b>Using Variables and Constants</b></a> topic.</p>
<p>In the previous example, you will note that the script
repeatedly constructs and reissues a SQL query with different
values, without having to redefine and resend the query to the
database source. Compiling your queries with the <b>Command</b>
object also offers you the advantage of avoiding problems that can
arise from concatenating strings and variables to form SQL queries.
In particular, by using the <b>Command</b> object's <b>
Parameter</b> collection, you can avoid problems related to
defining certain types of string, date, and time variables. For
example, SQL query values containing apostrophes (') can cause a
query to fail:</p><pre>
  strSQL = "INSERT INTO Customers (FirstName, LastName) VALUES ('Robert','O'Hara')" 
</pre><p>Note that the last name <b>O'Hara</b> contains an apostrophe,
which conflicts with the apostrophes used to denote data in the SQL
<b>VALUES</b> keyword. By binding the query value as a <b>
Command</b> object parameter, you avoid this type of problem.</p><h2><a name="H2_37790742">Combining HTML Forms and
Database Access</a></h2><p>Web pages containing HTML forms can enable users to remotely
query a database and retrieve specific information. With ADO you
can create surprisingly simple scripts that collect user form
information, create a custom database query, and return information
to the user. Using the ASP <b>Request</b> object, you can retrieve
information entered into an HTML form and incorporate this
information into your SQL statements. For example, the following
script block inserts information supplied by an HTML form into a
table. The script collects the user information with the <b>
Request</b> object 's <b>Form</b> collection.</p><pre>
&lt;%
  'Open a connection using Connection object. The Command object
  'does not have an Open method for establishing a connection.
   strConnectionString = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=D:\CompanyCatalog\Seeds.mdb" 
    Set cnn = Server.CreateObject("ADODB.Connection")
    cnn.Open strConnectionString

  'Instantiate Command object
  'and  use ActiveConnection property to attach
  'connection to Command object.
  Set cmn= Server.CreateObject("ADODB.Command")
  Set cmn.ActiveConnection = cnn
 
  'Define SQL query.
  cmn.CommandText = "INSERT INTO MySeedsTable (Type) VALUES (?)" 

  'Define query parameter configuration information.
  cmn.Parameters.Append cmn.CreateParameter("type",adVarChar, ,255)

  'Assign input value and execute update.
  cmn("type") = Request.Form("SeedType") 
  cmn.Execute ,,adCmdText + adExecuteNoRecords
%&gt;
</pre><p>For more information about forms and using the ASP <b>
Request</b> object, see <a href="asp_basp_processuserin.htm"><b>Processing User Input</b></a>.</p><h2><a name="H2_37792280">Managing Database
Connections</a></h2><p>One of the main challenges of designing a sophisticated Web
database application, such as an online order entry application
that services thousands of customers, is properly managing database
connections. Opening and maintaining database connections, even
when no information is being transmitted, can severely strain a
database server's resources and result in connectivity problems.
Well designed Web database applications recycle database
connections and compensate for delays due to network traffic.</p><h3><a name="H3_37793252">Timing Out a
Connection</a></h3><p>A database server experiencing a sudden increase in activity can
become backlogged, greatly increasing the time required to
establish a database connection. As a result, excessive connection
delays can reduce the performance of your database application.</p><p>With the <b>Connection</b> object's <b>ConnectionTimeout</b> you
can limit the amount of time that your application waits before
abandoning a connection attempt and issuing an error message. For
example, the following script sets the <b>ConnectionTimeout</b>
property to wait twenty seconds before cancelling the connection
attempt:</p><pre>
Set cnn = Server.CreateObject("ADODB.Connection")
cnn.ConnectionTimeout = 20
cnn.Open "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=C:\Data\Inventory.mdb"

</pre><p>The default for the <b>ConnectionTimeout</b> property is 30
seconds.</p><p><img src="note.gif" alt="note"><b>
      Note
      </b>Before incorporating the <b>ConnectionTimeout</b>
property into your database applications, make sure that your
connection provider and data source support this property.</p>
<h3><a name="H3_37794400">Pooling
Connections</a></h3><p>Connection pooling enables your Web application to use a
connection from a <i>pool</i>, or reservoir of free connections
that do not need to be reestablished. After a connection has been
created and placed in a pool, your application reuses that
connection without having to perform the connection process. This
can result in significant performance gains, especially if your
application connects over a network or repeatedly connects and
disconnects. In addition, a pooled connection can be used
repeatedly by multiple applications.</p><h4>OLE DB Session Pooling</h4><p>OLE DB has a pooling feature, called <i>session pooling</i>,
optimized for improving connectivity performance in large Web
database applications. Session pooling preserves connection
security and other properties. A pooled connection is only reused
if matching requests are made from both sides of the connection. By
default, the OLE DB providers for Microsoft SQL server and Oracle
support session pooling. This means that you do not have to
configure your application, server, or database to use session
pooling. However, if your provider does not support session pooling
by default, you need to create a registry setting to enable session
pooling. For more information about session pooling, see the OLE DB
2.0 Software Development Kit (SDK) documentation.</p><h4>ODBC Connection Pooling</h4><p>If you want your ODBC driver to participate in connection
pooling you must configure your specific database driver and then
set the driver's <b>CPTimeout</b> property in the Windows registry.
The <b>CPTimeout</b> property determines the length of time that a
connection remains in the connection pool. If the connection
remains in the pool longer than the duration set by <b>
CPTimeout</b>, the connection is closed and removed from the pool.
The default value for <b>CPTimeout</b> is 60 seconds.</p><p>You can selectively set the <b>CPTimeout</b> property to enable
connection pooling for a specific ODBC database driver by creating
a registry key with the following settings:</p><pre>
\HKEY_LOCAL_MACHINE\SOFTWARE\ODBC\ODBCINST.INI\driver-name\CPTimeout = timeout 
 (REG_SZ, units are in seconds)
</pre><p>For example, the following key sets the connection pool timeout
to 180 seconds (3 minutes) for the SQL Server driver.</p><pre>
\HKEY_LOCAL_MACHINE\SOFTWARE\ODBC\ODBCINST.INI\SQL Server\CPTimeout = 180
</pre><p><img src="note.gif" alt="note"><b>
      Note
      </b>By default, your Web server activates connection
pooling for SQL Server by setting <b>CPTimeout</b> to 60
seconds.</p>
<h3><a name="H3_37796346">Using Connections Across
Multiple Pages</a></h3><p>Although you can reuse a connection across multiple pages by
storing the connection in ASP's <b>Application</b> object, doing so
may unnecessarily keep open a connection open, defeating the
advantages of using connection pooling. If you have many users that
need to connect to the same ASP database application, a better
approach is to reuse a database connection string across several
Web pages by placing the string in ASP's <b>Application</b> object.
For example, you can specify a connection string in the Global.asa
file's Application_OnStart event procedure, as in the following
script:</p><pre>
Application("ConnectionString") = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=C:\Data\Inventory.mdb"
</pre><p>Then in each ASP file that accesses the database, you can
write</p><pre>
&lt;OBJECT RUNAT=SERVER ID=cnn PROG&gt;&lt;/OBJECT&gt;
</pre><p>to create an instance of the connection object for the page, and
use the script</p><pre>
cnn.Open Application("ConnectionString")
</pre><p>to open the connection. At the end of the page, you close the
connection with</p><pre>
cnn.Close
</pre><p>In the case of an individual user who needs to reuse a
connection across multiple Web pages, you may find it more
advantageous to use the <b>Session</b> object rather than the <b>
Application</b> object for storing the connection string.</p><h3><a name="H3_37797541">Closing
Connections</a></h3><p>To make the best use of connection pooling, explicitly close
database connections as soon as possible. By default, a connection
terminates after your script finishes execution. However, by
explicitly closing a connection in your script after it is no
longer needed, you reduce demand on the database server and make
the connection available to other users.</p><p>You can use <b>Connection</b> object's <b>Close</b> method to
explicitly terminate a connection between the <b>Connection</b>
object and the database. The following script opens and closes a
connection:</p><pre>
&lt;%
  strConnectionString = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=C:\Data\Inventory.mdb"
  Set cnn = Server.CreateObject("ADODB.Connection")
  cnn.Open strConnectionString
  cnn.Close
%&gt;
</pre><hr class="iis" size="1">
<p align="center"><i><a href="/iishelp/common/colegal.htm">© 1997-2001 Microsoft Corporation. All rights reserved.</a></i></p>
</body>
</html>
