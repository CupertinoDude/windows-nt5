<html xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:myScript="http://iisue">
<head>
<META http-equiv="Content-Type" content="text/html; charset=UTF-16">
<meta http-equiv="Content-Type" content="text/html; charset=Windows-1252">
<meta http-equiv="PICS-Label" content="(PICS-1.1 &quot;<http://www.rsac.org/ratingsv01.html>&quot; l comment &quot;RSACi North America Server&quot; by &quot;inet@microsoft.com <mailto:inet@microsoft.com>&quot; r (n 0 s 0 v 0 l 0))">
<meta name="MS.LOCALE" content="EN-US">
<meta name="MS-IT-LOC" content="Internet Information Services">
<meta name="MS-HAID" content="Building_on_the_Client/Server_Architecture">
<meta name="description" content="Internet Information Services reference information">
<title>Building on the Client/Server Architecture</title><SCRIPT LANGUAGE="JScript" SRC="iishelp.js"></SCRIPT></head>
<body>
<p style="color:red">[This is preliminary documentation and subject to change]</p>
<h1>Building on the Client/Server Architecture</h1><p>Before delving into the details of building a Web-based
application, it might be helpful to review the architectural model
of the Web, and the roles of the browser and server in that
model.</p><p>Typically, cooperating applications can be categorized as either
a client or a server. The client application requests services and
data from the server, and the server application responds to client
requests. Early two-tier (client/server) applications were
developed to access large databases, and incorporated the rules
used to manipulate the data with the user interface into the client
application. The server's task was simply to process as many
requests for data storage and retrieval as possible.</p><p>Two-tier applications perform many of the functions of
stand-alone systems: They present a user interface, gather and
process user input, perform the requested processing, and report
the status of the request. This sequence of commands can be
repeated as many times as necessary. Because servers provide only
access to the data, the client uses its local resources to perform
most of the processing. The client application must contain
information about where the data resides and how it is organized in
the database. Once the data has been retrieved, the client is
responsible for formatting and displaying it to the user.</p><p>One major advantage of the client/server model was that by
allowing multiple users to simultaneously access the same
application data, updates from one computer were instantly made
available to all computers that had access to the server. However,
as the number of clients increased, the server would quickly become
overwhelmed with client requests. Also, because much of the
processing logic was tied to a monolithic suite of applications,
changes in business rules led to expensive and time-consuming
alterations to source code. Although the ease and flexibility of
two-tier products continue to drive many small-scale business
applications, the need for faster data access and more rapid
developmental timelines has persuaded systems developers to seek
out a new way of creating distributed applications.</p><hr class="iis" size="1">
<p align="center"><i><a href="/iishelp/common/colegal.htm">© 1997-2001 Microsoft Corporation. All rights reserved.</a></i></p>
</body>
</html>
