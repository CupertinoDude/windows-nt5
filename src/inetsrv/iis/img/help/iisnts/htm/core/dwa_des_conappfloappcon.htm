<html xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:myScript="http://iisue">
<head>
<META http-equiv="Content-Type" content="text/html; charset=UTF-16">
<meta http-equiv="Content-Type" content="text/html; charset=Windows-1252">
<meta http-equiv="PICS-Label" content="(PICS-1.1 &quot;<http://www.rsac.org/ratingsv01.html>&quot; l comment &quot;RSACi North America Server&quot; by &quot;inet@microsoft.com <mailto:inet@microsoft.com>&quot; r (n 0 s 0 v 0 l 0))">
<meta name="MS.LOCALE" content="EN-US">
<meta name="MS-IT-LOC" content="Internet Information Services">
<meta name="MS-HAID" content="Application_Control_Techniques">
<meta name="description" content="Internet Information Services reference information">
<title>Application Control Techniques</title><SCRIPT LANGUAGE="JScript" SRC="iishelp.js"></SCRIPT></head>
<body>
<p style="color:red">[This is preliminary documentation and subject to change]</p>
<h2>Application Control Techniques</h2><p>ASP provides six different ways to affect the general flow of
execution. These six methods are depicted in the following
diagrams. The arrows in the diagrams represent the flow of
execution.</p><h4>Redirecting</h4><p><img src="pf_redir.gif" alt="Process Flow - Redirection"></p><p>Redirection is the process of diverting a request to another
location. Redirecting requires a new request to be sent to the
server. However, in general, you should design your application to
minimize the amount of communication between the client and server.
Many design problems that have been addressed by redirecting in the
past can now be accomplished by transferring, which does not
initiate a new request. See <a href="dwa_des_conappfloccsp.htm"><b>Coordinating Client/Server Processing</b></a> for more information on
this aspect of application design.</p><p>You can accomplish redirecting by using the <a href="ref_vbom_resomre.htm"><b>Redirect</b></a>
method.</p><h4>Transferring</h4><p><img src="pf_trans.gif" alt="Process Flow - Transfer"></p><p>The ability to transfer a request from one ASP page to another
was introduced in IIS 5.0. Transferring is similar to
redirecting; however, it does not require that a new request be
initiated. This is a much more efficient way to control application
flow. If you transfer the request to an ASP page outside of the
application boundary, the boundary will be temporarily extended to
include the external ASP page. The external ASP page will behave as
if it were included within the application boundary of the calling
ASP page. Therefore, any objects or variables that have been given
application scope will still be available in the ASP page to which
you have transferred. In addition to being faster than redirecting,
transferring preserves all of the ASP built-in objects from the
original request, including form values from an HTTP post.</p><p>You can accomplish transferring by using the <a href="ref_vbom_seromtr.htm"><b>Transfer</b></a> method.</p><h4>Executing</h4><p><img src="pf_exec.gif" alt="Process Flow - Execute"></p><p>The ability to execute a particular ASP script and return the
result was introduced in IIS 5.0. Executing is similar to a
procedure call in most programming languages. This method of
application flow control is appropriate if you have developed an
ASP application that accomplishes some function that you want to
incorporate, but have not built that function into a component.</p><p>You can accomplish executing by using the <a href="ref_vbom_seromexe.htm"><b>Execute</b></a> method.</p><h4>Component Invocation</h4><p><img src="pf_comp.gif" alt="Process Flow - Component Invocation"></p><p>This is probably the most common way to control the flow of an
application. The COM programming model is integral to the Windows
DNA, and should address the vast majority of design problems.
Script Components, a technology supported in IIS 5.1, make it
easier to take existing scripts and convert them to components.</p><p>You can accomplish component invocation by using the <a href="ref_vbom_seromco.htm"><b>CreateObject</b></a> method.
For more information on script components, see <a href="dwa_tec_wsc.htm"><b>Windows Script Components</b></a> and <a href="asp_basp_usingcomp.htm"><b>Using Components and Objects</b></a>.</p><h4>Exiting</h4><p><img src="pf_exit.gif" alt="Process Flow - Exiting"></p><p>Under normal circumstances you will want your ASP application to
complete each line of script in the page. There may be some
circumstances, however, where you will need to simply end the
response. For example, if you have detected  (by using the <a href="ref_vbom_resopicc.htm"><b>IsClientConnected</b></a>
method) that the client is no longer waiting for a response, you
will want to terminate the ASP application.</p><p>You can accomplish exiting the ASP by using the <a href="ref_vbom_resomend.htm"><b>End</b></a> method.</p><h4>Procedural Processing</h4><p><img src="pf_proc.gif" alt="Process Flow - Procedures"></p><p>If you want to define subroutines or functions within your .asp
file, you can do so by using the procedure syntax that is
appropriate for the scripting language you are using. For example,
VBScript defines subroutines with the <b>Sub ... End Sub</b> syntax
and functions with the <b>Function ... End Function</b> syntax.
JScript, on the other hand, supports procedural processing through
function calls. For more information on subroutine processing, see
<a href="asp_basp_writingprocs.htm"><b>Writing Procedures</b></a>.</p><hr class="iis" size="1">
<p align="center"><i><a href="/iishelp/common/colegal.htm">© 1997-2001 Microsoft Corporation. All rights reserved.</a></i></p>
</body>
</html>
