<html xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:myScript="http://iisue">
<head>
<META http-equiv="Content-Type" content="text/html; charset=UTF-16">
<meta http-equiv="Content-Type" content="text/html; charset=Windows-1252">
<meta http-equiv="PICS-Label" content="(PICS-1.1 &quot;<http://www.rsac.org/ratingsv01.html>&quot; l comment &quot;RSACi North America Server&quot; by &quot;inet@microsoft.com <mailto:inet@microsoft.com>&quot; r (n 0 s 0 v 0 l 0))">
<meta name="MS.LOCALE" content="EN-US">
<meta name="MS-IT-LOC" content="Internet Information Services">
<meta name="MS-HAID" content="Sending_Content_to_the_Browser">
<meta name="description" content="Explains how to control the response returned to a browser, including buffering the content. Briefly covers sending files from the browser to the server.">
<title>Sending Content to the Browser</title><SCRIPT LANGUAGE="JScript" SRC="iishelp.js"></SCRIPT></head>
<body>
<p style="color:red">[This is preliminary documentation and subject to change]</p>
<h1>Sending Content to the Browser</h1><p>As a script in an ASP page is processed, any text or graphics
not enclosed within ASP delimiters or &lt;SCRIPT&gt; tags is simply
returned to the browser. You can also explicitly send content to
the browser by using the <b>Response</b> object.</p><h2><a name="H2_37769829">Sending Content</a></h2><p>To send content to the browser from within ASP delimiters or
from a procedure, use the <b>Write</b> method of the <b>
Response</b> object. For example, the following statement sends a
different greeting to the user depending on whether the user has
visited the page before:</p><pre>
&lt;% 
  If blnFirstTime Then 
    Response.Write "&lt;H3 ALIGN=CENTER&gt;Welcome to the Overview Page.&lt;/H3&gt;"
  Else
    Response.Write "&lt;H3 ALIGN=CENTER&gt;Welcome Back to the Overview Page.&lt;/H3&gt;" 
  End If 
%&gt;
</pre><p>Outside of a procedure, you do not have to use <b>
Response.Write</b> to send content back to the user. Content that
is not within scripting delimiters is sent directly to the browser,
which formats and displays this content accordingly. For example,
the following script produces the same output as the previous
script:</p><pre>
&lt;H3 ALIGN=CENTER&gt; 
&lt;% If blnFirstTime Then %&gt; 
  Welcome to the Overview Page. 
&lt;% Else %&gt; 
  Welcome Back to the Overview Page. 
&lt;% End If %&gt; 
&lt;/H3&gt;
</pre><p>Intersperse script commands and HTML when you just need to
return output once or when it is more convenient to add statements
to existing HTML text. Use <b>Response.Write</b> when you do not
want to break up a statement with delimiters or when you want to
build the string that is returned to the browser. For example, you
could construct a string of text that builds a table row with
values sent by an HTML form:</p><pre>
Response.Write "&lt;TR&gt;&lt;TD&gt;" &amp; Request.Form("FirstName") _
 &amp; "&lt;/TD&gt;&lt;TD&gt;" &amp; Request.Form("LastName") &amp; "&lt;/TD&gt;&lt;/TR&gt;"
</pre><p><b>Request.Form</b> returns the values sent from an HTML form
(see <a href="asp_basp_processuserin.htm"><b>Processing User Input</b></a>).</p><p><img src="note.gif" alt="note"><b>
      Note
      </b>The ampersand character (&amp;) is the
string-concatenation character for VBScript. The underscore (_) is
the VBScript line-continuation character.</p>
<h2><a name="H2_37772109">Setting the Content
Type</a></h2><p>When the Web server returns a file to a browser, it tells the
browser what type of content is contained in the file. This enables
the browser to determine whether it can display the file itself or
whether it has to call another application. For example, if the Web
server returns a Microsoft Excel worksheet, the browser must be
able to start a copy of Microsoft Excel to display the page. The
Web server recognizes file types by mapping the file name extension
to a list of <i>MIME</i> (Multipurpose Internet Mail Extensions)
types. For example, to start Microsoft Excel, the browser needs to
recognize the application/vnd.ms-excel MIME type.</p><p>You can use the <a href="ref_vbom_resopct.htm"><b>ContentType</b></a> property of the <b>Response</b> object to set
the HTTP content type string for the content you send to a user.
For example, the following command sets the content type for
channel definitions:</p><pre>
&lt;% Response.ContentType = "application/x-cdf" %&gt;
</pre><p>For more information about channels, see <a href="#channels"><b>
Creating Dynamic Channels</b></a> in this topic.</p><p>Other common content types are text/plain (for content returned
as text instead of interpreted HTML statements), image/gif (for GIF
images), image/jpeg (for JPEG images), video/quicktime (for movies
in the Apple QuickTime® format), and text/xml (for XML
documents). In addition, a Web server or Web browser may support
custom MIME types. To see the content types already defined by your
Microsoft Web server, use the 

<a href="gs_iissnapin.htm"><b>IIS snap-in</b></a> to open the
property sheets for your Web site, click the <b>HTTP Headers</b>
tab, and then click the <b>File Types</b> tab. These file types may
be used as a reference when you choose to manually set the content
type with ASP.</p><h2><a name="H2_37773741">Redirecting the
Browser</a></h2><p>Instead of sending content to a user, you can redirect the
browser to another URL with the <b>Redirect</b> method. For
example, if you want to make sure users have entered your
application from a home page so that they receive a customer ID,
you can check to see if they have a customer ID; if they do not,
you can redirect them to the home page.</p><pre>
&lt;%
  If Session("CustomerID") = "" Then
    Response.Redirect "Register.asp" 
  End If
%&gt;
</pre><p>server-side scripts which are processed before any content is
sent to the user are said to be <i>buffered</i>. ASP enables you to
turn buffering on or off, and this configuration can greatly affect
the behavior of the <b>Redirect</b> method. Specifically, if you
have buffering turned off, then you must redirect the browser
before your page's HTTP headers are returned to the browser.</p><p>Place the <b>Response.Redirect</b> statement at the top of the
page, before any text or &lt;HTML&gt; tags, to ensure that
nothing has been returned to the browser. If you use <b>
Response.Redirect</b> after content or headers have been returned
to the browser, you will see an error message. Also note that <b>
Response.Redirect</b> does <i>not</i> need to be followed by <b><a href="ref_vbom_resomend.htm"><b>End</b></a></b>.</p><p>If you want to use <b>Response.Redirect</b> from the middle of a
page, use it along with the <b>Response.Buffer</b> property, as
explained in the <a href="#buffcnt"><b>Buffering Content</b></a> section
in this topic.</p><h2><a name="H2_633205286"></a>Transferring
Between .ASP Files</h2><p>Using <b>Response.Redirect</b> to redirect a browser requires a
<i>round-trip</i>, meaning that the server sends an HTTP response
to the browser indicating the location of the new URL. The browser
automatically leaves the server's request queue and sends a new
HTTP request for this URL. The server then adds this request to the
request queue along with other client's requests that arrived in
the meantime. For a busy Web site, round-trips can waste bandwidth
and reduce server performance-especially when the browser is
redirected to a file located on the same server.</p><p>You can use the <b>Server.Transfer</b> method to transfer from
one .asp file to another file located on the same server instead of
the <b>Response.Redirect</b> method. With <b>Server.Transfer</b>
you can directly transfer requests for .asp files without ever
leaving the server request queue, thus eliminating costly
round-trips.</p><p>For example, the following script demonstrates how you could use
<b>Server.Transfer</b> to jump between the pages of an application
depending on state information:</p><pre>
&lt;%
  If Session("blnSaleCompleted") Then
    Server.Transfer("/Order/ThankYou.asp")
  Else
    Server.Transfer("/Order/MoreInfo.asp")
  End if
%&gt;

</pre><p><b>Server.Transfer</b> sends requests from one executing .asp
file to another file. During a transfer, the originally requested
.asp file immediately terminates execution without clearing the
output buffer (for more information, see the <a href="#buffcnt"><b>
Buffering Content</b></a> section). Request information is then made
available to the destination file when it begins execution. During
execution, this file has access to the same set of intrinsic
objects (<b>Request</b>, <b>Response</b>, <b>Server</b>, <b>
Session</b>, and <b>Application</b>) as the originally requested
file.</p><p>You can also use <b>Server.Transfer</b> to transfer between .asp
files located in different applications. However, when you transfer
to an .asp file located in another application, the file will
behave as if it was part of the application that initiated the
transfer (that is, the file has access only to variables scoped for
the initiating application, not for the application where the file
actually resides). For example, if you transfer from a file located
in the Sales Application to a file located in the Personnel
Application, then the Sales Application effectively borrows this
file from the Personnel Application and runs it as if it were part
of the Sales Application.</p><p>ASP also provides the <b>Server.Execute</b> command that you can
use to transfer to a file, execute its content, and then return to
the file that initiated the transfer. If you are familiar with
VBScript, it will help you to think of <b>Server.Execute</b> as
analogous to a procedure call, except that instead of executing a
procedure, you are executing an entire .asp file.</p><p>For example, the following script demonstrates how you could use
<b>Server.Execute</b> to do dynamic inclusion of .asp files:</p><pre>
&lt;%
  .
  .
  .
  If blnUseDHTML Then
    Server.Execute("DHTML.asp")
  Else
    Server.Execute("HTML.asp")
  End If
  .
  .
  .
%&gt;

</pre><p>As long as the destination file belongs to an application on the
same server, the originating application will transfer to this
file, execute its contents, and then resume executing the file that
initiated the transfer. Just as with <b>Server.Transfer</b>, an
executed .asp file behaves as if it were part of the originating
application. <b>Server.Execute</b>, however, will <i>not</i> work
across servers. For more information, see <a href="ref_vbom_seromexe.htm"><b>Execute</b></a>.</p><h2><a name="buffcnt">Buffering Content</a></h2><p>By default, the Web server processes all script commands on a
page before any content is sent to the user. This process is known
as <i>buffering</i>. You can use the <b>Buffer</b> property of the
<b>Response</b> object to disable buffering, so that the Web server
returns HTML and the results of scripts as it processes a page.</p><p>The advantage of buffering your .asp files is that you can abort
sending a Web page if, for example, the script processing does not
proceed correctly or if a user does not have appropriate security
credentials. Instead, you can transfer the user to another page
using <b>Server.Transfer</b>, or clear the buffer (using the the
<b>Clear</b> method of the <b>Response</b> object) to send
different content to the user. Depending on your application, you
may want to use the <b>Clear</b> method before transferring. The
following example uses both of these methods:</p><pre>
&lt;HTML&gt;
  &lt;BODY&gt;
  .
  .
  .
  &lt;%
    If Request("CustomerStatus") = "" Then
      Response.Clear
      Server.Transfer("/CustomerInfo/Register.asp")
    Else
      Response.Write "Welcome back " &amp; Request("FirstName") &amp; "!"
            .
            .
            .
    End If
  %&gt;
  &lt;/BODY&gt;
&lt;/HTML&gt;
</pre><p>You could also use <b>Response.Buffer</b> to prevent the Web
server from returning the HTTP header before a script can modify
the header. Certain properties and methods, such as <b>
Response.Expires</b> and <b>Response.Redirect,</b> modify the HTTP
header.</p><p>If the <b>Buffer</b> property in a script is set to TRUE without
also calling the <b>Flush</b> method to immediately send buffered
content to the browser, the server will maintain Keep-Alive
requests made by the client. The benefit of writing scripts in this
manner is that server performance is improved because the server
does not have to create a new connection for each client request
(assuming that the server, client, and any proxy servers all
support Keep-Alive requests). However, a potential drawback to this
approach is that buffering prevents the server's response from
being sent to the user until the server has finished processing the
entire script. For long or complicated scripts, users could
experience long wait times before seeing the page.</p><p>Buffering is turned on by default for ASP applications. You can
use the 

<a href="gs_iissnapin.htm"><b>IIS snap-in</b></a> to turn off
buffering for an entire ASP application. 

For more information, see <a href="ca_configasp.htm"><b>Configuring ASP Applications</b></a>.</p><h2><a name="H2_37777557">Allowing Proxy Servers
to Cache Pages</a></h2><p>Your application may be sending pages to a client through a <i>
proxy server</i>. A proxy server acts on behalf of client browsers
to request pages from Web sites. The proxy server caches HTML pages
so that repeated requests for the same page can be returned quickly
and efficiently to browsers. Having the proxy server process
requests and cache pages reduces the load on the network and on the
Web server.</p><p>Although caching works well for many HTML pages, it often does
not work well for ASP pages that contain frequently updated
information. For example, pages that report stock market prices or
display inventory for a high-volume business must provide timely
information. Information that is even one hour old might not be
accurate enough. If your application returns personalized
information, such as a custom home page, you want to ensure that no
user sees another user's personal information.</p><p>By default, ASP instructs proxy servers not to cache the ASP
page itself (although images, image maps, applets, and other items
referenced from the page are cached). You can allow caching for
certain pages by using the <b>Response.CacheControl</b> property to
set the Cache-Control HTTP header field. The default value of <b>
Response.CacheControl</b> is the string "Private", which prevents
proxy servers from caching the page. To allow caching, set the
Cache-Control header field to Public:</p><pre>
&lt;% Response.CacheControl = "Public" %&gt;
</pre><p>Because HTTP headers must be sent to the browser or proxy before
any page content is sent, either put the <b>
Response.CacheControl</b> property before any HTML tags or, if you
have disabled buffering, use <b>Response.Buffer</b> to buffer the
page.</p><p>The Cache-Control header field is part of the HTTP 1.1
specification. ASP pages are not cached on proxy servers that
support only HTTP 1.0 because no Expires header field is
sent.</p><h2><a name="H2_37779593">Preventing Browsers from
Caching Pages</a></h2><p>Each browser version has its own rules for determining whether
to cache pages. To prevent a browser from caching ASP pages, use
<b>Response.Expires</b> to set the Expires header:</p><pre>
&lt;% Response.Expires = 0 %&gt;
</pre><p>A value of 0 forces cached pages to expire immediately. Because
HTTP headers must be sent to the browser before any page content is
sent, either put the <b>Response.Expires</b> property before any
HTML tags or buffer the page.</p><h2><a name="H2_37780216"></a><a name="channels">Creating Dynamic Channels</a></h2><p>A <i>channel</i> is a Web technology available with Microsoft
Internet Explorer 4.0, or later, that you can use to
automatically deliver new or updated Web content to users. The
channel schedules the user's computer to periodically connect to a
server and retrieve updated information. (This retrieval process is
commonly referred to as <i>client pull</i> because information is
"pulled" in, or gathered, from the server.) When new information is
made available at a particular Web site, the content is downloaded
to the browser cache for offline viewing. Clever use of channels
for distributing Web based information (especially on intranets)
can help to centralize information as well as reduce server
traffic. For more information about channels, visit the <a href="http://www.microsoft.com/windows/ie/" target="_New"><b>
Microsoft Internet Explorer Web site</b></a>.</p><p>Using ASP, you can write scripts that dynamically create
channels by generating a <i>channel definition file</i>. An
XML-based channel definition file (.cdf) describes the organization
and update schedule of a channel's contents. Commands in the .cdf
file use syntax similar to HTML tags, so they are easy to learn and
to generate from a script. When you write a server-side script to
create a channel definition file, give the file a .cdx extension.
When ASP reads a file with a .cdx extension, it automatically sends
the application/x-cdf content type, which tells the browser to
interpret the bytes as channel definitions. If you do not use the
.cdx extension, your script must manually set the content type to
application/x-cdf by using <b>Response.ContentType</b>.</p><p>Here is an example of how you might use channels. The following
HTML form asks the user to select channels. When submitted, the
form calls a script in a .cdx file to create the channel
definitions.</p><pre>
&lt;P&gt; Choose the channels you want. &lt;/P&gt;
&lt;FORM METHOD="POST" ACTION="Chan.cdx"&gt;
&lt;P&gt;&lt;INPUT TYPE=CHECKBOX NAME=Movies&gt; Movies
&lt;P&gt;&lt;INPUT TYPE=CHECKBOX NAME=Sports&gt; Sports
&lt;P&gt;&lt;INPUT TYPE="SUBMIT" VALUE="SUBMIT"&gt;
&lt;/FORM&gt;
</pre><p>The script in Chan.cdx builds the channel definitions based on
the form values submitted with the request.</p><pre>
&lt;% If Request.Form("Movies") &lt;&gt; "" Then %&gt;
  &lt;CHANNEL&gt;
    <i>channel definition statements for the movie pages</i>
  &lt;/CHANNEL&gt;
&lt;% End If %&gt;

&lt;% If Request.Form("Sports") &lt;&gt; "" Then %&gt;
  &lt;CHANNEL&gt;
    <i>channel definition statements for the sports pages</i>
  &lt;/CHANNEL&gt;
&lt;% End If %&gt;
</pre><h2><a name="H2_37783243">Accessing Server
Resources with WebDAV</a></h2><p>Distributed Authoring and Versioning (WebDAV), a powerful
extension of the HTTP 1.1 protocol, exposes Web file storage
media-such as a local file system-over an HTTP connection. WebDAV
holds great promise for making the Web into seamless, collaborative
authoring environment. With the IIS 5.1 implementation of
WebDAV, you can enable remote authors to create, delete, move,
search, or apply attributes to files and directories on your Web
server. 

For more information, see <a href="pub_dav_webdav.htm"><b>WebDAV Publishing</b></a>.</p><hr class="iis" size="1">
<p align="center"><i><a href="/iishelp/common/colegal.htm">© 1997-2001 Microsoft Corporation. All rights reserved.</a></i></p>
</body>
</html>
