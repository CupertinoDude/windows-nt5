<html xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:myScript="http://iisue">
<head>
<META http-equiv="Content-Type" content="text/html; charset=UTF-16">
<meta http-equiv="Content-Type" content="text/html; charset=Windows-1252">
<meta http-equiv="PICS-Label" content="(PICS-1.1 &quot;<http://www.rsac.org/ratingsv01.html>&quot; l comment &quot;RSACi North America Server&quot; by &quot;inet@microsoft.com <mailto:inet@microsoft.com>&quot; r (n 0 s 0 v 0 l 0))">
<meta name="MS.LOCALE" content="EN-US">
<meta name="MS-IT-LOC" content="Internet Information Services">
<meta name="MS-HAID" content="Managing_Sessions">
<meta name="description" content="This topic discusses using ASP to maintain user information between visits to a Web application. ASP manages user sessions so that an application can access information that remains consistent throughout a single session.">
<title>Managing Sessions</title><SCRIPT LANGUAGE="JScript" SRC="iishelp.js"></SCRIPT></head>
<body>
<p style="color:red">[This is preliminary documentation and subject to change]</p>
<h1>Managing Sessions</h1><p>One of the challenges to developing a successful Web application
is maintaining user information over the course of a visit, or <i>
session</i>, as the user travels from page to page in an
application. HTTP is a stateless protocol, meaning that your Web
server treats each HTTP request for a page as an independent
request; the server retains no knowledge of previous requests, even
if they occurred only seconds prior to a current request. This
inability to remember previous requests means that it is this
difficult to write applications, such as an online catalog, where
the application may need to track the catalog items a user has
selected while jumping between the various pages of the
catalog.</p><p>ASP provides a unique solution for the problem of managing
session information. Using the ASP <a href="ref_vbom_seso.htm"><b>Session Object</b></a> object and a special user ID generated by your
server, you can create clever applications that identify each
visiting user and collect information that your application can
then use to track user preferences or selections.</p><p><img src="important.gif" alt="important"><span style="color:blue;"><b>
     Important
      </b></span>ASP assigns the user ID by means of an HTTP
cookie, which is a small file stored on the user's browser. So, if
you are creating an application for browsers that do not support
cookies, or if your customers might set their browsers to refuse
cookies, you should not use ASP's session management features.</p>
<h2><a name="H2_37685211">Starting and Ending
Sessions</a></h2><p>A session can begin in four ways:</p><ul><li>A new user requests a URL that identifies an .asp file in an
application, and the Global.asa file for that application includes
a <a href="ref_scrpt_glsesevntonstart.htm"><b>Session_OnStart</b></a>
procedure.</li><li>A user stores a value in the <b>Session</b> object.</li><li>A new session automatically starts whenever the server receives
a request that does not contain a valid <a href="#H2_37687121"><b>
SessionID cookie</b></a>.</li><li>A user requests an .asp file in an application, and the
application's Global.asa file uses the &lt;OBJECT&gt; tag to
instantiate an object with session scope. See <a href="asp_basp_usingcomp.htm"><b>Using Components and Objects</b></a> for
more information about using the &lt;OBJECT&gt; tag to instantiate
an object.</li></ul><p>A session automatically ends if a user has not requested or
refreshed a page in an application for a specified period of time.
This value is 20 minutes by default. You can change the default for
an application by setting the <a href="ref_vbom_sesoptime.htm"><b>Timeout</b></a> property on the <b>Application Options</b>
property sheet in the Internet Information Services snap-in. Set
this value according to the requirements of your Web application
and the memory capacity of your server. For example, if you expect
that users browsing your Web application will linger on each page
for only a few minutes, then you may want to significantly reduce
the session timeout value from the default. A long session timeout
period can result in too many open sessions, which can strain your
server's memory resources.</p><p>If, for a specific session, you want to set a timeout interval
that is shorter than the default application timeout, you can also
set the <b>Timeout</b> property of the <b>Session</b> object. For
example, the following script sets a timeout interval of
5 minutes.</p><pre>
&lt;%  Session.Timeout = 5  %&gt;
</pre><p>You can also set the timeout interval to be greater than the
default value, the value determined by the <b>Session Timeout</b>
property.</p><p><img src="note.gif" alt="note"><b>
      Note
      </b><b>Timeout</b> only applies to sessions that have
state. During a <i>stateless session</i> the <b>Session</b> object
does not contain content or static objects. This type of session
automatically ends after the request is processed and is recreated
on the next request from the same browser.</p>
<p>Alternatively, to deliberately end a session you can use the <a href="ref_vbom_sesomaband.htm"><b>Abandon</b></a> method of the <b>
Session</b> object. For example, you can provide a Quit button on a
form with the ACTION parameter set to the URL of an .asp file that
contains the following command.</p><pre>
&lt;% Session.Abandon %&gt;
</pre><p><img src="note.gif" alt="note"><b>
      Note
      </b>A user's requests that are queued up for execution
prior to initiating <b>Session.Abandon</b> will execute within the
context of the session being abandoned. After <b>
Session.Abandon</b> has completed execution, new incoming requests
will not be associated with the session.</p>
<h2><a name="H2_37687121">About SessionID and
Cookies</a></h2><p>The first time a user requests an .asp file within a given
application, ASP generates a <i>SessionID</i>. A number produced by
a complex algorithm, the SessionID uniquely identifies each user's
session. At the beginning of a new session, the server stores the
Session ID in the user's Web browser as a cookie.</p><p>The SessionID cookie is similar to a locker key in that, as the
user interacts with an application during a session, ASP can store
information for the user in a "locker" on the server. The user's
SessionID cookie, transmitted in the HTTP request header, enables
access to this information in the way that a locker key enables
access to a locker's contents. Each time that ASP receives a
request for a page, it checks the HTTP request header for a
SessionID cookie.</p><p>After storing the SessionID cookie in the user's browser, ASP
reuses the same cookie to track the session, even if the user
requests another .asp file, or requests an .asp file running in
other application. Likewise, if the user deliberately abandons or
lets the session timeout, and then proceeds to request another .asp
file, ASP begins a new session using the same cookie. The only time
a user receives a new SessionID cookie is when the server
administrator restarts the server, thus clearing the SessionID
settings stored in memory, or the user restarts the Web
browser.</p><p>By reusing the SessionID cookie, ASP minimizes the number of
cookies sent to the browser. Additionally, if you determine that
your ASP application does not require session management, you can
prevent ASP from tracking session and sending SessionID cookies to
users.</p><p>ASP will not send the session cookies under the following
conditions:</p><ul><li>If an application has session state disabled.</li><li>If an ASP page is defined as sessionless, that is, a page
containing the 

<pre>
&lt;%@ EnableSessionState=False %&gt;
</pre>

tag. For more information, see <a href="#sessionlessasp"><b>
Sessionless ASP Pages</b></a>.</li></ul><p>You should also note that SessionID cookies are not intended to
provide a permanent means for tracking users across multiple visits
to a Web site. The SessionID information stored in the server
computer's memory can be easily lost. If you want track users who
visit your Web application over a longer periods, you must create a
user identification by storing a special cookie in a user's Web
browser and saving the cookie information to a database. For more
information, see <a href="#usingcookies"><b>Using Cookies</b></a>.</p><h2><a name="sessionobject">Storing and Removing
Data from the <b>Session</b> object</a></h2><p>The <b>Session</b> object provides a dynamic, associative array
into which you can store information. You can store scalar
variables and object variables into the <b>Session</b> object.</p><p>To store a variable in the <b>Session</b> object, assign a value
to a named entry in the <b>Session</b> object. For example, the
following command stores two new variables in the <b>Session</b>
object:</p><pre>
&lt;% 
  Session("FirstName") = "Jeff"
  Session("LastName") = "Smith" 
%&gt;
</pre><p>To retrieve information from the <b>Session</b> object, access
the named entry. For example, to display the current value of
Session("FirstName"):</p><pre>
Welcome &lt;%= Session("FirstName") %&gt;
</pre><p>You can store user preferences in the <b>Session</b> object, and
then access that preference to determine what page to return to the
user. For example, you can allow a user to specify a text-only
version of your content in the first page of the application and
apply this choice on all subsequent pages that the user visits in
this application.</p><pre>
&lt;% If Session("ScreenResolution") = "Low" Then %&gt; 
  This is the text version of the page.
&lt;% Else %&gt; 
  This is the multimedia version of the page.
&lt;% End If %&gt;
</pre><p>You can also store an object instance in the <b>Session</b>
object, although doing so can affect server performance. For more
information, see <a href="asp_basp_setobjscope.htm"><b>Setting Object Scope</b></a>.</p><p>At times, it may be desirable to delete items stored in the <b>
Session</b> object. For example, it is not uncommon for users
visiting an online retail store to change their minds, abandon a
list of purchase items, and decide on a completely different set of
selections. In such a case it may be expedient to update the <b>
Session</b> object by deleting inappropriate values.</p><p>The <b>Session</b> object's <a href="ref_vbom_sesoccon.htm"><b>Session Contents Collection</b></a> collection contains all of the variables that have
been stored (that is, those stored without using the HTML
&lt;OBJECT&gt; tag) for a session. By using the <b>Contents</b>
collection's <a href="ref_vbom_sesomcr.htm"><b>Contents.Remove</b></a>
method, you can selectively remove a reference to a variable that
was added for the session state. The following script illustrates
how to use the <b>Remove</b> method to purge an item, in this case
user discount information, from the <b>Session</b> object:</p><pre>
&lt;%
  If Session.Contents("Purchamnt") &lt;= 75 then 
    Session.Contents.Remove("Discount")
  End If 
%&gt;
</pre><p>If desirable, you can also use the <b>Contents</b> collection's
<a href="ref_vbom_sesomsra.htm"><b>Contents.RemoveAll</b></a> method to
completely remove all variables stored for the session:</p><pre>
Session.Content.RemoveAll()
</pre>

Using the <b>Remove</b> method you can choose to delete items by
name or by index. The following script demonstrates how to cycle
through values stored in the <b>Session</b> object and
conditionally remove values by index: 

<pre>
&lt;%
  For Each intQuote in Session.Contents
    If Session.Contents(intQuote) &lt; 200 Then
      Session.Contents.Remove(intQuote)  
    End If
  Next
%&gt;
</pre><h2><a name="H2_37691818">Managing Sessions Across
Multiple Servers</a></h2><p>ASP session information is stored on the Web server. A browser
must request pages from the same Web server for scripts to access
session information. On cluster of Web servers (where many Web
servers share the responsibility for responding to user requests)
user requests will not always be routed to the same server.
Instead, special software distributes all requests for the site URL
to whichever server is free, a process called <i>load
balancing</i>. Load balancing makes it difficult to maintain
session information on a cluster of Web servers.</p><p>To use ASP session management on a load-balanced site, you must
ensure that all requests within a user session are directed to the
same Web server. One way to do this is to write a <a href="ref_scrpt_glsesevntonstart.htm"><b>Session_OnStart</b></a>
procedure that uses the <b>Response</b> object to redirect the
browser to the specific Web server on which the user's session is
running. If all links in your application pages are relative,
future requests for a page will be routed to the same server.</p><p>For example, a user might access an application by requesting
the general URL for a site: http://www.microsoft.com. The load
balancer routes the request to a specific server, for example,
server3.microsoft.com. ASP creates a new user session on that
server. In the <b>Session_OnStart</b> procedure, the browser is
redirected to the specified server:</p><pre>
&lt;% Response.Redirect("http://server3.microsoft.com/webapps/firstpage.asp") %&gt;
</pre><p>The browser will request the specified page, and all subsequent
requests will be routed to the same server as long as specific
server names are not referenced in the original URLs.</p><h2><a name="usingcookies">Using Cookies</a></h2><p>A cookie is a token that the Web server embeds in a user's Web
browser to identify the user. The next time the same browser
requests a page, it sends the cookie it received from the Web
server. Cookies allow a set of information to be associated with a
user. ASP scripts can both get and set the values of cookies by
using the <a href="ref_vbom_resoccook.htm"><b>Cookies</b></a>
collection of the <b>Response</b> and <b>Request</b> objects.</p><h3><a name="H3_37694204">Setting Cookies</a></h3><p>To set the value of a cookie, use <b>Response.Cookies</b>. If
the cookie does not already exist, <b>Response.Cookies</b> creates
a new one. For example, to send a cookie named ("VisitorID") with
an associated value ("49") to the browser, use the following
command, which must appear on your Web page before the &lt;HTML&gt;
tag:</p><pre>
&lt;% Response.Cookies("VisitorID") = 49 %&gt;
</pre><p>If you want a cookie to be used only during the current user
session, then sending the cookie to the browser is all you need to
do. However, if you want to identify a user even after the user has
stopped and restarted the browser, you must force the browser to
store the cookie in a file on the client computer's hard disk. To
save the cookie, use the <b>Expires</b> attribute for <b>
Response.Cookies</b> and set the date to some date in the
future:</p><pre>
&lt;%
  Response.Cookies("VisitorID") = 49 
  Response.Cookies("VisitorID").Expires = "December 31, 2001" 
%&gt;
</pre><p>A cookie can have multiple values; such a cookie is called an
<i>indexed cookie</i>. An indexed cookie value is assigned a key;
you can set a particular cookie key value. For example:</p><pre>
&lt;% Response.Cookies("VisitorID")("49") = "Travel" %&gt;
</pre><p>If an existing cookie has key values but <b>Response.Cookies</b>
does not specify a key name, then the existing key values are
deleted. Similarly, if an existing cookie does not have key values
but <b>Response.Cookies</b> specifies key names and values, the
existing value of the cookie is deleted and new key-value pairs are
created.</p><h3><a name="H3_37696008">Getting Cookies</a></h3><p>To get the value of a cookie, use the <b>Request.Cookies</b>
collection. For example, if the user HTTP request sets <code>
VisitorID=49</code>, then the following statement retrieves the
value <code>49</code>:</p><pre>
&lt;%= Request.Cookies("VisitorID") %&gt;
</pre><p>Similarly, to retrieve a key value from an indexed cookie, use
the key name. For example, if a user's browser sends the following
information in the HTTP request header:</p><pre>
Cookie: VisitorID=49=Travel
</pre><p>The following statement would then return the value <code>
Travel</code>:</p><pre>
&lt;%= Request.Cookies("VisitorID")("49") %&gt;
</pre><h3><a name="settingcookiepaths">Setting
Cookie Paths</a></h3><p>Each cookie stored by ASP on the user's Web browser contains
path information. When the browser requests a file stored in the
same location as the path specified in the cookie, the browser
automatically forwards the cookie to the server. By default, cookie
paths correspond to the name of the application containing the .asp
file that originally generated the cookie. For example, if an .asp
file, residing in an application called <i>UserApplication</i>,
generates a cookie, then each time a user's Web browser retrieves
any file residing in that application, the browser will forward the
cookie, in addition to any other cookies containing the path <i>
/UserApplication</i>.</p><p>To specify a path for a cookie other than the default
application path, you can use the ASP <b>Response.Cookies</b>
collection's <b>Path</b> attribute. For example, the following
script assigns the path SalesApp/Customer/Profiles/ to a cookie
called <code>Purchases</code>:</p><pre>
&lt;%
  Response.Cookies("Purchases") = "12" 
  Response.Cookies("Purchases").Expires = "January 1, 2001" 
  Response.Cookies("Purchases").Path = "/SalesApp/Customer/Profiles/"
%&gt;
</pre><p>Whenever the Web browser containing the <code>Purchases</code>
cookie requests a file residing in the path
/SalesApp/Customer/Profiles/ or in any of it subdirectories, the
browser forwards the cookie to the server.</p><p>Many Web browsers, including Microsoft Internet Explorer
version 4.0, or later, and Netscape browsers, preserve the
case of the cookie path. This means that if the case of the path of
a requested file differs from the case of the stored cookie path,
the browser will not send the cookie to the server. For example, to
ASP, the virtual directories /TRAVEL and /travel are the same ASP
application, but to a browser that preserves the case of a URL,
/TRAVEL and /travel are two different applications. Make sure all
URLs to .asp files have the same case to ensure that the user's
browser forwards stored cookies.</p><p>You can use the following statement to set the cookie path so
that the user's Web browser will forward a cookie whenever the
browser requests a file from your server, regardless of application
or path:</p><code>Response.Cookies("Purchases").Path = "/"</code><p>Note, however, that forwarding cookies to the server, without
distinguishing between applications, raises a potential security
concern if the cookies contain sensitive information that should
not be accessible outside of a specific application.</p><h3><a name="H3_37697847">Preserving State without
Cookies</a></h3><p>Not all browsers support cookies. Even with browsers that do
support cookies, some users prefer to turn off cookie support. If
your application needs to be responsive to browsers that don't
support cookies, you cannot use ASP session management.</p><p>In this case, you must write your own mechanism to pass
information from page to page in your application. There are two
general ways to do this:</p><ul><li>Add parameters to a URL's query string. For example: 

<pre>
http://MyServer/MyApp/start.asp?name=Jeff
</pre><p>Some browsers, however, will discard any explicit parameters
passed in a query string if a form is submitted with the GET
method.</p></li><li>Add hidden values to a form. For example, the following HTML
form contains a hidden control, which does not appear on the actual
form and remains invisible in the user's Web browser. The form
passes a user identification value, in addition to the information
supplied by the user, by using the HTTP POST method. 

<pre>
&lt;FORM METHOD="POST" ACTION="/scripts/inform.asp"&gt;
&lt;INPUT TYPE="text" NAME="city" VALUE=""&gt;
&lt;INPUT TYPE="text" NAME="country" VALUE =""&gt;
&lt;INPUT TYPE="hidden" NAME="userid" VALUE= &lt;%= UserIDNum(i) %&gt;
&lt;INPUT TYPE="submit"  VALUE="Enter"&gt;
</pre><p>This method requires all link destinations that pass user
information to be coded as HTML forms.</p></li></ul><p>If you are not using ASP session management, you should turn off
session support for your application. When sessions are enabled,
ASP sends a SessionID cookie to each browser that requests a page.
To turn off session support, clear the <b>Enable Session State</b>
check box on the <b>Application Options</b> property sheet in the
Internet Information Services snap-in.</p><h2><a name="sessionlessasp">Sessionless ASP
Pages</a></h2><p>With ASP, you can also create sessionless pages which can be
used to put off the creation of sessions tracking until needed.</p><p>Sessionless pages do <i>not</i> carry out the following:</p><ul><li>Execute <b>Session_OnStart</b> procedures.</li><li>Send session ID cookies.</li><li>Create <b>Session</b> objects.</li><li>Access built-in <b>Session</b> objects or session scope objects
created with the &lt;OBJECT&gt; tag.</li><li>Serialize execution with other session requests.</li></ul><p>To configure an .asp file as sessionless, use the following:</p><pre>
&lt;%@ EnableSessionState=False %&gt;
</pre><p>You should place this script as the first line in your .asp
file, before any other scripts. The default, when this tag is
omitted, enables session tracking.</p><p>Sessionless ASP pages can often improve the responsiveness of
your server by eliminating potentially time consuming session
activity. For example, consider the case of an ASP page containing
two HTML frames: frames 1 and 2, both within one frameset. Frame 1
contains an .asp file that executes a complex script, while frame 2
contains a simpler .asp file. Because ASP executes session requests
in sequential order, or <i>serially</i>, you will not be able to
see the contents of frame 2 until the script in frame 1 has
executed. However, if you make the .asp file for frame 1
sessionless, then ASP requests will no longer be serialized and the
browser will render the contents of frame 2 before the contents of
frame 1 have finished executing.</p><p>Unfortunately, the way in which multiple requests for different
frames are processed ultimately depends on the configuration of the
user's Web browser. Certain Web browsers may serialize requests
despite the sessionless configuration of your .asp files.</p><hr class="iis" size="1">
<p align="center"><i><a href="/iishelp/common/colegal.htm">© 1997-2001 Microsoft Corporation. All rights reserved.</a></i></p>
</body>
</html>
