<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<html dir=ltr><head><title>About Process Recycling</title>

<SCRIPT LANGUAGE="JavaScript">
<!--
	TempString = navigator.appVersion
	if (navigator.appName == "Microsoft Internet Explorer"){	
// Check to see if browser is Microsoft
		if (TempString.indexOf ("4.") >= 0){
// Check to see if it is IE 4
			document.writeln('<link rel="stylesheet" type="text/css" href="/iishelp/common/coua.css">');
		}
		else {
			document.writeln('<link rel="stylesheet" type="text/css" href="/iishelp/common/cocss.css">');
		}
	}
	else if (navigator.appName == "Netscape") {						
// Check to see if browser is Netscape
		document.writeln('<link rel="stylesheet" type="text/css" href="/iishelp/common/coua.css">');
	}
	else
		document.writeln('<link rel="stylesheet" type="text/css" href="/iishelp/common/cocss.css">');
//-->
</script> 

<SCRIPT LANGUAGE="VBScript">
<!--
Sub Window_OnLoad()
   Dim frmContents
   On Error Resume Next
   If Not Parent Is Nothing Then
      Set frmContents = Parent.Contents
      If Not frmContents Is Nothing Then
            frmContents.Window.TOCSynch_Click
      End If
   End If
End Sub
//--></SCRIPT>

<META NAME="DESCRIPTION" CONTENT="Conceptual information about Process Recycling, the problem it solves, and a description of recycling events.">
<META HTTP-EQUIV="Content-Type" content="text/html; charset=Windows-1252">

<META HTTP-EQUIV="PICS-Label" CONTENT='(PICS-1.1 "<http://www.rsac.org/ratingsv01.html>" l comment "RSACi North America Server" by "inet@microsoft.com <mailto:inet@microsoft.com>" r (n 0 s 0 v 0 l 0))'>
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="MS-IT-LOC" Content="Internet Information Services">

</head>

<body bgcolor="#FFFFFF" text="#000000"><font face="Verdana, Arial, Helvetica">

<h1><a name="AboutProcessRecycling">About Process Recycling</a></h1>

<h2><a name="Overview">Overview</a></h2>
<p>IIS allows applications to be run out-of-process (OOP) hosted by a DLLHost.exe process which is isolated from IIS. Process recycling leverages the infrastructure built by COM+ to perform process recycling of these OOP applications. Specifically, IIS relies on the RecycleProcess() method in COM+ as a means of indicating to COM+ that applications hosted by a DLLHost.exe process should be recycled. For more information about when you may want to recycle an application, see <a href="#ProblemsWithApplications">Problems with Applications</a>.</p>

<h2><a name="ProblemsWithApplications">Problems with Applications</a></h2>

<p>Over time  applications often see their performance degrade due to poorly written code, sometimes getting stuck in a loop that causes unnecessary load on the CPU. These applications can also cause memory leaks, where applications do not release un-needed memory back to the operating system. These applications can cause a server to stall, requiring the server to be re-booted. Process recycling was created to solve these problems.</p>

<h2>How Process Recycling Works</h2>
<p>Process recycling works by recycling an application or pool of applications when a configured reycling event occurs. The methodology behind recycling an OOP application is simple; IIS calls into the COM+ RecycleProcess() method requesting that the application's DLLhost.exe hosting process be recycled. When a recycling event is triggered, the following events happen:

<ul>
<li>A new process is created to service new application requests for the application(s) being recycled.
</li>
<li>The process that is being recycled is given time to finish processing old application requests. The time interval is configured using the <a href="../asp/apro0y44.htm">ShutdownTimeLimit</a> metabase key. 
</li>
<li>If the ShutdownTimeLimit is reached, and the old process has not shut down, then IIS  terminates the old process.
</li>
</ul>

<p>For more information about the COM+ RecycleProcess, search for the keyword "RecycleProcess" in the COM+ (Component Services) Platform SDK.

<h2><a name="PooledAndIsolatedApplications">Pooled and Isolated Applications</a></h2>

<p>Applications can be configured to run in one of three ways. IIS 5.0 introduced the terminology "isolation level" to describe these options. The three isolation levels are Low, Medium, and High: Applications are configured on the Home Directory property sheet using the <a href="iiabuti.htm">IIS snap-in</a>.

<ul>
<li><b>Low (IIS)</b>&nbsp;&nbsp;&nbsp;Applications can be run in inetinfo.exe, which is the primary IIS process, also known as in-process. You should not run applications in the IIS process unless they have been thoroughly tested. If an application that runs in this process crashes, it also crashes IIS and any other applications that run in-process. Applications running in-process do not get recycled.</li>

<li><b>Medium (Pooled)</b>&nbsp;&nbsp;&nbsp;Pooled applications are run OOP, and hosted by a common DLLHost.exe process. Process Recycling is configured for all pooled applications at the W3SVC level of the metabase and all pooled applications are recycled together.</li>

<li><b>High (Isolated)&nbsp;&nbsp;&nbsp;</b>Isolated applications are run OOP, and each application is hosted by a single DLLHost.exe process. Isolated applications are recycled separately from any other application. Process recycling can be configured at any level of the metabase where an isolated application exists.</li>
</ul>

<p>The levels of the metabase that Process Recycling can be configured are explained in <a href="iiooplai.htm">Levels and Inheritance</a>. For information about configuring process recycling, see <a href="iioopcre.htm">Configuring Process Recycleng Events</a>. For more information about running an application in-process or out-of-process, see <a href="iiwarndc.htm">About Applications</a>

<h2><a name="RecyclingEvents">Recycling Events</a></h2>

<p> There are three events that can be configured to trigger a recycling event, all of which can be active simultaneously. These events are as follows:</p>

<h3>Summary of Process Recycling Events</h3>
Listed below are the metabase key names that can be configured to trigger a process recycling event to occur. 

<ul>
<li><strong>Time Created</strong><br>
Applications are recycled after running for a pre-determined amount of time. This property is configured using the PeriodicRestartTime metabase key.</li>
<li> <strong>Number of Requests</strong><br>
Applications are recycled after receiving a pre-determined number of requests. This property is configured using the PeriodicRestartRequests metabase key.
<li><strong>Scheduled Time</strong><br>
Applications are recycled at a pre-determined time of day. This property is configured using the PeriodicRestartSchedule metabase key.</li>
</ul>

<h3>Understanding Triggered Events</h3>
When more than one event is used to trigger recycling, the first event threshold that is reached causes IIS to recycle the application's DLLhost.exe process. The PeriodicRestartTime and PeriodicRestartRequests events use internal timers that count from zero to the value set in their metabase key. When the counter reaches the value set in the metabase key, the process is recycled, and the internal counter is set back to zero. Also, the PeriodicRestartTime and PeriodicRestartRequests internal counters affect each other as shown below. 
<ul>
<li>When the PeriodicRestartTime event triggers:&nbsp;&nbsp;&nbsp;The process is recycled and the PeriodicRestartTime and PeriodicRestartRequests internal timers are reset to zero. 
</li>
<li>When the PeriodicRestartRequests event triggers:&nbsp;&nbsp;&nbsp;The process is recycled and the PeriodicRestartTime and PeriodicRestartRequests internal timers are reset to zero. 
</li>
<li>When the PeriodicRestartSchedule event triggers:&nbsp;&nbsp;&nbsp;The process is recycled and the PeriodicRestartTime and PeriodicRestartRequests internal timers are reset to zero. The PeriodicRestartSchedule event is based on clock time and is not reset, or affected by the other two events.</li>
</ul>

<p><strong><span style="color: #0000FF"><font color="#0000FF">Important</font></span></strong>&nbsp;&nbsp;&nbsp;The internal timers only read from the metabase, they do not reset the metabase values. Do not confuse the internal timers with the default metabase key parameters.

<p><strong>Note</strong>&nbsp;&nbsp;&nbsp;The default metabase key parameters for the PeriodicRestartTime and PeriodicRestartRequests is zero, thereby disabling these features. The PeriodicRestartSchedule event is not configured at all by default. The <a href="iiooplai.htm">Levels and Inheritance</a> topic describes the metabase keys that are associated with Process Recycling events in detail.</p>

<p>For information about configuring Process Recycling events, see <a href="iioopcpr.htm">Configuring Recycling Events</a>. For information about configuration levels and inheritance, see <a href="iiooplai.htm">Levels and Inheritance</a>. </p>

<h2><a name="RelatedResources">Related Resources</a></h2>

<p>The following resources provide related information:</p>

<ul>
<li><a href="iiwarndc.htm">About Applications</a>&nbsp;&nbsp;&nbsp;Conceptial information about applications, their starting point, and about the different processes an application can run in.</li>
<li><a href="iiisol.htm">Isolating Applications</a>&nbsp;&nbsp;&nbsp;Step-by-step instruction about how to configure an application to run in different processes.</li>
<p>

</ul>

<hr class="iis" size="1"><p align=center><em><a href="/iishelp/common/colegal.htm">&copy; 1997-2001 Microsoft Corporation. All rights reserved.</a></em></p>

</font>
</body>
</html>
