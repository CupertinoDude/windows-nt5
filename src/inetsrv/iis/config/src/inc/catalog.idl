//  Copyright (C) 1995-1999 Microsoft Corporation.  All rights reserved.
// stable.idl : Simple tables (see spec for details).

#ifndef __STABLE_IDL__
#define __STABLE_IDL__

import "unknwn.idl";


// ============================================================================
// CONSTANTS AND STRUCTURES:
// ============================================================================

// -----------------------------------------
// LEVEL OF SERVICE constants:
// -----------------------------------------

// Level-of-service flags (basic use):
cpp_quote("#define fST_LOS_NONE                 0x00000000L")
cpp_quote("#define fST_LOS_CONFIGWORK           0x00000001L")
cpp_quote("#define fST_LOS_READWRITE            0x00000002L")

// Level-of-service flags (advanced use):
cpp_quote("#define fST_LOS_UNPOPULATED          0x00000010L")
cpp_quote("#define fST_LOS_REPOPULATE           0x00000020L")
cpp_quote("#define fST_LOS_MARSHALLABLE         0x00000100L")
cpp_quote("#define fST_LOS_NOLOGIC              0x00010000L")
cpp_quote("#define fST_LOS_COOKDOWN             0x00020000L")
cpp_quote("#define fST_LOS_NOMERGE              0x00040000L")
cpp_quote("#define fST_LOS_NOCACHEING           0x00080000L")
cpp_quote("#define fST_LOS_NODEFAULTS           0x00100000L")
cpp_quote("#define fST_LOS_EXTENDEDSCHEMA       0x00200000L")
cpp_quote("#define fST_LOS_DETAILED_ERROR_TABLE 0x00400000L")
cpp_quote("#define fST_LOS_NO_LOGGING           0x00800000L")


// Level-of-service flags (internal use):
cpp_quote("#define fST_LOSI_CLIENTSIDE          0x01000000L")


// -----------------------------------------
// QUERY constants:
// -----------------------------------------

// Query formats (common use):
cpp_quote("#define eST_QUERYFORMAT_CELLS        3L")
cpp_quote("#define eST_QUERYFORMAT_SQL          4L")

// Query cell structure (common use):
typedef struct
{
    LPVOID      pData;
    DWORD       eOperator;
    ULONG       iCell;
    DWORD       dbType;
    ULONG       cbSize;
} STQueryCell;

// Cells query format: operators (common use):
cpp_quote("#define eST_OP_EQUAL                 2L")
cpp_quote("#define eST_OP_NOTEQUAL              3L")

// Cells query format: Reserved cell indexes (common/advanced use):
cpp_quote("#define iST_CELL_SPECIAL             0xF0000000L")

cpp_quote("#define iST_CELL_FILE                0xF0000001L")
cpp_quote("#define iST_CELL_COMPUTER            0xF0000002L")
cpp_quote("#define iST_CELL_CLUSTER             0xF0000003L")

cpp_quote("#define iST_CELL_INDEXHINT           0xF0000004L")

cpp_quote("#define iST_CELL_SNID                0xF0000005L") //Snap shot id
cpp_quote("#define iST_CELL_TABLEID             0xF0000006L")

cpp_quote("#define iST_CELL_cbminCACHE          0xF0000007L")
cpp_quote("#define iST_CELL_SELECTOR            0xF0000008L")
cpp_quote("#define iST_CELL_SCHEMAFILE          0xF0000009L")
cpp_quote("#define iST_CELL_LOCATION            0xF000000AL")


// Special column name for multi-column PK
cpp_quote("#define DEX_MPK                      L\"MPK\" ")

// -----------------------------------------
// SUBSRIPTION constants:
// -----------------------------------------

// Snapshot ID to get the latest snapshot.
cpp_quote("#define fST_SNID_NONE                0x00000000L")

// Multi-subscription structure (common use):
typedef struct
{
    LPWSTR  wszDatabase;
    LPWSTR  wszTable;
    STQueryCell* pQueryData;
    LPVOID  pQueryMeta;
    DWORD   eQueryFormat;
} MultiSubscribe;

// -----------------------------------------
// ERROR constants:
// -----------------------------------------

// Interface-specific hresults (facility 0x11; range 0x80A-0x8FF):

// Table dispenser errors:

cpp_quote("const HRESULT E_ST_INVALIDTABLE      = 0x8021080A;")
cpp_quote("const HRESULT E_ST_INVALIDQUERY      = 0x8021080B;")
cpp_quote("const HRESULT E_ST_QUERYNOTSUPPORTED = 0x8021080C;")
cpp_quote("const HRESULT E_ST_LOSNOTSUPPORTED   = 0x8021080D;")
cpp_quote("const HRESULT E_ST_INVALIDMETA       = 0x8021080E;")
cpp_quote("const HRESULT E_ST_INVALIDWIRING     = 0x8021080F;")
cpp_quote("const HRESULT E_ST_OMITDISPENSER     = 0x80210810;")
cpp_quote("const HRESULT E_ST_OMITLOGIC         = 0x80210811;")
cpp_quote("const HRESULT E_ST_INVALIDSNID       = 0x80210812;")

// Table errors:
cpp_quote("const HRESULT E_ST_INVALIDCALL       = 0x80210815;")

cpp_quote("const HRESULT E_ST_NOMOREROWS        = 0x80210816;")
cpp_quote("const HRESULT E_ST_NOMORECOLUMNS     = 0x80210817;")
cpp_quote("const HRESULT E_ST_NOMOREERRORS      = 0x80210818;")
cpp_quote("const HRESULT E_ST_BADVERSION        = 0x80210819;")


// Errors previously defined in comcodes.h
cpp_quote("const HRESULT E_SDTXML_NOTSUPPORTED                               = 0x80210511;")
cpp_quote("const HRESULT E_SDTXML_UNEXPECTED_BEHAVIOR_FROM_XMLPARSER         = 0x80210512;")
cpp_quote("const HRESULT E_SDTXML_XML_FAILED_TO_PARSE                        = 0x80210514;")
cpp_quote("const HRESULT E_SDTXML_WRONG_XMLSCHEMA                            = 0x80210515;")
cpp_quote("const HRESULT E_SDTXML_PARENT_TABLE_DOES_NOT_EXIST                = 0x80210516;")
cpp_quote("const HRESULT E_SDTXML_DONE                                       = 0x80210517;")
cpp_quote("const HRESULT E_SDTXML_UNEXPECTED                                 = 0x80210520;")
cpp_quote("const HRESULT E_SDTXML_FILE_NOT_SPECIFIED                         = 0x80210522;")
cpp_quote("const HRESULT E_SDTXML_LOGICAL_ERROR_IN_XML                       = 0x80210523;")
cpp_quote("const HRESULT E_SDTXML_UPDATES_NOT_ALLOWED_ON_THIS_KIND_OF_TABLE  = 0x80210524;")
cpp_quote("const HRESULT E_SDTXML_NOT_IN_CACHE                               = 0x80210525;")
cpp_quote("const HRESULT E_SDTXML_INVALID_ENUM_OR_FLAG                       = 0x80210526;")
cpp_quote("const HRESULT E_SDTXML_FILE_NOT_WRITABLE                          = 0x80210527;")


// Detailed errors:
cpp_quote("const HRESULT E_ST_ERRORTABLE        = 0x8021081E;")
cpp_quote("const HRESULT E_ST_DETAILEDERRS      = 0x8021081F;")

cpp_quote("const HRESULT E_ST_VALUENEEDED       = 0x80210820;")
cpp_quote("const HRESULT E_ST_VALUEINVALID      = 0x80210821;")

cpp_quote("const HRESULT E_ST_SIZENEEDED        = 0x80210825;")
cpp_quote("const HRESULT E_ST_SIZEEXCEEDED      = 0x80210826;")

cpp_quote("const HRESULT E_ST_PKNOTCHANGABLE    = 0x8021082A;")
cpp_quote("const HRESULT E_ST_FKDOESNOTEXIST    = 0x8021082B;")

cpp_quote("const HRESULT E_ST_ROWDOESNOTEXIST   = 0x80210830;")
cpp_quote("const HRESULT E_ST_ROWALREADYEXISTS  = 0x80210831;")
cpp_quote("const HRESULT E_ST_ROWALREADYUDPATED = 0x80210832;")
cpp_quote("const HRESULT E_ST_INVALIDEXTENDEDMETA= 0x80210833;")
cpp_quote("const HRESULT E_ST_ROWCONFLICT       = 0x80210834;")


// Merge Interceptor errors

cpp_quote("const HRESULT E_ST_INVALIDSELECTOR  = 0x80210850;")
cpp_quote("const HRESULT E_ST_MULTIPLESELECTOR = 0x80210851;")
cpp_quote("const HRESULT E_ST_NOCONFIGSTORES   = 0x80210852;")
cpp_quote("const HRESULT E_ST_UNKNOWNPROTOCOL  = 0x80210853;")
cpp_quote("const HRESULT E_ST_UNKNOWNWEBSERVER = 0x80210854;")
cpp_quote("const HRESULT E_ST_UNKNOWNDIRECTIVE = 0x80210855;")
cpp_quote("const HRESULT E_ST_DISALLOWOVERRIDE = 0x80210856;")
cpp_quote("const HRESULT E_ST_NEEDDIRECTIVE    = 0x80210857;")

// IMetabaseSchemaCompiler errors

cpp_quote("const HRESULT E_ST_INVALIDSTATE     = 0x80210860;")
cpp_quote("const HRESULT E_ST_COMPILEFAILED    = 0x80210861;")
cpp_quote("const HRESULT E_ST_INVALIDBINFILE   = 0x80210862;")
cpp_quote("const HRESULT E_ST_COMPILEWARNING   = 0x80210863;")

// ISimpleTableAdvise errors

cpp_quote("const HRESULT E_ST_INVALIDCOOKIE    = 0x80210870;")

// Detailed error structure (advanced use):
typedef struct
{
    ULONG       iRow;
    HRESULT     hr;
    ULONG       iColumn;
} STErr;

// Detailed error indices (advanced use):
cpp_quote("#define iST_ERROR_ALLCOLUMNS         ~0")
cpp_quote("#define iST_ERROR_ALLROWS            ~0")


// -----------------------------------------
// COLUMN META constants:
// -----------------------------------------

// Type indicators (basic use):
cpp_quote("#include <oledb.h>")

// Column meta structure (internal use):
typedef struct
{
    DWORD       dbType;
    ULONG       cbSize;
    DWORD       fMeta;
} SimpleColumnMeta;

typedef DWORD SNID;


// -------------------------------------------------------------------------------
// META Table constants are defined in CatMeta.h which is generated by CatUtil.exe
// -------------------------------------------------------------------------------


// -----------------------------------------
// TABLE CONTROL constants:
// -----------------------------------------

// Column status flags (advanced use):
cpp_quote("#define fST_COLUMNSTATUS_CHANGED     0x000000001")
cpp_quote("#define fST_COLUMNSTATUS_DEFAULTED   0x000000004")

// Column status flags (internal use):
cpp_quote("#define fST_COLUMNSTATUS_NONNULL     0x000000002")
cpp_quote("#define maskfST_COLUMNSTATUS         0x000000007")

// Row actions (advanced use):
cpp_quote("// Row actions (advanced use):")
cpp_quote("#define eST_ROW_IGNORE               0L")
cpp_quote("#define eST_ROW_INSERT               1L")
cpp_quote("#define eST_ROW_UPDATE               2L")
cpp_quote("#define eST_ROW_DELETE               3L")

// Population control flags (internal use):
cpp_quote("#define fST_POPCONTROL_RETAINREAD    0x00000001")
cpp_quote("#define fST_POPCONTROL_RETAINERRS    0x00000002")
cpp_quote("#define maskfST_CONTROL              0x00000003")


// -----------------------------------------
// File Change Notification constants:
// -----------------------------------------

cpp_quote("#define fST_FILECHANGE_RECURSIVE     0x000000001")

// -----------------------------------------
// PRODUCT constants: Are low located in CatMeta.h
// -----------------------------------------

// WSZ_PRODUCT_CATALOG is not for external use
// cpp_quote("#define WSZ_PRODUCT_CATALOG		L\"Catalog\"")




// ============================================================================
// CONSUMER INTERFACES:
// ============================================================================

// -----------------------------------------
// GetSimpleTableDispenser entry point (common use):
cpp_quote("extern HRESULT GetSimpleTableDispenser(LPWSTR wszProductName, DWORD dwReserved, ISimpleTableDispenser2** o_ppISTDisp);")
cpp_quote("extern void InitializeSimpleTableDispenser(void);")
cpp_quote("extern HRESULT CookDown(LPWSTR wszProductName);")
cpp_quote("extern HRESULT RecoverFromInetInfoCrash(LPWSTR wszProductName);")
cpp_quote("extern HRESULT UninitCookdown(LPWSTR wszProductName,BOOL   bDoNotTouchMetabase);")
cpp_quote("extern UINT GetMachineConfigDirectory(LPWSTR wszProduct, LPWSTR lpBuffer, UINT uSize);")
cpp_quote("extern HRESULT UnloadDispenserDll(LPWSTR wszProduct);")
cpp_quote("extern HRESULT PostProcessChanges(ISimpleTableWrite2  *i_pISTWrite);")

// -----------------------------------------
// ISimpleTableDispenser2 (common use):
[
    uuid(2e1a560e-18b6-11d3-8fe3-00c04fc2e0c7),
    helpstring("ISimpleTableDispenser2"),
    pointer_default(unique)

]
[local] interface ISimpleTableDispenser2 : IUnknown
{
    HRESULT GetTable    (   [in] LPCWSTR        i_wszDatabase, 
                            [in] LPCWSTR        i_wszTable, 
                            [in] LPVOID         i_QueryData,
                            [in] LPVOID         i_QueryMeta,
                            [in] DWORD          i_eQueryFormat,
                            [in] DWORD          i_fServiceRequests, 
                            [out] LPVOID*       o_ppvSimpleTable    );
};

// -----------------------------------------
// IMetabaseSchemaCompiler (common use):
[
    uuid(8B71BC6C-B5F9-4068-888C-4C67CC16C2D3),
    helpstring("IMetabaseSchemaCompiler"),
    pointer_default(unique)

]
[local] interface IMetabaseSchemaCompiler : IUnknown
{
    HRESULT Compile         ([in] LPCWSTR                 i_wszExtensionsXmlFile,
                             [in] LPCWSTR                 i_wszResultingOutputXmlFile
                            );
    HRESULT GetBinFileName  ([out] LPWSTR                  o_wszBinFileName,
                             [out] ULONG *                 io_pcchSizeBinFileName
                            );
    HRESULT SetBinPath      ([in] LPCWSTR                 i_wszBinPath
                            );
    HRESULT ReleaseBinFileName
                            ([in] LPCWSTR                 i_wszBinFileName
                            );
};


// -----------------------------------------
// ICatalogErrorLogger (common use):
[
    uuid(EB623F6E-5AFA-402d-BBE0-CF74D34EB4C3),
    helpstring("ICatalogErrorLogger"),
    pointer_default(unique)

]
[local] interface ICatalogErrorLogger : IUnknown
{
    HRESULT LogError        ([in] HRESULT     i_hrErrorCode,
                             [in] ULONG       i_ulCategory,
                             [in] ULONG       i_ulEvent,
                             [in] LPCWSTR     i_szSource,
                             [in] ULONG       i_ulLineNumber
                            );
};

// -----------------------------------------
// ICatalogErrorLogger2 (common use):
[
    uuid(190B6C3B-A2C5-4e40-B1F7-A2C6D455CD5B),
    helpstring("ICatalogErrorLogger2"),
    pointer_default(unique)

]
[local] interface ICatalogErrorLogger2 : IUnknown
{
    HRESULT ReportError    ([in] ULONG      i_BaseVersion_DETAILEDERRORS,
                            [in] ULONG      i_ExtendedVersion_DETAILEDERRORS,
                            [in] ULONG      i_cDETAILEDERRORS_NumberOfColumns,
                            [in] ULONG *    i_acbSizes,
                            [in] LPVOID *   i_apvValues);
}


// -----------------------------------------
// ISimpleTableRead2 (common use):
[
    uuid(2e1a560f-18b6-11d3-8fe3-00c04fc2e0c7),
    helpstring("ISimpleTableRead2"),
    pointer_default(unique)
]
[local] interface ISimpleTableRead2 : IUnknown
{
    HRESULT GetRowIndexByIdentity   ([in] ULONG* i_acbSizes, [in] LPVOID* i_apvValues, [out] ULONG* o_piRow);

    HRESULT GetColumnValues         ([in] ULONG i_iRow, [in] ULONG i_cColumns, [in] ULONG* i_aiColumns, [out] ULONG* o_acbSizes, [out] LPVOID* o_apvValues);

    HRESULT GetTableMeta            (   [out] ULONG* o_pcVersion, [out] DWORD* o_pfTable,
                                        [out] ULONG* o_pcRows, [out] ULONG* o_pcColumns );
    HRESULT GetColumnMetas          ([in] ULONG i_cColumns, [in] ULONG* i_aiColumns, [out] SimpleColumnMeta* o_aColumnMetas );

    HRESULT GetRowIndexBySearch     ([in] ULONG i_iStartingRow, [in] ULONG i_cColumns, [in] ULONG* i_aiColumns, [in] ULONG* i_acbSizes, [in] LPVOID* i_apvValues, [out] ULONG* o_piRow);
};

// -----------------------------------------
// ISimpleTableWrite2: (common use)
// Once a simple table is obtained, callers write the table via this interface.
[
    uuid(2e1a5610-18b6-11d3-8fe3-00c04fc2e0c7),
    helpstring("ISimpleTableWrite2"),
    pointer_default(unique)

]
[local] interface ISimpleTableWrite2 : ISimpleTableRead2
{
    HRESULT AddRowForDelete         ([in] ULONG i_iReadRow);
    HRESULT AddRowForInsert         ([out] ULONG* o_piWriteRow);
    HRESULT AddRowForUpdate         ([in] ULONG i_iReadRow, [out] ULONG* o_piWriteRow);

    HRESULT SetWriteColumnValues    ([in] ULONG i_iRow, [in] ULONG i_cColumns, [in] ULONG* i_aiColumns, [in] ULONG* i_acbSizes, [in] LPVOID* i_apvValues);
    HRESULT GetWriteColumnValues    ([in] ULONG i_iRow, [in] ULONG i_cColumns, [in] ULONG* i_aiColumns, 
                                        [out] DWORD* o_afStatus, [out] ULONG* o_acbSizes, [out] LPVOID* o_apvValues);

    HRESULT GetWriteRowIndexByIdentity  ([in] ULONG* i_acbSizes, [in] LPVOID* i_apvValues, [out] ULONG* o_piRow);
    HRESULT UpdateStore             ();
    HRESULT GetWriteRowIndexBySearch([in] ULONG i_iStartingRow, [in] ULONG i_cColumns, [in] ULONG* i_aiColumns, [in] ULONG* i_acbSizes, [in] LPVOID* i_apvValues, [out] ULONG* o_piRow);
    HRESULT GetErrorTable           ([in] DWORD i_fServiceRequests, [out] LPVOID* o_ppvSimpleTable);
}

// -----------------------------------------
// ISimpleTableAdvanced (advanced/interceptor use):
[
    uuid(2e1a5611-18b6-11d3-8fe3-00c04fc2e0c7),
    helpstring("ISimpleTableAdvanced"),
    pointer_default(unique)

]
[local] interface ISimpleTableAdvanced : IUnknown
{
    HRESULT PopulateCache           ();

    HRESULT GetDetailedErrorCount   ([out] ULONG* o_pcErrs);
    HRESULT GetDetailedError        ([in] ULONG i_iErr, [out] STErr* o_pSTErr);
};

// -----------------------------------------
// ISnapshotManager (common use):
[
    uuid(962B6F98-1CCA-4cf9-8663-52BE195859AE),
    helpstring("ISnapshotManager"),
    pointer_default(unique)
]
[local]  interface ISnapshotManager : IUnknown
{
    HRESULT QueryLatestSnapshot     ([out] SNID* o_psnid);
    HRESULT AddRefSnapshot          (SNID i_snid);
    HRESULT ReleaseSnapshot         (SNID i_snid);
};



// ============================================================================
// INTERCEPTOR INTERFACES:
// ============================================================================

// -----------------------------------------
// ISimpleTableController (interceptor use):
[
    uuid(2e1a5612-18b6-11d3-8fe3-00c04fc2e0c7),
    helpstring("ISimpleTableController"),
    pointer_default(unique)

]
[local] interface ISimpleTableController : ISimpleTableAdvanced
{
    HRESULT ShapeCache              ([in] DWORD i_fTable, [in] ULONG i_cColumns, [in] SimpleColumnMeta* i_acolmetas, [in] LPVOID* i_apvDefaults, [in] ULONG* i_acbSizes);
    HRESULT PrePopulateCache        ([in] DWORD i_fControl);
    HRESULT PostPopulateCache       ();
    HRESULT DiscardPendingWrites    ();

    HRESULT GetWriteRowAction       ([in] ULONG i_iRow, DWORD* o_peAction);
    HRESULT SetWriteRowAction       ([in] ULONG i_iRow, DWORD i_eAction);
    HRESULT ChangeWriteColumnStatus ([in] ULONG i_iRow, ULONG i_iColumn, DWORD i_fStatus);

    HRESULT AddDetailedError        ([in] STErr* o_pSTErr);

    HRESULT GetMarshallingInterface ([out] IID * o_piid, [out, iid_is(o_piid)] LPVOID * o_ppItf);
};

// -----------------------------------------
// IAdvancedTableDispenser (interceptor use):
[
    uuid(e3ec3192-544c-11d3-8fe9-00c04fc2e0c7),
    helpstring("IAdvancedTableDispenser"),
    pointer_default(unique)

]
[local] interface IAdvancedTableDispenser : ISimpleTableDispenser2
{
    HRESULT GetMemoryTable  (   [in] LPCWSTR                i_wszDatabase, 
                                [in] LPCWSTR                i_wszTable, 
                                [in] ULONG                  i_TableID,
                                [in] LPVOID                 i_QueryData,
                                [in] LPVOID                 i_QueryMeta,
                                [in] DWORD                  i_eQueryFormat,
                                [in] DWORD                  i_fServiceRequests, 
                                [out] ISimpleTableWrite2**  o_ppISTWrite    );
    
    HRESULT GetProductID    (   [out]       LPWSTR          o_wszProductID,
                                [in, out]   DWORD *         io_pcchProductID);
    HRESULT GetCatalogErrorLogger
                            (   [out] ICatalogErrorLogger2** o_ppErrorLogger);
    HRESULT SetCatalogErrorLogger
                            (   [in]  ICatalogErrorLogger2*  i_pErrorLogger );
};

// -----------------------------------------
// ISimpleTableInterceptor (interceptor use):
[
    uuid(165887C6-43A8-11d3-B131-00805FC73204),
    helpstring("ISimpleTableInterceptor"),
    pointer_default(unique)

]
[local] interface ISimpleTableInterceptor : IUnknown
{
    HRESULT Intercept   (
                        [in] LPCWSTR                    i_wszDatabase,
                        [in] LPCWSTR                    i_wszTable, 
                        [in] ULONG                      i_TableID,
                        [in] LPVOID                     i_QueryData,
                        [in] LPVOID                     i_QueryMeta,
                        [in] DWORD                      i_eQueryFormat,
                        [in] DWORD                      i_fLOS,
                        [in] IAdvancedTableDispenser*   i_pISTDisp,
                        [in] LPCWSTR                    i_wszLocator,
                        [in] LPVOID                     i_pSimpleTable,
                        [out] LPVOID*                   o_ppvSimpleTable
                        );
};

// -----------------------------------------
// ISimplePlugin (interceptor use):
[
    uuid(E1AD849C-4495-11d3-B131-00805FC73204),
    helpstring("ISimplePlugin"),
    pointer_default(unique)

]
[local] interface ISimplePlugin : IUnknown
{
    HRESULT OnInsert([in] ISimpleTableDispenser2* i_pDisp2, [in] LPCWSTR i_wszDatabase, [in] LPCWSTR i_wszTable, [in] DWORD i_fLOS, [in] ULONG iRow, [in] ISimpleTableWrite2* i_pISTW2);
    HRESULT OnUpdate([in] ISimpleTableDispenser2* i_pDisp2, [in] LPCWSTR i_wszDatabase, [in] LPCWSTR i_wszTable, [in] DWORD i_fLOS, [in] ULONG iRow, [in] ISimpleTableWrite2* i_pISTW2);
    HRESULT OnDelete([in] ISimpleTableDispenser2* i_pDisp2, [in] LPCWSTR i_wszDatabase, [in] LPCWSTR i_wszTable, [in] DWORD i_fLOS, [in] ULONG iRow, [in] ISimpleTableWrite2* i_pISTW2);
}

// -----------------------------------------
// ISimpleInterceptorPlugin (interceptor use):
[
    uuid(E1AD849D-4495-11d3-B131-00805FC73204),
    helpstring("ISimpleInterceptorPlugin"),
    pointer_default(unique)

]
[local] interface IInterceptorPlugin : ISimpleTableInterceptor
{
    HRESULT OnPopulateCache([in] ISimpleTableWrite2* i_pISTW2);
    HRESULT OnUpdateStore([in] ISimpleTableWrite2* i_pISTW2);
}


// ============================================================================
// EVENT INTERFACES:
// ============================================================================

// -----------------------------------------
// ISimpleTableEvent (common use): TODO: BUGBUG: Replace this with ISimplePlugin:
[
uuid(31348BD5-781F-4375-9BBD-1C6F06B5A417),
object,
helpstring("ISimpleTableEvent Interface"),
pointer_default(unique)
]
[local] interface ISimpleTableEvent : IUnknown
{
    HRESULT OnChange(   [in] ISimpleTableWrite2**   i_ppISTWrite, 
                        [in] ULONG                  i_cTables, 
                        [in] DWORD                  i_dwCookie);
}

// -----------------------------------------
// ISimpleTableAdvise (common use):
[
uuid(FDB5BA55-6279-4873-8461-B62457DF8F20),
object,
helpstring("ISimpleTableAdvise Interface"),
pointer_default(unique)
]
[local] interface ISimpleTableAdvise : IUnknown
{
    HRESULT SimpleTableAdvise(  [in] ISimpleTableEvent* i_pISTEvent,
                                [in] SNID               i_snid,
                                [in] MultiSubscribe*    i_ams,
                                [in] ULONG              i_cms,
                                [out] DWORD*            o_pdwCookie);

    HRESULT SimpleTableUnadvise([in] DWORD              i_dwCookie);
};

// ============================================================================
// INTERNAL INTERFACES:
// ============================================================================

// -----------------------------------------
// ISimpleTableEventManager (internal use):
[
uuid(E27D38E9-189F-4ec4-9BD5-0AB5E2602624),
object,
helpstring("ISimpleTableEventManager Interface"),
pointer_default(unique)
]
//The internal interface used by the dispenser and the notification logic table.
[local] interface ISimpleTableEventMgr : IUnknown
{
	HRESULT IsTableConsumed([in] LPCWSTR i_wszDatabase, [in] LPCWSTR i_wszTable);
	HRESULT AddUpdateStoreDelta ([in] LPCWSTR i_wszTableName, [in] char* i_pWriteCache, [in] ULONG i_cbWriteCache, [in] ULONG i_cbWriteVarData);
	
	HRESULT FireEvents([in] ULONG i_snid);
	HRESULT CancelEvents();
	HRESULT RehookNotifications();
	HRESULT InitMetabaseListener();
	HRESULT UninitMetabaseListener();
};

// -----------------------------------------
// ISimpleTableFileChange (internal use)
[
uuid(E1744E4E-386D-45cb-80B8-A5037600CEB3),
object,
helpstring("ISimpleTableFileChange Interface"),
pointer_default(unique)
]
[local] interface ISimpleTableFileChange : IUnknown
{
    HRESULT OnFileCreate([in] LPCWSTR i_wszFileName);
    HRESULT OnFileModify([in] LPCWSTR i_wszFileName);
    HRESULT OnFileDelete([in] LPCWSTR i_wszFileName);
}

// -----------------------------------------
// ISimpleTableFileAdvise (internal use):
[
uuid(E96C7344-7E2B-4c28-8502-F075CF6C62F0),
object,
helpstring("ISimpleTableFileAdvise Interface"),
pointer_default(unique)
]
[local] interface ISimpleTableFileAdvise : IUnknown
{
    HRESULT SimpleTableFileAdvise(  [in] ISimpleTableFileChange *i_pISTFile,
                                    [in] LPCWSTR                i_wszDirectory,
                                    [in] LPCWSTR                i_wszFile,
                                    [in] DWORD                  i_fFlags,
                                    [out] DWORD                 *o_pdwCookie);

    HRESULT SimpleTableFileUnadvise([in] DWORD                  i_dwCookie);
};

// -----------------------------------------
// ISimpleTableDispenserWiring (internal use):
[
    uuid(A8927A44-D3CE-11d1-8472-006008B0E5CA),
    helpstring("ISimpleTableDispenserWiring"),
    pointer_default(unique)
]
[local] interface ISimpleTableDispenserWiring : IUnknown
{
    HRESULT GetMarshallingConnection    ([in] LPVOID i_QueryData, [in] LPVOID i_QueryMeta, [in] DWORD i_eQueryFormat, [in] REFIID i_riid, [out] void** o_ppv);
    HRESULT ExtractWiringInformation    (
                                        [in] DWORD          i_fClientOrServer, 
                                        [in] LPCWSTR        i_wszDatabase, 
                                        [in] LPCWSTR        i_wszTable, 
                                        [in] LPVOID         i_QueryData, 
                                        [in] LPVOID         i_QueryMeta, 
                                        [in] ULONG          i_QueryType,
                                        [in] DWORD          i_fTable, 

                                        [out] CLSID*        o_pclsidDataTableDispenser, 
                                        [out] LPWSTR*       o_pwszLocator,
                                        [out] CLSID**       o_paclsidLogicTableDispenser, 
                                        [out] ULONG*        o_pcLogicTableDispenser,
                                        [out] IID*          o_pIIDMarshallingConnection
                                        );
};

// -----------------------------------------
// IShellInitialize (internal use):
[
    uuid(E1AD849E-4495-11d3-B131-00805FC73204),
    helpstring("IShellInitialize"),
    pointer_default(unique)

]
[local] interface IShellInitialize : IUnknown
{
    HRESULT Initialize ([in] LPCWSTR i_wszDatabase, [in] LPCWSTR i_wszTable, [in] ULONG i_TableID, [in] LPVOID i_QueryData, [in] LPVOID i_QueryMeta, [in] DWORD i_eQueryFormat,
                        [in] DWORD i_fTable, [in] IAdvancedTableDispenser* i_pISTDisp, [in] LPCWSTR i_wszLocator, [in] LPVOID i_pvSimpleTable, [in] IInterceptorPlugin * i_pInterceptorPlugin,
                        [in] ISimplePlugin * i_pReadPlugin, [in] ISimplePlugin * i_pWritePlugin, [out] LPVOID * o_ppvSimpleTable);

}

// -----------------------------------------
// ISimpleClientTableOptimizer (internal use):
[
    uuid(0D911F10-DAEE-11d1-8476-006008B0E5CA),
    helpstring("ISimpleClientTableOptimizer"),
    pointer_default(unique)
]
[local] interface ISimpleClientTableOptimizer : IUnknown
{
    HRESULT SetMarshallingConnection (LPVOID i_pUnk);
}

// -----------------------------------------
// ISimpleTableMarshall (internal use):
cpp_quote("#define fST_MCACHE_READ				0x00010000")
cpp_quote("#define fST_MCACHE_WRITE				0x00020000")
cpp_quote("#define fST_MCACHE_ERRS				0x00040000")
cpp_quote("#define fST_MCACHE_WRITE_COPY		0x00080000")
cpp_quote("#define fST_MCACHE_WRITE_MERGE		0x00100000")
cpp_quote("#define maskfST_MCACHE				0x001F0000")
[
    uuid(e7073790-bbc6-11d1-9d31-006008b0e5ca),
    helpstring("ISimpleTableMarshall"),
    pointer_default(unique)
]
[local] interface ISimpleTableMarshall : IUnknown
{
    HRESULT SupplyMarshallable (
        [in]                                    DWORD               i_fCaches,
        
        [out, size_is( , *o_pcb1)]              char **             o_ppv1,
        [out]                                   ULONG *             o_pcb1,
        [out, size_is( , *o_pcb2)]              char **             o_ppv2,
        [out]                                   ULONG *             o_pcb2,
        [out, size_is( , *o_pcb3)]              char **             o_ppv3,
        [out]                                   ULONG *             o_pcb3,
        [out, size_is( , *o_pcb4)]              char **             o_ppv4,
        [out]                                   ULONG *             o_pcb4,
        [out, size_is( , *o_pcb5)]              char **             o_ppv5,
        [out]                                   ULONG *             o_pcb5
    );

    HRESULT ConsumeMarshallable (
        [in]                                    DWORD               i_fCaches,
        
        [in, size_is(i_cb1), unique]            char *              i_pv1,
        [in]                                    ULONG               i_cb1,
        [in, size_is(i_cb2), unique]            char *              i_pv2,
        [in]                                    ULONG               i_cb2,
        [in, size_is(i_cb3), unique]            char *              i_pv3,
        [in]                                    ULONG               i_cb3,
        [in, size_is(i_cb4), unique]            char *              i_pv4,
        [in]                                    ULONG               i_cb4,
        [in, size_is(i_cb5), unique]            char *              i_pv5,
        [in]                                    ULONG               i_cb5
    );
};

typedef struct
{
    LPWSTR          wszLogicalPath;
    STQueryCell *   aQueryCells;
    ULONG           cNrQueryCells;
    BOOL            fAllowOverride;
} STConfigStore;

// -----------------------------------------
// ISimpleTableTranform
[
    uuid(7965650C-4DBE-4c97-9E15-321D4A92A795),
    helpstring("ISimpleTableTranform"),
    pointer_default(unique)

]
[local] interface ISimpleTableTransform: IUnknown
{
    HRESULT Initialize ([in] ISimpleTableDispenser2 * i_pDispenser, [in] LPCWSTR i_wszProtocol, [in] LPCWSTR i_wszSelector, [out] ULONG * o_pcRealConfigStores, [out] ULONG * o_pcPossibleConfigStores);
    HRESULT GetRealConfigStores ([in] ULONG i_cConfigStores, [in, out, size_is(i_cConfigStores)] STConfigStore * io_paConfigStores);
    HRESULT GetPossibleConfigStores ([in] ULONG i_cPossibleConfigStores, [in, out, size_is(i_cPossibleConfigStores)] STConfigStore * io_paConfigStores);

}

typedef struct
{
    BOOL            fAllowOverride;
} STMergeContext;

// -----------------------------------------
// ISimpleTableMerge
[
    uuid(A0A1A94A-8032-4666-9B52-1D822CFED2A2),
    helpstring("ISimpleTableMerge"),
    pointer_default(unique)
]
[local] interface ISimpleTableMerge: IUnknown
{
    HRESULT Initialize ([in] ULONG i_cNrColumns, [in] ULONG i_cNrPKColumns, [in, size_is(i_cNrPKColumns)] ULONG *i_aPKColumns);
    HRESULT Merge ([in] ISimpleTableRead2 * i_pSTRead, [in, out] ISimpleTableWrite2 * io_pCache, [in] STMergeContext *i_pContext);
}

#endif __STABLE_IDL__
