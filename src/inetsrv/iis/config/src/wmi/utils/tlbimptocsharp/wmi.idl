
/*++

Copyright (C) 1996-2001 Microsoft Corporation

Module Name:

    WBEMCLI.IDL

Abstract:

  Interfaces for WBEM clients. These interfaces are implemented by CIMOM and
  used by clients.  Additional interfaces needed by WBEM providers can be
  found in WBEMPROV.IDL

--*/
//import "objidl.idl";
//import "oleidl.idl";
//import "oaidl.idl";

//typedef VARIANT WBEM_VARIANT;

[uuid(7ec196fe-7005-11d1-ad90-00c04fd8fdff)]
library WbemClient_v1
{
    importlib("stdole32.tlb");
typedef [string] WCHAR* WBEM_WSTR;
typedef [string] const WCHAR* WBEM_CWSTR;

	interface IWbemClassObject;
	interface IWbemQualifierSet;
	interface IWbemLocator;
	interface IWbemObjectSink;
	interface IEnumWbemClassObject;
	interface IWbemContext;
	interface IWbemCallResult;
	interface IWbemServices;
	interface IWbemRawSdAccessor;
	interface IWbemShutdown;
	interface IWbemCallStatus;
	interface IWbemObjectTextSrc;
	interface IWbemObjectAccess; // : IWbemClassObject
	interface IMofCompiler;
	interface IUnsecuredApartment;
	interface IWbemStatusCodeText;
	interface IWbemBackupRestore;
	interface IWbemBackupRestoreEx; // : IWbemBackupRestore
	interface IWbemRefresher;
	interface IWbemHiPerfEnum;
	interface IWbemConfigureRefresher;
	interface IWbemUnboundObjectSink;
	interface IWbemPropertyProvider;
	interface IWbemEventProvider;
	interface IWbemEventProviderQuerySink;
	interface IWbemEventProviderSecurity;
	interface IWbemProviderIdentity;
	interface IWbemEventConsumerProvider;
	interface IWbemEventConsumerProviderEx; // : IWbemEventConsumerProvider
	interface IWbemProviderInitSink;
	interface IWbemProviderInit;
	interface IWbemHiPerfProvider;
	interface IWbemDecoupledRegistrar;
	interface IWbemDecoupledBasicEventProvider; // : IWbemDecoupledRegistrar
	interface IWbemSecureObjectSink; // : IWbemObjectSink
	interface IWbemEventSink; // : IWbemSecureObjectSink
	interface IWbemPathKeyList;
	interface IWbemPath;
	interface IWbemQuery;

    /////////////////////////////////////////////////////////////////
    //

    typedef [v1_enum] enum tag_WBEM_GENUS_TYPE
    {
        WBEM_GENUS_CLASS = 1,
        WBEM_GENUS_INSTANCE = 2
    } WBEM_GENUS_TYPE;

    typedef [v1_enum] enum tag_WBEM_CHANGE_FLAG_TYPE
    {
        WBEM_FLAG_CREATE_OR_UPDATE = 0,
        WBEM_FLAG_UPDATE_ONLY = 0x1,
        WBEM_FLAG_CREATE_ONLY = 0x2,
        WBEM_FLAG_UPDATE_COMPATIBLE  = 0x0,
        WBEM_FLAG_UPDATE_SAFE_MODE = 0x20,
        WBEM_FLAG_UPDATE_FORCE_MODE = 0x40,
        WBEM_MASK_UPDATE_MODE = 0x60,

        WBEM_FLAG_ADVISORY  = 0x000010000

    } WBEM_CHANGE_FLAG_TYPE;

    typedef [v1_enum] enum tag_WBEM_GENERIC_FLAG_TYPE
    {
        WBEM_FLAG_RETURN_IMMEDIATELY = 0x10,
        WBEM_FLAG_RETURN_WBEM_COMPLETE = 0,
        WBEM_FLAG_BIDIRECTIONAL = 0,
        WBEM_FLAG_FORWARD_ONLY = 0x20,
        WBEM_FLAG_NO_ERROR_OBJECT = 0x40,
        WBEM_FLAG_RETURN_ERROR_OBJECT = 0,
        WBEM_FLAG_SEND_STATUS = 0x80,
        WBEM_FLAG_DONT_SEND_STATUS = 0,
        WBEM_FLAG_ENSURE_LOCATABLE = 0x100,
        WBEM_FLAG_DIRECT_READ = 0x200,
        WBEM_FLAG_SEND_ONLY_SELECTED = 0,

        // backward-compatibility
        WBEM_RETURN_WHEN_COMPLETE = 0,
        WBEM_RETURN_IMMEDIATELY = 0x10,

        // these bits are reserved!!
        WBEM_MASK_RESERVED_FLAGS = 0x1F000,

        WBEM_FLAG_USE_AMENDED_QUALIFIERS = 0x20000,
            // If used, the context object must have one or more of the following
            //  BOOL "INCLUDE_OWNER"
            //  BOOL "INCLUDE_DACL"
            //  BOOL "INCLUDE_SACL"
            //  BOOL "INCLUDE_GROUP"

        WBEM_FLAG_STRONG_VALIDATION = 0x100000,

    } WBEM_GENERIC_FLAG_TYPE;

    typedef enum tag_WBEM_STATUS_TYPE
    {
        WBEM_STATUS_COMPLETE = 0,
        WBEM_STATUS_REQUIREMENTS = 1,
        WBEM_STATUS_PROGRESS = 2,
    } WBEM_STATUS_TYPE;

    typedef [v1_enum] enum tag_WBEM_TIMEOUT_TYPE
    {
        WBEM_NO_WAIT = 0,
        WBEM_INFINITE = 0xFFFFFFFF,
    } WBEM_TIMEOUT_TYPE;

    typedef [v1_enum] enum tag_WBEM_CONDITION_FLAG_TYPE
    {
        WBEM_FLAG_ALWAYS = 0,
        WBEM_FLAG_ONLY_IF_TRUE = 0x1,
        WBEM_FLAG_ONLY_IF_FALSE = 0x2,
        WBEM_FLAG_ONLY_IF_IDENTICAL = 0x3,
        WBEM_MASK_PRIMARY_CONDITION = 0x3,

        WBEM_FLAG_KEYS_ONLY = 0x4,
        WBEM_FLAG_REFS_ONLY = 0x8,

        WBEM_FLAG_LOCAL_ONLY = 0x10,
        WBEM_FLAG_PROPAGATED_ONLY = 0x20,
        WBEM_FLAG_SYSTEM_ONLY = 0x30,
        WBEM_FLAG_NONSYSTEM_ONLY = 0x40,

        WBEM_MASK_CONDITION_ORIGIN = 0x70,

        WBEM_FLAG_CLASS_OVERRIDES_ONLY = 0x100,
        WBEM_FLAG_CLASS_LOCAL_AND_OVERRIDES = 0x200,
        WBEM_MASK_CLASS_CONDITION = 0x300


    } WBEM_CONDITION_FLAG_TYPE;

    typedef [v1_enum] enum tag_WBEM_FLAVOR_TYPE
    {
        WBEM_FLAVOR_DONT_PROPAGATE = 0,
        WBEM_FLAVOR_FLAG_PROPAGATE_TO_INSTANCE = 0x1,
        WBEM_FLAVOR_FLAG_PROPAGATE_TO_DERIVED_CLASS = 0x2,
        WBEM_FLAVOR_MASK_PROPAGATION = 0x0F,

        WBEM_FLAVOR_OVERRIDABLE = 0,
        WBEM_FLAVOR_NOT_OVERRIDABLE = 0x10,
        WBEM_FLAVOR_MASK_PERMISSIONS = 0x10,

        WBEM_FLAVOR_ORIGIN_LOCAL = 0,
        WBEM_FLAVOR_ORIGIN_PROPAGATED = 0x20,
        WBEM_FLAVOR_ORIGIN_SYSTEM = 0x40,
        WBEM_FLAVOR_MASK_ORIGIN = 0x60,

        WBEM_FLAVOR_NOT_AMENDED = 0,
        WBEM_FLAVOR_AMENDED = 0x80,
        WBEM_FLAVOR_MASK_AMENDED = 0x80

    } WBEM_FLAVOR_TYPE;

    typedef [v1_enum] enum tag_WBEM_QUERY_FLAG_TYPE
    {
        WBEM_FLAG_DEEP = 0,
        WBEM_FLAG_SHALLOW = 1,
        WBEM_FLAG_PROTOTYPE = 2
    } WBEM_QUERY_FLAG_TYPE;

    typedef [v1_enum] enum tag_WBEM_SECURITY_FLAGS
    {
        WBEM_ENABLE = 1,
        WBEM_METHOD_EXECUTE = 2,
        WBEM_FULL_WRITE_REP = 4,
        WBEM_PARTIAL_WRITE_REP = 8,
        WBEM_WRITE_PROVIDER = 0x10,
        WBEM_REMOTE_ACCESS = 0X20,

        WBEM_RIGHT_SUBSCRIBE = 0x1,
        WBEM_RIGHT_PUBLISH = 0x1

    } WBEM_SECURITY_FLAGS;

    typedef [v1_enum] enum tag_WBEM_LIMITATION_FLAG_TYPE
    {
        WBEM_FLAG_EXCLUDE_OBJECT_QUALIFIERS = 0x10,
        WBEM_FLAG_EXCLUDE_PROPERTY_QUALIFIERS = 0x20
    } WBEM_LIMITATION_FLAG_TYPE;

    typedef [v1_enum] enum tag_WBEM_TEXT_FLAG_TYPE
    {
        WBEM_FLAG_NO_FLAVORS = 0x1
    } WBEM_TEXT_FLAG_TYPE;

    typedef [v1_enum] enum tag_WBEM_COMPARISON_FLAG
    {
        WBEM_COMPARISON_INCLUDE_ALL = 0,
        WBEM_FLAG_IGNORE_QUALIFIERS = 0x1,
        WBEM_FLAG_IGNORE_OBJECT_SOURCE = 0x2,
        WBEM_FLAG_IGNORE_DEFAULT_VALUES = 0x4,
        WBEM_FLAG_IGNORE_CLASS = 0x8,
        WBEM_FLAG_IGNORE_CASE = 0x10,
        WBEM_FLAG_IGNORE_FLAVOR = 0x20
    } WBEM_COMPARISON_FLAG;

    typedef [v1_enum] enum tag_WBEM_LOCKING
    {
        WBEM_FLAG_ALLOW_READ = 0x1,
    } WBEM_LOCKING_FLAG_TYPE;


    typedef [v1_enum] enum tag_CIMTYPE_ENUMERATION
    {
        CIM_ILLEGAL = 0xfff,
        CIM_EMPTY = 0,

        CIM_SINT8 = 16,
        CIM_UINT8 = 17,
        CIM_SINT16 = 2,
        CIM_UINT16 = 18,
        CIM_SINT32 = 3,
        CIM_UINT32 = 19,
        CIM_SINT64 = 20,
        CIM_UINT64 = 21,
        CIM_REAL32 = 4,
        CIM_REAL64 = 5,
        CIM_BOOLEAN = 11,
        CIM_STRING = 8,
        CIM_DATETIME = 101,
        CIM_REFERENCE = 102,
        CIM_CHAR16 = 103,
        CIM_OBJECT = 13,

        CIM_FLAG_ARRAY = 0x2000
    } CIMTYPE_ENUMERATION;

    typedef [v1_enum] enum tag_WBEM_BACKUP_RESTORE_FLAGS
    {
        WBEM_FLAG_BACKUP_RESTORE_DEFAULT = 0,
        WBEM_FLAG_BACKUP_RESTORE_FORCE_SHUTDOWN = 1
    } WBEM_BACKUP_RESTORE_FLAGS;

    typedef [v1_enum] enum tag_WBEM_REFRESHER_FLAGS
    {
        WBEM_FLAG_REFRESH_AUTO_RECONNECT = 0,
        WBEM_FLAG_REFRESH_NO_AUTO_RECONNECT = 1
    } WBEM_REFRESHER_FLAGS;


    typedef enum tag_WBEM_SHUTDOWN_FLAGS
    {
        WBEM_SHUTDOWN_UNLOAD_COMPONENT = 1,     // Component receiving this is being notified it is no longer required
        WBEM_SHUTDOWN_WMI              = 2,     // WMI itself is shutting down
        WBEM_SHUTDOWN_OS               = 3      // OS is being shut down
    }   WBEM_SHUTDOWN_FLAGS;

    typedef long CIMTYPE;

    typedef [v1_enum] enum tag_WBEMSTATUS_FORMAT
    {
        WBEMSTATUS_FORMAT_NEWLINE= 0,           // Newline appended to textual representation of status code
        WBEMSTATUS_FORMAT_NO_NEWLINE= 1         // No Newline appended to textual representation of status code
    }   WBEMSTATUS_FORMAT;


    /////////////////////////////////////////////////////////////////
    //

    typedef [v1_enum] enum tag_WBEMSTATUS
    {
        WBEM_NO_ERROR = 0,
        WBEM_S_NO_ERROR = 0,
        WBEM_S_SAME = 0,

        // Non-error status codes.
        // =======================

        WBEM_S_FALSE = 1,

        WBEM_S_ALREADY_EXISTS           = 0x40001,
        WBEM_S_RESET_TO_DEFAULT         = 0x40002,
        WBEM_S_DIFFERENT                = 0x40003,
        WBEM_S_TIMEDOUT                 = 0x40004,
        WBEM_S_NO_MORE_DATA             = 0x40005,
        WBEM_S_OPERATION_CANCELLED      = 0x40006,
        WBEM_S_PENDING                  = 0x40007,
        WBEM_S_DUPLICATE_OBJECTS        = 0x40008,
        WBEM_S_ACCESS_DENIED            = 0x40009,
        WBEM_S_PARTIAL_RESULTS          = 0x40010,

        WBEM_S_NO_POSTHOOK              = 0x40011,
        WBEM_S_POSTHOOK_WITH_BOTH       = 0x40012,
        WBEM_S_POSTHOOK_WITH_NEW        = 0x40013,
        WBEM_S_POSTHOOK_WITH_STATUS     = 0x40014,
        WBEM_S_POSTHOOK_WITH_OLD        = 0x40015,

        WBEM_S_REDO_PREHOOK_WITH_ORIGINAL_OBJECT = 0x40016,

        WBEM_S_SOURCE_NOT_AVAILABLE     = 0x40017,

        // Errors.
        // =======

        WBEM_E_FAILED                           = 0x80041001,
        WBEM_E_NOT_FOUND                        = 0x80041002,
        WBEM_E_ACCESS_DENIED                    = 0x80041003,
        WBEM_E_PROVIDER_FAILURE                 = 0x80041004,
        WBEM_E_TYPE_MISMATCH                    = 0x80041005,
        WBEM_E_OUT_OF_MEMORY                    = 0x80041006,
        WBEM_E_INVALID_CONTEXT                  = 0x80041007,
        WBEM_E_INVALID_PARAMETER                = 0x80041008,
        WBEM_E_NOT_AVAILABLE                    = 0x80041009,
        WBEM_E_CRITICAL_ERROR                   = 0x8004100A,
        WBEM_E_INVALID_STREAM                   = 0x8004100B,
        WBEM_E_NOT_SUPPORTED                    = 0x8004100C,
        WBEM_E_INVALID_SUPERCLASS               = 0x8004100D,
        WBEM_E_INVALID_NAMESPACE                = 0x8004100E,
        WBEM_E_INVALID_OBJECT                   = 0x8004100F,
        WBEM_E_INVALID_CLASS                    = 0x80041010,
        WBEM_E_PROVIDER_NOT_FOUND               = 0x80041011,
        WBEM_E_INVALID_PROVIDER_REGISTRATION    = 0x80041012,
        WBEM_E_PROVIDER_LOAD_FAILURE            = 0x80041013,
        WBEM_E_INITIALIZATION_FAILURE           = 0x80041014,
        WBEM_E_TRANSPORT_FAILURE                = 0x80041015,
        WBEM_E_INVALID_OPERATION                = 0x80041016,
        WBEM_E_INVALID_QUERY                    = 0x80041017,
        WBEM_E_INVALID_QUERY_TYPE               = 0x80041018,
        WBEM_E_ALREADY_EXISTS                   = 0x80041019,
        WBEM_E_OVERRIDE_NOT_ALLOWED             = 0x8004101A,
        WBEM_E_PROPAGATED_QUALIFIER             = 0x8004101B,
        WBEM_E_PROPAGATED_PROPERTY              = 0x8004101C,
        WBEM_E_UNEXPECTED                       = 0x8004101D,
        WBEM_E_ILLEGAL_OPERATION                = 0x8004101E,
        WBEM_E_CANNOT_BE_KEY                    = 0x8004101F,
        WBEM_E_INCOMPLETE_CLASS                 = 0x80041020,
        WBEM_E_INVALID_SYNTAX                   = 0x80041021,
        WBEM_E_NONDECORATED_OBJECT              = 0x80041022,
        WBEM_E_READ_ONLY                        = 0x80041023,
        WBEM_E_PROVIDER_NOT_CAPABLE             = 0x80041024,
        WBEM_E_CLASS_HAS_CHILDREN               = 0x80041025,
        WBEM_E_CLASS_HAS_INSTANCES              = 0x80041026,
        WBEM_E_QUERY_NOT_IMPLEMENTED            = 0x80041027,
        WBEM_E_ILLEGAL_NULL                     = 0x80041028,
        WBEM_E_INVALID_QUALIFIER_TYPE           = 0x80041029,
        WBEM_E_INVALID_PROPERTY_TYPE            = 0x8004102A,
        WBEM_E_VALUE_OUT_OF_RANGE               = 0x8004102B,
        WBEM_E_CANNOT_BE_SINGLETON              = 0x8004102C,
        WBEM_E_INVALID_CIM_TYPE                 = 0x8004102D,
        WBEM_E_INVALID_METHOD                   = 0x8004102E,
        WBEM_E_INVALID_METHOD_PARAMETERS        = 0x8004102F,
        WBEM_E_SYSTEM_PROPERTY                  = 0x80041030,
        WBEM_E_INVALID_PROPERTY                 = 0x80041031,
        WBEM_E_CALL_CANCELLED                   = 0x80041032,
        WBEM_E_SHUTTING_DOWN                    = 0x80041033,
        WBEM_E_PROPAGATED_METHOD                = 0x80041034,
        WBEM_E_UNSUPPORTED_PARAMETER            = 0x80041035,
        WBEM_E_MISSING_PARAMETER_ID             = 0x80041036,
        WBEM_E_INVALID_PARAMETER_ID             = 0x80041037,
        WBEM_E_NONCONSECUTIVE_PARAMETER_IDS     = 0x80041038,
        WBEM_E_PARAMETER_ID_ON_RETVAL           = 0x80041039,
        WBEM_E_INVALID_OBJECT_PATH              = 0x8004103A,
        WBEM_E_OUT_OF_DISK_SPACE                = 0x8004103B,
        WBEM_E_BUFFER_TOO_SMALL                 = 0x8004103C,
        WBEM_E_UNSUPPORTED_PUT_EXTENSION        = 0x8004103D,
        WBEM_E_UNKNOWN_OBJECT_TYPE              = 0x8004103E,
        WBEM_E_UNKNOWN_PACKET_TYPE              = 0x8004103F,
        WBEM_E_MARSHAL_VERSION_MISMATCH         = 0x80041040,
        WBEM_E_MARSHAL_INVALID_SIGNATURE        = 0x80041041,
        WBEM_E_INVALID_QUALIFIER                = 0x80041042,
        WBEM_E_INVALID_DUPLICATE_PARAMETER      = 0x80041043,
        WBEM_E_TOO_MUCH_DATA                    = 0x80041044,
        WBEM_E_SERVER_TOO_BUSY                  = 0x80041045,
        WBEM_E_INVALID_FLAVOR                   = 0x80041046,
        WBEM_E_CIRCULAR_REFERENCE               = 0x80041047,
        WBEM_E_UNSUPPORTED_CLASS_UPDATE         = 0x80041048,
        WBEM_E_CANNOT_CHANGE_KEY_INHERITANCE    = 0x80041049,
        WBEM_E_CANNOT_CHANGE_INDEX_INHERITANCE  = 0x80041050,
        WBEM_E_TOO_MANY_PROPERTIES              = 0x80041051,
        WBEM_E_UPDATE_TYPE_MISMATCH             = 0x80041052,
        WBEM_E_UPDATE_OVERRIDE_NOT_ALLOWED      = 0x80041053,
        WBEM_E_UPDATE_PROPAGATED_METHOD         = 0x80041054,
        WBEM_E_METHOD_NOT_IMPLEMENTED           = 0x80041055,
        WBEM_E_METHOD_DISABLED                  = 0x80041056,
        WBEM_E_REFRESHER_BUSY                   = 0x80041057,
        WBEM_E_UNPARSABLE_QUERY                 = 0x80041058,
        WBEM_E_NOT_EVENT_CLASS                  = 0x80041059,
        WBEM_E_MISSING_GROUP_WITHIN             = 0x8004105A,
        WBEM_E_MISSING_AGGREGATION_LIST         = 0x8004105B,
        WBEM_E_PROPERTY_NOT_AN_OBJECT           = 0x8004105C,
        WBEM_E_AGGREGATING_BY_OBJECT            = 0x8004105D,
        WBEM_E_UNINTERPRETABLE_PROVIDER_QUERY   = 0x8004105F,
        WBEM_E_BACKUP_RESTORE_WINMGMT_RUNNING   = 0x80041060,
        WBEM_E_QUEUE_OVERFLOW                   = 0x80041061,
        WBEM_E_PRIVILEGE_NOT_HELD               = 0x80041062,
        WBEM_E_INVALID_OPERATOR                 = 0x80041063,
        WBEM_E_LOCAL_CREDENTIALS                = 0x80041064,
        WBEM_E_CANNOT_BE_ABSTRACT               = 0x80041065,
        WBEM_E_AMENDED_OBJECT                   = 0x80041066,
        WBEM_E_CLIENT_TOO_SLOW                  = 0x80041067,
        WBEM_E_NULL_SECURITY_DESCRIPTOR         = 0x80041068,
        WBEM_E_TIMED_OUT                        = 0x80041069,
        WBEM_E_INVALID_ASSOCIATION              = 0x8004106A,
        WBEM_E_AMBIGUOUS_OPERATION              = 0x8004106B,
        WBEM_E_QUOTA_VIOLATION                  = 0x8004106C,
        WBEM_E_RESERVED_001                     = 0x8004106D,
        WBEM_E_RESERVED_002                     = 0x8004106E,
        WBEM_E_UNSUPPORTED_LOCALE               = 0x8004106F,
        WBEM_E_HANDLE_OUT_OF_DATE               = 0x80041070,
        WBEM_E_CONNECTION_FAILED                = 0x80041071,
        WBEM_E_INVALID_HANDLE_REQUEST           = 0x80041072,
        WBEM_E_PROPERTY_NAME_TOO_WIDE           = 0x80041073,
        WBEM_E_CLASS_NAME_TOO_WIDE              = 0x80041074,
        WBEM_E_METHOD_NAME_TOO_WIDE             = 0x80041075,
        WBEM_E_QUALIFIER_NAME_TOO_WIDE          = 0x80041076,
        WBEM_E_RERUN_COMMAND                    = 0x80041077,
        WBEM_E_DATABASE_VER_MISMATCH            = 0x80041078,

        WBEM_E_VETO_DELETE                      = 0x80041079,
        WBEM_E_VETO_PUT                         = 0x8004107A,

        WBEM_E_INVALID_LOCALE                   = 0x80041080,

        WBEM_E_PROVIDER_SUSPENDED               = 0x80041081,
        WBEM_E_SYNCHRONIZATION_REQUIRED         = 0x80041082,
        WBEM_E_NO_SCHEMA                        = 0x80041083,

        WBEM_E_PROVIDER_ALREADY_REGISTERED      = 0x80041084,
        WBEM_E_PROVIDER_NOT_REGISTERED          = 0x80041085,
        WBEM_E_FATAL_TRANSPORT_ERROR            = 0x80041086,
        WBEM_E_ENCRYPTED_CONNECTION_REQUIRED    = 0x80041087,
        WBEM_E_PROVIDER_TIMED_OUT               = 0x80041088,
        WBEM_E_NO_KEY                           = 0x80041089,

        WBEMESS_E_REGISTRATION_TOO_BROAD        = 0x80042001,
        WBEMESS_E_REGISTRATION_TOO_PRECISE      = 0x80042002,

        WBEMMOF_E_EXPECTED_QUALIFIER_NAME         = 0x80044001,
        WBEMMOF_E_EXPECTED_SEMI                   = 0x80044002,
        WBEMMOF_E_EXPECTED_OPEN_BRACE             = 0x80044003,
        WBEMMOF_E_EXPECTED_CLOSE_BRACE            = 0x80044004,
        WBEMMOF_E_EXPECTED_CLOSE_BRACKET          = 0x80044005,
        WBEMMOF_E_EXPECTED_CLOSE_PAREN            = 0x80044006,
        WBEMMOF_E_ILLEGAL_CONSTANT_VALUE          = 0x80044007,
        WBEMMOF_E_EXPECTED_TYPE_IDENTIFIER        = 0x80044008,
        WBEMMOF_E_EXPECTED_OPEN_PAREN             = 0x80044009,
        WBEMMOF_E_UNRECOGNIZED_TOKEN              = 0x8004400A,
        WBEMMOF_E_UNRECOGNIZED_TYPE               = 0x8004400B,
        WBEMMOF_E_EXPECTED_PROPERTY_NAME          = 0x8004400C,
        WBEMMOF_E_TYPEDEF_NOT_SUPPORTED           = 0x8004400D,
        WBEMMOF_E_UNEXPECTED_ALIAS                = 0x8004400E,
        WBEMMOF_E_UNEXPECTED_ARRAY_INIT           = 0x8004400F,
        WBEMMOF_E_INVALID_AMENDMENT_SYNTAX        = 0x80044010,
        WBEMMOF_E_INVALID_DUPLICATE_AMENDMENT     = 0x80044011,
        WBEMMOF_E_INVALID_PRAGMA                  = 0x80044012,
        WBEMMOF_E_INVALID_NAMESPACE_SYNTAX        = 0x80044013,
        WBEMMOF_E_EXPECTED_CLASS_NAME             = 0x80044014,
        WBEMMOF_E_TYPE_MISMATCH                   = 0x80044015,
        WBEMMOF_E_EXPECTED_ALIAS_NAME             = 0x80044016,
        WBEMMOF_E_INVALID_CLASS_DECLARATION       = 0x80044017,
        WBEMMOF_E_INVALID_INSTANCE_DECLARATION    = 0x80044018,
        WBEMMOF_E_EXPECTED_DOLLAR                 = 0x80044019,
        WBEMMOF_E_CIMTYPE_QUALIFIER               = 0x8004401A,
        WBEMMOF_E_DUPLICATE_PROPERTY              = 0x8004401B,
        WBEMMOF_E_INVALID_NAMESPACE_SPECIFICATION = 0x8004401C,
        WBEMMOF_E_OUT_OF_RANGE                    = 0x8004401D,
        WBEMMOF_E_INVALID_FILE                    = 0x8004401E,
        WBEMMOF_E_ALIASES_IN_EMBEDDED             = 0x8004401F,
        WBEMMOF_E_NULL_ARRAY_ELEM                 = 0x80044020,
        WBEMMOF_E_DUPLICATE_QUALIFIER             = 0x80044021,
        WBEMMOF_E_EXPECTED_FLAVOR_TYPE            = 0x80044022,
        WBEMMOF_E_INCOMPATIBLE_FLAVOR_TYPES       = 0x80044023,
        WBEMMOF_E_MULTIPLE_ALIASES                = 0x80044024,
        WBEMMOF_E_INCOMPATIBLE_FLAVOR_TYPES2      = 0x80044025,
        WBEMMOF_E_NO_ARRAYS_RETURNED              = 0x80044026,
        WBEMMOF_E_MUST_BE_IN_OR_OUT               = 0x80044027,
        WBEMMOF_E_INVALID_FLAGS_SYNTAX            = 0x80044028,
        WBEMMOF_E_EXPECTED_BRACE_OR_BAD_TYPE      = 0x80044029,
        WBEMMOF_E_UNSUPPORTED_CIMV22_QUAL_VALUE   = 0x8004402A,
        WBEMMOF_E_UNSUPPORTED_CIMV22_DATA_TYPE    = 0x8004402B,
        WBEMMOF_E_INVALID_DELETEINSTANCE_SYNTAX   = 0x8004402C,
        WBEMMOF_E_INVALID_QUALIFIER_SYNTAX        = 0x8004402D,
        WBEMMOF_E_QUALIFIER_USED_OUTSIDE_SCOPE    = 0x8004402E,
        WBEMMOF_E_ERROR_CREATING_TEMP_FILE        = 0x8004402F,
        WBEMMOF_E_ERROR_INVALID_INCLUDE_FILE      = 0x80044030,
        WBEMMOF_E_INVALID_DELETECLASS_SYNTAX      = 0x80044031


    }   WBEMSTATUS;








typedef [v1_enum] enum tag_WMI_OBJ_TEXT
{
    WMI_OBJ_TEXT_CIM_DTD_2_0 = 1,           // The DTD that corresponds to CIM DTD Version 2.0
    WMI_OBJ_TEXT_WMI_DTD_2_0 = 2,           // The WMI DTD that corresponds to CIM DTD Version 2.0

    WMI_OBJ_TEXT_WMI_EXT1 = 3,              // Reserved for WMI future use
    WMI_OBJ_TEXT_WMI_EXT2 = 4,              // Reserved for WMI future use
    WMI_OBJ_TEXT_WMI_EXT3 = 5,              // Reserved for WMI future use
    WMI_OBJ_TEXT_WMI_EXT4 = 6,              // Reserved for WMI future use
    WMI_OBJ_TEXT_WMI_EXT5 = 7,              // Reserved for WMI future use
    WMI_OBJ_TEXT_WMI_EXT6 = 8,              // Reserved for WMI future use
    WMI_OBJ_TEXT_WMI_EXT7 = 9,              // Reserved for WMI future use
    WMI_OBJ_TEXT_WMI_EXT8 = 10,             // Reserved for WMI future use
    WMI_OBJ_TEXT_WMI_EXT9 = 11,             // Reserved for WMI future use
    WMI_OBJ_TEXT_WMI_EXT10 = 12,            // Reserved for WMI future use
    WMI_OBJ_TEXT_LAST = 13

}   WMI_OBJ_TEXT;


typedef struct tag_CompileStatusInfo
{
    long lPhaseError;       // 0, 1, 2, or 3 matching current return value
    HRESULT hRes;           // Actual error
    long ObjectNum;
    long FirstLine;
    long LastLine;
    DWORD dwOutFlags;
} WBEM_COMPILE_STATUS_INFO;

typedef [v1_enum] enum tag_WBEM_COMPILER_OPTIONS
{
    WBEM_FLAG_CHECK_ONLY = 0x1,
    WBEM_FLAG_AUTORECOVER = 0X2,
    WBEM_FLAG_WMI_CHECK = 0X4,
    WBEM_FLAG_CONSOLE_PRINT = 0X8,
    WBEM_FLAG_DONT_ADD_TO_LIST = 0X10,
    WBEM_FLAG_SPLIT_FILES = 0X20,
    WBEM_FLAG_CONNECT_REPOSITORY_ONLY = 0X40,

} WBEM_COMPILER_OPTIONS;














typedef [v1_enum] enum tag_WBEM_PROVIDER_REQUIREMENTS_TYPE
{
    WBEM_REQUIREMENTS_START_POSTFILTER = 0,
    WBEM_REQUIREMENTS_STOP_POSTFILTER = 1,
    WBEM_REQUIREMENTS_RECHECK_SUBSCRIPTIONS = 2
} WBEM_PROVIDER_REQUIREMENTS_TYPE;

typedef enum tag_WBEM_EXTRA_RETURN_CODES
{
    WBEM_S_INITIALIZED = 0,
    WBEM_S_LIMITED_SERVICE = 0x43001,
    WBEM_S_INDIRECTLY_UPDATED,
    WBEM_S_SUBJECT_TO_SDS,
    

    WBEM_E_RETRY_LATER = 0x80043001,
    WBEM_E_RESOURCE_CONTENTION,
} WBEM_EXTRA_RETURN_CODES;

typedef enum tag_WBEM_PROVIDER_FLAGS
{
    WBEM_FLAG_OWNER_UPDATE = 0x10000,
} WBEM_PROVIDER_FLAGS;





typedef [v1_enum] enum tag_WBEM_INFORMATION_FLAG_TYPE
{
        WBEM_FLAG_SHORT_NAME = 0x1,
        WBEM_FLAG_LONG_NAME = 0x2
} WBEM_INFORMATION_FLAG_TYPE;

typedef [v1_enum] enum tag_WBEM_BATCH_TYPE
{
    WBEM_FLAG_BATCH_IF_NEEDED = 0,
    WBEM_FLAG_MUST_BATCH = 0x1,
    WBEM_FLAG_MUST_NOT_BATCH = 0x2
} WBEM_BATCH_TYPE;



/////////////////////////////////////////////////////
// QUERY


    typedef [v1_enum] enum tag_WBEM_PATH_STATUS_FLAG
    {
          WBEMPATH_INFO_ANON_LOCAL_MACHINE    = 0x1,   //  <path has \\. as server name>
          WBEMPATH_INFO_HAS_MACHINE_NAME      = 0x2,   //  <not a dot>
          WBEMPATH_INFO_IS_CLASS_REF          = 0x4,   //  <a path to a classs, not a path to an instance>
          WBEMPATH_INFO_IS_INST_REF           = 0x8,   //  <a path to an instance>
          WBEMPATH_INFO_HAS_SUBSCOPES         = 0x10,  //  <true if a subscope is present>
          WBEMPATH_INFO_IS_COMPOUND           = 0x20,  //  <true if compound key is used>
          WBEMPATH_INFO_HAS_V2_REF_PATHS      = 0x40,  //  <true if V2-style ref paths are used>
          WBEMPATH_INFO_HAS_IMPLIED_KEY       = 0x80,  //  <true if keynames are missing somewhere>
          WBEMPATH_INFO_CONTAINS_SINGLETON    = 0x100, //  <true if one or more singletons>
          WBEMPATH_INFO_V1_COMPLIANT          = 0x200, //  <true if path is WBEM-V1-compliant>
          WBEMPATH_INFO_V2_COMPLIANT          = 0x400, //  <true if path is WBEM-V2-compliant>
          WBEMPATH_INFO_CIM_COMPLIANT         = 0x800, //  <true if path is CIM-compliant>
          WBEMPATH_INFO_IS_SINGLETON          = 0x1000, // <a path to a singleton>
          WBEMPATH_INFO_IS_PARENT             = 0x2000, // <path is just "..">
          WBEMPATH_INFO_SERVER_NAMESPACE_ONLY = 0x4000, // <path is just "..">
          WBEMPATH_INFO_NATIVE_PATH           = 0X8000,
          WBEMPATH_INFO_WMI_PATH              = 0X10000,
		  WBEMPATH_INFO_PATH_HAD_SERVER		  = 0X20000,  // server name is present and was not set by default
    } tag_WBEM_PATH_STATUS_FLAG;


    typedef [v1_enum] enum tag_WBEM_PATH_CREATE_FLAG
    {
          WBEMPATH_CREATE_ACCEPT_RELATIVE     = 0x1,
          WBEMPATH_CREATE_ACCEPT_ABSOLUTE     = 0x2,
          WBEMPATH_CREATE_ACCEPT_ALL          = 0x4,
          WBEMPATH_TREAT_SINGLE_IDENT_AS_NS   = 0x8,
    } tag_WBEM_PATH_CREATE_FLAG;

	// A flag of 0 will get the namespace and relative part

    typedef [v1_enum] enum tag_WBEM_GET_TEXT_FLAGS
    {
          WBEMPATH_COMPRESSED     = 0x1,				// Obsolete, dont use
          WBEMPATH_GET_RELATIVE_ONLY = 0X2,				// gets relative path
          WBEMPATH_GET_SERVER_TOO = 0X4,				// gets everything
          WBEMPATH_GET_SERVER_AND_NAMESPACE_ONLY = 0X8, // gets server and namespace
          WBEMPATH_GET_NAMESPACE_ONLY = 0X10,			// gets just namespace
          WBEMPATH_GET_ORIGINAL = 0X20,					// returns whatever was passed in
    } tag_WBEM_GET_TEXT_FLAGS;

    typedef [v1_enum] enum tag_WBEM_GET_KEY_FLAGS
    {
          WBEMPATH_TEXT     = 0x1,
          WBEMPATH_QUOTEDTEXT = 0X2
    } tag_WBEM_GET_KEY_FLAGS;



//*******************************************************************
// Query parser & analysis interfaces

typedef enum
{
    WMIQ_ANALYSIS_RPN_SEQUENCE          = 0x1,
    WMIQ_ANALYSIS_ASSOC_QUERY           = 0x2,
    WMIQ_ANALYSIS_PROP_ANALYSIS_MATRIX  = 0x3,
    WMIQ_ANALYSIS_QUERY_TEXT            = 0x4,

    WMIQ_ANALYSIS_RESERVED     = 0x8000000

}   WMIQ_ANALYSIS_TYPE;

typedef enum
{
    // Group 1

    WMIQ_RPN_TOKEN_EXPRESSION   = 1,
    WMIQ_RPN_TOKEN_AND          = 2,
    WMIQ_RPN_TOKEN_OR           = 3,
    WMIQ_RPN_TOKEN_NOT          = 4,

    // Group 2
    WMIQ_RPN_OP_UNDEFINED       = 0,
    WMIQ_RPN_OP_EQ              = 1,
    WMIQ_RPN_OP_NE              = 2,
    WMIQ_RPN_OP_GE              = 3,
    WMIQ_RPN_OP_LE              = 4,
    WMIQ_RPN_OP_LT              = 5,
    WMIQ_RPN_OP_GT              = 6,
    WMIQ_RPN_OP_LIKE            = 7,
    WMIQ_RPN_OP_ISA             = 8,
    WMIQ_RPN_OP_ISNOTA          = 9,

    // Group 3
    WMIQ_RPN_LEFT_PROPERTY_NAME  = 0x1,
    WMIQ_RPN_RIGHT_PROPERTY_NAME = 0x2,
    WMIQ_RPN_CONST2              = 0x4,
    WMIQ_RPN_CONST               = 0x8,
    WMIQ_RPN_RELOP               = 0x10,
    WMIQ_RPN_LEFT_FUNCTION       = 0x20,
    WMIQ_RPN_RIGHT_FUNCTION      = 0x40,

    // Group 4
    WMIQ_RPN_GET_TOKEN_TYPE         = 1,    // Returns Group 1 ULONG value
    WMIQ_RPN_GET_EXPR_SHAPE         = 2,    // Returns Group 3 ULONG mask
    WMIQ_RPN_GET_LEFT_FUNCTION      = 3,    // Returns LPWSTR
    WMIQ_RPN_GET_RIGHT_FUNCTION     = 4,    // Returns LPWSTR
    WMIQ_RPN_GET_RELOP              = 5,    // Returns a Group 2 ULONG

    // Group 5
    WMIQ_RPN_NEXT_TOKEN             = 1,

    // Group 6 (FROM clause options)
    WMIQ_RPN_FROM_UNARY      = 0x1,
    WMIQ_RPN_FROM_PATH       = 0x2,
    WMIQ_RPN_FROM_CLASS_LIST = 0x4

}   WMIQ_RPN_TOKEN_FLAGS;


typedef enum
{
    WMIQ_ASSOCQ_ASSOCIATORS             = 0x1,
    WMIQ_ASSOCQ_REFERENCES              = 0x2,

    WMIQ_ASSOCQ_RESULTCLASS             = 0x4,
    WMIQ_ASSOCQ_ASSOCCLASS              = 0x8,
    WMIQ_ASSOCQ_ROLE                    = 0x10,
    WMIQ_ASSOCQ_RESULTROLE              = 0x20,
    WMIQ_ASSOCQ_REQUIREDQUALIFIER       = 0x40,
    WMIQ_ASSOCQ_REQUIREDASSOCQUALIFIER  = 0x80,

    WMIQ_ASSOCQ_CLASSDEFSONLY           = 0x100,
	WMIQ_ASSOCQ_KEYSONLY                = 0x200,
    WMIQ_ASSOCQ_SCHEMAONLY              = 0x400,
    WMIQ_ASSOCQ_CLASSREFSONLY           = 0x800

}   WMIQ_ASSOCQ_FLAGS;


// **********************************************************************
//

typedef struct tag_SWbemQueryQualifiedName
{
    ULONG    m_uVersion;
    ULONG    m_uTokenType;

    ULONG    m_uNameListSize;
    LPCWSTR *m_ppszNameList;

    BOOL     m_bArraysUsed;
    BOOL    *m_pbArrayElUsed;
    ULONG   *m_puArrayIndex;

}   SWbemQueryQualifiedName;

// **********************************************************************
//
typedef union tag_SWbemRpnConst
{
    LPCWSTR m_pszStrVal;        // VT_LPWSTR
    BOOL    m_bBoolVal;         // VT_BOOL
    LONG    m_lLongVal;         // VT_I4
    ULONG   m_uLongVal;         // VT_UI4
    double  m_dblVal;           // VT_R8
    __int64 m_lVal64;           // VT_I8
    __int64 m_uVal64;           // VT_UI8

}   SWbemRpnConst;

// **********************************************************************
// RPN token for normal queries

typedef struct tag_SWbemRpnQueryToken
{
    ULONG   m_uVersion;
    ULONG   m_uTokenType;   // Group 1

    ULONG   m_uSubexpressionShape;
    ULONG   m_uOperator;

    SWbemQueryQualifiedName *m_pRightIdent;
    SWbemQueryQualifiedName *m_pLeftIdent;

    ULONG   m_uConstApparentType;  // VT_
    SWbemRpnConst m_Const;

    // Const2 used only for BETWEEN
    ULONG   m_uConst2ApparentType;   // VT_
    SWbemRpnConst m_Const2;

    LPCWSTR m_pszRightFunc;
    LPCWSTR m_pszLeftFunc;

}   SWbemRpnQueryToken;


typedef struct tag_SWbemRpnTokenList
{
    ULONG m_uVersion;
    ULONG m_uTokenType;

    ULONG m_uNumTokens;

}   SWbemRpnTokenList;


typedef enum tag_WMIQ_LANGUAGE_FEATURES
{
    // The LF1 corresponds to the integer value. Do not alter!

    WMIQ_LF1_BASIC_SELECT                   = 1,                // *
    WMIQ_LF2_CLASS_NAME_IN_QUERY            = 2,                // *
    WMIQ_LF3_STRING_CASE_FUNCTIONS          = 3,                // *
    WMIQ_LF4_PROP_TO_PROP_TESTS             = 4,                // *
    WMIQ_LF5_COUNT_STAR                     = 5,
    WMIQ_LF6_ORDER_BY                       = 6,                // *
    WMIQ_LF7_DISTINCT			            = 7,
    WMIQ_LF8_ISA 			                = 8,                // *
    WMIQ_LF9_THIS			                = 9,                // *
    WMIQ_LF10_COMPEX_SUBEXPRESSIONS         = 10,
    WMIQ_LF11_ALIASING                      = 11,
    WMIQ_LF12_GROUP_BY_HAVING               = 12,               // *
    WMIQ_LF13_WMI_WITHIN                    = 13,               // *
    WMIQ_LF14_SQL_WRITE_OPERATIONS          = 14,
    WMIQ_LF15_GO                            = 15,
    WMIQ_LF16_SINGLE_LEVEL_TRANSACTIONS     = 16,
    WMIQ_LF17_QUALIFIED_NAMES               = 17,               // *
    WMIQ_LF18_ASSOCIATONS                   = 18,               // *
    WMIQ_LF19_SYSTEM_PROPERTIES             = 19,
    WMIQ_LF20_EXTENDED_SYSTEM_PROPERTIES    = 20,
    WMIQ_LF21_SQL89_JOINS                   = 21,
    WMIQ_LF22_SQL92_JOINS                   = 22,
    WMIQ_LF23_SUBSELECTS                    = 23,
    WMIQ_LF24_UMI_EXTENSIONS                = 24,
    WMIQ_LF25_DATEPART                      = 25,               // *
    WMIQ_LF26_LIKE                          = 26,               // *
    WMIQ_LF27_CIM_TEMPORAL_CONSTRUCTS       = 27,               // *
    WMIQ_LF28_STANDARD_AGGREGATES           = 28,
    WMIQ_LF29_MULTI_LEVEL_ORDER_BY          = 29,
    WMIQ_LF30_WMI_PRAGMAS                   = 30,
    WMIQ_LF31_QUALIFIER_TESTS               = 31,
    WMIQ_LF32_SP_EXECUTE                    = 32,
    WMIQ_LF33_ARRAY_ACCESS                  = 33,               // *
    WMIQ_LF34_UNION	                        = 34,
    WMIQ_LF35_COMPLEX_SELECT_TARGET         = 35,
    WMIQ_LF36_REFERENCE_TESTS               = 36,
    WMIQ_LF37_SELECT_INTO                   = 37,
    WMIQ_LF38_BASIC_DATETIME_TESTS          = 38,
    WMIQ_LF39_COUNT_COLUMN                  = 39,
    WMIQ_LF40_BETWEEN                       = 40,

    WMIQ_LF_LAST                            = 40
}   WMIQ_LANGUAGE_FEATURES;

typedef enum tag_WMIQ_RPNQ_FEATURE
{
    // GROUP 1

    WMIQ_RPNF_WHERE_CLAUSE_PRESENT          = 0x1,
    WMIQ_RPNF_QUERY_IS_CONJUNCTIVE          = 0x2,
    WMIQ_RPNF_QUERY_IS_DISJUNCTIVE          = 0x4,
    WMIQ_RPNF_PROJECTION                    = 0x8,
    WMIQ_RPNF_FEATURE_SELECT_STAR           = 0x10,
    WMIQ_RPNF_EQUALITY_TESTS_ONLY           = 0x20,
    WMIQ_RPNF_COUNT_STAR                    = 0x40,
    WMIQ_RPNF_QUALIFIED_NAMES_IN_SELECT     = 0x80,
    WMIQ_RPNF_QUALIFIED_NAMES_IN_WHERE      = 0x100,
    WMIQ_RPNF_PROP_TO_PROP_TESTS            = 0x200,
    WMIQ_RPNF_ORDER_BY                      = 0x400,
    WMIQ_RPNF_ISA_USED                      = 0x800,
    WMIQ_RPNF_ISNOTA_USED                   = 0x1000,
    WMIQ_RPNF_GROUP_BY_HAVING               = 0x2000,
    WMIQ_RPNF_WITHIN_INTERVAL               = 0x4000,
    WMIQ_RPNF_WITHIN_AGGREGATE              = 0x8000,
    WMIQ_RPNF_SYSPROP_CLASS                 = 0x10000,
    WMIQ_RPNF_REFERENCE_TESTS               = 0x20000,
    WMIQ_RPNF_DATETIME_TESTS                = 0x40000,
    WMIQ_RPNF_ARRAY_ACCESS                  = 0x80000,
    WMIQ_RPNF_QUALIFIER_FILTER              = 0x100000,
    WMIQ_RPNF_SELECTED_FROM_PATH            = 0x200000,

    // GROUP 2

}   WMIQ_RPNF_FEATURE;


typedef struct tag_SWbemRpnEncodedQuery
{
    ULONG m_uVersion;
    ULONG m_uTokenType;

    // General query features
    // ======================

    ULONG  m_uParsedFeatureMask1;       // Group 1 mask 64-bit WMIQ_RPNF_ mask
    ULONG  m_uParsedFeatureMask2;       // Group 2 mask

    // Overall language features encountered
    // ======================================

    ULONG      m_uDetectedArraySize;
    ULONG     *m_puDetectedFeatures;    // Array of LFn_ constants

    // Values being selected if WMIQ_RPNF_PROJECTION is set
    // =====================================================

    ULONG  m_uSelectListSize;
    SWbemQueryQualifiedName  **m_ppSelectList;

    // FROM clause
    // ===========

    ULONG   m_uFromTargetType;          // WMIQ_RPN_FROM_ constants
    LPCWSTR m_pszOptionalFromPath;      // NULL if not used
    ULONG   m_uFromListSize;
    LPCWSTR *m_ppszFromList;

    // Where clause
    // ============

    ULONG                    m_uWhereClauseSize;
    SWbemRpnQueryToken      **m_ppRpnWhereClause;

    // WITHIN value
    // ============

    double  m_dblWithinPolling;
    double  m_dblWithinWindow;

    // ORDER BY
    // ========

    ULONG    m_uOrderByListSize;
    LPCWSTR *m_ppszOrderByList;
    ULONG   *m_uOrderDirectionEl;

}   SWbemRpnEncodedQuery;


// **********************************************************************

typedef struct tag_SWbemAnalysisMatrix
{
    ULONG   m_uVersion;
    ULONG   m_uMatrixType;

    LPCWSTR  m_pszProperty;
    ULONG    m_uPropertyType;
    ULONG    m_uEntries;
    LPVOID  *m_pValues;
    BOOL    *m_pbTruthTable;

}   SWbemAnalysisMatrix;

typedef struct tag_SWbemAnalysisMatrixList
{
    ULONG m_uVersion;
    ULONG m_uMatrixType;

    ULONG m_uNumMatrices;
    SWbemAnalysisMatrix *m_pMatrices;

}   SWbemAnalysisMatrixList;


// **********************************************************************
// Associators/ References queries

typedef struct tag_SWbemAssocQueryInf
{
    ULONG       m_uVersion;
    ULONG       m_uAnalysisType;

    ULONG       m_uFeatureMask;
    IWbemPath  *m_pPath;
    LPWSTR      m_pszPath;
    LPWSTR      m_pszQueryText;

    LPWSTR      m_pszResultClass;
    LPWSTR      m_pszAssocClass;
    LPWSTR      m_pszRole;
    LPWSTR      m_pszResultRole;
    LPWSTR      m_pszRequiredQualifier;
    LPWSTR      m_pszRequiredAssocQualifier;

}   SWbemAssocQueryInf;

/////////////////////////////////////////////////////



    [restricted, uuid(4590f811-1d3a-11d0-891f-00aa004b2e24)]
    coclass WbemLocator {interface IUnknown;};

    [restricted, uuid(674B6698-EE92-11d0-AD71-00C04FD8FDFF)]
    coclass WbemContext {interface IUnknown;};

    [uuid(49bd2028-1523-11d1-ad79-00c04fd8fdff)]
    coclass UnsecuredApartment{interface IUnknown;};

    [uuid(9A653086-174F-11d2-B5F9-00104B703EFD)]
    coclass WbemClassObject{interface IUnknown;};

    [uuid(6daf9757-2e37-11d2-aec9-00c04fb68820)]
    coclass MofCompiler{interface IUnknown;};

    [uuid(eb87e1bd-3233-11d2-aec9-00c04fb68820)]
    coclass WbemStatusCodeText{interface IUnknown;};

    [uuid(C49E32C6-BC8B-11d2-85D4-00105A1F8304)]
    coclass WbemBackupRestore{interface IUnknown;};

    [restricted, uuid(c71566f2-561e-11d1-ad87-00c04fd8fdff)]
    coclass WbemRefresher{interface IUnknown;};

    [restricted, uuid(8D1C559D-84F0-4bb3-A7D5-56A7435A9BA6)]
    coclass WbemObjectTextSrc{interface IUnknown;};

    /////////////////////////////////////////////////////////////////
    //

    [uuid(cb8555cc-9128-11d1-ad9b-00c04fd8fdff)]
    coclass WbemAdministrativeLocator{interface IUnknown;};

    [uuid(cd184336-9128-11d1-ad9b-00c04fd8fdff)]
    coclass WbemAuthenticatedLocator{interface IUnknown;};

    [uuid(443E7B79-DE31-11d2-B340-00104BCC4B4A)]
    coclass WbemUnauthenticatedLocator{interface IUnknown;};

    [uuid(4cfc7932-0f9d-4bef-9c32-8ea2a6b56fcb)]
    coclass WbemDecoupledRegistrar{interface IUnknown;};

    [uuid(f5f75737-2843-4f22-933d-c76a97cda62f)]
    coclass WbemDecoupledBasicEventProvider{interface IUnknown;};








    /////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////

    [restricted, uuid(cf4cc405-e2c5-4ddd-b3ce-5e7582d8c9fa)]
    coclass WbemDefPath
    {
        interface IUnknown;
    };

    interface IWbemQuery;


    [uuid(EAC8A024-21E2-4523-AD73-A71A0AA2F56A)]
    coclass WbemQuery
    {
        interface IUnknown;
    };
    /////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////

};

#define OPTIONAL in, unique

interface IWbemQualifierSet;

[local, restricted, object, uuid(dc12a681-737f-11cf-884d-00aa004b2e24)]

interface IWbemClassObject : IUnknown
{
    HRESULT GetQualifierSet(
        [out] IWbemQualifierSet** ppQualSet
        );

    HRESULT Get(
        [in, string] LPCWSTR wszName,
        [in] long lFlags,
        [out, OPTIONAL] VARIANT* pVal,
        [out, OPTIONAL] CIMTYPE* pType,
        [out, OPTIONAL] long* plFlavor
        );

    HRESULT Put(
        [in, string] LPCWSTR wszName,
        [in] long lFlags,
        [in] VARIANT* pVal,
        [in] CIMTYPE Type
        );

    HRESULT Delete(
        [in, string] LPCWSTR wszName
        );

    HRESULT GetNames(
        [in, string] LPCWSTR wszQualifierName,
        [in] long lFlags,
        [in] VARIANT* pQualifierVal,
        [out] SAFEARRAY (BSTR)* pNames
        );

    HRESULT BeginEnumeration([in] long lEnumFlags);

    HRESULT Next(
        [in] long lFlags,
        [out, OPTIONAL] BSTR* strName,
        [out, OPTIONAL] VARIANT* pVal,
        [out, OPTIONAL] CIMTYPE* pType,
        [out, OPTIONAL] long* plFlavor
        );

    HRESULT EndEnumeration();

    HRESULT GetPropertyQualifierSet(
        [in, string] LPCWSTR wszProperty,
        [out] IWbemQualifierSet** ppQualSet
        );

    HRESULT Clone(
        [out] IWbemClassObject** ppCopy
        );

    HRESULT GetObjectText(
        [in]  long lFlags,
        [out] BSTR* pstrObjectText
        );

    HRESULT SpawnDerivedClass(
        [in] long lFlags,
        [out] IWbemClassObject** ppNewClass
        );

    HRESULT SpawnInstance(
        [in] long lFlags,
        [out] IWbemClassObject** ppNewInstance
        );

    HRESULT CompareTo(
        [in] long lFlags,
        [in] IWbemClassObject* pCompareTo
        );

    HRESULT GetPropertyOrigin(
        [in, string] LPCWSTR wszName,
        [out] BSTR* pstrClassName);

    HRESULT InheritsFrom(
        [in] LPCWSTR strAncestor
        );

    // Method manipulation.
    // ====================

    HRESULT GetMethod(
        [in, string] LPCWSTR wszName,
        [in] long lFlags,
        [out] IWbemClassObject** ppInSignature,
        [out] IWbemClassObject** ppOutSignature
        );

    HRESULT PutMethod(
        [in, string] LPCWSTR wszName,
        [in] long lFlags,
        [in] IWbemClassObject* pInSignature,
        [in] IWbemClassObject* pOutSignature
        );

    HRESULT DeleteMethod(
        [in, string] LPCWSTR wszName
        );

    HRESULT BeginMethodEnumeration([in] long lEnumFlags);

    HRESULT NextMethod(
        [in] long lFlags,
        [out, OPTIONAL] BSTR* pstrName,
        [out, OPTIONAL] IWbemClassObject** ppInSignature,
        [out, OPTIONAL] IWbemClassObject** ppOutSignature
        );

    HRESULT EndMethodEnumeration();

    HRESULT GetMethodQualifierSet(
        [in, string] LPCWSTR wszMethod,
        [out] IWbemQualifierSet** ppQualSet
        );

    HRESULT GetMethodOrigin(
        [in, string] LPCWSTR wszMethodName,
        [out] BSTR* pstrClassName
        );
};


[object, restricted, local, uuid(dc12a680-737f-11cf-884d-00aa004b2e24)]

interface IWbemQualifierSet : IUnknown
{
    HRESULT Get(
        [in, string]  LPCWSTR wszName,
        [in]  long lFlags,
        [out, OPTIONAL] VARIANT* pVal,
        [out, OPTIONAL] long* plFlavor
        );

    HRESULT Put(
        [in, string] LPCWSTR wszName,
        [in] VARIANT* pVal,
        [in] long lFlavor
        );

    HRESULT Delete(
        [in, string] LPCWSTR wszName
        );

    HRESULT GetNames(
        [in] long lFlags,
        [out] SAFEARRAY (BSTR)* pNames
        );

    HRESULT BeginEnumeration(
        [in] long lFlags
        );

    HRESULT Next(
        [in]  long lFlags,
        [out, OPTIONAL] BSTR* pstrName,
        [out, OPTIONAL] VARIANT* pVal,
        [out, OPTIONAL] long* plFlavor
        );

    HRESULT EndEnumeration();
};

interface IWbemServices;

[object, restricted, local, uuid(dc12a687-737f-11cf-884d-00aa004b2e24),
    pointer_default(unique)]
interface IWbemLocator  : IUnknown
{
    HRESULT ConnectServer(
        [in]    const BSTR strNetworkResource,
        [in]    const BSTR strUser,
        [in]    const BSTR strPassword,
        [in]    const BSTR strLocale,
        [in]    long lSecurityFlags,
        [in]    const BSTR strAuthority,
        [in]    IWbemContext* pCtx,
        [out]   IWbemServices** ppNamespace
        );
};


/////////////////////////////////////////////////////////////////

[object, restricted, uuid(7c857801-7381-11cf-884d-00aa004b2e24)]

interface IWbemObjectSink : IUnknown
{
    HRESULT Indicate(
        [in] long lObjectCount,
        [in, size_is(lObjectCount)]
            IWbemClassObject** apObjArray
        );


    HRESULT SetStatus(
        [in] long lFlags,
        [in] HRESULT hResult,
        [in] BSTR strParam,
        [in] IWbemClassObject* pObjParam
        );

};

[object, restricted, uuid(027947e1-d731-11ce-a357-000000000001)]

interface IEnumWbemClassObject : IUnknown
{
    HRESULT Reset();

    HRESULT Next(
        [in]  long lTimeout,
        [in]  ULONG uCount,
        [out, size_is(uCount), length_is(*puReturned)]
            IWbemClassObject** apObjects,
        [out] ULONG* puReturned
        );

    HRESULT NextAsync(
        [in]  ULONG uCount,
        [in]  IWbemObjectSink* pSink
        );

    HRESULT Clone(
        [out] IEnumWbemClassObject** ppEnum
        );

    HRESULT Skip(
        [in]  long lTimeout,
        [in] ULONG nCount
        );
};

/////////////////////////////////////////////////////////////////////////

[object, restricted, local, uuid(44aca674-e8fc-11d0-a07c-00c04fb68820)]

interface IWbemContext : IUnknown
{
    HRESULT Clone([out] IWbemContext** ppNewCopy);

    HRESULT GetNames(
        [in] long lFlags,
        [out] SAFEARRAY (BSTR)* pNames
        );

    HRESULT BeginEnumeration([in] long lFlags);

    HRESULT Next(
        [in]  long lFlags,
        [out] BSTR* pstrName,
        [out] VARIANT* pValue
        );

    HRESULT EndEnumeration();


    HRESULT SetValue(
        [in, string] LPCWSTR wszName,
        [in] long lFlags,
        [in] VARIANT* pValue
        );

    HRESULT GetValue(
        [in, string] LPCWSTR wszName,
        [in] long lFlags,
        [out] VARIANT* pValue
        );

    HRESULT DeleteValue(
        [in, string] LPCWSTR wszName,
        [in] long lFlags
        );

    HRESULT DeleteAll();
};


[object, restricted, uuid(44aca675-e8fc-11d0-a07c-00c04fb68820)]

interface IWbemCallResult : IUnknown
{
    HRESULT GetResultObject(
        [in]  long lTimeout,
        [out] IWbemClassObject** ppResultObject
        );

    HRESULT GetResultString(
        [in]  long lTimeout,
        [out] BSTR* pstrResultString
        );

    HRESULT GetResultServices(
        [in]  long lTimeout,
        [out] IWbemServices** ppServices
        );

    HRESULT GetCallStatus(
        [in]  long lTimeout,
        [out] long* plStatus
        );
};




/////////////////////////////////////////////////////////////////////////

[object, restricted, uuid(9556dc99-828c-11cf-a37e-00aa003240c7),
        pointer_default(unique)]

interface IWbemServices : IUnknown
{
    // Context.
    // ========
    HRESULT OpenNamespace(
        [in]  const BSTR strNamespace,
        [in]  long lFlags,
        [in]  IWbemContext* pCtx,
        [out, OPTIONAL] IWbemServices** ppWorkingNamespace,
        [out, OPTIONAL] IWbemCallResult** ppResult
        );

    HRESULT CancelAsyncCall(
        [in] IWbemObjectSink* pSink
        );

    HRESULT QueryObjectSink(
        [in] long lFlags,
        [out] IWbemObjectSink** ppResponseHandler
        );

    // Classes and instances.
    // ======================

    HRESULT GetObject(
        [in]  const BSTR strObjectPath,
        [in]  long lFlags,
        [in]  IWbemContext* pCtx,
        [out, OPTIONAL] IWbemClassObject** ppObject,
        [out, OPTIONAL] IWbemCallResult** ppCallResult
        );

    HRESULT GetObjectAsync(
        [in]  const BSTR strObjectPath,
        [in]  long lFlags,
        [in]  IWbemContext* pCtx,
        [in]  IWbemObjectSink* pResponseHandler
        );

    // Class manipulation.
    // ===================

    HRESULT PutClass(
        [in] IWbemClassObject* pObject,
        [in] long lFlags,
        [in]  IWbemContext* pCtx,
        [out, OPTIONAL] IWbemCallResult** ppCallResult
        );

    HRESULT PutClassAsync(
        [in] IWbemClassObject* pObject,
        [in] long lFlags,
        [in] IWbemContext* pCtx,
        [in] IWbemObjectSink* pResponseHandler
        );

    HRESULT DeleteClass(
        [in] const BSTR strClass,
        [in] long lFlags,
        [in]  IWbemContext* pCtx,
        [out, OPTIONAL] IWbemCallResult** ppCallResult
        );

    HRESULT DeleteClassAsync(
        [in] const BSTR strClass,
        [in] long lFlags,
        [in] IWbemContext* pCtx,
        [in] IWbemObjectSink* pResponseHandler
        );

    HRESULT CreateClassEnum(
        [in]  const BSTR strSuperclass,
        [in]  long lFlags,
        [in]  IWbemContext* pCtx,
        [out] IEnumWbemClassObject** ppEnum
        );

    HRESULT CreateClassEnumAsync(
        [in]  const BSTR strSuperclass,
        [in]  long lFlags,
        [in]  IWbemContext* pCtx,
        [in]  IWbemObjectSink* pResponseHandler
        );

    // Instances.
    // ==========

    HRESULT PutInstance(
        [in] IWbemClassObject* pInst,
        [in] long lFlags,
        [in]  IWbemContext* pCtx,
        [out, OPTIONAL] IWbemCallResult** ppCallResult
        );

    HRESULT PutInstanceAsync(
        [in] IWbemClassObject* pInst,
        [in] long lFlags,
        [in] IWbemContext* pCtx,
        [in] IWbemObjectSink* pResponseHandler
        );

    HRESULT DeleteInstance(
        [in] const BSTR strObjectPath,
        [in] long lFlags,
        [in]  IWbemContext* pCtx,
        [out, OPTIONAL] IWbemCallResult** ppCallResult
        );

    HRESULT DeleteInstanceAsync(
        [in] const BSTR strObjectPath,
        [in] long lFlags,
        [in] IWbemContext* pCtx,
        [in] IWbemObjectSink* pResponseHandler
        );

    HRESULT CreateInstanceEnum(
        [in] const BSTR strFilter,          // allow more things than a class name
        [in] long lFlags,
        [in]  IWbemContext* pCtx,
        [out] IEnumWbemClassObject** ppEnum
        );

    HRESULT CreateInstanceEnumAsync(
        [in] const BSTR strFilter,          // allow more things than a class name
        [in] long lFlags,
        [in] IWbemContext* pCtx,
        [in] IWbemObjectSink* pResponseHandler
        );

    // Queries.
    // ========

    HRESULT ExecQuery(
        [in]  const BSTR strQueryLanguage,
        [in]  const BSTR strQuery,
        [in]  long lFlags,
        [in]  IWbemContext* pCtx,
        [out] IEnumWbemClassObject** ppEnum
        );

    HRESULT ExecQueryAsync(
        [in] const BSTR strQueryLanguage,
        [in] const BSTR strQuery,
        [in] long lFlags,
        [in] IWbemContext* pCtx,
        [in] IWbemObjectSink* pResponseHandler
        );


    HRESULT ExecNotificationQuery(
        [in] const BSTR strQueryLanguage,
        [in] const BSTR strQuery,
        [in] long lFlags,
        [in]  IWbemContext* pCtx,
        [out] IEnumWbemClassObject** ppEnum
        );

    HRESULT ExecNotificationQueryAsync(
        [in] const BSTR strQueryLanguage,
        [in] const BSTR strQuery,
        [in] long lFlags,
        [in] IWbemContext* pCtx,
        [in] IWbemObjectSink* pResponseHandler
        );

    // Methods
    // =======

    HRESULT ExecMethod(
        [in] const BSTR strObjectPath,
        [in] const BSTR strMethodName,
        [in] long lFlags,
        [in] IWbemContext* pCtx,
        [in] IWbemClassObject* pInParams,
        [out, OPTIONAL] IWbemClassObject** ppOutParams,
        [out, OPTIONAL] IWbemCallResult** ppCallResult
        );

    HRESULT ExecMethodAsync(
        [in] const BSTR strObjectPath,
        [in] const BSTR strMethodName,
        [in] long lFlags,
        [in] IWbemContext* pCtx,
        [in] IWbemClassObject* pInParams,
        [in] IWbemObjectSink* pResponseHandler
        );
};


[object, restricted, uuid(c1e2d759-cabd-11d3-a11b-00105a1f515a)]
interface IWbemRawSdAccessor : IUnknown
{
    HRESULT Get(
        [in]   long lFlags,
        [in]   ULONG uBufSize,
        [out]  ULONG *puSDSize,
        [in, out, size_is(uBufSize), length_is(*puSDSize)]  byte *pSD
        );

    HRESULT Put(
        [in] long lFlags,
        [in] ULONG uBufSize,
        [in, size_is(uBufSize)] byte *pSD
        );
};


[object, uuid(b7b31df9-d515-11d3-a11c-00105a1f515a)]
interface IWbemShutdown : IUnknown
{
    HRESULT Shutdown(
        [in] LONG uReason,
        [in] ULONG uMaxMilliseconds,
        [in] IWbemContext *pCtx
        );
};


[object, local, uuid(4212dc47-142e-4c6c-bc49-6ca232dd0959)]
interface IWbemCallStatus : IUnknown
{
    HRESULT GetCallStatus(
        [in]  ULONG uFlags,
        [in]  LCID lLocale,
        [out] HRESULT *phRes,
        [out] BSTR *pszMsg,
        [in]  REFIID riid,
        [out, iid_is(riid)] LPVOID *pObj
        );
};


/////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////
//
// CoCreatable

[object, restricted, local, uuid(bfbf883a-cad7-11d3-a11b-00105a1f515a)]

interface IWbemObjectTextSrc : IUnknown
{
    HRESULT GetText(
        [in]  long lFlags,
        [in]  IWbemClassObject *pObj,
        [in]  ULONG uObjTextFormat,
        [in]  IWbemContext *pCtx,           // Optional flags
        [out] BSTR *strText
        );

    HRESULT CreateFromText(
        [in]   long lFlags,
        [in]   BSTR strText,
        [in]   ULONG uObjTextFormat,
        [in]   IWbemContext *pCtx,           // Optional flags
        [out]  IWbemClassObject **pNewObj
        );
        // Resets the object entirely based on the text.
}



/////////////////////////////////////////////////////////////////////////


[local, restricted, object, uuid(49353c9a-516b-11d1-aea6-00c04fb68820)]
interface IWbemObjectAccess : IWbemClassObject
{
    HRESULT GetPropertyHandle(
        [in, string] LPCWSTR wszPropertyName,
        [out] CIMTYPE* pType,
        [out] long* plHandle
        );

    HRESULT WritePropertyValue(
        [in] long lHandle,
        [in] long lNumBytes,
        [in, size_is(lNumBytes)] const byte* aData
        );

    HRESULT ReadPropertyValue(
        [in] long lHandle,
        [in] long lBufferSize,
        [out] long* plNumBytes,
        [out, size_is(lBufferSize), length_is(*plNumBytes)] byte* aData
        );

    HRESULT ReadDWORD(
        [in] long lHandle,
        [out] DWORD* pdw
        );

    HRESULT WriteDWORD(
        [in] long lHandle,
        [in] DWORD dw
        );

    HRESULT ReadQWORD(
        [in] long lHandle,
        [out] unsigned __int64* pqw
        );

    HRESULT WriteQWORD(
        [in] long lHandle,
        [in] unsigned __int64 pw
        );

    HRESULT GetPropertyInfoByHandle(
        [in] long lHandle,
        [out] BSTR* pstrName,
        [out] CIMTYPE* pType);

    HRESULT Lock(
        [in] long lFlags
        );

    HRESULT Unlock(
        [in] long lFlags
        );
};


//////////////////////////////////////////////////////////

[local, object, uuid(6daf974e-2e37-11d2-aec9-00c04fb68820)]

interface IMofCompiler : IUnknown
{
    HRESULT CompileFile(
        [in, string] LPWSTR FileName,
        [in, string] LPWSTR ServerAndNamespace,
        [in, string] LPWSTR User,
        [in, string] LPWSTR Authority,
        [in, string] LPWSTR Password,
        [in] LONG lOptionFlags,             // autocomp, check, etc
        [in] LONG lClassFlags,
        [in] LONG lInstanceFlags,
        [in, out] WBEM_COMPILE_STATUS_INFO * pInfo
        );
        // lFlags correspond to all the available command-line flags.

    HRESULT CompileBuffer(
        [in] long BuffSize,
        [in, size_is(BuffSize)]BYTE * pBuffer,
        [in, string] LPWSTR ServerAndNamespace,
        [in, string] LPWSTR User,
        [in, string] LPWSTR Authority,
        [in, string] LPWSTR Password,
        [in] LONG lOptionFlags,             // autocomp, check, etc
        [in] LONG lClassFlags,
        [in] LONG lInstanceFlags,
        [in, out] WBEM_COMPILE_STATUS_INFO * pInfo
        );


    HRESULT CreateBMOF(
        [in, string] LPWSTR TextFileName,
        [in, string] LPWSTR BMOFFileName,
        [in, string] LPWSTR ServerAndNamespace,
        [in] LONG lOptionFlags,             // autocomp, check, etc
        [in] LONG lClassFlags,
        [in] LONG lInstanceFlags,
        [in, out] WBEM_COMPILE_STATUS_INFO * pInfo
        );

        // lFlags correspond to all the available command-line flags.
};



[restricted, uuid(1cfaba8c-1523-11d1-ad79-00c04fd8fdff), object]
interface IUnsecuredApartment : IUnknown
{
    HRESULT CreateObjectStub(
        [in] IUnknown* pObject,
        [out] IUnknown** ppStub);

};



[local, object, uuid(eb87e1bc-3233-11d2-aec9-00c04fb68820)]

interface IWbemStatusCodeText : IUnknown
{
    HRESULT GetErrorCodeText(
        [in]  HRESULT hRes,
        [in]  LCID    LocaleId,
        [in] long lFlags,
        [out] BSTR  *  MessageText
        );

    HRESULT GetFacilityCodeText(
        [in]  HRESULT hRes,
        [in]  LCID    LocaleId,
        [in] long lFlags,
        [out] BSTR  *  MessageText
        );

};

[object, restricted, uuid(C49E32C7-BC8B-11d2-85D4-00105A1F8304)]
interface IWbemBackupRestore : IUnknown
{
    HRESULT Backup(
        [in, string] LPCWSTR strBackupToFile,
        [in] long lFlags
        );

    HRESULT Restore(
        [in, string] LPCWSTR strRestoreFromFile,
        [in] long lFlags
        );
};

[object, restricted, uuid(A359DEC5-E813-4834-8A2A-BA7F1D777D76)]
interface IWbemBackupRestoreEx : IWbemBackupRestore
{
    HRESULT Pause();

    HRESULT Resume();
};

[local, restricted, object, uuid(49353c99-516b-11d1-aea6-00c04fb68820)]
interface IWbemRefresher : IUnknown
{
    HRESULT Refresh([in] long lFlags);
}

[local, restricted, object, uuid(2705C288-79AE-11d2-B348-00105A1F8177)]
interface IWbemHiPerfEnum : IUnknown
{
    // Add Objects, with assigned ids
    HRESULT AddObjects(
            [in] long lFlags,
            [in] ULONG uNumObjects,
            [in, size_is(uNumObjects)] long* apIds,
            [in, size_is(uNumObjects)] IWbemObjectAccess** apObj
            );

    // Remove objects by id
    HRESULT RemoveObjects(
            [in] long lFlags,
            [in] ULONG uNumObjects,
            [in, size_is(uNumObjects)] long* apIds
            );

    HRESULT GetObjects(
            [in] long lFlags,
            [in] ULONG uNumObjects,
            [out,size_is(uNumObjects),length_is(*puReturned)] IWbemObjectAccess** apObj,
            [out] ULONG* puReturned
            );

    HRESULT RemoveAll(
            [in] long lFlags
            );
};

[local, restricted, object, uuid(49353c92-516b-11d1-aea6-00c04fb68820)]
interface IWbemConfigureRefresher : IUnknown
{
    HRESULT AddObjectByPath(
            [in] IWbemServices* pNamespace,
            [in, string] LPCWSTR wszPath,
            [in] long lFlags,
            [in] IWbemContext* pContext,
            [out] IWbemClassObject** ppRefreshable,
            [out, OPTIONAL] long* plId);

    HRESULT AddObjectByTemplate(
            [in] IWbemServices* pNamespace,
            [in] IWbemClassObject* pTemplate,
            [in] long lFlags,
            [in] IWbemContext* pContext,
            [out] IWbemClassObject** ppRefreshable,
            [out, OPTIONAL] long* plId);

    HRESULT AddRefresher(
            [in] IWbemRefresher* pRefresher,
            [in] long lFlags,
            [out, OPTIONAL] long* plId);

    HRESULT Remove(
            [in] long lId,
            [in] long lFlags);

    HRESULT AddEnum(
            [in] IWbemServices* pNamespace,
            [in, string] LPCWSTR wszClassName,
            [in] long lFlags,
            [in] IWbemContext* pContext,
            [out] IWbemHiPerfEnum** ppEnum,
            [out, OPTIONAL] long* plId );

};

[restricted, object, uuid(e246107b-b06e-11d0-ad61-00c04fd8fdff)]
interface IWbemUnboundObjectSink : IUnknown
{
    HRESULT IndicateToConsumer(
        [in] IWbemClassObject* pLogicalConsumer,
        [in] long lNumObjects,
        [in, size_is(lNumObjects)] IWbemClassObject** apObjects);
};


/////////////////////////////////////////////////////////////////
//
//

[restricted, object, uuid(CE61E841-65BC-11d0-B6BD-00AA003240C7)]

interface IWbemPropertyProvider : IUnknown
{
    HRESULT GetProperty(
        [in] long lFlags,
        [in] const BSTR strLocale,
        [in] const BSTR strClassMapping,
        [in] const BSTR strInstMapping,
        [in] const BSTR strPropMapping,
        [out] VARIANT* pvValue
        );
        
    HRESULT PutProperty(
        [in] long lFlags,
        [in] const BSTR strLocale,
        [in] const BSTR strClassMapping,
        [in] const BSTR strInstMapping,
        [in] const BSTR strPropMapping,
        [in] const VARIANT* pvValue
        );        
};

[restricted, object, uuid(e245105b-b06e-11d0-ad61-00c04fd8fdff)]
interface IWbemEventProvider : IUnknown
{
    HRESULT ProvideEvents(
                [in] IWbemObjectSink* pSink,
                [in] long lFlags
            );
};

[restricted, object, uuid(580acaf8-fa1c-11d0-ad72-00c04fd8fdff)]
interface IWbemEventProviderQuerySink : IUnknown
{
    HRESULT NewQuery(
                [in] unsigned long dwId,
                [in] WBEM_WSTR wszQueryLanguage,
                [in] WBEM_WSTR wszQuery
            );
    HRESULT CancelQuery(
                [in] unsigned long dwId);
};

[restricted, object, uuid(631f7d96-d993-11d2-b339-00105a1f4aaf)]
interface IWbemEventProviderSecurity : IUnknown
{
    HRESULT AccessCheck(
                [in] WBEM_CWSTR wszQueryLanguage,
                [in] WBEM_CWSTR wszQuery,
                [in] long lSidLength,
                [in, size_is(lSidLength), unique] const BYTE* pSid);
};

[restricted, object, uuid(631f7d97-d993-11d2-b339-00105a1f4aaf)]
interface IWbemProviderIdentity : IUnknown
{
    HRESULT SetRegistrationObject(
                [in] long lFlags,
                [in] IWbemClassObject* pProvReg);
};


[restricted, object, uuid(e246107a-b06e-11d0-ad61-00c04fd8fdff)]
interface IWbemEventConsumerProvider : IUnknown
{
     HRESULT FindConsumer(
                [in] IWbemClassObject* pLogicalConsumer,
                [out] IWbemUnboundObjectSink** ppConsumer);
};

[object, restricted, uuid(17cf534a-d8a3-4ad0-ac92-5e3d01717151)]
interface IWbemEventConsumerProviderEx : IWbemEventConsumerProvider
{
    HRESULT ValidateSubscription(
                [in] IWbemClassObject* pLogicalConsumer);
};

[object, uuid(1be41571-91dd-11d1-aeb2-00c04fb68820)]

interface IWbemProviderInitSink : IUnknown
{
    HRESULT SetStatus(
        [in] LONG lStatus,
        [in] LONG lFlags 
        );
};



[object, uuid(1be41572-91dd-11d1-aeb2-00c04fb68820)]

interface IWbemProviderInit : IUnknown
{
    HRESULT Initialize(
        [in, unique, string] LPWSTR wszUser,
        [in] LONG lFlags,
        [in, string] LPWSTR wszNamespace,
        [in, unique, string] LPWSTR wszLocale,
        [in] IWbemServices* pNamespace,
        [in] IWbemContext* pCtx,
        [in] IWbemProviderInitSink* pInitSink    
        );
};

[local, restricted, object, uuid(49353c93-516b-11d1-aea6-00c04fb68820)]
interface IWbemHiPerfProvider : IUnknown
{
    HRESULT QueryInstances(
            [in] IWbemServices* pNamespace,
            [in, string] WCHAR* wszClass,
            [in] long lFlags,
            [in] IWbemContext* pCtx,
            [in] IWbemObjectSink* pSink     // Return IWbemClassObject ptrs 
        );

    HRESULT CreateRefresher(
            [in] IWbemServices* pNamespace,
            [in] long lFlags,
            [out] IWbemRefresher** ppRefresher);

    HRESULT CreateRefreshableObject(
            [in] IWbemServices* pNamespace,
            [in] IWbemObjectAccess* pTemplate,
            [in] IWbemRefresher* pRefresher,
            [in] long lFlags,
            [in] IWbemContext* pContext,
            [out] IWbemObjectAccess** ppRefreshable,
            [out] long* plId);

    HRESULT StopRefreshing(
            [in] IWbemRefresher* pRefresher,
            [in] long lId,
            [in] long lFlags);

	HRESULT CreateRefreshableEnum(
            [in] IWbemServices* pNamespace,
            [in, string] LPCWSTR wszClass,
            [in] IWbemRefresher* pRefresher,
            [in] long lFlags,
            [in] IWbemContext* pContext,
            [in] IWbemHiPerfEnum* pHiPerfEnum,
            [out] long* plId);

	HRESULT GetObjects(
            [in] IWbemServices* pNamespace,
			[in] long lNumObjects,
			[in,out,size_is(lNumObjects)] IWbemObjectAccess** apObj,
            [in] long lFlags,
            [in] IWbemContext* pContext);

};

[object, local, uuid(1005cbcf-e64f-4646-bcd3-3a089d8a84b4)]
interface IWbemDecoupledRegistrar : IUnknown
{
	HRESULT Register (

		[in] long a_Flags ,
		[in] IWbemContext *a_Context ,
		[in] LPCWSTR a_User ,
		[in] LPCWSTR a_Locale ,
		[in] LPCWSTR a_Scope ,
		[in] LPCWSTR a_Registration ,
		[in] IUnknown *a_Unknown
	) ;

	HRESULT UnRegister () ;
} ;

[object, local, uuid(86336d20-ca11-4786-9ef1-bc8a946b42fc)]
interface IWbemDecoupledBasicEventProvider : IWbemDecoupledRegistrar
{
	HRESULT GetSink (

		[in] long a_Flags ,
		[in] IWbemContext *a_Context ,
		[out] IWbemObjectSink **a_Sink
	) ;

	HRESULT GetService (

		[in] long a_Flags ,
		[in] IWbemContext *a_Context ,
		[out] IWbemServices **a_Service
	) ;

} ;

[object, restricted, uuid(75abd540-f492-4161-86a5-37fc8898f69e)]
interface IWbemSecureObjectSink : IWbemObjectSink
{
    HRESULT IndicateWithSD(
                [in] long lNumObjects,
                [in, size_is(lNumObjects)] IUnknown** apObjects,
                [in] long lSDLength,
                [in, size_is(lSDLength)] BYTE* pSD);
};


[object, restricted, uuid(3ae0080a-7e3a-4366-bf89-0feedc931659)]
interface IWbemEventSink : IWbemSecureObjectSink
{
    HRESULT SetSinkSecurity(
                [in] long lSDLength,
                [in, size_is(lSDLength)] BYTE* pSD);

    HRESULT IsActive();

    HRESULT GetRestrictedSink(
                [in] long lNumQueries,
                [in, size_is(lNumQueries), string] const LPCWSTR* awszQueries,
                [in] IUnknown* pCallback,
                [out] IWbemEventSink** ppSink);

    HRESULT SetBatchingParameters(
                [in] LONG lFlags,
                [in] DWORD dwMaxBufferSize,
                [in] DWORD dwMaxSendLatency);

};




////////////////////////////////////////////////////////////////////////
// wmiutils
    [local, object, uuid(9AE62877-7544-4bb0-AA26-A13824659ED6)]

    interface IWbemPathKeyList : IUnknown
    {
        HRESULT GetCount(
            [out] ULONG * puKeyCount
            );

        HRESULT SetKey(
            [in, string] LPCWSTR wszName,
            [in] ULONG uFlags,                  // Add flag for SINGLETON
            [in] ULONG uCimType,                // Implies the size
            [in] LPVOID pKeyVal
            );

        HRESULT SetKey2(
            [in, string] LPCWSTR wszName,
            [in] ULONG uFlags,                  // Add flag for SINGLETON
            [in] ULONG uCimType,
            [in] VARIANT * pKeyVal
            );

        HRESULT GetKey(
            [in] ULONG uKeyIx,
            [in] ULONG uFlags,                         // Add flag for SINGLETON
            [in,out] ULONG * puNameBufSize,            // In bytes; must be large enough for UNICODE null
            [in,out] LPWSTR pszKeyName,                // May be NULL for implicit keys
            [in,out] ULONG * puKeyValBufSize,          // In Bytes, includes double NULL
            [in,out] LPVOID pKeyVal,                   // Key Val
            [out] ULONG *puApparentCimType             // One of CIM_SINT32, CIM_SINT64, CIM_STRING, etc.
            );

        HRESULT GetKey2(
            [in] ULONG uKeyIx,
            [in] ULONG uFlags,                         // Add flag for SINGLETON
            [in,out] ULONG * puNameBufSize,            // In bytes; must be large enough for UNICODE null
            [in,out] LPWSTR pszKeyName,                // May be NULL for implicit keys
            [in,out] VARIANT * pKeyValue,              // In Bytes, includes double NULL
            [out] ULONG *puApparentCimType             // One of CIM_SINT32, CIM_SINT64, CIM_STRING, etc.
            );

   	    HRESULT RemoveKey(
            [in, string] LPCWSTR wszName,
            [in] ULONG uFlags
            );

   	    HRESULT RemoveAllKeys(
            [in] ULONG uFlags
            );

        HRESULT MakeSingleton([in] boolean bSet);

        // WBEMPATH_INFO_IS_COMPOUND             <true if compound key is used
        // WBEMPATH_INFO_HAS_V2_REF_PATHS        <true if V2-style ref paths are used
        // WBEMPATH_INFO_HAS_IMPLIED_KEY         <true if keynames are missing somewhere
        // WBEMPATH_INFO_CONTAINS_SINGLETON      <true if one or more singletons

        HRESULT GetInfo(
            [in] ULONG uRequestedInfo,
            [out] ULONGLONG *puResponse
            );

        HRESULT GetText(
            [in] long lFlags,       // tag_WBEM_GET_KEY_FLAGS
            [in,out] ULONG * puBuffLength,
            [in, out, string] LPWSTR pszText
            );

    };

    //*******************************************************************
    // CoCreatable

    [local, object, uuid(3BC15AF2-736C-477e-9E51-238AF8667DCC)]

    interface IWbemPath : IUnknown
    {
        HRESULT SetText(
            [in] ULONG uMode,       // see tag_WBEM_PATH_CREATE_FLAG
            [in] LPCWSTR pszPath
            );

        HRESULT GetText(
            [in] long lFlags,       // see tag_WBEM_GET_TEXT_FLAGS
            [in,out] ULONG * puBuffLength,
            [in, out, string] LPWSTR pszText
            );

	    // Path tests
        // ==========


        HRESULT GetInfo(
            [in] ULONG uRequestedInfo,      // zero for now
            [out] ULONGLONG *puResponse     // see tag_WBEM_PATH_STATUS_FLAG
            );

    	// Server access
        // =============

    	HRESULT SetServer(
            [in, string] LPCWSTR Name
            );

        HRESULT GetServer(
            [in,out] ULONG * puNameBufLength,
            [in, out, string] LPWSTR pName
            );

    	// Namespace access.  Example, root\default, root is 0, 1 is def
        // =============================================================

        HRESULT GetNamespaceCount(
            [out] ULONG* puCount
            );

    	HRESULT SetNamespaceAt(
            [in] ULONG uIndex,
 			[in, string] LPCWSTR pszName
            );

    	HRESULT GetNamespaceAt(
            [in] ULONG uIndex,
            [in,out] ULONG * puNameBufLength,
            [in, out, string] LPWSTR pName
            );

        HRESULT RemoveNamespaceAt(
            [in] ULONG uIndex
            );

        HRESULT RemoveAllNamespaces(
            );

        //
        // Scope manipulators.  The leftmost scope is 0
        // ============================================

        HRESULT GetScopeCount(
            [out] ULONG *puCount
            );

        HRESULT SetScope(
            [in] ULONG uIndex,
            [in] LPWSTR pszClass
            );

        HRESULT SetScopeFromText(
            [in] ULONG uIndex,
            [in] LPWSTR pszText
            );

        HRESULT GetScope(
            [in] ULONG uIndex,
            [in,out] ULONG * puClassNameBufSize,
            [in,out] LPWSTR pszClass,
            [out] IWbemPathKeyList **pKeyList
            );

        HRESULT GetScopeAsText(
            [in] ULONG uIndex,
            [in,out] ULONG * puTextBufSize,
            [in,out] LPWSTR pszText
            );

        HRESULT RemoveScope(
            [in] ULONG uIndex
            );

        HRESULT RemoveAllScopes(
            );

        // General class and key access routines
        // =====================================

        HRESULT SetClassName(
            [in, string] LPCWSTR Name
            );

        HRESULT GetClassName(
            [in,out] ULONG * puBuffLength,
            [in, out, string] LPWSTR pszName
            );

	    HRESULT GetKeyList(
            [out] IWbemPathKeyList ** pOut
            );

	    HRESULT CreateClassPart(
            [in] long lFlags,
            [in, string] LPCWSTR Name
            );

	    HRESULT DeleteClassPart(
            [in] long lFlags
            );

	    BOOL IsRelative(
			[in, string] LPWSTR wszMachine, 
			[in, string] LPWSTR wszNamespace
			);

	    BOOL IsRelativeOrChild(
			[in, string] LPWSTR wszMachine, 
			[in, string] LPWSTR wszNamespace,
			[in] long lFlags
			);
		
		BOOL IsLocal(
			[in, string] LPCWSTR wszMachine
			);

		BOOL IsSameClassName(
			[in, string] LPCWSTR wszClass
			);


    };

[local, object, uuid(81166f58-dd98-11d3-a120-00105a1f515a)]
interface IWbemQuery : IUnknown
{
    HRESULT Empty();

    HRESULT SetLanguageFeatures(
        [in] long lFlags,
        [in] ULONG uArraySize,
        [in] ULONG *puFeatures
        );
        // If not called, all features are supported

    HRESULT TestLanguageFeatures(
        [in,out] ULONG *uArraySize,
        [out] ULONG *puFeatures
        );

    HRESULT Parse(
        [in] LPCWSTR pszLang,
        [in] LPCWSTR pszQuery,
        [in] ULONG uFlags
        );

    HRESULT GetAnalysis(
        [in]  ULONG uAnalysisType,
        [in]  ULONG uFlags,
        [out] LPVOID *pAnalysis
        );

    HRESULT FreeMemory(
        [in] LPVOID pMem
        );

    HRESULT GetQueryInfo(
        [in]  ULONG  uAnalysisType,
        [in]  ULONG  uInfoId,
        [in]  ULONG  uBufSize,
        [out] LPVOID pDestBuf
        );

    HRESULT AttachClassDef(
        [in] REFIID riid,
        [in, iid_is(riid)] LPVOID pClassDef
        );

    HRESULT TestObject(
        [in] ULONG uTestType,
        [in] ULONG uFlags,
        [in] REFIID riid,
        [in, iid_is(riid)] LPVOID pObj
        );

    HRESULT StringTest(
        [in] ULONG  uTestType,
        [in] LPCWSTR pszTestStr,
        [in] LPCWSTR pszExpr
        );
};
