/*++

   Copyright    (c)    1999    Microsoft Corporation

   Module  Name :

        UlNativeStructs.java

   Abstract:

        This module declares structs that mirror native
        UL structures.

   Author:

        Saurab Nog    ( SaurabN )     05-May-1999

   Environment:

        COM+ - User Mode

   Project:

        ASP - Managed Run Time

--*/

using System.Reflection.Emit;
using System.Interop;
using System.IIS.PrivateUtils;

namespace System.IIS.Hosting
{

    //
    // Structure defining format of unknown header.
    //

    [sysstruct(pack=PackingSizeEnum.Size4, format=ClassFormat.Unicode)]
    class UL_UNKNOWN_HTTP_REQUEST_HEADER {
        //
        // The header name (minus the ':' character)
        //

        public int      _NameLength;
        public String   _pName;

        //
        // The header value
        //

        public int      _RawValueLength;
        public String   _pRawValue;
    };

    //
    // ************************************************************************
    //

    [sysstruct(pack=PackingSizeEnum.Size4, format=ClassFormat.Unicode)]
    class UL_HTTP_REQUEST {
        //
        // An opaque request identifier. These values are used by the driver
        // to correlate outgoing responses with incoming requests.
        //

        public long     _ConnectionId;
        public long     _RequestId;

        //
        // The context associated with the URL prefix.
        //

        public long     _UrlContext;

        //
        // The HTTP version number.
        //

        public int      _Version;

        //
        // The request verb.
        //

        public int      _Verb;

        //
        // An indication of the reason the request was issued to user-mode.
        //

        public int      _Reason;

        //
        // The pointer and length of the verb string IF the Verb field is
        // UlHttpVerbUnknown.
        //

        //
        // The pointer and length of the raw URL.
        //

        public short    _UnknownVerbLength;
        public short    _RawUrlLength;

        //public String   _pUnknownVerb;
        //public String   _pRawUrl;
        public int      _pUnknownVerb;      /* wchar_t*: BUGBUG 64-bit! */
        public int      _pRawUrl;           /* wchar_t*: BUGBUG 64-bit! */

        //
        // The pointers and length of the canonicalized URL and parts
        //
        // notes :
        //
        //  pFullUrl is UNICODE and FullLength is in bytes.
        //
        //  Pointers overlap and point INTO pFullUrl.  NULL if not present.
        //

        public short    _FullUrlLength;
        public short    _HostLength;
        public short    _AbsPathLength;
        public short    _QueryStringLength;

        //public String   _pFullUrl;
        //public String   _pHost;
        //public String   _pAbsPath;
        //public String   _pQueryString;
        public int      _pFullUrl;      /* wchar_t*: BUGBUG 64-bit! */
        public int      _pHost;         /* wchar_t*: BUGBUG 64-bit! */
        public int      _pAbsPath;      /* wchar_t*: BUGBUG 64-bit! */
        public int      _pQueryString;  /* wchar_t*: BUGBUG 64-bit! */

        //
        // transport addresses for the connection.
        //

        public short    _RemoteAddressLength;
        public short    _RemoteAddressType;

        public short    _LocalAddressLength;
        public short    _LocalAddressType;

        public int      _pRemoteAddress;    /*PSOCKADDR*/
        public int      _pLocalAddress;     /*PSOCKADDR*/

        //
        // The request headers
        //

        // The array of unknown HTTP headers and the number of entries in
        // the array.
        //

        public int      _UnknownRequestHeaderCount;
        public int      _pUnknownRequestHeaders;     //  _PUL_UNKNOWN_HTTP_HEADER

        //
        // Known request headers.
        // Keep the size in sync with 2*WorkerRequest.RequestHeadersMaximum
        //

        [nativetype(NativeType.NativeTypeFixedArray, size=80)]
        public int[]      _pKnownRequestHeaders;

        //
        // 1 if there is more entity body to be read for this request.
        // 0 if there is no entity body or all of the entity body was copied
        // into pEntityBody.
        //

        public short    _MoreEntityBodyExists;

        //
        // The pointer and length of any copied entity body.  entity body is
        // only copied if UL_RECEIVE_REQUEST_FLAG_COPY_BODY is passed to
        // receive.
        //

        public short    _EntityBodyLength;
        public int      _pEntityBody;
    };

    //
    // ************************************************************************
    //
    // These structures describes an individual data chunk.
    //
    // ************************************************************************
    //

    [sysstruct(pack=PackingSizeEnum.Size4, format=ClassFormat.Unicode)]
    class UL_DATA_CHUNK_FROM_MEMORY {
        //
        // The type of this data chunk.
        //
        public int      _DataChunkType;
        protected int   _Alignment;
        public int      _pBuffer;
        public int      _BufferLength;
    };

    //
    // ************************************************************************
    //

    [sysstruct(pack=PackingSizeEnum.Size4, format=ClassFormat.Unicode)]
    class UL_DATA_CHUNK_FROM_FILE_NAME {
        //
        // The type of this data chunk.
        //
        public int      _DataChunkType;
        protected int   _Alignment;
        public long     _StartingOffset;
        public long     _Length;
        public int      _FileNameLength;
        public int      _pFileName;
    };

    //
    // ************************************************************************
    //

    [sysstruct(pack=PackingSizeEnum.Size4, format=ClassFormat.Unicode)]
    class UL_DATA_CHUNK_FROM_FILE_HANDLE {
        //
        // The type of this data chunk.
        //
        public int      _DataChunkType;
        protected int   _Alignment;
        public long     _StartingOffset;
        public long     _Length;
        public int      _FileHandle;
    };

    //
    // ************************************************************************
    //
    // These structures describes an HTTP response.
    //
    // ************************************************************************
    //

    //
    // Structure defining format of unknown header.
    //

    [sysstruct(pack=PackingSizeEnum.Size4, format=ClassFormat.Unicode)]
    class UL_UNKNOWN_HTTP_RESPONSE_HEADER {
        //
        // The header name (minus the ':' character)
        //
        public int      _NameLength;
        public int      _pName;

        //
        // The header value
        //
        public int      _RawValueLength;
        public int      _pRawValue;
    };

    // ************************************************************************

    [sysstruct(pack=PackingSizeEnum.Size4, format=ClassFormat.Unicode)]
    class UL_HTTP_RESPONSE {
        //
        // Response flags (see HTTP_RESPONSE_FLAG_* definitions below).
        //
        public short    _Flags;

        //
        // The http status code (e.g. 200) .
        //
        public short    _StatusCode;

        //
        // the http reason (e.g. "OK") .  This is a unicode string for convenience
        // but MUST not contain non-ascii characters.
        //
        public int      _ReasonLength;
        public int      _pReason;

        //
        // The response headers.
        //

        // The array of unknown HTTP headers and the number of entries in
        // the array.
        //
        public int      _UnknownResponseHeaderCount;
        public int      _pUnknownResponseHeaders;     //  _PUL_UNKNOWN_HTTP_HEADER

        //
        // No Known Headers here because they do not get copied over correctly.
        //
    };


    // ************************************************************************

    [sysstruct(pack=PackingSizeEnum.Size4, format=ClassFormat.Unicode)]
    class UL_SITE_BINDING {
        public String   urlPrefix;
        public String   rootDirectory;
    };

    [sysstruct(pack=PackingSizeEnum.Size4, format=ClassFormat.Unicode)]
    class UL_NETWORK_ADDRESS_IPV4
    {
        public int      IpAddress;
        public short    Port;
        public short    Spare;   // for alignment
    };
}
