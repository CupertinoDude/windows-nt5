/*++

   Copyright    (c)    1999    Microsoft Corporation

   Module  Name :

        ScriptMappingFactory.cool

   Abstract :
 
        This module looks at ScriptMapping configuration in the config file
        and converts that into an object from which Maps can be looked up

   Author:

        Anil Ruia        (anilr)     8-Oct-1999

   Environment:

        COM+ - User Mode Managed Run Time

   Project:

        Web Server

--*/

using System.ASP;
using System.ASP.Config;
using System.Collections;

namespace System.IIS.ISAPI
{
    public class ScriptMappingFactory : IConfigSectionHandler
    {
        // All the code in this method is stolen from Bilal's configdb.cool
        public ConfigOutput Create(object parentConfig,
                                          ConfigInput[] localConfig,
                                          String strPath)
        {
            ScriptMap map = new ScriptMap();

            for (int i = 0; i < localConfig.Length; i++)
            {
                TempXMLCursor cursor = localConfig[i].XML;
                if (!cursor.MoveToFirstChild())
                    continue;

                // We expect XML to look like
                // <add extension=".foo" dll="C:\fooisapi.dll"/>

                do
                {
                    if (cursor.Type != TempXML.Comment &&
                        cursor.Type != TempXML.Whitespace)
                    {
                        String extension = cursor.AttributeText("extension");
                        String dllName = cursor.AttributeText("dll");

                        if (extension == null || dllName == null)
                            throw new ConfigException("Expecting format <add extension=\".foo\" dll=\"C:\\fooisapi.dll\"/>");

                        map.Add(extension, dllName);
                    }
                }
                while (cursor.MoveNext());
            }

            return new ConfigOutput(map);
        }
    }

    internal class ScriptMap
    {
        private ArrayList _maps;

        public ScriptMap()
        {
            _maps = new ArrayList();
        }

        public void Add(String extension, String dllName)
        {
            Mapping map = new Mapping(extension, dllName);
            _maps.Add(map);
        }

        public String findDll(String path)
        {
            for(int i=0; i<_maps.Count; i++)
            {
                Mapping map = (Mapping)_maps[i];
                if(path.EndsWith(map.extension))
                    return map.dllName;
            }
            return null;
        }
    }

    internal class Mapping
    {
        private String _extension, _dllName;

        public Mapping(String extension, String dllName)
        {
            _extension = extension;
            _dllName = dllName;
        }

        public String extension
        {
            get
            {
                return _extension;
            }
        }

        public String dllName
        {
            get
            {
                return _dllName;
            }
        }
    }
}
