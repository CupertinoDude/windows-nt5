/*++

   Copyright    (c)    1999    Microsoft Corporation

   Module  Name :

        DavUtil.cool

   Abstract:

        This module implements utility functions for DAV.
 
   Author:

        Emily Kruglick    ( EmilyK )     28-Sep-1999

   Environment:

        COM+ - User Mode Managed Run Time
       
   Project:

        Web Server

   Classes:

        WriteUtil 
            public static void console(String tag, String info, int Level)
            public static void console(String tag, String info)
            public static void InvestigateRequest(HttpRequest request)

        Request 
            public static bool Validate(HttpRequest request, HttpResponse response)

--*/


using System.IO;
using System.Collections;
using System.ASP;
using System.XML;

namespace System.IIS.DAV.DAVUtil
{
    internal class WriteUtil
    {
        private const int ValidLevel = 7;

        [conditional("DBG")]
        public static void console(String tag, String info, int Level)
        {

            if (Level > ValidLevel)
            {
                if (tag == null)
                    tag = "<NULL>";

                if (info == null)
                    info = "<NULL>";

                Console.Write(tag + ": " + info + "\r\n");
            }
        }

        [conditional("DBG")]
        public static void console(String tag, String info)
        {
            console(tag, info, 0);
        }

        [conditional("DBG")]
        public static void InvestigateRequest(HttpRequest request, int level)
        {
            WriteUtil.console("Request.Path", request.Path, level);
            WriteUtil.console("Request.FilePath", request.FilePath, level);
            WriteUtil.console("Request.PathInfo", request.PathInfo, level );
            WriteUtil.console("Request.PhysicalPath", request.PhysicalPath, level );
            WriteUtil.console("Request.RawUrl", request.RawUrl, level);
            WriteUtil.console("Request.UserHostName", request.UserHostName , level);
            WriteUtil.console("Request.UserHostAddress", request.UserHostAddress, level);
            WriteUtil.console("URL.Host", request.Url.Host, level);
            WriteUtil.console("URL.Path", request.Url.Path, level);
            WriteUtil.console("URL.Protocol", request.Url.Protocol, level);
            WriteUtil.console("URL.Port", request.Url.Port.ToString(), level);
            WriteUtil.console("URL.Anchor", request.Url.Anchor, level);
            WriteUtil.console("URL.QueryString", request.Url.QueryString, level);
        }

        [conditional("DBG")]
        public static void InvestigateRequest(HttpRequest request)
        {
            InvestigateRequest(request, 0);
        }

        [conditional("DBG")]
        public static void InvestigateException(String tag, Exception ex, int level)
        {

            WriteUtil.console("Exception Occurred At:", tag, level);
            WriteUtil.console("ErrorCode", ex.ErrorCode.ToString(), level);
            WriteUtil.console("Message", ex.Message, level);
        }

    }

    internal class Request
    {
        public static bool Validate(HttpRequest request, HttpResponse response)
        {

            // ContentType if it exists better be:  "text/xml".
            // BUGBUG:  Should we complain if it does not exist?
            if ((request.ContentType != null)
                && (0 != string.Compare( request.ContentType, "", false))
                && (0 != string.Compare( request.ContentType, 0, "text/xml", 0, 8, false)))
	        {
                // if it is not "text/xml" than declare that we do not handle this type of body.
		        response.StatusCode = HttpStatus.UnsupportedMediaType;
                return false;
	        }
            return true;

        }
        
        public static void CheckIfHeaders(HttpContext context, String FileName)
        {
            int StatusCodeResponse = CacheValidation.Validate(context, FileName);

            if ( StatusCodeResponse != HttpStatus.Ok )
            {
                throw new HttpException(StatusCodeResponse, "Header checks failed");
            }

        }
    }

}
