/*++

   Copyright    (c)    1999    Microsoft Corporation

   Module  Name :

        PathUrl.cool

   Abstract:

        This module implements utility functions for dealing with physical paths and logical urls .
 
   Author:

        Emily Kruglick    ( EmilyK )     20-OCt-1999

   Environment:

        COM+ - User Mode Managed Run Time
       
   Project:

        Web Server

   Classes:

        PathUrl 
            public static String ConcatinateURL(String FirstPart, String SecondPart)
            public static String ConcatinatePath(String FirstPart, String SecondPart)
            public static bool IsDirectory(String Path)
            public static bool IsDirectory(FileEnumerator fe)

--*/


using System.IO;
using System.Collections;
using System.ASP;
using System.XML;

namespace System.IIS.DAV.DAVUtil
{
    internal class PathUrl
    {      
        internal static String ConcatinateURL(String FirstPart, String SecondPart)
        {
            return ConcatinateString(FirstPart, SecondPart, "/");

        }

        internal static String ConcatinatePath(String FirstPart, String SecondPart)
        {
            return ConcatinateString(FirstPart, SecondPart, "\\");
        }

        internal static bool IsDirectory(String Path)
        {
            Util.Debug.Assert (Path!=null);
            if (Path == null) 
                return false;

            bool fFileFound;
            FileEnumerator fe = null;

            try 
            {
                fe= new FileEnumerator(Path);
                fFileFound = fe.GetNext();
            }
            catch (Exception ex)
            {
                // If either of these command throw an exception then 
                // go on assuming the file did not exist.
                if (fe != null) fe.Close();
                fFileFound = false;
            }

            if (fFileFound) 
            {   
                bool retval = IsDirectory(fe);
                fe.Close();
                return retval;
            }
            else
                return false;

        }

        internal static bool IsDirectory(FileEnumerator fe)
        {
            Util.Debug.Assert (fe != null);
            if (fe == null) 
                return false;

            if ((fe.Attributes & (int)FileAttributes.Directory) == (int)FileAttributes.Directory)
                return true;
            else
                return false;
        }

        /////////////////////////////////////////////
        //  Validate that the PhysicalPath is the 
        //  full directory path to be added.  If ASP
        //  has parsed anything into PathInfo then 
        //  we have a missing directory in the path and
        //  we should return conflict.
        //
        //  This function will throw 409 all the way out
        //  if the parent directories don't exist. 
        /////////////////////////////////////////////
        internal static void ParentDirectoriesExist(HttpRequest request)
        {
            String              pathinfo    = request.PathInfo;

            WriteUtil.console("pathinfo", pathinfo, 1);

            // If there is info in pathinfo then one of the directories in the path were not found.
            if ((pathinfo != null) && (!String.Empty.Equals(pathinfo)))
                throw new HttpException(HttpStatus.Conflict, "Parent Directories are missing");

        }

        private static String ConcatinateString(String FirstPart, String SecondPart, String divider)
        {
            Util.Debug.Assert(FirstPart != null);
            Util.Debug.Assert(SecondPart != null);
            Util.Debug.Assert(divider != null);
            if (FirstPart==null || SecondPart==null || divider==null) return null;

            bool fNoNeed = false;
            if (FirstPart[FirstPart.Length - 1] == divider[0])
            {
                fNoNeed = true;
            }
                
            String tmpSecond = SecondPart;
            if (SecondPart[0] == divider[0])
            {
                if (fNoNeed)
                {
                    tmpSecond = SecondPart.Remove(0, 1);
                }
                else
                {
                    fNoNeed = true;
                }
            }

            if (fNoNeed)
                return FirstPart + tmpSecond;
            else
                return FirstPart + divider + SecondPart;

        }
    }

}
