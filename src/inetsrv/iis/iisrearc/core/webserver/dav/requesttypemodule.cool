/*++

   Copyright    (c)    1999    Microsoft Corporation

   Module Name :

        RequestTypeModule.cool

   Abstract:

        Module that handles setting the RequestType to the appropriate value
        depending on the verb and Translate header.
        
        Two different classes are implemented here one for use with mapping
        put and translate false to PutSource and one for mapping Get and
        Translate to GetSource and Head and Translate False to HeadSource.
        Only the Get and Head Source Module will by default be plugged into
        the ASP pipe-line.
                
   Author:

        Emily Kruglick (EmilyK)      20-Sept-99

   Environment:

        COOL - User Mode Managed Run Time
       
   Project:

        Web Server

   Classes:
        public class GetHeadRequestTypeModule : HttpModuleSync
            public override int Enter(HttpContext context)

        public class PutRequestTypeModule : HttpModuleSync
            public override int Enter(HttpContext context)
--*/

using System;
using System.ASP;

namespace System.IIS.DAV
{
    // Class used to check if the translate header equaled false for the
    // request.  It will cache the result so as to only check it once.
    internal class TranslateHeader
    {
        private bool _fTranslate;

        public bool fTranslate
        {
            get 
            {
                return _fTranslate;
            }
        }

        public TranslateHeader(HttpRequest request)
        {
            // Always assume that we want to translate.
            _fTranslate = true;

            // Get the translate header, since header lookups do hashes we only
            // want to do this once.
            String sTranslateHeader = request.Headers["Translate"];
            
            // BUGBUG:  Make sure that nothing more that 'F' or 'f' is valid ever.
            if (   (sTranslateHeader != null)
                && (sTranslateHeader.Length == 1) 
                && (   (sTranslateHeader[0] == 'F') 
                    || (sTranslateHeader[0] == 'f')))
            {
                _fTranslate = false;
            }

        }
    }

    public class GetHeadRequestTypeModule : HttpModuleSync 
    {
        public override int Enter(HttpContext context)
        {
            // ==============================================
            // Exceptions Thrown:  None   
            // ==============================================

            HttpRequest req = context.Request;
            TranslateHeader th = new TranslateHeader(req);

            // Being Anal but will throw an exception if we don't have a valid HTTPMethod to compare to.
            Util.Debug.Assert(req.HttpMethod != null);

            // If we don't want to translate.
            if (th.fTranslate == false)
            {
                // then check if we are dealin with a GET Or HEAD and translate appropriately.
                if (req.HttpMethod.Equals("GET"))
                {
                    req.RequestType = "(GETSOURCE)";
                }

                if (req.HttpMethod.Equals("HEAD"))
                {
                    req.RequestType = "(HEADSOURCE)";
                }
            }

            // No matter what always continue down the pipe-line.
            return HttpModuleStatus.Continue;
        }

        public string Phase
        {
            override get { return HttpModulePhase.BeforeLogging; }
        }

    }
  
    // This class is not in the pipeline by default, it will ship as an example 
    // module that can be added to the pipeline when needed.  
    public class PutRequestTypeModule : HttpModuleSync 
    {
        public override int Enter(HttpContext context)
        {
            // ==============================================
            // Exceptions Thrown:  None   
            // ==============================================

            HttpRequest req = context.Request;
            TranslateHeader th = new TranslateHeader(req);

            // If we don't want to translate.
            if (th.fTranslate == false)
            {
                // then check if we are dealin with a GET Or HEAD and translate appropriately.
                 if (req.HttpMethod.Equals("PUT"))
                {
                    req.RequestType = "(PUTSOURCE)";
                }

            }

            // No matter what always continue down the pipe-line.
            return HttpModuleStatus.Continue;
        }

        public string Phase
        {
            override get { return HttpModulePhase.BeforeLogging; }
        }

    } // end of PutRequestTypeModule
}  // end of namespace
