/*++

   Copyright    (c)    1999    Microsoft Corporation

   Module  Name :

        Generated.cool

   Abstract:

        This module implements property retrieval for generated properties:

              DisplayName
              GetContentType
              
   Author:

        Emily Kruglick    ( EmilyK )     Oct-14-1999

   Environment:

        COM+ - User Mode Managed Run Time
       
   Project:

        Web Server

   Classes:

        Generated 
            static public bool GetProperties( String                path
                                            , String                uri
                                            , PropRetrievalFlags    flag
                                            , Hashtable             propnames
                                            , ArrayList             proplist)

--*/


using System.IO;
using System.Collections;
using System.ASP;
using System.XML;
using System.Interop;
using System.Reflection;
using System.IIS.DAV.DAVUtil;

namespace System.IIS.DAV.PropManagers
{
    internal class Generated 
    {
        // Private static variabls used to keep track of the 
        // properties this function knows about
        private static SupportProperty[]    _sp;
        private static Char[]               _rgRemoveSlash;

        private class ValueData
        {
            public ValueData(String i_uri)
            {
                uri = i_uri;
            }

            public String         uri;
        }

        ////////////////////////////////////////////////////////////////
        // Value evaluation functions
        ////////////////////////////////////////////////////////////////
        internal static String DisplayNameFcn(Object obj)
        {
            ValueData vinfo = (ValueData) obj;

            Util.Debug.Assert(vinfo.uri!=null);
            if (vinfo.uri != null)
            {
                //  We retrieve the display name from the URI, so we don't
                //  return the physical path if we are dealing with a virtual root.

			    String sDisplayName = new String (vinfo.uri);
                int iSlash = 0;

                // Trims off the '/' from the end of the string.
                sDisplayName = vinfo.uri.TrimEnd(_rgRemoveSlash);
                
                int len = sDisplayName.Length;
                if (len == 0)
                {
                    // If we are dealing with a zero length string then 
                    // we need to just return the "/" as the display name.
                    sDisplayName = new String("/");
                }
                else
                {
                    iSlash = sDisplayName.LastIndexOf('/');
                    if (iSlash != -1)
                    {
                        sDisplayName = sDisplayName.Remove(0, iSlash + 1);

                        // BUGBUG:  DAVFS sees it as an error if there are no slashes
                        //          for now I am just returning the string as is.

                    }
                }

                return sDisplayName;
            }
            else
            {
                return null;
            }
        }


        internal static String GetContentTypeFcn(Object obj)
        {
            ValueData vinfo = (ValueData) obj;

           // fe is guaranteed set by the contract that has this function only called
           // from within the loop in GetProperties.          
           
           Util.Debug.Assert(vinfo.uri!=null);
           if (vinfo.uri!=null)
                return MimeMapping.GetMimeMapping(vinfo.uri); 
           else
                return null;

        }

        /////////////////////////////////////////////////////////////
        // Static constructor used to set up my static variables
        /////////////////////////////////////////////////////////////
        static Generated()
        {

            _rgRemoveSlash = new char[1];
            _rgRemoveSlash[0] = '/';

            _sp = new SupportProperty[2];

            // DisplayName Property
            // ======================
            _sp[0] = new SupportProperty( PropNameConsts.propDisplayName
                                        , new EvalValueFunction(Generated.DisplayNameFcn)
                                        , PropTypeConsts.typeString);

            // GetContentType Property
            // ======================
            _sp[1] = new SupportProperty( PropNameConsts.propContentType
                                        , new EvalValueFunction(Generated.GetContentTypeFcn)
                                        , PropTypeConsts.typeString);

        }

        /////////////////////////////////////////////////////////////
        // Exposed method used to retrieve property information
        /////////////////////////////////////////////////////////////
        static public bool GetProperties( String                path
                                        , String                uri
                                        , PropRetrievalFlags    flag
                                        , Hashtable             propnames
                                        , ArrayList             proplist)
        {
            bool        fGetAll = true;
            bool        fGetOnlyNames = false;

            // We don't use the path so we don't validate it.
            Util.Debug.Assert(proplist!=null);
            if (proplist!=null)
            {
                PropertyFcns.SetControlValues(flag, propnames, ref fGetAll, ref fGetOnlyNames);

                ValueData vinfo = new ValueData(uri);
                
                PropertyFcns.LoopProperties(_sp, fGetAll, fGetOnlyNames, proplist, propnames, (Object) vinfo);
            
            } // End of validating we have a proplist to add to.

            // This property finder will always find it's properties since it generates them.
            // It should only be called if we have a valid resource as seen by one of the other property
            // handlers.
            return true;

        }  // End of GetAllProperties
    } // End of DAVFileSystem Class
} // End of DAV namespace

