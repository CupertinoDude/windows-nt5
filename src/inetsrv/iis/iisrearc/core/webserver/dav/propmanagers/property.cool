/*++

   Copyright    (c)    1999    Microsoft Corporation

   Module  Name :

        Property.cool

   Abstract:

        This module implements Property Class for storing information
        about a specific property.
 
   Author:

        Emily Kruglick    ( EmilyK )     Oct-13-1999

   Environment:

        COM+ - User Mode Managed Run Time
       
   Project:

        Web Server

   Classes:

        public class Property 
            public Property(String Name, String Value, PropTypeConsts Type, int ResultCode);
            public String Name;
            public String Value;
            public int    Type;
            public int    ResultCode;

        internal class SupportProperty
            internal SupportProperty(String name, EvalValueFunction fcn, PropTypeConsts type);
            internal String Name;
            internal EvalValueFunction Valfcn;
            internal PropTypeConsts Type;

            
--*/
using System.IIS.DAV.DAVUtil;
using System.Collections;
using System.ASP;

namespace System.IIS.DAV.PropManagers
{
    // Delegate definition for the value evaulation functions.
    delegate String EvalValueFunction(Object vinfo); 

    // A class to hold information about each property this system understands
    internal class SupportProperty
    {
        internal SupportProperty(String name, EvalValueFunction fcn, PropTypeConsts type)
        {
            Name = name;
            Valfcn = fcn;
            type = Type;
        }

        internal String Name;
        internal EvalValueFunction Valfcn;
        internal PropTypeConsts Type;
    };

    internal class PropertyFcns
    {
        internal static void LoopProperties(SupportProperty[] sp
                                    , bool fGetAll
                                    , bool fGetOnlyNames
                                    , ArrayList proplist
                                    , Hashtable propnames
                                    , Object valueinfo)
        {
            Util.Debug.Assert(fGetAll || propnames != null);
            Util.Debug.Assert(proplist != null);
            Util.Debug.Assert(sp != null);

            int csp = sp.Length;
            WriteUtil.console("csp", csp.ToString(), 10);
            for (int iProperties = 0; iProperties < csp; iProperties++)
            {
                if (fGetAll || propnames.ContainsKey(sp[iProperties].Name))
                {
                    String value = null;
                    PropTypeConsts type = PropTypeConsts.typeString;  // String type is never printed anyway.

                    if (!fGetOnlyNames)
                    {
                        WriteUtil.console("Calling ", "valfcn", 10);
                        value = sp[iProperties].Valfcn(valueinfo);
                        WriteUtil.console("Calling ", "after", 10);
                        
                        type = sp[iProperties].Type;
                    }

                    proplist.Add (new Property(    sp[iProperties].Name
                                                ,  value
                                                ,  type
                                                ,  HttpStatus.Ok ) );
                }

            }

        }

        internal static void SetControlValues(PropRetrievalFlags flag
                                            , Hashtable propnames
                                            , ref bool fGetAll
                                            , ref bool fGetOnlyNames)
        {
            if (flag == PropRetrievalFlags.NamedProps)
            {
                fGetAll = false;

                // If we have a bad request we will complain but process it as 
                // if we were not looking for specific properties.
                Util.Debug.Assert(propnames != null);
                if (propnames == null) fGetAll = true;
            }
            else if (flag == PropRetrievalFlags.PropNames)
            {
                fGetOnlyNames = true;
            }

        }

    }

    public class Property
    {

        private String           _name;
        private String           _value;
        private PropTypeConsts   _type;
        private int              _resultcode;

        public Property(String Name, String Value, PropTypeConsts Type, int ResultCode)
        {
            _name = Name;
            _value = Value;
            _type = Type;
            _resultcode = ResultCode;
        }

        public Property()
        {
            _name = null;
            _value = null;
            _type = 0;
            _resultcode = 0;
        }

        public String Name
        {
            get 
            {
                return _name;
            }

            set
            {
                _name = value;
            }
        }
                
        public String Value
        {
            get 
            {
                return _value;
            }

            set
            {
                _value = value;
            }
        }

        public PropTypeConsts Type
        {
            get 
            {
                return _type;
            }

            set
            {
                _type = value;
            }
        }

        public int ResultCode
        {
            get 
            {
                return _resultcode;
            }

            set
            {
                _resultcode = value;
            }
        }

    }

}

