/*++

   Copyright    (c)    1999    Microsoft Corporation

   Module  Name :

        Options.cool

   Abstract:

        This module implements a the Options Handler for HTTP 1.1.
 
   Author:

        Emily Kruglick    ( EmilyK )     22-Sept-1999

   Environment:

        COM+ - User Mode Managed Run Time
       
   Project:

        Web Server

   Classes:
    
        class OptionHandler : IHttpHandler
            public void ProcessRequest(HttpContext context)
            public bool IsReusable()

--*/

using System.ASP;
using System.Collections;

namespace System.IIS.DAV
{

    public class OptionHandler : IHttpHandler
    {
                  
        /********************************************************************++
          Thrown Exceptions:
            None
          --********************************************************************/
        public void ProcessRequest(HttpContext context)
        {
        
            HttpResponse    response  =  context.Response;

            // After November Release Implemenation needs:
            // BUGBUG:  Still missing are: PUT, COPY, MOVE, MKCOL, PROPFIND, PROPPATCH, LOCK, UNLOCK, SEARCH
            // BUGBUG:  Need to determine if MS-Author-Via header should be sent back.
            // BUGBUG:  Need to determine if DASL header should be sent back.
            // BUGBUG:  Need to send back DAV header once DAV is implemented.
            // BUGBUG:  Need to check the URI and determine what to send back for Allow.
            // BUGBUG:  Need to return Accept-Ranges.

            // Public is all the verbs that can be returned for 
            String header = Methods.Options.AllowHeader(null);
            response.AppendHeader("Public", header);
            response.AppendHeader("Allow", header);

            // Don't ever return a Content-Type for OPTIONS.
            response.AppendHeader("Content-Type", null);

            // BUGBUG:  Kind of a lie for now, but gets webfolders working.
            response.AppendHeader("MS-Author-Via", "DAV");

            response.StatusCode = HttpStatus.Ok;

                }

        public bool IsReusable()
        {
            return true;
        }
        
    };
}
