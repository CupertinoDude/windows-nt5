/*++

   Copyright    (c)    1999    Microsoft Corporation

   Module  Name :

        DataCache.cool

   Abstract:

        This module implements an object that holds the generic information retrieved
        from a XMLParse that different DAV Methods might want to inquire about.
 
   Author:

        Emily Kruglick    ( EmilyK )     29-Sep-1999

   Environment:

        COM+ - User Mode Managed Run Time
       
   Project:

        Web Server

   Classes:

        DataCache 
            internal DataCache(SubHandler subhandler)
            internal int StartParse(HttpRequest request)
            internal void AddNamespace(String ns)
            internal void Done()
            internal ArrayList GetNamespaces()
            internal bool fStillParsing

--*/


using System.IO;
using System.Collections;
using System.ASP;
using System.XML;
using System.IIS.DAV.DAVUtil;

namespace System.IIS.DAV.XML
{
    internal class DataCache
    {
    ////////////////////////////////////////////////////////////////////
    // Private Methods for internally saving information from the parse.
    ////////////////////////////////////////////////////////////////////
        private bool _fStillParsing;
        private XmlParser _parser;
        private ArrayList _alNamespaces;

    ////////////////////////////////////////////////////////////////////
    // Public methods used to setup the body to be parsed.
    ////////////////////////////////////////////////////////////////////
        internal DataCache(SubHandler subhandler)
        {
            // Get a new XML Parse to interpret the body.
            _parser  = new XmlParser();

            // Get a new XMLHandler that the Parser can talk to.
            ParseHandler ph = new ParseHandler(this, subhandler);

            // Tell the parser what handler to talk to
            _parser.SetHandler(ph);

            // Mark that we are going to be parsing.
            _fStillParsing = true;

            // Allocate a namespace array list that can be used to 
            // hold the namespaces we think we will se when writing the response.
            _alNamespaces = new ArrayList();
        }

        // BUGBUG:  ASYNC Processing
        internal int StartParse(HttpRequest request)
        {
            // Hook up the body to the parser.
            StreamReader    reader  = new StreamReader(request.InputStream);
            _parser.SetInput(reader);

            try
            {
                WriteUtil.console("StartParse", "before run", 5);
                // Parse the body.
                _parser.Run();

                // Free up the parser once we are done using it.
                _parser = null;  
            }
            catch (Exception e)
            {
                if (e.ErrorCode != (int) ErrorCodes.MissingRoot)
                {
                    WriteUtil.console("Error", e.Message, 5);    
                    WriteUtil.console("Error", e.ErrorCode.ToString(), 5);

                    // Mask all exceptions caught here to parsing errors or bad request.
                    return HttpStatus.BadRequest;
                }
            }

            return HttpStatus.Ok;
        }

    ////////////////////////////////////////////////////////////////////
    // Public methods used by the parse handlers to tell
    // the cache about the request.
    ////////////////////////////////////////////////////////////////////
        
        // Function is used by the handlers to add namespaces when they see them 
        // in the request.  These namespaces most likely will exist in the response.
        internal void AddNamespace(String ns)
        {
            _alNamespaces.Add(ns);
        }

        // Function is used by the handlers to notify the Cache that it
        // has completed it's parse.
        internal void Done()
        {
            _fStillParsing = false;    
        }


    ////////////////////////////////////////////////////////////////////
    // Public methods used by the request handler to retrieve cached 
    // information from that the parse handlers stored here.
    ////////////////////////////////////////////////////////////////////
        internal ArrayList GetNamespaces()
        {
            return _alNamespaces;
        }

        internal bool fStillParsing
        {
            get
            {
                return _fStillParsing;
            }
        }

    }

}
