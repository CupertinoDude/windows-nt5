/*++

   Copyright    (c)    1999    Microsoft Corporation

   Module  Name :

        PropFindCache.cool

   Abstract:

        This module implements caching of specific information that propfind
        is interested in.
 
   Author:

        Emily Kruglick    ( EmilyK )     29-Sep-1999

   Environment:

        COM+ - User Mode Managed Run Time
       
   Project:

        Web Server

   Classes:

        PropFindCache 
            internal PropFindCache() 
            internal void WantAllProps()
            internal void WantPropNames()
            internal void AddProperty(String sPropName)
            internal PropRetrievalFlags PropFindRetrievalSetting
            internal Hashtable PropertiesRequested
            internal int NumberOfPropertiesRequested


--*/


using System.IO;
using System.Collections;
using System.ASP;
using System.XML;
using System.IIS.DAV.DAVUtil;

namespace System.IIS.DAV.XML
{
    internal class PropFindCache : DataCache
    {
    ////////////////////////////////////////////////////////////////////
    // Private Methods for internally saving information from the parse.
    ////////////////////////////////////////////////////////////////////
        private PropFindTypes _PropFindType;
        private Hashtable _PropertiesRequested;

        internal PropFindCache() 
           : base(new PropFindHandler())
        {
            _PropFindType = PropFindTypes.NotSet;
            _PropertiesRequested = null;
        }

    ////////////////////////////////////////////////////////////////////
    // Internal methods used by the Parser to save information.
    ////////////////////////////////////////////////////////////////////
        internal void WantAllProps()
        {
            if (_PropFindType != PropFindTypes.NotSet)
            {
                throw new HttpException(HttpStatus.BadRequest, "Can only have one AllProp and nothing else in xml");
            }
            else
            {
               _PropFindType = PropFindTypes.AllProps;
            }
        }

        internal void WantPropNames()
        {
            if (_PropFindType != PropFindTypes.NotSet)
            {
                throw new HttpException(HttpStatus.BadRequest, "Can only have one PropNames and nothing else in xml");
            }
            else
            {
                _PropFindType = PropFindTypes.PropNames;
            }
        }


        internal void AddProperty(String sPropName)
        {
            Util.Debug.Assert(sPropName!=null);
            if (sPropName!=null)
            {
                // If we haven't set the type of request it is yet
                if (_PropFindType == PropFindTypes.NotSet)
                {
                    // set it and allocate the hast table to keep track
                    // of the properties that have been requested
                    _PropFindType = PropFindTypes.NamedProps;
                    _PropertiesRequested = new Hashtable();
                }

                // Make sure we are not mixing types of requests.
                if (_PropFindType != PropFindTypes.NamedProps)
                {
                    throw new HttpException(HttpStatus.BadRequest, "Can not have PropName and Prop in same propfind");
                }
                else
                {
                    _PropertiesRequested.Add(sPropName, null);
                }
            }
        }


    ////////////////////////////////////////////////////////////////////
    // Internal methods used by retrieve stored information
    ////////////////////////////////////////////////////////////////////
        internal PropRetrievalFlags PropFindRetrievalSetting
        {
            get
            {
                if (_PropFindType == PropFindTypes.NotSet)
                    return PropRetrievalFlags.AllProps;
                else
                {
                    int iTmp = (int) _PropFindType;
                    return (PropRetrievalFlags) iTmp;
                }
            }
        }

        internal Hashtable PropertiesRequested
        {
            get
            {
                return _PropertiesRequested;
            }
        }

        internal int NumberOfPropertiesRequested
        {
            get
            {
                if (_PropertiesRequested != null)
                    return _PropertiesRequested.Count;
                else
                    return 0;
            }
        }
    }



}
