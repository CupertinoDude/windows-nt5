/*++

   Copyright    (c)    1999    Microsoft Corporation

   Module  Name :

        NamespaceController.cool

   Abstract:

        This module implements the namespace class which is responsible for:
        
        1)  Providing a function to parse namespaces out of strings.

   Author:

        Emily Kruglick    ( EmilyK )     Oct-19-1999

   Environment:

        COM+ - User Mode Managed Run Time
       
   Project:

        Web Server

   Classes:

        Namespace 
            public NamespaceController()
            public static bool IsNamespaceAttr(String sAttr)
            public void ParseTag(String sTag)
            public String TagWithout
            public String Namespace
            public bool HasNamespace
            public String GetNewPrefix()

--*/

using System.IO;
using System.XML;
using System.ASP;

namespace System.IIS.DAV.XML
{
    internal class NamespaceController
    {
        // BUGBUG:  DAVFS has special casing about some of these terminators
        //          we will need to make sure we cover those cases in here.

        // BUGBUG:  Once supported this should be a constant array.
        private char[] NamespaceTerminators;
 
        private int _CurrentPrefix;    // The integer value that can calculate
                                       // the last passed out prefix.
        private String _Namespace;     // The namespace parsed from the tag.
            
        private String _TagWithout;    // The tag without the namespace present
        private bool _HasNamespace;    // Whether the tag has a namespace associated.
        private bool _TagSet;          // Whether the tag has been passed in.

        // Initalizes the Namespace object
        public NamespaceController()
        {
            NamespaceTerminators = new char[5];
            NamespaceTerminators[0] = ':';
            NamespaceTerminators[1] = '/';
            NamespaceTerminators[2] = '?';
            NamespaceTerminators[3] = ';';
            NamespaceTerminators[4] = '#';

            _CurrentPrefix = 0;
            _TagSet = false;
            _HasNamespace = false;
        }

        // Function takes a Attribute string and tells if the 
        // string contains the declaration of a namespace.
        public static bool IsNamespaceAttr(String sAttr)
        {
            // Function should not be called with a null string.
            Util.Debug.Assert (sAttr!=null);
            if (sAttr!=null)
            {
                bool fIsAttr = sAttr.Length >= 5;
            
                if (fIsAttr)
                    fIsAttr = (String.Compare(sAttr, 0, "xmlns", 0, 5) == 0);

                return fIsAttr;
            }
            else
            {
                return false;
            }
        }
        
        // Function takes a string and parses out the namespace information
        // from the string so it can be replaced with a variable.
        public void ParseTag(String sTag)
        {
            Util.Debug.Assert(sTag!=null);
            if (sTag!=null)
            {
                int index = 0;
                index = sTag.LastIndexOf(NamespaceTerminators);

                // If a namespace separator existed then divid up the string,
                // otherwise simply store the string as is.
                if (index >= 0)
                {
                    _Namespace = sTag.Substring(0, index + 1);
                    _HasNamespace = true;
                    _TagWithout = sTag.Substring(index + 1);
                }
                else
                {
                    _Namespace = "";
                    _HasNamespace = false;
                    _TagWithout = sTag;
                }
                _TagSet = true;
            }          
        }

        public String TagWithout
        {
            get 
            {
                return _TagSet ? _TagWithout : null;
            }
        }

        public String Namespace
        {
            get 
            {
                return (_TagSet && _HasNamespace) ? _Namespace : null;
            }
        }

        public bool HasNamespace
        {
            get 
            {
                return _HasNamespace;
            }
        }

        // Copied from DAVFS.  They only use the first 16 characters.
        // This does not mean the string can only be 16 characters, it means
        // that the string is made up of any number of the first 16 characters
        // of the alphabet.
        public String GetNewPrefix()
        {
            StringBuilder ans = new StringBuilder();
            int cp = _CurrentPrefix;

            do
            {
                // Figure out the next character to add.
                char ch = (char) ('a' +  ( cp & 0xF ));
                ans.Append(ch);
                
                cp >>=4;
            } while (cp != 0);

            // Prepare for the next add
            _CurrentPrefix++;
            return ans.ToString();
        }

    } // End of Class
} // End of Namespace