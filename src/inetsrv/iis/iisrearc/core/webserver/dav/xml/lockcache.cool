/*++

   Copyright    (c)    1999    Microsoft Corporation

   Module  Name :

        LockCache.cool

   Abstract:

        This module implements caching of specific information that lock
        is interested in.
 
   Author:

        Emily Kruglick    ( EmilyK )     6-Dec-1999

   Environment:

        COM+ - User Mode Managed Run Time
       
   Project:

        Web Server

   Classes:

        LockCache 
            internal LockCache() 
            internal void SetExclusive()
            internal void SetShared()
            internal void SetWrite()
            internal void AddPartOfOwner()
            internal String Owner
            internal LockType type
            internal LockScope scope
            internal bool AllSet

--*/


using System.IO;
using System.Collections;
using System.ASP;
using System.XML;
using System.IIS.DAV.DAVUtil;

namespace System.IIS.DAV.XML
{
    internal class LockCache : DataCache
    {
    ////////////////////////////////////////////////////////////////////
    // Private Methods for internally saving information from the parse.
    ////////////////////////////////////////////////////////////////////
        private StringBuilder _owner;
        private LockType  _type;
        private LockScope _scope;

        private bool _typeset;
        private bool _scopeset;

        internal LockCache() 
           : base(new LockHandler())
        {
            _type = 0;
            _scope = 0;
            _typeset = false;
            _scopeset = false;
            _owner = null;

        }

    ////////////////////////////////////////////////////////////////////
    // Internal methods used by the Parser to save information.
    ////////////////////////////////////////////////////////////////////
        internal void SetExclusive()
        {
            _scope = LockScope.Exclusive;
            _scopeset = true;
        }

        internal void SetShared()
        {
            _scope = LockScope.Shared;
            _scopeset = true;
        }

        internal void SetWrite()
        {
            _type = LockType.Write;
            _typeset = true;
        }

        internal void AddPartOfOwner(String owner)
        {
            if (_owner == null)
                _owner = new StringBuilder();

            _owner = _owner.Append(owner);
        }

        internal void ClearOwner()
        {
            if (_owner != null)
                _owner = null;
        }


    ////////////////////////////////////////////////////////////////////
    // Internal methods used by retrieve stored information
    ////////////////////////////////////////////////////////////////////
        internal String owner
        {
            get
            {
                return (_owner != null) ? _owner.ToString() : null;
            }
        }

        internal LockType type
        {
            get
            {
                return _type;
            }
        }

        internal LockScope scope
        {
            get
            {
                return _scope;
            }
        }

        internal bool AllSet
        {
            get
            {
                if (_typeset && _scopeset && (_owner != null))
                    return true;
                else
                    return false;
            }
        }

    }



}
