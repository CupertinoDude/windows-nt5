/*++

   Copyright    (c)    1999    Microsoft Corporation

   Module  Name :

        Emitter.cool

   Abstract:

        This module implements the Emitter class which is responsible for:
        
        1)  Starting a response.
        2)  Making sure we only have one root in a document
        3)  Providing back Nodes to use to write to the resonse through.

   Author:

        Emily Kruglick    ( EmilyK )     Oct-6-1999

   Environment:

        COM+ - User Mode Managed Run Time
       
   Project:

        Web Server

   Classes:

        Emitter 
            public Emitter(HttpResponse response, ArrayList alNamespacesToLoad)
            public Node GetChildNode(String sTag)
            public Node FinishChildNode()

--*/

using System.IO;
using System.XML;
using System.Collections;
using System.ASP;
using System.IIS.DAV.DAVUtil;

namespace System.IIS.DAV.XML
{
    internal class Emitter
    {
        private HttpResponse _response;
        private Node _curNode; 
        private bool        _fDocStarted;
        private Hashtable   _htNamespaces;
        private ArrayList   _alNamespacesToLoad;
        private NamespaceController _nsController;

        public Emitter(HttpResponse response, ArrayList alNamespacesToLoad)
        {
            Util.Debug.Assert(response!=null);
            Util.Debug.Assert(alNamespacesToLoad!=null);

            _response = response;
            _fDocStarted = false;
            _htNamespaces = new Hashtable();
            _response.Write(ReservedWords.rwHeader);
            _alNamespacesToLoad = alNamespacesToLoad;
            _nsController = new NamespaceController();
        }

        public Node GetChildNode(String sTag)
        {
            Util.Debug.Assert(sTag!=null);
            if (sTag!=null)
            {
                Node tempnode;
            
                // Either there is a current node or we have not stared the document.
                Util.Debug.Assert((_curNode!=null) || (_fDocStarted==false));
                bool fWriteNamespaces = !_fDocStarted;

                // Set up the new node.
                tempnode = new Node(_response, _htNamespaces, _nsController);
                
                // If we are working on an existing tree plug in the new node.
                if (_curNode!=null)
                    _curNode.AdoptChild(tempnode);  
                else
                    _fDocStarted = true;  

                // Now write the tag for the new node out.
                tempnode.SetTag(sTag);

                // If we need to we will also write any namespaces out we know about in advance.
                if (fWriteNamespaces && _alNamespacesToLoad != null)
                {
                    for (int i = 0; i < _alNamespacesToLoad.Count; i++)
                    {
                        tempnode.SetNamespace((String)_alNamespacesToLoad[i]);
                    }
                }

                // don't need to hold on to this anymore the namespaces are loaded.
                _alNamespacesToLoad = null;
                _curNode = tempnode;
                return _curNode;
            }
            else
            {
                // error case.
                return null;
            }
        }

        public Node FinishChildNode()
        {
            if (_curNode!=null)   
                _curNode = _curNode.CompleteNode();

            return _curNode;
        }      


    } // End of Class
} // End of Namespace