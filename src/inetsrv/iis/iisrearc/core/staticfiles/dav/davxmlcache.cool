/*++

   Copyright    (c)    1999    Microsoft Corporation

   Module  Name :

        DAVXMLPropFindCache.cool

   Abstract:

        This module implements the XML Cache for holding information parsed from a XML request
 
   Author:

        Emily Kruglick    ( EmilyK )     29-Sep-1999

   Environment:

        COM+ - User Mode Managed Run Time
       
   Project:

        Web Server

--*/


using System.IO;
using System.Collections;
using System.ASP;
using System.XML;

namespace System.ASP.DAV
{
    internal class DAVXMLCache
    {
    ////////////////////////////////////////////////////////////////////
    // Private Methods for internally saving information from the parse.
    ////////////////////////////////////////////////////////////////////
        private bool _fStillParsing;

        // BUGBUG:  by having the parser hanging around will we keep it in
        // memory even when we don't need to?  will it hold the subhandler that
        // holds this cache so nothing ever leaves memory?
        private XmlParser _parser;

        private ArrayList _alNamespaces;

    ////////////////////////////////////////////////////////////////////
    // Public methods used by the Parser to get the information to cache.
    ////////////////////////////////////////////////////////////////////
        internal DAVXMLCache(DAVXMLSubHandler subhandler)
        {
            _parser  = new XmlParser();
            DAVParseHandler ph = new DAVParseHandler(this, subhandler);

            _parser.SetHandler(ph);
            _fStillParsing = true;
            _alNamespaces = new ArrayList();
        }

        // BUGBUG:  will eventually not be void when we do async.
        // BUGBUG:  need to free the parser somehow so we don't hold it and the handlers in memory
        //          when we just need the cache.
        internal int XMLParse(HttpRequest request)
        {
            StreamReader    reader  = new StreamReader(request.InputStream);
            _parser.SetInput(reader);

            //BUGBUG (ASYNC):  We should go to sleep while this runs.  
            // Then wake up when done and continue to work.
            
            try
            {
                _parser.Run();
            }
            catch (Exception)
            {
                // Mask all exceptions caught here to parsing errors or bad request.
                return HttpStatus.BadRequest;
            }

            return HttpStatus.Ok;
        }
        
        internal void AddNamespace(String ns)
        {
            _alNamespaces.Add(ns);
        }

        internal void Done()
        {
            _fStillParsing = false;    
        }


    ////////////////////////////////////////////////////////////////////
    // Public methods used by the request process to retrieve cached 
    // information from XMLParse.
    ////////////////////////////////////////////////////////////////////
        internal ArrayList GetNamespaces()
        {
            return _alNamespaces;
        }

        internal bool fStillParsing
        {
            get
            {
                return _fStillParsing;
            }
        }

    }



}
