/*++

   Copyright    (c)    1999    Microsoft Corporation

   Module  Name :

        DAVXMLPropFindCache.cool

   Abstract:

        This module implements the XML Cache for holding information parsed from a propfind XML element.
 
   Author:

        Emily Kruglick    ( EmilyK )     29-Sep-1999

   Environment:

        COM+ - User Mode Managed Run Time
       
   Project:

        Web Server

--*/


using System.IO;
using System.Collections;
using System.ASP;
using System.XML;

namespace System.ASP.DAV
{
    internal class DAVXMLPropFindCache : DAVXMLCache
    {
    ////////////////////////////////////////////////////////////////////
    // Private Methods for internally saving information from the parse.
    ////////////////////////////////////////////////////////////////////
        private int _fPropFindType;
        private Hashtable _PropertiesRequested;

        internal DAVXMLPropFindCache() 
           : base(new DAVXMLPropFindSubHandler())
        {
            _fPropFindType = DAVPropFindTypes.NotSet;
            _PropertiesRequested = null;
        }

    ////////////////////////////////////////////////////////////////////
    // Public methods used by the Parser to get the information to cache.
    ////////////////////////////////////////////////////////////////////
        internal void WantAllProps()
        {
            if (_fPropFindType != DAVPropFindTypes.NotSet)
            {
                throw new HttpException(HttpStatus.BadRequest, "Can only have one AllProp and nothing else in xml");
            }
            else
            {
               _fPropFindType = DAVPropFindTypes.AllProps;
            }
        }

        internal void WantPropNames()
        {
            if (_fPropFindType != DAVPropFindTypes.NotSet)
            {
                                WriteUtil.console("Here", "6", 5);

                throw new HttpException(HttpStatus.BadRequest, "Can only have one PropNames and nothing else in xml");
            }
            else
            {
                _fPropFindType = DAVPropFindTypes.PropNames;
            }
        }


        internal void AddProperty(String sPropName)
        {
            if (_fPropFindType == DAVPropFindTypes.NotSet)
            {
                _fPropFindType = DAVPropFindTypes.NamedProps;
                _PropertiesRequested = new Hashtable();
            }

            if (_fPropFindType != DAVPropFindTypes.NamedProps)
            {
                                    WriteUtil.console("Here", "7", 5);

                throw new HttpException(HttpStatus.BadRequest, "Can not have PropName and Prop in same propfind");
            }
            else
            {
                _PropertiesRequested.Add(sPropName, null);
            }
        }


    ////////////////////////////////////////////////////////////////////
    // Public methods used by the request process to retrieve cached 
    // information from XMLParse.
    ////////////////////////////////////////////////////////////////////
        internal int PropFindRetrievalSetting
        {
            get
            {
                if (_fPropFindType == DAVPropFindTypes.NotSet)
                    return DAVPropFindTypes.AllProps;
                else
                    return _fPropFindType;
            }
        }

        internal Hashtable PropertiesRequested
        {
            get
            {
                return _PropertiesRequested;
            }
        }

        internal int NumberOfPropertiesRequested
        {
            get
            {
                if (_PropertiesRequested != null)
                    return _PropertiesRequested.Count;
                else
                    return 0;
            }
        }
    }



}
