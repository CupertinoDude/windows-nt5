/*++

   Copyright    (c)    1999    Microsoft Corporation

   Module  Name :

        DAVXMLNode.cool

   Abstract:

        This module implements the DAVXMLElementNode class which is responsible
        for maintaining the life of an Element.  In other words it provides a 
        way of knowing where in a node you are and what still needs to be done 
        to it (for instance closing the element).
 
   Author:

        Emily Kruglick    ( EmilyK )     Oct-6-1999

   Environment:

        COM+ - User Mode Managed Run Time
       
   Project:

        Web Server

--*/


using System.IO;
using System.XML;
using System.Collections;

namespace System.ASP.DAV
{
    internal class DAVXMLNode
    {
        // CONSTANTS
        //
        const int EMPTY           = 0;
        const int TAG_OPEN        = 1;
        const int TAG_CLOSED      = 2;

        private bool _format;
        public int  _indent              = 0;
        private const int  indentspaces   = 8;
        
        private void Format()
        {
            if (_format)
            {
                StringBuilder st = new StringBuilder();

                st.Append("\r\n");
                st.Append(' ', _indent);
                _response.Write(st.ToString());
            }
        }

        private void FormatEnd()
        {
            if (_format)
            {
                _response.Write("\r\n");

                StringBuilder st = new StringBuilder();

                st.Append(' ', _indent);
                _response.Write(st.ToString());

            }
        }


        // BUGBUG:  May eventually need to change this out to some sort of buffering before
        //          we send the response to make it chunked.  But for now we will write directly
        //          to the response buffer.
        private HttpResponse _response;
        private String      _sTag;
        private int         _iNodeState;
        private DAVXMLNode  _parentNode;
        private Hashtable   _htNamespaces;
        private ArrayList   _alNamespaces;
        private DAVXMLNamespace _nsController;

        // Used to get the root node
	    public DAVXMLNode(HttpResponse response, Hashtable htNamespaces, DAVXMLNamespace nsController) 
        {
            _format = true;
            _iNodeState = EMPTY;
            _response   = response;
            _htNamespaces = htNamespaces;
            _alNamespaces = new ArrayList();
            _nsController = nsController;
	    }

        ~DAVXMLNode()
        {
            Util.Debug.Assert (_iNodeState == EMPTY);
        }

        public void SetTag(String sTag)
        {
            // BUGBUG:  Need to validate the tag is valid (not empty).
            WriteUtil.console("SetTag sTag", sTag, 5);
            if (_iNodeState != EMPTY)
                CompleteNode();

            Format();
            
            _response.Write("<");

            // Side affect of this function is the setting of the _sTag property.
            String sFullTag = ExpressNamespace(sTag);

            // BUGBUG:  Assuming we do not escape the following:
            //   prefix's (we create them and they do not have special characters
            //   tag's    (special characters not allowed ??)
            //   Attribute Names  (special characters not allowed ??)
            //   Attribute Values (special characters not allowed ??)
            //   Namespaces (special characters not allowed ??)
            // BUGBUG:  We need to do all the translation to UTF8 before writting.
            _response.Write(sFullTag);
            _iNodeState = TAG_OPEN;
        }

        public void SetAttribute(String sAttName, String sValue)
        {
            Util.Debug.Assert (_iNodeState == TAG_OPEN);

            String sAttNameTmp = ExpressNamespaceForAttribute(sAttName, sValue);

            _response.Write(" " + sAttNameTmp);
        }

        public void SetNamespace(String sNamespace)
        {
            Util.Debug.Assert (_iNodeState == TAG_OPEN);
            
            if (!_htNamespaces.ContainsKey(sNamespace))
            {
                _response.Write(" xmlns:");

                // Need to get a new prefix to use for the namespace.
                String sPrefix = _nsController.GetNewPrefix();
                _htNamespaces.Add(sNamespace, sPrefix);
                _alNamespaces.Add(sNamespace);

                // BUGBUG:  I don't believe that we need to escape namespaces.
                _response.Write(sPrefix + "=\"" + sNamespace + "\"");
            }
        }

        public void SetValue(String sValue)
        {
            // If the value is null then don't write anything.
            if ( sValue != null )
            {
                WriteUtil.console("SetVal _iNodeState", _iNodeState.ToString(), 0);
                WriteUtil.console("Setval sValue", sValue, 5);
                if (_iNodeState == TAG_OPEN)
                {
                    _response.Write(">");
                    _iNodeState = TAG_CLOSED;
                }

                _indent = _indent + indentspaces;
                Format();
                _indent = _indent - indentspaces;

                // BUGBUG:  Character concerns??
                String tmp = EscapeCharactersValue(sValue);
                _response.Write(tmp);
            }
        }
        
        public void AdoptChild(DAVXMLNode child)
        {
            Util.Debug.Assert (child.NodeState == EMPTY);

            WriteUtil.console("Adopt _iNodeState", _iNodeState.ToString(), 0);
            if (_iNodeState == TAG_OPEN)
            {
                _response.Write(">");
                _iNodeState = TAG_CLOSED;
            }
    
            child._indent = _indent + indentspaces;
            child.ParentNode = this;
        }
        
        public DAVXMLNode CompleteNode()
        {
            Util.Debug.Assert(_sTag != null);
            WriteUtil.console("_iNodeState", _iNodeState.ToString(), 0);
            if (_iNodeState == TAG_CLOSED)
			{
                FormatEnd();
                
                // BUGBUG: I don't think Tags can have escaped characters.
                _response.Write("</" + _sTag + ">");
			}
            else
            {
                _response.Write("/>");
            }

            WriteUtil.console("closed", _sTag, 0);
            _iNodeState = EMPTY;

            // Clean out anything we added to the hashtable because it is no longer valid.
            for (int i = _alNamespaces.Count - 1; i >= 0; i--)
            {
                _htNamespaces.Remove(_alNamespaces[i]);
                _alNamespaces.Remove(i);
            }

            return _parentNode;
        }

        public HttpResponse Response
        {
            get
            {
                return _response;
            }
        }

        public int NodeState
        {
            get
            {
                return _iNodeState;
            }
        }

        public DAVXMLNode ParentNode
        {
            set
            {
                _parentNode = value;
            }
        }

        private String ExpressNamespace(String sTag)
        {
            // Parses Namespace from Tag
            // Looks up Namespace if finds it adds the letter representing it to the tag
            // If namespace is not found then it creates a new one and addes the new one to the end of the tag.

            _nsController.ParseTag(sTag);
            String sPrefix = "";
            String sPostfix = "";

            if (_nsController.HasNamespace)
            {
                String sNamespace = _nsController.Namespace;
                
                if (_htNamespaces.ContainsKey(sNamespace))
                {
                    sPrefix = (String) _htNamespaces[sNamespace];
                }
                else
                {
                    sPrefix = _nsController.GetNewPrefix();
                    _htNamespaces.Add(sNamespace, sPrefix);
                    _alNamespaces.Add(sNamespace);
                    // BUGBUG:  Need to make sure that overwritting an outer scope prefix does not remove it forever.

                    sPostfix = " xmlns:" + sPrefix + "=\"" + sNamespace + "\"";
                }
                sPrefix = sPrefix + ":";
            }

            _sTag = sPrefix + _nsController.TagWithout;
            return sPrefix + _nsController.TagWithout + sPostfix;

        }

        private String ExpressNamespaceForAttribute (String sAttributeName, String sAttributeValue)
        {
            // Parses Namespace from Tag
            // Looks up Namespace if finds it adds the letter representing it to the tag
            // If namespace is not found then it creates a new one and addes the new one to the end of the tag.

            _nsController.ParseTag(sAttributeName);
            String sPrefix = "";
            String sPostfix = "";

            if (_nsController.HasNamespace)
            {
                String sNamespace = _nsController.Namespace;
                
                if (_htNamespaces.ContainsKey(sNamespace))
                {
                    sPrefix = (String) _htNamespaces[sNamespace];
                }
                else
                {
                    sPrefix = _nsController.GetNewPrefix();
                    _htNamespaces.Add(sNamespace, sPrefix);
                    _alNamespaces.Add(sNamespace);
                    // BUGBUG:  Need to make sure that overwritting an outer scope prefix does not remove it forever.

                    sPostfix = " xmlns:" + sPrefix + "=\"" + sNamespace + "\"";
                }
                sPrefix = sPrefix + ":";
            }

            return sPrefix + _nsController.TagWithout + "=\"" + EscapeCharactersAttribute(sAttributeValue) + "\"" + sPostfix;
        }

        private String EscapeCharactersValue(String str)
        {
            String tmp = str;

		//		&	-- escaped as &amp;
		//		<	-- excaped as &lt;
		//		>	-- excaped as &gt;

            WriteUtil.console("ES", str, 5);
            int iIndex = tmp.IndexOf('&');
            while (iIndex != -1)
            {
                tmp = tmp.Insert(iIndex + 1, "amp;");
                iIndex = tmp.IndexOf('&', iIndex + 1);
            }

            iIndex = tmp.IndexOf('<');
            while (iIndex != -1)
            {
                tmp = tmp.Remove(iIndex, 1);
                tmp = tmp.Insert(iIndex, "&lt;");
                iIndex = tmp.IndexOf('<', iIndex + 1);
            }

            iIndex = tmp.IndexOf('>');
            while (iIndex != -1)
            {
                tmp = tmp.Remove(iIndex, 1);
                tmp = tmp.Insert(iIndex, "&gt;");
                iIndex = tmp.IndexOf('>', iIndex + 1);
            }

            WriteUtil.console("ES", tmp, 5);

            return tmp;
        }

        private String EscapeCharactersAttribute(String str)
        {
            String tmp = str;

		//		&	-- escaped as &amp;
		//		"	-- escaped as &quot;

            WriteUtil.console("ES", str, 5);
            int iIndex = tmp.IndexOf('&');
            while (iIndex != -1)
            {
                tmp = tmp.Insert(iIndex + 1, "amp;");
                iIndex = tmp.IndexOf('&', iIndex + 1);
            }

            iIndex = tmp.IndexOf('"');
            while (iIndex != -1)
            {
                tmp = tmp.Remove(iIndex, 1);
                tmp = tmp.Insert(iIndex, "&quot;");
                iIndex = tmp.IndexOf('<', iIndex + 1);
            }

            WriteUtil.console("ES", tmp, 5);

            return tmp;
        }
        
    } // End of Class
} // End of Namespace