/*++

Copyright (c) 1999-1999 Microsoft Corporation

Module Name:

	msnd.cool

Abstract:

	SEND - managed version of SEND

Author:

    Mauro Ottaviani (mauroot)       21-Aug-1999

Revision History:

--*/

using System;
using System.Globalization;
using System.Reflection;
using UlApiNS;

public class msnd
{
	public const int ERROR_SUCCESS             = 0;
	public const int ERROR_INVALID_PARAMETER   = 87;
	public const int ERROR_IO_INCOMPLETE       = 996;
	public const int ERROR_IO_PENDING          = 997;
	public const int ERROR_ALREADY_INITIALIZED = 1247;
	public const int WAIT_OBJECT_0 = 0;
	public const int INVALID_HANDLE_VALUE = -1;
	public const int INFINITE = -1;

	public static void Main( String[] args )
	{
		int result, dwWhich, dwTimeout, ulCount;
		byte ulSize;
		OVERLAPPED Overlapped = new OVERLAPPED();
		string myString;
		byte[] Buffer;
		Encoding myEncoder = Encoding.GetASCII();
		WaitHandle Event;

		if ( args.Count != 2 )
		{
			Console.Write( "Microsoft (R) Send (ul) Version 1.00 (NT)\nCopyright (C) Microsoft Corp 1999. All rights reserved.\nusage: snd uri timeout" );
			return;
		}

		String Uri = args[0];

		dwTimeout = int.Parse( args[1] );
		if ( dwTimeout == 0 ) dwTimeout = INFINITE;

		Event =	new WaitHandle();
		Overlapped.hEvent = Event.GetHandle(); // Kernel32.CreateEvent( 0, 0, 0, 0 );

		//
		// UlInitialize
		//
		result = UlApi.UlInitialize( 0 );
		
		Console.Write( "(SND) UlInitialize() returns {0}\n", result );
		
		if ( result != ERROR_SUCCESS ) goto myexit;

		while ( true )
		{
			dwWhich = WAIT_OBJECT_0;

			string Size = Console.ReadLine();
			ulSize = byte.Parse( Size );
			if ( ulSize == 0 ) goto myexit;

			myString = String.Empty;
			for ( ulCount = byte.Parse( "0" ); ulCount<ulSize; ulCount++ ) myString += Convert.ToString( ulCount%10 );
			Buffer = myEncoder.GetBytes( myString );

			Console.Write( "(SND) Sending message. ulSize:{0} \"{1}\":{2}\n", ulSize, myString, Buffer.Length );

			result =
			UlApi.UlSendMessage(
				0, // don't need a hUriHandle
				0, // don't need a pSourceSuffix
				Uri,
				Buffer,
				ulSize,
				ref ulCount,
				Overlapped );

			Console.Write( "(SND) UlSendMessage() returns:{1} ulSize:{1} ulCount:{2}\n", result, ulSize, ulCount );

			if ( result == ERROR_IO_PENDING )
			{
				//
				// WaitForSingleObject
				//

				Overlapped.WaitOnEvent( dwTimeout );
				Console.Write( "(SND) WaitForSingleObject() returns {0}\n", dwWhich );
			}
			else if ( result != ERROR_SUCCESS )
			{
				Console.Write( "(SND) ERROR exiting...\n" );
				goto myexit;
			}

			if ( dwWhich == WAIT_OBJECT_0 )
			{
				Console.Write( "(SND) Message sent \"{0}\"\n", myEncoder.GetString( Buffer, 0, ulCount ) );
			}
		}

myexit:

		Overlapped.GetRidOf();

		//
		// UlTerminate
		//

		UlApi.UlTerminate();
		Console.Write( "(SND) UlTerminate()\n" );

		return;

	}
	
} // public class snd


