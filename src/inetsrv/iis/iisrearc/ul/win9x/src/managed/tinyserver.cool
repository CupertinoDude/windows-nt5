/*++

Copyright (c) 1999-1999 Microsoft Corporation

Module Name:

    tinyserver.cool

Abstract:

    Test for UL server-side functionality.

Author:

    Mauro Ottaviani (mauroot)       05-Oct-1999

Revision History:

--*/

using System;
using System.Globalization;

using UlApi;

class tinyserver
{
	public static string Substitute( string source, string from, string to )
	{
		int start = 0, index, l = from.Length, m = to.Length;
		while ( ( index = source.IndexOf( from, start ) ) > 0 )
		{
			source = source.Substring( 0, index ) + to + source.Substring( index + l );
			start = index + m;
		}
		return source;
	}

	public static void Main( string[] args )
	{
		if ( args.Count != 1 )
		{
			Console.Write( "Microsoft (R) TinyServer Version 1.00 (NT)\nCopyright (C) Microsoft Corp 1999. All rights reserved.\nusage: TinyServer Url\nexample: TinyServer http://mauroot98:80/\n" );
			return;
		}

		int counter = 0;

		Encoding myEncoder = Encoding.GetASCII();
		string Url = args[0];
		string Server =	"TinyServer("+args[0]+")";


		Console.WriteLine( "Creating Config Group" );
		
		ConfigGroup myConfigGroup = new ConfigGroup();
				
		Console.WriteLine( "Adding Url to Config Group: " + Url );

		try
		{
			myConfigGroup.AddUrl( Url );
		}
		catch ( Exception )
		{
			Console.WriteLine( "myConfigGroup.AddUrl( " + Url + " ) failed! Exiting..." );
			myConfigGroup.Delete();
			return;
		}

		for ( int i = 0; i < 1000; i++ )
		{
			HTTPProtocolRequest Request;
			HTTPProtocolResponse Response;;
			
			Console.WriteLine( "GetRequestSync()..." );

			try
			{
				Request = myConfigGroup.GetRequestSync();
			}
			catch ( Exception )
			{
				Console.WriteLine( "myConfigGroup.GetRequestSync() failed! Exiting..." );
				Console.WriteLine( "Removing Url from Config Group" );
				myConfigGroup.RemoveUrl( Url );
				myConfigGroup.Delete();
				return;
			}

			Console.WriteLine( "Got a Request:" );
			Console.WriteLine( "Method: {0}", Request.Method );
			Console.WriteLine( "Path: {0}", Request.Path );
			Console.WriteLine( "Host: {0}", Request.Host );
			Console.WriteLine( "Version: {0}", Request.Version );
			Console.WriteLine( "Accept: {0}", Request.Accept );
			Console.WriteLine( "ContentLength: {0}", Request.ContentLength );
			if ( Request.ContentLength != 0 ) Console.WriteLine( "Body:--------------------\n" + Request.Body + "\n-------------------------" );

			Console.WriteLine( "Formatting Response" );

			try
			{
				Response = new
				HTTPProtocolResponse(
					501,
					"Not Implemented",
					Server,
					"<HTML><HEAD><TITLE>Method Not Allowed by " + Server + "!</TITLE></HEAD><BODY>It's <B>"
					+ DateTime.Now.ToString()
					+ "</B> for " + Server + "<BR>Sorry <B>" + Request.Method + "</B> Method Not Allowed by " + Server + "<BR>You are bothering me with the following Request:<P><CODE><TABLE WIDTH=100% BORDER=1><TR><TD>"
					+ Substitute( myEncoder.GetString( Request.Serialize(), 0, Request.Serialize().Length ), "\r\n", "<BR>" )
					+ "</TD></TR></TABLE></CODE><P><HR><B>This Request served by " + Server + ". Total served: " + Convert.ToString( ++counter ) + "</B></BODY></HTML>" );

				Response.AddHeader( "Mauro-Personal-Header", "Ciao-Ciao", true );
				Response.AddHeader( "Mauro-Personal-Header", "123, +123.7%, Ciao-Ciao", true );
				Response.AddHeader( "YES", "NO", true );
				Response.AddHeader( "Pragma", "YES/NO", true );
				Response.AddHeader( "NO", "YES", true );

				if ( Request.Method.Equals( "GET" ) )
				{
					Response.StatusCode = 200;
					Response.Reason = "Ok";
					Response.Server = Server;
					Response.Body = "<HTML><HEAD><TITLE>" + Server + "</TITLE></HEAD><BODY>It's <B>" + DateTime.Now.ToString()
						+ "</B> for " + Server + "<BR>Why are you bothering me with the following Request?<P><CODE><TABLE WIDTH=100% BORDER=1><TR><TD>"
						+ Substitute( myEncoder.GetString( Request.Serialize(), 0, Request.Serialize().Length ), "\r\n", "<BR>" )
						+ "</TD></TR></TABLE></CODE><P><HR><B>This Request served by " + Server + ". Total served: " + Convert.ToString( ++counter ) + "</B></BODY></HTML>";
				}
			}
			catch ( Exception )
			{
				Console.WriteLine( "Response = new HTTPProtocolResponse(..) failed! Exiting..." );
				Console.WriteLine( "Removing Url from Config Group" );
				myConfigGroup.RemoveUrl( Url );
				myConfigGroup.Delete();
				return;
			}

			Console.WriteLine( "Response Formatted:---------------\n" + myEncoder.GetString( Response.Serialize(), 0, Response.Serialize().Length ) + "\n--------------------------------" );

			try
			{
				Request.SendResponseSync( Response );
			}
			catch ( Exception )
			{
				Console.WriteLine( "Request.SendResponseSync() failed! Exiting..." );
				Console.WriteLine( "Removing Url from Config Group" );
				myConfigGroup.RemoveUrl( Url );
				myConfigGroup.Delete();
				return;
			}

			Console.WriteLine( "Response Sent!" );

		}

		Console.WriteLine( "Removing Url from Config Group" );
		myConfigGroup.RemoveUrl( Url );

		Console.WriteLine( "Deleting Config Group" );
		myConfigGroup.Delete();

		Console.WriteLine( "Exiting. Goodbye!" );
		return;

	} // Main

} // class tinyserver


/*
class tinyserver
{
	public static string Substitute( string source, string from, string to )
	{
		int start = 0, index, l = from.Length, m = to.Length;
		while ( ( index = source.IndexOf( from, start ) ) > 0 )
		{
			source = source.Substring( 0, index ) + to + source.Substring( index + l );
			start = index + m;
		}
		return source;
	}

	public static void Main( string[] args )
	{
		if ( args.Count != 1 )
		{
			Console.Write( "Microsoft (R) TinyServer Version 1.00 (NT)\nCopyright (C) Microsoft Corp 1999. All rights reserved.\nusage: TinyServer Url\nexample: TinyServer http://mauroot98:80/\n" );
			return;
		}

		int counter = 0;

		Encoding myEncoder = Encoding.GetASCII();
		string Url = args[0];
		string Server =	"TinyServer("+args[0]+")";


		Console.WriteLine( "Creating Config Group" );
		
		ConfigGroup myConfigGroup = new ConfigGroup();
				
		Console.WriteLine( "Adding Url to Config Group: " + Url );

		for ( int i = 0; i<1000; i++ )
		{
			HTTPProtocolRequest Request;
			HTTPProtocolResponse Response;;
			
			Console.WriteLine( "AddUrl()..." );

			myConfigGroup.AddUrl( Url );

			Console.WriteLine( "GetRequestSync()..." );

			Request = myConfigGroup.GetRequestSync();

			// Console.WriteLine( "Got a Request:\n{0}\n", myEncoder.GetString( Request.Serialize(), 0, Request.Serialize().Length ) );
			Console.WriteLine( "Got a Request:" );
			Console.WriteLine( "Method: {0}", Request.Method );
			Console.WriteLine( "Path: {0}", Request.Path );
			Console.WriteLine( "Version: {0}", Request.Version );
			Console.WriteLine( "Host: {0}", Request.Host );
			Console.WriteLine( "Accept: {0}", Request.Accept );
			Console.WriteLine( "ContentLength: {0}", Request.ContentLength );
			if ( Request.ContentLength != 0 ) Console.WriteLine( "Body:--------------------\n" + Request.Body + "\n-------------------------" );

			Console.WriteLine( "Formatting Response" );

			Response = new
			HTTPProtocolResponse(
				501,
				"Not Implemented",
				Server,
				"<HTML><HEAD><TITLE>Method Not Allowed by " + Server + "!</TITLE></HEAD><BODY>It's <B>"
				+ DateTime.Now.ToString()
				+ "</B> for " + Server + "<BR>Sorry <B>" + Request.Method + "</B> Method Not Allowed by " + Server + "<BR>You are bothering me with the following Request:<P><CODE><TABLE WIDTH=100% BORDER=1><TR><TD>"
				+ Substitute( myEncoder.GetString( Request.Serialize(), 0, Request.Serialize().Length ), "\r\n", "<BR>" )
				+ "</TD></TR></TABLE></CODE><P><HR><B>This Request served by " + Server + ". Total served: " + Convert.ToString( ++counter ) + "</B></BODY></HTML>" );

			if ( Request.Method.Equals( "GET" ) )
			{
				Response.StatusCode = 200;
				Response.Reason = "Ok";
				Response.Server = Server;
				Response.Body = "<HTML><HEAD><TITLE>" + Server + "</TITLE></HEAD><BODY>It's <B>" + DateTime.Now.ToString()
					+ "</B> for " + Server + "<BR>Why are you bothering me with the following Request?<P><CODE><TABLE WIDTH=100% BORDER=1><TR><TD>"
					+ Substitute( myEncoder.GetString( Request.Serialize(), 0, Request.Serialize().Length ), "\r\n", "<BR>" )
					+ "</TD></TR></TABLE></CODE><P><HR><B>This Request served by " + Server + ". Total served: " + Convert.ToString( ++counter ) + "</B></BODY></HTML>";
			}

			Console.WriteLine( "Response Formatted:---------------\n" + myEncoder.GetString( Response.Serialize(), 0, Response.Serialize().Length ) + "\n--------------------------------" );

			Request.SendResponseSync( Response );

			Console.WriteLine( "Response Sent!" );

			Console.WriteLine( "Removing Url from Config Group" );
			
			myConfigGroup.RemoveUrl( Url );
		}

		Console.WriteLine( "Exiting. Goodbye!" );
		return;

	} // Main

} // class tinyserver

*/
