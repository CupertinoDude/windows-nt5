/*++

Copyright (c) 1999-1999 Microsoft Corporation

Module Name:

    ulapi.cool

Abstract:

    UL user-mode managed API.

Author:

    Mauro Ottaviani (mauroot)       08-Sep-1999

Revision History:

--*/

using System;
using System.Collections;
using System.Globalization;
using System.Interop;
using System.Reflection;

namespace UlApiNS
{
	public enum CharsetEnum {
		None = 1,
		Ansi = 2,
		Unicode = 3,
		Auto = 4,
		Ole = 5
	}

	public enum ClassFormat {
		Ansi = 1,
		Unicode = 2,
		Auto = 3
	}

	public class Kernel32
	{
		[ sysimport( dll = "KERNEL32.DLL", charset = CharsetEnum.Ansi ) ]
		public static extern int CreateFileA(
			String lpFileName,			// "\\\\.\\" + VXD_NAME
			int dwDesiredAccess,		// 0
			int dwShareMode,			// 0
			int lpSecurityAttributes,	// NULL
			int dwCreationDisposition,	// 0
			int dwFlagsAndAttributes,	// FILE_FLAG_DELETE_ON_CLOSE | FILE_FLAG_OVERLAPPED
			int hTemplateFile			// NULL
		);

		[ sysimport( dll = "KERNEL32.DLL", charset = CharsetEnum.Auto ) ]
		public static extern int CloseHandle(
			int hObject
		);

	/*
		[ sysimport( dll = "KERNEL32.DLL", charset = CharsetEnum.Auto, setLastError = true ) ] 
		public static extern int CreateEvent(
			int ignored_1,
			int ignored_2,
			int ignored_3,
			int ignored_4
		);

		[ sysimport( dll = "KERNEL32.DLL", charset = CharsetEnum.Auto, setLastError = true ) ] 
		public static extern int ResetEvent
		(
			int hEvent
		);

		[ sysimport( dll = "KERNEL32.DLL", setLastError = true ) ] 
		public static extern int WaitForSingleObject(
			int hEvent,
			int Timeout
		);
	*/

		[ sysimport( dll = "KERNEL32.DLL", name = "DeviceIoControl", setLastError = true, charset = CharsetEnum.Auto ) ]
		public static extern bool DeviceIoControl_UlRegisterUri(
			int hDevice,
			int dwIoControlCode,
			IN_IOCTL_UL_REGISTER_URI InBuffer,
			int nInBufferSize,
			OUT_IOCTL_UL_REGISTER_URI OutBuffer,
			int nOutBufferSize,
			int ignored_1,
			int ignored_2
		);	

		[ sysimport( dll = "KERNEL32.DLL", name = "DeviceIoControl", setLastError = true, charset = CharsetEnum.Auto ) ]
		public static extern bool DeviceIoControl_UlUnregisterUri(
			int hDevice,
			int dwIoControlCode,
			int InBuffer,
			int nInBufferSize,
			int ignored_1,
			int ignored_2,
			int ignored_3,
			int ignored_4
		);	

		[ sysimport( dll = "KERNEL32.DLL", name = "DeviceIoControl", setLastError = true, charset = CharsetEnum.Auto ) ]
		public static extern bool DeviceIoControl_UlSendMessage(
			int hDevice,
			int dwIoControlCode,
			IN_IOCTL_UL_SEND_MESSAGE InBuffer,
			int nInBufferSize,
			int ignored_1,
			int ignored_2,
			int ignored_3,
			int ignored_4
		);	

		[ sysimport( dll = "KERNEL32.DLL", name = "DeviceIoControl", setLastError = true, charset = CharsetEnum.Auto ) ]
		public static extern bool DeviceIoControl_UlReceiveMessage(
			int hDevice,
			int dwIoControlCode,
			IN_IOCTL_UL_RECEIVE_MESSAGE InBuffer,
			int nInBufferSize,
			int ignored_1,
			int ignored_2,
			int ignored_3,
			int ignored_4
		);	
	}

	// structs.h - Begin

	[ sysstruct( format = ClassFormat.Unicode ) ]
	public class IN_IOCTL_UL_REGISTER_URI {
		public int hParentUri;
		public int ulFlags;
		public int ulUriToRegisterLength;
		public int pUriToRegister;
	};

	[ sysstruct( format = ClassFormat.Unicode ) ]
	public class OUT_IOCTL_UL_REGISTER_URI {
		public int hUriHandle;
	};

	[ sysstruct( format = ClassFormat.Unicode ) ]
	public class IN_IOCTL_UL_SEND_MESSAGE {
		public int hUriHandle;
		public int pData;
		public int ulBytesToSend;
		public int pBytesSent;
		public int pOverlapped;
		public int ulTargetUriLength;
		public int pTargetUri;
	};

	[ sysstruct( format = ClassFormat.Unicode ) ]
	public class IN_IOCTL_UL_RECEIVE_MESSAGE {
		public int hUriHandle;
		public int pData;
		public int ulBufferSize;
		public int pBytesReceived;
		public int pOverlapped;
	};

	// structs.h - End


	[ sysstruct( format = ClassFormat.Auto ) ]
	public class OVERLAPPED
	{
		public byte[] Bytes = new byte[20] {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
		
		public int Internal
		{
			get { return BitConverter.ToInt32( Bytes, 0 ); }
			set { byte[] m_temp = new byte[4]; m_temp = BitConverter.GetBytes( value ); m_temp.CopyTo( Bytes, 0 ); }
		}

		public int InternalHigh
		{
			get { return BitConverter.ToInt32( Bytes, 4 ); }
			set { byte[] m_temp = new byte[4]; m_temp = BitConverter.GetBytes( value ); m_temp.CopyTo( Bytes, 4 ); }
		}

		public int Offset
		{
			get { return BitConverter.ToInt32( Bytes, 8 ); }
			set { byte[] m_temp = new byte[4]; m_temp = BitConverter.GetBytes( value ); m_temp.CopyTo( Bytes, 8 ); }
		}

		public int OffsetHigh
		{
			get { return BitConverter.ToInt32( Bytes, 12 ); }
			set { byte[] m_temp = new byte[4]; m_temp = BitConverter.GetBytes( value ); m_temp.CopyTo( Bytes, 12 ); }
		}

		public int hEvent
		{
			get { return BitConverter.ToInt32( Bytes, 16 ); }
			set { byte[] m_temp = new byte[4]; m_temp = BitConverter.GetBytes( value ); m_temp.CopyTo( Bytes, 16 ); }
		}
	}


	public class UlApi
	{
		// #define Begin
		
		// from winbase.h
		public const int FILE_FLAG_OVERLAPPED       = 0x40000000;
		public const int FILE_FLAG_DELETE_ON_CLOSE  = 0x04000000;

		// from ioctl.h
		public const int IOCTL_UL_REGISTER_URI		= 0x20;
		public const int IOCTL_UL_SEND_MESSAGE		= 0x22;
		public const int IOCTL_UL_RECEIVE_MESSAGE	= 0x24;
		public const int IOCTL_UL_UNREGISTER_URI	= 0x26;

		// from winerr.h
		public const int ERROR_SUCCESS              = 0;
		public const int ERROR_INVALID_PARAMETER    = 87;
		public const int ERROR_IO_INCOMPLETE        = 996;
		public const int ERROR_IO_PENDING           = 997;
		public const int ERROR_ALREADY_INITIALIZED  = 1247;

		public const int INVALID_HANDLE_VALUE       = -1;
		public const int INFINITE                   = -1;
		// #define End

		static String VXD_NAME = "ul.vxd";
		static int hDevice = INVALID_HANDLE_VALUE;
		static bool bOK;


		public static int 
		UlInitialize(
			int Reserved ) // Must be 0
		{
			if ( hDevice != INVALID_HANDLE_VALUE )
			{
				return ERROR_ALREADY_INITIALIZED;
			}

			if ( Reserved != 0 )
			{
				return ERROR_INVALID_PARAMETER;
			}

			hDevice =
			Kernel32.CreateFileA(
				"\\\\.\\" + VXD_NAME,
				0,
				0,
				0,
				0,
				FILE_FLAG_DELETE_ON_CLOSE | FILE_FLAG_OVERLAPPED,
				0 );

			if ( hDevice == INVALID_HANDLE_VALUE )
			{
				return PInvoke.GetLastWin32Error();
			}

			return ERROR_SUCCESS;

		}	// UlInitialize


		public static void
		UlTerminate()
		{
			if ( hDevice != INVALID_HANDLE_VALUE )
			{
				Kernel32.CloseHandle( hDevice );
				hDevice = INVALID_HANDLE_VALUE;
			}

			return;

		}	// UlInitialize


		public static int
		UlUnregisterUri(
		    int hUriHandle )
		{
			if ( hDevice == INVALID_HANDLE_VALUE )
			{
				return ERROR_INVALID_PARAMETER;
			}

			bOK =
			Kernel32.DeviceIoControl_UlUnregisterUri(
				hDevice,
				IOCTL_UL_UNREGISTER_URI,
				hUriHandle,
				4,
				0,
				0,
				0,
				0 );

			if ( !bOK )
			{
				return PInvoke.GetLastWin32Error();
			}

			return ERROR_SUCCESS;
			
		}	// UlUnregisterUri

		// The following APIs will just pack all the information passed in the paramteres
		// into the appropriate structure in memory and call DeviceIoControl() with the
		// appropriate IOCTL code passing down the pointer to the Input structure.

		public static int
		UlRegisterUri(
		    ref int hUriHandle,
		    int hParentUri, // ignored
		    string Uri,
		    int ulFlags ) // ignored
		{
			int ulUriToRegisterLength = Uri.Length;
			IN_IOCTL_UL_REGISTER_URI InIoctl = new IN_IOCTL_UL_REGISTER_URI();
			OUT_IOCTL_UL_REGISTER_URI OutIoctl = new OUT_IOCTL_UL_REGISTER_URI();

			if ( hDevice == INVALID_HANDLE_VALUE )
			{
				return ERROR_INVALID_PARAMETER;
			}

			if ( ulUriToRegisterLength == 0 )
			{
				return ERROR_INVALID_PARAMETER;
			}

			InIoctl.hParentUri = hParentUri;
			InIoctl.ulFlags = ulFlags;
			InIoctl.ulUriToRegisterLength = ulUriToRegisterLength;

			// Allocate an Unmanaged buffer of the same size and pass in the pointer.
			
			InIoctl.pUriToRegister = PInvoke.AllocHGlobal( 2*(ulUriToRegisterLength+1) );
			Encoding myEncoder = Encoding.GetUnicode();
			PInvoke.Copy( myEncoder.GetBytes( Uri.ToLower() ), 0, InIoctl.pUriToRegister, 2*(ulUriToRegisterLength) );
			// string termination
			PInvoke.WriteInt16( InIoctl.pUriToRegister, 2*(ulUriToRegisterLength), 0 );

			bOK =
			Kernel32.DeviceIoControl_UlRegisterUri(
				hDevice,
				IOCTL_UL_REGISTER_URI,
				InIoctl,
				16,
				OutIoctl,
				4,
				0,
				0 );

			if ( !bOK )
			{
				return PInvoke.GetLastWin32Error();
			}

			hUriHandle = OutIoctl.hUriHandle;
			return ERROR_SUCCESS;
			
		}	// UlRegisterUri




		public delegate int UlSendMessageCallBack(
		    byte[] Data,
		    int BytesSent
		);
	
		public static int
		UlSendMessage(
		    string TargetUri,
		    byte[] Data,
		    int ulBytesToSend,
		    UlSendMessageCallBack CallBack )
		{
			Console.Write( "(ulapi) UlSendMessage()\n" );

			// This is the COOL Api, it works with a CallBack delegate

			// Start a new Thread that will do a Sync Send

			ThreadStart SendThreadStart = new ThreadStart( _UlSendMessageThread );
			Thread SendThread = new Thread( SendThreadStart );

			// Put parameters in a job queue and start a thread to serve that job

			SendThread.Start();

			return ERROR_SUCCESS;
			
		}	// UlSendMessage

		public static void
		_UlSendMessageThread()
		{
			Console.Write( "(ulapi) _UlSendMessageThread()\n" );

		    string TargetUri;
		    byte[] Data;
		    int ulBytesToSend;
		    /*ref*/ int BytesSent;

			if ( hDevice == INVALID_HANDLE_VALUE )
			{
				return ;// ERROR_INVALID_PARAMETER;
			}

			int ulTargetUriLength = TargetUri.Length;

			if ( ulTargetUriLength == 0 )
			{
				return ;// ERROR_INVALID_PARAMETER;
			}

			IN_IOCTL_UL_SEND_MESSAGE InIoctl = new IN_IOCTL_UL_SEND_MESSAGE();
			
			OVERLAPPED pOverlapped = new OVERLAPPED();
			WaitHandle m_Event = new WaitHandle();
			pOverlapped.hEvent = m_Event.GetHandle();

			// Allocate Unmanaged buffers and pass in the pointers.

			InIoctl.pBytesSent = PInvoke.AllocHGlobal( 4 );
			PInvoke.Copy( BitConverter.GetBytes( BytesSent ), 0, InIoctl.pBytesSent, 4 );

			InIoctl.pData = PInvoke.AllocHGlobal( ulBytesToSend );
			PInvoke.Copy( Data, 0, InIoctl.pData, ulBytesToSend );

			InIoctl.pOverlapped = PInvoke.AllocHGlobal( 20 );
			PInvoke.Copy( pOverlapped.Bytes, 0, InIoctl.pOverlapped, 20 );

			// Allocate an Unmanaged buffer of the same size and pass in the pointer.
			InIoctl.pTargetUri = PInvoke.AllocHGlobal( 2*(ulTargetUriLength+1) );
			Encoding myEncoder = Encoding.GetUnicode();
			PInvoke.Copy( myEncoder.GetBytes( TargetUri.ToLower() ), 0, InIoctl.pTargetUri, 2*(ulTargetUriLength) );
			// string termination
			PInvoke.WriteInt16( InIoctl.pTargetUri, 2*(ulTargetUriLength), 0 );

			InIoctl.hUriHandle = 0; //hUriHandle;
			InIoctl.ulBytesToSend = ulBytesToSend;
			InIoctl.ulTargetUriLength = ulTargetUriLength;

			// Issue the async I/O

			bOK =
			Kernel32.DeviceIoControl_UlSendMessage(
				hDevice,
				IOCTL_UL_SEND_MESSAGE,
				InIoctl,
				28,
				0,
				0,
				0,
				0 );

			// Wait on the event handle
			// Call the CallBack delegate

			byte[] temp = new byte[4];
			PInvoke.Copy( InIoctl.pBytesSent, temp, 0, 4 );
			BytesSent = BitConverter.ToInt32( temp, 0 );

			PInvoke.FreeHGlobal( InIoctl.pBytesSent );
			PInvoke.FreeHGlobal( InIoctl.pData );
			PInvoke.FreeHGlobal( InIoctl.pTargetUri );

			if ( !bOK )
			{
				return ;// PInvoke.GetLastWin32Error();
			}

			return ;// ERROR_SUCCESS;

		} // UlSendMessageThread

		public static int
		_UlSendMessage(
		    int hUriHandle,
		    int pSourceSuffix,
		    string TargetUri,
		    byte[] Data,
		    int ulBytesToSend,
		    ref int BytesSent,
		    OVERLAPPED pOverlapped )
		{
			Console.Write( "(ulapi) _UlSendMessage()\n" );

			return ERROR_SUCCESS;
			
		}	// _UlSendMessage








		public delegate int UlReceiveMessageCallBack(
		    byte[] Data,
		    int BytesReceived
		);

		public static int
		UlReceiveMessage(
		    int hUriHandle,
		    int ulBufferSize,
		    UlReceiveMessageCallBack CallBack )
		{
			Console.Write( "(ulapi) UlReceiveMessage()\n" );

			// This is the COOL Api, it works with a CallBack delegate

			// Start a new Thread that will do a Sync Receive

			ThreadStart ReceiveThreadStart = new ThreadStart( _UlReceiveMessageThread );
			Thread ReceiveThread = new Thread( ReceiveThreadStart );
			ReceiveThread.Start();

			return ERROR_SUCCESS;
			
		}	// UlReceiveMessage


		public static void
		_UlReceiveMessageThread()
		{
			/*
		    int hUriHandle,
		    byte[] Data,
		    int ulBufferSize,
		    ref int BytesReceived
		    */

		    OVERLAPPED pOverlapped;

			// a.1) issue the async I/O
			// a.2) wait on the event handle
			// a.3) when wait (I/O) completes call the delegate
			// a.4) exit


			// 1) Start a new Thread
			// new Thread will:
			// 2) issue the async I/O
			// 3) wait on the event handle
			// 4) when wait (I/O) completes call the delegate

			IN_IOCTL_UL_RECEIVE_MESSAGE InIoctl = new IN_IOCTL_UL_RECEIVE_MESSAGE();

			if ( hDevice == INVALID_HANDLE_VALUE )
			{
				return ;// ERROR_INVALID_PARAMETER;
			}

			// Allocate Unmanaged buffers and pass in the pointers.

			InIoctl.pBytesReceived = PInvoke.AllocHGlobal( 4 );
			// PInvoke.Copy( BitConverter.GetBytes( BytesReceived ), 0, InIoctl.pBytesReceived, 4 );

			InIoctl.pData = PInvoke.AllocHGlobal( ulBufferSize );
			// PInvoke.Copy( Data, 0, InIoctl.pData, ulBufferSize );

			InIoctl.pOverlapped = pOverlapped.pMyUnmanagedPointer;

			InIoctl.hUriHandle = hUriHandle;
			InIoctl.ulBufferSize = ulBufferSize;

			bOK =
			Kernel32.DeviceIoControl_UlReceiveMessage(
				hDevice,
				IOCTL_UL_RECEIVE_MESSAGE,
				InIoctl,
				20,
				0,
				0,
				0,
				0 );

			byte[] temp = new byte[4];
			PInvoke.Copy( InIoctl.pBytesReceived, temp, 0, 4 );
			BytesReceived = BitConverter.ToInt32( temp, 0 );

			pOverlapped.CopyToManaged();

			PInvoke.Copy( InIoctl.pData, Data, 0, ulBufferSize ); // BytesReceived should work too.

			PInvoke.FreeHGlobal( InIoctl.pBytesReceived );
			PInvoke.FreeHGlobal( InIoctl.pData ); // I can free the Unmanaged buffer 'cause the data has been copied to Managed memory

			if ( !bOK )
			{
				return PInvoke.GetLastWin32Error();
			}



			return;
			
		}	// UlReceiveMessageThread

		public static int
		_UlReceiveMessage(
		    int hUriHandle,
		    byte[] Data,
		    int ulBufferSize,
		    ref int BytesReceived,
		    OVERLAPPED pOverlapped )
		{
			Console.Write( "(ulapi) _UlReceiveMessage()\n" );
			
			return ERROR_SUCCESS;
			
		}	// UlReceiveMessage

	} // public class UlApi

} // namespace UlApi

/*
		public void AsyncSend() 
		{
			ThreadStart threadStart = new ThreadStart( AsyncSendThreadStart );
			Thread thread = new Thread( threadStart );
			thread.Start();

			CriticalSection.Enter(m_AsyncSendMutex);
			
			m_AsyncSendMutex.Wait();

			CriticalSection.Exit(m_AsyncSendMutex);
		}

		private void AsyncSendThreadStart()
		{
			// Let AsyncSend return
			
			CriticalSection.Enter( m_AsyncSendMutex );

			m_AsyncSendMutex.Notify();

			CriticalSection.Exit( m_AsyncSendMutex );
		}
*/
