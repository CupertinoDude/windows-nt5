// ulvxdobj.idl : IDL source for ulvxdobj.dll
//

// This file will be processed by the MIDL tool to
// produce the type library (ulvxdobj.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";
import "wtypes.idl";

typedef void * MYHANDLE;
typedef MYHANDLE THEHANDLE;

typedef struct _MYOVERLAPPED { 
    DWORD   Internal; 
    DWORD  InternalHigh; 
    DWORD  Offset; 
    DWORD  OffsetHigh; 
    HANDLE hEvent; 
} MYOVERLAPPED; 

typedef DWORD ULONG_PTR;

	[
		object,
		uuid(8291B2FA-AC2D-11D3-BBFF-00C04FC2D5D5),
		dual,
		helpstring("IWin32Handle Interface"),
		pointer_default(unique)
	]
	interface IWin32Handle : IDispatch
	{
		[propget, id(1), helpstring("property URIHandle")] HRESULT URIHandle([out, retval] DWORD *pVal);
		[propput, id(1), helpstring("property URIHandle")] HRESULT URIHandle([in] DWORD newVal);
	};
	[
		object,
		uuid(8291B2FD-AC2D-11D3-BBFF-00C04FC2D5D5),
		dual,
		helpstring("Ivxdcontrol Interface"),
		pointer_default(unique)
	]
	interface IOverlapped : IDispatch
	{
		[propget, id(1), helpstring("property Offset")] HRESULT Offset([out, retval] DWORD *pVal);
		[propput, id(1), helpstring("property Offset")] HRESULT Offset([in] DWORD newVal);
		[propget, id(2), helpstring("property OffsetHigh")] HRESULT OffsetHigh([out, retval] DWORD *pVal);
		[propput, id(2), helpstring("property OffsetHigh")] HRESULT OffsetHigh([in] DWORD newVal);
		[propget, id(3), helpstring("property Handle")] HRESULT Handle([out, retval] DWORD *pVal);
		[propput, id(3), helpstring("property Handle")] HRESULT Handle([in] DWORD newVal);
		[propget, id(4), helpstring("property Internal")] HRESULT Internal([out, retval] ULONG_PTR *pVal);
		[propput, id(4), helpstring("property Internal")] HRESULT Internal([in] ULONG_PTR newVal);
		[propget, id(5), helpstring("property InternalHigh")] HRESULT InternalHigh([out, retval] ULONG_PTR *pVal);
		[propput, id(5), helpstring("property InternalHigh")] HRESULT InternalHigh([in] ULONG_PTR newVal);
		[id(6), helpstring("method new_ManualResetEvent")] HRESULT new_ManualResetEvent(BOOL InitialState);
		[id(7), helpstring("method new_AutoResetEvent")] HRESULT new_AutoResetEvent(BOOL InitialState);
		[id(8), helpstring("method TerminateEvent")] HRESULT TerminateEvent();
		[id(9), helpstring("method ResetEvent")] HRESULT ResetEvent();
		[propget, id(10), helpstring("property IsReceive")] HRESULT IsReceive([out, retval] BOOL *pVal);
		[propput, id(10), helpstring("property IsReceive")] HRESULT IsReceive([in] BOOL newVal);
		[propget, id(11), helpstring("property pOverlapped")] HRESULT pOverlapped([out, retval] DWORD **pVal);
		[propput, id(11), helpstring("property pOverlapped")] HRESULT pOverlapped([in] DWORD * newVal);
	};
	[
		object,
		uuid(7E0529B7-AC3E-11D3-BC00-00C04FC2D5D5),
		dual,
		helpstring("IOverlapped Interface"),
		pointer_default(unique)
	]
	interface Ivxdcontrol : IDispatch
	{
		[id(1), helpstring("method LoadVXD")] HRESULT LoadVXD();
		[id(2), helpstring("method RegisterUri")] HRESULT RegisterUri(BSTR szUri, IWin32Handle * pParentUri, DWORD dwFlags, [out, retval] IWin32Handle ** pVal);
		[propget, id(3), helpstring("property LastError")] HRESULT LastError([out, retval] DWORD *pVal);
		[propput, id(3), helpstring("property LastError")] HRESULT LastError([in] DWORD newVal);
		[id(4), helpstring("method SendString")] HRESULT SendString(IWin32Handle * pUriHandle, IOverlapped * pOverlapped, BSTR szSourceSuffix, BSTR szTargetUri, BSTR szData);
		[id(5), helpstring("method new_Overlapped")] HRESULT new_Overlapped(DWORD dwOffset, DWORD dwOffsetHigh);
		[id(6), helpstring("method WaitForSendCompletion")] HRESULT WaitForSendCompletion(DWORD dwTimeout);
		[id(7), helpstring("method Test")] HRESULT Test([in,out, size_is(dwBufferSize) , length_is(*dwBytesRead)] BYTE * pArray, [in] DWORD dwBufferSize, [out] DWORD * dwBytesRead);
		[id(8), helpstring("method ReceiveString")] HRESULT ReceiveString(IWin32Handle * pUriHandle, IOverlapped * pOverlapped);
		[propget, id(9), helpstring("property BytesReceived")] HRESULT BytesReceived([out, retval] DWORD *pVal);
		[propput, id(9), helpstring("property BytesReceived")] HRESULT BytesReceived([in] DWORD newVal);
		[propget, id(10), helpstring("property BytesRemaining")] HRESULT BytesRemaining([out, retval] DWORD *pVal);
		[propput, id(10), helpstring("property BytesRemaining")] HRESULT BytesRemaining([in] DWORD newVal);
		[propget, id(11), helpstring("property Data")] HRESULT Data([out, retval] BSTR *pVal);
		[propput, id(11), helpstring("property Data")] HRESULT Data([in] BSTR newVal);
		[id(12), helpstring("method new_ReceiveOverlapped")] HRESULT new_ReceiveOverlapped(DWORD dwOffset, DWORD dwOffsetHigh);
		[id(13), helpstring("method WaitForReceiveCompletion")] HRESULT WaitForReceiveCompletion(DWORD dwTimeout);
		[id(14), helpstring("method unloadVXD")] HRESULT unloadVXD();
		[id(15), helpstring("method UnregisterUri")] HRESULT UnregisterUri(IWin32Handle * pUriHandle);
		[propget, id(16), helpstring("property ReadBufferSize")] HRESULT ReadBufferSize([out, retval] DWORD *pVal);
		[propput, id(16), helpstring("property ReadBufferSize")] HRESULT ReadBufferSize([in] DWORD newVal);
		[id(17), helpstring("method DebugPrint")] HRESULT DebugPrint(BSTR szString);
		[id(18), helpstring("method WaitForCompletion")] HRESULT WaitForCompletion(IOverlapped * pOverlapped, DWORD dwTimeout);
		[id(19), helpstring("method CreateAppPool")] HRESULT CreateAppPool([out,retval] IWin32Handle ** pAppPool);
		[id(20), helpstring("method CloseAppPool")] HRESULT CloseAppPool(IWin32Handle * pAppPool);
	};
	[
		object,
		uuid(89206B43-2FEA-4CDB-9653-EE274FA0782F),
		dual,
		helpstring("IBuffer Interface"),
		pointer_default(unique)
	]
	interface IBuffer : IDispatch
	{
		[id(1), helpstring("method malloc")] HRESULT malloc();
		[id(2), helpstring("method free")] HRESULT free();
		[propget, id(3), helpstring("property StringValue")] HRESULT StringValue([out, retval] BSTR *pVal);
		[propput, id(3), helpstring("property StringValue")] HRESULT StringValue([in] BSTR newVal);
		[propget, id(4), helpstring("property BufferSize")] HRESULT BufferSize([out, retval] DWORD *pVal);
		[propput, id(4), helpstring("property BufferSize")] HRESULT BufferSize([in] DWORD newVal);
	};
	[
		object,
		uuid(0AC64F0A-AD5A-46D6-A4D4-078070C0A5D7),
		dual,
		helpstring("IULApi Interface"),
		pointer_default(unique)
	]
	interface IULApi : IDispatch
	{
		[id(1), helpstring("method LoadVXD")] HRESULT LoadVXD();
		[id(2), helpstring("method RegisterUri")] HRESULT RegisterUri(BSTR szUri, IWin32Handle * pParentUri, DWORD dwFlags, [out, retval] IWin32Handle ** pVal);
		[propget, id(3), helpstring("property LastError")] HRESULT LastError([out, retval] DWORD *pVal);
		[propput, id(3), helpstring("property LastError")] HRESULT LastError([in] DWORD newVal);
		[id(4), helpstring("method SendString")] HRESULT SendString(IWin32Handle * pUriHandle, IOverlapped * pOverlapped, BSTR szSourceSuffix, BSTR szTargetUri, BSTR szData);
		[id(5), helpstring("method new_Overlapped")] HRESULT new_Overlapped(DWORD dwOffset, DWORD dwOffsetHigh);
		[id(6), helpstring("method WaitForSendCompletion")] HRESULT WaitForSendCompletion(DWORD dwTimeout);
		[id(7), helpstring("method Test")] HRESULT Test([in,out, size_is(dwBufferSize) , length_is(*dwBytesRead)] BYTE * pArray, [in] DWORD dwBufferSize, [out] DWORD * dwBytesRead);
		[id(8), helpstring("method ReceiveString")] HRESULT ReceiveString(IWin32Handle * pUriHandle, IOverlapped * pOverlapped);
		[propget, id(9), helpstring("property BytesReceived")] HRESULT BytesReceived([out, retval] DWORD *pVal);
		[propput, id(9), helpstring("property BytesReceived")] HRESULT BytesReceived([in] DWORD newVal);
		[propget, id(10), helpstring("property BytesRemaining")] HRESULT BytesRemaining([out, retval] DWORD *pVal);
		[propput, id(10), helpstring("property BytesRemaining")] HRESULT BytesRemaining([in] DWORD newVal);
		[propget, id(11), helpstring("property Data")] HRESULT Data([out, retval] BSTR *pVal);
		[propput, id(11), helpstring("property Data")] HRESULT Data([in] BSTR newVal);
		[id(12), helpstring("method new_ReceiveOverlapped")] HRESULT new_ReceiveOverlapped(DWORD dwOffset, DWORD dwOffsetHigh);
		[id(13), helpstring("method WaitForReceiveCompletion")] HRESULT WaitForReceiveCompletion(DWORD dwTimeout);
		[id(14), helpstring("method unloadVXD")] HRESULT unloadVXD();
		[id(15), helpstring("method UnregisterUri")] HRESULT UnregisterUri(IWin32Handle * pUriHandle);
		[propget, id(16), helpstring("property ReadBufferSize")] HRESULT ReadBufferSize([out, retval] DWORD *pVal);
		[propput, id(16), helpstring("property ReadBufferSize")] HRESULT ReadBufferSize([in] DWORD newVal);
		[id(17), helpstring("method DebugPrint")] HRESULT DebugPrint(BSTR szString);
		[id(18), helpstring("method WaitForCompletion")] HRESULT WaitForCompletion(IOverlapped * pOverlapped, DWORD dwTimeout);
	};

[
	uuid(8291B2EE-AC2D-11D3-BBFF-00C04FC2D5D5),
	version(1.0),
	helpstring("ulvxdobj 1.0 Type Library")
]
library ULVXDOBJLib
{
	importlib("stdole32.tlb");
	importlib("stdole2.tlb");

	[
		uuid(8291B2FB-AC2D-11D3-BBFF-00C04FC2D5D5),
		helpstring("Win32Handle Class")
	]
	coclass Win32Handle
	{
		[default] interface IWin32Handle;
	};
	[
		uuid(8291B2FE-AC2D-11D3-BBFF-00C04FC2D5D5),
		helpstring("vxdcontrol Class")
	]
	coclass vxdcontrol
	{
		[default] interface Ivxdcontrol;
	};
	[
		uuid(7E0529B8-AC3E-11D3-BC00-00C04FC2D5D5),
		helpstring("Overlapped Class")
	]
	coclass Overlapped
	{
		[default] interface IOverlapped;
	};
	[
		uuid(3781E59A-A2A7-4057-A266-45DE9158C2C5),
		helpstring("Buffer Class")
	]
	coclass Buffer
	{
		[default] interface IBuffer;
	};
	[
		uuid(FE125572-A240-4FD5-9163-480EE51ECFE3),
		helpstring("ULApi Class")
	]
	coclass ULApi
	{
		[default] interface IULApi;
	};
};
