// KorWbrk.idl : IDL source for KorWbrk.dll
//

// This file will be processed by the MIDL tool to
// produce the type library (KorWbrk.tlb) and marshalling code.

import "oaidl.idl";

[
	uuid(7CED05BF-F019-4943-9BA4-4575CA497D35),
	version(1.0),
	helpstring("Korean Word Breaker 1.0 Type Library")
]
library KORWBRKLib
{
	importlib("stdole2.tlb");

	#include "defs.idl"

	interface IWordBreaker;
	interface IPhraseSink;
	interface IWordSink;
	interface IStemmer;
	interface IStemSink;

	typedef enum tagWORDREP_BREAK_TYPE
	{
		WORDREP_BREAK_EOW = 0,
		WORDREP_BREAK_EOS = 1,
		WORDREP_BREAK_EOP = 2,
		WORDREP_BREAK_EOC = 3
	} WORDREP_BREAK_TYPE;

	typedef SCODE (__stdcall *PFNFILLTEXTBUFFER) (struct tagTEXT_SOURCE *pTextSource);

	cpp_quote("#ifdef __cplusplus")
	cpp_quote("typedef struct tagTEXT_SOURCE")
	cpp_quote("{")
	cpp_quote("    PFNFILLTEXTBUFFER pfnFillTextBuffer;")
	cpp_quote("    const WCHAR *awcBuffer;")
	cpp_quote("    ULONG iEnd;")
	cpp_quote("    ULONG iCur;")
	cpp_quote("} TEXT_SOURCE;")
	cpp_quote("#else")
	typedef struct tagTEXT_SOURCE
	{
		PVOID pfnFillTextBuffer;
		const WCHAR *awcBuffer;
		ULONG iEnd;
		ULONG iCur;	
	} TEXT_SOURCE;
	cpp_quote("#endif")

	[
		object,
		local,
		uuid(D53552C8-77E3-101A-B552-08002B33B0E6),
	
		helpstring("IWordBreaker Interface"),
		pointer_default(unique)
	]
	interface IWordBreaker : IUnknown
	{
		[helpstring("method Init")] 
		HRESULT Init(
				[in] BOOL fQuery, 
				[in] ULONG ulMaxTokenSize, 
				[out] BOOL *pfLicense);
		
		[helpstring("method BreakText")] 
		HRESULT BreakText(
				[in] TEXT_SOURCE *pTextSource, 
				[in] IWordSink *pWordSink, 
				[in] IPhraseSink *pPhraseSink);

		[helpstring("method ComposePhrase")] 
		HRESULT ComposePhrase(
				[in] const WCHAR *pwcNoun, 
				[in] ULONG cwcNoun, 
				[in] const WCHAR *pwcModifier, 
				[in] ULONG cwcModifier, 
				[in] ULONG ulAttachmentType, 
				[out] WCHAR *pwcPhrase, 
				[out] ULONG *pcwcPhrase);

		[helpstring("method GetLicenseToUse")] 
		HRESULT GetLicenseToUse(
				[out] const WCHAR ** ppwcsLicense);
	};

	[
		object,
		local,
		uuid(CC906FF0-C058-101A-B554-08002B33B0E6),
	
		helpstring("IPhraseSink Interface"),
		pointer_default(unique)
	]
	interface IPhraseSink : IUnknown
	{
		[helpstring("method PutSmallPhrase")] 
		HRESULT PutSmallPhrase(
					[in] const WCHAR *pwcNoun, 
					[in] ULONG cwcNoun, 
					[in] const WCHAR *pwcModifier, 
					[in] ULONG ulAttachmentType);

		[helpstring("method PutPhrase")] 
		HRESULT PutPhrase(
					[in] const WCHAR *pwcPhrase, 
					[in] ULONG cwcPhrase);
	};
	
	[
		object,
		local,
		uuid(CC907054-C058-101A-B554-08002B33B0E6),
	
		helpstring("IWordSink Interface"),
		pointer_default(unique)
	]
	interface IWordSink : IUnknown
	{
		[helpstring("method PutWord")] 
		HRESULT PutWord(
					[in] ULONG cwc, 
					[in] const WCHAR *pwcInBuf, 
					[in] ULONG cwcSrcLen, 
					[in] ULONG cwcSrcPos);

		[helpstring("method PutAltWord")] 
		HRESULT PutAltWord(
					[in] ULONG cwc, 
					[in] const WCHAR *pwcInBuf, 
					[in] ULONG cwcSrcLen, 
					[in] ULONG cwcSrcPos);

		[helpstring("method StartAltPhrase")] 
		HRESULT StartAltPhrase(void);
		
		[helpstring("method EndAltPhrase")] 
		HRESULT EndAltPhrase(void);
		
		[helpstring("method PutBreak")] 
		HRESULT PutBreak([in] WORDREP_BREAK_TYPE breakType);
	};

	[
		object,
		local,
		uuid(EFBAF140-7F42-11CE-BE57-00AA0051FE20),
	
		helpstring("IStemmer Interface"),
		pointer_default(unique)
	]
	interface IStemmer : IUnknown
	{
		[helpstring("method Init")] 
		HRESULT Init(
				[in] ULONG ulMaxTokenSize, 
				[out] BOOL *pfLicense);
		
		[helpstring("method BreakText")] 
		HRESULT StemWord( 
				[in] WCHAR const * pwcInBuf,
                [in] ULONG cwc,
                [in] IStemSink * pStemSink );

		[helpstring("method GetLicenseToUse")] 
		HRESULT GetLicenseToUse(
				[out] const WCHAR ** ppwcsLicense);
	};

	[
		object,
		local,
		uuid(FE77C330-7F42-11CE-BE57-00AA0051FE20),
	
		helpstring("IWordSink Interface"),
		pointer_default(unique)
	]
	interface IStemSink : IUnknown
	{
		[helpstring("method PutAltWord")] 
		HRESULT PutAltWord(
					[in] const WCHAR *pwcInBuf, 
					[in] ULONG cwc);

		[helpstring("method PutWord")] 
		HRESULT PutWord(
					[in] const WCHAR *pwcInBuf, 
					[in] ULONG cwc);
	};

	// WordBreaker CLASS ID
	// NT: 31B7C920-2880-11D0-8D51-00A0C908DBF1
	// PKM: 737FC9B5-BC66-4953-B7DB-B79A72A592A5
	[
		uuid(31B7C920-2880-11D0-8D51-00A0C908DBF1),
		helpstring("Korean_Default Word Breaker")
	]
	coclass WordBreaker
	{
		[default] interface IWordBreaker;
	};

	// Stemmer CLASS ID
	// NT: 37C84FA0-D3DB-11D0-8D51-00A0C908DBF1
	// PKM: 97E8EFC5-42DA-43ED-9CEC-84FDE3620F1A
	[
		uuid(37C84FA0-D3DB-11D0-8D51-00A0C908DBF1),
		helpstring("Korean_Default Stemmer")
	]
	coclass Stemmer
	{
		[default] interface IStemmer;
	};
};
