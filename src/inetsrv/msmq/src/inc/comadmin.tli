// Created by Microsoft (R) C/C++ Compiler Version 13.00.8830 (38aca9a6).
//
// Wrapper implementations for Win32 type library comadmin.dll
// compiler-generated file created 10/12/00 at 14:51:15 - DO NOT EDIT!

#pragma once

//
// interface IRunningAppCollection wrapper method implementations
//

inline IUnknownPtr IRunningAppCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline long IRunningAppCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IRunningAppCollection::GetItem ( long lIndex ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Item(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface IRunningAppInfo wrapper method implementations
//

inline _bstr_t IRunningAppInfo::GetPartitionID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PartitionID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IRunningAppInfo::GetApplicationID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ApplicationID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IRunningAppInfo::GetInstanceID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_InstanceID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long IRunningAppInfo::GetProcessID ( ) {
    long _result = 0;
    HRESULT _hr = get_ProcessID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IRunningAppInfo::GetPaused ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Paused(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IRunningAppInfo::GetRecycled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Recycled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ICOMAdminCatalog wrapper method implementations
//

inline IDispatchPtr ICOMAdminCatalog::GetCollection ( _bstr_t bstrCollName ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GetCollection(bstrCollName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr ICOMAdminCatalog::Connect ( _bstr_t bstrConnectString ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Connect(bstrConnectString, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long ICOMAdminCatalog::GetMajorVersion ( ) {
    long _result = 0;
    HRESULT _hr = get_MajorVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long ICOMAdminCatalog::GetMinorVersion ( ) {
    long _result = 0;
    HRESULT _hr = get_MinorVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr ICOMAdminCatalog::GetCollectionByQuery ( _bstr_t bstrCollName, SAFEARRAY * * aQuery ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GetCollectionByQuery(bstrCollName, aQuery, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT ICOMAdminCatalog::ImportComponent ( _bstr_t bstrApplIdOrName, _bstr_t bstrCLSIDOrProgId ) {
    HRESULT _hr = raw_ImportComponent(bstrApplIdOrName, bstrCLSIDOrProgId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICOMAdminCatalog::InstallComponent ( _bstr_t bstrApplIdOrName, _bstr_t bstrDLL, _bstr_t bstrTLB, _bstr_t bstrPSDLL ) {
    HRESULT _hr = raw_InstallComponent(bstrApplIdOrName, bstrDLL, bstrTLB, bstrPSDLL);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICOMAdminCatalog::ShutdownApplication ( _bstr_t bstrApplIdOrName ) {
    HRESULT _hr = raw_ShutdownApplication(bstrApplIdOrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICOMAdminCatalog::ExportApplication ( _bstr_t bstrApplIdOrName, _bstr_t bstrApplicationFile, long lOptions ) {
    HRESULT _hr = raw_ExportApplication(bstrApplIdOrName, bstrApplicationFile, lOptions);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICOMAdminCatalog::InstallApplication ( _bstr_t bstrApplicationFile, _bstr_t bstrDestinationDirectory, long lOptions, _bstr_t bstrUserId, _bstr_t bstrPassword, _bstr_t bstrRSN ) {
    HRESULT _hr = raw_InstallApplication(bstrApplicationFile, bstrDestinationDirectory, lOptions, bstrUserId, bstrPassword, bstrRSN);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICOMAdminCatalog::StopRouter ( ) {
    HRESULT _hr = raw_StopRouter();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICOMAdminCatalog::RefreshRouter ( ) {
    HRESULT _hr = raw_RefreshRouter();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICOMAdminCatalog::StartRouter ( ) {
    HRESULT _hr = raw_StartRouter();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICOMAdminCatalog::Reserved1 ( ) {
    HRESULT _hr = raw_Reserved1();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICOMAdminCatalog::Reserved2 ( ) {
    HRESULT _hr = raw_Reserved2();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICOMAdminCatalog::InstallMultipleComponents ( _bstr_t bstrApplIdOrName, SAFEARRAY * * varFileNames, SAFEARRAY * * varCLSIDS ) {
    HRESULT _hr = raw_InstallMultipleComponents(bstrApplIdOrName, varFileNames, varCLSIDS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICOMAdminCatalog::GetMultipleComponentsInfo ( _bstr_t bstrApplIdOrName, SAFEARRAY * * varFileNames, SAFEARRAY * * varCLSIDS, SAFEARRAY * * varClassNames, SAFEARRAY * * varFileFlags, SAFEARRAY * * varComponentFlags ) {
    HRESULT _hr = raw_GetMultipleComponentsInfo(bstrApplIdOrName, varFileNames, varCLSIDS, varClassNames, varFileFlags, varComponentFlags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICOMAdminCatalog::RefreshComponents ( ) {
    HRESULT _hr = raw_RefreshComponents();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICOMAdminCatalog::BackupREGDB ( _bstr_t bstrBackupFilePath ) {
    HRESULT _hr = raw_BackupREGDB(bstrBackupFilePath);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICOMAdminCatalog::RestoreREGDB ( _bstr_t bstrBackupFilePath ) {
    HRESULT _hr = raw_RestoreREGDB(bstrBackupFilePath);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICOMAdminCatalog::QueryApplicationFile ( _bstr_t bstrApplicationFile, BSTR * bstrApplicationName, BSTR * bstrApplicationDescription, VARIANT_BOOL * bHasUsers, VARIANT_BOOL * bIsProxy, SAFEARRAY * * varFileNames ) {
    HRESULT _hr = raw_QueryApplicationFile(bstrApplicationFile, bstrApplicationName, bstrApplicationDescription, bHasUsers, bIsProxy, varFileNames);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICOMAdminCatalog::StartApplication ( _bstr_t bstrApplIdOrName ) {
    HRESULT _hr = raw_StartApplication(bstrApplIdOrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long ICOMAdminCatalog::ServiceCheck ( long lService ) {
    long _result = 0;
    HRESULT _hr = raw_ServiceCheck(lService, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT ICOMAdminCatalog::InstallMultipleEventClasses ( _bstr_t bstrApplIdOrName, SAFEARRAY * * varFileNames, SAFEARRAY * * varCLSIDS ) {
    HRESULT _hr = raw_InstallMultipleEventClasses(bstrApplIdOrName, varFileNames, varCLSIDS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICOMAdminCatalog::InstallEventClass ( _bstr_t bstrApplIdOrName, _bstr_t bstrDLL, _bstr_t bstrTLB, _bstr_t bstrPSDLL ) {
    HRESULT _hr = raw_InstallEventClass(bstrApplIdOrName, bstrDLL, bstrTLB, bstrPSDLL);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICOMAdminCatalog::GetEventClassesForIID ( _bstr_t bstrIID, SAFEARRAY * * varCLSIDS, SAFEARRAY * * varProgIDs, SAFEARRAY * * varDescriptions ) {
    HRESULT _hr = raw_GetEventClassesForIID(bstrIID, varCLSIDS, varProgIDs, varDescriptions);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ICOMAdminCatalog2 wrapper method implementations
//

inline HRESULT ICOMAdminCatalog2::ShutdownProcess ( _bstr_t bstrApplInstanceId ) {
    HRESULT _hr = raw_ShutdownProcess(bstrApplInstanceId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICOMAdminCatalog2::PauseProcess ( _bstr_t bstrApplInstanceId ) {
    HRESULT _hr = raw_PauseProcess(bstrApplInstanceId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICOMAdminCatalog2::ResumeProcess ( _bstr_t bstrApplInstanceId ) {
    HRESULT _hr = raw_ResumeProcess(bstrApplInstanceId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL ICOMAdminCatalog2::IsProcessPaused ( _bstr_t bstrApplInstanceId ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsProcessPaused(bstrApplInstanceId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t ICOMAdminCatalog2::DumpProcess ( _bstr_t bstrApplInstanceId, _bstr_t bstrDirectory, unsigned long dwMaxImages ) {
    BSTR _result = 0;
    HRESULT _hr = raw_DumpProcess(bstrApplInstanceId, bstrDirectory, dwMaxImages, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL ICOMAdminCatalog2::IsProcessDumpSupported ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsProcessDumpSupported(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT ICOMAdminCatalog2::SetApplicationPartition ( _bstr_t bstrApplPartitionIdOrName ) {
    HRESULT _hr = raw_SetApplicationPartition(bstrApplPartitionIdOrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t ICOMAdminCatalog2::GetCurrentApplicationPartitionId ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetCurrentApplicationPartitionId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ICOMAdminCatalog2::GetCurrentApplicationPartitionName ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetCurrentApplicationPartitionName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline IDispatchPtr ICOMAdminCatalog2::GetRunningApps ( _bstr_t bstrApplIdOrName ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GetRunningApps(bstrApplIdOrName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT ICOMAdminCatalog2::CreateServiceForApplication ( _bstr_t bstrAppIdOrName, _bstr_t bstrServiceName, _bstr_t bstrStartType, _bstr_t bstrErrorControl, _bstr_t bstrDependencies, _bstr_t bstrRunAs, _bstr_t bstrPassword, VARIANT_BOOL bDesktopOk ) {
    HRESULT _hr = raw_CreateServiceForApplication(bstrAppIdOrName, bstrServiceName, bstrStartType, bstrErrorControl, bstrDependencies, bstrRunAs, bstrPassword, bDesktopOk);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICOMAdminCatalog2::DeleteServiceForApplication ( _bstr_t bstrAppIdOrName ) {
    HRESULT _hr = raw_DeleteServiceForApplication(bstrAppIdOrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t ICOMAdminCatalog2::GetBaseApplicationPartitionId ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetBaseApplicationPartitionId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT ICOMAdminCatalog2::CopyApplications ( _bstr_t bstrSourcePartitionId, SAFEARRAY * * varApplIds ) {
    HRESULT _hr = raw_CopyApplications(bstrSourcePartitionId, varApplIds);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICOMAdminCatalog2::CopyComponent ( _bstr_t bstrSourcePartitionId, _bstr_t bstrClsid, _bstr_t bstrNewApplId, _bstr_t bstrNewClsid, _bstr_t bstrNewProgId ) {
    HRESULT _hr = raw_CopyComponent(bstrSourcePartitionId, bstrClsid, bstrNewApplId, bstrNewClsid, bstrNewProgId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICOMAdminCatalog2::ImportComponentAsLegacy ( _bstr_t bstrAppIdOrName, _bstr_t bstrCLSIDOrProgId, long lComponentType ) {
    HRESULT _hr = raw_ImportComponentAsLegacy(bstrAppIdOrName, bstrCLSIDOrProgId, lComponentType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICOMAdminCatalog2::PromoteLegacyComponent ( _bstr_t bstrAppIdOrName, _bstr_t bstrCLSIDOrProgId ) {
    HRESULT _hr = raw_PromoteLegacyComponent(bstrAppIdOrName, bstrCLSIDOrProgId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t ICOMAdminCatalog2::GetAppPartitionId ( _bstr_t bstrAppId ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetAppPartitionId(bstrAppId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ICOMAdminCatalog2::GetAppPartitionName ( _bstr_t bstrAppId ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetAppPartitionName(bstrAppId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT ICOMAdminCatalog2::ImportComponentByType ( _bstr_t bstrApplIdOrName, _bstr_t bstrCLSIDOrProgId, long lComponentType ) {
    HRESULT _hr = raw_ImportComponentByType(bstrApplIdOrName, bstrCLSIDOrProgId, lComponentType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICOMAdminCatalog2::Is64BitCatalogServer ( VARIANT_BOOL * pbIs64Bit ) {
    HRESULT _hr = raw_Is64BitCatalogServer(pbIs64Bit);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICOMAdminCatalog2::MoveComponent ( _bstr_t bstrSourcePartitionId, _bstr_t bstrDestinationPartitionId, _bstr_t bstrClsid, _bstr_t bstrDestinationApplId ) {
    HRESULT _hr = raw_MoveComponent(bstrSourcePartitionId, bstrDestinationPartitionId, bstrClsid, bstrDestinationApplId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t ICOMAdminCatalog2::GetInstanceIDFromPID ( unsigned long dwPID ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetInstanceIDFromPID(dwPID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT ICOMAdminCatalog2::RecycleProcess ( _bstr_t bstrInstanceID, long lReasonCode ) {
    HRESULT _hr = raw_RecycleProcess(bstrInstanceID, lReasonCode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t ICOMAdminCatalog2::GetInstanceIDFromApplID ( _bstr_t bstrAppIdOrName ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetInstanceIDFromApplID(bstrAppIdOrName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface ICatalogObject wrapper method implementations
//

inline _variant_t ICatalogObject::GetValue ( _bstr_t bstrPropName ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(bstrPropName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void ICatalogObject::PutValue ( _bstr_t bstrPropName, const _variant_t & retval ) {
    HRESULT _hr = put_Value(bstrPropName, retval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ICatalogObject::GetKey ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Key(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ICatalogObject::GetName ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline VARIANT_BOOL ICatalogObject::IsPropertyReadOnly ( _bstr_t bstrPropName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsPropertyReadOnly(bstrPropName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL ICatalogObject::GetValid ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Valid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL ICatalogObject::IsPropertyWriteOnly ( _bstr_t bstrPropName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsPropertyWriteOnly(bstrPropName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ICatalogCollection wrapper method implementations
//

inline IUnknownPtr ICatalogCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IDispatchPtr ICatalogCollection::GetItem ( long lIndex ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Item(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long ICatalogCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT ICatalogCollection::Remove ( long lIndex ) {
    HRESULT _hr = raw_Remove(lIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IDispatchPtr ICatalogCollection::Add ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT ICatalogCollection::Populate ( ) {
    HRESULT _hr = raw_Populate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long ICatalogCollection::SaveChanges ( ) {
    long _result = 0;
    HRESULT _hr = raw_SaveChanges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr ICatalogCollection::GetCollection ( _bstr_t bstrCollName, const _variant_t & varObjectKey ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GetCollection(bstrCollName, varObjectKey, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _variant_t ICatalogCollection::GetName ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline VARIANT_BOOL ICatalogCollection::GetAddEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AddEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL ICatalogCollection::GetRemoveEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RemoveEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr ICatalogCollection::GetUtilInterface ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GetUtilInterface(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long ICatalogCollection::GetDataStoreMajorVersion ( ) {
    long _result = 0;
    HRESULT _hr = get_DataStoreMajorVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long ICatalogCollection::GetDataStoreMinorVersion ( ) {
    long _result = 0;
    HRESULT _hr = get_DataStoreMinorVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT ICatalogCollection::PopulateByKey ( SAFEARRAY * aKeys ) {
    HRESULT _hr = raw_PopulateByKey(aKeys);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICatalogCollection::PopulateByQuery ( _bstr_t bstrQueryString, long lQueryType ) {
    HRESULT _hr = raw_PopulateByQuery(bstrQueryString, lQueryType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}
