// Created by Microsoft (R) C/C++ Compiler Version 13.00.8830 (38aca9a6).
//
// C++ source equivalent of Win32 type library comadmin.dll
// compiler-generated file created 10/12/00 at 14:51:15 - DO NOT EDIT!

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

//
// Forward references and typedefs
//

struct __declspec(uuid("f618c513-dfb8-11d1-a2cf-00805fc79235"))
/* LIBID */ __COMAdmin;
struct __declspec(uuid("ab9d3261-d6ea-4fbd-80f6-cf7bad0732f3"))
/* dual interface */ IRunningAppCollection;
struct __declspec(uuid("1fd6f178-bfb9-4629-93c7-4ca9a2724efd"))
/* dual interface */ IRunningAppInfo;
struct /* coclass */ COMAdminCatalog;
struct __declspec(uuid("d81ab10d-2ee4-48db-9c90-54110998b105"))
/* dual interface */ ICOMAdminCatalog2;
struct __declspec(uuid("dd662187-dfc2-11d1-a2cf-00805fc79235"))
/* dual interface */ ICOMAdminCatalog;
struct /* coclass */ COMAdminCatalogObject;
struct __declspec(uuid("6eb22871-8a19-11d0-81b6-00a0c9231c29"))
/* dual interface */ ICatalogObject;
struct /* coclass */ COMAdminCatalogCollection;
struct __declspec(uuid("6eb22872-8a19-11d0-81b6-00a0c9231c29"))
/* dual interface */ ICatalogCollection;
enum COMAdminComponentType;
enum COMAdminApplicationInstallOptions;
enum COMAdminApplicationExportOptions;
enum COMAdminThreadingModels;
enum COMAdminTransactionOptions;
enum COMAdminTxIsolationLevelOptions;
enum COMAdminSynchronizationOptions;
enum COMAdminActivationOptions;
enum COMAdminAccessChecksLevelOptions;
enum COMAdminAuthenticationLevelOptions;
enum COMAdminImpersonationLevelOptions;
enum COMAdminAuthenticationCapabilitiesOptions;
enum COMAdminOS;
enum COMAdminServiceOptions;
enum COMAdminServiceStatusOptions;
enum COMAdminFileFlags;
enum COMAdminComponentFlags;
enum COMAdminErrorCodes;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(IRunningAppCollection, __uuidof(IRunningAppCollection));
_COM_SMARTPTR_TYPEDEF(IRunningAppInfo, __uuidof(IRunningAppInfo));
_COM_SMARTPTR_TYPEDEF(ICOMAdminCatalog, __uuidof(ICOMAdminCatalog));
_COM_SMARTPTR_TYPEDEF(ICOMAdminCatalog2, __uuidof(ICOMAdminCatalog2));
_COM_SMARTPTR_TYPEDEF(ICatalogObject, __uuidof(ICatalogObject));
_COM_SMARTPTR_TYPEDEF(ICatalogCollection, __uuidof(ICatalogCollection));

//
// Type library items
//

struct __declspec(uuid("ab9d3261-d6ea-4fbd-80f6-cf7bad0732f3"))
IRunningAppCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    IDispatchPtr GetItem (
        long lIndex );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppEnumVariant ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pCount ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long lIndex,
        /*[out,retval]*/ IDispatch * * ppAppObject ) = 0;
};

struct __declspec(uuid("1fd6f178-bfb9-4629-93c7-4ca9a2724efd"))
IRunningAppInfo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPartitionID))
    _bstr_t PartitionID;
    __declspec(property(get=GetApplicationID))
    _bstr_t ApplicationID;
    __declspec(property(get=GetInstanceID))
    _bstr_t InstanceID;
    __declspec(property(get=GetProcessID))
    long ProcessID;
    __declspec(property(get=GetPaused))
    VARIANT_BOOL Paused;
    __declspec(property(get=GetRecycled))
    VARIANT_BOOL Recycled;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetPartitionID ( );
    _bstr_t GetApplicationID ( );
    _bstr_t GetInstanceID ( );
    long GetProcessID ( );
    VARIANT_BOOL GetPaused ( );
    VARIANT_BOOL GetRecycled ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PartitionID (
        /*[out,retval]*/ BSTR * pbstrAppID ) = 0;
      virtual HRESULT __stdcall get_ApplicationID (
        /*[out,retval]*/ BSTR * pbstrAppID ) = 0;
      virtual HRESULT __stdcall get_InstanceID (
        /*[out,retval]*/ BSTR * pbstrInstanceID ) = 0;
      virtual HRESULT __stdcall get_ProcessID (
        /*[out,retval]*/ long * plProcessID ) = 0;
      virtual HRESULT __stdcall get_Paused (
        /*[out,retval]*/ VARIANT_BOOL * pbPaused ) = 0;
      virtual HRESULT __stdcall get_Recycled (
        /*[out,retval]*/ VARIANT_BOOL * pbRecycled ) = 0;
};

struct __declspec(uuid("f618c514-dfb8-11d1-a2cf-00805fc79235"))
COMAdminCatalog;
    // [ default ] interface ICOMAdminCatalog2

struct __declspec(uuid("dd662187-dfc2-11d1-a2cf-00805fc79235"))
ICOMAdminCatalog : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMajorVersion))
    long MajorVersion;
    __declspec(property(get=GetMinorVersion))
    long MinorVersion;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetCollection (
        _bstr_t bstrCollName );
    IDispatchPtr Connect (
        _bstr_t bstrConnectString );
    long GetMajorVersion ( );
    long GetMinorVersion ( );
    IDispatchPtr GetCollectionByQuery (
        _bstr_t bstrCollName,
        SAFEARRAY * * aQuery );
    HRESULT ImportComponent (
        _bstr_t bstrApplIdOrName,
        _bstr_t bstrCLSIDOrProgId );
    HRESULT InstallComponent (
        _bstr_t bstrApplIdOrName,
        _bstr_t bstrDLL,
        _bstr_t bstrTLB,
        _bstr_t bstrPSDLL );
    HRESULT ShutdownApplication (
        _bstr_t bstrApplIdOrName );
    HRESULT ExportApplication (
        _bstr_t bstrApplIdOrName,
        _bstr_t bstrApplicationFile,
        long lOptions );
    HRESULT InstallApplication (
        _bstr_t bstrApplicationFile,
        _bstr_t bstrDestinationDirectory,
        long lOptions,
        _bstr_t bstrUserId,
        _bstr_t bstrPassword,
        _bstr_t bstrRSN );
    HRESULT StopRouter ( );
    HRESULT RefreshRouter ( );
    HRESULT StartRouter ( );
    HRESULT Reserved1 ( );
    HRESULT Reserved2 ( );
    HRESULT InstallMultipleComponents (
        _bstr_t bstrApplIdOrName,
        SAFEARRAY * * varFileNames,
        SAFEARRAY * * varCLSIDS );
    HRESULT GetMultipleComponentsInfo (
        _bstr_t bstrApplIdOrName,
        SAFEARRAY * * varFileNames,
        SAFEARRAY * * varCLSIDS,
        SAFEARRAY * * varClassNames,
        SAFEARRAY * * varFileFlags,
        SAFEARRAY * * varComponentFlags );
    HRESULT RefreshComponents ( );
    HRESULT BackupREGDB (
        _bstr_t bstrBackupFilePath );
    HRESULT RestoreREGDB (
        _bstr_t bstrBackupFilePath );
    HRESULT QueryApplicationFile (
        _bstr_t bstrApplicationFile,
        BSTR * bstrApplicationName,
        BSTR * bstrApplicationDescription,
        VARIANT_BOOL * bHasUsers,
        VARIANT_BOOL * bIsProxy,
        SAFEARRAY * * varFileNames );
    HRESULT StartApplication (
        _bstr_t bstrApplIdOrName );
    long ServiceCheck (
        long lService );
    HRESULT InstallMultipleEventClasses (
        _bstr_t bstrApplIdOrName,
        SAFEARRAY * * varFileNames,
        SAFEARRAY * * varCLSIDS );
    HRESULT InstallEventClass (
        _bstr_t bstrApplIdOrName,
        _bstr_t bstrDLL,
        _bstr_t bstrTLB,
        _bstr_t bstrPSDLL );
    HRESULT GetEventClassesForIID (
        _bstr_t bstrIID,
        SAFEARRAY * * varCLSIDS,
        SAFEARRAY * * varProgIDs,
        SAFEARRAY * * varDescriptions );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetCollection (
        /*[in]*/ BSTR bstrCollName,
        /*[out,retval]*/ IDispatch * * ppCatalogCollection ) = 0;
      virtual HRESULT __stdcall raw_Connect (
        /*[in]*/ BSTR bstrConnectString,
        /*[out,retval]*/ IDispatch * * ppCatalogCollection ) = 0;
      virtual HRESULT __stdcall get_MajorVersion (
        /*[out,retval]*/ long * retval ) = 0;
      virtual HRESULT __stdcall get_MinorVersion (
        /*[out,retval]*/ long * retval ) = 0;
      virtual HRESULT __stdcall raw_GetCollectionByQuery (
        /*[in]*/ BSTR bstrCollName,
        /*[in]*/ SAFEARRAY * * aQuery,
        /*[out,retval]*/ IDispatch * * ppCatalogCollection ) = 0;
      virtual HRESULT __stdcall raw_ImportComponent (
        /*[in]*/ BSTR bstrApplIdOrName,
        /*[in]*/ BSTR bstrCLSIDOrProgId ) = 0;
      virtual HRESULT __stdcall raw_InstallComponent (
        /*[in]*/ BSTR bstrApplIdOrName,
        /*[in]*/ BSTR bstrDLL,
        /*[in]*/ BSTR bstrTLB,
        /*[in]*/ BSTR bstrPSDLL ) = 0;
      virtual HRESULT __stdcall raw_ShutdownApplication (
        /*[in]*/ BSTR bstrApplIdOrName ) = 0;
      virtual HRESULT __stdcall raw_ExportApplication (
        /*[in]*/ BSTR bstrApplIdOrName,
        /*[in]*/ BSTR bstrApplicationFile,
        /*[in]*/ long lOptions ) = 0;
      virtual HRESULT __stdcall raw_InstallApplication (
        /*[in]*/ BSTR bstrApplicationFile,
        /*[in]*/ BSTR bstrDestinationDirectory,
        /*[in]*/ long lOptions,
        /*[in]*/ BSTR bstrUserId,
        /*[in]*/ BSTR bstrPassword,
        /*[in]*/ BSTR bstrRSN ) = 0;
      virtual HRESULT __stdcall raw_StopRouter ( ) = 0;
      virtual HRESULT __stdcall raw_RefreshRouter ( ) = 0;
      virtual HRESULT __stdcall raw_StartRouter ( ) = 0;
      virtual HRESULT __stdcall raw_Reserved1 ( ) = 0;
      virtual HRESULT __stdcall raw_Reserved2 ( ) = 0;
      virtual HRESULT __stdcall raw_InstallMultipleComponents (
        /*[in]*/ BSTR bstrApplIdOrName,
        /*[in]*/ SAFEARRAY * * varFileNames,
        /*[in]*/ SAFEARRAY * * varCLSIDS ) = 0;
      virtual HRESULT __stdcall raw_GetMultipleComponentsInfo (
        /*[in]*/ BSTR bstrApplIdOrName,
        /*[in]*/ SAFEARRAY * * varFileNames,
        /*[out]*/ SAFEARRAY * * varCLSIDS,
        /*[out]*/ SAFEARRAY * * varClassNames,
        /*[out]*/ SAFEARRAY * * varFileFlags,
        /*[out]*/ SAFEARRAY * * varComponentFlags ) = 0;
      virtual HRESULT __stdcall raw_RefreshComponents ( ) = 0;
      virtual HRESULT __stdcall raw_BackupREGDB (
        /*[in]*/ BSTR bstrBackupFilePath ) = 0;
      virtual HRESULT __stdcall raw_RestoreREGDB (
        /*[in]*/ BSTR bstrBackupFilePath ) = 0;
      virtual HRESULT __stdcall raw_QueryApplicationFile (
        /*[in]*/ BSTR bstrApplicationFile,
        /*[out]*/ BSTR * bstrApplicationName,
        /*[out]*/ BSTR * bstrApplicationDescription,
        /*[out]*/ VARIANT_BOOL * bHasUsers,
        /*[out]*/ VARIANT_BOOL * bIsProxy,
        /*[out]*/ SAFEARRAY * * varFileNames ) = 0;
      virtual HRESULT __stdcall raw_StartApplication (
        /*[in]*/ BSTR bstrApplIdOrName ) = 0;
      virtual HRESULT __stdcall raw_ServiceCheck (
        /*[in]*/ long lService,
        /*[out,retval]*/ long * pulStatus ) = 0;
      virtual HRESULT __stdcall raw_InstallMultipleEventClasses (
        /*[in]*/ BSTR bstrApplIdOrName,
        /*[in]*/ SAFEARRAY * * varFileNames,
        /*[in]*/ SAFEARRAY * * varCLSIDS ) = 0;
      virtual HRESULT __stdcall raw_InstallEventClass (
        /*[in]*/ BSTR bstrApplIdOrName,
        /*[in]*/ BSTR bstrDLL,
        /*[in]*/ BSTR bstrTLB,
        /*[in]*/ BSTR bstrPSDLL ) = 0;
      virtual HRESULT __stdcall raw_GetEventClassesForIID (
        /*[in]*/ BSTR bstrIID,
        /*[out]*/ SAFEARRAY * * varCLSIDS,
        /*[out]*/ SAFEARRAY * * varProgIDs,
        /*[out]*/ SAFEARRAY * * varDescriptions ) = 0;
};

struct __declspec(uuid("d81ab10d-2ee4-48db-9c90-54110998b105"))
ICOMAdminCatalog2 : ICOMAdminCatalog
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT ShutdownProcess (
        _bstr_t bstrApplInstanceId );
    HRESULT PauseProcess (
        _bstr_t bstrApplInstanceId );
    HRESULT ResumeProcess (
        _bstr_t bstrApplInstanceId );
    VARIANT_BOOL IsProcessPaused (
        _bstr_t bstrApplInstanceId );
    _bstr_t DumpProcess (
        _bstr_t bstrApplInstanceId,
        _bstr_t bstrDirectory,
        unsigned long dwMaxImages );
    VARIANT_BOOL IsProcessDumpSupported ( );
    HRESULT SetApplicationPartition (
        _bstr_t bstrApplPartitionIdOrName );
    _bstr_t GetCurrentApplicationPartitionId ( );
    _bstr_t GetCurrentApplicationPartitionName ( );
    IDispatchPtr GetRunningApps (
        _bstr_t bstrApplIdOrName );
    HRESULT CreateServiceForApplication (
        _bstr_t bstrAppIdOrName,
        _bstr_t bstrServiceName,
        _bstr_t bstrStartType,
        _bstr_t bstrErrorControl,
        _bstr_t bstrDependencies,
        _bstr_t bstrRunAs,
        _bstr_t bstrPassword,
        VARIANT_BOOL bDesktopOk );
    HRESULT DeleteServiceForApplication (
        _bstr_t bstrAppIdOrName );
    _bstr_t GetBaseApplicationPartitionId ( );
    HRESULT CopyApplications (
        _bstr_t bstrSourcePartitionId,
        SAFEARRAY * * varApplIds );
    HRESULT CopyComponent (
        _bstr_t bstrSourcePartitionId,
        _bstr_t bstrClsid,
        _bstr_t bstrNewApplId,
        _bstr_t bstrNewClsid,
        _bstr_t bstrNewProgId );
    HRESULT ImportComponentAsLegacy (
        _bstr_t bstrAppIdOrName,
        _bstr_t bstrCLSIDOrProgId,
        long lComponentType );
    HRESULT PromoteLegacyComponent (
        _bstr_t bstrAppIdOrName,
        _bstr_t bstrCLSIDOrProgId );
    _bstr_t GetAppPartitionId (
        _bstr_t bstrAppId );
    _bstr_t GetAppPartitionName (
        _bstr_t bstrAppId );
    HRESULT ImportComponentByType (
        _bstr_t bstrApplIdOrName,
        _bstr_t bstrCLSIDOrProgId,
        long lComponentType );
    HRESULT Is64BitCatalogServer (
        VARIANT_BOOL * pbIs64Bit );
    HRESULT MoveComponent (
        _bstr_t bstrSourcePartitionId,
        _bstr_t bstrDestinationPartitionId,
        _bstr_t bstrClsid,
        _bstr_t bstrDestinationApplId );
    _bstr_t GetInstanceIDFromPID (
        unsigned long dwPID );
    HRESULT RecycleProcess (
        _bstr_t bstrInstanceID,
        long lReasonCode );
    _bstr_t GetInstanceIDFromApplID (
        _bstr_t bstrAppIdOrName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ShutdownProcess (
        /*[in]*/ BSTR bstrApplInstanceId ) = 0;
      virtual HRESULT __stdcall raw_PauseProcess (
        /*[in]*/ BSTR bstrApplInstanceId ) = 0;
      virtual HRESULT __stdcall raw_ResumeProcess (
        /*[in]*/ BSTR bstrApplInstanceId ) = 0;
      virtual HRESULT __stdcall raw_IsProcessPaused (
        /*[in]*/ BSTR bstrApplInstanceId,
        /*[out,retval]*/ VARIANT_BOOL * bPaused ) = 0;
      virtual HRESULT __stdcall raw_DumpProcess (
        /*[in]*/ BSTR bstrApplInstanceId,
        /*[in]*/ BSTR bstrDirectory,
        /*[in]*/ unsigned long dwMaxImages,
        /*[out,retval]*/ BSTR * pbstrDumpFile ) = 0;
      virtual HRESULT __stdcall raw_IsProcessDumpSupported (
        /*[out,retval]*/ VARIANT_BOOL * pbDumpSupported ) = 0;
      virtual HRESULT __stdcall raw_SetApplicationPartition (
        /*[in]*/ BSTR bstrApplPartitionIdOrName ) = 0;
      virtual HRESULT __stdcall raw_GetCurrentApplicationPartitionId (
        /*[out,retval]*/ BSTR * pbstrApplPartitionId ) = 0;
      virtual HRESULT __stdcall raw_GetCurrentApplicationPartitionName (
        /*[out,retval]*/ BSTR * pbstrApplPartitionName ) = 0;
      virtual HRESULT __stdcall raw_GetRunningApps (
        /*[in]*/ BSTR bstrApplIdOrName,
        /*[out,retval]*/ IDispatch * * ppRunningAppCollection ) = 0;
      virtual HRESULT __stdcall raw_CreateServiceForApplication (
        /*[in]*/ BSTR bstrAppIdOrName,
        /*[in]*/ BSTR bstrServiceName,
        /*[in]*/ BSTR bstrStartType,
        /*[in]*/ BSTR bstrErrorControl,
        /*[in]*/ BSTR bstrDependencies,
        /*[in]*/ BSTR bstrRunAs,
        /*[in]*/ BSTR bstrPassword,
        /*[in]*/ VARIANT_BOOL bDesktopOk ) = 0;
      virtual HRESULT __stdcall raw_DeleteServiceForApplication (
        /*[in]*/ BSTR bstrAppIdOrName ) = 0;
      virtual HRESULT __stdcall raw_GetBaseApplicationPartitionId (
        /*[out,retval]*/ BSTR * pbstrBasePartitionId ) = 0;
      virtual HRESULT __stdcall raw_CopyApplications (
        /*[in]*/ BSTR bstrSourcePartitionId,
        /*[in]*/ SAFEARRAY * * varApplIds ) = 0;
      virtual HRESULT __stdcall raw_CopyComponent (
        /*[in]*/ BSTR bstrSourcePartitionId,
        /*[in]*/ BSTR bstrClsid,
        /*[in]*/ BSTR bstrNewApplId,
        /*[in]*/ BSTR bstrNewClsid,
        /*[in]*/ BSTR bstrNewProgId ) = 0;
      virtual HRESULT __stdcall raw_ImportComponentAsLegacy (
        /*[in]*/ BSTR bstrAppIdOrName,
        /*[in]*/ BSTR bstrCLSIDOrProgId,
        /*[in]*/ long lComponentType ) = 0;
      virtual HRESULT __stdcall raw_PromoteLegacyComponent (
        /*[in]*/ BSTR bstrAppIdOrName,
        /*[in]*/ BSTR bstrCLSIDOrProgId ) = 0;
      virtual HRESULT __stdcall raw_GetAppPartitionId (
        /*[in]*/ BSTR bstrAppId,
        /*[out,retval]*/ BSTR * pbstrPartitionId ) = 0;
      virtual HRESULT __stdcall raw_GetAppPartitionName (
        /*[in]*/ BSTR bstrAppId,
        /*[out,retval]*/ BSTR * pbstrPartitionName ) = 0;
      virtual HRESULT __stdcall raw_ImportComponentByType (
        /*[in]*/ BSTR bstrApplIdOrName,
        /*[in]*/ BSTR bstrCLSIDOrProgId,
        /*[in]*/ long lComponentType ) = 0;
      virtual HRESULT __stdcall raw_Is64BitCatalogServer (
        /*[out]*/ VARIANT_BOOL * pbIs64Bit ) = 0;
      virtual HRESULT __stdcall raw_MoveComponent (
        /*[in]*/ BSTR bstrSourcePartitionId,
        /*[in]*/ BSTR bstrDestinationPartitionId,
        /*[in]*/ BSTR bstrClsid,
        /*[in]*/ BSTR bstrDestinationApplId ) = 0;
      virtual HRESULT __stdcall raw_GetInstanceIDFromPID (
        /*[in]*/ unsigned long dwPID,
        /*[out,retval]*/ BSTR * pbstrInstanceID ) = 0;
      virtual HRESULT __stdcall raw_RecycleProcess (
        /*[in]*/ BSTR bstrInstanceID,
        /*[in]*/ long lReasonCode ) = 0;
      virtual HRESULT __stdcall raw_GetInstanceIDFromApplID (
        /*[in]*/ BSTR bstrAppIdOrName,
        /*[out,retval]*/ BSTR * pbstrInstanceID ) = 0;
};

struct __declspec(uuid("f618c515-dfb8-11d1-a2cf-00805fc79235"))
COMAdminCatalogObject;
    // [ default ] interface ICatalogObject

struct __declspec(uuid("6eb22871-8a19-11d0-81b6-00a0c9231c29"))
ICatalogObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value[];
    __declspec(property(get=GetKey))
    _variant_t Key;
    __declspec(property(get=GetName))
    _variant_t Name;
    __declspec(property(get=GetValid))
    VARIANT_BOOL Valid;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetValue (
        _bstr_t bstrPropName );
    void PutValue (
        _bstr_t bstrPropName,
        const _variant_t & retval );
    _variant_t GetKey ( );
    _variant_t GetName ( );
    VARIANT_BOOL IsPropertyReadOnly (
        _bstr_t bstrPropName );
    VARIANT_BOOL GetValid ( );
    VARIANT_BOOL IsPropertyWriteOnly (
        _bstr_t bstrPropName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Value (
        /*[in]*/ BSTR bstrPropName,
        /*[out,retval]*/ VARIANT * retval ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ BSTR bstrPropName,
        /*[in]*/ VARIANT retval ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[out,retval]*/ VARIANT * retval ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ VARIANT * retval ) = 0;
      virtual HRESULT __stdcall raw_IsPropertyReadOnly (
        /*[in]*/ BSTR bstrPropName,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall get_Valid (
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall raw_IsPropertyWriteOnly (
        /*[in]*/ BSTR bstrPropName,
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
};

struct __declspec(uuid("f618c516-dfb8-11d1-a2cf-00805fc79235"))
COMAdminCatalogCollection;
    // [ default ] interface ICatalogCollection

struct __declspec(uuid("6eb22872-8a19-11d0-81b6-00a0c9231c29"))
ICatalogCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetName))
    _variant_t Name;
    __declspec(property(get=GetAddEnabled))
    VARIANT_BOOL AddEnabled;
    __declspec(property(get=GetRemoveEnabled))
    VARIANT_BOOL RemoveEnabled;
    __declspec(property(get=GetDataStoreMajorVersion))
    long DataStoreMajorVersion;
    __declspec(property(get=GetDataStoreMinorVersion))
    long DataStoreMinorVersion;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    IDispatchPtr GetItem (
        long lIndex );
    long GetCount ( );
    HRESULT Remove (
        long lIndex );
    IDispatchPtr Add ( );
    HRESULT Populate ( );
    long SaveChanges ( );
    IDispatchPtr GetCollection (
        _bstr_t bstrCollName,
        const _variant_t & varObjectKey );
    _variant_t GetName ( );
    VARIANT_BOOL GetAddEnabled ( );
    VARIANT_BOOL GetRemoveEnabled ( );
    IDispatchPtr GetUtilInterface ( );
    long GetDataStoreMajorVersion ( );
    long GetDataStoreMinorVersion ( );
    HRESULT PopulateByKey (
        SAFEARRAY * aKeys );
    HRESULT PopulateByQuery (
        _bstr_t bstrQueryString,
        long lQueryType );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppEnumVariant ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long lIndex,
        /*[out,retval]*/ IDispatch * * ppCatalogObject ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * retval ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ long lIndex ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ IDispatch * * ppCatalogObject ) = 0;
      virtual HRESULT __stdcall raw_Populate ( ) = 0;
      virtual HRESULT __stdcall raw_SaveChanges (
        /*[out,retval]*/ long * retval ) = 0;
      virtual HRESULT __stdcall raw_GetCollection (
        /*[in]*/ BSTR bstrCollName,
        /*[in]*/ VARIANT varObjectKey,
        /*[out,retval]*/ IDispatch * * ppCatalogCollection ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ VARIANT * retval ) = 0;
      virtual HRESULT __stdcall get_AddEnabled (
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall get_RemoveEnabled (
        /*[out,retval]*/ VARIANT_BOOL * retval ) = 0;
      virtual HRESULT __stdcall raw_GetUtilInterface (
        /*[out,retval]*/ IDispatch * * ppUtil ) = 0;
      virtual HRESULT __stdcall get_DataStoreMajorVersion (
        /*[out,retval]*/ long * retval ) = 0;
      virtual HRESULT __stdcall get_DataStoreMinorVersion (
        /*[out,retval]*/ long * retval ) = 0;
      virtual HRESULT __stdcall raw_PopulateByKey (
        /*[in]*/ SAFEARRAY * aKeys ) = 0;
      virtual HRESULT __stdcall raw_PopulateByQuery (
        /*[in]*/ BSTR bstrQueryString,
        /*[in]*/ long lQueryType ) = 0;
};

enum COMAdminComponentType
{
    COMAdminUseAnyComponent = 1,
    COMAdminWOWComponent = 2,
    COMAdminNativeComponent = 3
};

enum COMAdminApplicationInstallOptions
{
    COMAdminInstallNoUsers = 0,
    COMAdminInstallUsers = 1,
    COMAdminInstallForceOverwriteOfFiles = 2
};

enum COMAdminApplicationExportOptions
{
    COMAdminExportNoUsers = 0,
    COMAdminExportUsers = 1,
    COMAdminExportApplicationProxy = 2,
    COMAdminExportForceOverwriteOfFiles = 4,
    COMAdminExportIn10Format = 16
};

enum COMAdminThreadingModels
{
    COMAdminThreadingModelApartment = 0,
    COMAdminThreadingModelFree = 1,
    COMAdminThreadingModelMain = 2,
    COMAdminThreadingModelBoth = 3,
    COMAdminThreadingModelNeutral = 4,
    COMAdminThreadingModelNotSpecified = 5
};

enum COMAdminTransactionOptions
{
    COMAdminTransactionIgnored = 0,
    COMAdminTransactionNone = 1,
    COMAdminTransactionSupported = 2,
    COMAdminTransactionRequired = 3,
    COMAdminTransactionRequiresNew = 4
};

enum COMAdminTxIsolationLevelOptions
{
    COMAdminTxIsolationLevelNone = 0,
    COMAdminTxIsolationLevelReadUnCommitted = 1,
    COMAdminTxIsolationLevelReadCommitted = 2,
    COMAdminTxIsolationLevelRepeatableRead = 3,
    COMAdminTxIsolationLevelSerializable = 4
};

enum COMAdminSynchronizationOptions
{
    COMAdminSynchronizationIgnored = 0,
    COMAdminSynchronizationNone = 1,
    COMAdminSynchronizationSupported = 2,
    COMAdminSynchronizationRequired = 3,
    COMAdminSynchronizationRequiresNew = 4
};

enum COMAdminActivationOptions
{
    COMAdminActivationInproc = 0,
    COMAdminActivationLocal = 1
};

enum COMAdminAccessChecksLevelOptions
{
    COMAdminAccessChecksApplicationLevel = 0,
    COMAdminAccessChecksApplicationComponentLevel = 1
};

enum COMAdminAuthenticationLevelOptions
{
    COMAdminAuthenticationDefault = 0,
    COMAdminAuthenticationNone = 1,
    COMAdminAuthenticationConnect = 2,
    COMAdminAuthenticationCall = 3,
    COMAdminAuthenticationPacket = 4,
    COMAdminAuthenticationIntegrity = 5,
    COMAdminAuthenticationPrivacy = 6
};

enum COMAdminImpersonationLevelOptions
{
    COMAdminImpersonationAnonymous = 1,
    COMAdminImpersonationIdentify = 2,
    COMAdminImpersonationImpersonate = 3,
    COMAdminImpersonationDelegate = 4
};

enum COMAdminAuthenticationCapabilitiesOptions
{
    COMAdminAuthenticationCapabilitiesNone = 0,
    COMAdminAuthenticationCapabilitiesStaticCloaking = 32,
    COMAdminAuthenticationCapabilitiesDynamicCloaking = 64,
    COMAdminAuthenticationCapabilitiesSecureReference = 2
};

enum COMAdminOS
{
    COMAdminOSWindows3_1 = 1,
    COMAdminOSWindows9x = 2,
    COMAdminOSWindowsNT = 3,
    COMAdminOSWindowsNTEnterprise = 4
};

enum COMAdminServiceOptions
{
    COMAdminServiceLoadBalanceRouter = 1
};

enum COMAdminServiceStatusOptions
{
    COMAdminServiceStopped = 0,
    COMAdminServiceStartPending = 1,
    COMAdminServiceStopPending = 2,
    COMAdminServiceRunning = 3,
    COMAdminServiceContinuePending = 4,
    COMAdminServicePausePending = 5,
    COMAdminServicePaused = 6,
    COMAdminServiceUnknownState = 7
};

enum COMAdminFileFlags
{
    COMAdminFileFlagLoadable = 1,
    COMAdminFileFlagCOM = 2,
    COMAdminFileFlagContainsPS = 4,
    COMAdminFileFlagContainsComp = 8,
    COMAdminFileFlagContainsTLB = 16,
    COMAdminFileFlagSelfReg = 32,
    COMAdminFileFlagSelfUnReg = 64,
    COMAdminFileFlagUnloadableDLL = 128,
    COMAdminFileFlagDoesNotExist = 256,
    COMAdminFileFlagAlreadyInstalled = 512,
    COMAdminFileFlagBadTLB = 1024,
    COMAdminFileFlagGetClassObjFailed = 2048,
    COMAdminFileFlagClassNotAvailable = 4096,
    COMAdminFileFlagRegistrar = 8192,
    COMAdminFileFlagNoRegistrar = 16384,
    COMAdminFileFlagDLLRegsvrFailed = 32768,
    COMAdminFileFlagRegTLBFailed = 65536,
    COMAdminFileFlagRegistrarFailed = 131072,
    COMAdminFileFlagError = 262144
};

enum COMAdminComponentFlags
{
    COMAdminCompFlagTypeInfoFound = 1,
    COMAdminCompFlagCOMPlusPropertiesFound = 2,
    COMAdminCompFlagProxyFound = 4,
    COMAdminCompFlagInterfacesFound = 8,
    COMAdminCompFlagAlreadyInstalled = 16,
    COMAdminCompFlagNotInApplication = 32
};

enum COMAdminErrorCodes
{
    COMAdminErrObjectErrors = -2146368511,
    COMAdminErrObjectInvalid = -2146368510,
    COMAdminErrKeyMissing = -2146368509,
    COMAdminErrAlreadyInstalled = -2146368508,
    COMAdminErrAppFileWriteFail = -2146368505,
    COMAdminErrAppFileReadFail = -2146368504,
    COMAdminErrAppFileVersion = -2146368503,
    COMAdminErrBadPath = -2146368502,
    COMAdminErrApplicationExists = -2146368501,
    COMAdminErrRoleExists = -2146368500,
    COMAdminErrCantCopyFile = -2146368499,
    COMAdminErrNoUser = -2146368497,
    COMAdminErrInvalidUserids = -2146368496,
    COMAdminErrNoRegistryCLSID = -2146368495,
    COMAdminErrBadRegistryProgID = -2146368494,
    COMAdminErrAuthenticationLevel = -2146368493,
    COMAdminErrUserPasswdNotValid = -2146368492,
    COMAdminErrCLSIDOrIIDMismatch = -2146368488,
    COMAdminErrRemoteInterface = -2146368487,
    COMAdminErrDllRegisterServer = -2146368486,
    COMAdminErrNoServerShare = -2146368485,
    COMAdminErrDllLoadFailed = -2146368483,
    COMAdminErrBadRegistryLibID = -2146368482,
    COMAdminErrAppDirNotFound = -2146368481,
    COMAdminErrRegistrarFailed = -2146368477,
    COMAdminErrCompFileDoesNotExist = -2146368476,
    COMAdminErrCompFileLoadDLLFail = -2146368475,
    COMAdminErrCompFileGetClassObj = -2146368474,
    COMAdminErrCompFileClassNotAvail = -2146368473,
    COMAdminErrCompFileBadTLB = -2146368472,
    COMAdminErrCompFileNotInstallable = -2146368471,
    COMAdminErrNotChangeable = -2146368470,
    COMAdminErrNotDeletable = -2146368469,
    COMAdminErrSession = -2146368468,
    COMAdminErrCompMoveLocked = -2146368467,
    COMAdminErrCompMoveBadDest = -2146368466,
    COMAdminErrRegisterTLB = -2146368464,
    COMAdminErrSystemApp = -2146368461,
    COMAdminErrCompFileNoRegistrar = -2146368460,
    COMAdminErrCoReqCompInstalled = -2146368459,
    COMAdminErrServiceNotInstalled = -2146368458,
    COMAdminErrPropertySaveFailed = -2146368457,
    COMAdminErrObjectExists = -2146368456,
    COMAdminErrRegFileCorrupt = -2146368453,
    COMAdminErrPropertyOverflow = -2146368452,
    COMAdminErrNotInRegistry = -2146368450,
    COMAdminErrObjectNotPoolable = -2146368449,
    COMAdminErrApplidMatchesClsid = -2146368442,
    COMAdminErrRoleDoesNotExist = -2146368441,
    COMAdminErrStartAppNeedsComponents = -2146368440,
    COMAdminErrRequiresDifferentPlatform = -2146368439,
    COMAdminErrQueuingServiceNotAvailable = -2146367998,
    COMAdminErrObjectParentMissing = -2146367480,
    COMAdminErrObjectDoesNotExist = -2146367479,
    COMAdminErrCanNotExportAppProxy = -2146368438,
    COMAdminErrCanNotStartApp = -2146368437,
    COMAdminErrCanNotExportSystemApp = -2146368436,
    COMAdminErrCanNotSubscribeToComponent = -2146368435,
    COMAdminErrAppNotRunning = -2146367478,
    COMAdminSomeAlreadyPaused = 1116171,
    COMAdminSomeAlreadyRunning = 1116172,
    COMAdminErrCantRecycleLibraryApps = -2146367473,
    COMAdminErrCantRecycleServiceApps = -2146367471,
    COMAdminErrProcessAlreadyRecycled = -2146367470,
    COMAdminErrPausedProcessMayNotBeRecycled = -2146367469,
    COMAdminErrPartitionAccessDenied = -2146367464
};

//
// Wrapper method implementations
//

#include "comadmin.tli"

#pragma pack(pop)
