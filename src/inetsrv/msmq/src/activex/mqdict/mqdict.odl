//=--------------------------------------------------------------------------=
// mqdict.ODL
//=--------------------------------------------------------------------------=
// Copyright  1997  Microsoft Corporation.  All Rights Reserved.
//
// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO
// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
// PARTICULAR PURPOSE.
//=--------------------------------------------------------------------------=
//
// ODL file for the automation object(s) in this inproc server
//
//
#include "dispids.h"

//
// resource ids
//
#include "resrc1.h"

// can't include oaidl.h, so this will have to do
//
#define DISPID_NEWENUM -4

// This is our implementation dll
#define MQDICTDLL "mqdict.dll"

//=--------------------------------------------------------------------------=
// the libid for this type libray
//
[
    uuid(1E66EB00-714D-11d1-96FD-0060970DEBAE),
    helpstring("Microsoft Persistent Dictionary Object Library"),
    helpstringdll(MQDICTDLL),
    lcid(0x0000),
    version(1.0)
]
library MSMQDICT {
    typedef short Boolean;
    // standard imports
    //
    importlib("STDOLE32.TLB");
    // 
    // scripting engine runtime
    //
    importlib("scrrun.dll");

    typedef unsigned char BYTE;
    typedef unsigned long ULONG;
    typedef unsigned long DWORD;
    typedef int BOOL;

    // forwards defs
    interface IMSMQDictionary;

    typedef enum _CompareMethod {
        BinaryCompare = 0,
        TextCompare = 1,
        DatabaseCompare = 2
    } CompareMethod;

    // primary dispatch interface for CMSMQDictionary object
    //
    [
        uuid(CD83D9E1-4898-11d1-AAAC-0060970DEBAE),
        // helpstringcontext(IDS_IMSMQDICTIONARY),
        hidden,
        dual,
        odl
    ]
    interface IMSMQDictionary : IDispatch {
        // IDictionary properties/methods
        //
        [id(0), propputref, helpstring("Set or get the item for a given key.")]
        HRESULT _stdcall Item(
                        [in] VARIANT* Key, 
                        [in] VARIANT* pRetItem);
        [id(0), propput, helpstring("Set or get the item for a given key.")]
        HRESULT _stdcall Item(
                        [in] VARIANT* Key, 
                        [in] VARIANT* pRetItem);
        [id(0), propget, helpstring("Set or get the item for a given key.")]
        HRESULT _stdcall Item(
                        [in] VARIANT* Key, 
                        [out, retval] VARIANT* pRetItem);

        [helpstring("Add a new key and item to the dictionary.")]
        HRESULT _stdcall Add(
                        [in] VARIANT* Key, 
                        [in] VARIANT* Item);

        [propget, helpstring("Get the number of items in the dictionary.")]
        HRESULT _stdcall Count([out, retval] long* pCount);

        [helpstring("Determine if a given key is in the dictionary.")]
        HRESULT _stdcall Exists(
                        [in] VARIANT* Key, 
                        [out, retval] VARIANT_BOOL* pExists);

        [helpstring("Get an array containing all items in the dictionary.")]
        HRESULT _stdcall Items([out, retval] VARIANT* pItemsArray);

        [propput, helpstring("Change a key to a different key.")]
        HRESULT _stdcall Key(
                        [in] VARIANT* Key, 
                        [in] VARIANT* rhs);

        [helpstring("Get an array containing all keys in the dictionary.")]
        HRESULT _stdcall Keys([out, retval] VARIANT* pKeysArray);

        [helpstring("Remove a given key from the dictionary.")]
        HRESULT _stdcall Remove([in] VARIANT* Key);

        [helpstring("Remove all information from the dictionary.")]
        HRESULT _stdcall RemoveAll();

        [propput, helpstring("Set or get the string comparison method.")]
        HRESULT _stdcall CompareMode([in] CompareMethod pcomp);
        [propget, helpstring("Set or get the string comparison method.")]
        HRESULT _stdcall CompareMode([out, retval] CompareMethod* pcomp);

        [restricted]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** ppunk);

        [propget, hidden]
        HRESULT _stdcall HashVal(
                        [in] VARIANT* Key, 
                        [out, retval] VARIANT* HashVal);
    };


    // coclass for CMSMQDictionary
    //
    [
        // helpstringcontext(IDS_MSMQDICTIONARY),
        uuid(CD83D9E2-4898-11d1-AAAC-0060970DEBAE)
    ]
    coclass MSMQDictionary {
        [default]         interface IMSMQDictionary;
    };
};

