// Created by Microsoft (R) C/C++ Compiler Version 13.00.9234.4 (d8494b45).
//
// mqtrig.tlh
//
// C++ source equivalent of Win32 type library mqtrig.tlb
// compiler-generated file created 07/06/01 at 08:08:49 - DO NOT EDIT!

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

//
// Forward references and typedefs
//

struct __declspec(uuid("1d9f85b1-9666-11d2-8927-0008c70c0622"))
/* LIBID */ __MSMQTriggerObjects;
typedef enum __MIDL___MIDL_itf_mqtrig_0000_0001 RulesProcessingStatus;
enum __MIDL___MIDL_itf_mqtrig_0000_0001;
typedef enum __MIDL___MIDL_itf_mqtrig_0000_0002 SystemQueueIdentifier;
enum __MIDL___MIDL_itf_mqtrig_0000_0002;
typedef enum __MIDL___MIDL_itf_mqtrig_0000_0003 MsgProcessingType;
enum __MIDL___MIDL_itf_mqtrig_0000_0003;
struct __declspec(uuid("1d9f85c1-9666-11d2-8927-0008c70c0622"))
/* dispinterface */ _IMSMQTriggerSetEvents;
struct __declspec(uuid("07f19951-ab28-11d2-8936-000000000000"))
/* dual interface */ IMSMQPropertyBag;
struct __declspec(uuid("b0cdbf11-9774-11d2-8929-000000000000"))
/* dual interface */ IMSMQRuleHandler;
struct __declspec(uuid("b0cdbf13-9774-11d2-8929-000000000000"))
/* dispinterface */ _IMSMQRuleHandlerEvents;
struct __declspec(uuid("1d9f85bf-9666-11d2-8927-0008c70c0622"))
/* dual interface */ IMSMQTriggerSet;
struct __declspec(uuid("65221283-b64e-11d2-894c-0008c70c0622"))
/* dual interface */ IMSMQRuleSet;
struct __declspec(uuid("7c55d6a1-f584-11d2-89b2-000000000000"))
/* dual interface */ IMSMQTriggersConfig;
struct /* coclass */ MSMQTriggerSet;
struct /* coclass */ MSMQRuleHandler;
struct /* coclass */ MSMQPropertyBag;
struct /* coclass */ MSMQRuleSet;
struct /* coclass */ MSMQTriggersConfig;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(_IMSMQTriggerSetEvents, __uuidof(_IMSMQTriggerSetEvents));
_COM_SMARTPTR_TYPEDEF(IMSMQPropertyBag, __uuidof(IMSMQPropertyBag));
_COM_SMARTPTR_TYPEDEF(IMSMQRuleHandler, __uuidof(IMSMQRuleHandler));
_COM_SMARTPTR_TYPEDEF(_IMSMQRuleHandlerEvents, __uuidof(_IMSMQRuleHandlerEvents));
_COM_SMARTPTR_TYPEDEF(IMSMQTriggerSet, __uuidof(IMSMQTriggerSet));
_COM_SMARTPTR_TYPEDEF(IMSMQRuleSet, __uuidof(IMSMQRuleSet));
_COM_SMARTPTR_TYPEDEF(IMSMQTriggersConfig, __uuidof(IMSMQTriggersConfig));

//
// Type library items
//

enum __MIDL___MIDL_itf_mqtrig_0000_0001
{
    RULES_PROCESSING_CONTINUE = 0,
    RULES_PROCESSING_STOP = 1
};

enum __MIDL___MIDL_itf_mqtrig_0000_0002
{
    SYSTEM_QUEUE_NONE = 0,
    SYSTEM_QUEUE_JOURNAL = 1,
    SYSTEM_QUEUE_DEADLETTER = 2,
    SYSTEM_QUEUE_DEADXACT = 3
};

enum __MIDL___MIDL_itf_mqtrig_0000_0003
{
    PEEK_MESSAGE = 0,
    RECEIVE_MESSAGE = 1,
    RECEIVE_MESSAGE_XACT = 2
};

struct __declspec(uuid("1d9f85c1-9666-11d2-8927-0008c70c0622"))
_IMSMQTriggerSetEvents : IDispatch
{};

struct __declspec(uuid("07f19951-ab28-11d2-8936-000000000000"))
IMSMQPropertyBag : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Write (
        _bstr_t sPropertyName,
        const _variant_t & vPropertyValue );
    HRESULT Read (
        _bstr_t sPropertyName,
        VARIANT * pvPropertyValue );
    long GetCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Write (
        /*[in]*/ BSTR sPropertyName,
        /*[in]*/ VARIANT vPropertyValue ) = 0;
      virtual HRESULT __stdcall raw_Read (
        /*[in]*/ BSTR sPropertyName,
        /*[out]*/ VARIANT * pvPropertyValue ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
};

struct __declspec(uuid("b0cdbf11-9774-11d2-8929-000000000000"))
IMSMQRuleHandler : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Init (
        _bstr_t bstrRuleID,
        _bstr_t sRuleCondition,
        _bstr_t sRuleAction,
        long fShowWindow );
    HRESULT CheckRuleCondition (
        struct IMSMQPropertyBag * pIPropertyBag,
        long * pbConditionSatisfied );
    HRESULT ExecuteRule (
        struct IMSMQPropertyBag * pIPropertyBag,
        long fIsSerializedQueue,
        long * plRuleResult );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Init (
        /*[in]*/ BSTR bstrRuleID,
        /*[in]*/ BSTR sRuleCondition,
        /*[in]*/ BSTR sRuleAction,
        /*[in]*/ long fShowWindow ) = 0;
      virtual HRESULT __stdcall raw_CheckRuleCondition (
        /*[in]*/ struct IMSMQPropertyBag * pIPropertyBag,
        /*[out]*/ long * pbConditionSatisfied ) = 0;
      virtual HRESULT __stdcall raw_ExecuteRule (
        /*[in]*/ struct IMSMQPropertyBag * pIPropertyBag,
        /*[in]*/ long fIsSerializedQueue,
        /*[out]*/ long * plRuleResult ) = 0;
};

struct __declspec(uuid("b0cdbf13-9774-11d2-8929-000000000000"))
_IMSMQRuleHandlerEvents : IDispatch
{};

struct __declspec(uuid("1d9f85bf-9666-11d2-8927-0008c70c0622"))
IMSMQTriggerSet : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetTriggerStoreMachineName))
    _bstr_t TriggerStoreMachineName;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Refresh ( );
    HRESULT AddTrigger (
        _bstr_t sTriggerName,
        _bstr_t sQueueName,
        SystemQueueIdentifier SystemQueue,
        long lEnabled,
        long lSerialized,
        MsgProcessingType msgProcType,
        BSTR * psTriggerID );
    HRESULT DeleteTrigger (
        _bstr_t sTriggerID );
    HRESULT GetTriggerDetailsByID (
        _bstr_t sTriggerID,
        BSTR * psTriggerName,
        BSTR * psQueueName,
        SystemQueueIdentifier * pSystemQueue,
        long * plNumberOfRules,
        long * plEnabledStatus,
        long * plSerialized,
        MsgProcessingType * pMsgProcType );
    HRESULT GetTriggerDetailsByIndex (
        long lTriggerIndex,
        BSTR * psTriggerID,
        BSTR * psTriggerName,
        BSTR * psQueueName,
        SystemQueueIdentifier * pSystemQueue,
        long * plNumberOfRules,
        long * plEnabledStatus,
        long * plSerialized,
        MsgProcessingType * pMsgProcType );
    HRESULT GetRuleDetailsByTriggerID (
        _bstr_t sTriggerID,
        long lRuleIndex,
        BSTR * psRuleID,
        BSTR * psRuleName,
        BSTR * psDescription,
        BSTR * psCondition,
        BSTR * psAction,
        BSTR * psImplementationProgID,
        long * pfShowWindow );
    HRESULT GetRuleDetailsByTriggerIndex (
        long lTriggerIndex,
        long lRuleIndex,
        BSTR * psRuleID,
        BSTR * psRuleName,
        BSTR * psDescription,
        BSTR * psCondition,
        BSTR * psAction,
        BSTR * psImplementationProgID,
        long * pfShowWindow );
    long GetCount ( );
    HRESULT UpdateTrigger (
        _bstr_t sTriggerID,
        _bstr_t sTriggerName,
        _bstr_t sQueueName,
        SystemQueueIdentifier SystemQueue,
        long lEnabled,
        long lSerialized,
        MsgProcessingType msgProcType );
    HRESULT DetachAllRules (
        _bstr_t sTriggerID );
    HRESULT AttachRule (
        _bstr_t sTriggerID,
        _bstr_t sRuleID,
        long lPriority );
    HRESULT DetachRule (
        _bstr_t sTriggerID,
        _bstr_t sRuleID );
    HRESULT Init (
        _bstr_t bstrMachineName );
    _bstr_t GetTriggerStoreMachineName ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Refresh ( ) = 0;
      virtual HRESULT __stdcall raw_AddTrigger (
        /*[in]*/ BSTR sTriggerName,
        /*[in]*/ BSTR sQueueName,
        /*[in]*/ SystemQueueIdentifier SystemQueue,
        /*[in]*/ long lEnabled,
        /*[in]*/ long lSerialized,
        /*[in]*/ MsgProcessingType msgProcType,
        /*[out]*/ BSTR * psTriggerID ) = 0;
      virtual HRESULT __stdcall raw_DeleteTrigger (
        /*[in]*/ BSTR sTriggerID ) = 0;
      virtual HRESULT __stdcall raw_GetTriggerDetailsByID (
        /*[in]*/ BSTR sTriggerID,
        /*[out]*/ BSTR * psTriggerName,
        /*[out]*/ BSTR * psQueueName,
        /*[out]*/ SystemQueueIdentifier * pSystemQueue,
        /*[out]*/ long * plNumberOfRules,
        /*[out]*/ long * plEnabledStatus,
        /*[out]*/ long * plSerialized,
        /*[out]*/ MsgProcessingType * pMsgProcType ) = 0;
      virtual HRESULT __stdcall raw_GetTriggerDetailsByIndex (
        /*[in]*/ long lTriggerIndex,
        /*[out]*/ BSTR * psTriggerID,
        /*[out]*/ BSTR * psTriggerName,
        /*[out]*/ BSTR * psQueueName,
        /*[out]*/ SystemQueueIdentifier * pSystemQueue,
        /*[out]*/ long * plNumberOfRules,
        /*[out]*/ long * plEnabledStatus,
        /*[out]*/ long * plSerialized,
        /*[out]*/ MsgProcessingType * pMsgProcType ) = 0;
      virtual HRESULT __stdcall raw_GetRuleDetailsByTriggerID (
        /*[in]*/ BSTR sTriggerID,
        /*[in]*/ long lRuleIndex,
        /*[out]*/ BSTR * psRuleID,
        /*[out]*/ BSTR * psRuleName,
        /*[out]*/ BSTR * psDescription,
        /*[out]*/ BSTR * psCondition,
        /*[out]*/ BSTR * psAction,
        /*[out]*/ BSTR * psImplementationProgID,
        /*[out]*/ long * pfShowWindow ) = 0;
      virtual HRESULT __stdcall raw_GetRuleDetailsByTriggerIndex (
        /*[in]*/ long lTriggerIndex,
        /*[in]*/ long lRuleIndex,
        /*[out]*/ BSTR * psRuleID,
        /*[out]*/ BSTR * psRuleName,
        /*[out]*/ BSTR * psDescription,
        /*[out]*/ BSTR * psCondition,
        /*[out]*/ BSTR * psAction,
        /*[out]*/ BSTR * psImplementationProgID,
        /*[out]*/ long * pfShowWindow ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_UpdateTrigger (
        /*[in]*/ BSTR sTriggerID,
        /*[in]*/ BSTR sTriggerName,
        /*[in]*/ BSTR sQueueName,
        /*[in]*/ SystemQueueIdentifier SystemQueue,
        /*[in]*/ long lEnabled,
        /*[in]*/ long lSerialized,
        /*[in]*/ MsgProcessingType msgProcType ) = 0;
      virtual HRESULT __stdcall raw_DetachAllRules (
        /*[in]*/ BSTR sTriggerID ) = 0;
      virtual HRESULT __stdcall raw_AttachRule (
        /*[in]*/ BSTR sTriggerID,
        /*[in]*/ BSTR sRuleID,
        /*[in]*/ long lPriority ) = 0;
      virtual HRESULT __stdcall raw_DetachRule (
        /*[in]*/ BSTR sTriggerID,
        /*[in]*/ BSTR sRuleID ) = 0;
      virtual HRESULT __stdcall raw_Init (
        /*[in]*/ BSTR bstrMachineName ) = 0;
      virtual HRESULT __stdcall get_TriggerStoreMachineName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
};

struct __declspec(uuid("65221283-b64e-11d2-894c-0008c70c0622"))
IMSMQRuleSet : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetTriggerStoreMachineName))
    _bstr_t TriggerStoreMachineName;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Refresh ( );
    long GetCount ( );
    HRESULT GetRuleDetailsByID (
        _bstr_t sRuleID,
        BSTR * psRuleName,
        BSTR * psDescription,
        BSTR * psCondition,
        BSTR * psAction,
        BSTR * psImplementationProgID,
        long * pfShowWindow );
    HRESULT GetRuleDetailsByIndex (
        long lRuleIndex,
        BSTR * psRuleID,
        BSTR * psRuleName,
        BSTR * psDescription,
        BSTR * psCondition,
        BSTR * psAction,
        BSTR * psImplementationProgID,
        long * pfShowWindow );
    HRESULT Delete (
        _bstr_t sRuleID );
    HRESULT Add (
        _bstr_t sName,
        _bstr_t sDescription,
        _bstr_t sCondition,
        _bstr_t sAction,
        _bstr_t sImplementation,
        long fShowWindow,
        BSTR * psRuleID );
    HRESULT Update (
        _bstr_t sRuleID,
        _bstr_t sName,
        _bstr_t sDescription,
        _bstr_t sCondition,
        _bstr_t sAction,
        _bstr_t sImplementation,
        long fShowWindow );
    HRESULT Init (
        _bstr_t bstrMachineName );
    _bstr_t GetTriggerStoreMachineName ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Refresh ( ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetRuleDetailsByID (
        /*[in]*/ BSTR sRuleID,
        /*[out]*/ BSTR * psRuleName,
        /*[out]*/ BSTR * psDescription,
        /*[out]*/ BSTR * psCondition,
        /*[out]*/ BSTR * psAction,
        /*[out]*/ BSTR * psImplementationProgID,
        /*[out]*/ long * pfShowWindow ) = 0;
      virtual HRESULT __stdcall raw_GetRuleDetailsByIndex (
        /*[in]*/ long lRuleIndex,
        /*[out]*/ BSTR * psRuleID,
        /*[out]*/ BSTR * psRuleName,
        /*[out]*/ BSTR * psDescription,
        /*[out]*/ BSTR * psCondition,
        /*[out]*/ BSTR * psAction,
        /*[out]*/ BSTR * psImplementationProgID,
        /*[out]*/ long * pfShowWindow ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in]*/ BSTR sRuleID ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR sName,
        /*[in]*/ BSTR sDescription,
        /*[in]*/ BSTR sCondition,
        /*[in]*/ BSTR sAction,
        /*[in]*/ BSTR sImplementation,
        /*[in]*/ long fShowWindow,
        /*[out]*/ BSTR * psRuleID ) = 0;
      virtual HRESULT __stdcall raw_Update (
        /*[in]*/ BSTR sRuleID,
        /*[in]*/ BSTR sName,
        /*[in]*/ BSTR sDescription,
        /*[in]*/ BSTR sCondition,
        /*[in]*/ BSTR sAction,
        /*[in]*/ BSTR sImplementation,
        /*[in]*/ long fShowWindow ) = 0;
      virtual HRESULT __stdcall raw_Init (
        /*[in]*/ BSTR bstrMachineName ) = 0;
      virtual HRESULT __stdcall get_TriggerStoreMachineName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
};

struct __declspec(uuid("7c55d6a1-f584-11d2-89b2-000000000000"))
IMSMQTriggersConfig : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTriggerStoreMachineName))
    _bstr_t TriggerStoreMachineName;
    __declspec(property(get=GetInitialThreads,put=PutInitialThreads))
    long InitialThreads;
    __declspec(property(get=GetMaxThreads,put=PutMaxThreads))
    long MaxThreads;
    __declspec(property(get=GetNotificationsQueueName))
    _bstr_t NotificationsQueueName;
    __declspec(property(get=GetDefaultMsgBodySize,put=PutDefaultMsgBodySize))
    long DefaultMsgBodySize;
    __declspec(property(get=GetInitTimeout,put=PutInitTimeout))
    long InitTimeout;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetTriggerStoreMachineName ( );
    long GetInitialThreads ( );
    void PutInitialThreads (
        long pVal );
    long GetMaxThreads ( );
    void PutMaxThreads (
        long pVal );
    _bstr_t GetNotificationsQueueName ( );
    long GetDefaultMsgBodySize ( );
    void PutDefaultMsgBodySize (
        long plMsgBodySize );
    long GetInitTimeout ( );
    void PutInitTimeout (
        long pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TriggerStoreMachineName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_InitialThreads (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_InitialThreads (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_MaxThreads (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MaxThreads (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_NotificationsQueueName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_DefaultMsgBodySize (
        /*[out,retval]*/ long * plMsgBodySize ) = 0;
      virtual HRESULT __stdcall put_DefaultMsgBodySize (
        /*[in]*/ long plMsgBodySize ) = 0;
      virtual HRESULT __stdcall get_InitTimeout (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_InitTimeout (
        /*[in]*/ long pVal ) = 0;
};

struct __declspec(uuid("1d9f85c0-9666-11d2-8927-0008c70c0622"))
MSMQTriggerSet;
    // [ default ] interface IMSMQTriggerSet
    // [ default, source ] dispinterface _IMSMQTriggerSetEvents

struct __declspec(uuid("b0cdbf12-9774-11d2-8929-000000000000"))
MSMQRuleHandler;
    // [ default ] interface IMSMQRuleHandler
    // [ default, source ] dispinterface _IMSMQRuleHandlerEvents

struct __declspec(uuid("07f19952-ab28-11d2-8936-000000000000"))
MSMQPropertyBag;
    // [ default ] interface IMSMQPropertyBag

struct __declspec(uuid("65221284-b64e-11d2-894c-0008c70c0622"))
MSMQRuleSet;
    // [ default ] interface IMSMQRuleSet

struct __declspec(uuid("7c55d6a2-f584-11d2-89b2-000000000000"))
MSMQTriggersConfig;
    // [ default ] interface IMSMQTriggersConfig

//
// Wrapper method implementations
//

#include "mqtrig.tli"

#pragma pack(pop)
