// Created by Microsoft (R) C/C++ Compiler Version 13.00.9234.4 (d8494b45).
//
// c:\nt\inetsrv\msmq\src\trigger\mqgentr\obj\ia64\mqtrig.tli
//
// Wrapper implementations for Win32 type library mqtrig.tlb
// compiler-generated file created 07/06/01 at 08:08:49 - DO NOT EDIT!

#pragma once

//
// interface IMSMQPropertyBag wrapper method implementations
//

inline HRESULT IMSMQPropertyBag::Write ( _bstr_t sPropertyName, const _variant_t & vPropertyValue ) {
    HRESULT _hr = raw_Write(sPropertyName, vPropertyValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMSMQPropertyBag::Read ( _bstr_t sPropertyName, VARIANT * pvPropertyValue ) {
    HRESULT _hr = raw_Read(sPropertyName, pvPropertyValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IMSMQPropertyBag::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IMSMQRuleHandler wrapper method implementations
//

inline HRESULT IMSMQRuleHandler::Init ( _bstr_t bstrRuleID, _bstr_t sRuleCondition, _bstr_t sRuleAction, long fShowWindow ) {
    HRESULT _hr = raw_Init(bstrRuleID, sRuleCondition, sRuleAction, fShowWindow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMSMQRuleHandler::CheckRuleCondition ( struct IMSMQPropertyBag * pIPropertyBag, long * pbConditionSatisfied ) {
    HRESULT _hr = raw_CheckRuleCondition(pIPropertyBag, pbConditionSatisfied);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMSMQRuleHandler::ExecuteRule ( struct IMSMQPropertyBag * pIPropertyBag, long fIsSerializedQueue, long * plRuleResult ) {
    HRESULT _hr = raw_ExecuteRule(pIPropertyBag, fIsSerializedQueue, plRuleResult);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IMSMQTriggerSet wrapper method implementations
//

inline HRESULT IMSMQTriggerSet::Refresh ( ) {
    HRESULT _hr = raw_Refresh();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMSMQTriggerSet::AddTrigger ( _bstr_t sTriggerName, _bstr_t sQueueName, SystemQueueIdentifier SystemQueue, long lEnabled, long lSerialized, MsgProcessingType msgProcType, BSTR * psTriggerID ) {
    HRESULT _hr = raw_AddTrigger(sTriggerName, sQueueName, SystemQueue, lEnabled, lSerialized, msgProcType, psTriggerID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMSMQTriggerSet::DeleteTrigger ( _bstr_t sTriggerID ) {
    HRESULT _hr = raw_DeleteTrigger(sTriggerID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMSMQTriggerSet::GetTriggerDetailsByID ( _bstr_t sTriggerID, BSTR * psTriggerName, BSTR * psQueueName, SystemQueueIdentifier * pSystemQueue, long * plNumberOfRules, long * plEnabledStatus, long * plSerialized, MsgProcessingType * pMsgProcType ) {
    HRESULT _hr = raw_GetTriggerDetailsByID(sTriggerID, psTriggerName, psQueueName, pSystemQueue, plNumberOfRules, plEnabledStatus, plSerialized, pMsgProcType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMSMQTriggerSet::GetTriggerDetailsByIndex ( long lTriggerIndex, BSTR * psTriggerID, BSTR * psTriggerName, BSTR * psQueueName, SystemQueueIdentifier * pSystemQueue, long * plNumberOfRules, long * plEnabledStatus, long * plSerialized, MsgProcessingType * pMsgProcType ) {
    HRESULT _hr = raw_GetTriggerDetailsByIndex(lTriggerIndex, psTriggerID, psTriggerName, psQueueName, pSystemQueue, plNumberOfRules, plEnabledStatus, plSerialized, pMsgProcType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMSMQTriggerSet::GetRuleDetailsByTriggerID ( _bstr_t sTriggerID, long lRuleIndex, BSTR * psRuleID, BSTR * psRuleName, BSTR * psDescription, BSTR * psCondition, BSTR * psAction, BSTR * psImplementationProgID, long * pfShowWindow ) {
    HRESULT _hr = raw_GetRuleDetailsByTriggerID(sTriggerID, lRuleIndex, psRuleID, psRuleName, psDescription, psCondition, psAction, psImplementationProgID, pfShowWindow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMSMQTriggerSet::GetRuleDetailsByTriggerIndex ( long lTriggerIndex, long lRuleIndex, BSTR * psRuleID, BSTR * psRuleName, BSTR * psDescription, BSTR * psCondition, BSTR * psAction, BSTR * psImplementationProgID, long * pfShowWindow ) {
    HRESULT _hr = raw_GetRuleDetailsByTriggerIndex(lTriggerIndex, lRuleIndex, psRuleID, psRuleName, psDescription, psCondition, psAction, psImplementationProgID, pfShowWindow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IMSMQTriggerSet::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IMSMQTriggerSet::UpdateTrigger ( _bstr_t sTriggerID, _bstr_t sTriggerName, _bstr_t sQueueName, SystemQueueIdentifier SystemQueue, long lEnabled, long lSerialized, MsgProcessingType msgProcType ) {
    HRESULT _hr = raw_UpdateTrigger(sTriggerID, sTriggerName, sQueueName, SystemQueue, lEnabled, lSerialized, msgProcType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMSMQTriggerSet::DetachAllRules ( _bstr_t sTriggerID ) {
    HRESULT _hr = raw_DetachAllRules(sTriggerID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMSMQTriggerSet::AttachRule ( _bstr_t sTriggerID, _bstr_t sRuleID, long lPriority ) {
    HRESULT _hr = raw_AttachRule(sTriggerID, sRuleID, lPriority);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMSMQTriggerSet::DetachRule ( _bstr_t sTriggerID, _bstr_t sRuleID ) {
    HRESULT _hr = raw_DetachRule(sTriggerID, sRuleID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMSMQTriggerSet::Init ( _bstr_t bstrMachineName ) {
    HRESULT _hr = raw_Init(bstrMachineName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IMSMQTriggerSet::GetTriggerStoreMachineName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TriggerStoreMachineName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IMSMQRuleSet wrapper method implementations
//

inline HRESULT IMSMQRuleSet::Refresh ( ) {
    HRESULT _hr = raw_Refresh();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IMSMQRuleSet::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IMSMQRuleSet::GetRuleDetailsByID ( _bstr_t sRuleID, BSTR * psRuleName, BSTR * psDescription, BSTR * psCondition, BSTR * psAction, BSTR * psImplementationProgID, long * pfShowWindow ) {
    HRESULT _hr = raw_GetRuleDetailsByID(sRuleID, psRuleName, psDescription, psCondition, psAction, psImplementationProgID, pfShowWindow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMSMQRuleSet::GetRuleDetailsByIndex ( long lRuleIndex, BSTR * psRuleID, BSTR * psRuleName, BSTR * psDescription, BSTR * psCondition, BSTR * psAction, BSTR * psImplementationProgID, long * pfShowWindow ) {
    HRESULT _hr = raw_GetRuleDetailsByIndex(lRuleIndex, psRuleID, psRuleName, psDescription, psCondition, psAction, psImplementationProgID, pfShowWindow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMSMQRuleSet::Delete ( _bstr_t sRuleID ) {
    HRESULT _hr = raw_Delete(sRuleID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMSMQRuleSet::Add ( _bstr_t sName, _bstr_t sDescription, _bstr_t sCondition, _bstr_t sAction, _bstr_t sImplementation, long fShowWindow, BSTR * psRuleID ) {
    HRESULT _hr = raw_Add(sName, sDescription, sCondition, sAction, sImplementation, fShowWindow, psRuleID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMSMQRuleSet::Update ( _bstr_t sRuleID, _bstr_t sName, _bstr_t sDescription, _bstr_t sCondition, _bstr_t sAction, _bstr_t sImplementation, long fShowWindow ) {
    HRESULT _hr = raw_Update(sRuleID, sName, sDescription, sCondition, sAction, sImplementation, fShowWindow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMSMQRuleSet::Init ( _bstr_t bstrMachineName ) {
    HRESULT _hr = raw_Init(bstrMachineName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IMSMQRuleSet::GetTriggerStoreMachineName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TriggerStoreMachineName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IMSMQTriggersConfig wrapper method implementations
//

inline _bstr_t IMSMQTriggersConfig::GetTriggerStoreMachineName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TriggerStoreMachineName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long IMSMQTriggersConfig::GetInitialThreads ( ) {
    long _result = 0;
    HRESULT _hr = get_InitialThreads(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IMSMQTriggersConfig::PutInitialThreads ( long pVal ) {
    HRESULT _hr = put_InitialThreads(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IMSMQTriggersConfig::GetMaxThreads ( ) {
    long _result = 0;
    HRESULT _hr = get_MaxThreads(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IMSMQTriggersConfig::PutMaxThreads ( long pVal ) {
    HRESULT _hr = put_MaxThreads(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IMSMQTriggersConfig::GetNotificationsQueueName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NotificationsQueueName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long IMSMQTriggersConfig::GetDefaultMsgBodySize ( ) {
    long _result = 0;
    HRESULT _hr = get_DefaultMsgBodySize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IMSMQTriggersConfig::PutDefaultMsgBodySize ( long plMsgBodySize ) {
    HRESULT _hr = put_DefaultMsgBodySize(plMsgBodySize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IMSMQTriggersConfig::GetInitTimeout ( ) {
    long _result = 0;
    HRESULT _hr = get_InitTimeout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IMSMQTriggersConfig::PutInitTimeout ( long pVal ) {
    HRESULT _hr = put_InitTimeout(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}
