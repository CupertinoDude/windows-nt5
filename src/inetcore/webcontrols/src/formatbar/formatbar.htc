<!--Copyright (c) 2000 Microsoft Corporation.  All rights reserved.-->
<HTML XMLNS:IE="http://www.microsoft.com/windows/ie/">
<HEAD>
<?IMPORT NAMESPACE="IE" IMPLEMENTATION="toolbar.htc">
<?IMPORT NAMESPACE="IE" IMPLEMENTATION="tbbutton.htc">
<?IMPORT NAMESPACE="IE" IMPLEMENTATION="tbselect.htc">
<?IMPORT NAMESPACE="IE" IMPLEMENTATION="tbmenu.htc">
  
<PUBLIC:COMPONENT tagName="FORMATBAR" supportsEditMode='on'>
	<!-- Derived methods from toolbar -->
	<PUBLIC:METHOD NAME="buttonDown" internalName="f_buttonDown" />
	<PUBLIC:METHOD NAME="enableItem" internalName="f_enableItem" />
	<PUBLIC:METHOD NAME="item" internalName="f_getItem" />
	<PUBLIC:METHOD NAME="showItem" internalName="f_showItem" />

	<PUBLIC:PROPERTY NAME="busy" GET="f_getBusy" PUT="f_setBusy" />
	<PUBLIC:PROPERTY NAME="DOM" GET="f_getDOM"/>
	<PUBLIC:PROPERTY NAME="disable" GET='f_getDisable' PUT='f_setDisable'/>

	<!-- Formatbar methods & properties -->
	<PUBLIC:PROPERTY NAME="styles" GET="f_getStyles" PUT="f_setStyles" />
	<PUBLIC:PROPERTY NAME="fontNames" GET="f_getFonts" PUT="f_setFonts" />
	<PUBLIC:PROPERTY NAME="fontSizes" GET="f_getSizes" PUT="f_setSizes" />
	<PUBLIC:PROPERTY NAME="fontColors" GET="f_getColors" PUT="f_setColors" />
	<PUBLIC:PROPERTY NAME="focusTarget" GET="f_getFocusTarget" PUT="f_setFocusTarget" />
	<PUBLIC:PROPERTY NAME="commandTarget" GET="f_getCommandTarget" PUT="f_setCommandTarget" />
	<PUBLIC:PROPERTY NAME="interval" internalname="g_interval" />
	<PUBLIC:PROPERTY NAME="labels" internalname="g_szLabels" />

	<PUBLIC:ATTACH EVENT="oncontentready" ONEVENT="fnInit()"/>
	<PUBLIC:ATTACH EVENT="ondocumentready" ONEVENT="cb_ondocumentready()"/>
	<PUBLIC:ATTACH EVENT="onbeforedeactivate" ONEVENT="f_ontbBlur()"/>

	<PUBLIC:EVENT id="eOnError" name="onerror">
</PUBLIC:COMPONENT>
<PUBLIC:DEFAULTS tabStop=true viewMasterTab=false />

<SCRIPT>
var g_szTarget = null;
var g_szFocus = null;
var g_oTarget = null;
var g_oFocus = null;
var g_bState = 0;
var g_nUpdating = 0;
var g_rgItems = null;
var g_interval=500;
var g_nItems = 0;
var g_rgFontNames = { "Arial":"Arial", "Courier":"Courier", "Garamond":"Garamond",
					  "Tahoma":"Tahoma", "Times New Roman":"Times New Roman", "Verdana":"Verdana" };
var g_rgFontSizes = { "1":"8", "2":"10", "3":"12", "4":"14", "5":"18","6":"24","7":"36" };
var g_rgParaStyles = { "Normal":"Normal", "Formatted":"Formatted", "Address":"Address",
						"Heading 1":"Heading 1", "Heading 2":"Heading 2", "Heading 3":"Heading 3",
						"Heading 4":"Heading 4", "Heading 5":"Heading 5", "Heading 6":"Heading 6" }
var g_rgFontColors = null;
var g_oToolbar = null;
var g_szLabels = null;
var g_nTimerId = 0;

var g_szDefault = '<IE:TOOLBAR unselectable="on" >\
<IE:select id="style" />\
	<IE:select id="FontName" />\
	<IE:separator/>\
	<IE:select id="FontSize" />\
	<IE:menu id="fontcolor" type="simple" title="Font Color" img="form-fgcolor.gif" columns="4">\
		<IE:button type="color" id="forecolor" value="#000000" title="black"/>\
		<IE:button type="color" id="forecolor" value="#808080" title="gray"/>\
		<IE:button type="color" id="forecolor" value="#800000" title="maroon"/>\
		<IE:button type="color" id="forecolor" value="#808000" title="olive"/>\
		<IE:button type="color" id="forecolor" value="#008000" title="green"/>\
		<IE:button type="color" id="forecolor" value="#008080" title="teal"/>\
		<IE:button type="color" id="forecolor" value="#000080" title="navy"/>\
		<IE:button type="color" id="forecolor" value="#800080" title="purple"/>\
		<IE:button type="color" id="forecolor" value="#ffffff" title="white"/>\
		<IE:button type="color" id="forecolor" value="#c0c0c0" title="silver"/>\
		<IE:button type="color" id="forecolor" value="#ff0000" title="red"/>\
		<IE:button type="color" id="forecolor" value="#ffff00" title="yellow"/>\
		<IE:button type="color" id="forecolor" value="#00ff00" title="lime"/>\
		<IE:button type="color" id="forecolor" value="#00ffff" title="aqua"/>\
		<IE:button type="color" id="forecolor" value="#0000ff" title="blue"/>\
		<IE:button type="color" id="forecolor" value="#ff00ff" title="fuchsia"/>\
	</IE:menu>\
	<IE:exclusive>\
		<IE:button id="Bold" title="Bold" style="text-align:center;height:24px;width:24px;"><B>B</B></IE:button>\
	</IE:exclusive>\
	<IE:exclusive>\
		<IE:button id="Italic" title="Italic" style="text-align:center;height:24px;width:24px;"><B><I>I</I></B></IE:button>\
	</IE:exclusive>\
	<IE:exclusive>\
		<IE:button id="Underline" title="Underline"  style="font-weight:bold;text-align:center;height:24px;width:24px;"><U>U</U></IE:button>\
	</IE:exclusive>\
	<IE:exclusive>\
		<IE:button id="StrikeThrough" title="Strike through text" style="font-weight:bold;text-align:center;height:24px;width:24px;"><S>S</S></IE:button>\
	</IE:exclusive>\
	<IE:exclusive>\
		<IE:button id="SubScript" title="Subscript" style="font-weight:bold;text-align:center;height:24px;width:24px;">X<SUB>2</SUB></IE:button>\
	</IE:exclusive>\
	<IE:exclusive>\
		<IE:button id="SuperScript" title="Superscript" style="font-weight:bold;text-align:center;height:24px;width:24px;">X<SUP>2</SUP></IE:button>\
	</IE:exclusive>\
	<IE:separator/>\
	<IE:group>\
		<IE:button id="JustifyLeft" title="Align Left" img="form-justify_left.gif" />\
		<IE:button id="JustifyCenter" title="Center" img="form-justify_center.gif" />\
		<IE:button id="JustifyRight" title="Align Right" img="form-justify_right.gif" />\
	</IE:group>\
	<IE:exclusive>\
		<IE:button id="InsertUnorderedList" title="Bullets" img="form-bullist.gif" />\
		<IE:button id="InsertOrderedList" title="Numbered List" img="form-numlist.gif" />\
	</IE:exclusive>\
	<IE:button id="Outdent" title="Decrease Indent" img="form-deindent.gif" />\
	<IE:button id="Indent" title="Increase Indent" img="form-inindent.gif" />\
</IE:TOOLBAR>';

function fnInit()
{
	defaults.viewLink = document;
	if( 0 != element.innerHTML.length )
	{
		var re = new RegExp( element.scopeName + ":", "ig");
		var szText = '<IE:TOOLBAR unselectable="on" >' + element.innerHTML.replace( re, "IE:" ) + '</IE:TOOLBAR>';
		document.body.innerHTML = szText;
	}
	else
	{
		document.body.innerHTML = g_szDefault;
	}
	g_oToolbar = document.body.firstChild;
	g_oToolbar.attachEvent( "onclick", onClick );
}

function onClick()
{
	if( null == g_oTarget || null == event.srcElement )
	{
		return;
	}

	g_nUpdating++;

	var oDoc = g_oTarget.document;
	switch( event.srcElement.id )
	{
		case "Bold":
		case "Italic":
		case "Underline":
		case "JustifyLeft":
		case "JustifyCenter":
		case "JustifyRight":
		case "Indent":
		case "Outdent":
		case "InsertUnorderedList":
		case "InsertOrderedList":
		case "StrikeThrough":
		case "SubScript":
		case "SuperScript":
			oDoc.execCommand(event.srcElement.id);
			break;
		case "FontName":
			oDoc.execCommand("FontName", false, event.value);
			break;
		case "FontSize":
			oDoc.execCommand("FontSize", false, event.value);
			break;
		case "forecolor":
			oDoc.execCommand("ForeColor", false, event.srcElement.value );
			break;
		case "style":
			oDoc.execCommand("FormatBlock", false, event.value );
			break;
		default:
			g_nUpdating--;
			return;
	}
	event.cancelBubble=true;
	g_oTarget.focus();
	g_nUpdating--;
}

function f_ontbBlur()
{
	if( null != g_oFocus && g_oFocus.contains( event.toElement ) )
	{
		return;
	};

	g_oToolbar.disable = true;
}

function f_menuHide()
{
	if( event.fBlock )
	{
		return;
	}

	var x = event.clientX;
	var y = event.clientY;
	var oRect = element.getClientRects();
	oRect = oRect[0];
	var oTemp = document.elementFromPoint( event.clientX + oRect[0].left, event.clientY + oRect[0].top );
	if( null == oTemp || (oTemp != g_oTarget && oTemp != element) )
	{
		g_oToolbar.disable = true;
	}
}

function cb_ondocumentready()
{
	g_bState = 1;
	f_setCommandTarget( g_szTarget );
	if( null != g_szFocus )
	{
		f_setFocusTarget( g_szFocus );
	}
	else if( null != g_oTarget )
	{
		f_setFocusTarget( g_oTarget );
	}
	f_setStyles( g_rgParaStyles );
	f_setFonts( g_rgFontNames );
	f_setSizes( g_rgFontSizes );

	g_rgItems = new Array( 17 );
	g_rgItems[0] = g_oToolbar.item("style");
	g_rgItems[1] = g_oToolbar.item("FontName");
	g_rgItems[2] = g_oToolbar.item("FontSize");
	g_rgItems[3] = g_oToolbar.item("fontcolor");
	g_rgItems[4] = g_oToolbar.item("Bold");
	g_rgItems[5] = g_oToolbar.item("Italic");
	g_rgItems[6] = g_oToolbar.item("Underline");
	g_rgItems[7] = g_oToolbar.item("StrikeThrough");
	g_rgItems[8] = g_oToolbar.item("SubScript");
	g_rgItems[9] = g_oToolbar.item("SuperScript");
	g_rgItems[10] = g_oToolbar.item("JustifyLeft");
	g_rgItems[11] = g_oToolbar.item("JustifyCenter");
	g_rgItems[12] = g_oToolbar.item("JustifyRight");
	g_rgItems[13] = g_oToolbar.item("InsertUnorderedList");
	g_rgItems[14] = g_oToolbar.item("InsertOrderedList");
	g_rgItems[15] = g_oToolbar.item("Outdent");
	g_rgItems[16] = g_oToolbar.item("Indent");
	g_nItems = 0;
	for( var i=0;i < g_rgItems.length; i++ )
	{
		if( null != g_rgItems[i] )
		{
			g_nItems++;
		}
	}
	mf_setLabels( g_szLabels );
	f_setColors( g_rgFontColors );

}

function mf_setOptions( oSel, rgOpts )
{
	if( null == oSel )
	{
		return;
	}

	var oOptions = oSel.options;
	for( var i = oOptions.length-1; i >= 0; i-- )
	{
		oOptions[i] = null;
	}

	if( "string" == typeof( rgOpts ) )
	{
		var re = /([^:]+):([^;]+);?/g;
		var rgRc = null;
		i = 0;
		do
		{
			rgRc = re.exec( rgOpts );
			if( null != rgRc )
			{
				var oOpt = new Option();
				oOpt.value = rgRc[1];
				oOpt.text = rgRc[2];
				oOptions[ i++ ] = oOpt;
			}
		}
		while( rgRc != null );
		return;
	}

	i = 0;
	var oOpt;
	var index;
	for( index in rgOpts )
	{
		oOpt = new Option();
		oOpt.value = index;
		oOpt.text = rgOpts[index];
		oOptions[i++] = oOpt;
	}
}

function mf_getOptions( oSel )
{
	if( null == oSel )
	{
		return;
	}
	var rgOpts = new Array();

	var oOptions = oSel.options;
	for( var i = 0; i < oOptions.length; i++ )
	{
		rgOpts[ oOptions[i].value ] = oOptions[i].text;
	}
	return rgOpts;
}

function f_getFonts()
{
	var obj = g_oToolbar.item("FontName");
	return( mf_getOptions( obj ) );
}

function f_setFonts( rgFonts )
{
	g_rgFontNames = rgFonts;
	if( !g_bState )
	{
		return;
	}

	var obj = g_oToolbar.item("FontName");
	mf_setOptions( obj, g_rgFontNames );
}

function f_getStyles()
{
	var obj = g_oToolbar.item("style");
	return( mf_getOptions( obj ) );
}

function f_setStyles( rgStyles )
{
	g_rgParaStyles = rgStyles;
	if( !g_bState )
	{
		return;
	}

	var obj = g_oToolbar.item("style");
	mf_setOptions( obj, g_rgParaStyles );
}

function f_getSizes()
{
	var obj = g_oToolbar.item("FontSize");
	return( mf_getOptions( obj ) );
}

function f_setSizes(rgSizes)
{
	g_rgFontSizes = rgSizes;
	if( !g_bState )
	{
		return;
	}

	var obj = g_oToolbar.item("FontSize");
	mf_setOptions( obj, g_rgFontSizes );
}

function f_getColors()
{
	if( null == g_rgItems[3] )
	{
		return( null );
	}

	var oMenu = g_oToolbar.menu( g_rgItems[3] );
	if( null == oMenu )
	{
		return( null );
	}

	var rgItems = new Array();
	for( var e = new Enumerator( oMenu.cells );!e.atEnd();e.moveNext())
	{
		var obj = e.item();
		if( "Button" === obj.name )
		{
			if( null != obj.value )
			{
				rgItems[ obj.value ] = obj;
			}
		}
	}
	return( rgItems );
}

function f_setColors( newVal )
{
	g_rgFontColors = newVal;
	if( !g_bState )
	{
		return;
	}

	if( null == newVal )
	{
		return;
	}

	var oTemp;
	switch( typeof( newVal ) )
	{
		case "string":
		{
			var re = /([^:]+):([^;]+);?/g;
			var rgRc = null;
			i = 0;
			var szTemp = newVal;
			oTemp = new Array();
			do
			{
				rgRc = re.exec( szTemp );
				if( null != rgRc )
				{
					oTemp[ String(rgRc[1]) ] = rgRc[2];
//					szTemp = szTemp.substring( rgRc.lastIndex );
				}
			}
			while( rgRc != null );
			break;
		}
		case "object":
		{
			if( 0 == newVal.length )
			{
				return;
			}
			oTemp = newVal;
			break;
		}
		default:
			return;
	}

	if( null == g_rgItems[3] )
	{
		return( null );
	}

	var oMenu = g_oToolbar.menu( g_rgItems[3] );
	if( null == oMenu )
	{
		return( null );
	}

	var oCur;
	var index;
	for( index in oTemp )
	{
		for( oCur = oMenu.firstChild; null != oCur; oCur = oCur.nextSibling )
		{
			if( "button" === oCur.tagName )
			{
				if( null != oCur.value && index == oCur.value)
				{
					oCur.title = oTemp[index];
					break;
				}
			}
		}
	}
}

function f_getCommandTarget()
{
	return g_oTarget;
}

function f_initBlockFormats()
{
	var oDoc = element.document;
	var rc = oDoc.queryCommandValue("GETBLOCKFORMATS");
}

function f_setCommandTarget(newVal)
{
	g_szTarget = newVal;
	if( !g_bState )
	{
		return;
	}

	g_oTarget = null;

	var oTarget = newVal;
	var szType = typeof(newVal);
	if( 'string' === szType )
	{
		oTarget = element.document.all[newVal];
	}
	else if ( 'object' !== szType)
	{
		return;
	}

	if( null != oTarget )
	{
		g_oTarget = (oTarget.length) ? oTarget[0] : oTarget;
		g_oToolbar.disable = (g_oTarget != g_oTarget.document.activeElement);
		f_initBlockFormats();
	}
}

function f_getFocusTarget()
{
	return g_oFocus;
}

function f_setFocusTarget(newVal)
{
	g_szFocus = newVal;
	if( !g_bState )
	{
		return;
	}

	if (g_oFocus != null)
	{
		g_oFocus.detachEvent("onfocus", mf_onFocus);
		g_oFocus.detachEvent("onbeforedeactivate", mf_onDeactivate);
		if( "IFRAME" === g_oFocus.tagName )
		{
			g_oFocus.detachEvent( "onblur", mf_onBlur );
		}
		g_oFocus = null;
	}

	var oFocus = newVal;
	var szType = typeof(newVal);
	if( 'string' === szType )
	{
		oFocus = element.document.all[newVal];
	}
	else if ( 'object' !== szType)
	{
		return;
	}

	if( oFocus != null )
	{
		g_oFocus = ( oFocus.length ) ? oFocus[0] : oFocus;
		g_oFocus.attachEvent( "onfocus", mf_onFocus )
		g_oFocus.attachEvent( "onbeforedeactivate", mf_onDeactivate );
		if( "IFRAME" === g_oFocus.tagName )
		{
			g_oFocus.attachEvent( "onblur", mf_onBlur );
		}
	}
}

function f_updateToolbar()
{
	if( null == g_oTarget || g_nUpdating )
	{
		return;
	}
	g_nUpdating++;

	var oDoc = g_oTarget.document;
	var rc;

	var rcFonts = oDoc.queryCommandEnabled( "FontName" );
	var rcBold = oDoc.queryCommandEnabled( "Bold" );
	var rcPgraph = oDoc.queryCommandEnabled( "JustifyLeft" );
	var rcOutdent = oDoc.queryCommandEnabled( "Outdent" );

	for( var i=0;i<g_rgItems.length;i++ )
	{
		var obj = g_rgItems[i];
		if( null == obj )
		{
			continue;
		}
		switch( i )
		{
			case 0:
				var rc = oDoc.queryCommandEnabled( "FormatBlock" );
				if( rc != !obj.fDisabled )
				{
					g_oToolbar.enableItem( obj, rc );
				}
				if( rc )
				{
					rc = oDoc.queryCommandValue( "FormatBlock" );
					obj.value = rc;
				}
				break;
			case 1:
			case 2:
			case 3:
				if( rcFonts != !obj.fDisabled )
				{
					g_oToolbar.enableItem( obj, rcFonts );
				}
				if( rcFonts && 3 != i)
				{
					rc = oDoc.queryCommandValue(obj.id);
					obj.value = rc;
				} 
				break;
			case 4:
			case 5:
			case 6:
			case 7:
			case 8:
			case 9:
				if( rcBold != !obj.fDisabled )
				{
					g_oToolbar.enableItem( obj, rcBold );
				}
				if( rcBold )
				{
					rc = oDoc.queryCommandValue(obj.id );
					if( obj.buttondown != rc )
					{
						g_oToolbar.buttonDown( obj, rc );
					}
				}
				break;
			case 10:
				if( true == rcPgraph )
				{
					rc = oDoc.queryCommandValue(g_rgItems[12].id );
					if( false == rc )
					{
						rc = oDoc.queryCommandValue(g_rgItems[11].id );
						g_oToolbar.buttonDown( g_rgItems[(true == rc) ? 11 : 10], true );
					}
					else
					{
						g_oToolbar.buttonDown( g_rgItems[12], true );
					}
				}
				// fall through.
			case 11:
			case 12:
				if( rcPgraph != !obj.fDisabled )
				{
					g_oToolbar.enableItem( obj, rcPgraph );
				}
				break;
			case 13:
			case 14:
				if( rcOutdent != !obj.fDisabled )
				{
					g_oToolbar.enableItem( obj, rcOutdent );
				}
				if( rcOutdent )
				{
					rc = oDoc.queryCommandValue(obj.id );
					if( obj.buttondown != rc )
					{
						g_oToolbar.buttonDown( obj, rc );
					}
				}
				break;
			case 15:
			case 16:
				if( rcOutdent != !obj.fDisabled )
				{
					g_oToolbar.enableItem( obj, rcOutdent );
				}
				break;
		}
	}
	g_nUpdating--;
}

function mf_onFocus()
{
	g_oToolbar.disable = false;
	if( g_nItems )
	{
		g_nTimerId = window.setInterval( f_updateToolbar, g_interval );
	}
	if( null != g_oTarget && null != g_oFocus && g_oFocus != g_oTarget )
	{
		g_oTarget.focus();
	}
}

function mf_onDeactivate()
{
	window.clearInterval( g_nTimerId );

	if( null != event && !this.element.contains( event.toElement ) )
	{
		g_oToolbar.disable = true;
	}
}

function mf_onBlur()
{
	var obj = element.document.elementFromPoint( event.clientX, event.clientY );
	if( null == obj )
	{
		g_oToolbar.disable = true;
	}
}

function f_buttonDown( item, fDepress )
{
	g_oToolbar.buttonDown( item, fDepress );
}

function f_setBusy( fBusy )
{
	g_oToolbar.busy = fBusy;
}

function f_getBusy()
{
	return( g_oToolbar.busy );
}

function f_enableItem( item, fEnable )
{
	return( g_oToolbar.enableItem( item, fEnable ) );
}

function f_showItem( item, fShow )
{
	return( g_oToolbar.showItem( item, fShow ) );
}

function f_getDOM()
{
	return g_oToolbar.DOM;
}

function f_getItem( szItem )
{
	return( g_oToolbar.item( szItem ) );
}

function f_getDisable()
{
	return g_oToolbar.disable;
}

function f_setDisable(fDisable)
{
	g_oToolbar.disable = fDisable;
	if( g_oToolbar.disable )
	{
		if( 0 !== g_nTimerId )
		{
			window.clearInterval(g_nTimerId);
			g_nTimerId = 0;
		}
	}
	else
	{
		if( g_oTarget === g_oTarget.document.activeElement )
		{
			g_nTimerId = window.setInterval(f_updateToolbar, g_interval);
		}
	}
}

function mf_putLabels( oParent, rgLabels )
{
	var re = /([^\n]*)\n(.*)?/;
	for( var oItem = oParent.firstChild; null != oItem; oItem = oItem.nextSibling )
	{
		if( null == oItem.tagName )
		{
			continue;
		}
		if( null != oItem.id && null != rgLabels[oItem.id] )
		{
			var rgRc = re.exec( rgLabels[oItem.id] );
			oItem.label = rgRc[1];
			oItem.title = (rgRc[2].length) ? rgRc[2] : "";
		}
		var szTag = oItem.tagName.toLowerCase();
		if( "exclusive" === szTag || "group" === szTag )
		{
			mf_putLabels( oItem, rgLabels );
		}
	}
}

function mf_setLabels( szStr )
{
	if( null == szStr )
	{
		return;
	}

	szStr = szStr.replace( /\\n/g, "\n" );
	var rgTemp = new Array();
	var re = /(\w+):([^;\n]*)(\n[^;]*)?;?/ig;
	var rgRc = null;
	var idx = 0;
	do
	{
		rgRc = re.exec( szStr );
		if( null != rgRc )
		{
			rgTemp[ rgRc[1] ] = rgRc[2] + "\n" + rgRc[3].substring(1);
			idx++;
		}
	}
	while( rgRc != null );

	if( 0 == idx )
	{
		return;
	}

	mf_putLabels( g_oToolbar, rgTemp );
}

</SCRIPT>
</HEAD>
<BODY>
</BODY>
</HTML>