<!--Copyright (c) 2000 Microsoft Corporation.  All rights reserved.-->
<HTML>
<HEAD>
<PUBLIC:COMPONENT tagName="SELECT" lightWeight=true supportsEditMode='true'>
	<PUBLIC:METHOD NAME="createElement" internalName="f_createElement" />

	<PUBLIC:PROPERTY NAME="label" GET="f_getLabel" PUT="f_setLabel" />
	<PUBLIC:PROPERTY NAME="value" GET="f_getValue" PUT="f_setValue" />

	<PUBLIC:ATTACH EVENT="oncontentready" ONEVENT="f_init()"/>
	<PUBLIC:ATTACH EVENT="onpropertychange" ONEVENT="f_propChange()"/>
	<PUBLIC:ATTACH EVENT="ondetach" ONEVENT="f_cleanup()" />
</PUBLIC:COMPONENT>

<SCRIPT>
var g_oToolbar = null;
var g_oDisplay = null;
var g_szLabel = null;

function f_init()
{
	var oParent = element.parentElement;
	if( "group" === oParent.tagName.toLowerCase() ||
		"exclusive" === oParent.tagName.toLowerCase() )
	{
		oParent = oParent.parentElement;
	}
	if( "toolbar" === oParent.tagName.toLowerCase() )
	{
		g_oToolbar = oParent;
		g_oToolbar.nItems++;
	}
}

function f_cleanup()
{
	if( g_oToolbar )
	{
		if( g_oDisplay )
		{
			g_oDisplay.parentElement.removeNode( true );
		}
		g_oToolbar = g_oDisplay = null;
	}
}

function mf_duplicateText( oParent, oSrc )
{
	switch( oSrc.nodeName )
	{
		case "option":
			break;
		case "#text":
			var fEmpty = oSrc.nodeValue.match( /^[ \t]*$/ );
			if( fEmpty )
				return;
		default:
			oText = oSrc.cloneNode( true );
			oParent.insertBefore( oText );
			break;
	}
}

function mf_onChange()
{
	var obj = event.srcElement;
	var oEvent= createEventObject();
	oEvent.value = obj.options[obj.selectedIndex].value;
	obj = obj.parentElement.parentElement.oRawElm;
	obj.fireEvent('onclick', oEvent);
}

function mf_onClick()
{
	event.cancelBubble = true;
}

function f_createElement( oParent )
{
	var oDOM = oParent.document;
	var oItem;

	oItem = oDOM.createElement("SPAN");
	oItem.className = "tbSelect";
	var oSpan = oParent.insertBefore( oItem );

	oItem = oDOM.createElement("SPAN");
	oItem.className = "tbSelectCaption";
	for( var oElm = element.firstChild; null != oElm; oElm = oElm.nextSibling )
	{
		mf_duplicateText( oItem, oElm );
	}
	oSpan.insertBefore( oItem );

	oItem = oDOM.createElement( "SELECT" );
	oItem.name="Droplist";
	oItem.unselectable="on";
	oItem.fDisabled=false;
	oItem.id = element.id;
	oItem.onchange=mf_onChange;
	oItem.onclick = mf_onClick;
	for( var oElm = element.firstChild; null != oElm; oElm = oElm.nextSibling )
	{
		if( "option" === oElm.nodeName )
		{
			var oOpt = oDOM.createElement("OPTION" );
			oOpt = oItem.insertBefore( oOpt );
			oOpt.value = oElm.value;
			oOpt.text = oElm.innerText;
		}
	}

	g_oDisplay = oSpan.insertBefore( oItem );
	return true;
}

function f_getValue()
{
	var val = null;
	if( g_oDisplay )
	{
		val = g_oDisplay.value;
	}
	return( val );
}

function f_setValue( newVal )
{
	var val = null;
	if( g_oDisplay )
	{
		g_oDisplay.value = newVal;
		val = g_oDisplay.value;
	}
	return( val );
}

function f_getLabel()
{
	return( g_szLabel );
}

function f_setLabel( newVal )
{
	if( null == g_oDisplay )
	{
		return;
	}
	if( null == newVal )
	{
		newVal = "";
	}
	var obj = g_oDisplay.previousSibling;
	obj.innerHTML = g_szLabel = newVal;
}

function f_propChange()
{
	var szText = event.propertyName;
	if( null != g_oDisplay )
	{
		switch( szText )
		{
			case "display":
				g_oDisplay.parentElement.parentElement.style.display = (element.display) ? "" : "none";
				break;

			case "disabled":
				var oItem = g_oDisplay.previousSibling;
				if( element.disabled )
				{
					oItem.fDisabled = g_oDisplay.fDisabled = true;
					oItem.disabled = g_oDisplay.disabled = true;
					oItem.parentElement.className = "tbSelectDisable";
				}
				else
				{
					oItem.fDisabled = g_oDisplay.fDisabled = false;
					oItem.parentElement.className = "tbSelect";
					if( !g_oToolbar.busy )
					{
						oItem.disabled = false;
					}
				}
				break;

			case "align":
				g_oDisplay.parentElement.align = element.align;
				break;

			case "innerHTML":
				break;

			default:
				var obj = g_oDisplay;
				eval( "obj."+szText+"=element."+szText+";" );
				break;
		}
	}
}

</SCRIPT>
</HEAD>
</HTML>

