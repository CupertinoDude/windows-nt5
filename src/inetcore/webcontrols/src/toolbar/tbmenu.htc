<!--Copyright (c) 2000 Microsoft Corporation.  All rights reserved.-->
<HTML>
<HEAD>
<PUBLIC:COMPONENT tagName="MENU" lightWeight=true supportsEditMode='true'>
	<PUBLIC:METHOD NAME="createElement" internalName="f_createElement" />
	<PUBLIC:METHOD NAME="showMenu" internalName="f_menuShow" />

	<PUBLIC:PROPERTY NAME="label" GET="f_getLabel" PUT="f_setLabel" />
	<PUBLIC:EVENT id="eOnMenuShow" name="onmenushow">

	<PUBLIC:ATTACH EVENT="oncontentready" ONEVENT="f_init()"/>
	<PUBLIC:ATTACH EVENT="onpropertychange" ONEVENT="f_propChange()"/>
	<PUBLIC:ATTACH EVENT="ondetach" ONEVENT="f_cleanup()" />
</PUBLIC:COMPONENT>

<SCRIPT>

var g_szMenuArrow = "tool-downarrow.gif";
var g_fButton = false;
var g_fMenuShow = false;
var g_szText = null;
var g_oToolbar = null;
var g_oDisplay = null;
var g_szLabel = null;

function f_init()
{
	var oParent = element.parentElement;
	if( "group" === oParent.tagName.toLowerCase() ||
		"exclusive" === oParent.tagName.toLowerCase() )
	{
		oParent = oParent.parentElement;
	}
	if( "toolbar" === oParent.tagName.toLowerCase() )
	{
		g_oToolbar = oParent;
		g_oToolbar.nItems++;
	}
}

function f_cleanup()
{
	if( g_oToolbar )
	{
		if( g_oDisplay )
		{
			g_oDisplay.parentElement.removeNode( true );
		}
		g_oToolbar = g_oDisplay = null;
	}
}

function f_duplicateText( oParent, oSrc )
{
	switch( oSrc.nodeName.toLowerCase() )
	{
		case "menuitem":
		case "button":
		case "separator":
			break;
		case "#text":
			var fEmpty = oSrc.nodeValue.match( /^[ \t]*$/ );
			if( fEmpty )
				return;
		default:
			oText = oSrc.cloneNode( true );
			oParent.insertBefore( oText );
			break;
	}
}

function f_createElement( oParent )
{
	var oDOM = oParent.document;

	var oItem = null;
	var oMenu = null;
	if( "simple"== element.type )
	{
		oItem = oDOM.createElement("SPAN");
		oItem.fDisabled = false;
		oItem.name = "Menu";
		oItem.type = "simple";
		oItem.style.display="none";
		if( element.id )
		{
			oItem.id = element.id;
		}
		oParent.insertBefore( oItem );

		oItem = oDOM.createElement("SPAN");
		if( element.title )
		{
			oItem.title = element.title;
		}
		oItem.className="tbButton";
		oItem.sticky=true;
		oItem.unselectable = "on";
		oItem.fDisabled=false;
		oItem.tabIndex=0;
		oItem.menuID = element.id + 'Menu';
		oItem.parentBut = null;
		oItem = oParent.insertBefore( oItem );

		oItem.attachEvent( "onmouseenter", f_onMouseEnter );
		oItem.attachEvent( "onmouseleave", f_onMouseLeave );
		oItem.attachEvent( "onmouseup", f_onMouseUp );
		oItem.attachEvent( "onkeydown", f_keyDown );
		oItem.attachEvent( "onclick", f_onClick );
		oItem.attachEvent( "onmousedown", f_onMouseDown );

		for( var oElm = element.firstChild; null != oElm; oElm = oElm.nextSibling )
		{
			f_duplicateText( oItem, oElm );
		}
		g_szLabel = oItem.innerHTML;

		if( null != element.img && element.img.length )
		{
			var oImg = oDOM.createElement( "IMG" );
			oImg.unselectable = "on";
			oImg.align = "absmiddle";
			oImg.className = "cbImage";
			oImg.src = element.img;
			oItem.insertBefore( oImg, oItem.firstChild );
		}

		oMenu = oItem;
	}
	else
	{
		oItem = oDOM.createElement("SPAN");
		oItem.className = "tbButton";
		oItem.fDisabled = false;
		oItem.name = "Menu";
		oItem.unselectable = "on";
		oItem.tabIndex=0;
		oItem.style.marginRight = 0;
		oItem.type = "outlook";
		if( element.id )
		{
			oItem.id = element.id;
		}
		if( element.title )
		{
			oItem.title = element.title;
		}
		oItem = oParent.insertBefore( oItem );
		oItem.attachEvent( "onmouseenter", f_onMouseEnter );
		oItem.attachEvent( "onmouseleave", f_onMouseLeave );
		oItem.attachEvent( "onmouseup", f_onMouseUp );
		oItem.attachEvent( "onkeydown", f_keyDown );
		oItem.attachEvent( "onclick", f_onClick );
		oItem.attachEvent( "onmousedown", f_onMouseDown );

		for( var oElm = element.firstChild; null != oElm; oElm = oElm.nextSibling )
		{
			f_duplicateText( oItem, oElm );
		}
		g_szLabel = oItem.innerHTML;
		if( null != element.img && element.img.length )
		{
			var oImg = oDOM.createElement( "IMG" );
			oImg.unselectable = "on";
			oImg.align = "absmiddle";
			oImg.className = "cbImage";
			oImg.src = element.img;
			oItem.insertBefore( oImg, oItem.firstChild );
		}

		var oPeer = oItem;
		if( 0 == oItem.innerHTML.length )
		{
			oItem.style.display="none";
			oPeer = null;
		}

		oItem = oDOM.createElement("SPAN");
		oItem.className="tbButton";
		oItem.unselectable = "on";
		oItem.sticky=true;
		oItem.fDisabled=false;
		oItem.tabIndex=0;
		oItem.menuID = element.id + 'Menu';
		oItem.style.marginLeft = 0;
		oItem.parentBut = oPeer;
		oItem.oParent = element;
		oItem = oParent.insertBefore( oItem );
		oItem.attachEvent( "onmouseenter", f_onMouseEnter );
		oItem.attachEvent( "onmouseleave", f_onMouseLeave );
		oItem.attachEvent( "onmouseup", f_onMouseUp );
		oItem.attachEvent( "onkeydown", f_keyDown );
		oItem.attachEvent( "onclick", f_onClick );

		var oImg = oDOM.createElement( "IMG" );
		oImg.unselectable = "on";
		oImg.align = "absmiddle";
		oImg.className = "cbMenuImage";
		oImg.src = ( null != element.arrowimg && element.arrowimg.length ) ? element.arrowimg : g_szMenuArrow;
		oItem.insertBefore( oImg );
		oMenu = oItem;
	}
	if( oMenu )
	{
		f_buildMenu( oMenu );
	}
	g_oDisplay = oParent.firstChild;
	return true;
}

function f_buildMenu(oBut)
{
	var oPopup = oBut.document.parentWindow.createPopup();

	var oDOM = oPopup.document;
	var oTable = oDOM.createElement("TABLE");
	oTable.className = "cbToolbar";
	oTable.onclick="window.event.returnValue = false;";
	oTable.cellPadding = 0;
	oTable.cellSpacing = 0;
	oTable.unselectable = 'on';

	var oTBody = oDOM.createElement("TBODY");
	oTBody = oTable.insertBefore( oTBody );

	var oElm = element.firstChild;
	if( null == oElm )
	{
		return;
	}

	var i;
	for( i = 0; null != oElm; oElm = oElm.nextSibling )
	{
		if( null == oElm.tagName )
		{
			continue;
		}
		switch( oElm.tagName.toLowerCase() )
		{
			case "menuitem":
				var oRow = oDOM.createElement("TR");
				var oCell = oDOM.createElement("TD");
				oCell.className = "cbSubmenuItem";
				oCell.unselectable = "on";
				oCell.fDisabled = false;
				oCell.menuIdx = i++;
				oCell.id = oElm.id;
				oCell.innerHTML = oElm.innerHTML;
				if( oElm.title )
				{
					oCell.id = oElm.title;
				}
				if( oElm.img )
				{
					var oImg = oDOM.createElement("IMG");
					oImg.unselectable = "on";
					oImg.align = "absmiddle";
					oImg.className = "cbSubmenuImage";
					oImg.src = oElm.img;

					oCell.insertBefore( oImg, oCell.firstChild );
				}
				oCell.oRawElm = oElm;

				oRow.insertBefore( oCell );
				oTBody.insertBefore( oRow );
				break;
			case "button":
				var oRow = oDOM.createElement("TR");
				var oCell = oDOM.createElement("TD");
				oCell = oRow.insertBefore( oCell );

				var fRc = oElm.createElement( oCell );
				if( false == fRc )
				{
					break;
				}

				oCell.oRawElm = oElm;
				oCell.fDisabled = false;
				oCell.menuIdx = i++;
				oTBody.insertBefore( oRow );
				break;
			case "separator":
				var oRow = oDOM.createElement("TR");
				var oCell = oDOM.createElement("TD");
				oCell = oRow.insertBefore( oCell );
				oCell.fDisabled = true;
				oCell.menuIdx = i++;
				oCell.innerHTML = ( "cr" !== oElm.type ) ? '<HR class="cbSubmenuHR" />' :
								'<BR class="cbSubmenuHR" />';
				oTBody.insertBefore( oRow );
				break;
		}
	}

	var oSheets = oBut.document.styleSheets;
	for( var k=0; k < oSheets.length; k++ )
	{
		var oStyle = oPopup.document.createStyleSheet(oSheets[k].href);
		if( 0 == oStyle.href.length)
		{
			oStyle.cssText = oSheets[k].cssText;
		}
		oStyle.media = oSheets[k].media;
	}
	var oPopupBody = oPopup.document.body;

	oTable = oPopupBody.insertBefore( oTable );
	f_columns( oTable, element.columns );

	oPopupBody.style.margin      = 0;
	oPopupBody.style.overflow    = "hidden";
	oPopupBody.className         = "cbSubmenu";
	oPopupBody.style.border      = "outset 2";
	oPopupBody.hideFocus = true;
	oPopupBody.onkeydown         = f_menuKeyDown;
	oPopupBody.onclick           = f_menuClick;
	oPopupBody.onunload          = f_menuUnload;
	oPopupBody.onmouseover       = f_menuOver;
	oPopupBody.onmouseleave      = f_menuLeave;

	oBut.submenu = oPopup;
	oPopupBody.oParent = oBut;
}

function f_columns( obj, nCols)
{
	obj.nRows = 1;
	var i = obj.rows.length;
	if( i <= 1 || null == nCols || 1 >= nCols )
	{
		return;
	}
	var oRows = obj.rows;

	var j = Math.ceil(i / nCols);
	obj.nRows = j;
	for( var m=0; m<(nCols - 1); m++ )
	{
		for( var k=0; k<j && j<i; k++ )
		{
			oRows[k].insertBefore( oRows[j].cells[0] );
			i--;
			obj.deleteRow( oRows[j].rowIndex );
		}
	}
}

function f_onMouseEnter()
{
	var obj = event.srcElement;
	if( null == obj.parentElement.oRawElm )
	{
		alert( "onMouseEnter firing with incorrect element." );
	}

	g_fButton = (null != obj.submenu);

	if( (null != obj.sticky && ( true == obj.buttondown )) ||
		 obj.parentElement.fBusy || obj.parentElement.fDisabled || obj.fDisabled )
	{
		return;
	}

	obj.className = "tbButtonRaise";

	if( null != obj.submenu )
	{
		// Raise or lower any associated buttons with the menu.
		var oRelative = obj.parentBut;
		if( null != oRelative && true != oRelative.buttondown )
		{
			oRelative.className="tbButtonRaise";
		}
	}
}

function f_onMouseLeave()
{
	g_fButton = false;

	var obj = event.srcElement;
	if( null == obj.parentElement.oRawElm )
	{
		alert( "onMouseLeave firing with incorrect element." );
	}

	// If it is a sticky button and currently down or it is a disabled do nothing
	if( (null != obj.sticky && ( true == obj.buttondown )) || obj.fDisabled )
	{
		return;
	}
	obj.className= (true == obj.raised) ? "tbButtonRaise" : "tbButton";

	if( null != obj.submenu )
	{
		// Raise or lower any associated buttons with the menu.
		var oRelative = obj.parentBut;
		if( null != oRelative && true != oRelative.buttondown )
		{
			oRelative.raised = false;
			oRelative.className=obj.className;
		}
	}
}

function f_menuUnload()
{
	var obj = this.document.body.oParent;

	if( !f_menuUnload.fEscKey )
	{
		if( g_fButton ) 
		{
			return;
		}
	}

	var szClass = (!g_fButton) ? "tbButton" : "tbButtonRaise";
	g_fMenuShow = false;
	obj.className = szClass;
	obj.buttondown = false;

	// Raise or lower any associated buttons with the menu.
	var oRelative = obj.parentBut;
	if( null != oRelative && true != oRelative.buttondown )
	{
		oRelative.raised = g_fButton;
		oRelative.className=szClass;
	}

	f_menuUnload.fEscKey = false;

	var oEvent= createEventObject();
	oEvent.type = "menushow";
	oEvent.reason = 0;
	eOnMenuShow.fire(oEvent);
}
f_menuUnload.fEscKey = false;

function f_menuKeyDown()
{
	var oEvent = this.document.parentWindow.event;
	
	if( oEvent.ctrlKey || oEvent.altKey )
	{
		return;
	}
	
	var iDelta = 0;
	var i = 0;
	var oTable = this.document.body.children[0];

	switch(oEvent.keyCode)
	{
		case 27:
			f_menuUnload.fEscKey = true;
			break;
		case 37: // left
			iDelta = -oTable.nRows;
			i = -1 - iDelta;
			break;
		case 38: // up
			iDelta = -1;
			break;
		case 39: // right
			iDelta = oTable.nRows;
			i = -iDelta;
			break;
		case 40: // down
			iDelta =  1;
			break;
		case 13: // enter
			if( null != f_toggleMenuItem.selecteditem )
			{
				return fireMenuClick( f_toggleMenuItem.selecteditem );
			}
			break;
	}

	if( 0 == iDelta )
		return;

	var oItems = null;
	var obj = f_toggleMenuItem.selecteditem;
	oItems = this.document.body.getElementsByTagName("TD");

	if( null != obj )
	{
		i = Number(obj.menuIdx);
	}
	var j = 0;
	do
	{
		i += iDelta;
		if( i >= oItems.length )
		{
			i -= oItems.length;
		}
		else if( i < 0 )
		{
			i += oItems.length;
		}

		for( var j=0;j<oItems.length;j++)
		{
			if( i == oItems[j].menuIdx )
				break;
		}
	}
	while( true == oItems[j].fDisabled );

	f_toggleMenuItem(oItems[j]);
}

function f_menuOver()
{
	var oEvent = this.document.parentWindow.event;
	var obj = oEvent.srcElement;

	while( obj.tagName != "BODY" )
	{
		if( obj.tagName == "TD" )
		{
			f_toggleMenuItem(obj);
			break;
		}
		obj = obj.parentElement;
	}
}

function f_menuLeave()
{
	if( null!=f_toggleMenuItem.selecteditem && "Button" === f_toggleMenuItem.selecteditem.name )
	{
		f_toggleMenuItem(null);
	}
}

function f_onMouseUp()
{
	var obj = event.srcElement;
	while( obj.tagName != "BODY" )
	{
		var oParent = obj.parentElement;
		if( null != oParent.oRawElm )
		{
			break;
		}
		obj = oParent;
	}
	if (obj.tagName == "BODY" )
	{
		return;
	}

	event.cancelBubble=true;
	// If it is a sticky button and currently down
	if( ( null != obj.sticky && ( true == obj.buttondown ) ) ||
		  obj.fDisabled || obj.parentElement.fBusy || obj.parentElement.fDisabled)
	{
		return;
	}
	obj.className= "tbButtonRaise";
}

function f_onMouseDown( )
{
	var obj = event.srcElement;

	while( obj.tagName != "BODY" )
	{
		var oParent = obj.parentElement;
		if( null != oParent.oRawElm )
		{
			break;
		}
		obj = oParent;
	}
	if (obj.tagName == "BODY" )
	{
		return;
	}

	event.cancelBubble=true;
	// If it is a menu that is currently down do nothing or disabled.
	if( ( null != obj.submenu && obj.buttondown ) ||
		  obj.fDisabled ||obj.parentElement.fBusy || obj.parentElement.fDisabled)
	{
		return;
	}
	// Should we cancel the mouse up event or just let it cascade.
	obj.className="tbButtonDown";
}

function f_keyDown()
{
	if( event.ctrlKey || event.altKey )
	{
		return;
	}

	switch(event.keyCode)
	{
		case 13: // enter
			var obj = event.srcElement;
			if( null != obj.fDisabled )
			{
				if( obj.fDisabled || obj.parentElement.fBusy || obj.parentElement.fDisabled )
				{
					return;
				}
				f_onClickButton( obj );
				if( "tbButtonRaise" == obj.className )
				{
					obj.className = "tbButton";
				}
				event.returnValue=false;
				event.cancelBubble=true;
			}
			break;
	}
}

function f_onClick()
{
	if( null == event )
	{
		return;
	}

	event.cancelBubble=true;
	var obj = event.srcElement;
	if( null == obj )
	{
		return;
	}

	while( obj.tagName != "BODY" )
	{
		var oParent = obj.parentElement;
		if( null != oParent.oRawElm )
		{
			if( !obj.fDisabled && !obj.parentElement.fBusy && !obj.parentElement.fDisabled )
			{
				f_onClickButton( obj );
			}
			break;
		}
		obj = oParent;
	}
}

function f_onClickButton( obj )
{
	var fState = true;

	// Menu drop down buttton.
	if(null != obj.sticky)
	{
		if (null != obj.submenu )
		{
			f_menuShow( !g_fMenuShow );
			return(false);
		}
	}

	f_menuShow( false );
	var oEvent= createEventObject();
	oEvent.value = fState;
	obj = obj.parentElement.oRawElm;
	obj.fireEvent('onclick', oEvent);
	return(false);
}

function f_toggleMenuItem(oNew)
{
	if (oNew == f_toggleMenuItem.selecteditem)
		return;

	if( null != f_toggleMenuItem.selecteditem)
	{
		f_toggleMenuItem.selecteditem.className = ( "Button" === f_toggleMenuItem.selecteditem.name ) ? "tbButton" : "cbSubmenuItem";
	}

	f_toggleMenuItem.selecteditem = null;
	if( null!=oNew && !oNew.fDisabled )
	{
		f_toggleMenuItem.selecteditem = oNew;
		oNew.className = ( "Button" === oNew.name ) ? "tbButtonRaise" : "cbSubmenuItemSelect";
	}
}
f_toggleMenuItem.selecteditem = null;

function f_menuClick()
{
	var obj = this.document.parentWindow.event.srcElement;
	while( obj.tagName != "BODY" )
	{
		if (obj.tagName == "TD")
		{
			return fireMenuClick( obj );
		}
		obj = obj.parentElement;
	}
}

function f_menuShow( fShow )
{
	var obj = g_oDisplay.nextSibling;
	var szClass = (!g_fButton) ? "tbButton" : "tbButtonRaise";

	if( fShow == g_fMenuShow )
	{
		return;
	}
	if( fShow )	// Show the submenu of the current item.
	{
		obj.className="tbButtonDown";
		obj.buttondown = true;
		szClass = "tbButtonRaise";

		var oEvent= createEventObject();
		oEvent.type = "menushow";
		oEvent.reason = 1;
		eOnMenuShow.fire(oEvent);

		var oMenu = obj.submenu;

		var oRelative = (null != obj.parentBut) ? obj.parentBut : obj;
		f_toggleMenuItem(null);
		if( null == obj.menuWidth )
		{
			oMenu.show( 0, obj.offsetHeight, 20, 50, oRelative);
			var oPopupBody = oMenu.document.body;
			obj.menuWidth = oPopupBody.scrollWidth  + oPopupBody.offsetWidth - oPopupBody.clientWidth;
			obj.menuHeight = oPopupBody.scrollHeight  + oPopupBody.offsetHeight - oPopupBody.clientHeight;
		}
		oMenu.show( 0, obj.offsetHeight,obj.menuWidth,obj.menuHeight, oRelative);

		// Raise or lower any associated buttons with the menu.
		var oRelative = obj.parentBut;
		if( null != oRelative && true != oRelative.buttondown )
		{
			oRelative.raised = (szClass == "tbButtonRaise");
			oRelative.className=szClass;
		}

		g_fMenuShow = true;
	}
	else				// Hide any menu
	{
		if( !g_fButton )
		{
			obj.submenu.hide();
		}
		else
		{
			var szClass = "tbButtonRaise";
			g_fMenuShow = false;
			obj.className = szClass;
			obj.buttondown = false;

			// Raise or lower any associated buttons with the menu.
			var oRelative = obj.parentBut;
			if( null != oRelative && true != oRelative.buttondown )
			{
				oRelative.raised = g_fButton;
				oRelative.className=szClass;
			}

			var oEvent= createEventObject();
			oEvent.type = "menushow";
			oEvent.reason = 0;
			eOnMenuShow.fire(oEvent);
		}
	}
}

function fireMenuClick( obj )
{
	f_menuShow( false );
	var oEvent= createEventObject();
	var oElm = obj.oRawElm;
	oEvent.value = 1;
	oElm.fireEvent("onclick", oEvent);
}

function f_getLabel()
{
	return( g_szLabel );
}

function f_setLabel( newVal )
{
	if( null == g_oDisplay )
	{
		return;
	}
	if( null == newVal )
	{
		newVal = "";
	}
	var obj = ( "simple" !== element.type ) ? g_oDisplay : g_oDisplay.nextSibling;

	if( null != element.img && element.img.length )
	{
		var oImg = obj.firstChild.removeNode(true);
		obj.innerHTML = newVal;
		obj.insertBefore( oImg, obj.firstChild );
	}
	else
	{
		obj.innerHTML = newVal;
	}
	g_szLabel = newVal;
}

function f_propChange()
{
	var szText = event.propertyName;
	if( null != g_oDisplay )
	{
		switch( szText )
		{
			case "display":
				g_oDisplay.parentElement.style.display = (element.display) ? "" : "none";
				break;

			case "disabled":
				var oItem = g_oDisplay.nextSibling;
				if( element.disabled )
				{
					oItem.fDisabled = g_oDisplay.fDisabled = true;
					oItem.disabled = g_oDisplay.disabled = true;
					oItem.className = g_oDisplay.className = "tbButtonDisable";
				}
				else
				{
					oItem.fDisabled = g_oDisplay.fDisabled = false;
					oItem.className = g_oDisplay.className = "tbButton";
					if( !g_oToolbar.busy || !g_oToolbar.disable )
					{
						oItem.disabled = g_oDisplay.disabled = false;
					}
				}
				break;

			case "img":
			case "arrowimg":
				var src = (szText == "img") ? element.img : element.arrowimg;
				var isArrowImg = (szText == 'arrowimg') ? true : false;
				var isSimple = (element.type == 'simple') ? true : false;
				var oDOM = g_oDisplay.document;

				if (!(isSimple && isArrowImg))
				{
					var oItem = g_oDisplay;
					var obj;

					if (isArrowImg || isSimple)
					{
						oItem = oItem.nextSibling;
					}
					obj = oItem.firstChild;
					if( obj == null || obj.tagName != "IMG" )
					{
						if( null == src )
						{
							break;
						}
						var oImg = oDOM.createElement( "IMG" );
						oImg.unselectable = "on";
						oImg.align = "absmiddle";
						oImg.className = (isArrowImg) ? "cbMenuImage" : "cbImage";
						oImg.src = src;
						oItem.insertBefore(oImg, oItem.firstChild);
					}
					else
					{
						if( null == src )
						{
							obj.removeNode( true );
						}
						else
						{
							obj.src = src;
						}
					}
				}
				break;

			case "align":
				g_oDisplay.parentElement.align = element.align;
				break;

			case "innerHTML":
				break;

			default:
				var obj = ( "simple" !== element.type ) ? g_oDisplay : g_oDisplay.nextSibling;
				eval( "obj."+szText+"=element."+szText+";" );
				break;
		}
	}
}

</SCRIPT>
</HEAD>
</HTML>

