//
// kominternal.idl
//
//  Copyright (C) 1995-1999 Microsoft Corporation.  All rights reserved.

import "objidl.idl";

//////////////////////////////////////////////////////////////////////
//
// IMarshallingService
//
[uuid(A41B20D4-8ADD-11d2-B8B6-00C04FB9618A), object]
interface IMarshallingService : IUnknown
    {
    HRESULT GetStandardTableStrongObjref
    // Return what is logically a table strong objref for this object. There are three parts
    // to the result.
    //
    // First is the actual marshalled objref. This will ALWAYS be a standard objref, though
    // it may or may not ACTUALLY be a table strong one: it may be a normal one instead.
    //
    // When caller is done with the blob, he must call ReleaseObject on the returned token
    //
        (
        [in]        IUnknown*       punkObjectToMarshal,
        [in]        REFIID          iid,
        [out]       BLOB*           blobMarshalledData,
        [out]       DWORDLONG*      pddwReleaseToken       
        );

    HRESULT AddRefObject
        (
        [in]            DWORDLONG   ddwObjectToken
        );

    HRESULT ReleaseObject
        (
        [in]            DWORDLONG   ddwObjectToken
        );

    HRESULT MarshalObject
    // Marshal the indicated object at the location of the receiver
    //
        (
        [in]        IUnknown*       punkObjectToMarshal,
        [in]        REFIID          iid,
        [in]        DWORD           dwDestContext,
        [in]        MSHLFLAGS       mshlflags,
        [out]       BLOB*           blobMarshalledData
        );

    };

//////////////////////////////////////////////////////////////////////
//
// IMarshalEx
//
// This differs from IMarshal in two ways:
//
//  1) GetMarshallingContexts is provided, by which the object can indicate
//     exactly which marshalling contexts he wishes to handle, and
//
//  2) It is guaranteed that the other IMarshal-like methods will NOT be called
//     for contexts that the implementor says he doesn't want to handle.
//
[uuid(25FF997D-5889-11d2-B8AC-00C04FB9618A), object, local, pointer_default(unique)]
interface IMarshalEx : IUnknown
    {
    HRESULT GetUnmarshalClassEx
        (
        [in]            REFIID riid,
        [in, unique]    void *pv,
        [in]            DWORD dwDestContext,
        [in, unique]    void *pvDestContext,
        [in]            DWORD mshlflags,
        [out]           CLSID *pclsid
        );

    HRESULT GetMarshalSizeMaxEx
        (
        [in]            REFIID riid,
        [in, unique]    void *pv,
        [in]            DWORD dwDestContext,
        [in, unique]    void *pvDestContext,
        [in]            DWORD mshlflags,
        [out]           DWORD *pSize
        );

    HRESULT MarshalInterfaceEx
        (
        [in, unique]    IStream *pstm,
        [in]            REFIID riid,
        [in, unique]    void *pv,
        [in]            DWORD dwDestContext,
        [in, unique]    void *pvDestContext,
        [in]            DWORD mshlflags
        );

    HRESULT UnmarshalInterfaceEx
        (
        [in, unique]    IStream *pstm,
        [in]            REFIID riid,
        [out]           void** ppv
        );

    HRESULT ReleaseMarshalDataEx
        (
        [in, unique]    IStream *pstm
        );

    HRESULT DisconnectObjectEx
        (
        [in] DWORD dwReserved
        );

    HRESULT GetMarshallingContexts
        (
        [out] DWORDLONG* pbitsetContexts
        );
    };


//////////////////////////////////////////////////////////////////////
//
// IKomMachineInfo
//
// An interface used to return machine-unique information internal
// to kernel mode COM
//

[uuid(CBA6AB87-5F88-11d1-ADA0-00C04FC2ADC0), object]
interface IKomMachineInfo : IUnknown
    {
    HRESULT GetMachineInfo
        (
        [out]           GUID*       pguidMachine,
        [out]           DWORD*      pCanonicalProcessId
        );
    };


//////////////////////////////////////////////////////////////////////
//
// Internal interfaces for user- and kernel-mode KOM proxies
//

[uuid(248782D3-604E-11d1-97FC-00C04FB9618A), object, local]
interface IUKProxyInternal : IUnknown
    {
    HRESULT SetTestObject
        (
        [in]            IUnknown*   pObject
        );
    HRESULT Initialize
        (
        [in]            ULONG       komObjectId,
        [in]            REFIID      iidFirstInterface,
        [in]            void**      ppv
        );
    HRESULT GetKernelId
        (
        [out]           ULONG*      pKomObjectId
        );
    };


//////////////////////////////////////////////////////////////////////
//
// IInterfaceProxyInit
//
// An initialization interface for interface proxies
//

[uuid(39C299CB-70F2-11d1-B883-00C04FB9618A), object, local]
interface IInterfaceProxyInit : IUnknown
    {
    HRESULT Initialize1
        (
        [in] const void*          pProxyVtbl
        );
    HRESULT Initialize2
        (
        [in] REFIID               iidBase,
        [in] IRpcProxyBuffer*     pBaseProxyBuffer,
        [in] void*                pBaseProxy
        );
    };


//////////////////////////////////////////////////////////////////////
//
// IInterfaceStubInit
//
// An initialization interface for interface stubs
//

cpp_quote("#if !defined(IRpcStubBufferVtbl_DEFINED) && !defined(__objidl_h__)")
typedef struct IRpcStubBufferVtbl
    {
    int w;
    } IRpcStubBufferVtbl;
cpp_quote("#endif")


[uuid(39C299CD-70F2-11d1-B883-00C04FB9618A), object, local]
interface IInterfaceStubInit : IUnknown
    {
    HRESULT Initialize1
        (
        [in] const IRpcStubBufferVtbl* pStubVtbl
        );
    HRESULT Initialize2
        (
        [in] IRpcStubBuffer* pBaseStub,
        [in] REFIID          iidBase
        );
    };



//////////////////////////////////////////////////////////////////////
//
// IUKStub
//
// An interface by which KOMDRIVER talks to a UkStub
//

[uuid(2B2340A6-8795-11d1-B884-00C04FB9618A), object, local]
interface IUKStub : IUnknown
    {
    HRESULT Invoke(HRESULT* phReturnValue, REFIID iid, ULONG iMethod, void* pvArgs, ULONG* pcbArgs);
    HRESULT GetObject(REFIID, void**);
    };


//////////////////////////////////////////////////////////////////////
//
// IUpcallPoolControl
//
// Interface for controlling user mode side of upcall pool
//
[uuid(61CBF71F-782F-11d2-B8B2-00C04FB9618A), object, pointer_default(unique)]
interface IUpcallPoolControl : IUnknown
    {
    HRESULT PostListener();
    HRESULT Startup();
    };


//////////////////////////////////////////////////////////////////////
//
// IUpcallPoolWorker
//
// Interface for communicating between the user and kernel sides 
// of the upcall pools
//
[uuid(61CBF720-782F-11d2-B8B2-00C04FB9618A), object, pointer_default(unique)]
interface IUpcallPoolWorker : IUnknown
    {
    HRESULT Park([in] IUpcallPoolControl* pControl);
    HRESULT Stop();
    };



//////////////////////////////////////////////////////////////////////
//
// A library definition in order to generate relevant CLSIDs in 
// the output guid listing.
// 

[uuid(F8BACA47-5D4C-11d1-AD9D-00C04FC2ADC0)]
library __KOMINTERNAL__DUMMY__s
    {
    [uuid(1485090B-5DDC-11d1-AD9E-00C04FC2ADC0)]
    coclass CanonicalMarshaller
        {
        interface IMarshallingService;
        interface IKomMachineInfo;
        }

    [uuid(477336F4-7834-11d2-B8B2-00C04FB9618A)]
    coclass UpcallWorker
        {
        interface IUpcallPoolWorker;
        }

    };
 
