#
# sources.txf
#
# This was originally designed to replicate the viper environment under the 
# NT build environment.  It has since been made mostly obsolete.  It remains to 
# define some target paths, and some common compiler flags, like forcing
# stack checking on checked builds, using a custom stack checker.
# 

# This is a superset of the normal ole32 environment.
!include $(COMP_OLE32_DIR)\daytona.inc

MAJORCOMP           =cairole

#
# Output paths... gather all of the libraries produced in this subsection
# into the appropriate places.
#
VIPBASE             = $(OLEDIR)\com\txf
TARGETVIPBIN        = obj
TARGETVIPLIB        = obj

#
# We need to take includes from the following directories:
#    ole32\com\txf\inc:  For various borrowed headers, and generated
#                        ones as well.
#    ole32\com\inc:      For shared headers among COM.
#    ole32\idl\private:  For callobj.h
#    $(BASE_INC_PATH):   For zwapi.h
#
INCLUDES = $(INCLUDES);                           \
           $(OLEDIR)\com\inc;                     \
           $(VIPBASE)\inc;                        \
           $(VIPBASE)\inc\idl\$(O);               \
           $(VIPBASE)\inc\txfaux\$(O);            \
           $(VIPBASE)\inc\idllocal\$(O);          \
           $(BASE_INC_PATH);                      \
           $(OLEDIR)\idl\private\$(DEST_TREE)\$(O)

#
# Checked build options:
# -Custom stack checking for all of the sources contained herein.
# -Define _DEBUG along with DBG.  This is what the checked LIBC defines
#  (when you define DEBUG_CRTS) but we don't want to use the CRT, so I
#  don't take any changes on using that macro.
#
USE_STACK_CHECK     =

!if !$(FREEBUILD)

# Only stack checking on x86
!if $(386)
WIN32DLL_LIBS       = $(TARGETVIPBIN)\*\chkstk.lib $(WIN32DLL_LIBS)
USE_STACK_CHECK     = /Ge
!endif

# But the C_DEFINE everywhere...
C_DEFINES           = $(C_DEFINES) -D_DEBUG

!endif


#
# Restrict exception handling to SEH only in the generated code.
#
!if $(AMD64) || $(386) || $(IA64)
EXCEPTION_HANDLING  = /EHs- /EHa- /EHc-
!ELSEIF ($(ALPHA) || $(AXP64))
EXCEPTION_HANDLING  = /GX-
!ELSE
!  error Unknown CPU type
!endif

#
# The actual set of flags passed to the compiler. 
# This sets the global exception handling and stack checking flags used
# for TXF.
#
USER_C_FLAGS        = $(USER_C_FLAGS) $(EXCEPTION_HANDLING) $(USE_STACK_CHECK) 










