//
// callframeimpl.idl
//
//  Copyright (C) 1995-1999 Microsoft Corporation.  All rights reserved.

import "unknwn.idl";
import "oaidl.idl";

cpp_quote("#if 0")
typedef struct MD_INTERFACE { LONG crefs; } MD_INTERFACE;
cpp_quote("#endif")

[uuid(D573B4B2-894E-11d2-B8B6-00C04FB9618A),object,pointer_default(unique),local]
interface IInterceptorBase : IUnknown
    {
    HRESULT SetAsBaseFor
        (
        [in]    MD_INTERFACE*   pmdMostDerived, 
        [out]   BOOL*           pfDerivesFromIDispatch
        );
    }

///////////////////////////////////////////////

cpp_quote("#ifndef __cplusplus")
typedef struct CallFrame
    {
    int w;
    } CallFrame;
cpp_quote("#else")
cpp_quote("class CallFrame;")
cpp_quote("#endif")

[uuid(FEDF0401-75D4-11d1-ADB8-00C04FC2ADC0), object, local]
interface ICallFrameInit : IUnknown
    {
    CallFrame* GetCallFrame();
    };


//
// The following bits of interface were originally part of the call objects .idl, but have been removed
// because we don't want to document or support them.
//
       /* IMarshalSomeone
       IMarshalSomeone is an interface by which a client can request that some implicitly-specified object be marshalled.

       The functionality in the interface is similar to that of IMarshal. However, the data returned by IMarshalSomone::Marshal is a full
       OBJREF, just as would be returned by CoMarshalInterface. This contrasts with IMarshal, wherein IMarshal::Marshal returns just
       the custom-marshalling-data part of an object reference.

       */
       [uuid(174F4929-53EC-11d2-B8AC-00C04FB9618A), object, pointer_default(unique), local]
       interface IMarshalSomeone : IUnknown
        {

         HRESULT GetMarshalSizeMax /*
         Similar to IMarshal::GetMarshalSizeMax.

         Return value          Meaning
         S_OK             All is well
         E_UNEXPECTED        An unexpected error occurred. */
            (
            [in]        REFIID iid,
            [in]        void* pv,
            [in]        DWORD dwDestContext,
            [in,unique]   void* pvDestContext,
            [in]        DWORD mshlflags,
            [out]       DWORD* pSize
            );

         HRESULT MarshalInterface /*
         Similar to IMarshal::MarshalInterface.

         Return value          Meaning
         S_OK             All is well
         E_UNEXPECTED        An unexpected error occurred. */
            (
            [in,unique] IStream* pstm,
            [in]        REFIID iid,
            [in]        void* pv,
            [in]        DWORD dwDestContext,
            [in,unique]   void* pvDestContext,
            [in]        DWORD mshlflags
            );

         HRESULT UnmarshalInterface /*
         Similar to IMarshal::UnmarshalInterface.

         Return value          Meaning
         S_OK             All is well
         E_UNEXPECTED        An unexpected error occurred. */
            (
            [in,unique] IStream* pstm,
            [in]        REFIID iid,
            [out]       void** ppv
            );

         HRESULT ReleaseMarshalData /*
         Similar to IMarshal::ReleaseMarshalData.

         Return value          Meaning
         S_OK             All is well
         E_UNEXPECTED        An unexpected error occurred. */
            (
            [in,unique] IStream* pstm
            );

        };


       /* IMarshallingManager
       IMarshallingManager instances are used as themechanismbywhich call frames actually carry out themarshalling and
       unmarshalling of an interface pointer.

       */
       [uuid(F6EBEB2B-C8DE-11d1-B88E-00C04FB9618A), object, pointer_default(unique), local]
       interface IMarshallingManager : IUnknown
        {

         HRESULT GetMarshallerFor /*
         Return an IMarshal instance that can then be used to marshal the indicated interface on this object. Typically, the marshaller returned
         is implemented by the marshalling manager itself. Internally, it usually refers to either the object's IMarshal implementation, if it
         custom marshals itself, or a marshalling-manager-provided 'standard' IMarshal implementation.

         Return value          Meaning
         S_OK             All is well
         E_UNEXPECTED        An unexpected error occurred. */
            (
            [in]         REFIID iidToMarshal,   /* the IID of the interface to be marshalled */
            [in]          PVOID pvInterface,    /* the interface iid on the object which is to be marshalled */
            [out] IMarshalSomeone** ppMarshal      /* a marshaller appropriate for this object */
            );

         HRESULT GetStandardMarshallerFor /*
         Similar to GetMarshallerFor, but is guaranteed to never reference the object's IMarshal implementation, but rather always use the
         marshalling-manager-provided 'standard' IMarshal implementation. In this respect, this method is similar to the CoGetStnadadrMar-
         shal API.

         Return value          Meaning
         S_OK             All is well
         E_UNEXPECTED        An unexpected error occurred. */
            (
            [in]         REFIID iidToMarshal,   /* the IID of the interface to be marshalled */
            [in]          PVOID pvInterface,    /* the interface iid on the object which is to be marshalled */
            [in]       LPUNKNOWN punkOuter,     /* controlling unknown for the marshaller */
            [in]         REFIID iid,         /* iid sought on the returned marshaller */
            [out]         void** ppv          /* place at which marshaller is to be returned */
            );

         HRESULT GetUnmarshaller /*
         Return an IMarshal instance whose UnmarshalInterface can be used to unmarshal an interface pointer that was marshalled previously
         with a the IMarshal returned from a call to GetMarshallerFor or GetStandardMarshallerFor.

         Return value          Meaning
         S_OK             All is well
         E_UNEXPECTED        An unexpected error occurred. */
            (
            [in]         REFIID iidHint,      /* The iid for which unmarshalling is required. May legally be
                                           IID_NULL, in which case the iid in question must be determined from the
                                           later unmarshalled data; this is common. */
            [out] IMarshalSomeone** ppMarshal      /* place at which the unmarshaller is to be returned */
            );
        };
