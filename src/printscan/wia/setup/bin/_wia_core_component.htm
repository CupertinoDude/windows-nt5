<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>WIA_Core Component</TITLE>
<style type="text/css">@import url(td.css);</style></HEAD>
<BODY TOPMARGIN="0">
<H1><A NAME="_wia_core_component"></A><SUP></SUP>WIA_Core Component</H1>

<P>Windows Image Acquisition (WIA) Core component provides both an application programming interface (API) and a device driver interface (DDI). It supports still digital cameras and scanners. WIA also allows the retrieval of still images from IEEE 1394-based digital video (DV) camcorders and universal serial bus (USB)-based web cams. The WIA architecture is built on the foundation established by the Microsoft Still Image Architecture. There are two WIA components: WIA_Core and WIA_UI.</P>

<P>The WIA_Core component includes a class installer for scanner and still digital camera drivers. It supports WIA drivers and is compatible with TWAIN drivers.</P>

<P>The WIA architecture contains a Device Manager Object and a Driver Services Library. The Device Manager Object enumerates all the devices, instantiates the device objects, establishes the link between the application and the device object, retrieves and sets device properties, sets up and manages device events, manages locking and unlocking, monitors status, and more. The Driver Services Library includes driver services that are specific to WIA devices. The functions are exported as driver services, which include the most common device-independent operations.</P>

<p>The USB-based Picture Transfer Protocol (PTP) class driver allows PTP-based digital still cameras to install and work without requiring a Windows driver. PTP cameras that do not support the USB image class compatible ID need to provide an INF. PTP provides the WIA end-to-end experience. 

<P>The WIA_Core component includes an automation layer that allows interface with imaging devices through Microsoft Windows Script. The automation layer is provided by the WIA architecture. This ensures consistency and minimizes the amount of work by the Independent Hardware Providers (IHVs) to get their drivers accessible through Windows Script. This layer also provides the safe-for-scripting security layer. Once a WIA driver is written, this component exposes the scripting interfaces to applications.</P>

<H1>Component Configuration</H1>

<P>There are no configuration requirements for this component.&nbsp;</P>

<H1>For More Information </H1>

<P>Fore more information on WIA, see this <A HREF="http://www.microsoft.com/hwdev/wia">Microsoft Web site</A>.</P>

</BODY>
</HTML>
