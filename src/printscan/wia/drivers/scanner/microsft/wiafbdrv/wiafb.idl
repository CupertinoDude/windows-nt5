// wiafbd.idl : IDL source for wiafbdrv.dll
//

// This file will be processed by the MIDL tool to
// produce the type library (wiafb.tlb) and marshalling code.


import "unknwn.idl";
import "oaidl.idl";
import "propidl.idl";

[
    object,
    uuid(A9C5109A-978A-4391-AC39-601FBE847651),
    dual,
    helpstring("IDeviceProperty Interface"),
    pointer_default(unique)
]
    interface IDeviceProperty : IDispatch
    {
        [id(1), helpstring("method SetCurrentValue")]
        HRESULT SetCurrentValue(
            [in] LONG lValueID,
            [in] VARIANT Value);

        [id(2), helpstring("method SetValidRange")]
        HRESULT SetValidRange(
            [in] LONG lValueID,
            [in] LONG lMin,
            [in] LONG lMax,
            [in] LONG lNom,
            [in] LONG lInc);

        [id(3), helpstring("method SetValidList")]
        HRESULT SetValidList(
            [in] LONG lValueID,
            [in] VARIANT Value);

        [id(4), helpstring("method TestCall")]
        HRESULT TestCall();

        [id(5), helpstring("method GetCurrentValue")]
        HRESULT GetCurrentValue(
            [in] LONG lValueID,
            [in, out] VARIANT* pvValue);

    };

[
    object,
    uuid(A9C5109A-978A-4391-AC39-601FBE847652),
    dual,
    helpstring("IDeviceAction Interface"),
    pointer_default(unique)
]
    interface IDeviceAction : IDispatch
    {
        [id(1), helpstring("method Action")]
        HRESULT Action(
            [out, retval] LONG *plActionID);

        [propget, id(2), helpstring("method Value")]
        HRESULT Value(
            [out, retval] VARIANT* pvValue);

        [propput, id(2), helpstring("method Value")]
        HRESULT Value(
            [in] VARIANT *pvValue);

        [id(3), helpstring("method ValueID")]
        HRESULT ValueID(
            [out, retval] LONG *plValueID);
    };

[
    object,
    uuid(A9C5109A-978A-4391-AC39-601FBE847653),
    dual,
    helpstring("IDeviceControl Interface"),
    pointer_default(unique)
]
    interface IDeviceControl : IDispatch
    {
        [id(1), helpstring("method RawWrite")]
        HRESULT RawWrite(
            [in] LONG lPipeNum,
            [in] VARIANT *pbuffer,
            [in] LONG lbuffersize,
            [in] LONG lTimeout);

        [id(2), helpstring("method RawRead")]
        HRESULT RawRead(
            [in] LONG lPipeNum,
            [in, out] VARIANT *pbuffer,
            [in] LONG lbuffersize,
            [in, out] LONG *plbytesread,
            [in] LONG lTimeout);

        [id(3), helpstring("method ScanRead")]
        HRESULT ScanRead(
            [in] LONG lPipeNum,
            [in] LONG lBytesToRead,
            [in, out] LONG *plBytesRead,
            [in] LONG lTimeout);

        [id(4), helpstring("method RegisterWrite")]
        HRESULT RegisterWrite(
            [in] LONG lPipeNum,
            [in] VARIANT *pbuffer,
            [in] LONG lTimeout);

        [id(5), helpstring("method RegisterRead")]
        HRESULT RegisterRead(
            [in] LONG lPipeNum,
            [in] LONG lRegNumber,
            [in, out] VARIANT *pbuffer,
            [in] LONG lTimeout);

        [id(6), helpstring("method SetBitsInByte")]
        HRESULT SetBitsInByte(
            [in] BYTE bMask,
            [in] BYTE bValue,
            [in, out] BYTE *pbyte);
    };

[
    object,
    uuid(A9C5109A-978A-4391-AC39-601FBE847654),
    dual,
    helpstring("ILastError Interface"),
    pointer_default(unique)
]
    interface ILastError : IDispatch
    {

    };


[
    uuid(4B6B09A4-B221-49DD-917A-B77599D71674),
    version(1.0),
    helpstring("wiafbdrv 1.0 Type Library")
]

library WIAFBLib
{
    importlib("stdole32.tlb");
    importlib("stdole2.tlb");

    [
        uuid(E9AEF5D5-F652-4B44-9805-80F3A0740F67),
        helpstring("_IDeviceActionEvent Interface")
    ]

    dispinterface _IDeviceActionEvent
    {
        properties:
        methods:
        [id(1), helpstring("method DeviceActionEvent")]
            HRESULT DeviceActionEvent();
    };

    [
        uuid(96A79FA6-9936-4F9B-B098-EF685F1FEC53),
        helpstring("DeviceAction Class")
    ]

    coclass DeviceAction
    {
        [default] interface IDeviceAction;
        [default, source ] dispinterface _IDeviceActionEvent;
    };

    [
        uuid(96A79FA6-9936-4F9B-B098-EF685F1FEC55),
        helpstring("LastError Class")
    ]

    coclass LastError
    {
        [default] interface ILastError;
    };

    [
        uuid(96A79FA6-9936-4F9B-B098-EF685F1FEC54),
        helpstring("DeviceControl Class")
    ]

    coclass DeviceControl
    {
        [default] interface IDeviceControl;
    };

    [
        uuid(96A79FA6-9936-4F9B-B098-EF685F1FEC52),
        helpstring("DeviceProperty Class")
    ]

    coclass DeviceProperty
    {
        [default] interface IDeviceProperty;
    };
};
