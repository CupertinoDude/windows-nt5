//////////////////////////////////////////////////////////////////////
// 
// Filename:        msprjctr.idl
//
// Description:     
//
// Copyright (C) 2001 Microsoft Corp.
//
//////////////////////////////////////////////////////////////////////
// This file will be processed by the MIDL tool to
// produce the type library (msprjctr.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";
import "upnphost.idl";

//
// Forward declarations
//
interface IEnumAlbums;
interface IAlbumManager;
interface ISlideshowDevice;
interface ISlideshowService;
interface ISlideshowAlbum;

typedef enum
{
   ISLIDESHOWSERVICE_DISPID_ALBUM_NAME             = 1,
   ISLIDESHOWSERVICE_DISPID_NUM_IMAGES             = 2,
   ISLIDESHOWSERVICE_DISPID_CURRENT_STATE          = 3,
   ISLIDESHOWSERVICE_DISPID_CURRENT_IMAGE_NUMBER   = 4,
   ISLIDESHOWSERVICE_DISPID_CURRENT_IMAGE_URL      = 5,
   ISLIDESHOWSERVICE_DISPID_CURRENT_IMAGE_NAME     = 6,
   ISLIDESHOWSERVICE_DISPID_CURRENT_IMAGE_TITLE    = 7,
   ISLIDESHOWSERVICE_DISPID_CURRENT_IMAGE_SUBJECT  = 8,
   ISLIDESHOWSERVICE_DISPID_CURRENT_IMAGE_AUTHOR   = 9,
   ISLIDESHOWSERVICE_DISPID_IMAGE_FREQUENCY        = 10,
   ISLIDESHOWSERVICE_DISPID_SHOW_FILENAME          = 11,
   ISLIDESHOWSERVICE_DISPID_ALLOW_KEY_CONTROL      = 12,
   ISLIDESHOWSERVICE_DISPID_STRETCH_SMALL_IMAGES   = 13,
   ISLIDESHOWSERVICE_DISPID_IMAGE_SCALE_FACTOR     = 14,
   ISLIDESHOWSERVICE_DISPID_TOGGLE_PLAYPAUSE       = 15,
   ISLIDESHOWSERVICE_DISPID_PLAY                   = 16,
   ISLIDESHOWSERVICE_DISPID_PAUSE                  = 17,
   ISLIDESHOWSERVICE_DISPID_FIRST                  = 18,
   ISLIDESHOWSERVICE_DISPID_LAST                   = 19,
   ISLIDESHOWSERVICE_DISPID_NEXT                   = 20,
   ISLIDESHOWSERVICE_DISPID_PREVIOUS               = 21
} ISLIDESHOWSERVICE_DISPID;

///////////////////////////////////
// CURRENTSTATE_TEXT constants
//
// These constants are the possible
// values for the "CurrentState" 
// variable found in the SlideshowService.
// These should not be localized as they
// are part of the SlideshowService 
// protocol.
//
cpp_quote("#define CURRENTSTATE_TEXT_STOPPED    L\"STOPPED\"")
cpp_quote("#define CURRENTSTATE_TEXT_STARTING   L\"STARTING\"")
cpp_quote("#define CURRENTSTATE_TEXT_PLAYING    L\"PLAYING\"")
cpp_quote("#define CURRENTSTATE_TEXT_PAUSED     L\"PAUSED\"")

    /////////////////////////////////////////
    // IEnumAlbums
    //
    [
       object,
       uuid(FC8AD551-5B8E-424E-92C0-EB6D00449E65),
       helpstring("IEnumAlbums Interface"),
       pointer_default(unique)
    ]
    interface IEnumAlbums : IUnknown
    {
       [helpstring("Next")]
       HRESULT Next([in]      ULONG           celt,
                    [out]     ISlideshowAlbum **ppSlideshowAlbum,
                    [in, out] ULONG           *pceltFetched);
   
       [helpstring("Skip")]
       HRESULT Skip([in] ULONG celt);

       [helpstring("Reset")]
       HRESULT Reset(void);
   
       [helpstring("Clone")]
       HRESULT Clone([out] IEnumAlbums **ppIEnum);
    };

    /////////////////////////////////////////
    // IAlbumManager
    //
    [
        object,
        uuid(2FCB92B6-64A8-4C61-9D96-8C48EA32379D),
        helpstring("IAlbumManager Interface"),
        pointer_default(unique)
    ]
    interface IAlbumManager : IUnknown
    {
       [helpstring("method CreateAlbum")] 
       HRESULT CreateAlbum([in] BSTR bstrAlbumName, [out] ISlideshowAlbum **ppSlideshowAlbum);

       [helpstring("method DeleteAlbum")] 
       HRESULT DeleteAlbum([in] BSTR bstrAlbumName);

       [helpstring("method EnumAlbums")] 
       HRESULT EnumAlbums([out] IEnumAlbums **ppEnum);

       [helpstring("method FindAlbum")] 
       HRESULT FindAlbum([in] BSTR bstrAlbumName, [out] ISlideshowAlbum **ppSlideshowAlbum);

       [helpstring("method PublishAlbum")] 
       HRESULT PublishAlbum([in] BSTR bstrAlbumName);

       [helpstring("method UnpublishAlbum")] 
       HRESULT UnpublishAlbum([in] BSTR bstrAlbumName);

       [helpstring("method IsAlbumPublished")] 
       HRESULT IsAlbumPublished([in]  BSTR bstrAlbumName,
                                [out] BOOL *pbPublished);
    };

    /////////////////////////////////////////
    // ISlideshowDevice
    //
    [
        object,
        uuid(13C382F9-D9B4-41CD-A6E7-07D985347450),
        helpstring("ISlideshowDevice Interface"),
        pointer_default(unique)
    ]
    interface ISlideshowDevice : IUnknown
    {
       [helpstring("GetSlideshowAlbum")]
       HRESULT GetSlideshowAlbum(ISlideshowAlbum **ppAlbum);

       [helpstring("property GetResourcePath")] 
       HRESULT GetResourcePath([out] BSTR *pVal);

       [helpstring("property SetResourcePath")] 
       HRESULT SetResourcePath([in] BSTR Val);
    };

    /////////////////////////////////////////
    // ISlideshowService
    //
    [
        object,
        uuid(2F8E640D-3378-4C56-BC17-6448405FF490),
        dual, 
        oleautomation,
        helpstring("ISlideshowService Interface"),
        pointer_default(unique)
    ]
    interface ISlideshowService : IDispatch
    {
       [propget, id(ISLIDESHOWSERVICE_DISPID_ALBUM_NAME), helpstring("property AlbumName")] 
       HRESULT AlbumName([out, retval] BSTR *pVal);

       [propput, id(ISLIDESHOWSERVICE_DISPID_ALBUM_NAME), helpstring("property AlbumName")] 
       HRESULT AlbumName([in] BSTR newVal);

       [propget, id(ISLIDESHOWSERVICE_DISPID_NUM_IMAGES), helpstring("property NumImages")] 
       HRESULT NumImages([out, retval] long *pVal);

       [propput, id(ISLIDESHOWSERVICE_DISPID_NUM_IMAGES), helpstring("property NumImages")] 
       HRESULT NumImages([in] long newVal);

       [propget, id(ISLIDESHOWSERVICE_DISPID_CURRENT_STATE), helpstring("property CurrentState")] 
       HRESULT CurrentState([out, retval] BSTR *pVal);

       [propput, id(ISLIDESHOWSERVICE_DISPID_CURRENT_STATE), helpstring("property CurrentState")] 
       HRESULT CurrentState([in] BSTR newVal);

       [propget, id(ISLIDESHOWSERVICE_DISPID_CURRENT_IMAGE_NUMBER), helpstring("property CurrentImageNumber")] 
       HRESULT CurrentImageNumber([out, retval] long *pVal);

       [propput, id(ISLIDESHOWSERVICE_DISPID_CURRENT_IMAGE_NUMBER), helpstring("property CurrentImageNumber")] 
       HRESULT CurrentImageNumber([in] long newVal);

       [propget, id(ISLIDESHOWSERVICE_DISPID_CURRENT_IMAGE_URL), helpstring("property CurrentImageURL")] 
       HRESULT CurrentImageURL([out, retval] BSTR *pVal);

       [propput, id(ISLIDESHOWSERVICE_DISPID_CURRENT_IMAGE_URL), helpstring("property CurrentImageURL")] 
       HRESULT CurrentImageURL([in] BSTR newVal);

       [propget, id(ISLIDESHOWSERVICE_DISPID_CURRENT_IMAGE_NAME), helpstring("property CurrentImageName")] 
       HRESULT CurrentImageName([out, retval] BSTR *pVal);

       [propput, id(ISLIDESHOWSERVICE_DISPID_CURRENT_IMAGE_NAME), helpstring("property CurrentImageName")] 
       HRESULT CurrentImageName([in] BSTR newVal);

       [propget, id(ISLIDESHOWSERVICE_DISPID_CURRENT_IMAGE_TITLE), helpstring("property CurrentImageTitle")] 
       HRESULT CurrentImageTitle([out, retval] BSTR *pVal);

       [propput, id(ISLIDESHOWSERVICE_DISPID_CURRENT_IMAGE_TITLE), helpstring("property CurrentImageTitle")] 
       HRESULT CurrentImageTitle([in] BSTR newVal);

       [propget, id(ISLIDESHOWSERVICE_DISPID_CURRENT_IMAGE_SUBJECT), helpstring("property CurrentImageSubject")] 
       HRESULT CurrentImageSubject([out, retval] BSTR *pVal);

       [propput, id(ISLIDESHOWSERVICE_DISPID_CURRENT_IMAGE_SUBJECT), helpstring("property CurrentImageSubject")] 
       HRESULT CurrentImageSubject([in] BSTR newVal);

       [propget, id(ISLIDESHOWSERVICE_DISPID_CURRENT_IMAGE_AUTHOR), helpstring("property CurrentImageAuthor")] 
       HRESULT CurrentImageAuthor([out, retval] BSTR *pVal);

       [propput, id(ISLIDESHOWSERVICE_DISPID_CURRENT_IMAGE_AUTHOR), helpstring("property CurrentImageAuthor")] 
       HRESULT CurrentImageAuthor([in] BSTR newVal);

       [propget, id(ISLIDESHOWSERVICE_DISPID_IMAGE_FREQUENCY), helpstring("property ImageFrequency")] 
       HRESULT ImageFrequency([out, retval] long *pVal);

       [propput, id(ISLIDESHOWSERVICE_DISPID_IMAGE_FREQUENCY), helpstring("property ImageFrequency")] 
       HRESULT ImageFrequency([in] long newVal);

       [propget, id(ISLIDESHOWSERVICE_DISPID_SHOW_FILENAME), helpstring("property ShowFileName")] 
       HRESULT ShowFileName([out, retval] BOOL *pVal);

       [propput, id(ISLIDESHOWSERVICE_DISPID_SHOW_FILENAME), helpstring("property ShowFileName")] 
       HRESULT ShowFileName([in] BOOL newVal);

       [propget, id(ISLIDESHOWSERVICE_DISPID_ALLOW_KEY_CONTROL), helpstring("property AllowKeyControl")] 
       HRESULT AllowKeyControl([out, retval] BOOL *pVal);

       [propput, id(ISLIDESHOWSERVICE_DISPID_ALLOW_KEY_CONTROL), helpstring("property AllowKeyControl")] 
       HRESULT AllowKeyControl([in] BOOL newVal);

       [propget, id(ISLIDESHOWSERVICE_DISPID_STRETCH_SMALL_IMAGES), helpstring("property StretchSmallImages")] 
       HRESULT StretchSmallImages([out, retval] BOOL *pVal);

       [propput, id(ISLIDESHOWSERVICE_DISPID_STRETCH_SMALL_IMAGES), helpstring("property StretchSmallImages")] 
       HRESULT StretchSmallImages([in] BOOL newVal);

       [propget, id(ISLIDESHOWSERVICE_DISPID_IMAGE_SCALE_FACTOR), helpstring("property ImageScaleFactor")] 
       HRESULT ImageScaleFactor([out, retval] long *pVal);

       [propput, id(ISLIDESHOWSERVICE_DISPID_IMAGE_SCALE_FACTOR), helpstring("property ImageScaleFactor")] 
       HRESULT ImageScaleFactor([in] long newVal);


       [id(ISLIDESHOWSERVICE_DISPID_TOGGLE_PLAYPAUSE), helpstring("method TogglePlayPause")] 
       HRESULT TogglePlayPause();

       [id(ISLIDESHOWSERVICE_DISPID_PLAY), helpstring("method Play")] 
       HRESULT Play();

       [id(ISLIDESHOWSERVICE_DISPID_PAUSE), helpstring("method Pause")] 
       HRESULT Pause();

       [id(ISLIDESHOWSERVICE_DISPID_FIRST), helpstring("method First")] 
       HRESULT First();

       [id(ISLIDESHOWSERVICE_DISPID_LAST), helpstring("method Last")] 
       HRESULT Last();

       [id(ISLIDESHOWSERVICE_DISPID_NEXT), helpstring("method Next")] 
       HRESULT Next();

       [id(ISLIDESHOWSERVICE_DISPID_PREVIOUS), helpstring("method Previous")] 
       HRESULT Previous();
    };

   /////////////////////////////////////////
   // ISlideshowAlbum
   //
   [
      object,
      uuid(AE444BBB-12E1-422B-A5D7-A0305E1DBB22),
      helpstring("ISlideshowAlbum Interface"),
      pointer_default(unique)
   ]
   interface ISlideshowAlbum : IUnknown
   {
      [helpstring("method Init")]
      HRESULT Init(BSTR bstrAlbumName);

      [helpstring("method Term")]
      HRESULT Term();

      // starts the image event timer
      [helpstring("method Start")]
      HRESULT Start();

      [propget, helpstring("property ImagePath")] 
      HRESULT ImagePath([out, retval] BSTR *pVal);

      [propput, helpstring("property ImagePath")] 
      HRESULT ImagePath([in] BSTR newVal);
   };


[
    uuid(CA452569-FC1F-4726-9224-E049CA92DF7C),
    version(1.0),
    helpstring("msprjctr 1.0 Type Library")
]
library MSPRJCTRLib
{
    importlib("stdole32.tlb");
    importlib("stdole2.tlb");

    [
        uuid(4CDC1DDD-CF4D-405E-A472-0EA7F22F1551),
        helpstring("Projector Class")
    ]
    coclass Projector
    {
        [default] interface IAlbumManager;
        interface IUPnPDeviceProvider;
    };

   [
      uuid(BF735023-94C5-4EEA-B3CA-D3890CFC6874),
      helpstring("SlideshowDevice Class")
   ]
   coclass SlideshowDevice
   {
      [default] interface ISlideshowDevice;
   };

   [
      uuid(44EA4229-B407-43C1-843A-2F3D9FE02A56),
      helpstring("SlideshowService Class")
   ]
   coclass SlideshowService
   {
      [default] interface ISlideshowService;
      interface ISlideshowAlbum;
   };
};
