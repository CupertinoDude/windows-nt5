[FaxAbort]
Prototype=WINFAXAPI BOOL WINAPI FaxAbort( IN HANDLE FaxJobHandle);
ReturnType=BOOL 
ReturnValueDescription=TRUE indicates Success. FALSE indicates Failure. Call GetLastError() for more information.
Remarks=Abort the specified FAX job.  All outstanding FAX operations are terminated.
NumberOfParameters=1
ParameterName0=FaxJobHandle
ParameterType0=HANDLE
ParameterDescr0=FaxJobHandle - To be determined

[FaxClose]
Prototype=WINFAXAPI BOOL WINAPI FaxClose( IN HANDLE FaxHandle);
ReturnType=BOOL
ReturnValueDescription=FaxClose - To be determined
Remarks=FaxClose - To be determined
NumberOfParameters=1
ParameterName0=FaxHandle
ParameterType0=HANDLE
ParameterDescr0=FaxHandle - To be determined

[FaxConnectFaxServerA]
Prototype=WINFAXAPI BOOL WINAPI FaxConnectFaxServerA( IN  LPSTR MachineName OPTIONAL, OUT LPHANDLE FaxHandle);
ReturnType=BOOL 
ReturnValueDescription=TRUE Indicates Success. FALSE Indicates Failure, call GetLastError() for more error information.
Remarks=Creates a connection to a FAX server. The binding handle that is returned is used for all subsequent FAX API calls.
NumberOfParameters=2
ParameterName0=MachineName
ParameterType0=LPSTR
ParameterDescr0=Machine name, NULL, or "."
ParameterName1=FaxHandle
ParameterType1=LPHANDLE
ParameterDescr1=Pointer to a FAX handle

[FaxConnectFaxServerW]
Prototype=WINFAXAPI BOOL WINAPI FaxConnectFaxServerW( IN  LPWSTR MachineName OPTIONAL, OUT LPHANDLE FaxHandle);
ReturnType=BOOL 
ReturnValueDescription=TRUE Indicates Success. FALSE Indicates Failure, call GetLastError() for more error information.
Remarks=Creates a connection to a FAX server. The binding handle that is returned is used for all subsequent FAX API calls.
NumberOfParameters=2
ParameterName0=MachineName
ParameterType0=LPWSTR
ParameterDescr0=Machine name, NULL, or "."
ParameterName1=FaxHandle
ParameterType1=LPHANDLE
ParameterDescr1=Pointer to a FAX handle

[FaxEnableRoutingMethodA]
Prototype=WINFAXAPI BOOL WINAPI FaxEnableRoutingMethodA( IN  HANDLE FaxPortHandle, IN  LPSTR RoutingGuid, IN  BOOL Enabled);
ReturnType=BOOL
ReturnValueDescription=FaxEnableRoutingMethodA - To Be Determined
Remarks=FaxEnableRoutingMethodA - To Be Determined
NumberOfParameters=3
ParameterName0=FaxPortHandle
ParameterType0=HANDLE
ParameterDescr0=FaxPortHandle - To be determined
ParameterName1=RoutingGuid
ParameterType1=LPSTR
ParameterDescr1=RoutingGuid - To be determined
ParameterName2=Enabled
ParameterType2=BOOL
ParameterDescr2=Enabled - To be determined

[FaxEnableRoutingMethodW]
Prototype=WINFAXAPI BOOL WINAPI FaxEnableRoutingMethodW( IN  HANDLE FaxPortHandle, IN  LPWSTR RoutingGuid, IN  BOOL Enabled);
ReturnType=BOOL
ReturnValueDescription=FaxEnableRoutingMethodW - To Be Determined
Remarks=FaxEnableRoutingMethodW - To Be Determined
NumberOfParameters=3
ParameterName0=FaxPortHandle
ParameterType0=HANDLE
ParameterDescr0=FaxPortHandle - To be determined
ParameterName1=RoutingGuid
ParameterType1=LPWSTR
ParameterDescr1=RoutingGuid - To be determined
ParameterName2=Enabled
ParameterType2=BOOL
ParameterDescr2=Enabled - To be determined

[FaxEnumJobsA]
Prototype=WINFAXAPI BOOL WINAPI FaxEnumJobsA( IN  HANDLE FaxHandle, OUT PFAX_JOB_ENTRYA *JobEntry, OUT LPDWORD JobsReturned);
ReturnType=BOOL
ReturnValueDescription=FaxEnumJobsA - To Be Determined
Remarks=FaxEnumJobsA - To be determined
NumberOfParameters=3
ParameterName0=FaxHandle
ParameterType0=HANDLE
ParameterDescr0=FaxHandle - to be determined
ParameterName1=JobEntry
ParameterType1=PFAX_JOB_ENTRYA *
ParameterDescr1=JobEntry - To be determined
ParameterName2=JobsReturned
ParameterType2=LPDWORD
ParameterDescr2=JobsReturned - To be determined

[FaxEnumJobsW]
Prototype=WINFAXAPI BOOL WINAPI FaxEnumJobsW( IN  HANDLE FaxHandle, OUT PFAX_JOB_ENTRYW *JobEntry, OUT LPDWORD JobsReturned);
ReturnType=BOOL
ReturnValueDescription=FaxEnumJobsW - To Be Determined
Remarks=FaxEnumJobsW - To be determined
NumberOfParameters=3
ParameterName0=FaxHandle
ParameterType0=HANDLE
ParameterDescr0=FaxHandle - To be determined
ParameterName1=JobEntry
ParameterType1=PFAX_JOB_ENTRYW *
ParameterDescr1=JobEntry - To be determined
ParameterName2=JobsReturned
ParameterType2=LPDWORD
ParameterDescr2=JobsReturned - To be determined

[FaxEnumPortsA]
Prototype=WINFAXAPI BOOL WINAPI FaxEnumPortsA( IN HANDLE FaxHandle, OUT PFAX_PORT_INFOA *PortInfo, OUT LPDWORD PortsReturned);
ReturnType=BOOL 
ReturnValueDescription=TRUE indicates Success. FALSE indicates Failure. Call GetLastError() for more information.
Remarks=Enumerates all of the FAX devices attached to the FAX server. The port state information is returned for each device.
NumberOfParameters=3
ParameterName0=FaxHandle
ParameterType0=HANDLE
ParameterDescr0=FAX handle obtained from FaxConnectFaxServer.
ParameterName1=PortInfo
ParameterType1=PFAX_PORT_INFOA *
ParameterDescr1=Buffer to hold the port information
ParameterName2=PortsReturned
ParameterType2=LPDWORD
ParameterDescr2=The number of ports in the buffer

[FaxEnumPortsW]
Prototype=WINFAXAPI BOOL WINAPI FaxEnumPortsW( IN  HANDLE FaxHandle, OUT PFAX_PORT_INFOW *PortInfo, OUT LPDWORD PortsReturned);
ReturnType=BOOL 
ReturnValueDescription=TRUE indicates Success. FALSE indicates Failure. Call GetLastError() for more information.
Remarks=Enumerates all of the FAX devices attached to the FAX server. The port state information is returned for each device.
NumberOfParameters=3
ParameterName0=FaxHandle
ParameterType0=HANDLE
ParameterDescr0=FAX handle obtained from FaxConnectFaxServer.
ParameterName1=PortInfo
ParameterType1=PFAX_PORT_INFOW *
ParameterDescr1=Buffer to hold the port information
ParameterName2=PortsReturned
ParameterType2=LPDWORD
ParameterDescr2=The number of ports in the buffer

[FaxEnumRoutingMethodsA]
Prototype=WINFAXAPI BOOL WINAPI FaxEnumRoutingMethodsA( IN  HANDLE FaxPortHandle, OUT PFAX_ROUTING_METHODA *RoutingMethod, OUT LPDWORD MethodsReturned);
ReturnType=BOOL
ReturnValueDescription=FaxEnumRoutingMethodsA - To Be Determined
Remarks=FaxEnumRoutingMethodsA - To Be Determined
NumberOfParameters=3
ParameterName0=FaxPortHandle
ParameterType0=HANDLE
ParameterDescr0=FaxPortHandle - To be determined
ParameterName1=RoutingMethod
ParameterType1=PFAX_ROUTING_METHODA *
ParameterDescr1=RoutingMethod - To be determined
ParameterName2=MethodsReturned
ParameterType2=LPDWORD
ParameterDescr2=MethodsReturned - To be determined

[FaxEnumRoutingMethodsW]
Prototype=WINFAXAPI BOOL WINAPI FaxEnumRoutingMethodsW( IN  HANDLE FaxPortHandle, OUT PFAX_ROUTING_METHODW *RoutingMethod, OUT LPDWORD MethodsReturned);
ReturnType=BOOL
ReturnValueDescription=FaxEnumRoutingMethodsW - To Be Determined
Remarks=FaxEnumRoutingMethodsA - To Be Determined
NumberOfParameters=3
ParameterName0=FaxPortHandle
ParameterType0=HANDLE
ParameterDescr0=FaxPortHandle - To be determined
ParameterName1=RoutingMethod
ParameterType1=PFAX_ROUTING_METHODW *
ParameterDescr1=RoutingMethod - To be determined
ParameterName2=MethodsReturned
ParameterType2=LPDWORD
ParameterDescr2=MethodsReturned - To be determined

[FaxFreeBuffer]
Prototype=WINFAXAPI VOID WINAPI FaxFreeBuffer( LPVOID Buffer);
ReturnType=VOID 
ReturnValueDescription=Frees a block of memory.
Remarks=Frees a block of memory.
NumberOfParameters=1
ParameterName0=Buffer
ParameterType0=LPVOID
ParameterDescr0=Points to a block of memory to be freed.

[FaxGetConfigurationA]
Prototype=WINFAXAPI BOOL WINAPI FaxGetConfigurationA( IN HANDLE FaxHandle, OUT PFAX_CONFIGURATIONA *FaxConfig);
ReturnType=BOOL 
ReturnValueDescription=TRUE indicates Success. FALSE indicates Failure. Call GetLastError() for more information.
Remarks=Retrieves the FAX configuration from the FAX server. The SizeOfStruct in the FaxConfig argument MUST be set to a value=>= sizeof(FAX_CONFIGURATION).
NumberOfParameters=2
ParameterName0=FaxHandle
ParameterType0=HANDLE
ParameterDescr0=FAX handle obtained from FaxConnectFaxServer.
ParameterName1=FaxConfig
ParameterType1=PFAX_CONFIGURATIONA *
ParameterDescr1=Pointer to a FAX_CONFIGURATIONA structure.

[FaxGetConfigurationW]
Prototype=WINFAXAPI BOOL WINAPI FaxGetConfigurationW( IN HANDLE FaxHandle, OUT PFAX_CONFIGURATIONW *FaxConfig);
ReturnType=BOOL 
ReturnValueDescription=TRUE indicates Success. FALSE indicates Failure. Call GetLastError() for more information.
Remarks=Retrieves the FAX configuration from the FAX server. The SizeOfStruct in the FaxConfig argument MUST be set to a value=>= sizeof(FAX_CONFIGURATION).
NumberOfParameters=2
ParameterName0=FaxHandle
ParameterType0=HANDLE
ParameterDescr0=FAX handle obtained from FaxConnectFaxServer.
ParameterName1=FaxConfig
ParameterType1=PFAX_CONFIGURATIONW *
ParameterDescr1=Pointer to a FAX_CONFIGURATIONW structure.

[FaxGetDeviceStatusA]
Prototype=WINFAXAPI BOOL WINAPI FaxGetDeviceStatusA( IN  HANDLE FaxPortHandle, OUT PFAX_DEVICE_STATUSA *DeviceStatus);
ReturnType=BOOL 
ReturnValueDescription=To Be Determined
Remarks=Obtains a status report for the FAX devices being used by the FAX server.
NumberOfParameters=2
ParameterName0=FaxPortHandle
ParameterType0=HANDLE
ParameterDescr0=FAX handle obtained from FaxConnectFaxServer.
ParameterName1=DeviceStatus
ParameterType1=PFAX_DEVICE_STATUSA *
ParameterDescr1=DeviceStatus - To be determined

[FaxGetDeviceStatusW]
Prototype=WINFAXAPI BOOL WINAPI FaxGetDeviceStatusW( IN  HANDLE FaxPortHandle, OUT PFAX_DEVICE_STATUSW *DeviceStatus);
ReturnType=BOOL 
ReturnValueDescription=TRUE indicates Success. FALSE indicates Failure. Call GetLastError() for more information.
Remarks=Obtains a status report for the FAX devices being used by the FAX server.
NumberOfParameters=2
ParameterName0=FaxPortHandle
ParameterType0=HANDLE
ParameterDescr0=FAX handle obtained from FaxConnectFaxServer.
ParameterName1=DeviceStatus
ParameterType1=PFAX_DEVICE_STATUSW *
ParameterDescr1=DeviceStatus - To be determined

[FaxGetJobA]
Prototype=WINFAXAPI BOOL WINAPI FaxGetJobA( IN HANDLE FaxHandle, IN DWORD JobId, OUT PFAX_JOB_ENTRYA *JobEntry);
ReturnType=BOOL 
ReturnValueDescription=FaxGetJobA - To Be Determined
Remarks=FaxGetJobA - To be determined
NumberOfParameters=3
ParameterName0=FaxHandle
ParameterType0=HANDLE
ParameterDescr0=FaxHandle - To be determined
ParameterName1=JobId
ParameterType1=DWORD
ParameterDescr1=JobId - To be determined
ParameterName2=JobEntry
ParameterType2=PFAX_JOB_ENTRYA *
ParameterDescr2=JobEntry - To be determined

[FaxGetJobW]
Prototype=WINFAXAPI BOOL WINAPI FaxGetJobW( IN HANDLE FaxHandle, IN DWORD JobId, OUT PFAX_JOB_ENTRYW *JobEntry);
ReturnType=BOOL 
ReturnValueDescription=FaxGetJobW - To Be Determined
Remarks=FaxGetJobA - To be determined
NumberOfParameters=3
ParameterName0=FaxHandle
ParameterType0=HANDLE
ParameterDescr0=FaxHandle - To be determined
ParameterName1=JobId
ParameterType1=DWORD
ParameterDescr1=JobId - To be determined
ParameterName2=JobEntry
ParameterType2=PFAX_JOB_ENTRYW *
ParameterDescr2=JobEntry - To be determined

[FaxGetLoggingCategoriesA]
Prototype=WINFAXAPI BOOL WINAPI FaxGetLoggingCategoriesA( IN  HANDLE FaxHandle, OUT PFAX_LOG_CATEGORY *Categories, OUT LPDWORD NumberCategories);
ReturnType=BOOL 
ReturnValueDescription=FaxGetLoggingCategoriesA - To Be Determined
Remarks=FaxGetLoggingCategoriesA - To Be Determined
NumberOfParameters=3
ParameterName0=FaxHandle
ParameterType0=HANDLE
ParameterDescr0=FaxHandle - To be determined
ParameterName1=Categories
ParameterType1=PFAX_LOG_CATEGORY *
ParameterDescr1=Categories - To be determined
ParameterName2=NumberCategories
ParameterType2=LPDWORD
ParameterDescr2=NumberCategories - To be determined

[FaxGetLoggingCategoriesW]
Prototype=WINFAXAPI BOOL WINAPI FaxGetLoggingCategoriesW( IN  HANDLE FaxHandle, OUT PFAX_LOG_CATEGORY *Categories, OUT LPDWORD NumberCategories);
ReturnType=BOOL 
ReturnValueDescription=FaxGetLoggingCategoriesW - To Be Determined
Remarks=FaxGetLoggingCategoriesW - To Be Determined
NumberOfParameters=3
ParameterName0=FaxHandle
ParameterType0=HANDLE
ParameterDescr0=FaxHandle - To be determined
ParameterName1=Categories
ParameterType1=PFAX_LOG_CATEGORY *
ParameterDescr1=Categories - To be determined
ParameterName2=NumberCategories
ParameterType2=LPDWORD
ParameterDescr2=NumberCategories - To be determined

; TO BE ELIMINATED FROM THE API
;[FaxGetPageData]
;Prototype=WINFAXAPI BOOL WINAPI FaxGetPageData( IN HANDLE FaxHandle, IN DWORD JobId, OUT LPBYTE *Buffer, OUT LPDWORD BufferSize, OUT LPDWORD ImageWidth, OUT LPDWORD ImageHeight);
;ReturnType=BOOL 
;ReturnValueDescription=FaxGetPageData - To Be Determined
;Remarks=FaxGetPageData - To Be Determined
;NumberOfParameters=6
;ParameterName0=FaxHandle
;ParameterType0=HANDLE
;ParameterDescr0=FaxHandle - To be determined
;ParameterName1=JobId
;ParameterType1=DWORD
;ParameterDescr1=JobId - To be determined
;ParameterName2=Buffer
;ParameterType2=LPBYTE *
;ParameterDescr2=Buffer - To be determined
;ParameterName3=BufferSize
;ParameterType3=LPDWORD
;ParameterDescr3=BufferSize - To be determined
;ParameterName4=ImageWidth
;ParameterType4=LPDWORD
;ParameterDescr4=ImageWidth - To be determined
;ParameterName5=ImageHeight
;ParameterType5=LPDWORD
;ParameterDescr5=ImageHeight - To be determined

[FaxGetPortA]
Prototype=WINFAXAPI BOOL WINAPI FaxGetPortA( IN  HANDLE FaxPortHandle, OUT PFAX_PORT_INFOA *PortInfo);
ReturnType=BOOL 
ReturnValueDescription=ERROR_SUCCESS for success, otherwise a WIN32 error code.
Remarks=Returns port status information for a requested port. The device id passed in should be optained from FAXEnumPorts.
NumberOfParameters=2
ParameterName0=FaxPortHandle
ParameterType0=HANDLE
ParameterDescr0=FaxPortHandle - To be determined
ParameterName1=PortInfo
ParameterType1=PFAX_PORT_INFOA *
ParameterDescr1=Buffer to hold the port information

[FaxGetPortW]
Prototype=WINFAXAPI BOOL WINAPI FaxGetPortW( IN  HANDLE FaxPortHandle, OUT PFAX_PORT_INFOW *PortInfo);
ReturnType=BOOL 
ReturnValueDescription=ERROR_SUCCESS for success, otherwise a WIN32 error code.
Remarks=Returns port status information for a requested port. The device id passed in should be optained from FAXEnumPorts.
NumberOfParameters=2
ParameterName0=FaxPortHandle
ParameterType0=HANDLE
ParameterDescr0=FaxPortHandle - To be determined
ParameterName1=PortInfo
ParameterType1=PFAX_PORT_INFOW *
ParameterDescr1=Buffer to hold the port information

[FaxGetRoutingInfoA]
Prototype=WINFAXAPI BOOL WINAPI FaxGetRoutingInfoA( IN  HANDLE FaxPortHandle, IN  LPSTR RoutingGuid, OUT LPBYTE *RoutingInfoBuffer, OUT LPDWORD RoutingInfoBufferSize);
ReturnType=BOOL
ReturnValueDescription=FaxGetRoutingInfoA - To Be Determined
Remarks=FaxGetRoutingInfoA - To Be Determined
NumberOfParameters=4
Parametername0=FaxPortHandle
ParameterType0=HANDLE
ParameterDescr0=FaxPortHandle - To be determined
ParameterName1=RoutingGuid
ParameterType1=LPSTR
ParameterDescr1=RoutingGuid - To be determined
ParameterName2=RoutingInfoBuffer
ParameterType2=LPBYTE *
ParameterDescr2=RoutingBuffer - To be determined
ParameterName3=RoutingInfoBufferSize
ParameterType3=LPDWORD
ParameterDescr3=RoutingInfoBufferSize - To be determined

[FaxGetRoutingInfoW]
Prototype=WINFAXAPI BOOL WINAPI FaxGetRoutingInfoW( IN  HANDLE FaxPortHandle, IN  LPWSTR RoutingGuid, OUT LPBYTE *RoutingInfoBuffer, OUT LPDWORD RoutingInfoBufferSize);
ReturnType=BOOL
ReturnValueDescription=FaxGetRoutingInfoW - To Be Determined
Remarks=FaxGetRoutingInfoW - To Be Determined
NumberOfParameters=4
ParameterName0=FaxPortHandle
ParameterType0=HANDLE
ParameterDescr0=FaxPortHandle - To be determined
ParameterName1=RoutingGuid
ParameterType1=LPWSTR
ParameterDescr1=RoutingGuid - To be determined
ParameterName2=RoutingInfoBuffer
ParameterType2=LPBYTE *
ParameterDescr2=RoutingBuffer - To be determined
ParameterName3=RoutingInfoBufferSize
ParameterType3=LPDWORD
ParameterDescr3=RoutingInfoBufferSize - To be determined

[FaxInitializeEventQueue]
Prototype=WINFAXAPI BOOL WINAPI FaxInitializeEventQueue( IN  HANDLE FaxHandle, IN  HANDLE CompletionPort, IN  DWORD CompletionKey);
ReturnType=BOOL 
ReturnValueDescription=TRUE indicates Success. FALSE indicates Failure. Call GetLastError() for more information.
Remarks=Initializes the client side event queue.  There can be one event queue initialized for each fax server that the client app is connected to.
NumberOfParameters=3
ParameterName0=FaxHandle
ParameterType0=HANDLE
ParameterDescr0=FAX handle obtained from FaxConnectFaxServer.
ParameterName1=CompletionPort
ParameterType1=HANDLE
ParameterDescr1=Handle of an existing completion port opened using CreateIoCompletionPort.
ParameterName2=CompletionKey
ParameterType2=DWORD
ParameterDescr2=A value that will be returned through the lpCompletionKey parameter of GetQueuedCompletionStaus.

; ELIMINATED FROM THE API
;[FaxOpenJob]
;Prototype=BOOL WINAPI FaxOpenJob( IN HANDLE FaxPortHandle, OUT LPHANDLE FaxJobHandle );
;ReturnType=BOOL 
;ReturnValueDescription=To Be Determined
;NumberOfParameters=2
;ParameterName0=FaxPortHandle
;ParameterType0=HANDLE
;ParameterName1=FaxJobHandle
;ParameterType1=LPHANDLE

[FaxOpenPort]
Prototype=WINFAXAPI BOOL WINAPI FaxOpenPort( IN  HANDLE FaxHandle, IN  DWORD DeviceId, IN  DWORD Flags, OUT LPHANDLE FaxPortHandle); 
ReturnType=BOOL 
ReturnValueDescription=TRUE indicates Success. FALSE indicates Failure. Call GetLastError() for more information.
Remarks=Opens a fax port for subsequent use in other fax APIs.
NumberOfParameters=4
ParameterName0=FaxHandle
ParameterType0=HANDLE
ParameterDescr0=FAX handle obtained from FaxConnectFaxServer.
ParameterName1=DeviceId
ParameterType1=DWORD
ParameterDescr1=Requested device id
ParameterName2=Flags
ParameterType2=DWORD
ParameterDescr2=To be determined
ParameterName3=FaxPortHandle
ParameterType3=LPHANDLE
ParameterDescr3=The resulting FAX port handle.

[FaxPrintCoverPageA]
Prototype=WINFAXAPI BOOL WINAPI FaxPrintCoverPageA( IN HDC hDC, IN LPSTR CoverPageName, IN BOOL ServerCoverPage, IN PFAX_COVERPAGE_INFOA CoverPageInfo);
ReturnType=BOOL 
ReturnValueDescription=TRUE indicates Success. FALSE indicates Failure. Call GetLastError() for more information.
Remarks=Prints a coverpage into the printer DC provided.
NumberOfParameters=4
ParameterName0=hDC
ParameterType0=HDC
ParameterDescr0=Printer DC
ParameterName1=CoverPageName
ParameterType1=LPSTR
ParameterDescr1=Coverpage file name, no path or extension
ParameterName2=ServerCoverPage
ParameterType2=BOOL
ParameterDescr2=ServerCoverPage - To be determined
ParameterName3=CoverPageInfo
ParameterType3=PFAX_COVERPAGE_INFOA
ParameterDescr3=Cover page information

[FaxPrintCoverPageW]
Prototype=WINFAXAPI BOOL WINAPI FaxPrintCoverPageW( IN HDC hDC, IN LPWSTR CoverPageName, IN BOOL ServerCoverPage, IN PFAX_COVERPAGE_INFOW CoverPageInfo);
ReturnType=BOOL 
ReturnValueDescription=TRUE indicates Success. FALSE indicates Failure. Call GetLastError() for more information.
Remarks=Prints a coverpage into the printer DC provided.
NumberOfParameters=4
ParameterName0=hDC
ParameterType0=HDC
ParameterDescr0=Printer DC
ParameterName1=CoverPageName
ParameterType1=LPWSTR
ParameterDescr1=Coverpage file name, no path or extension
ParameterName2=ServerCoverPage
ParameterType2=BOOL
ParameterDescr2=ServerCoverPage - To be determined
ParameterName3=CoverPageInfo
ParameterType3=PFAX_COVERPAGE_INFOW
ParameterDescr3=Cover page information

[FaxReceiveDocumentA]
Prototype=WINFAXAPI BOOL WINAPI FaxReceiveDocumentA( IN HANDLE FaxHandle, OUT LPSTR FileName, IN  DWORD FileNameSize, OUT LPHANDLE FaxJobHandle);
ReturnType=BOOL 
ReturnValueDescription=TRUE indicates Success. FALSE indicates Failure. Call GetLastError() for more information.
Remarks=Receives a FAX document.
NumberOfParameters=4
ParameterName0=FaxHandle
ParameterType0=HANDLE
ParameterDescr0=FAX handle obtained from FaxConnectFaxServer.
ParameterName1=FileName
ParameterType1=LPSTR
ParameterDescr1=File name of the received fax.
ParameterName2=FileNameSize
ParameterType2=DWORD
ParameterDescr2=Size of the file name buffer.
ParameterName3=FaxJobHandle
ParameterType3=HANDLE
ParameterDescr3=FaxJobHandle - To be determined

[FaxReceiveDocumentW]
Prototype=WINFAXAPI BOOL WINAPI FaxReceiveDocumentW( IN HANDLE FaxHandle, OUT LPWSTR FileName, IN  DWORD FileNameSize, OUT LPHANDLE FaxJobHandle);
ReturnType=BOOL 
ReturnValueDescription=TRUE indicates Success. FALSE indicates Failure. Call GetLastError() for more information.
Remarks=Receives a FAX document.
NumberOfParameters=4
ParameterName0=FaxHandle
ParameterType0=HANDLE
ParameterDescr0=FAX handle obtained from FaxConnectFaxServer.
ParameterName1=FileName
ParameterType1=LPWSTR
ParameterDescr1=File name of the received fax.
ParameterName2=FileNameSize
ParameterType2=DWORD
ParameterDescr2=Size of the file name buffer.
ParameterName3=FaxJobHandle
ParameterType3=HANDLE
ParameterDescr3=FaxJobHandle - To be determined

[FaxSendDocumentA]
Prototype=BOOL WINAPI FaxSendDocumentA( IN HANDLE FaxHandle, IN LPSTR FileName, IN PFAX_JOB_PARAMA JobParams, OUT LPDWORD FaxJobId );
ReturnType=BOOL 
ReturnValueDescription=TRUE indicates Success. FALSE indicates Failure. Call GetLastError() for more information.
Remarks=Sends a FAX document to the specified recipient. This is an asychronous operation. Use FaxReportStatus to determine when the send is completed.
NumberOfParameters=4
ParameterName0=FaxHandle
ParameterType0=HANDLE
ParameterDescr0=FAX handle obtained from FaxConnectFaxServer.
ParameterName1=FileName
ParameterType1=LPSTR
ParameterDescr1=File containing the TIFF-F FAX document.
ParameterName2=JobParams
ParameterType2=PFAX_JOB_PARAMA
ParameterDescr2=Pointer to FAX_JOB_PARAMA struct.
ParameterName3=FaxJobId
ParameterType3=LPDWORD
ParameterDescr3=FaxJobId - To be determined

[FaxSendDocumentW]
Prototype=WINFAXAPI BOOL WINAPI FaxSendDocumentW( IN HANDLE FaxHandle, IN LPWSTR FileName, IN PFAX_JOB_PARAMW JobParams, OUT LPDWORD FaxJobId);
ReturnType=BOOL 
ReturnValueDescription=TRUE indicates Success. FALSE indicates Failure. Call GetLastError() for more information.
Remarks=Sends a FAX document to the specified recipient. This is an asychronous operation. Use FaxReportStatus to determine when the send is completed.
NumberOfParameters=4
ParameterName0=FaxHandle
ParameterType0=HANDLE
ParameterDescr0=FAX handle obtained from FaxConnectFaxServer.
ParameterName1=FileName
ParameterType1=LPWSTR
ParameterDescr1=File containing the TIFF-F FAX document.
ParameterName2=JobParams
ParameterType2=PFAX_JOB_PARAMW
ParameterDescr2=Pointer to FAX_JOB_PARAMW struct.
ParameterName3=FaxJobId
ParameterType3=LPDWORD
ParameterDescr3=FaxJobId - To be determined

[FaxSetConfigurationA]
Prototype=WINFAXAPI BOOL WINAPI FaxSetConfigurationA( IN HANDLE FaxHandle, IN PFAX_CONFIGURATIONA FaxConfig );
ReturnType=BOOL 
ReturnValueDescription=FaxSetConfigurationA - To Be Determined
Remarks=FaxSetConfigurationA - To Be Determined
NumberOfParameters=2
ParameterName0=FaxHandle
ParameterType0=HANDLE
ParameterDescr0=FaxHandle - To be determined
ParameterName1=FaxConfig
ParameterType1=PFAX_CONFIGURATIONA
ParameterDescr1=FaxConfig - To be determined

[FaxSetConfigurationW]
Prototype=WINFAXAPI BOOL WINAPI FaxSetConfigurationW( IN HANDLE FaxHandle, IN PFAX_CONFIGURATIONW FaxConfig);
ReturnType=BOOL 
ReturnValueDescription=FaxSetConfigurationW - To Be Determined
Remarks=FaxSetConfigurationW - To Be Determined
NumberOfParameters=2
ParameterName0=FaxHandle
ParameterType0=HANDLE
ParameterDescr0=FaxHandle - To be determined
ParameterName1=FaxConfig
ParameterType1=PFAX_CONFIGURATIONW
ParameterDescr1=FaxConfig - To be determined

[FaxSetJobA]
Prototype=WINFAXAPI BOOL WINAPI FaxSetJobA( IN HANDLE FaxHandle, IN DWORD JobId, IN DWORD Command, IN PFAX_JOB_ENTRYA JobEntry);
ReturnType=BOOL 
ReturnValueDescription=FaxSetJobA - To Be Determined
Remarks=FaxSetJobA - To be determined
NumberOfParameters=4
ParameterName0=FaxHandle
ParameterType0=HANDLE
ParameterDescr0=FaxHandle - To be determined
ParameterName1=JobId
ParameterType1=DWORD
ParameterDescr1=JobId - To be determined
ParameterName2=Command
ParameterType2=DWORD
ParameterDescr2=Command - To be determined
ParameterName3=JobEntry
ParameterType3=PFAX_JOB_ENTRYA
ParameterDescr3=JobEntry - To be determined

[FaxSetJobW]
Prototype=WINFAXAPI BOOL WINAPI FaxSetJobW( IN HANDLE FaxHandle, IN DWORD JobId, IN DWORD Command, IN PFAX_JOB_ENTRYW JobEntry);
ReturnType=BOOL 
ReturnValueDescription=FaxSetJobW - To Be Determined
Remarks=FaxSetJobW - To be determined
NumberOfParameters=4
ParameterName0=FaxHandle
ParameterType0=HANDLE
ParameterDescr0=FaxHandle - To be determined
ParameterName1=JobId
ParameterType1=DWORD
ParameterDescr1=JobId - To be determined
ParameterName2=Command
ParameterType2=DWORD
ParameterDescr2=Command - To be determined
ParameterName3=JobEntry
ParameterType3=PFAX_JOB_ENTRYW
ParameterDescr3=JobEntry - To be determined

[FaxSetLoggingCategoriesA]
Prototype=WINFAXAPI BOOL WINAPI FaxSetLoggingCategoriesA( IN  HANDLE FaxHandle, IN  PFAX_LOG_CATEGORY Categories, IN  DWORD NumberCategories);
ReturnType=BOOL 
ReturnValueDescription=FaxHandle - To Be Determined
Remarks=FaxSetLoggingCategoriesA - To be determined
NumberOfParameters=3
ParameterName0=FaxHandle
ParameterType0=HANDLE
ParameterDescr0=FaxHandle - To be determined
ParameterName1=Categories
ParameterType1=PFAX_LOG_CATEGORY
ParameterDescr1=Categories - To be determined
ParameterName2=NumberCategories
ParameterType2=DWORD
ParameterDescr2=NumberCategories - To be determined

[FaxSetLoggingCategoriesW]
Prototype=WINFAXAPI BOOL WINAPI FaxSetLoggingCategoriesW( IN  HANDLE FaxHandle, IN  PFAX_LOG_CATEGORY Categories, IN  DWORD NumberCategories);
ReturnType=BOOL 
ReturnValueDescription=FaxHandle - To Be Determined
Remarks=FaxSetLoggingCategoriesW - To be determined
NumberOfParameters=3
ParameterName0=FaxHandle
ParameterType0=HANDLE
ParameterDescr0=FaxHandle - To be determined
ParameterName1=Categories
ParameterType1=PFAX_LOG_CATEGORY
ParameterDescr1=Categories - To be determined
ParameterName2=NumberCategories
ParameterType2=DWORD
ParameterDescr2=NumberCategories - To be determined

[FaxSetPortA]
Prototype=WINFAXAPI BOOL WINAPI FaxSetPortA( IN  HANDLE FaxPortHandle, IN  PFAX_PORT_INFOA PortInfo);
ReturnType=BOOL 
ReturnValueDescription=ERROR_SUCCESS for success, otherwise a WIN32 error code.
Remarks=Changes the port capability mask.  This allows the caller to enable or disable sending & receiving on a port basis.
NumberOfParameters=2
ParameterName0=FaxPortHandle
ParameterType0=HANDLE
ParameterDescr0=FaxPortHandle - To be determined
ParameterName1=PortInfo
ParameterType1=PFAX_PORT_INFOA
ParameterDescr1=PortInfo - To be determined

[FaxSetPortW]
Prototype=WINFAXAPI BOOL WINAPI FaxSetPortW( IN  HANDLE FaxPortHandle, IN  PFAX_PORT_INFOW PortInfo);
ReturnType=BOOL 
ReturnValueDescription=ERROR_SUCCESS for success, otherwise a WIN32 error code.
Remarks=Changes the port capability mask.  This allows the caller to enable or disable sending & receiving on a port basis.
NumberOfParameters=2
ParameterName0=FaxPortHandle
ParameterType0=HANDLE
ParameterDescr0=FaxPortHandle - To be determined
ParameterName2=PortInfo
ParameterType2=PFAX_PORT_INFOW
ParameterDescr1=PortInfo - To be determined

[FaxSetRoutingInfoA]
Prototype=WINFAXAPI BOOL WINAPI FaxSetRoutingInfoA( IN  HANDLE FaxPortHandle, IN  LPSTR RoutingGuid, IN  LPBYTE RoutingInfoBuffer, IN  DWORD RoutingInfoBufferSize);
ReturnType=BOOL
ReturnValueDescription=FaxSetRoutingInfoA - To Be Determined
Remarks=FaxSetRoutingInfoA - To Be Determined
NumberOfParameters=4
ParameterName0=FaxPortHandle
ParameterType0=HANDLE
ParameterDescr0=FaxPortHandle - To be determined
ParameterName1=RoutingGuid
ParameterType1=LPSTR
ParameterDescr1=RoutingGuid - To be determined
ParameterName2=RoutingInfoBuffer
ParameterType2=LPBYTE
ParameterDescr2=RoutingInfoBuffer - To be determined
ParameterName3=RoutingInfoBufferSize
ParameterType3=DWORD
ParameterDescr3=RoutingInfoBufferSize - To be determined

[FaxSetRoutingInfoW]
Prototype=WINFAXAPI BOOL WINAPI FaxSetRoutingInfoW( IN  HANDLE FaxPortHandle, IN  LPWSTR RoutingGuid, IN  LPBYTE RoutingInfoBuffer, IN  DWORD RoutingInfoBufferSize);
ReturnType=BOOL
ReturnValueDescription=FaxSetRoutingInfoW - To Be Determined
Remarks=FaxSetRoutingInfoW - To Be Determined
NumberOfParameters=4
ParameterName0=FaxPortHandle
ParameterType0=HANDLE
ParameterDescr0=FaxPortHandle - To be determined
ParameterName1=RoutingGuid
ParameterType1=LPWSTR
ParameterDescr1=RoutingGuid - To be determined
ParameterName2=RoutingInfoBuffer
ParameterType2=LPBYTE
ParameterDescr2=RoutingInfoBuffer - To be determined
ParameterName3=RoutingInfoBufferSize
ParameterType3=DWORD
ParameterDescr3=RoutingInfoBufferSize - To be determined

[FaxStartPrintJobA]
Prototype=WINFAXAPI BOOL WINAPI FaxStartPrintJobA( IN  LPSTR PrinterName, IN  PFAX_PRINT_INFOA PrintInfo, OUT LPDWORD FaxJobId, OUT HDC *FaxDeviceContext);
ReturnType=BOOL 
ReturnValueDescription=TRUE indicates Success. FALSE indicates Failure. Call GetLastError() for more information.
Remarks=Starts a print job for the specified printer. This function provides functionality beyond what the caller can provide by using StartDoc(). This function disables the display of the fax send wizard and also passes along the information that would otherwise be gathered by the fax wizard ui.
NumberOfParameters=4
ParameterName0=PrinterName
ParameterType0=LPSTR
ParameterDescr0=Fax printer name (must be a fax printer)
ParameterName1=PrintInfo
ParameterType1=PFAX_PRINT_INFOA
ParameterDescr1=Fax print information
ParameterName2=FaxJobId
ParameterType2=LPDWORD
ParameterDescr2=Job id of the resulting print job
ParameterName3=FaxDeviceContext
ParameterType3=HDC *
ParameterDescr3=Points to the Handle to the newly created device context

[FaxStartPrintJobW]
Prototype=WINFAXAPI BOOL WINAPI FaxStartPrintJobW( IN  LPWSTR PrinterName, IN  PFAX_PRINT_INFOW PrintInfo, OUT LPDWORD FaxJobId, OUT HDC *FaxDeviceContext);
ReturnType=BOOL 
ReturnValueDescription=TRUE indicates Success. FALSE indicates Failure. Call GetLastError() for more information.
Remarks=Starts a print job for the specified printer. This function provides functionality beyond what the caller can provide by using StartDoc(). This function disables the display of the fax send wizard and also passes along the information that would otherwise be gathered by the fax wizard ui.
NumberOfParameters=4
ParameterName0=PrinterName
ParameterType0=LPWSTR
ParameterDescr0=Fax printer name (must be a fax printer)
ParameterName1=PrintInfo
ParameterType1=PFAX_PRINT_INFOW
ParameterDescr1=Fax print information
ParameterName2=FaxJobId
ParameterType2=LPDWORD
ParameterDescr2=Job id of the resulting print job
ParameterName3=FaxDeviceContext
ParameterType3=HDC *
ParameterDescr3=Points to the Handle to the newly created device context
