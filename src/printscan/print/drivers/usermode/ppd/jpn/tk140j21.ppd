*PPD-Adobe: "4.2"
*% Adobe Systems PostScript(R) Printer Description File
*% Copyright (c) 1994 Tektronix, Incorporated.  All rights reserved.
*% Tektronix (R) is a registered trademark of Tektronix, Inc.
*% TekColor TM is a trademark of Tektronix, Inc.
*% Phaser TM is a trademark of Tektronix, Inc., for color printers and
*%  related products.

*FormatVersion: "4.2"
*FileVersion: "1.0"
*LanguageEncoding: JIS83-RKSJ
*LanguageVersion: Japanese
*PCFileName: "TK140J21.PPD"
*Product: "(Phaser 140J)"
*PSVersion: "(2013.113) 11"
*ModelName: "Tektronix Phaser 140J"
*ShortNickName: "Tektronix Phaser 140J 2JF"
*NickName: "Tektronix Phaser 140J with 2 japanese fonts"

*% === Installable Options ===========
*OpenGroup: InstallableOptions/Options Installed

*OpenUI *InstalledMemory/Memory Configuration: PickOne
*DefaultInstalledMemory: None
*InstalledMemory None/Standard 8 MB RAM: ""
*InstalledMemory 12Meg/12 MB Total RAM: ""
*InstalledMemory 24Meg/24 MB Total RAM: ""
*CloseUI: *InstalledMemory

*OpenUI *Option1/ネットワーク　カード: PickOne
*DefaultOption1:None 
*Option1 None/インストールされていない: ""
*Option1 P1/Ethernet and NetWare: ""
*Option1 P2/Ethernet, NetWare and TCP/IP: ""
*CloseUI: *Option1

*CloseGroup: InstallableOptions

*% === Constraints ====================

*UIConstraints: *InstalledMemory None *PageSize Legal
*UIConstraints: *InstalledMemory None *PageRegion Legal

*% === Device Capabilities ============

*LanguageLevel: "2"
*Protocols: BCP

*FreeVM: "851584"
*VMOption None/Standard 8 MB RAM: "851584"
*VMOption 12Meg/12 MB Total RAM: "2940544"
*VMOption 24Meg/24 MB Total RAM: "8175232"

*TTRasterizer: Type42
*ColorDevice: True
*DefaultColorSpace: CMYK
*VariablePaperSize: True
*AccurateScreensSupport: True
*SuggestedJobTimeout: "0"
*SuggestedWaiTimeout: "300"

*Throughput: "1"
*Password: "()"
*ExitServer: "
  count 0 eq
  { false } { true exch startjob } ifelse
  not
  { (WARNING: Cannot modify initial VM.) =
    (Missing or invalid password.) =
    (Please contact the author of this software.) = flush quit
  } if
"
*End
*Reset: "
  count 0 eq
  { false } { true exch startjob } ifelse
  not
  { (WARNING: Cannot reset printer.) =
    (Missing or invalid password.) =
    (Please contact the author of this software.) = flush quit
  } if
  systemdict /quit get exec
  (WARNING : Printer Reset Failed.) = flush
"
*End

*DefaultResolution: 360dpi
*?Resolution: "
  save currentpagedevice
  /HWResolution get 0 get (   ) cvs print (dpi) = flush restore"
*End

*% Halftone Information =================
*ScreenFreq: "60.0"
*ScreenAngle: "0.0"
*DefaultScreenProc: TekHalftone
*ScreenProc TekHalftone: "/DefaultHalftone /Halftone findresource"
*ScreenProc Dot: "{180 mul cos exch 180 mul cos add 2 div}"
*ScreenProc Line: "{ pop }"
*ScreenProc Ellipse: "
  { dup 5 mul 8 div mul exch dup mul exch add sqrt 1 exch sub}"
*End

*DefaultTransfer: Null
*Transfer Null: "{ }"
*Transfer Null.Inverse: "{ 1 exch sub }"


*% Tray Selection ============

*OpenUI *InputSlot/給紙方法: PickOne
*OrderDependency: 10 AnySetup *InputSlot
*DefaultInputSlot: Cassette
*InputSlot Cassette/カセット: ""
*CloseUI: *InputSlot

*% Paper Handling ===================

*% Use these entries to set paper size most of the time, unless there is
*% specific reason to use PageRegion.
*OpenUI *PageSize: PickOne
*OrderDependency: 20 AnySetup *PageSize
*DefaultPageSize: A4
*PageSize Letter/Letter: "2 dict dup /PageSize [612 792] put 
dup /ImagingBBox null put 
setpagedevice"
*End
*PageSize Legal/legal: "2 dict dup /PageSize [612 1008] put 
dup /ImagingBBox null put 
setpagedevice"
*End
*PageSize Comm10/封筒#10: "2 dict dup /PageSize [684 297] put 
dup /ImagingBBox null put 
setpagedevice"
*End
*PageSize A4/A4: "2 dict dup /PageSize [595 842] put 
dup /ImagingBBox null put 
setpagedevice"
*End
*PageSize DL/封筒DL: "2 dict dup /PageSize [624 312] put 
dup /ImagingBBox null put 
setpagedevice"
*End
*PageSize Hagaki/ハガキ: "2 dict dup /PageSize [283 419] put
dup /ImagingBBox null put
setpagedevice"
*End
*?PageSize: "
save currentpagedevice /PageSize get aload pop
  2 copy gt {exch} if (Unknown)
  5 dict
  dup [612 792] (Letter) put
  dup [612 1008] (Legal) put
  dup [297 684] (Comm10) put
  dup [595 842] (A4) put
  dup [312 624] (DL) put
  dup [283 419] (Hagaki) put
  { exch aload pop 4 index sub abs 5 le exch 5 index sub abs 5 le and 
  	{ exch pop exit } { pop } ifelse
  } bind forall = flush pop pop
restore"
*End
*CloseUI: *PageSize

*% These entries will set up the frame buffer. Usually used with manual feed.
*OpenUI *PageRegion: PickOne
*OrderDependency: 30 AnySetup *PageRegion
*DefaultPageRegion: A4
*PageRegion Letter/Letter: "2 dict dup /PageSize [612 792] put
dup /ImagingBBox null put 
setpagedevice"
*End
*PageRegion Legal/Legal: "2 dict dup /PageSize [612 1008] put 
dup /ImagingBBox null put 
setpagedevice"
*End
*PageRegion Comm10/封筒#10: "2 dict dup /PageSize [684 297] put 
dup /ImagingBBox null put 
setpagedevice"
*End
*PageRegion A4/A4: "2 dict dup /PageSize [595 842] put 
dup /ImagingBBox null put 
setpagedevice"
*End
*PageRegion DL/封筒DL: "2 dict dup /PageSize [624 312] put 
dup /ImagingBBox null put 
setpagedevice"
*End
*PageRegion Hagaki/ハガキ: "2 dict dup /PageSize [283 419] put
dup /ImagingBBox null put
setpagedevice"
*End
*CloseUI: *PageRegion

*% The following entries provide information about specific paper keywords.
*DefaultImageableArea: A4
*ImageableArea Letter/Letter: "14.4 28.9 596.8 777.7"
*ImageableArea Legal/Legal: "14.4 28.9 596.8 993.7"
*ImageableArea Comm10/封筒#10: "14.4 35.884 596.8 282.684"
*ImageableArea A4/A4: "14.4 28.684 580.8 827.484"
*ImageableArea DL/封筒DL: "14.4 35.884 596.8 297.484"
*ImageableArea Hagaki/ハガキ: "15 21 266 404"
*?ImageableArea: "
save
  /cvp { (                ) cvs print ( ) print } bind def
  /upperright {10000 mul floor 10000 div} bind def
  /lowerleft {10000 mul ceiling 10000 div} bind def
  newpath clippath pathbbox
  4 -2 roll exch 2 {lowerleft cvp} repeat
  exch 2 {upperright cvp} repeat flush
 restore
"
*End

*% These provide the physical dimensions of the paper (by keyword)
*DefaultPaperDimension: A4
*PaperDimension Letter/Letter: "612 792"
*PaperDimension Legal/Legal: "612 1008"
*PaperDimension Comm10/封筒#10: "684 297"
*PaperDimension A4/A4: "595 842"
*PaperDimension DL/封筒DL: "624 312"
*PaperDimension Hagaki/ハガキ: "283 419"

*CustomPageSize True: "
  pop pop pop
  2 dict begin
    /PageSize [ 4 -2 roll ] def
    /ImagingBBox null def
  currentdict end setpagedevice
"
*End
*ParamCustomPageSize Width:  1 points 432 612
*ParamCustomPageSize Height:  2 points 288 1584
*ParamCustomPageSize WidthOffset/Left Margin:  3 points 0 0
*ParamCustomPageSize HeightOffset/Top Margin:  4 points 0 0
*ParamCustomPageSize Orientation:  5 int 0 0
*MaxMediaWidth:  "612"
*MaxMediaHeight:  "1584"
*?CurrentMediaWidth: "
  currentpagedevice/PageSize get 0 get = flush
"
*End
*?CurrentMediaHeight: "
  currentpagedevice/PageSize get 1 get = flush
"
*End

*CenterRegistered: False
*HWMargins: 14.4 28.8 14.4 14.4

*DefaultOutputBin: OnlyOne
*DefaultOutputOrder: Reverse

*RequiresPageRegion All: True

*% Print Quality Selection  ===================

*OpenUI *OutputMode/プリント品質: PickOne
*OrderDependency: 40 AnySetup *OutputMode
*DefaultOutputMode: Standard/Plain (スタンダード)
*OutputMode Draft/Plain (ドラフト): "
  mark
  {
    2 dict begin
      /PostRenderingEnhance true def
      /PostRenderingEnhanceDetails 1 dict begin
        /OutputMode (Draft) def
      currentdict end def
    currentdict end setpagedevice
  } stopped cleartomark"
*End
*OutputMode Standard/Plain (スタンダード): "
  mark
  {
    2 dict begin
      /PostRenderingEnhance true def
      /PostRenderingEnhanceDetails 1 dict begin
        /OutputMode (Standard) def
      currentdict end def
    currentdict end setpagedevice
  } stopped cleartomark"
*End
*OutputMode Premium/Plain (プレミアム): "
  mark
  {
    2 dict begin
      /PostRenderingEnhance true def
      /PostRenderingEnhanceDetails 1 dict begin
        /OutputMode (Premium) def
      currentdict end def
    currentdict end setpagedevice
  } stopped cleartomark"
*End
*OutputMode CoatedPaper/Coated Paper: "
  mark
  {
    2 dict begin
      /PostRenderingEnhance true def
      /PostRenderingEnhanceDetails 1 dict begin
        /OutputMode (CoatedPaper) def
      currentdict end def
    currentdict end setpagedevice
  } stopped cleartomark"
*End
*OutputMode GlossyPaper/Glossy Paper: "
  mark
  {
    2 dict begin
      /PostRenderingEnhance true def
      /PostRenderingEnhanceDetails 1 dict begin
        /OutputMode (GlossyPaper) def
      currentdict end def
    currentdict end setpagedevice
  } stopped cleartomark"
*End
*OutputMode Transparency/OHPフィルム: "
  mark
  {
    2 dict begin
      /PostRenderingEnhance true def
      /PostRenderingEnhanceDetails 1 dict begin
        /OutputMode (Transparency) def
      currentdict end def
    currentdict end setpagedevice
  } stopped cleartomark"
*End
*OutputMode BackPrintFilm/Back Print Film: "
  mark
  {
    2 dict begin
      /PostRenderingEnhance true def
      /PostRenderingEnhanceDetails 1 dict begin
        /OutputMode (BackPrintFilm) def
      currentdict end def
    currentdict end setpagedevice
  } stopped cleartomark"
*End
*?OutputMode: "save
  {
    currentpagedevice /PostRenderingEnhanceDetails get
    /OutputMode get
    7 dict begin
      /Draft         (Plain \(draft\))    def
      /Standard      (Plain \(standard\)) def
      /Premium       (Plain \(premium\))  def
      /CoatedPaper   (Coated Paper)       def
      /GlossyPaper   (Glossy Paper)       def
      /Transparency  (Transparency)       def
      /BackPrintFilm (Back Print Film)    def
    currentdict end
    exch get
  } stopped
  { % error in PostScript code execution
    pop pop (Unknown)
  } if
  = flush restore"
*End
*CloseUI: *OutputMode

*% Printer Specific Features ============ 

*OpenUI *Finepoint/Finepoint ﾊｰﾌﾄｰﾆﾝｸﾞ: Boolean
*OrderDependency: 50 AnySetup *Finepoint
*DefaultFinepoint: False
*Finepoint True: " mark
  {
    1 dict begin
      /DeviceRenderingInfo 3 dict begin
        /Type 2 def
        /RenderingMethod 2 def
        /VirtualColorDevice currentpagedevice /DeviceRenderingInfo get
          /VirtualColorDevice get def
      currentdict end def
    currentdict end
    setpagedevice
  } stopped cleartomark"
*End
*Finepoint False: " mark
  {
    1 dict begin
      /DeviceRenderingInfo 3 dict begin
        /Type 2 def
        /RenderingMethod 1 def
        /VirtualColorDevice currentpagedevice /DeviceRenderingInfo get
          /VirtualColorDevice get def
      currentdict end def
    currentdict end
    setpagedevice
  } stopped cleartomark"
*End
*?Finepoint: "save
  currentpagedevice /DeviceRenderingInfo get
  /RenderingMethod get 2 eq {(True)}{(False)}ifelse = flush restore"
*End
*CloseUI: *Finepoint

*% TekColor Selections  ===================

*OpenUI *TekColor/カラー補正: PickOne
*OrderDependency: 60 AnySetup *TekColor
*DefaultTekColor: VividColor/青補正する
*TekColor NoAdjust/補正なし: "mark
  { 1 dict begin
      /DeviceRenderingInfo 3 dict begin
        /Type 2 def
        /RenderingMethod currentpagedevice /DeviceRenderingInfo get
          /RenderingMethod get def
        /VirtualColorDevice null def
      currentdict end def
    currentdict end
    setpagedevice
  } stopped cleartomark"
*End

*TekColor VividColor/青補正する: " mark
  { 1 dict begin
      /DeviceRenderingInfo 3 dict begin
        /Type 2 def
        /RenderingMethod currentpagedevice /DeviceRenderingInfo get
          /RenderingMethod get def
        /VirtualColorDevice 2 dict begin
          /Type 3 def
          /ColorTransform /TekBlue def
        currentdict end def
      currentdict end def
    currentdict end
    setpagedevice
  } stopped cleartomark"
*End

*TekColor SimulateDisplay/画面表示色に近づける: " mark
  { 1 dict begin
      /DeviceRenderingInfo 3 dict begin
        /Type 2 def
        /RenderingMethod currentpagedevice /DeviceRenderingInfo get
          /RenderingMethod get def
        /VirtualColorDevice 2 dict begin
          /Type 3 def
          /ColorTransform /TekDisplay def
        currentdict end def
      currentdict end def
    currentdict end
    setpagedevice
  } stopped cleartomark"
*End

*TekColor CommercialPress/Commercial プレス: " mark
  { 1 dict begin
      /DeviceRenderingInfo 3 dict begin
        /Type 2 def
        /RenderingMethod currentpagedevice /DeviceRenderingInfo get
          /RenderingMethod get def
        /VirtualColorDevice 2 dict begin
          /Type 3 def
          /ColorTransform /Commercial-Coated def
        currentdict end def
      currentdict end def
    currentdict end
    setpagedevice
  } stopped cleartomark"
*End

*TekColor Monochrome/モノクロ: " mark
  { 1 dict begin
      /DeviceRenderingInfo 3 dict begin
        /Type 2 def
        /RenderingMethod currentpagedevice /DeviceRenderingInfo get
          /RenderingMethod get def
        /VirtualColorDevice 2 dict begin
          /Type 1 def
          /ColorTransform /Gray def
        currentdict end def
      currentdict end def
    currentdict end
    setpagedevice
  } stopped cleartomark"
*End

*TekColor UsePrinterSetting/プリンタ側の設定を使用する: ""

*?TekColor: "
save
  { currentpagedevice /DeviceRenderingInfo get
    /VirtualColorDevice get
    dup null eq
    { pop (No Color Adjust) }
    { /ColorTransform get
      4 dict begin
        /TekBlue           (Vivid Color)     def
        /TekDisplay        (Simulate Screen) def
        /Commercial-Coated (Simulate Press)  def
        /Gray              (Monochrome)      def
      currentdict end
      exch get
    } ifelse
  } stopped
  { % error in PostScript code execution
    pop pop (Unknown)
  } if
  = flush
restore
"
*End

*CloseUI: *TekColor

*% Font Information =====================
*DefaultFont: Courier
*Font Courier: Standard "(002.003)" Standard ROM
*Font Courier-Bold: Standard "(002.003)" Standard ROM
*Font Courier-BoldOblique: Standard "(002.003)" Standard ROM
*Font Courier-Oblique: Standard "(002.003)" Standard ROM
*Font HeiseiKakuGo-W5-83pv-RKSJ-H: RKSJ "(003.000)" 83pv Disk
*Font HeiseiKakuGo-W5-Add-H: JIS "(003.000)" Add Disk
*Font HeiseiKakuGo-W5-Add-RKSJ-H: RKSJ "(003.000)" Add Disk
*Font HeiseiKakuGo-W5-Add-RKSJ-V: RKSJ "(003.000)" Add Disk
*Font HeiseiKakuGo-W5-Add-V: JIS "(003.000)" Add Disk
*Font HeiseiKakuGo-W5-EUC-H: EUC "(003.000)" JIS-83 Disk
*Font HeiseiKakuGo-W5-EUC-V: EUC "(003.000)" JIS-83 Disk
*Font HeiseiKakuGo-W5-Ext-H: JIS "(003.000)" Ext Disk
*Font HeiseiKakuGo-W5-Ext-RKSJ-H: RKSJ "(003.000)" Ext Disk
*Font HeiseiKakuGo-W5-Ext-RKSJ-V: RKSJ "(003.000)" Ext Disk
*Font HeiseiKakuGo-W5-Ext-V: JIS "(003.000)" Ext Disk
*Font HeiseiKakuGo-W5-H: JIS "(003.000)" JIS-83 Disk
*Font HeiseiKakuGo-W5-NWP-H: JIS "(003.000)" NWP Disk
*Font HeiseiKakuGo-W5-NWP-V: JIS "(003.000)" NWP Disk
*Font HeiseiKakuGo-W5-PropRoman: UnknownEncoding "(003.000)" UnknownCharset UnknownStatus
*Font HeiseiKakuGo-W5-RKSJ-H: RKSJ "(003.000)" JIS-83 Disk
*Font HeiseiKakuGo-W5-RKSJ-UserGaiji: Special "(FontInfo & version not present)" Special Disk
*Font HeiseiKakuGo-W5-RKSJ-V: RKSJ "(003.000)" JIS-83 Disk
*Font HeiseiKakuGo-W5-V: JIS "(003.000)" JIS-83 Disk
*Font HeiseiKakuGo-W5.Oubun: Special "(003.000)" Special Disk
*Font HeiseiKakuGo-W5.Roman: Special "(003.000)" Special Disk
*Font HeiseiKakuGo-W5.Roman83pv: Special "(003.000)" Special Disk
*Font HeiseiKakuGo-W5.WP-Symbol: Special "(003.000)" Special Disk
*Font HeiseiMin-W3-83pv-RKSJ-H: RKSJ "(003.002)" 83pv Disk
*Font HeiseiMin-W3-Add-H: JIS "(003.002)" Add Disk
*Font HeiseiMin-W3-Add-RKSJ-H: RKSJ "(003.002)" Add Disk
*Font HeiseiMin-W3-Add-RKSJ-V: RKSJ "(003.002)" Add Disk
*Font HeiseiMin-W3-Add-V: JIS "(003.002)" Add Disk
*Font HeiseiMin-W3-EUC-H: EUC "(003.002)" JIS-83 Disk
*Font HeiseiMin-W3-EUC-V: EUC "(003.002)" JIS-83 Disk
*Font HeiseiMin-W3-Ext-H: JIS "(003.002)" Ext Disk
*Font HeiseiMin-W3-Ext-RKSJ-H: RKSJ "(003.002)" Ext Disk
*Font HeiseiMin-W3-Ext-RKSJ-V: RKSJ "(003.002)" Ext Disk
*Font HeiseiMin-W3-Ext-V: JIS "(003.002)" Ext Disk
*Font HeiseiMin-W3-H: JIS "(003.002)" JIS-83 Disk
*Font HeiseiMin-W3-NWP-H: JIS "(003.002)" NWP Disk
*Font HeiseiMin-W3-NWP-V: JIS "(003.002)" NWP Disk
*Font HeiseiMin-W3-PropRoman: UnknownEncoding "(003.002)" UnknownCharset UnknownStatus
*Font HeiseiMin-W3-RKSJ-H: RKSJ "(003.002)" JIS-83 Disk
*Font HeiseiMin-W3-RKSJ-UserGaiji: Special "(FontInfo & version not present)" Special Disk
*Font HeiseiMin-W3-RKSJ-V: RKSJ "(003.002)" JIS-83 Disk
*Font HeiseiMin-W3-V: JIS "(003.002)" JIS-83 Disk
*Font HeiseiMin-W3.Oubun: Special "(003.002)" Special Disk
*Font HeiseiMin-W3.Roman: Special "(003.002)" Special Disk
*Font HeiseiMin-W3.Roman83pv: Special "(003.002)" Special Disk
*Font HeiseiMin-W3.WP-Symbol: Special "(003.002)" Special Disk
*Font Helvetica: Standard "(001.006)" Standard ROM
*Font Helvetica-Bold: Standard "(001.007)" Standard ROM
*Font Helvetica-BoldOblique: Standard "(001.007)" Standard ROM
*Font Helvetica-Narrow: Standard "(001.006)" Standard ROM
*Font Helvetica-Narrow-Bold: Standard "(001.007)" Standard ROM
*Font Helvetica-Narrow-BoldOblique: Standard "(001.007)" Standard ROM
*Font Helvetica-Narrow-Oblique: Standard "(001.006)" Standard ROM
*Font Helvetica-Oblique: Standard "(001.006)" Standard ROM
*Font Symbol: Special "(001.007)" Standard ROM
*Font Times-Bold: Standard "(001.007)" Standard ROM
*Font Times-BoldItalic: Standard "(001.009)" Standard ROM
*Font Times-Italic: Standard "(001.007)" Standard ROM
*Font Times-Roman: Standard "(001.007)" Standard ROM
*?FontQuery: "
save  
  { count 1 gt
    { exch dup 127 string cvs (/) print print (:) print
     /Font resourcestatus {pop pop (Yes)} {(No)} ifelse = 
    } { exit } ifelse
  } bind loop
  (*) = flush
restore"
*End

*?FontList: "
   save (*) {cvn ==} 128 string /Font resourceforall
   (*) = flush restore"
*End

*% Printer Messages (verbatim from printer):
*Message: "%%[ exitserver: permanent state may be changed ]%%"
*Message: "%%[ Flushing: rest of job (to end-of-file) will be ignored ]%%"
*Message: "\FontName\ not found, using Courier"

*% Status (format: %%[ status: <one of these> ]%% )
*Status: "initializing"
*Status: "idle"
*Status: "busy"
*Status: "waiting"
*Status: "holding"
*Status: "PrinterError: internal interface error"
*Status: "PrinterError: resetting printer"
*Status: "PrinterError: service call:"
*Status: "PrinterError: waste ink tank full"
*Status: "PrinterError: paper jam"
*Status: "PrinterError: add ink:"
*Status: "PrinterError: out of paper"
*Status: "PrinterError: cleaning heads"
*Status: "PrinterError: printer is not ready"

*% Input Sources (format: %%[ status: <stat>; source: <one of these> ]%% )
*Source: "Parallel"
*Source: "LocalTalk"
*Source: "Internal"
*Source: "EtherTalk"
*Source: "PrintServer"
*Source: "LPR"
*Source: "AppSocket"

*% Printer Error (format: %%[ PrinterError: <one of these> ]%%)
*PrinterError: "internal interface error"
*PrinterError: "resetting printer"
*PrinterError: "service call:"
*PrinterError: "waste ink tank full"
*PrinterError: "paper jam"
*PrinterError: "add ink:"
*PrinterError: "out of paper"
*PrinterError: "cleaning heads"
*PrinterError: "printer is not ready"

*DefaultColorSep: ProcessBlack.60lpi.360dpi/60 lpi / 360 dpi

*InkName: ProcessBlack/Process Black
*InkName: CustomColor/Custom Color
*InkName: ProcessCyan/Process Cyan
*InkName: ProcessMagenta/Process Magenta
*InkName: ProcessYellow/Process Yellow

*%  For 60 lpi / 360 dpi ================================

*ColorSepScreenAngle ProcessBlack.60lpi.360dpi/60 lpi / 360 dpi: "0.0"
*ColorSepScreenAngle CustomColor.60lpi.360dpi/60 lpi / 360 dpi: "0.0"
*ColorSepScreenAngle ProcessCyan.60lpi.360dpi/60 lpi / 360 dpi: "0.0"
*ColorSepScreenAngle ProcessMagenta.60lpi.360dpi/60 lpi / 360 dpi: "0.0"
*ColorSepScreenAngle ProcessYellow.60lpi.360dpi/60 lpi / 360 dpi: "0.0"

*ColorSepScreenFreq ProcessBlack.60lpi.360dpi/60 lpi / 360 dpi: "60.0"
*ColorSepScreenFreq CustomColor.60lpi.360dpi/60 lpi / 360 dpi: "60.0"
*ColorSepScreenFreq ProcessCyan.60lpi.360dpi/60 lpi / 360 dpi: "60.0"
*ColorSepScreenFreq ProcessMagenta.60lpi.360dpi/60 lpi / 360 dpi: "60.0"
*ColorSepScreenFreq ProcessYellow.60lpi.360dpi/60 lpi / 360 dpi: "60.0"

*% end of PPD file for Tektronix Phaser 140
