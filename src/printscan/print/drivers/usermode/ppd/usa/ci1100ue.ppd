*PPD-Adobe: "4.3"
*%=============================================================================
*%
*%  PPD file for Kyocera Mita Ci1100 (USA English)
*%
*%  Copyright (C) 1993-1999 Kyocera Technology Development Inc.
*%  All Rights Reserved
*%
*%  Permission is granted for redistribution of this file as long as this
*%  copyright notice is intact and the contents of the file are not altered
*%  in any way from their original form.
*%
*%  Contents of this file are automatically generated with the PPDGEN utility 
*%
*%=============================================================================

*FileVersion: "1.6.1"
*FormatVersion: "4.3"
*LanguageEncoding: ISOLatin1
*LanguageVersion: English
*Product: "(Ci1100)"
*PSVersion: "(2014.108) 1"
*Manufacturer: "Kyocera Mita"
*ModelName: "Kyocera Mita Ci-1100 (KPDL-2)"
*ShortNickName: "Ci1100 (KPDL-2)"
*NickName: "Ci1100 (KPDL-2)"
*PCFileName: "CI1100UE.PPD"

*% Basic Device Capabilities
*LanguageLevel: "2"
*ColorDevice: True
*DefaultColorSpace: CMYK
*AccurateScreensSupport: True
*TTRasterizer: Type42
*?TTRasterizer: "
  save
  42 /FontType resourcestatus
  { pop pop (Type42) }{ (None) } ifelse
  = flush
  restore
"
*End
*FreeVM: "32767000"
*Throughput: "4"

*% Extensions
*FileSystem: True
*?FileSystem: "
  save
  false
  (%disk%)
  { currentdevparams dup /Writeable known
    { /Writeable get { pop true } if }{ pop } ifelse
  } 100 string /IODevice resourceforall
  { (True) }{ (False) } ifelse
  = flush
  restore
"
*End

*% System Management
*SuggestedJobTimeout: "0"
*SuggestedManualFeedTimeout: "0"
*SuggestedWaitTimeout: "120"
*PrintPSErrors: True

*Password: "0"

*ExitServer: "
  count 0 eq { true }
  { dup statusdict /checkpassword get exec not } ifelse
  { (WARNING : Cannot perform the exitserver command.) =
    (Password supplied is not valid.) =
    (Please contact the author of this software.) = flush quit } if
  serverdict /exitserver get exec
"
*End

*Reset: "
  count 0 eq { true }
  { dup statusdict /checkpassword get exec not } ifelse
  { (WARNING : Cannot perform the exitserver command.) =
    (Password supplied is not valid.) =
    (Please contact the author of this software.) = flush quit } if
  serverdict /exitserver get exec
  systemdict /quit get exec
  (WARNING : Printer Reset Failed.) = flush
"
*End

*% Protocols
*Protocols: PJL TBCP

*1284Modes Parallel: Compat Nibble ECP
*1284DeviceID: "MFG:Kyocera Mita;Model:Kyocera Mita Ci1100;COMMAND SET: POSTSCRIPT,PJL,PCL"

*% Page Stack Order
*PageStackOrder FDSide: Reverse
*PageStackOrder FUSide: Normal

*% JCL Information 
*JCLBegin: "<1B>%-12345X@PJL JOB<0A>"
*JCLToPSInterpreter: "@PJL ENTER LANGUAGE=POSTSCRIPT<0A>"
*JCLEnd: "<1B>%-12345X@PJL EOJ<0A><1B>%-12345X"

*JCLOpenUI *JCLEconomode/EcoPrint: PickOne
*DefaultJCLEconomode: Off
*OrderDependency: 5 JCLSetup *JCLEconomode
*JCLEconomode Off/Off: "@PJL SET ECONOMODE=OFF<0A>"
*JCLEconomode On/On: "@PJL SET ECONOMODE=ON<0A>"
*JCLCloseUI: *JCLEconomode

*% Installable Options
*OpenGroup: InstallableOptions/Installed Options

*% Paper Feeder
*OpenUI *Opt15/Paper Feeder: Boolean
*DefaultOpt15: False
*Opt15 False/Not Installed: ""
*Opt15 True/Installed: ""
*?Opt15: "
  save
  (False) currentpagedevice dup /InputAttributes known {
    /InputAttributes get
    dup 1 known { dup 1 get null ne { exch pop (True) exch } if } if
  } if pop
  = flush
  restore
"
*End
*CloseUI: *Opt15

*% Duplex Unit
*OpenUI *Opt16/Duplex Unit: Boolean
*DefaultOpt16: False
*Opt16 False/Not Installed: ""
*Opt16 True/Installed: ""
*?Opt16: "
  save
  currentpagedevice /Duplex known { (True) }{ (False) } ifelse
  = flush
  restore
"
*End
*CloseUI: *Opt16

*% Disk Drive
*OpenUI *Opt18/Optional Disk: PickOne
*DefaultOpt18: False
*Opt18 None/None: ""
*Opt18 HardDisk/Hard Disk: ""
*Opt18 RAMDisk/RAM Disk: ""
*?Opt18: "
  save
  false
  (%disk?%)
  { currentdevparams dup /Writeable known
    { dup /Writeable get
      { exch pop /LogicalSize get dup 0 gt exch 102400 lt eq true }{ pop pop false } ifelse
    }{ pop pop } ifelse
  } 100 string /IODevice resourceforall
  { { (RAMDisk) }{ (HardDisk) } ifelse }{ (None) } ifelse
  = flush
  restore
"
*End
*CloseUI: *Opt18

*% Installed Memory
*OpenUI *InstalledMemory/Memory: PickOne
*DefaultInstalledMemory: 48MB
*InstalledMemory 48MB/Standard: ""
*InstalledMemory 52MB/4MB Upgrade: ""
*InstalledMemory 56MB/8MB Upgrade: ""
*InstalledMemory 60MB/12MB Upgrade: ""
*InstalledMemory 64MB/16MB Upgrade: ""
*InstalledMemory 68MB/20MB Upgrade: ""
*InstalledMemory 72MB/24MB Upgrade: ""
*InstalledMemory 80MB/32MB Upgrade: ""
*InstalledMemory 84MB/36MB Upgrade: ""
*InstalledMemory 88MB/40MB Upgrade: ""
*InstalledMemory 96MB/48MB Upgrade: ""
*InstalledMemory 112MB/64MB Upgrade: ""
*?InstalledMemory: "
  save
  currentsystemparams dup
  /RamSize known {
    /RamSize get
    524288 div ceiling cvi 2 div cvi
    /vmsize 20 string def
    vmsize cvs print
    (MB) print (\n) print flush
  }{
    pop (Unknown) print flush
  } ifelse
  restore
"
*End
*CloseUI: *InstalledMemory

*CloseGroup: InstallableOptions

*% Virtual Memory 
*VMOption 48MB: "39168000"
*VMOption 52MB: "42528000"
*VMOption 56MB: "45888000"
*VMOption 60MB: "49350000"
*VMOption 64MB: "52642000"
*VMOption 68MB: "55968000"
*VMOption 72MB: "59328000"
*VMOption 80MB: "59328000"
*VMOption 84MB: "59328000"
*VMOption 88MB: "59328000"
*VMOption 96MB: "59328000"
*VMOption 112MB: "59328000"


*% Constraints
*UIConstraints: *Opt15 False *InputSlot PF81A
*UIConstraints: *Opt15 False *InputSlot PF81B
*UIConstraints: *Opt16 False *Duplex DuplexTumble
*UIConstraints: *Duplex DuplexTumble *Opt16 False
*UIConstraints: *Opt16 False *Duplex DuplexNoTumble
*UIConstraints: *Duplex DuplexNoTumble *Opt16 False
*UIConstraints: *Opt16 True *InputSlot Internal
*UIConstraints: *InputSlot Internal *Opt16 True
*UIConstraints: *MediaType Transparency *Duplex
*UIConstraints: *Duplex *MediaType Transparency
*UIConstraints: *MediaType Labels *Duplex
*UIConstraints: *Duplex *MediaType Labels
*UIConstraints: *Opt18 None *KCCollate Temp0
*UIConstraints: *Opt18 None *KCCollate Temp
*UIConstraints: *Opt18 None *KCCollate Perm
*UIConstraints: *Opt18 RAMDisk *KCCollate Perm
*UIConstraints: *Opt18 HardDisk *KCCollate Temp0
*UIConstraints: *Opt18 RAMDisk *KCCollate Temp
*UIConstraints: *Opt18 RAMDisk *KCBarcodeMode First
*UIConstraints: *Opt18 RAMDisk *KCBarcodeMode All
*UIConstraints: *Opt18 None *KCCollate VMBAdmin
*UIConstraints: *Opt18 None *KCCollate VMBUser01
*UIConstraints: *Opt18 None *KCCollate VMBUser02
*UIConstraints: *Opt18 None *KCCollate VMBUser03
*UIConstraints: *Opt18 None *KCCollate VMBUser04
*UIConstraints: *Opt18 None *KCCollate VMBUser05
*UIConstraints: *Opt18 None *KCCollate VMBUser06
*UIConstraints: *Opt18 None *KCCollate VMBUser07
*UIConstraints: *Opt18 None *KCCollate VMBUser08
*UIConstraints: *Opt18 None *KCCollate VMBUser09
*UIConstraints: *Opt18 None *KCCollate VMBUser10
*UIConstraints: *Opt18 RAMDisk *KCCollate VMBAdmin
*UIConstraints: *Opt18 RAMDisk *KCCollate VMBUser01
*UIConstraints: *Opt18 RAMDisk *KCCollate VMBUser02
*UIConstraints: *Opt18 RAMDisk *KCCollate VMBUser03
*UIConstraints: *Opt18 RAMDisk *KCCollate VMBUser04
*UIConstraints: *Opt18 RAMDisk *KCCollate VMBUser05
*UIConstraints: *Opt18 RAMDisk *KCCollate VMBUser06
*UIConstraints: *Opt18 RAMDisk *KCCollate VMBUser07
*UIConstraints: *Opt18 RAMDisk *KCCollate VMBUser08
*UIConstraints: *Opt18 RAMDisk *KCCollate VMBUser09
*UIConstraints: *Opt18 RAMDisk *KCCollate VMBUser10
*UIConstraints: *KCBarcodeMode *KCCollate VMBAdmin
*UIConstraints: *KCCollate VMBAdmin *KCBarcodeMode First
*UIConstraints: *KCCollate VMBAdmin *KCBarcodeMode All
*UIConstraints: *KCBarcodeMode *KCCollate VMBUser01
*UIConstraints: *KCCollate VMBUser01 *KCBarcodeMode First
*UIConstraints: *KCCollate VMBUser01 *KCBarcodeMode All
*UIConstraints: *KCBarcodeMode *KCCollate VMBUser02
*UIConstraints: *KCCollate VMBUser02 *KCBarcodeMode First
*UIConstraints: *KCCollate VMBUser02 *KCBarcodeMode All
*UIConstraints: *KCBarcodeMode *KCCollate VMBUser03
*UIConstraints: *KCCollate VMBUser03 *KCBarcodeMode First
*UIConstraints: *KCCollate VMBUser03 *KCBarcodeMode All
*UIConstraints: *KCBarcodeMode *KCCollate VMBUser04
*UIConstraints: *KCCollate VMBUser04 *KCBarcodeMode First
*UIConstraints: *KCCollate VMBUser04 *KCBarcodeMode All
*UIConstraints: *KCBarcodeMode *KCCollate VMBUser05
*UIConstraints: *KCCollate VMBUser05 *KCBarcodeMode First
*UIConstraints: *KCCollate VMBUser05 *KCBarcodeMode All
*UIConstraints: *KCBarcodeMode *KCCollate VMBUser06
*UIConstraints: *KCCollate VMBUser06 *KCBarcodeMode First
*UIConstraints: *KCCollate VMBUser06 *KCBarcodeMode All
*UIConstraints: *KCBarcodeMode *KCCollate VMBUser07
*UIConstraints: *KCCollate VMBUser07 *KCBarcodeMode First
*UIConstraints: *KCCollate VMBUser07 *KCBarcodeMode All
*UIConstraints: *KCBarcodeMode *KCCollate VMBUser08
*UIConstraints: *KCCollate VMBUser08 *KCBarcodeMode First
*UIConstraints: *KCCollate VMBUser08 *KCBarcodeMode All
*UIConstraints: *KCBarcodeMode *KCCollate VMBUser09
*UIConstraints: *KCCollate VMBUser09 *KCBarcodeMode First
*UIConstraints: *KCCollate VMBUser09 *KCBarcodeMode All
*UIConstraints: *KCBarcodeMode *KCCollate VMBUser10
*UIConstraints: *KCCollate VMBUser10 *KCBarcodeMode First
*UIConstraints: *KCCollate VMBUser10 *KCBarcodeMode All
*UIConstraints: *KCBarcodeMode *KCCollate None
*UIConstraints: *KCCollate None *KCBarcodeMode First
*UIConstraints: *KCCollate None *KCBarcodeMode All
*UIConstraints: *PageSize Executive *InputSlot Internal
*UIConstraints: *InputSlot Internal *PageSize Executive
*UIConstraints: *PageSize B5 *InputSlot Internal
*UIConstraints: *InputSlot Internal *PageSize B5
*UIConstraints: *PageSize Executive *InputSlot PF81A
*UIConstraints: *InputSlot PF81A *PageSize Executive
*UIConstraints: *PageSize B5 *InputSlot PF81A
*UIConstraints: *InputSlot PF81A *PageSize B5
*UIConstraints: *PageSize Executive *InputSlot PF81B
*UIConstraints: *InputSlot PF81B *PageSize Executive
*UIConstraints: *PageSize B5 *InputSlot PF81B
*UIConstraints: *InputSlot PF81B *PageSize B5
*UIConstraints: *PageSize Executive *Duplex
*UIConstraints: *Duplex *PageSize Executive
*UIConstraints: *KCPantone PantCorrected *Resolution 1200dpi
*UIConstraints: *Resolution 1200dpi *KCPantone PantCorrected
*UIConstraints: *KCINKSimulation Toyo *Resolution 600dpi
*UIConstraints: *Resolution 600dpi *KCINKSimulation Toyo
*UIConstraints: *KCINKSimulation *KCPantone PantCorrected
*UIConstraints: *KCPantone PantCorrected *KCINKSimulation Euro
*UIConstraints: *KCPantone PantCorrected *KCINKSimulation Swop
*UIConstraints: *KCPantone PantCorrected *KCINKSimulation Toyo
*UIConstraints: *KCPantone PantCorrected *KCINKSimulation Dic
*UIConstraints: *KCRGBSimulation None *KCPantone PantCorrected
*UIConstraints: *KCRGBSimulation SMPTE240M *KCPantone PantCorrected
*UIConstraints: *KCRGBSimulation Trinitron *KCPantone PantCorrected
*UIConstraints: *KCRGBSimulation AppleRGB *KCPantone PantCorrected
*UIConstraints: *KCRGBSimulation NTSC *KCPantone PantCorrected
*UIConstraints: *KCPantone PantCorrected *KCRGBSimulation None
*UIConstraints: *KCPantone PantCorrected *KCRGBSimulation SMPTE240M
*UIConstraints: *KCPantone PantCorrected *KCRGBSimulation Trinitron
*UIConstraints: *KCPantone PantCorrected *KCRGBSimulation AppleRGB
*UIConstraints: *KCPantone PantCorrected *KCRGBSimulation NTSC
*UIConstraints: *KCPantone *KCVividColor True
*UIConstraints: *KCVividColor True *KCPantone PantCorrected
*UIConstraints: *KCVividColor True *KCPantone AppCorrected

*% Resolution 
*OpenUI *Resolution/Resolution: PickOne
*OrderDependency: 10 AnySetup *Resolution
*DefaultResolution: 600dpi
*Resolution 600dpi/600 Dots per Inch (dpi): "<< /HWResolution [600 600] >> setpagedevice"
*Resolution 1200dpi/1200 Dots per Inch (dpi): "<< /HWResolution [1200 1200] >> setpagedevice"
*?Resolution: "
  save
  currentpagedevice /HWResolution get
  0 get (      ) cvs print (dpi) = flush
  restore
"
*End
*CloseUI: *Resolution

*% Color Model
*OpenUI *ColorModel/Color Mode: PickOne
*OrderDependency: 10 AnySetup *ColorModel
*DefaultColorModel: Color
*ColorModel Color/Process Color (CMYK): "<< /ProcessColorModel /DeviceCMYK >> setpagedevice"
*ColorModel Quick/Quick Color (CMY): "<< /ProcessColorModel /DeviceCMY >> setpagedevice"
*ColorModel Gray/Monochrome: "<< /ProcessColorModel /DeviceGray >> setpagedevice"
*?ColorModel: "
  save
  currentpagedevice /ProcessColorModel get
  1 {
    dup /DeviceGray eq { pop (Gray) exit } if
    dup /DeviceCMYK eq { pop (Color) exit } if
    dup /DeviceCMY eq { pop (Quick) exit } if
    pop (Unknown)
  } repeat
  = flush
  restore
"
*End
*CloseUI: *ColorModel

*% Embedded Pantone
*OpenUI *KCPantone/Color Correction: PickOne
*OrderDependency: 10 AnySetup *KCPantone
*DefaultKCPantone: None
*KCPantone PantCorrected/Pantone<AE>: ""
*KCPantone AppCorrected/Application Corrected: ""
*KCPantone None/Printer Corrected: ""
*CloseUI: *KCPantone

*% Ink Simulation
*OpenUI *KCINKSimulation/Ink Simulation (CMYK): PickOne
*OrderDependency: 10 AnySetup *KCINKSimulation
*DefaultKCINKSimulation: None
*KCINKSimulation None/None: "
  null << /DeviceRenderingCMYKInfo << /VirtualColorDevice 5 -1 roll >> >> setpagedevice"
*End
*KCINKSimulation Euro/Euroscale Press: "
  /EURO << /DeviceRenderingCMYKInfo << /VirtualColorDevice << /ColorTransform 7 -1 roll >> >> >> setpagedevice"
*End
*KCINKSimulation Swop/SWOP Press: "
  /SWOP << /DeviceRenderingCMYKInfo << /VirtualColorDevice << /ColorTransform 7 -1 roll >> >> >> setpagedevice"
*End
*KCINKSimulation Toyo/TOYO: "
  /TOYO << /DeviceRenderingCMYKInfo << /VirtualColorDevice << /ColorTransform 7 -1 roll >> >> >> setpagedevice"
*End
*KCINKSimulation Dic/DIC: "
  /DIC << /DeviceRenderingCMYKInfo << /VirtualColorDevice << /ColorTransform 7 -1 roll >> >> >> setpagedevice"
*End
*?KCINKSimulation: "
  save
  currentpagedevice dup /DeviceRenderingCMYKInfo known {
    /DeviceRenderingCMYKInfo get /VirtualColorDevice get /ColorTransform get
    dup type /dicttype eq {
      1 {
        dup /EURO eq { pop (Euro) exit } if
        dup /SWOP eq { pop (Swop) exit } if
        dup /TOYO eq { pop (Toyo) exit } if
        dup /DIC eq { pop (Dic) exit } if
        pop (None)
      } repeat
    } pop (None) } ifelse
  }{ pop (Unknown) } ifelse
  = flush
  restore
"
*End
*CloseUI: *KCINKSimulation

*% RGB Simulation
*OpenUI *KCRGBSimulation/Monitor Simulation (RGB): PickOne
*OrderDependency: 10 AnySetup *KCRGBSimulation
*DefaultKCRGBSimulation: sRGB
*KCRGBSimulation SMPTE240M/SMPTE240M: "
  << /DeviceRenderingRGBInfo << /VirtualColorDevice << /ColorTransform /SMPTE240M >> >> >> setpagedevice"
*End
*KCRGBSimulation sRGB/sRGB (HDTV): "
  << /DeviceRenderingRGBInfo << /VirtualColorDevice << /ColorTransform /sRGB >> >> >> setpagedevice"
*End
*KCRGBSimulation Trinitron/Trinitron: "
  << /DeviceRenderingRGBInfo << /VirtualColorDevice << /ColorTransform /Trinitron >> >> >> setpagedevice"
*End
*KCRGBSimulation AppleRGB/Apple RGB: "
  << /DeviceRenderingRGBInfo << /VirtualColorDevice << /ColorTransform /AppleRGB >> >> >> setpagedevice"
*End
*KCRGBSimulation NTSC/NTSC: "
  << /DeviceRenderingRGBInfo << /VirtualColorDevice << /ColorTransform /NTSC >> >> >> setpagedevice"
*End
*KCRGBSimulation None/None: "
  << /DeviceRenderingRGBInfo << /VirtualColorDevice null  >> >> setpagedevice"
*End
*?KCRGBSimulation: "
  save
  currentpagedevice dup /DeviceRenderingRGBInfo known {
    /DeviceRenderingRGBInfo get /VirtualColorDevice get /ColorTransform get
    1 {
      dup /SMPTE240M eq { pop (SMPTE240M) exit } if
      dup /sRGB eq { pop (sRGB) exit } if
      dup /Trinitron eq { pop (Trinitron) exit } if
      dup /AppleRGB eq { pop (AppleRGB) exit } if
      dup /NTSC eq { pop (NTSC) exit } if
      pop (None)
    } repeat
  }{ (Unknown) } ifelse
  exch pop
  = flush
  restore
"
*End
*CloseUI: *KCRGBSimulation

*% VividColor
*OpenUI *KCVividColor/Vivid Color: Boolean
*OrderDependency: 10 AnySetup *KCVividColor
*DefaultKCVividColor: False
*KCVividColor False/Off: "<< /DeviceRenderingVividInfo << /VividColor false >> >> setpagedevice"
*KCVividColor True/On: "<< /DeviceRenderingVividInfo << /VividColor true >> >> setpagedevice"
*?KCVividColor: "
  save
  currentpagedevice dup /DeviceRenderingVividInfo known {
    /DeviceRenderingVividInfo get /VividColor get
    { (True) }{ (False) } ifelse
  }{ (Unknown) } ifelse
  exch pop
  = flush
  restore
"
*End
*CloseUI: KCVividColor
*% Halftone Information 
*DefaultHalftoneType: 1
*ScreenFreq: "85.71"
*ScreenAngle: "45.0"
*ResScreenFreq 1200dpi: "85.71"
*ResScreenAngle 1200dpi: "45.0"
*ResScreenFreq 600dpi: "60.0"
*ResScreenAngle 600dpi: "45.0"

*DefaultScreenProc: Ellipse
*ScreenProc Dot: "
  { abs exch abs 2 copy add 1 gt
  { 1 sub dup mul exch 1 sub dup mul add 1 sub }
  { dup mul exch dup mul add 1 exch sub } ifelse }
"
*End
*ScreenProc Line: "
  { pop }
"
*End
*ScreenProc Ellipse: "
  { dup 5 mul 8 div mul exch dup mul exch add sqrt 1 exch sub }
"
*End

*DefaultTransfer: Null
*Transfer Null: "{}"
*Transfer Null.Inverse: "{ 1 exch sub }"

*% Paper Handling 
*% Page Size Definitions
*OpenUI *PageSize: PickOne
*OrderDependency: 40 AnySetup *PageSize
*DefaultPageSize: Letter
*PageSize Letter/Letter: "
  << /Policies << /PageSize 2 >> /PageSize [612 792] /ImagingBBox null >> setpagedevice
"
*End
*PageSize Legal/Legal: "
  << /Policies << /PageSize 2 >> /PageSize [612 1008] /ImagingBBox null >> setpagedevice
"
*End
*PageSize Executive/Executive: "
  << /Policies << /PageSize 2 >> /PageSize [522 756] /ImagingBBox null >> setpagedevice
"
*End
*PageSize A4/A4: "
  << /Policies << /PageSize 2 >> /PageSize [595 842] /ImagingBBox null >> setpagedevice
"
*End
*PageSize B5/B5 (JIS): "
  << /Policies << /PageSize 2 >> /PageSize [516 729] /ImagingBBox null >> setpagedevice
"
*End
*?PageSize: "
  save
  currentpagedevice /PageSize get aload pop
  2 copy gt {exch} if
  (Unknown)
  5 dict
  dup [612 792] (Letter) put
  dup [612 1008] (Legal) put
  dup [522 756] (Executive) put
  dup [595 842] (A4) put
  dup [516 729] (B5) put
  { exch aload pop 4 index sub abs 5 le exch
    5 index sub abs 5 le and
    { exch pop exit }{ pop } ifelse
  } bind forall
  = flush
  pop pop
  restore
"
*End
*CloseUI: *PageSize

*% Page Region Definitions for Frame Buffer
*OpenUI *PageRegion: PickOne
*OrderDependency: 40 AnySetup *PageRegion
*DefaultPageRegion: Letter
*PageRegion Letter/Letter: "
  << /Policies << /PageSize 7 >> /PageSize [612 792] /ImagingBBox null >> setpagedevice
"
*End
*PageRegion Legal/Legal: "
  << /Policies << /PageSize 7 >> /PageSize [612 1008] /ImagingBBox null >> setpagedevice
"
*End
*PageRegion Executive/Executive: "
  << /Policies << /PageSize 7 >> /PageSize [522 756] /ImagingBBox null >> setpagedevice
"
*End
*PageRegion A4/A4: "
  << /Policies << /PageSize 7 >> /PageSize [595 842] /ImagingBBox null >> setpagedevice
"
*End
*PageRegion B5/B5 (JIS): "
  << /Policies << /PageSize 7 >> /PageSize [516 729] /ImagingBBox null >> setpagedevice
"
*End
*CloseUI: *PageRegion

*% Imageable Area Definitions
*DefaultImageableArea: Letter
*ImageableArea Letter/Letter: "12 16 600 776"
*ImageableArea Legal/Legal: "12 17 600 991"
*ImageableArea Executive/Executive: "12 12 510 744"
*ImageableArea A4/A4: "14 15 581 827"
*ImageableArea B5/B5 (JIS): "21 12 495 717"
*?ImageableArea: "
  save
  /cvp { cvi (                   ) cvs
  print ( ) print } bind def
  newpath clippath pathbbox
  4 -2 roll exch 2 {ceiling cvp} repeat
  exch 2 {floor cvp} repeat ( )
  = flush
  restore
"
*End

*% Physical Dimensions of Media
*DefaultPaperDimension: Letter
*PaperDimension Letter/Letter: "612 792"
*PaperDimension Legal/Legal: "612 1008"
*PaperDimension Executive/Executive: "522 756"
*PaperDimension A4/A4: "595 842"
*PaperDimension B5/B5 (JIS): "516 729"

*% Input Slot Definitions
*OpenUI *InputSlot: PickOne
*OrderDependency: 30 AnySetup *InputSlot
*DefaultInputSlot: Internal
*InputSlot Internal/Cassette 1 (Internal): "
  << /ManualFeed false >> setpagedevice
  statusdict begin 0 setpapertray end
"
*End
*InputSlot PF81A/Cassette 2: "
  << /ManualFeed false >> setpagedevice
  statusdict begin 1 setpapertray end
"
*End
*InputSlot PF81B/Cassette 3: "
  << /ManualFeed false >> setpagedevice
  statusdict begin 4 setpapertray end
"
*End
*InputSlot MF1/Multi-Purpose Feeder: "
  << /ManualFeed false >> setpagedevice
  statusdict begin 3 setpapertray end
"
*End
*InputSlot MF/Manual Feed: "<< /ManualFeed true >> setpagedevice"
*?InputSlot: "
"
*End
*CloseUI: *InputSlot

*% MediaType Definitions
*OpenUI *MediaType: PickOne
*OrderDependency: 100 AnySetup *MediaType
*DefaultMediaType: Plain
*MediaType Plain/Plain Paper: "<</ManualFeed false /MediaType (Plain) /DeferredMediaSelection true >> setpagedevice"
*MediaType Transparency/Transparency: "<</ManualFeed false /MediaType (Transparency) /DeferredMediaSelection true >> setpagedevice"
*MediaType Labels/Labels: "<</ManualFeed false /MediaType (Labels) /DeferredMediaSelection true >> setpagedevice"
*MediaType Duplex/Duplex Paper: "<</ManualFeed false /MediaType (Duplex Paper) /DeferredMediaSelection true >> setpagedevice"
*MediaType Cardstock/Cardstock: "<</ManualFeed false /MediaType (Card Stock) /DeferredMediaSelection true >> setpagedevice"
*MediaType CoatedPaper/Coated Paper: "<</ManualFeed false /MediaType (Coated Paper) /DeferredMediaSelection true >> setpagedevice"
*?MediaType: "
  save
    currentpagedevice /MediaType {get} stopped
    {pop pop (Unknown)} {dup null eq {pop (Unknown)} if} ifelse = flush
  restore"
*End
*CloseUI: *MediaType

*RequiresPageRegion All: True
*% Output Bin Definitions
*OpenUI *OutputBin/Output Bin: PickOne
*OrderDependency: 51 AnySetup *OutputBin
*DefaultOutputBin: FDSide
*OutputBin FDSide/Side Tray (Face-Down): "0 statusdict /setoutputtray get exec"
*OutputBin FUSide/Side Tray (Face-Up): "1 statusdict /setoutputtray get exec"
*?OutputBin: "
"
*End
*CloseUI: *OutputBin

*% Duplex Definitions
*OpenUI *Duplex/Duplexing: PickOne
*OrderDependency: 50 AnySetup *Duplex
*DefaultDuplex: None
*Duplex None/None: "statusdict begin false setduplexmode false settumble end"
*Duplex DuplexTumble/Short Edge: "statusdict begin true setduplexmode true settumble end"
*Duplex DuplexNoTumble/Long Edge: "statusdict begin true setduplexmode false settumble end"
*?Duplex: "
  save
  statusdict begin
  duplexmode
  { tumble { (DuplexTumble) }{ (DuplexNoTumble) } ifelse }
  { (None) } ifelse
  = flush
  end
  restore
"
*End
*CloseUI: *Duplex

*% Job Spooling Definitions
*OpenUI *KCCollate/Job Spooling: PickOne
*OrderDependency: 20 AnySetup *KCCollate
*DefaultKCCollate: None
*KCCollate None/None: "<< /Collate false >> setpagedevice"
*KCCollate Temp0/Temporary (RAM Disk): "
  userdict /UICollateDetails known not
  { userdict /UICollateDetails 10 dict put } if
  userdict /UICollateDetails get  /Mode 0  put
  << /Collate true /CollateDetails UICollateDetails >> setpagedevice
"
*End
*KCCollate Temp/Temporary (Hard Disk): "
  userdict /UICollateDetails known not
  { userdict /UICollateDetails 10 dict put } if
  userdict /UICollateDetails get  /Mode 1  put
  << /Collate true /CollateDetails UICollateDetails >> setpagedevice
"
*End
*KCCollate Perm/Permanent (Hard Disk): "
  userdict /UICollateDetails known not
  { userdict /UICollateDetails 10 dict put } if
  userdict /UICollateDetails get  /Mode 2  put
  << /Collate true /CollateDetails UICollateDetails >> setpagedevice
"
*End
*KCCollate VMBAdmin/Virtual Mailbox (Administrator): "
  userdict /UICollateDetails known not
  { userdict /UICollateDetails 10 dict put } if
  userdict /UICollateDetails get dup /Mode 8 put /Destination [(Adminstrator)]  put
  << /Collate true /CollateDetails UICollateDetails >> setpagedevice
"
*End
*KCCollate VMBUser01/Virtual Mailbox (User 1): "
  userdict /UICollateDetails known not
  { userdict /UICollateDetails 10 dict put } if
  userdict /UICollateDetails get dup /Mode 8 put /Destination [(User 1)]  put
  << /Collate true /CollateDetails UICollateDetails >> setpagedevice
"
*End
*KCCollate VMBUser02/Virtual Mailbox (User 2): "
  userdict /UICollateDetails known not
  { userdict /UICollateDetails 10 dict put } if
  userdict /UICollateDetails get dup /Mode 8 put /Destination [(User 2)]  put
  << /Collate true /CollateDetails UICollateDetails >> setpagedevice
"
*End
*KCCollate VMBUser03/Virtual Mailbox (User 3): "
  userdict /UICollateDetails known not
  { userdict /UICollateDetails 10 dict put } if
  userdict /UICollateDetails get dup /Mode 8 put /Destination [(User 3)]  put
  << /Collate true /CollateDetails UICollateDetails >> setpagedevice
"
*End
*KCCollate VMBUser04/Virtual Mailbox (User 4): "
  userdict /UICollateDetails known not
  { userdict /UICollateDetails 10 dict put } if
  userdict /UICollateDetails get dup /Mode 8 put /Destination [(User 4)]  put
  << /Collate true /CollateDetails UICollateDetails >> setpagedevice
"
*End
*KCCollate VMBUser05/Virtual Mailbox (User 5): "
  userdict /UICollateDetails known not
  { userdict /UICollateDetails 10 dict put } if
  userdict /UICollateDetails get dup /Mode 8 put /Destination [(User 5)]  put
  << /Collate true /CollateDetails UICollateDetails >> setpagedevice
"
*End
*KCCollate VMBUser06/Virtual Mailbox (User 6): "
  userdict /UICollateDetails known not
  { userdict /UICollateDetails 10 dict put } if
  userdict /UICollateDetails get dup /Mode 8 put /Destination [(User 6)]  put
  << /Collate true /CollateDetails UICollateDetails >> setpagedevice
"
*End
*KCCollate VMBUser07/Virtual Mailbox (User 7): "
  userdict /UICollateDetails known not
  { userdict /UICollateDetails 10 dict put } if
  userdict /UICollateDetails get dup /Mode 8 put /Destination [(User 7)]  put
  << /Collate true /CollateDetails UICollateDetails >> setpagedevice
"
*End
*KCCollate VMBUser08/Virtual Mailbox (User 8): "
  userdict /UICollateDetails known not
  { userdict /UICollateDetails 10 dict put } if
  userdict /UICollateDetails get dup /Mode 8 put /Destination [(User 8)]  put
  << /Collate true /CollateDetails UICollateDetails >> setpagedevice
"
*End
*KCCollate VMBUser09/Virtual Mailbox (User 9): "
  userdict /UICollateDetails known not
  { userdict /UICollateDetails 10 dict put } if
  userdict /UICollateDetails get dup /Mode 8 put /Destination [(User 9)]  put
  << /Collate true /CollateDetails UICollateDetails >> setpagedevice
"
*End
*KCCollate VMBUser10/Virtual Mailbox (User 10): "
  userdict /UICollateDetails known not
  { userdict /UICollateDetails 10 dict put } if
  userdict /UICollateDetails get dup /Mode 8 put /Destination [(User 10)]  put
  << /Collate true /CollateDetails UICollateDetails >> setpagedevice
"
*End
*?KCCollate: "
  save
  currentpagedevice dup /Collate known {
    dup /CollateDetails known {
      /CollateDetails get
      dup /Mode known {
        /Mode get
        1 {
          dup 0 eq { pop (Temp0) exit } if
          dup 1 eq { pop (Temp) exit } if
          dup 2 eq { pop (Perm) exit } if
          dup 8 eq { pop (VMB) exit } if
          pop (Unknown)
        } repeat
      }{ pop (Unknown) } ifelse
    }{ pop (Unknown) } ifelse
  }{ pop (Unknown) } ifelse
  = flush
  restore
"
*End
*CloseUI: *KCCollate

*% Barcode Mode Definitions
*OpenUI *KCBarcodeMode/Barcode: PickOne
*OrderDependency: 21 AnySetup *KCBarcodeMode
*DefaultKCBarcodeMode: None
*KCBarcodeMode None/None: "
  userdict /UICollateDetails known not
  { userdict /UICollateDetails 10 dict put } if
  userdict /UICollateDetails get /Barcode 2  put
  << /CollateDetails UICollateDetails >> setpagedevice
"
*End
*KCBarcodeMode First/First Page: "
  userdict /UICollateDetails known not
  { userdict /UICollateDetails 10 dict put } if
  userdict /UICollateDetails get /Barcode 0  put
  << /CollateDetails UICollateDetails >> setpagedevice
"
*End
*KCBarcodeMode All/All Pages: "
  userdict /UICollateDetails known not
  { userdict /UICollateDetails 10 dict put } if
  userdict /UICollateDetails get /Barcode 1  put
  << /CollateDetails UICollateDetails >> setpagedevice
"
*End
*?KCBarcodeMode: "
  save
  currentpagedevice dup /CollateDetails known {
    /CollateDetails get /Barcode get
    1 {
      dup 2 eq { pop (None) exit } if
      dup 0 eq { pop (First) exit } if
      dup 1 eq { pop (All) exit } if
      pop (Unknown)
    } repeat
  }{ (Unknown) } ifelse
  exch pop
  = flush
  restore
"
*End
*CloseUI: *KCBarcodeMode

*% Barcode ID Definitions
*OpenUI *KCBarcodeID/Barcode ID: Boolean
*OrderDependency: 23 AnySetup *KCBarcodeID
*DefaultKCBarcodeID: False
*KCBarcodeID True/On: "
  userdict /UICollateDetails known not
  { userdict /UICollateDetails 10 dict put } if
  userdict /UICollateDetails get /BarcodePosition 2 copy known { 2 copy get }
  { currentpagedevice /CollateDetails get /BarcodePosition get } ifelse 128 or  put
  << /CollateDetails UICollateDetails >> setpagedevice
"
*End
*KCBarcodeID False/Off: "
  userdict /UICollateDetails known not
  { userdict /UICollateDetails 10 dict put } if
  userdict /UICollateDetails get /BarcodePosition 2 copy known { 2 copy get }
  { currentpagedevice /CollateDetails get /BarcodePosition get } ifelse 128 not  put
  << /CollateDetails UICollateDetails >> setpagedevice
"
*End
*?KCBarcodeID: "
  save
  currentpagedevice dup /CollateDetails known {
    /CollateDetails get /BarcodePosition get 128 gt
    { (False) }{ (True) } ifelse
  }{ (Unknown) } ifelse
  exch pop
  = flush
  restore
"
*End
*CloseUI: *KCBarcodeID

*% Barcode Position Definitions
*OpenUI *KCBarcodePos/Barcode Position: PickOne
*OrderDependency: 22 AnySetup *KCBarcodePos
*DefaultKCBarcodePos: ULB
*KCBarcodePos ULB/Upper Left: "
  userdict /UICollateDetails known not
  { userdict /UICollateDetails 10 dict put } if
  userdict /UICollateDetails get /BarcodePosition 2 copy known { 2 copy get }
  { currentpagedevice /CollateDetails get /BarcodePosition get } ifelse 128 and 4 or  put
  << /CollateDetails UICollateDetails >> setpagedevice
"
*End
*KCBarcodePos URB/Upper Right: "
  userdict /UICollateDetails known not
  { userdict /UICollateDetails 10 dict put } if
  userdict /UICollateDetails get /BarcodePosition 2 copy known { 2 copy get }
  { currentpagedevice /CollateDetails get /BarcodePosition get } ifelse 128 and 3 or  put
  << /CollateDetails UICollateDetails >> setpagedevice
"
*End
*KCBarcodePos LLB/Lower Left: "
  userdict /UICollateDetails known not
  { userdict /UICollateDetails 10 dict put } if
  userdict /UICollateDetails get /BarcodePosition 2 copy known { 2 copy get }
  { currentpagedevice /CollateDetails get /BarcodePosition get } ifelse 128 and 7 or  put
  << /CollateDetails UICollateDetails >> setpagedevice
"
*End
*KCBarcodePos LRB/Lower Right: "
  userdict /UICollateDetails known not
  { userdict /UICollateDetails 10 dict put } if
  userdict /UICollateDetails get /BarcodePosition 2 copy known { 2 copy get }
  { currentpagedevice /CollateDetails get /BarcodePosition get } ifelse 128 and  put
  << /CollateDetails UICollateDetails >> setpagedevice
"
*End
*KCBarcodePos ULVB/Upper Left Vertical: "
  userdict /UICollateDetails known not
  { userdict /UICollateDetails 10 dict put } if
  userdict /UICollateDetails get /BarcodePosition 2 copy known { 2 copy get }
  { currentpagedevice /CollateDetails get /BarcodePosition get } ifelse 128 and 5 or  put
  << /CollateDetails UICollateDetails >> setpagedevice
"
*End
*KCBarcodePos URVB/Upper Right Vertical: "
  userdict /UICollateDetails known not
  { userdict /UICollateDetails 10 dict put } if
  userdict /UICollateDetails get /BarcodePosition 2 copy known { 2 copy get }
  { currentpagedevice /CollateDetails get /BarcodePosition get } ifelse 128 and 2 or  put
  << /CollateDetails UICollateDetails >> setpagedevice
"
*End
*KCBarcodePos LLVB/Lower Left Vertical: "
  userdict /UICollateDetails known not
  { userdict /UICollateDetails 10 dict put } if
  userdict /UICollateDetails get /BarcodePosition 2 copy known { 2 copy get }
  { currentpagedevice /CollateDetails get /BarcodePosition get } ifelse 128 and 6 or  put
  << /CollateDetails UICollateDetails >> setpagedevice
"
*End
*KCBarcodePos LRVB/Lower Right Vertical: "
  userdict /UICollateDetails known not
  { userdict /UICollateDetails 10 dict put } if
  userdict /UICollateDetails get /BarcodePosition 2 copy known { 2 copy get }
  { currentpagedevice /CollateDetails get /BarcodePosition get } ifelse 128 and 1 or  put
  << /CollateDetails UICollateDetails >> setpagedevice
"
*End
*?KCBarcodePos: "
  save
  currentpagedevice dup /CollateDetails known {
    /CollateDetails get /BarcodePosition get
    1 {
      dup 4 eq { pop (ULB) exit } if
      dup 3 eq { pop (URB) exit } if
      dup 7 eq { pop (LLB) exit } if
      dup 0 eq { pop (LRB) exit } if
      dup 5 eq { pop (ULVB) exit } if
      dup 2 eq { pop (URVB) exit } if
      dup 6 eq { pop (LLVB) exit } if
      dup 1 eq { pop (LRVB) exit } if
      pop (Unknown)
    } repeat
  }{ (Unknown) } ifelse
  exch pop
  = flush
  restore
"
*End
*CloseUI: *KCBarcodePos

*% Tray Switch Definitions
*OpenUI *TraySwitch/Auto Tray Switch: PickOne
*OrderDependency: 25 AnySetup *TraySwitch
*DefaultTraySwitch: None
*TraySwitch None/Printer Default: ""
*TraySwitch On/On: "<< /TraySwitch true >> setpagedevice"
*TraySwitch Off/Off: "<< /TraySwitch false >> setpagedevice"
*?TraySwitch: "
  save
  currentpagedevice /TraySwitch get
  { (On) }{ (Off) } ifelse
  = flush
  restore
"
*End
*CloseUI: *TraySwitch

*% PPD Version Info 
*OpenUI *KCVersion/PPD Version: PickOne
*OrderDependency: 25 AnySetup *KCVersion
*DefaultKCVersion: Default
*KCVersion Default/1.6.1 [02-23-2000]: ""
*CloseUI: *KCVersion

*% Font Information
*DefaultFont: Courier
*Font AvantGarde-Book: Standard "(001.006S)" Standard ROM
*Font AvantGarde-BookOblique: Standard "(001.006S)" Standard ROM
*Font AvantGarde-Demi: Standard "(001.007S)" Standard ROM
*Font AvantGarde-DemiOblique: Standard "(001.007S)" Standard ROM
*Font Bookman-Light: Standard "(001.004S)" Standard ROM
*Font Bookman-LightItalic: Standard "(001.004S)" Standard ROM
*Font Bookman-Demi: Standard "(001.004S)" Standard ROM
*Font Bookman-DemiItalic: Standard "(001.004S)" Standard ROM
*Font Courier: Standard "(002.004S)" Standard ROM
*Font Courier-Oblique: Standard "(002.004S)" Standard ROM
*Font Courier-Bold: Standard "(002.004S)" Standard ROM
*Font Courier-BoldOblique: Standard "(002.004S)" Standard ROM
*Font Helvetica: Standard "(001.006S)" Standard ROM
*Font Helvetica-Oblique: Standard "(001.006S)" Standard ROM
*Font Helvetica-Bold: Standard "(001.007S)" Standard ROM
*Font Helvetica-BoldOblique: Standard "(001.007S)" Standard ROM
*Font Helvetica-Narrow: Standard "(001.006S)" Standard ROM
*Font Helvetica-Narrow-Oblique: Standard "(001.006S)" Standard ROM
*Font Helvetica-Narrow-Bold: Standard "(001.007S)" Standard ROM
*Font Helvetica-Narrow-BoldOblique: Standard "(001.007S)" Standard ROM
*Font NewCenturySchlbk-Roman: Standard "(001.007S)" Standard ROM
*Font NewCenturySchlbk-Italic: Standard "(001.006S)" Standard ROM
*Font NewCenturySchlbk-Bold: Standard "(001.009S)" Standard ROM
*Font NewCenturySchlbk-BoldItalic: Standard "(001.007S)" Standard ROM
*Font Palatino-Roman: Standard "(001.005S)" Standard ROM
*Font Palatino-Italic: Standard "(001.005S)" Standard ROM
*Font Palatino-Bold: Standard "(001.005S)" Standard ROM
*Font Palatino-BoldItalic: Standard "(001.005S)" Standard ROM
*Font Symbol: Special "(001.007S)" Special ROM
*Font Times-Roman: Standard "(001.007S)" Standard ROM
*Font Times-Italic: Standard "(001.007S)" Standard ROM
*Font Times-Bold: Standard "(001.007S)" Standard ROM
*Font Times-BoldItalic: Standard "(001.009S)" Standard ROM
*Font ZapfChancery-MediumItalic: Standard "(001.007S)" Standard ROM
*Font ZapfDingbats: Special "(001.004S)" Special ROM
*?FontQuery: "
  save
  /str 100 string dup 0 (fonts/) putinterval def
  { count 1 gt
    { exch dup str 6 94 getinterval cvs
      (/) print print (:) print
      FontDirectory exch known
      { (Yes) }{ (No) } ifelse =
    }{ exit } ifelse
  } bind loop
  (*)
  = flush
  restore
"
*End
*?FontList: "
  save
  FontDirectory { pop == } bind forall flush
  (*)
  = flush
  restore
"
*End

*% Printer Messages
*Message: "%%[ exitserver: permanent state may be changed ]%%"
*Message: "%%[ Flushing: rest of job (to end-of-file) will be ignored ]%%"
*Message: "\FontName\ not found, using Courier"

*% Status (format: %%[ status: <one of these> ]%% )
*Status: "warming up"/warming up
*Status: "idle"/idle
*Status: "busy"/busy
*Status: "waiting"/waiting
*Status: "printing"/printing
*Status: "initializing"/initializing

*Status: "printing test page"/printing test page

*% Printer Error (format: %%[ PrinterError: <one of these> ]%% )
*PrinterError: "paper entry misfeed"
*PrinterError: "cover open"
*PrinterError: "no paper tray"
*PrinterError: "out of paper"
*PrinterError: "toner low (halt)"
*PrinterError: "warming up"
*PrinterError: "other reason"
*PrinterError: "video interface mode"
*PrinterError: "offline"
*PrinterError: "toner low (warning)"

*% Input Sources (format: %%[ status: <stat>;source:<one of these> ]%% )
*Source: "serial 25"
*Source: "parallel"
*Source: "AppleTalk"
*Source: "option"

*%  End of PPD file for Kyocera Mita Ci1100 (USA English)
