*PPD-Adobe: "4.3"
*% Adobe Systems PostScript(R) Printer Description File
*% Copyright 1987-1995 Adobe Systems Incorporated. 
*% All Rights Reserved. 
*% Permission is granted for redistribution of this file as
*% long as this copyright notice is intact and the contents
*% of the file is not altered in any way from its original form.
*% End of Copyright statement

*% --------------- General Information ---------------

*FileVersion: "1.2"
*FormatVersion: "4.3"
*LanguageEncoding: ISOLatin1
*LanguageVersion: English
*Manufacturer: "RISO"
*ModelName: "SC7500 for RISOGRAPH SR series 600 dpi"
*ShortNickName: "SC7500-RISO SR-600dpi"
*NickName: "SC7500 for RISOGRAPH SR series 600 dpi"
*PCFileName: "RSS7_S6A.PPD"
*Product: "(SC7500)"
*PSVersion: "(2015.107) 0"

*% --------------- System Management ---------------

*FreeVM: "1000000"
*Reset: "
  count 0 eq
  { false } { true exch startjob } ifelse not {
    (WARNING: Cannot reset printer.) =
    (Missing or invalid password.) =
    (Please contact the author of this software.)
    = flush quit
  } if systemdict /quit get exec
  (WARNING : Printer Reset Failed.) = flush"
*End
*Password: "0"
*ExitServer: "
  count 0 eq
  { false } { true exch startjob } ifelse not {
    (WARNING: Cannot modify initial VM.) =
    (Missing or invalid password.) =
    (Please contact the author of this software.) = flush quit
  } if"
*End

*% --------------- Options ---------------

*OpenGroup: InstallableOptions

*OpenUI *Option1/Drum Size: PickOne
*DefaultOption1: A3Drum
*Option1 TabloidDrum/Ledger: ""
*Option1 A3Drum/A3: ""
*CloseUI: *Option1

*OpenUI *Option2/Sorter: Boolean
*DefaultOption2: False
*Option2 True/Installed: ""
*Option2 False/Not Installed: ""
*CloseUI: *Option2

*CloseGroup: InstallableOptions

*% --------------- Constraints ---------------

*% ----- Option1 TabloidDrum
*UIConstraints: *Option1 TabloidDrum *PageSize A3
*UIConstraints: *PageSize A3 *Option1 TabloidDrum

*UIConstraints: *Option1 TabloidDrum *PageRegion A3
*UIConstraints: *PageRegion A3 *Option1 TabloidDrum

*% ----- Option1 A3Drum
*UIConstraints: *Option1 A3Drum *PageSize Tabloid
*UIConstraints: *PageSize Tabloid *Option1 A3Drum

*UIConstraints: *Option1 A3Drum *PageRegion Tabloid
*UIConstraints: *PageRegion Tabloid *Option1 A3Drum

*% ----- Option2 False (Sorter not installed)
*UIConstraints: *Option2 False *RS01Sorter
*UIConstraints: *RS01Sorter *Option2 False

*% --------------- Basic Device Capabilities ---------------

*ColorDevice: False
*DefaultColorSpace: Gray
*FileSystem: True
*?FileSystem: "
  save
    statusdict /diskstatus known {(True)} {(False)}
    ifelse = flush
  restore"
*End
*LanguageLevel: "2"
*Throughput: "120"
*TTRasterizer: Type42
*1284Modes Parallel: Compat Nibble Byte ECP
*1284DeviceID: "MANUFACTURER:RISO;COMMAND SET:PJL,PCL,POSTSCRIPT;MODEL:SC7500;CLASS:PRINTER"

*% --------------- Emulations and Protocols ---------------

*Protocols: PJL TBCP

*% --------------- Job Control Language ---------------

*JCLBegin: "<1B>%-12345X@PJL JOB<0A>"
*JCLToPSInterpreter: "@PJL ENTER LANGUAGE = POSTSCRIPT <0A>"
*JCLEnd: "<1B>%-12345X"

*% --------------- Resolution and Appearance Control ---------------

*DefaultResolution: 600dpi

*?Resolution: "
  save
    currentpagedevice /HWResolution get
    aload pop 1 index
    (    ) cvs print
    dup 3 1 roll ne
    {(x) print (     ) cvs print} {pop} ifelse
    (dpi) = flush
  restore"
*End

*% --------------- Halftone Information ---------------

*DefaultHalftoneType: 6
*ScreenFreq: "75.0"
*ScreenAngle: "45.0"
*DefaultScreenProc: Dot
*ScreenProc Dot: "
  {abs  exch  abs  2 copy  add  1 gt
    {1 sub  dup  mul  exch 1 sub  dup  mul  add  1 sub }
    {dup  mul  exch  dup  mul add  1 exch  sub }
  ifelse }"
*End
*ScreenProc Line: "{ pop }"
*ScreenProc Ellipse: "
  { dup 5 mul 8 div mul exch dup mul exch add sqrt 1 exch sub }"
*End

*% --------------- Media Selection ---------------

*OpenUI *PageSize: PickOne
*OrderDependency: 20 AnySetup *PageSize
*DefaultPageSize: Unknown
*PageSize Letter/Letter: "<< /PageSize [612 792] >> setpagedevice"
*PageSize Legal/Legal: "<< /PageSize [612 1008] >> setpagedevice"
*PageSize Tabloid/Tabloid: "<< /PageSize [792 1224] >> setpagedevice"
*PageSize Foolscap/Foolscap: "<< /PageSize [612 964] >> setpagedevice"
*PageSize Statement/Statement: "<< /PageSize [396 612] >> setpagedevice"
*PageSize A3/A3: "<< /PageSize [842 1191] >> setpagedevice"
*PageSize A4/A4: "<< /PageSize [595 842] >> setpagedevice"
*PageSize ISOB4/ISO B4: "<< /PageSize [709 1001] >> setpagedevice"
*PageSize ISOB5/ISO B5: "<< /PageSize [499 709] >> setpagedevice"
*PageSize ISOB6/ISO B6: "<< /PageSize [354 499] >> setpagedevice"
*PageSize B4/B4: "<< /PageSize [729 1032] >> setpagedevice"
*PageSize B5/B5: "<< /PageSize [516 729] >> setpagedevice"
*PageSize B6/B6: "<< /PageSize [363 516] >> setpagedevice"
*PageSize Postcard/Postcard-J: "<< /PageSize [284 419] >> setpagedevice"
*PageSize Postcard.1/Postcard: "<< /PageSize [252 396] >> setpagedevice"
*?PageSize: "
  save
    currentpagedevice /PageSize get aload pop
    2 copy gt {exch} if (Unknown)
    15 dict
    dup [612 792] (Letter) put
    dup [612 1008] (Legal) put
    dup [792 1224] (Tabloid) put
    dup [612 964] (Foolscap) put
    dup [396 612] (Statement) put
    dup [842 1191] (A3) put
    dup [595 842] (A4) put
    dup [709 1001] (ISOB4) put
    dup [499 709] (ISOB5) put
    dup [354 499] (ISOB6) put
    dup [729 1032] (B4) put
    dup [516 729] (B5) put
    dup [363 516] (B6) put
    dup [284 419] (Postcard) put
    dup [252 396] (Postcard.1) put
    { exch aload pop 4 index sub abs 5 le exch 5 index sub
      abs 5 le and { exch pop exit } { pop } ifelse
    } bind forall = flush pop pop
  restore"
*End
*CloseUI: *PageSize

*OpenUI *PageRegion: PickOne
*OrderDependency: 20 AnySetup *PageRegion
*DefaultPageRegion: Unknown
*PageRegion Letter/Letter: "<< /PageSize [612 792] >> setpagedevice"
*PageRegion Legal/Legal: "<< /PageSize [612 1008] >> setpagedevice"
*PageRegion Tabloid/Tabloid: "<< /PageSize [792 1224] >> setpagedevice"
*PageRegion Foolscap/Foolscap: "<< /PageSize [612 964] >> setpagedevice"
*PageRegion Statement/Statement: "<< /PageSize [396 612] >> setpagedevice"
*PageRegion A3/A3: "<< /PageSize [842 1191] >> setpagedevice"
*PageRegion A4/A4: "<< /PageSize [595 842] >> setpagedevice"
*PageRegion ISOB4/ISO B4: "<< /PageSize [709 1001] >> setpagedevice"
*PageRegion ISOB5/ISO B5: "<< /PageSize [499 709] >> setpagedevice"
*PageRegion ISOB6/ISO B6: "<< /PageSize [354 499] >> setpagedevice"
*PageRegion B4/B4: "<< /PageSize [729 1032] >> setpagedevice"
*PageRegion B5/B5: "<< /PageSize [516 729] >> setpagedevice"
*PageRegion B6/B6: "<< /PageSize [363 516] >> setpagedevice"
*PageRegion Postcard/Postcard-J: "<< /PageSize [284 419] >> setpagedevice"
*PageRegion Postcard.1/Postcard: "<< /PageSize [252 396] >> setpagedevice"
*CloseUI: *PageRegion

*DefaultImageableArea: Unknown
*ImageableArea Letter/Letter: "15 12 597 772"
*ImageableArea Legal/Legal: "15 12 597 988"
*ImageableArea Tabloid/Tabloid: "15 12 777 1204"
*ImageableArea Foolscap/Foolscap: "15 12 597 944"
*ImageableArea Statement/Statement: "15 12 381 592"
*ImageableArea A3/A3: "15 12 827 1171"
*ImageableArea A4/A4: "15 12 580 822"
*ImageableArea ISOB4/ISO B4: "15 12 694 981"
*ImageableArea ISOB5/ISO B5: "15 12 484 689"
*ImageableArea ISOB6/ISO B6: "15 12 339 479"
*ImageableArea B4/B4: "15 12 714 1012"
*ImageableArea B5/B5:  "15 12 501 709"
*ImageableArea B6/B6: "15 12 348 496"
*ImageableArea Postcard/Postcard-J: "15 12 269 399"
*ImageableArea Postcard.1/Postcard: "15 12 237 376"
*?ImageableArea: "
  save
    /cvp { cvi (            ) cvs print ( ) print } bind def
    newpath clippath pathbbox
    4 -2 roll exch 2 {ceiling cvp} repeat
    exch 2 {floor cvp} repeat flush
  restore"
*End

*DefaultPaperDimension: Unknown
*PaperDimension Letter/Letter: "612 792"
*PaperDimension Legal/Legal: "612 1008"
*PaperDimension Tabloid/Tabloid: "792 1224"
*PaperDimension Foolscap/Foolscap: "612 964"
*PaperDimension Statement/Statement: "396 612"
*PaperDimension A3/A3: "842 1191"
*PaperDimension A4/A4: "595 842"
*PaperDimension ISOB4/ISO B4: "709 1001"
*PaperDimension ISOB5/ISO B5: "499 709"
*PaperDimension ISOB6/ISO B6: "354 499"
*PaperDimension B4/B4: "729 1032"
*PaperDimension B5/B5: "516 729"
*PaperDimension B6/B6: "363 516"
*PaperDimension Postcard/Postcard-J: "284 419"
*PaperDimension Postcard.1/Postcard: "252 396"

*% --------------- Custom Page Sizes ---------------

*NonUIOrderDependency: 20 AnySetup *CustomPageSize 
*CustomPageSize True: "
  pop pop pop
  2 dict begin
  /PageSize [4 -2 roll] def
  /ImagingBBox null def
  currentdict end setpagedevice"
*End

*ParamCustomPageSize Width: 1 points 1 842
*ParamCustomPageSize Height: 2 points 1 1224
*ParamCustomPageSize WidthOffset: 3 points 0 0
*ParamCustomPageSize HeightOffset: 4 points 0 0
*ParamCustomPageSize Orientation: 5 int 0 0
*MaxMediaWidth: "842"
*MaxMediaHeight: "1224"
*LeadingEdge Short: ""
*DefaultLeadingEdge: Short
*HWMargins: 15 12 15 20

*VariablePaperSize: True

*% --------------- Media Handling ---------------

*OpenUI *InputSlot: PickOne
*OrderDependency: 10 AnySetup *InputSlot
*DefaultInputSlot: MultipurposeTray
*InputSlot MultipurposeTray/Multipurpose Tray: ""
*CloseUI: *InputSlot

*RequiresPageRegion All: True

*OpenUI *RS01Sorter/Sort Mode: PickOne
*OrderDependency: 30 AnySetup *RS01Sorter
*DefaultRS01Sorter: None
*RS01Sorter Sort/Sort: "<< /OutputAttributes << 1 << /OutputType (sort) /MatchAll false >> >> /OutputType (sort) >> setpagedevice"
*RS01Sorter Group/Group: "<< /OutputAttributes << 1 << /OutputType (group) /MatchAll false >> >> /OutputType (group) >> setpagedevice"
*RS01Sorter Stack/Stack: "<< /OutputAttributes << 1 << /OutputType (stack) /MatchAll false >> >> /OutputType (stack) >> setpagedevice"
*RS01Sorter None/NonSort: "<< /OutputAttributes << 1 << /OutputType (none) /MatchAll false >> >> /OutputType (none) >> setpagedevice"
*?RS01Sorter: "
  save
    currentpagedevice /OutputType get
    dup length 0 eq { pop (None) }
    { cvn << /sort (Sort) /group (Group) /stack (Stack) /none (None) >> exch get
    } ifelse
    = flush
  restore"
*End
*CloseUI: *RS01Sorter

*OpenUI *RS02DefaultScreen/ABS Screening: PickOne
*OrderDependency: 40 AnySetup *RS02DefaultScreen
*DefaultRS02DefaultScreen: ABS
*RS02DefaultScreen ABS/On: "
1
dup
/RisoControl/ProcSet findresource begin
currentdict /GetJobAbsMode known {
	GetJobAbsMode
}{
	GetAbsMode
}ifelse ne {
	currentdict /SetJobAbsMode known {
		SetJobAbsMode
	}{
		SetAbsMode
	}ifelse
	currentpagedevice setpagedevice
}if
end"
*End
*RS02DefaultScreen Rational/Off: "
0
dup
/RisoControl/ProcSet findresource begin
currentdict /GetJobAbsMode known {
	GetJobAbsMode
}{
	GetAbsMode
}ifelse ne {
	currentdict /SetJobAbsMode known {
		SetJobAbsMode
	}{
		SetAbsMode
	}ifelse
	currentpagedevice setpagedevice
}if
end"
*End
*?RS02DefaultScreen: "
  save
    /RisoControl /ProcSet findresource
    /GetJobAbsMode 2 copy known
    {
      get exec
    } {
      pop pop -1
    } ifelse (Unknown)
    << 0	(Rational) 1	(ABS) >> {
      exch 3 index
      eq {
        exch pop exit
      } if pop
    }forall
    = flush pop
  restore"
*End
*CloseUI: *RS02DefaultScreen

*OpenUI *RS03Speed/Print Speed: PickOne
*OrderDependency: 40 AnySetup *RS03Speed
*DefaultRS03Speed: Standard
*RS03Speed Panel/Panel Settings: "
    (Undefined)/RisoControl /ProcSet findresource dup
    /SetJobPrintSpeedName known {
        /SetJobPrintSpeedName
    }{
	/SetPrintSpeedName
    }ifelse
    get exec"
*End
*RS03Speed Lowest/Slowest: "
    (Lowest)/RisoControl /ProcSet findresource dup
    /SetJobPrintSpeedName known {
        /SetJobPrintSpeedName
    }{
	/SetPrintSpeedName
    }ifelse
    get exec"
*End
*RS03Speed Low/Slow: "
    (Low)/RisoControl /ProcSet findresource dup
    /SetJobPrintSpeedName known {
        /SetJobPrintSpeedName
    }{
	/SetPrintSpeedName
    }ifelse
    get exec"
*End
*RS03Speed Standard/Standard: "
    (Standard)/RisoControl /ProcSet findresource dup
    /SetJobPrintSpeedName known {
        /SetJobPrintSpeedName
    }{
	/SetPrintSpeedName
    }ifelse
    get exec"
*End
*RS03Speed High/Fast: "
    (High)/RisoControl /ProcSet findresource dup
    /SetJobPrintSpeedName known {
        /SetJobPrintSpeedName
    }{
	/SetPrintSpeedName
    }ifelse
    get exec"
*End
*RS03Speed Highest/Fastest: "
    (Highest)/RisoControl /ProcSet findresource dup
    /SetJobPrintSpeedName known {
        /SetJobPrintSpeedName
    }{
	/SetPrintSpeedName
    }ifelse
    get exec"
*End
*?RS03Speed: "
    save
    /RisoControl /ProcSet findresource dup /GetJobPrintSpeedName known{
	/GetJobPrintSpeedName
    }{
	/GetPrintSpeedName
    }ifelse get exec
    dup (Undefined) eq {
	pop (Panel)
    }if
    = flush
    restore"
*End
*CloseUI: *RS03Speed

*OpenUI *RS04Density/Print Density: PickOne
*OrderDependency: 40 AnySetup *RS04Density
*DefaultRS04Density: Standard
*RS04Density Panel/Panel Settings: "
    (Undefined)/RisoControl /ProcSet findresource dup
    /SetJobPrintDensName known {
        /SetJobPrintDensName
    }{
	/SetPrintDensName
    }ifelse
    get exec"
*End
*RS04Density Lightest/Lightest: "
    (Lightest)/RisoControl /ProcSet findresource dup
    /SetJobPrintDensName known {
        /SetJobPrintDensName
    }{
	/SetPrintDensName
    }ifelse
    get exec"
*End
*RS04Density Light/Light: "
    (Light)/RisoControl /ProcSet findresource dup
    /SetJobPrintDensName known {
        /SetJobPrintDensName
    }{
	/SetPrintDensName
    }ifelse
    get exec"
*End
*RS04Density Standard/Standard: "
    (Standard)/RisoControl /ProcSet findresource dup
    /SetJobPrintDensName known {
        /SetJobPrintDensName
    }{
	/SetPrintDensName
    }ifelse
    get exec"
*End
*RS04Density Dark/Dark: "
    (Dark)/RisoControl /ProcSet findresource dup
    /SetJobPrintDensName known {
        /SetJobPrintDensName
    }{
	/SetPrintDensName
    }ifelse
    get exec"
*End
*RS04Density Darkest/Darkest: "
    (Darkest)/RisoControl /ProcSet findresource dup
    /SetJobPrintDensName known {
        /SetJobPrintDensName
    }{
	/SetPrintDensName
    }ifelse
    get exec"
*End
*?RS04Density: "
    save
    /RisoControl /ProcSet findresource dup /GetJobPrintDensName known{
	/GetJobPrintDensName
    }{
	/GetPrintDensName
    }ifelse get exec
    dup (Undefined) eq {
	pop (Panel)
    }if = flush
  restore"
*End
*CloseUI: *RS04Density

*OpenUI *RS05ConfidentialMode/Confidential Mode: PickOne
*OrderDependency: 40 AnySetup *RS05ConfidentialMode
*DefaultRS05ConfidentialMode: False
*RS05ConfidentialMode True/On: "
    true /RisoControl /ProcSet findresource 
    dup /SetJobConfidentialMode known {
	/SetJobConfidentialMode
    }{
	/SetConfidentialMode
    }ifelse get exec"
*End
*RS05ConfidentialMode False/Off: "
    false /RisoControl /ProcSet findresource 
    dup /SetJobConfidentialMode known {
	/SetJobConfidentialMode
    }{
	/SetConfidentialMode
    }ifelse get exec"
*End
*?RS05ConfidentialMode: "
    save
    /RisoControl /ProcSet findresource
    dup /GetJobConfidentialMode known {
	/GetJobConfidentialMode
    }{
	/GetConfidentialMode
    }
    ifelse
    get exec {
	(True)
    }{	
	(False)
    }ifelse = flush 
    restore"
*End
*CloseUI: *RS05ConfidentialMode

*OpenUI *RS06AutoContinue/Auto Print: PickOne
*OrderDependency: 40 AnySetup *RS06AutoContinue
*DefaultRS06AutoContinue: True
*RS06AutoContinue True/On: "
    true /RisoControl /ProcSet findresource dup /SetJobAutoContinue
    known {
	/SetJobAutoContinue
    }{
	/SetAutoContinue
    }ifelse get exec"
*End
*RS06AutoContinue False/Off: "
    false /RisoControl /ProcSet findresource dup /SetJobAutoContinue
    known {
	/SetJobAutoContinue
    }{
	/SetAutoContinue
    }ifelse get exec"
*End
*?RS06AutoContinue: "
    save
    /RisoControl /ProcSet findresource dup /GetJobAutoContinue
    known {
	/GetJobAutoContinue
    }{
	/GetAutoContinue
    }ifelse get exec
    {
	(True)
    }{	
	(False)
    }ifelse
    = flush
    restore"
*End
*CloseUI: *RS06AutoContinue

*OpenUI *RS07NumProofCopies/Proof Copies: PickOne
*OrderDependency: 40 AnySetup *RS07NumProofCopies
*DefaultRS07NumProofCopies: 1
*RS07NumProofCopies 0: "
    0 /RisoControl /ProcSet findresource dup /SetJobNumberProofCopies
    known {
        /SetJobNumberProofCopies
    }{
	/SetNumberProofCopies
    }ifelse get exec"
*End
*RS07NumProofCopies 1: "
    1 /RisoControl /ProcSet findresource dup /SetJobNumberProofCopies
    known {
	/SetJobNumberProofCopies
    }{
	/SetNumberProofCopies
    }ifelse get exec"
*End
*RS07NumProofCopies 2: "
    2 /RisoControl /ProcSet findresource dup /SetJobNumberProofCopies
    known {
        /SetJobNumberProofCopies
    }{
	/SetNumberProofCopies
    }ifelse get exec"
*End
*RS07NumProofCopies 3: "
    3 /RisoControl /ProcSet findresource dup /SetJobNumberProofCopies
    known {
        /SetJobNumberProofCopies
    }{
	/SetNumberProofCopies
    }ifelse get exec"
*End
*RS07NumProofCopies 4: "
    4 /RisoControl /ProcSet findresource dup /SetJobNumberProofCopies
    known {
        /SetJobNumberProofCopies
    }{
	/SetNumberProofCopies
    }ifelse get exec"
*End
*RS07NumProofCopies 5: "
    5 /RisoControl /ProcSet findresource dup /SetJobNumberProofCopies
    known {
        /SetJobNumberProofCopies
    }{
	/SetNumberProofCopies
    }ifelse get exec"
*End
*RS07NumProofCopies 6: "
    6 /RisoControl /ProcSet findresource dup /SetJobNumberProofCopies
    known {
        /SetJobNumberProofCopies
    }{
	/SetNumberProofCopies
    }ifelse get exec"
*End
*RS07NumProofCopies 7: "
    7 /RisoControl /ProcSet findresource dup /SetJobNumberProofCopies
    known {
        /SetJobNumberProofCopies
    }{
	/SetNumberProofCopies
    }ifelse get exec"
*End
*RS07NumProofCopies 8: "
    8 /RisoControl /ProcSet findresource dup /SetJobNumberProofCopies
    known {
        /SetJobNumberProofCopies
    }{
	/SetNumberProofCopies
    }ifelse get exec"
*End
*RS07NumProofCopies 9: "
    9 /RisoControl /ProcSet findresource dup /SetJobNumberProofCopies
    known {
        /SetJobNumberProofCopies
    }{
	/SetNumberProofCopies
    }ifelse get exec"
*End
*?RS07NumProofCopies: "
    save
    /RisoControl /ProcSet findresource dup /GetJobNumberProofCopies
    known {
        /GetJobNumberProofCopies
    }{
	/GetNumberProofCopies
    }ifelse get exec = flush 
    restore"
*End
*CloseUI: *RS07NumProofCopies

*OpenUI *RS08StopBeforeNextMaster/Pause Before Next Master: PickOne
*OrderDependency: 40 AnySetup *RS08StopBeforeNextMaster
*DefaultRS08StopBeforeNextMaster: False
*RS08StopBeforeNextMaster True/Yes: "
  true /RisoControl /ProcSet findresource
  /SetJobStopBeforeNextMaster
  get exec"
*End
*RS08StopBeforeNextMaster False/No: "
  false /RisoControl /ProcSet findresource
  /SetJobStopBeforeNextMaster
  get exec"
*End
*?RS08StopBeforeNextMaster: "
  save
  /RisoControl /ProcSet findresource
  /GetJobStopBeforeNextMaster
  get exec
  {(True)} {(False)}
  ifelse = flush restore"
*End
*CloseUI: *RS08StopBeforeNextMaster

*OpenUI *RS09JobSelectPages/Print Even<2F>Odd Pages: PickOne
*OrderDependency: 40 AnySetup *RS09JobSelectPages
*DefaultRS09JobSelectPages: All
*RS09JobSelectPages All/Print All Pages: "
  /All /RisoControl /ProcSet findresource
  /SetJobSelectPages
  get exec"
*End
*RS09JobSelectPages Odd/Print Odd Pages Only: "
  /Odd /RisoControl /ProcSet findresource
  /SetJobSelectPages
  get exec"
*End
*RS09JobSelectPages Even/Print Even Pages Only: "
  /Even /RisoControl /ProcSet findresource
  /SetJobSelectPages
  get exec"
*End
*?RS09JobSelectPages: "
  save
  /RisoControl /ProcSet findresource
  /GetJobSelectPages
  get exec =
  flush restore"
*End
*CloseUI: *RS09JobSelectPages

*OpenUI *RS10Rotate180/Rotate 180<B0>: PickOne
*OrderDependency: 40 AnySetup *RS10Rotate180
*DefaultRS10Rotate180: False
*RS10Rotate180 True/Yes: "
  2 /RisoControl /ProcSet findresource
  /SetJobImageRotate
  2 copy known {
    get exec
  }{
    pop pop pop
  } ifelse"
*End
*RS10Rotate180 False/No: "
  0 /RisoControl /ProcSet findresource
  /SetJobImageRotate
  2 copy known {
    get exec
  }{
    pop pop pop
  } ifelse"
*End
*?RS10Rotate180: "
  save
    /RisoControl /ProcSet findresource
    /GetJobImageRotate
    2 copy known {
    get exec
    } {
      pop pop -1
    } ifelse (Unknown)
    << 0 (False) 2 (True) >> {
      exch 3 index eq {
        exch pop exit
      } if pop
    } forall
    = flush pop
  restore"
*End
*CloseUI: *RS10Rotate180

*% --------------- Fonts ---------------

*DefaultFont: Courier
*Font AvantGarde-Book: Standard "(001.006)" Standard Disk
*Font AvantGarde-BookOblique: Standard "(001.006)" Standard Disk
*Font AvantGarde-Demi: Standard "(001.007)" Standard Disk
*Font AvantGarde-DemiOblique: Standard "(001.007)" Standard Disk
*Font Bookman-Demi: Standard "(001.004)" Standard Disk
*Font Bookman-DemiItalic: Standard "(001.004)" Standard Disk
*Font Bookman-Light: Standard "(001.004)" Standard Disk
*Font Bookman-LightItalic: Standard "(001.004)" Standard Disk
*Font Courier: Standard "(002.004)" Standard Disk
*Font Courier-Bold: Standard "(002.004)" Standard Disk
*Font Courier-BoldOblique: Standard "(002.004)" Standard Disk
*Font Courier-Oblique: Standard "(002.004)" Standard Disk
*Font Helvetica: Standard "(001.006)" Standard Disk
*Font Helvetica-Bold: Standard "(001.007)" Standard Disk
*Font Helvetica-BoldOblique: Standard "(001.007)" Standard Disk
*Font Helvetica-Narrow: Standard "(001.006)" Standard Disk
*Font Helvetica-Narrow-Bold: Standard "(001.007)" Standard Disk
*Font Helvetica-Narrow-BoldOblique: Standard "(001.007)" Standard Disk
*Font Helvetica-Narrow-Oblique: Standard "(001.006)" Standard Disk
*Font Helvetica-Oblique: Standard "(001.006)" Standard Disk
*Font NewCenturySchlbk-Bold: Standard "(001.000)" Standard Disk
*Font NewCenturySchlbk-BoldItalic: Standard "(001.000)" Standard Disk
*Font NewCenturySchlbk-Italic: Standard "(001.000)" Standard Disk
*Font NewCenturySchlbk-Roman: Standard "(001.000)" Standard Disk
*Font Palatino-Bold: Standard "(001.000)" Standard Disk
*Font Palatino-BoldItalic: Standard "(001.000)" Standard Disk
*Font Palatino-Italic: Standard "(001.000)" Standard Disk
*Font Palatino-Roman: Standard "(001.000)" Standard Disk
*Font Symbol: Special "(001.007)" Special Disk
*Font Times-Bold: Standard "(001.007)" Standard Disk
*Font Times-BoldItalic: Standard "(001.009)" Standard Disk
*Font Times-Italic: Standard "(001.007)" Standard Disk
*Font Times-Roman: Standard "(001.007)" Standard Disk
*Font ZapfChancery-MediumItalic: Standard "(001.007)" Standard Disk
*Font ZapfDingbats: Special "(001.004)" Special Disk
*?FontList: "
  save
    (*) {cvn ==} 128 string /Font resourceforall
    (*) = flush
  restore"
*End
*?FontQuery: "
  save
    { count 1 gt
      { exch dup 127 string cvs (/) print print (:) print
      /Font resourcestatus {pop pop (Yes)} {(No)} ifelse =
      } { exit } ifelse
    } bind loop
    (*) = flush
  restore"
*End

*% --------------- Printer Messages ---------------

*% ----- Consumables
*PrinterError: "paper empty"
*PrinterError: "master roll empty"
*PrinterError: "master disposal box full"
*PrinterError: "ink cartridge empty"
*% ----- Engine
*PrinterError: "paper jam"
*PrinterError: "master jam"
*PrinterError: "option error"
*PrinterError: "offline, press printer I/F key to continue"
*PrinterError: "check printer control panel"
*PrinterError: "fatal, check printer control panel"
*PrinterError: "check printer power and cable connection"

*% ----- General
*Status: "idle"
*Status: "busy"
*Status: "waiting"
*Status: "printing"
*% ----- Consumables
*Status: "PrinterError: paper empty"
*Status: "PrinterError: master roll empty"
*Status: "PrinterError: master disposal box full"
*Status: "PrinterError: ink cartridge empty"
*% ----- Engine
*Status: "PrinterError: paper jam"
*Status: "PrinterError: master jam"
*Status: "PrinterError: option error"
*Status: "PrinterError: offline, press printer I/F key to continue"
*Status: "PrinterError: check printer control panel"
*Status: "PrinterError: fatal, check printer control panel"
*Status: "PrinterError: check printer power and cable connection"

*Source: "Serial"
*Source: "EtherTalk"
*Source: "Parallel"
*Source: "LPR"

*Message: "%%[ exitserver: permanent state may be changed ]%%"
*Message: "%%[ Flushing: rest of job (to end-of-file) will be ignored ]%%"
*Message: "\FontName\ not found, using Courier"

*% --------------- Color Separation ---------------

*DefaultColorSep: ProcessBlack.75lpi.600dpi/75 lpi / 600 dpi

*% ----- 75 lpi / 600 dpi
*ColorSepScreenAngle ProcessBlack.75lpi.600dpi/75 lpi / 600 dpi: "45"
*ColorSepScreenAngle ProcessCyan.75lpi.600dpi/75 lpi / 600 dpi: "15"
*ColorSepScreenAngle ProcessMagenta.75lpi.600dpi/75 lpi / 600 dpi: "75"
*ColorSepScreenAngle ProcessYellow.75lpi.600dpi/75 lpi / 600 dpi: "0"
*ColorSepScreenFreq ProcessBlack.75lpi.600dpi/75 lpi / 600 dpi: "75"
*ColorSepScreenFreq ProcessCyan.75lpi.600dpi/75 lpi / 600 dpi: "75"
*ColorSepScreenFreq ProcessMagenta.75lpi.600dpi/75 lpi / 600 dpi: "75"
*ColorSepScreenFreq ProcessYellow.75lpi.600dpi/75 lpi / 600 dpi: "75"

*% 16 April 1997
*% End of PPD file for SC7500 for RISOGRAPH SR series 600 dpi
*% The byte count of this file should be exactly 025296 or 026179
*% depending on the filesystem it resides in.
*% end of PPD file for SC7500 
