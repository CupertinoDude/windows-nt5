

#include <stdio.h>
#include <stdlib.h>
#include <windows.h>


int _cdecl Mycompare(const void *elem1, const void *elem2 )
{
  INT   i;
  WORD  *pWord1, *pWord2;

  pWord1 = (WORD *)elem1;
  pWord2 = (WORD *)elem2;

  for (i=0; i<5; i++) {


    if ( *pWord1 > *pWord2 )
    {
       return 1;
    }

    if ( *pWord1 < *pWord2 )
    {
       return -1;
    }

    pWord1++;
    pWord2++;
  }

  return 0;

}

void  _cdecl main( int  argc,  TCHAR **argv) {

  HANDLE   hInFile, hOutFile;
  LPBYTE   lpInFile, lpStart;
  DWORD    dwInFileSize,dwFileReal, LineLen; 
  BOOL     bFileRet;

  if ( argc != 3 ) {
    printf("usage: Convert TableIn  TableOut \n");
    return; 
  }


  hInFile = CreateFile(argv[1],          // pointer to name of the file
                       GENERIC_READ,     //access(read-write)mode
                       FILE_SHARE_READ,  // share mode
                       NULL,             // pointer to security attributes
                       OPEN_EXISTING,    // how to create
                       FILE_ATTRIBUTE_NORMAL,  // file attributes
                       NULL);    

  if ( !hInFile )  return;

  dwInFileSize = GetFileSize(hInFile, NULL);

  lpInFile = lpStart = LocalAlloc(LPTR,dwInFileSize);

  if ( !lpInFile )  {
     printf("lpInFile is not alloced\n");
     return;
  } 

  printf("dwInFileSize=%d ", dwInFileSize);

  ReadFile( hInFile,                   // handle of file to read
            lpInFile,                  // pointer to buffer that receives data
            dwInFileSize,              // number of bytes to read
            &dwFileReal,           // pointer to number of bytes read
            NULL );                    // pointer to structure for data 
 

  if ( dwFileReal != dwInFileSize ) {
     printf(" the file is not readed completely\n");
     return;
  }
 
  LineLen = 9 * sizeof(WORD);
  lpStart = lpInFile + 2;
 
  qsort( lpStart,
         (dwFileReal-2)/LineLen ,
         LineLen,
         Mycompare);

 
  hOutFile= CreateFile(argv[2],           // pointer to name of the file
                       GENERIC_WRITE,     //access(read-write)mode
                       FILE_SHARE_WRITE,  // share mode
                       NULL,              // pointer to security attributes
                       CREATE_ALWAYS,     // how to create
                       FILE_ATTRIBUTE_NORMAL,  // file attributes
                       NULL); 

  if ( !hOutFile ) {
     printf("File 2 is not Created as write\n");
     return;
  }

  bFileRet = WriteFile(hOutFile,           // handle to file to write to
                       lpInFile,           // pointer to data to write to file
                       dwInFileSize,       // number of bytes to write
                       &dwFileReal,
                       NULL);              // pointer to structure needed for 
                                           // overlapped I/O
 
  if ( !bFileRet ) {
     printf("Write File Error\n");
     return;
  } 

  CloseHandle(hInFile);
  CloseHandle(hOutFile);
  
  LocalFree(lpInFile);

  return;

} 
