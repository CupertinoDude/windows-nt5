//+-------------------------------------------------------------------------
//
//  Microsoft Windows
//  Copyright (C) Microsoft Corporation, 1992-2000.
//
//  File: msctfp.idl
//
//  Contents: MSCTF private APIs
//
//
//--------------------------------------------------------------------------

cpp_quote("//=--------------------------------------------------------------------------=")
cpp_quote("// msctfp.h")
cpp_quote("//=--------------------------------------------------------------------------=")
cpp_quote("// (C) Copyright 1995-2000 Microsoft Corporation.  All Rights Reserved.")
cpp_quote("//")
cpp_quote("// THIS CODE AND INFORMATION IS PROVIDED \"AS IS\" WITHOUT WARRANTY OF")
cpp_quote("// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO")
cpp_quote("// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A")
cpp_quote("// PARTICULAR PURPOSE.")
cpp_quote("//=--------------------------------------------------------------------------=")
cpp_quote("")
cpp_quote("#pragma comment(lib,\"uuid.lib\")")
cpp_quote("")
cpp_quote("//--------------------------------------------------------------------------")
cpp_quote("// MSCTF Private Interfaces.")
cpp_quote("")

cpp_quote("#ifndef MSCTFP_DEFINED")
cpp_quote("#define MSCTFP_DEFINED")
cpp_quote("")
cpp_quote("#include <windows.h>")
cpp_quote("")

import "oaidl.idl";
import "msctf.idl";

interface ITfSysHookSink;

cpp_quote("#define TF_LBU_CAPSKANAKEY               1")
cpp_quote("#define TF_LBU_NTCONSOLELANGCHANGE       2")

//
// flags for TF_LBU_CAPSKANAKEY
//
cpp_quote("#define TF_LBUF_CAPS        0x0001")
cpp_quote("#define TF_LBUF_KANA        0x0002")

// 
// ITfThreadMgr_P
// 
// implemented by Cicero
//
// This is a private Interface of ITFThreadMgr.
//
//
//
[
  object,
  uuid(f65567a7-34a1-46f4-b5dd-8804aeb06ff7),
  pointer_default(unique)
]
interface ITfThreadMgr_P : ITfThreadMgr
{
    //
    // AIMM1.2 want to know if the window is cicero aware or not.
    // Because AIMM1.2 is filtering a window by wndclass,
    // but both AIMM1.2 and Cicero aware Richedit can exist on same thread.
    //
    HRESULT GetAssociated([in] HWND hWnd, 
                          [out] ITfDocumentMgr **ppdim);

    HRESULT SetSysHookSink([in] ITfSysHookSink *pSink);

    HRESULT RequestPostponedLock([in] ITfContext *pic);

    HRESULT IsKeystrokeFeedEnabled([out] BOOL *pfEnabled);
};

// 
// ITfSysHookSink
// 
// implemented by AIMM layer
//
// This is a private Interface of ITFThreadMgr.
//
[
  object,
  uuid(495388DA-21A5-4852-8BB1-ED2F29DA8D60),
  pointer_default(unique)
]
interface ITfSysHookSink : IUnknown
{
    HRESULT OnPreFocusDIM([in] HWND hWnd);
    HRESULT OnSysKeyboardProc([in] WPARAM wParam, 
                              [in] LPARAM lParam);
    HRESULT OnSysShellProc([in] int nCode,
                           [in] WPARAM wParam, 
                           [in] LPARAM lParam);
};

// 
// ITfStartReconversionNotifySink
// 
// implemented by AIMM layer
//
[
  object,
  uuid(b9cd19cb-2919-4935-8768-ef30bae9a0cc),
  pointer_default(unique)
]
interface ITfStartReconversionNotifySink : IUnknown
{
    HRESULT StartReconversion();
    HRESULT EndReconversion();
}

//
// ITfLangBarEventSink_P
//
// Implemented by Unified Tip bars.
// Callback for ITfLangBarMgr.
//
[
  object,
  uuid(7a460360-da21-4b09-a8a0-8a69e728d893),
  pointer_default(unique)
]
interface ITfLangBarEventSink_P: IUnknown
{
    HRESULT OnLangBarUpdate([in] UINT uPdate, [in] LPARAM lParam);
}

// 
// ITfContext_P
// 
// implemented by Cicero
//
// This is a private Interface of ITFContext.
//
[
  object,
  uuid(2dee47c8-704d-42a0-9983-ffeed659b64d),
  pointer_default(unique)
]
interface ITfContext_P : ITfContext
{
    HRESULT MapAppProperty([in] REFGUID guidAppProp,
                           [in] REFGUID guidProp);

};

//
// ITfRangeChangeSink
//
// Implemented by an application/control.
//
// This is an interface we pulled from Cicero 1.0 because no one
// was using it.
[
  object,
  uuid(c1a0e6af-0d60-4800-9796-1fe8e85c0cca),
  pointer_default(unique)
]
interface ITfRangeChangeSink : IUnknown
{
    HRESULT OnChange([in] ITfRange *pRange);
};


cpp_quote("#endif // MSCTFP_DEFINED")
