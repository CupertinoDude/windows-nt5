
helper Element
{
public:

    //
    // Construction
    //

    struct ConstructInfo : DUser::Gadget::ConstructInfo
    {
        DWORD       cbSize;
        BOOL        fSelfLayout;
        void *      pReserved0;
    };

    static  HRESULT     StartDefer() { return DirectUIElementStartDefer(); }
    static  HRESULT     EndDefer()   { return DirectUIElementEndDefer(); }


    //
    // Method enumerations
    //

    enum EGetChild
    {
        gcFirst       = GG_TOPCHILD,
        gcLast        = GG_BOTTOMCHILD,

        gcChildBits   = 0x0FFFFFFF,

        gcLayoutOnly  = 0x10000000
    };

    enum EGetSibling
    {
        gsNext        = GG_NEXT,
        gsPrev        = GG_PREV,

        gsSiblingBits = 0x0FFFFFFF,

        gsLayoutOnly  = 0x10000000
    };


    //
    // Property Value enumerations
    //

    enum EActiveProp
    {
        aeInactive         = 0,
        aeMouse            = 1,
        aeKeyboard         = 2,
        aeMouseAndKeyboard = (aeMouse | aeKeyboard)
    };


    //
    // Events
    //

    struct Event
    {
        DWORD       cbSize;
        BOOL        fHandled;
        UINT        nStage;
    };

    struct InputEvent
    {
        DWORD       cbSize;
        BOOL        fHandled;
        UINT        nStage;
        UINT        nDevice;
        UINT        nCode;
        UINT        nModifiers;
    };

    struct MouseEvent : InputEvent
    {
        POINT       ptClientPxl;
        BYTE        bButton;
        UINT        nFlags;
    };

    struct MouseDragEvent : MouseEvent
    {
        SIZE        sizeDelta;
        BOOL        fWithin;
    };

    struct MouseClickEvent : MouseEvent
    {
        UINT        cClicks;
    };

    struct MouseWheelEvent : MouseEvent
    {
        short       sWheel;
    };

    struct KeyboardEvent : InputEvent
    {
        WCHAR       ch;
        WORD        cRep;
        WORD        wFlags;
    };


    //
    // Class index
    //

    const static ElementMUID    Class           = DirectUIMakeElementMUID(0);


    //
    // Property MUIDs for class Element
    //

    const static PropertyMUID   Parent          = DirectUIMakePropertyMUID(Element::Class, 0);
    const static PropertyMUID   Bounds          = DirectUIMakePropertyMUID(Element::Class, 1);
    const static PropertyMUID   Layout          = DirectUIMakePropertyMUID(Element::Class, 2);
    const static PropertyMUID   LayoutPos       = DirectUIMakePropertyMUID(Element::Class, 3);
    const static PropertyMUID   DesiredSize     = DirectUIMakePropertyMUID(Element::Class, 4);
    const static PropertyMUID   Active          = DirectUIMakePropertyMUID(Element::Class, 5);
    const static PropertyMUID   KeyFocused      = DirectUIMakePropertyMUID(Element::Class, 6);
    const static PropertyMUID   MouseFocused    = DirectUIMakePropertyMUID(Element::Class, 7);
    const static PropertyMUID   KeyWithin       = DirectUIMakePropertyMUID(Element::Class, 8);
    const static PropertyMUID   MouseWithin     = DirectUIMakePropertyMUID(Element::Class, 9);
    const static PropertyMUID   Background      = DirectUIMakePropertyMUID(Element::Class, 10);
};


helper HWNDRoot
{
public:

    //
    // Construction
    //

    struct ConstructInfo : Element::ConstructInfo
    {
        HWND        hParent;
        BOOL        fDblBuffer;
    };
};


helper Layout
{
public:

    //
    // Enumerations
    //

    enum ELayoutPos
    {
        lpNone      = -3,
        lpAbsolute  = -2,
        lpAuto      = -1
    };

    enum ECycleMode
    {
        lcPass,
        lcNormal,
        lcOptimize
    };

    enum EKeyNav
    {
        navLogical  = 0x00000001,  // Unset == Directional
        navForward  = 0x00000002,  // Unset == Backward
        navVertical = 0x00000004,  // Unset == Horizontal
        navRelative = 0x00000008,  // Unset == Absolute

        navFirst    = navForward | navLogical,
        navLast     = navLogical,
        navUp       = navRelative | navVertical,
        navDown     = navRelative | navVertical | navForward,
        navLeft     = navRelative,
        navRight    = navRelative | navForward,
        navNext     = navRelative | navForward | navLogical,
        navPrev     = navRelative | navLogical
    };

    enum EAlign
    {
        alLeft      = 0,
        alTop       = 0,
        alRight     = 1,
        alBottom    = 1,
        alCenter    = 2,
        alJustify   = 3
    };
};
