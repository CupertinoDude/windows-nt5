// RCML.idl : IDL source for RCML.dll
//

// This file will be processed by the MIDL tool to
// produce the type library (RCML.tlb) and marshalling code.
import "oaidl.idl";
import "ocidl.idl";
interface IRCMLControl;
interface IRCMLContainer;

/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
	[
		object,
		uuid(4CB1AC90-853C-4ce2-B013-26D0EE675F78),
		helpstring("IRCMLResize Interface"),
		pointer_default(unique)
	]
	interface IRCMLResize : IUnknown
	{
	};


/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////

	[
		object,
		uuid(F825CAF1-DE40-4FCC-B965-933076D7A1C5),
		helpstring("IRCMLNode Interface"),
		pointer_default(unique)
	]
	interface IRCMLNode : IUnknown
	{
		[id(1), helpstring("method AttachParent")] HRESULT AttachParent([in] IRCMLNode * child);	// set no addref
		[id(14), helpstring("method DetachParent")] HRESULT DetachParent([out, retval] IRCMLNode ** child); // get no addref

		[id(2), helpstring("method AcceptChild")] HRESULT AcceptChild(IRCMLNode * child);
		[id(3), helpstring("method DoEndChild")] HRESULT DoEndChild(IRCMLNode * child);
		[propget, id(4), helpstring("property Type")] HRESULT Type([out, retval] UINT *pVal);
		[id(5), helpstring("method InitNode")] HRESULT InitNode(IRCMLNode * parent);
		[id(6), helpstring("method DisplayNode")] HRESULT DisplayNode(IRCMLNode * parent);
		[id(7), helpstring("method ExitNode")] HRESULT ExitNode(IRCMLNode * parent, [in] LONG lDialogResult);
		[propget, id(8), helpstring("property Attr")] HRESULT Attr(LPCWSTR index, [out, retval] LPWSTR *pVal);
		[propput, id(8), helpstring("property Attr")] HRESULT Attr(LPCWSTR index, [in] LPCWSTR newVal);
		[id(9), helpstring("method IsType")] HRESULT IsType(LPCWSTR nodeName);
		[id(10), helpstring("method YesDefault")] HRESULT YesDefault([in] LPCWSTR propID, [in] DWORD dwNotPresent, [in] DWORD dwYes, [out, retval] DWORD * pdwValue);
		[id(11), helpstring("method YesNoDefault")] HRESULT YesNoDefault([in] LPCWSTR propID, [in] DWORD dwNotPresent, [in] DWORD dwNo , [in] DWORD dwYes, [out, retval] DWORD * pdwValue);

		[id(12), helpstring("method ValueOf")] HRESULT ValueOf([in] LPCWSTR propID, [in] DWORD dwNotPresent, [out, retval] DWORD * pdwValue);
		[id(13), helpstring("method ValueOf")] HRESULT SignedValueOf([in] LPCWSTR propID, [in] int dwNotPresent, [out, retval] int * pdwValue);

		[propget, helpstring("property StringType")] HRESULT StringType([out, retval] LPWSTR *pStringType);
		[helpstring("method GetChildEnum")] HRESULT GetChildEnum([out, retval] IEnumUnknown ** pEnum);
		[helpstring("method GetUnknownEnum")] HRESULT GetUnknownEnum([out, retval] IEnumUnknown ** pEnum);
	};


/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
#if 0
    virtual 	HPEN		GetPen() =0 ;
    virtual 	LPCWSTR		GetStyleName() =0 ;

    virtual 	void SetDialogStyle(RCMLCSSStyleNode * p) =0 ;

    virtual     RCMLQuickFont * GetQuickFont()=0;

#endif
	[
		object,
		uuid(F5DBF38A-14DE-4f8b-8750-BABA8846E7F2),
		helpstring("IRCMLCSS Interface"),
		pointer_default(unique)
	]
	interface IRCMLCSS : IRCMLNode
	{
		[propget, helpstring("property HFONT")] HRESULT Font([out, retval] HFONT *pVal);
		[propget, helpstring("property HBRUSH")] HRESULT Brush([out, retval] HBRUSH *pVal);
		[propget, helpstring("property HPEN")] HRESULT Pen([out, retval] DWORD *pVal);	// HPEN
		[propget, helpstring("property Color")] HRESULT Color([out, retval] COLORREF *pVal);
		[propget, helpstring("property BkColor")] HRESULT BkColor([out, retval] COLORREF *pVal);
		[propget, helpstring("property DialogStyle")] HRESULT DialogStyle([out, retval] IRCMLCSS **pVal);
		[propput, helpstring("property DialogStyle")] HRESULT DialogStyle([in] IRCMLCSS *pVal);
		[propget, helpstring("property Visible")] HRESULT Visible([out, retval] BOOL *pVal);
		[propget, helpstring("property Display")] HRESULT Display([out, retval] BOOL *pVal);

		[propget, helpstring("property BorderWidth")] HRESULT BorderWidth([out, retval] int *pVal);
		[propget, helpstring("property BorderStyle")] HRESULT BorderStyle([out, retval] LPWSTR *pVal);

		[propget, helpstring("property GrowsWide")] HRESULT GrowsWide([out, retval] BOOL *pVal);
		[propget, helpstring("property GrowsTall")] HRESULT GrowsTall([out, retval] BOOL *pVal);

		[propget, helpstring("property ClipHoriz. Allow horizontal clipping.")] HRESULT ClipHoriz([out, retval] BOOL *pVal);
		[propget, helpstring("property ClipVert. Allow vertical clipping.")] HRESULT ClipVert([out, retval] BOOL *pVal);
	};

/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
	[
		object,
		uuid(B31FDC6A-9FB2-404e-8762-CC267A95A424),
		helpstring("IRCMLHelp Interface"),
		pointer_default(unique)
	]
	interface IRCMLHelp : IRCMLNode
	{
		[propget, helpstring("property TooltipText")] HRESULT TooltipText([out, retval] LPWSTR *pVal);
		[propget, helpstring("property BalloonText")] HRESULT BalloonText([out, retval] LPWSTR *pVal);
	};


/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////

    typedef enum RELATIVETYPE_ENUM
    {
        RELATIVE_TO_NOTHING=0,
        RELATIVE_TO_CONTROL,
        RELATIVE_TO_PREVIOUS,
        RELATIVE_TO_PAGE,
    } RELATIVETYPE_ENUM;

	[
		object,
		uuid(B943DDF7-21A7-42cb-B696-345AEBC10910),
		helpstring("IRCMLControl Interface"),
		pointer_default(unique)
	]
	interface IRCMLControl : IRCMLNode
	{
		//
		// Win32 specifics here - perhaps yet another interface?
		// or is this nicely implementatino specific, not a generic interface.
		//
		[propget, helpstring("property Class")] HRESULT Class([out, retval] LPWSTR *pVal);
		[propget, helpstring("property Style")] HRESULT Style([out, retval] DWORD   *pVal);
		[propget, helpstring("property StyleEx")] HRESULT StyleEx([out, retval] DWORD   *pVal);
		[propget, helpstring("property Text")] HRESULT Text([out, retval] LPWSTR *pVal);
		[helpstring("method OnInit")] HRESULT OnInit(HWND h);
		[propget, helpstring("property Window")] HRESULT Window([out, retval] HWND *pVal);
		[propput, helpstring("property Window")] HRESULT Window([in] HWND pVal);
		[helpstring("method OnDestroy")] HRESULT OnDestroy(HWND h, WORD wLastCommand);

		//
		// General control information.
		//
		[propget, helpstring("property ID")] HRESULT ID([out, retval] LPWSTR *pVal);
		[propget, helpstring("property Width")] HRESULT Width([out, retval] LONG *pVal);
		[propget, helpstring("property Height")] HRESULT Height([out, retval] LONG *pVal);
		[propput, helpstring("property Width")] HRESULT Width([in] LONG Val);
		[propput, helpstring("property Height")] HRESULT Height([in] LONG Val);
		[propget, helpstring("property X")] HRESULT X([out, retval] LONG *pVal);
		[propget, helpstring("property Y")] HRESULT Y([out, retval] LONG *pVal);
		[propput, helpstring("property X")] HRESULT X([in] LONG Val);
		[propput, helpstring("property Y")] HRESULT Y([in] LONG Val);

		//
		// Layout information - perhaps a GetLayoutInformation method?
		//
		[propget, helpstring("property RelativeTo")] HRESULT RelativeTo([out, retval] IRCMLControl * *pVal);
		[propput, helpstring("property RelativeTo")] HRESULT RelativeTo([in] IRCMLControl * newVal);
		[propget, helpstring("property Location")] HRESULT Location([out, retval] RECT *pVal);
		[propget, helpstring("property RelativeLocn")] HRESULT RelativeLocn(RECT rect, [out, retval] RECT *pVal);
		[propget, helpstring("property RelativeID")] HRESULT RelativeID([out, retval] LPWSTR *pVal);
		[propget, helpstring("property RelativeType")] HRESULT RelativeType([out, retval] RELATIVETYPE_ENUM *pVal);

		//
		// Sizing information
		//
		[propget, helpstring("property Clipped")] HRESULT Clipped([out, retval] SIZE *pVal);
		[propget, helpstring("property GrowsWide")] HRESULT GrowsWide([out, retval] BOOL *pVal);
		[propget, helpstring("property GrowsTall")] HRESULT GrowsTall([out, retval] BOOL *pVal);

		//
		// The container is a visual thing, not necessarily the parent.
		//
		[propget, helpstring("property Container")] HRESULT Container([out, retval] IRCMLContainer * * pContainer);
		[propput, helpstring("property Container")] HRESULT Container([in] IRCMLContainer * pContainer);

		//
		// To get at the CSS.
		//
		[propget, helpstring("property CSS")] HRESULT CSS([out, retval] IRCMLCSS * * pCSS);
		[propput, helpstring("property CSS")] HRESULT CSS([in] IRCMLCSS * pCSS);

		//
		// Help information.
		//
		[propget, helpstring("property Help")] HRESULT Help([out, retval] IRCMLHelp * * pHelp);
	};


/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
//
// The a collection of controls - the form/page is one of these.
// for now maps the units used on each control into dialog units.
// this is also a control - the frame?
//
	[
		object,
		uuid(E0868F2A-BC98-4b46-9261-31A168904804),
		helpstring("IRCMLContainer Interface"),
		pointer_default(unique)
	]
	interface IRCMLContainer : IUnknown
	{
		[helpstring("method GetPixelLocation")] HRESULT GetPixelLocation([in] IRCMLControl *, [out, retval] RECT *pRect);
	};
