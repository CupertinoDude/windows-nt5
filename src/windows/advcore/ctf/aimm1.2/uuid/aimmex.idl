//+-------------------------------------------------------------------------
//
//  Microsoft Windows
//  Copyright (C) Microsoft Corporation, 1992-1997.
//
//  File: aimmex.idl
//
//  Contents: ActiveIMMEx interface definitions
//
//
//--------------------------------------------------------------------------

cpp_quote("//=--------------------------------------------------------------------------=")
cpp_quote("// aimmex.h")
cpp_quote("//=--------------------------------------------------------------------------=")
cpp_quote("// (C) Copyright 1995-1999 Microsoft Corporation.  All Rights Reserved.")
cpp_quote("//")
cpp_quote("// THIS CODE AND INFORMATION IS PROVIDED \"AS IS\" WITHOUT WARRANTY OF")
cpp_quote("// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO")
cpp_quote("// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A")
cpp_quote("// PARTICULAR PURPOSE.")
cpp_quote("//=--------------------------------------------------------------------------=")
cpp_quote("")
cpp_quote("#pragma comment(lib,\"uuid.lib\")")
cpp_quote("")
cpp_quote("//--------------------------------------------------------------------------")
cpp_quote("// IActiveIMMEx Interfaces.")
cpp_quote("")

#ifndef DO_NO_IMPORTS
import "unknwn.idl";
import "oaidl.idl";
import "aimm12.idl";
import "msctf.idl";
#endif



//
// IActiveIMMAppEx
//

[
  local,
  object,
  uuid(D7A6F58A-D478-44ab-86C9-591C23A26534),

  pointer_default(unique)
]
interface IActiveIMMAppEx : IActiveIMMApp
{
    HRESULT FilterClientWindowsEx([in] HWND hWnd, [in] BOOL fGuidMap);

    HRESULT FilterClientWindowsGUIDMap([in] ATOM *aaClassList, [in] UINT uSize, [in] BOOL *aaGildMap);

    HRESULT GetGuidAtom([in] HIMC hImc, [in] BYTE bAttr, [out] TfGuidAtom *pGuidAtom);

    HRESULT UnfilterClientWindowsEx([in] HWND hWnd);
}


//
// IAImmFnDocFeed
//

cpp_quote("EXTERN_C const CLSID CLSID_CAImmLayer;")

[
   local,
   object,
   uuid(6e098993-9577-499a-a830-52344f3e200d),

   pointer_default(unique)
]
interface IAImmFnDocFeed : IUnknown
{
    HRESULT DocFeed();
    HRESULT ClearDocFeedBuffer();
    HRESULT StartReconvert();

    HRESULT StartUndoCompositionString();
}


//
// IAImmThreadCompartment
//
[
   local,
   object,
   uuid(d251a968-2b44-4da5-a549-c1249ef01711),
   pointer_default(unique)
]
interface IAImmThreadCompartment : IUnknown
{
    HRESULT SetThreadCompartmentValue([in] REFGUID rguid, [in] VARIANT *pvar);
    HRESULT GetThreadCompartmentValue([in] REFGUID rguid, [out] VARIANT *pvar);
}

