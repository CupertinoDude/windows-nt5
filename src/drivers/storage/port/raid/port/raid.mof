


[WMI,
 Dynamic,
 Provider("WmiProv"),
 Locale("MS\\0x409"),
 guid("984562c8-f94d-4945-ba1c-c3169f9c59ec"),
 Description ("An abstraction representing a single instance a RAID an Adapter "
              "attached to the system.")]

class RAID_Adapter {

    //
    // Required members for all WMI classes.
    //
    
    [key, read]
    string InstanceName;

    [read]
    boolean Active;

    //
    // Human readable product information about the card.
    //
    
    [read, WmiDataId(1)]
    string Manufacturer;

    [read, WmiDataId(2)]
    string Product;

    [read, WmiDataId(3)]
    string Revision;

    //
    // List of disk arrays configured for this adapter.
    //

    [read, WmiDataId(4)]
    uint32 DiskArrayCount;

    [read, WmiSizeIs("DiskArrayCount"), WmiDataId(5)]
    RAID_DiskArray DiskArrays[];

    //
    // List of physical disks attached to this adapter.
    //
    
    [read, WmiDataId(6)]
    uint32 PhysicalDiskCount;

    [read, WmiSizeIs("PhysicalDiskCount"), WmiDataId(7)]
    RAID_PhysicalDisk PhysicalDisks[];

    //
    // Methods
    //

    [Implemented,
     WmiMethodId(1),
     Description ("Create an empty disk array.")]
    void
    CreateArray(
        [out] RAID_DiskArray NewArray);


    [Implemented,
     WmiMethodId(2),
     Description ("Delete an existing disk array.")]
    void
    DeleteArray(
        [in] RAID_DiskArray Array);
};



[WMI,
 guid("4a70077a-51af-48c6-a290-0b7203e37ecf")]
class RAID_DiskArray {


    [read, WmiDataId(1)]
    uint64 Size;

    [read, WmiDataId(2)]
    uint32 StripeSize;

    //
    // Note: the write policy is dynamically configurable.
    //
    
    [read, write, WmiDataId(3),
     Values{"Write Back", "Write Through"},
     DefineValues{"RAID_WritePolicy_WriteBack",
                  "RAID_WritePolicy_WriteThrough"},
     ValueMap{"0", "1"}]
    uint32 WritePolicy;


    //
    // Note: the read policy is dynamically configurable.
    //
    
    [read, write, WmiDataId(4),
     Values{"Normal", "Adaptive"},
     DefinedValues{"RAID_ReadPolicy_Normal",
                   "RAID_ReadPolicy_Adaptive"},
     ValueMap{"0", "1"}]
    uint32 ReadPolicy;

    //
    // Note: the cache policy is dynamically configurable.
    //
    
    [read, write, WmiDataId(5),
     Values {"Cache Enabled", "Cache Disabled"},
     DefinedValues {"RAID_CachePolicy_CachedIo",
                    "RAID_CachePolicy_DirectIo"},
     ValueMap {"0", "1"}]
    uint32 CachePolicy;

    [read, write,
     Description ("Should we the array be automatically rebuild on failure."),
     WmiDataid(6)]
    boolean AutoRebuild;

    [read, WmiDataId(7),
    
     Values{"Not configured",
            "Just a bunch of disks (Spanning)",
            "Raid Level 0 (Striping)",
            "Raid Level 1 (Mirroring)",
            "Raid Level 3 (Striping with Dedicated Parity)",
            "Raid Level 5 (Striping with Distributed Parity)",
            "Raid Level 0+1 (Striping with Mirroring)",
            "Raid Level 0+3 (Striping with RAID 3)",
            "Raid Level 0+5 (Striping with RAID 5)"},

     DefineValues{"RAID_Redundancy_NotConfigured",
                  "RAID_Redundancy_JBOD",
                  "RAID_Redundancy_Raid0",
                  "RAID_Redundancy_Raid1",
                  "RAID_Redundancy_Raid3",
                  "RAID_Redundancy_Raid5"
                  "RAID_Redundancy_Raid10",
                  "RAID_Redundancy_Raid30",
                  "RAID_Redundancy_Raid50"},

     ValueMap{"-2", "-1", "0", "1", "3", "5", "10", "30", "50"}]
    
    sint32 Redundancy;


    //
    // List of physical disks that form this logical disk.
    //
    
    [read, WmiDataId(8)]
    uint32 PhysicalDiskCount;
    
    [read, WmiSizeIs("PhysicalDiskCount"), WmiDataId(9)]
    RAID_PhysicalDisk PhysicalDisks[];

    //
    // Methods for configuring the array.
    //

    [implemented, WmiMethodId(1),
     Description ("Configure the array.")]
     void
     Configure(
        [in] sint32 Redundancy,
        [in] uint64 Size,
        [in] uint32 StripeWidth
        );

    [Implemented, WmiMethodId(2)]
    void
    DeleteConfiguration(
        );
        
    [Implemented, WmiMethodId(3),
     Description ("Assign a physical disk to an array. If the array "
                  "has already been configured, extend the array to "
                  "include the disk (if possible). Otherwise, add the "
                  "disk as a data member.")]
    void
    AddDataDisk(
        [in] RAID_PhysicalDisk PhysicalDisk
        );

    [Implemented, WmiMethodId(4)]
    void
    RemoveDataDisk(
        [in] RAID_PhysicalDisk PhysicalDisk
        );

    [Implemented, WmiMethodId(5)]
    void
    AddSpareDisk(
        [in] RAID_PhysicalDisk PhysicalDisk
        );

    [Implemented, WmiMethodId(6)]
    void
    RemoveSpareDisk(
        [in] RAID_PhysicalDisk PhysicalDisk
        );
};



[WMI,
 guid("fcc31373-a7d0-4ffb-be65-9e82ff2169e6"),
 Description ("An abstraction representing a physical disk attached to a RAID "
              "adapter card. Physical disks are grouped together to form "
              "disk arrays.")]
class RAID_PhysicalDisk {

    //
    // Size in bytes of the disk.
    //
    
    [read, WmiDataId(1)]
    uint64 Size;

    //
    // Human readable product information about the card.
    //
    
    [read, WmiDataId(2)]
    string Manufacturer;

    [read, WmiDataId(3)]
    string Product;

    [read, WmiDataId(4)]
    string Revision;

    //
    // IO channel this disk is on.
    //

    [read, WmiDataId(5)]
    RAID_IoChannel IoChannel;


    [read, WmiDataid(6),

     Values {"Online"
             "Dead",
             "Busy"},

     DefineValues {"RAID_DiskStatus_Online",
                    "RAID_DiskStatus_Dead",
             "RAID_DiskStatus_Busy"},

     ValueMap {"0", "1", "2"}]
    uint32 Status;

    //
    // Methods
    //

    [Implemented, WmiMethodId(1),
     Description ("Perform a low-level format of the drive, erasing"
                  "all data.")]
    void
    Format();
};

[WMI,
 guid("92e6fa29-013e-446f-b9a1-cfb03d59212a"),
 Description ("An abstraction representing an IO channel on a RAID card. "
              "Each disk is connected to the adapter by exactly one "
              "IO channel. Disk arrays my span multiple IO channels")]
class RAID_IoChannel {

    [read, WmiDataId(1)]
    string Description;

    [read, WmiDataId(2)]
    uint32 Speed;

    [read, WmiDataId(3)]
    uint32 Width;

    [read, WmiDataId(4),
    
     Values {"Online", "Dead"},
             
     DefineValues {"RAID_ChannelStatus_Online",
                "RAID_ChannelStatus_Dead"},

     ValueMap {"0", "1"}]
    uint32 Status;
};

