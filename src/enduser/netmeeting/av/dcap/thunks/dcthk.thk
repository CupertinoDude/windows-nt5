//  DCTHK.THK
//
//  Created 31-Jul-96 [JonT]  

enablemapdirect3216 = true;

#include "..\inc\types.def"

typedef struct _VIDEO_OPEN_PARMS
{
    DWORD dwSize;       // sizeof (VIDEO_OPEN_PARMS)
    DWORD fccType;      // 'vcap'
    DWORD fccComp;      // unused
    DWORD dwVersion;    // version of msvideo opening you
    DWORD dwFlags;      // channel type
    DWORD dwError;      // if open fails, this is why
    DWORD pV1Reserved;  // Reserved (not pointer translated for now)
    DWORD pV2Reserved;  // Reserved (")
    DWORD dnDevNode;    // Devnode for PnP devices
} VIDEO_OPEN_PARMS;

typedef struct _PALETTENTRY
{
    BYTE byRed;
    BYTE byGreen;
    BYTE byBlue;
    BYTE byFlags; 
} PALETTEENTRY;

typedef struct _CAPTUREPALETTE
{
    WORD wVersion;
    WORD wcEntries;
    PALETTEENTRY pe[256]; 
} CAPTUREPALETTE;

typedef HANDLE HVIDEO;

typedef struct tagBITMAPINFOHEADER
{
   DWORD  biSize;
   LONG   biWidth;
   LONG   biHeight;
   WORD   biPlanes; 
   WORD   biBitCount;
   DWORD  biCompression;
   DWORD  biSizeImage;
   LONG   biXPelsPerMeter;
   LONG   biYPelsPerMeter;
   DWORD  biClrUsed;
   DWORD  biClrImportant;
} BITMAPINFOHEADER, *LPBITMAPINFOHEADER;

HANDLE
_OpenDriver(
    LPSTR lpDriverName,
    DWORD dwReserved,
    VIDEO_OPEN_PARMS* lpvop
    )
{
	lpDriverName = input;
	lpvop = inout;
}

DWORD
_CloseDriver(
    HANDLE h,
    DWORD lpReserved1,
    DWORD lpReserved2
    )
{
}

DWORD 
_SendDriverMessage(
	HANDLE h,
	DWORD msg,
	DWORD param1,
	DWORD param2
	)
{
}

BOOL
_GetVideoPalette(
    HVIDEO hvideo,
    CAPTUREPALETTE* lpcp,
    DWORD dwcbSize
    )
{
    lpcp = inout;
}

BOOL
_InitializeExternalVideoStream(
    HVIDEO hvideo
    )
{
}

BOOL
_InitializeVideoStream(
    HVIDEO hvideo,
    DWORD dwMicroSecPerFrame,
    DWORD dwEvent
    )
{
}

BOOL
_UninitializeVideoStream(
    HVIDEO hvideo
    )
{
}

DWORD
_GetVideoFormatSize(
    HANDLE hvideo
    )
{
}

BOOL
_GetVideoFormat(
    HANDLE hvideo,
    LPBITMAPINFOHEADER lpbmih
    )
{
    lpbmih = output;
}


BOOL
_SetVideoFormat(
    HANDLE hvideoExtIn,
    HANDLE hvideoIn,
    LPBITMAPINFOHEADER lpbmih
    )
{
    lpbmih = input;
}

WORD
_AllocateLockableBuffer(
    DWORD dwSize
    )
{
}


BOOL
_LockBuffer(
    WORD wBuffer
    )
{
}


void
_UnlockBuffer(
    WORD wBuffer
    )
{
}


void
_FreeLockableBuffer(
    WORD wBuffer
    )
{
}

void
_CloseVxDHandle(
    DWORD pev
    )
{
}

