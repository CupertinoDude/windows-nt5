!ifndef ROOT
ROOT=$(MAKEDIR:\ui\msconf=)
!endif
!ifndef DEVROOT
DEVROOT=$(ROOT)\dev
!endif


!include $(DEVROOT)\common.inc

MAJORCOMP=ui
MINORCOMP=msconf

TARGETNAME=msconf
TARGETPATH=$(_OBJ_DIR)
TARGETTYPE=DYNLINK

C_DEFINES = $(C_DEFINES) -D_USRDLL
DLLDEF=msconf.def

!if "$(FREEBUILD)" == "0"

##################################################################
# DEBUG BUILD STUFF
##################################################################

# The following line ( if uncommented ) will allow you to use VC's
# Edit and continue feature.. it is really cool!

#ENABLE_VC_EDIT_AND_CONTINUE=1


DLLENTRY=_DllMainCRTStartup


!else

##################################################################
# RETAIL BUILD STUFF
##################################################################

# Don't use any C runtime on retail builds

!if $(WIN64)
DLLENTRY=_DllMainCRTStartup
USE_MSVCRT=1
!else

# If _ATL_MIN_CRT is present, ATL does not depend on C-RunTime library
# the few C-RunTime fns that ATL uses, it writes it's own versions
C_DEFINES = $(C_DEFINES) -D_ATL_MIN_CRT

DLLENTRY=DllMain

!UNDEF USE_MSVCRT
!UNDEF USE_LIBCMT
USE_NOLIBS=1

##################################################################
# The following is here because we yanked the USE_SYSDLL statement
# the reason that the USE_SYSDLL statement was yanked is because
# it was #defining _DLL symbol.  ATL uses <malloc.h> to declare
# several functions that it implements if _ATL_MIN_CRT is defined.
# However, if _DLL is defined, the functions decls in <malloc.h>
# have the _declspec(dllimport) directive, which was causing an
# error, because ATL is implementing them directly...
##################################################################
!if defined(CHICAGO_PRODUCT)
TARGETLIB=$(WIN32DLL_LIBS) $(SDK_LIB_PATH)\kernel32.lib
!else
TARGETLIB=$(WIN32DLL_LIBS) $(SDK_LIB_PATH)\ntdll.lib
!endif
##################################################################

!ENDIF

!endif


BBTCOMP=1

386_STDCALL=1

LINKLIBS=\
           $(ROOT)\nmutil\nmutila\$(O)\nmutila.lib

TARGETLIBS= \
           $(SDK_LIB_PATH)\chkstk.obj      \
           $(SDK_LIB_PATH)\kernel32.lib    \
           $(SDK_LIB_PATH)\advapi32.lib    \
           $(SDK_LIB_PATH)\user32.lib      \
           $(SDK_LIB_PATH)\gdi32.lib       \
           $(SDK_LIB_PATH)\comdlg32.lib    \
           $(SDK_LIB_PATH)\ole32.lib       \
           $(SDK_LIB_PATH)\oleaut32.lib    \
           $(SDK_LIB_PATH)\uuid.lib        \
           $(SDK_LIB_PATH)\shell32.lib

IDL_TYPE=ole
PASS0_HEADERDIR = $(ROOT)\ui\msconf\$(O)
PASS0_SOURCEDIR = $(ROOT)\ui\msconf\$(O)
MIDL_TLBDIR     = $(ROOT)\ui\msconf\$(O)
MIDL_UUIDDIR    = $(ROOT)\ui\msconf\$(O)

#
# List of sources
#

SOURCES= \
        sdkInternal.idl \
        sdkInternal_i.c \
        imsconf3.idl \
        imsconf3_i.c \
        NetMeeting.idl\
        NetMeeting_i.c\
        Mslablti.idl\
        Mslablti_i.c\
        clcnflnk.cpp \
        cldataob.cpp \
        clenumft.cpp \
        clpersis.cpp \
        clprpsht.cpp \
        clrefcnt.cpp \
        dlginfo.cpp  \
        launstub.cpp\
        marshalableti.cpp\
        mrulist2.cpp  \
        NmSysInfo.cpp\
        siDebug.cpp  \
        siLoad.cpp   \
        siMain.cpp   \
        si.rc        \
        watcher.cpp


!if $(ALPHA)
!if "$(FREEBUILD)" == "0"

# QIThunk.lib is for ATL debugging on Alpha
TARGETLIBS= $(TARGETLIBS) $(SDK_LIB_PATH)\qithunk.lib   

!else

# we have to link with chkstk for _alloca
# On i386 targets this works fine... However, the
# Alpha needs OtsDivide32 from libc.lib
# DEBGU builds are fine. because they use CRT already

TARGETLIBS= $(TARGETLIBS) $(SDK_LIB_PATH)\libc.lib
!endif
!endif

# Precompiled specs
#

PRECOMPILED_INCLUDE = precomp.h
PRECOMPILED_SOURCEFILE = precomp.cpp
PRECOMPILED_PCH = precomp.pch
PRECOMPILED_OBJ = precomp.obj
PRECOMPILED_CXX = 1

CONDITIONAL_INCLUDES = \
macocidl.h      \
macwin32.h      \
rpcerr.h        \
rpcmac.h        \
winwlm.h        \
macname1.h      \
macname2.h      \
macpub.h        \
macapi.h        

