//===================================================================
// TsCfgWmi.MOF
// Copyright (C) 2000 Microsoft Corp.
// Generated by Microsoft WBEM Code Generation Engine
//
// TO DO: If this class is intended to be created in a namespace 
//        other than the default (root\default), you should add 
//        the #pragma namespace command here.  If these classes 
//        are going into your own namespace, consider creating 
//        the namespace here as well.  See CIMWIN32.MOF for an 
//        example of how to create a namespace.  Also, consider
//        combining this mof with the mof the defines the class
//        that this provider provides.
//
//===================================================================

#pragma autorecover
#pragma classflags("forceupdate")

Qualifier Description : ToSubClass Amended;
Qualifier Values : ToSubClass Amended;


#pragma namespace ("\\\\.\\Root\\cimv2")

#pragma deleteclass("Win32_TerminalServiceSettingsConfig", NOFAIL)
#pragma deleteclass("Win32_TSSessionDirectoryConfig", NOFAIL)
#pragma deleteclass("Win32_TerminalService", NOFAIL)
#pragma deleteclass("Win32_TerminalServiceStatistics", NOFAIL)
#pragma deleteclass("Win32_Terminal", NOFAIL)
#pragma deleteclass("Win32_TSGeneralSettingsConfig", NOFAIL)
#pragma deleteclass("Win32_TSLogonSettingsConfig", NOFAIL)
#pragma deleteclass("Win32_TSSessionSettingsConfig", NOFAIL)
#pragma deleteclass("Win32_TSEnvironmentSettingsConfig", NOFAIL)
#pragma deleteclass("Win32_TSRemoteControlSettingsConfig", NOFAIL)
#pragma deleteclass("Win32_TSClientSettingsConfig", NOFAIL)
#pragma deleteclass("Win32_TSNetworkAdapterSettingsConfig", NOFAIL)
#pragma deleteclass("Win32_TSNetworkAdapterListSettings", NOFAIL)
#pragma deleteclass("Win32_TSNetworkAdapterListSetting", NOFAIL)
#pragma deleteclass("Win32_TSAccount", NOFAIL)
#pragma deleteclass("Win32_TerminalServiceSettings", NOFAIL)
#pragma deleteclass("Win32_TSSessionDirectory", NOFAIL)
#pragma deleteclass("Win32_TSSessionDirectorySetting", NOFAIL)
#pragma deleteclass("Win32_TerminalServiceSetting", NOFAIL)
#pragma deleteclass("Win32_TerminalServiceStatistics", NOFAIL)
#pragma deleteclass("Win32_TerminalSettings", NOFAIL)
#pragma deleteclass("Win32_TSGeneralSettings", NOFAIL)
#pragma deleteclass("Win32_TSLogonSettings", NOFAIL)
#pragma deleteclass("Win32_TSSessionSettings", NOFAIL)
#pragma deleteclass("Win32_TSEnvironmentSettings", NOFAIL)
#pragma deleteclass("Win32_TSPermissionsSettings", NOFAIL)
#pragma deleteclass("Win32_TSPermissionsSetting", NOFAIL)
#pragma deleteclass("Win32_TSClientSettings", NOFAIL)
#pragma deleteclass("Win32_TSNetworkAdapterSettings", NOFAIL)
#pragma deleteclass("Win32_TSNetworkAdapterSetting", NOFAIL)
#pragma deleteclass("Win32_TSPermissionsSettingsConfig", NOFAIL)
#pragma deleteclass("Win32_TSRemoteControlSettings", NOFAIL)

//*************************************************************
//***   Registers Framework Provider                        ***
//*************************************************************





instance of __Win32Provider as $P
{
    Name = "Win32_WIN32_TERMINALSERVICESETTING_Prov";
    ClsId = "{6BD6AECA-AFB0-45b7-BAC4-F292EC0F3F41}";
    HostingModel = "NetworkServiceHost";
};

instance of __InstanceProviderRegistration
{
    Provider = $P;
    SupportsGet = TRUE;
    SupportsPut = TRUE;
    SupportsDelete = TRUE;
    SupportsEnumeration = TRUE;
    QuerySupportLevels = {"WQL:UnarySelect"};
};

instance of __MethodProviderRegistration
{
   Provider = $P;
};


      [dynamic, provider("Win32_WIN32_TERMINALSERVICESETTING_Prov"), ClassContext("local|hkey_local_machine\\SYSTEM\\CurrentControlSet\\Control\\"
                "TerminalServer")]
class Win32_TerminalServiceSetting : CIM_Setting
{      

      [key, read,
       Description ( "Name of the Terminal Server whose properties are of interest.")       
      ]
    string ServerName;
      
      [read,
       Description ( "Qualifier for Mode of Terminal Service"),
       Values { "RemoteAdmin", "AppServer"}
      ]
    uint32 TerminalServerMode;
       
     [read,
       Description ( "Qualifier for Licensing Mode"),
       Values { "Personal Terminal Server", "Remote Administration", "Per Seat", "Internet Connector"}
     
      ]
    uint32 LicensingType;

      [read,
       Description ( "Name of Licensing Mode")
     
      ]
    string LicensingName;

      [read,
       Description ( "A brief description for Licensing Mode")
     
      ]
    string LicensingDescription;

     [read, write, 
         Description("Active Desktop bit."),
         Values {"TRUE", "FALSE"}
      ]
    uint32 ActiveDesktop;

      [read, write, 
         Description("Application Compatibility bit."),
         Values {"FALSE", "TRUE"}
      ]
    uint32 UserPermission; 

      [read, 
         Description("Delete Temporary Folders on Exit bit."),
         Values {"FALSE", "TRUE"}
      ]
    uint32 DeleteTempFolders; 

      [read, 
         Description("Use Temporary Folders Per Session bit."),
         Values {"FALSE", "TRUE"}
      ]
    uint32 UseTempFolders;

      [read, 
         Description("Describes whether new TS connections are allowed."),
         Values {"FALSE", "TRUE"}
      ]
    uint32 AllowTSConnections;
      
      [read,
         Description("Indicates if only one session is allowed per user."),
         Values {"False", "True"}
      ]
    uint32 SingleSession;

	  [read, 
         Description("Describes the profile path for the machine.")
      ]
    string ProfilePath;

	  [read, 
         Description("Describes the Home Directory for the machine.")         
      ]
    string HomeDirectory;

      [read, 
         Description("Enables or disables Help.")
      ]
      uint32 Help;

      [read, write,
         Description("Indicates whether new sessions are allowed."
                     "This setting will not affect existing sessions for Post Windows 2000 builds")
      ]

    string Logons;
	
	[read, 
         Description("Enumerates the list of License servers.")
      ]

    string DirectConnectLicenseServers;


      [Implemented,
        Description("Configures a new License Server in the Enterprise")
      ]
    uint32 AddDirectConnectLicenseServer([In] string LicenseServerName);

	  [Implemented,
        Description("Deletes the License Server from the Enterprise")
      ]
    uint32 DeleteDirectConnectLicenseServer([In] string LicenseServerName);	  


      [Implemented,
        Description("Configures License type based on the Terminal Server Mode: For Remote Admin - Remote Administration" 
                     "Application Server - Per Seat and Concurrent"
                     "Personal Terminal Server - Personal Terminal Server.")
      ]
    uint32 ChangeMode([In] uint32 LicensingType);    
    

      [Implemented,
        Description("Allows or Denies new TS Connections.")
      ]
    uint32 SetAllowTSConnections([In] uint32 AllowTSConnections); 


      [Implemented,
        Description("Enables or disables the SingleSession state.")
      ]
    uint32 SetSingleSession([In] uint32 SingleSession);


	[Implemented,
        Description("Sets the ProfilePath for the machine.")
      ]
    uint32 SetProfilePath([In] string ProfilePath);


      [Implemented,
        Description("Sets the Home Directory for the machine.")
      ]
    uint32 SetHomeDirectory([In] string HomeDirectory);


      [Implemented,
         Description("PropertyName is an enumeration of the properties: "
                     "0 = DeleteTempFolders, 1 = UseTempFolders and 2 = Help"
                     "which are flags that are either set to False or True according "
                     "as whether Value is set to 0 or 1 respectively. The call "
                     "returns 0 for success and an error if the policy was set to Group policy.")
      ]
    uint32 SetPolicyPropertyName([In] string PropertyName, [In] boolean Value) ;

};

class Win32_TerminalServiceSettingError : __ExtendedStatus
{
    [read]
       sint32 TerminalServiceMode;
};




instance of __Win32Provider as $P0
{
    Name = "Win32_WIN32_TERMINALSERVICE_Prov";
    ClsId = "{7970614A-BD82-439e-A828-CC96F8E91428}";
	HostingModel = "NetworkServiceHost";
};

instance of __InstanceProviderRegistration
{
    Provider = $P0;
    SupportsGet = TRUE;
    SupportsPut = TRUE;
    SupportsDelete = TRUE;
    SupportsEnumeration = TRUE;
    QuerySupportLevels = {"WQL:UnarySelect"};
};


instance of __MethodProviderRegistration
{
   Provider = $P0;
};


[dynamic, provider("Win32_WIN32_TERMINALSERVICE_Prov"), ClassContext("local|hkey_local_machine\\SYSTEM\\CurrentControlSet\\Control\\"
                "TerminalServer")]
class Win32_TerminalService : Win32_Service
{

      [read,
          Description("The total number of sessions on this server. "
                      "This includes both connected and disconnected sessions.")         
      ]
    uint32 TotalSessions;

      [read,
          Description("The number of disconnected sessions on this server.  "
                      "These sessions may still be actively consuming server resources, "
                      "however they currently have no network.")         
      ]
    uint32 DisconnectedSessions;

      [read,
          Description("The number of estimated additional sessions this server "
                      "can support based on available system resources.")         
      ]
    uint32 EstimatedSessionCapacity;

      [read,
          Description("The primary system resource constraint effecting the "
                      "number of estimated additional sessions."),
          
          Values {"Error", "Paged Pool", "Non-Paged Pool", "System PTEs", "Available Memory", "CPU"},
          ValueMap {"0", "1", "2", "3", "4", "5"}         
      ]
    string ResourceConstraint;

      [read,
          Description("The number of estimated additional sessions prior to scaling "
                      "by metrics intended to measure responsiveness.")         
      ]
    uint32 RawSessionCapacity;

};


instance of __Win32Provider as $P13
{
    Name = "Win32_WIN32_TERMINALSERVICETOSETTING_Prov";
    ClsId= "{B490264C-8D8F-40fd-B1BE-CD69AD779EC1}";
	HostingModel = "NetworkServiceHost";

};

instance of __InstanceProviderRegistration
{
    Provider = $P13;
    SupportsGet = TRUE;
    SupportsPut = TRUE;
    SupportsDelete = TRUE;
    SupportsEnumeration = TRUE;
    QuerySupportLevels = {"WQL:UnarySelect"};
};

instance of __MethodProviderRegistration
{
   Provider = $P13;
};



[Dynamic: ToInstance, Provider ("Win32_WIN32_TERMINALSERVICETOSETTING_Prov"), ClassContext("local|hkey_local_machine\\SYSTEM\\CurrentControlSet\\Control\\"
                "TerminalServer")]
                

class Win32_TerminalServiceToSetting : CIM_ElementSetting
{
        [Key] Win32_TerminalService ref Element;

        [Key] Win32_TerminalServiceSetting ref Setting;
};


[abstract] 
class Win32_TerminalSetting : CIM_Setting
{ 
    [read,
         Description("Name of the Terminal.")
      ]
    string TerminalName;    
};

instance of __Win32Provider as $P14
{
    Name = "Win32_WIN32_TERMINALTERMINALSETTING_Prov";
    ClsId = "{BA4EAC04-AFCE-441a-A4F0-C4A97545425A}";
	HostingModel = "NetworkServiceHost";
};



instance of __InstanceProviderRegistration
{
    Provider = $P14;
    SupportsGet = TRUE;
    SupportsPut = TRUE;
    SupportsDelete = TRUE;
    SupportsEnumeration = TRUE;
    QuerySupportLevels = {"WQL:UnarySelect"};
};


[dynamic: ToInstance, provider("Win32_WIN32_TERMINALTERMINALSETTING_Prov")]
class Win32_TerminalTerminalSetting : CIM_ElementSetting
{
	[Key] Win32_Terminal ref Element;
	[Key] Win32_TerminalSetting ref Setting;

};


instance of __Win32Provider as $P1
{
    Name = "Win32_WIN32_TERMINAL_Prov";
    ClsId = "{74628299-57EC-4f12-BA1C-08B477BF447A}";
	HostingModel = "NetworkServiceHost";
};

instance of __InstanceProviderRegistration
{
    Provider = $P1;
    SupportsGet = TRUE;
    SupportsPut = TRUE;
    SupportsDelete = TRUE;
    SupportsEnumeration = TRUE;
    QuerySupportLevels = {"WQL:UnarySelect"};
};

instance of __MethodProviderRegistration
{
   Provider = $P1;
};


[dynamic, overwrite, provider("Win32_WIN32_TERMINAL_Prov"), ClassContext("local|hkey_local_machine\\SYSTEM\\CurrentControlSet\\Control\\"
                "TerminalServer\\WinStations")]
class Win32_Terminal : CIM_LogicalElement
{

      [key, read,
         Description("Name of the Terminal.")
      ]
    string TerminalName;

      [read,
         Description("Enables or Disables the Terminal."),
         Values{"FALSE", "TRUE"}
      ]
    uint32 fEnableTerminal;

      [Implemented,
         Description("Enables or Disables the Terminal. The function takes one parameter, the flag that"
                     "enables or disables it. The call returns zero on success and an error on failure.")
      ]
    uint32 Enable([In] uint32 fEnableTerminal) ;

      [Implemented,
         Description("Renames the Winstation. The function takes one parameter, the New Terminal"
                     "name. The call returns zero on success and an error on failure.")
      ]
    uint32 Rename([In] string NewTerminalName) ;

  
};


class Win32_TerminalError : __ExtendedStatus
{
    [read]
       string TerminalName;
};


instance of __Win32Provider as $P2
{
    Name = "Win32_WIN32_TSGENERALSETTING_Prov";
    ClsId = "{4C8A0917-F587-4ecf-9C89-48147528F4E1}";
	HostingModel = "NetworkServiceHost";
};

instance of __InstanceProviderRegistration
{
    Provider = $P2;
    SupportsGet = TRUE;
    SupportsPut = TRUE;
    SupportsDelete = TRUE;
    SupportsEnumeration = TRUE;
    QuerySupportLevels = {"WQL:UnarySelect"};
};

instance of __MethodProviderRegistration
{
   Provider = $P2;
};



      [dynamic, provider("Win32_WIN32_TSGENERALSETTING_Prov"), ClassContext("local|hkey_local_machine\\SYSTEM\\CurrentControlSet\\Control\\"
                "TerminalServer\\WinStations")]
class Win32_TSGeneralSetting : Win32_TerminalSetting
{

      [key, read,
         Description("Name of the Terminal.")
      ]
    string TerminalName;


      [read,
         Description("Name of the Session Layer protocol. Example: Microsoft RDP 5.0.")
      ]
    string TerminalProtocol;


      [read,
         Description("Displays the type of transport used for the connection: Example TCP, NETBIOS, IPX/SPX.")
      ]
    string Transport;


      [read, write,
         Description("Descriptive name for the combination of session layer and transport protocol.")
      ]
    string Comment;


      [read, write,
         Description("Specifies whether the connection defaults to the standard Windows "
                     "Authentication if another Authentication package has been installed on the system."),
         Values {"FALSE", "TRUE"}
      ]
    uint32 WindowsAuthentication;


      [read,
         Description("Windows 2000 supports 3 levels of Encryption are: Low: Only data sent from client to server "
                     "is protected by encryption based on server's standard key strength. Data sent "
                     "from Server to client is not protected. Medium / Client Compatible: All data sent between Server "
                     "and client is protected by encryption based on server's standard key strength. High: "
                     "All data sent between Server and client is protected by encryption based on "
                     "server's maximum key strength. Windows 2001 supports 2 levels of Encryption: Client Compatible and"
                     "High."),
         Values {"Low", "Medium / Client Compatible", "High"}
      ]
    uint32 MinEncryptionLevel;

    [Implemented,
         Description("Sets the Encryption level to one of Low, Medium or High. The function takes one "
                     "parameter that specifies the Encryption Level: 1 = Low, 2 = Medium and 3 = High.")
      ]
    uint32 SetEncryptionLevel([In] uint32 MinEncryptionLevel);

};


class Win32_TSGeneralSettingError : __ExtendedStatus
{
    [read]
       string TerminalName;
};


instance of __Win32Provider as $P3
{
    Name = "Win32_WIN32_TSLOGONSETTING_Prov";
    ClsId = "{C41FF872-07B1-4926-819B-8C94E6B1FBB9}";
	HostingModel = "NetworkServiceHost";
};

instance of __InstanceProviderRegistration
{
    Provider = $P3;
    SupportsGet = TRUE;
    SupportsPut = TRUE;
    SupportsDelete = TRUE;
    SupportsEnumeration = TRUE;
    QuerySupportLevels = {"WQL:UnarySelect"};
};

instance of __MethodProviderRegistration
{
   Provider = $P3;
};



      [dynamic, provider("Win32_WIN32_TSLOGONSETTING_Prov"), ClassContext("local|hkey_local_machine\\SYSTEM\\CurrentControlSet\\Control\\"
                "TerminalServer\\WinStations")]
class Win32_TSLogonSetting : Win32_TerminalSetting
{
      [key, read,
         Description("Name of the Terminal.")
      ]
    string TerminalName;

      [read, write,
         Description("Describes which policy the server uses "
                     "in order to determine the connection settings."),
         Values {"Per User", "Server-Override"}
      ]
    uint32 ClientLogonInfoPolicy;


      [read,
          Description("Specifies whether the user is always prompted "
                      "for Password while logging on to the server."),
         Values {"FALSE", "TRUE"}
      ]
    uint32 PromptForPassword;


      [read,
          Description("Specifies whether the User name are retrieved from the client.")
      ]
    string UserName;


      [read,
          Description("Specifies the Domain name in which the user's computer resides.")  
      ]
    string Domain;
    

      [Implemented,
         Description("Sets the properties UserName,  Password and Domain which specify "
                     "the credentials explicitly to be used for authentication. The call "
                     "returns success in case of Server-Override mode and an error if "
                     "the policy was set to User or Group.")
      ]
    uint32 ExplicitLogon([In] string UserName, [In] string Domain, [In] string Password) ;

    [Implemented,
         Description("Enables or Disables the PromptForPasword flag if it is not under group policy."),
         Values{"FALSE", "TRUE"}
      ]
    uint32 SetPromptForPassword([In] uint32 PromptForPassword);

};

class Win32_TSLogonSettingError : __ExtendedStatus
{
    [read]
       string TerminalName;
};


instance of __Win32Provider as $P4
{
    Name = "Win32_WIN32_TSSESSIONSETTING_Prov";
    ClsId = "{BE9B3133-250B-44a5-A278-C532B7B7FF76}";
	HostingModel = "NetworkServiceHost";
};

instance of __InstanceProviderRegistration
{
    Provider = $P4;
    SupportsGet = TRUE;
    SupportsPut = TRUE;
    SupportsDelete = TRUE;
    SupportsEnumeration = TRUE;
    QuerySupportLevels = {"WQL:UnarySelect"};
};

instance of __MethodProviderRegistration
{
   Provider = $P4;
};



      [dynamic, provider("Win32_WIN32_TSSESSIONSETTING_Prov"), ClassContext("local|hkey_local_machine\\SYSTEM\\CurrentControlSet\\Control\\"
                "TerminalServer\\WinStations")]
class Win32_TSSessionSetting : Win32_TerminalSetting
{

      [key, read,
         Description("Name of the Terminal.")
      ]
    string TerminalName;

      [read, write,
         Description("Describes which policy the server uses in order"
                     "to determine the Active Session limit for user sessions."),
         Values {"Per User", "Server-Override"}
      ]
    uint32 TimeLimitPolicy;


      [read,
          Description("Maximum allowed time for Active session in minutes "
                      "where 0 implies NEVER.")
      ]
    uint32 ActiveSessionLimit;
    

      [read,
          Description("Time after which to end disconnected session "
                      "in minutes where 0 implies NEVER.")
      ]
    uint32 DisconnectedSessionLimit;


      [read,
          Description("Idle session limit in units specified "
                      "in minutes where 0 implies NEVER.")
      ]
    uint32 IdleSessionLimit;


      [read, write,
          Description("Describes which policy the server uses in order to determine when "
                     "a connection is broken either due to network loss or time limits."),
          Values {"Per User", "Server-Override"}
      ]
    uint32 BrokenConnectionPolicy;


      [read,
          Description("If session limit is reached or connection is broken, one of the following "
                      "actions is taken: Disconnect - User is disconnected from the session or "
                      "Terminate - The session is permanently deleted from the server."),
          Values{"Disconnect", "Terminate"}
      ]
    uint32 BrokenConnectionAction;


      [read, write,
          Description("Indicates whether or not a user must use the same client "
                     "in order  to reconnect to a disconnected session."),
          Values {"Any Client", "Previous Client"}
      ]
    uint32 ReconnectionPolicy;


      [Implemented,
         Description("SessionLimitType is an enumeration of the properties: "
                     "0 = ActiveSessionLimit, 1 = DisconnectedSessionLimit and 2 = IdleSessionLimit"
                     "which specify the Maximum allowed time for Active Session, Disconnected Session "
                     "NEVER for all three and Idle session limits and Value specifies the time in minutes "
                     "The call returns 0 for success in case of Server-Override mode and "
                     "an error if the policy was set to Group policy.")
      ]
    uint32 TimeLimit([In] uint32 SessionLimitType, [In] uint32 ValueLimit) ;


      [Implemented,
         Description("Sets the action to be taken if the session limit is reached or connection "
                     "is broken, one of the following action is taken:Disconnect: The user is "
                     "disconnected from the sessionTerminate:  The session is permanently deleted "
                     "from the server the property BrokenConnectionAction that it is applicable "
                     "only to Server-override mode and returns success in case of Server-Override" 
                     "mode and an error if the policy was set to User or Group.")               
      ]
    uint32 BrokenConnection([In] uint32 BrokenConnectionAction);

};
      
class Win32_TSSessionSettingError : __ExtendedStatus
{
    [read]
       string TerminalName;
};


instance of __Win32Provider as $P5
{
    Name = "Win32_WIN32_TSENVIRONMENTSETTING_Prov";
    ClsId = "{9A17DFD1-34FA-4d61-B9BB-3A1097E7FADF}";
	HostingModel = "NetworkServiceHost";
};

instance of __InstanceProviderRegistration
{
    Provider = $P5;
    SupportsGet = TRUE;
    SupportsPut = TRUE;
    SupportsDelete = TRUE;
    SupportsEnumeration = TRUE;
    QuerySupportLevels = {"WQL:UnarySelect"};
};

instance of __MethodProviderRegistration
{
   Provider = $P5;
};



      [dynamic, provider("Win32_WIN32_TSENVIRONMENTSETTING_Prov"), ClassContext("local|hkey_local_machine\\SYSTEM\\CurrentControlSet\\Control\\"
                "TerminalServer\\WinStations")]
class Win32_TSEnvironmentSetting : Win32_TerminalSetting
{

      [key, read,
         Description("Name of the Terminal.")
      ]
    string TerminalName;

      [read, write,
         Description("Describes which policy the server uses in order to determine "
                     "the  initial program path and filename and the startin folder."),
         Values {"Per User", "Server-Override"}
      ]
    uint32 InitialProgramPolicy;


      [read,
          Description("Specifies the name and the path of the program the user "
                      "wants to start on logon to the Terminal Server.")
      ]
    string InitialProgramPath;
    

      [read,
          Description("Specifies the working directory path for the program the "
                      "user wants to start on logon to the Terminal Server.")
      ]
    string Startin;

      [read, write,
         Description("Specifies whether the display of Windows Client Wallpaper "
                     "is disabled. This option can save system resources by "
                     "decreasing the time required to repaint the screen."),
         Values {"False", "True"}
      ]
    uint32 ClientWallPaper;


      [Implemented,
         Description("Sets the properties InitialProgramPath and StartIn which "
                     "specify the name and path of the program and the working "
                     "directory path for the program the user wants to start on "
                     "logon to the Terminal Server. It returns an integer value "
                     "of 0 if call was a success in case of Server-Override mode "
                     "and an error if the policy was set to Group control policy.")               
      ]
    uint32 InitialProgram([In] string InitialProgramPath, [In] string Startin);

};

class Win32_TSEnvironmentSettingError : __ExtendedStatus
{
    [read]
       string TerminalName;
};


instance of __Win32Provider as $P6
{
    Name = "Win32_WIN32_TSREMOTECONTROLSETTING_Prov";
    ClsId = "{DBD71B6B-F717-4a61-A914-2337BC50B0D6}";
	HostingModel = "NetworkServiceHost";
};

instance of __InstanceProviderRegistration
{
    Provider = $P6;
    SupportsGet = TRUE;
    SupportsPut = TRUE;
    SupportsDelete = TRUE;
    SupportsEnumeration = TRUE;
    QuerySupportLevels = {"WQL:UnarySelect"};
};

instance of __MethodProviderRegistration
{
   Provider = $P6;
};



      [dynamic, provider("Win32_WIN32_TSREMOTECONTROLSETTING_Prov"), ClassContext("local|hkey_local_machine\\SYSTEM\\CurrentControlSet\\Control\\"
                "TerminalServer\\WinStations")]
class Win32_TSRemoteControlSetting : Win32_TerminalSetting
{

      [key, read,
         Description("Name of the Terminal.")
      ]
    string TerminalName;

      [read, write,
         Description("Describes which policy the server uses in  "
                     "order to retrieve the remote control settings."),
         Values {"Per User", "Server-Override"}
      ]
    uint32 RemoteControlPolicy;

      [read,
         Description("Specifies whether the User's permission is "
                     "required to remotely control the session."),
         Values {"Disable", "EnableInputNotify", "EnableInputNoNotify", "EnableNoInputNotify", "EnableNoInputNoNotify"}
      ]
    uint32 LevelOfControl;



      [Implemented,
         Description("Sets the property LevelOfControl which specifies the level of control which is "
                     "one of Disable, EnableInputNotify, EnableInputNoNotify, EnableNoInputNotify,  "
                     "EnableNoInputNoNotify. The call returns an integer value of 0 for success in"
                     " Server-Override mode and an error if the setting is under group policy control.")               
      ]
    uint32 RemoteControl([In] uint32 LevelOfControl); 


};

class Win32_TSRemoteControlSettingError : __ExtendedStatus
{
    [read]
       string TerminalName;
};


instance of __Win32Provider as $P7
{
    Name = "Win32_WIN32_TSCLIENTSETTING_Prov";
    ClsId = "{647BD8C2-658B-4eca-ABC7-FC5C0BF1704D}";
	HostingModel = "NetworkServiceHost";
};

instance of __InstanceProviderRegistration
{
    Provider = $P7;
    SupportsGet = TRUE;
    SupportsPut = TRUE;
    SupportsDelete = TRUE;
    SupportsEnumeration = TRUE;
    QuerySupportLevels = {"WQL:UnarySelect"};
};

instance of __MethodProviderRegistration
{
   Provider = $P7;
};



      [dynamic, provider("Win32_WIN32_TSCLIENTSETTING_Prov"), ClassContext("local|hkey_local_machine\\SYSTEM\\CurrentControlSet\\Control\\"
                "TerminalServer\\WinStations")]
class Win32_TSClientSetting : Win32_TerminalSetting
{

      [key, read,
         Description("Name of the Terminal.")
      ]
    string TerminalName;

      [read, write,
         Description("Describes which policy the server uses in order "
                     "to retrieve the connection settings."),
         Values {"Per User", "Server-Override"}
      ]
    uint32 ConnectionPolicy;

      [read,
         Description("Specifies whether to automatically "
                     "connect to the client's drives at logon."),
         Values {"FALSE", "TRUE"}
      ]
    uint32 ConnectClientDrivesAtLogon;

      [read,
         Description("Specifies whether to automatically "
                     "connect to all mapped local client printers at logon."),
         Values {"FALSE", "TRUE"}
      ]
    uint32 ConnectPrinterAtLogon;

      [read,
         Description("Specifies whether to automatically "
                     "print to the client's local printer."),
         Values {"FALSE", "TRUE"}
      ]
    uint32 DefaultToClientPrinter;

      [read,
         Description("Specifies whether to enable or disable "
                     "client window's printer mapping."),
         Values {"FALSE", "TRUE"}
      ]
    uint32 WindowsPrinterMapping;

      [read,
         Description("Specifies whether to enable or disable "
                     "LPT Port mapping."),
         Values {"FALSE", "TRUE"}
      ]
    uint32 LPTPortMapping;

      [read,
         Description("Specifies whether to enable or disable "
                     "COM Port mapping."),
         Values {"FALSE", "TRUE"}
      ]
    uint32 COMPortMapping;

      [read,
         Description("Specifies whether to enable or disable "
                     "drive mapping."),
         Values {"FALSE", "TRUE"}
      ]
    uint32 DriveMapping;

      [read,
         Description("Specifies whether to enable or disable "
                     "Audio mapping."),
         Values {"FALSE", "TRUE"}
      ]
    uint32 AudioMapping;

      [read,
         Description("Specifies whether to enable or disable "
                     "Clipboard mapping."),
         Values {"FALSE", "TRUE"}
      ]
    uint32 ClipboardMapping;

      [read,
         Description("Specifies whether to override the "
                     "User's maximum color setting."),
         Values {"FALSE", "TRUE"}
      ]
    uint32 ColorDepthPolicy;

      [read,
         Description("Sets the ColorDepth."),
         Values {"8 bits", "15 bits", "16 bits", "24 bits"}
      ]
    uint32 ColorDepth;

      [Implemented,
        Description("Enables or disables overriding user's maximum color settings.")
      ]
    uint32 SetColorDepthPolicy([In] uint32 ColorDepthPolicy);


      [Implemented,
        Description("Set's the ColorDepth property to one of the following possible values "
                    "0 = 256 bits, 1 = 15 bytes, 2 = 16 bytes and 3 = 24 bytes."
                    "It returns an integer value of 0 if call was a success in case of "
                    "Server-Override mode and an error if the setting is under group policy control.")
      ]
    uint32 SetColorDepth([In] uint32 ColorDepth);

      [Implemented,
         Description("Sets the properties ConnectClientDrivesAtLogon, ConnectPrinterAtLogon "
                     "and DefaultToClientPrinter. It returns an integer value of 0 if call was "
                     "a success in case of Server-Override mode and an error if the setting is"
                     "under group policy control.")               
      ]
    uint32 ConnectionSettings([In] uint32 ConnectClientDrivesAtLogon, [In] uint32 ConnectPrinterAtLogon, [In] uint32 DefaultToClientPrinter); 

    [Implemented,
         Description("PropertyName is an enumeration of the properties: "
                     "0 = LPTPortMapping, 1 = COMPortMapping, 2 = AudioMapping, 3 = ClipboardMapping and "
                     "4 = WindowsPrinterMapping. Each of them is a flag that is either False or True ."
                     "according as Value is set to 0 or 1 respectively. The call returns 0 for "
                     "success if the PropertyName is not under Group Policy and an error otherwise.")

      ]
    uint32 SetClientProperty([In] string PropertyName, [In] boolean Value) ;


};

class Win32_TSClientSettingError : __ExtendedStatus
{
    [read]
       string TerminalName;
};


instance of __Win32Provider as $P8
{
    Name = "Win32_WIN32_TSNETWORKADAPTERSETTING_Prov";
    ClsId = "{D25E0260-AAB7-48cb-A192-4D73D2FD375F}";
	HostingModel = "NetworkServiceHost";
};

instance of __InstanceProviderRegistration
{
    Provider = $P8;
    SupportsGet = TRUE;
    SupportsPut = TRUE;
    SupportsDelete = TRUE;
    SupportsEnumeration = TRUE;
    QuerySupportLevels = {"WQL:UnarySelect"};
};

instance of __MethodProviderRegistration
{
   Provider = $P8;
};



      [dynamic, provider("Win32_WIN32_TSNETWORKADAPTERSETTING_Prov"), ClassContext("local|hkey_local_machine\\SYSTEM\\CurrentControlSet\\Control\\"
                "TerminalServer\\WinStations")]
class Win32_TSNetworkAdapterSetting : Win32_TerminalSetting
{

      [key, read,
         Description("Name of the Terminal.")
      ]
    string TerminalName;

      [read,
         Description("This is the DeviceID value found in Win32_NetworkAdapter of the"
         "LAN Adapter to be set. The value 0 implies All LAN Adapters.")
      ]
    string NetworkAdapterID;

      [read,
         Description("This is the value for Description found in Win32_NetworkAdapterConfiguration of the"
         "LAN Adapter to be set. The value 0 implies All LAN Adapters.")
      ]
    string NetworkAdapterName;

      [read, write,
         Description("Maximum number of connections where MAXINT implies unlimited.")
      ]
    uint32 MaximumConnections;

      [Implemented,
         Description("Specify the GUID of the NetworkAdapterID to set. If the ID is invalid or does "
                     "not exist, the return value should indicate appropriately.")               
      ]
    uint32 SelectAllNetworkAdapters();

      [Implemented,
         Description("Specify the GUID of the NetworkAdapterID to set. If the ID is invalid or does "
                     "not exist, the return value should indicate appropriately.")               
      ]
    uint32 SelectNetworkAdapterID([In] string NetworkAdapterID);

};

class Win32_TSNetworkAdapterSettingError : __ExtendedStatus
{
    [read]
       string TerminalName;
};


instance of __Win32Provider as $P9
{
    Name = "Win32_WIN32_TSPERMISSIONSSETTING_Prov";
    ClsId = "{FA06375D-F0A4-4a47-AD8D-148595F1E0B8}";
	HostingModel = "NetworkServiceHost";
};

instance of __InstanceProviderRegistration
{
    Provider = $P9;
    SupportsGet = TRUE;
    SupportsPut = TRUE;
    SupportsDelete = TRUE;
    SupportsEnumeration = TRUE;
    QuerySupportLevels = {"WQL:UnarySelect"};
};

instance of __MethodProviderRegistration
{
   Provider = $P9;
};



      [dynamic, provider("Win32_WIN32_TSPERMISSIONSSETTING_Prov"), ClassContext("local|hkey_local_machine\\SYSTEM\\CurrentControlSet\\Control\\"
                "TerminalServer\\WinStations")]
class Win32_TSPermissionsSetting : Win32_TerminalSetting
{

      [key, read,
         Description("Name of the Terminal.")
      ]
    string TerminalName;
  
     [Implemented,
         Description("Adds the User, Group or Computer to the existing set with the set of "
                     "permissions defined. The AccountName comprises of both: Domain and Name "
                     "of the entry and PermissionPreSet is enumeration of following Permissions"
                     "WINSTATION_GUEST_ACCESS, WINSTATION_USER_ACCESS, WINSTATION_ALL_ACCESS")
      ]
    uint32 AddAccount([In] string AccountName, [In] uint32 PermissionPreSet);

      [Implemented,
         Description("Provides the default set of permissions to Users and groups.")               
      ]
    uint32 RestoreDefaults();

};

class Win32_TSPermissionsSettingError : __ExtendedStatus
{
    [read]
       string TerminalName;
};

instance of __Win32Provider as $P10
{
    Name = "Win32_WIN32_TSNETWORKADAPTERLISTSETTING_Prov";
    ClsId = "{7757BA9B-7986-4866-B53F-A31E89FCBA15}";
	HostingModel = "NetworkServiceHost";
};

instance of __InstanceProviderRegistration
{
    Provider = $P10;
    SupportsGet = TRUE;
    SupportsPut = TRUE;
    SupportsDelete = TRUE;
    SupportsEnumeration = TRUE;
    QuerySupportLevels = {"WQL:UnarySelect"};
};

instance of __MethodProviderRegistration
{
   Provider = $P10;
};



[dynamic, overwrite, provider("Win32_WIN32_TSNETWORKADAPTERLISTSETTING_Prov"), ClassContext("local|hkey_local_machine\\SYSTEM\\CurrentControlSet\\Control\\"
                "TerminalServer\\WinStations")]


class Win32_TSNetworkAdapterListSetting : Win32_TerminalSetting
{    
       [read, key,
         Description("Specifies the GUID of the LanAdapter from Win32_NetworkAdapterConfiguration class.")
       ]
     string TerminalProtocol;

      [read, key,
         Description("Specifies the Display Name of the LanAdapter.")
      ]

     string Transport;

      [read, key,
         Description("Specifies the GUID of the LanAdapter from Win32_TSNetworkAdapterSetting class.")
      ]

     string NetworkAdapterID;     

      [read,
         Description("Specifies the Display Name of the LanAdapter.")
      ]

     string Description;

  
};


instance of __Win32Provider as $P11
{
    Name = "Win32_WIN32_TSACCOUNT_Prov";
    ClsId = "{BDF9E8B8-6C66-4e45-BA15-E050393DD079}";
	HostingModel = "NetworkServiceHost";
};

instance of __InstanceProviderRegistration
{
    Provider = $P11;
    SupportsGet = TRUE;
    SupportsPut = TRUE;
    SupportsDelete = TRUE;
    SupportsEnumeration = TRUE;
    QuerySupportLevels = {"WQL:UnarySelect"};
};

instance of __MethodProviderRegistration
{
   Provider = $P11;
};


[dynamic, overwrite, provider("Win32_WIN32_TSACCOUNT_Prov"), ClassContext("local|hkey_local_machine\\SYSTEM\\CurrentControlSet\\Control\\"
                "TerminalServer\\WinStations")]


class Win32_TSAccount : Win32_TerminalSetting
{

      [key, read,
         Description("Name of the Terminal.")
      ]
    string TerminalName;

      [key, read,
         Description("Specifies the AccountName that comprises of both: Domain and Name of the entry.")
      ]
    string AccountName;

      [read,
         Description("Specifies the Security Identifier of the entry.")
      ]
    string SID;      

      [read,
         Description("Specifies the Permissions that are allowed. The permissions are a combination of one or more of the following:"
                     "WINSTATION_QUERY, WINSTATION_SET, WINSTATION_RESET, WINSTATION_VIRTUAL | STANDARD_RIGHTS_REQUIRED, WINSTATION_SHADOW,"
                      "WINSTATION_LOGON, WINSTATION_LOGOFF, WINSTATION_MSG, WINSTATION_CONNECT,WINSTATION_DISCONNECT."),
                      Values {"WINSTATION_QUERY=0x1", "WINSTATION_SET=0x2","WINSTATION_RESET=0x4" , "WINSTATION_VIRTUAL | STANDARD_RIGHTS_REQUIRED = 0xF008", "WINSTATION_SHADOW=0x10", "WINSTATION_LOGON=0x20", "WINSTATION_LOGOFF=0x40", "WINSTATION_MSG=0x80", "WINSTATION_CONNECT=0x100","WINSTATION_DISCONNECT=0x200"}
      ]
    uint32 PermissionsAllowed;  

      [read,
         Description("Specifies the Permissions that to be allowed. The permissions are a combination of one ore more of the following:"
                     "WINSTATION_QUERY, WINSTATION_SET, WINSTATION_RESET, WINSTATION_VIRTUAL | STANDARD_RIGHTS_REQUIRED, WINSTATION_SHADOW,"
                      "WINSTATION_LOGON, WINSTATION_LOGOFF, WINSTATION_MSG, WINSTATION_CONNECT, WINSTATION_DISCONNECT."),
                      Values {"WINSTATION_QUERY=0x1", "WINSTATION_SET=0x2","WINSTATION_RESET=0x4" , "WINSTATION_VIRTUAL | STANDARD_RIGHTS_REQUIRED = 0xF008", "WINSTATION_SHADOW=0x10", "WINSTATION_LOGON=0x20", "WINSTATION_LOGOFF=0x40", "WINSTATION_MSG=0x80", "WINSTATION_CONNECT=0x100","WINSTATION_DISCONNECT=0x200"}
      ]
    uint32 PermissionsDenied;

      [read,
         Description("Specifies the Audit Permissions for success. The permissions are a combination of one or more of the following:"
                     "WINSTATION_QUERY, WINSTATION_SET, WINSTATION_RESET, WINSTATION_VIRTUAL | STANDARD_RIGHTS_REQUIRED, WINSTATION_SHADOW,"
                      "WINSTATION_LOGON, WINSTATION_LOGOFF, WINSTATION_MSG, WINSTATION_CONNECT, WINSTATION_DISCONNECT."),                      
                      Values {"WINSTATION_QUERY=0x1", "WINSTATION_SET=0x2","WINSTATION_RESET=0x4" , "WINSTATION_VIRTUAL | STANDARD_RIGHTS_REQUIRED = 0xF008", "WINSTATION_SHADOW=0x10", "WINSTATION_LOGON=0x20", "WINSTATION_LOGOFF=0x40", "WINSTATION_MSG=0x80", "WINSTATION_CONNECT=0x100","WINSTATION_DISCONNECT=0x200"}
      ]
    uint32 AuditSuccess;  

      [read,
         Description("Specifies the Audit Permissions for failure. The permissions are a combination of one or more of the following:"
                     "WINSTATION_QUERY, WINSTATION_SET, WINSTATION_RESET, WINSTATION_VIRTUAL | STANDARD_RIGHTS_REQUIRED, WINSTATION_SHADOW,"
                      "WINSTATION_LOGON, WINSTATION_LOGOFF, WINSTATION_MSG, WINSTATION_CONNECT, WINSTATION_DISCONNECT."),
                      Values {"WINSTATION_QUERY=0x1", "WINSTATION_SET=0x2","WINSTATION_RESET=0x4" , "WINSTATION_VIRTUAL | STANDARD_RIGHTS_REQUIRED = 0xF008", "WINSTATION_SHADOW=0x10", "WINSTATION_LOGON=0x20", "WINSTATION_LOGOFF=0x40", "WINSTATION_MSG=0x80", "WINSTATION_CONNECT=0x100","WINSTATION_DISCONNECT=0x200"}
      ]
    uint32 AuditFail;

      [Implemented,
         Description("Deletes the User or Group from the existing.")               
      ]
    uint32 Delete();      

      [Implemented,
         Description("The method enables setting a more granular set of "
                     "permissions to the existing account. The flag, Allow"
                     "specifies if Permissions is to be allowed or denied."
					 "The permissions are set individually through PermissionMask."
					 "The PermissionMask is an enumeration of the following values:"
					 "WINSTATION_QUERY, WINSTATION_SET, WINSTATION_RESET, WINSTATION_VIRTUAL | STANDARD_RIGHTS_REQUIRED, WINSTATION_SHADOW,"
                     "WINSTATION_LOGON, WINSTATION_LOGOFF, WINSTATION_MSG, WINSTATION_CONNECT,WINSTATION_DISCONNECT")
      ]
    uint32 ModifyPermissions( [In] uint32 PermissionMask, [In] boolean Allow);

      [Implemented,
         Description("Provides for setting a more granular set of auditing "
                     "permissions to the existing account specified."
					 "The permissions are set individually through PermissionMask."
					 "The PermissionMask is an enumeration of the following values:"
					 "WINSTATION_QUERY=0, WINSTATION_SET=1, WINSTATION_RESET=2, WINSTATION_VIRTUAL | STANDARD_RIGHTS_REQUIRED=3, WINSTATION_SHADOW=4,"
                     "WINSTATION_LOGON=5, WINSTATION_LOGOFF=6, WINSTATION_MSG=7, WINSTATION_CONNECT=8,WINSTATION_DISCONNECT=9")
      ]
    uint32 ModifyAuditPermissions( [In] uint32 PermissionMask, [In] boolean Success);

};


instance of __Win32Provider as $P12
{
    Name = "Win32_WIN32_TSSESSIONDIRECTORY_Prov";
    ClsId = "{39524FB7-028F-4035-8C2B-8E65D2B17E67}";
	HostingModel = "NetworkServiceHost";
};

instance of __InstanceProviderRegistration
{
    Provider = $P12;
    SupportsGet = TRUE;
    SupportsPut = TRUE;
    SupportsDelete = TRUE;
    SupportsEnumeration = TRUE;
    QuerySupportLevels = {"WQL:UnarySelect"};
};

instance of __MethodProviderRegistration
{
   Provider = $P12;
};



      [dynamic, provider("Win32_WIN32_TSSESSIONDIRECTORY_Prov"), ClassContext("local|hkey_local_machine\\SYSTEM\\CurrentControlSet\\Control\\"
                "TerminalServer")]
class Win32_TSSessionDirectory : CIM_Setting
{
      [read,
       Description ( "Network path location to the Session Directory.")       
      ]
    string SessionDirectoryLocation;

      [key, read, 
         Description("Enables or Disables Session Directory."),
         Values {"FALSE", "TRUE"}
      ]
    uint32 SessionDirectoryActive;

	  [read, 
         Description("Allows or Denies retrieving IP address of the Session Directory."),
         Values {"FALSE", "TRUE"}
      ]
    uint32 SessionDirectoryExposeServerIP;

      [read, 
       Description ( "Cluster to which this Terminal server belongs. Typically, it is "
                     "a DNS entry which represents the Virtual IP address of computers.")       
      ]
    string SessionDirectoryClusterName;

      [Implemented,
         Description("PropertyName is an enumeration of the properties: "
                     "0 = SessionDirectoryLocation, 1 = SessionDirectoryClusterName and 2 = SessionDirectoryAdditionalParams"
                     "which are flags that are either set to False or True according "
                     "as whether Value is set to 0 or 1 respectively. The call "
                     "returns 0 for success and an error if the policy was set to Group policy.")
      ]
    uint32 SetSessionDirectoryProperty([In] string PropertyName, [In] string Value) ;

    [Implemented,
         Description("Enables or disables SessionDirectory according "
                     "as whether Value is set to 0 or 1 respectively. The call "
                     "returns 0 for success and an error if the policy was set to Group policy.")
      ]
    uint32 SetSessionDirectoryActive([In] uint32 SessionDirectoryActive) ;

	[Implemented,
         Description("Allows or Denies retrieving IP address of SessionDirectory according "
                     "as whether Value is set to 1 or 0 respectively. The call "
                     "returns 0 for success and an error if the policy was set to Group policy.")
      ]
    uint32 SetSessionDirectoryExposeServerIP([In] uint32 SessionDirectoryExposeServerIP) ;
    
};


class Win32_TSSessionDirectoryError : __ExtendedStatus
{
    [read]
       string SessionDirectory;
};


instance of __Win32Provider as $P15
{
    Name = "Win32_WIN32_TSSESSIONDIRECTORYSETTING_Prov";
    ClsId = "{CCBA37FC-982B-433b-8AC2-455E616A8559}";
	HostingModel = "NetworkServiceHost";
};

instance of __InstanceProviderRegistration
{
    Provider = $P15;
    SupportsGet = TRUE;
    SupportsPut = TRUE;
    SupportsDelete = TRUE;
    SupportsEnumeration = TRUE;
    QuerySupportLevels = {"WQL:UnarySelect"};
};


instance of __MethodProviderRegistration
{
   Provider = $P15;
};

[Dynamic, Provider ("Win32_WIN32_TSSESSIONDIRECTORYSETTING_Prov"), ClassContext("local|hkey_local_machine\\SYSTEM\\CurrentControlSet\\Control\\"
                "TerminalServer")]
class Win32_TSSessionDirectorySetting : CIM_ElementSetting
{
     [key] Win32_TerminalService ref Element;
     [key] Win32_TSSessionDirectory ref Setting;
};