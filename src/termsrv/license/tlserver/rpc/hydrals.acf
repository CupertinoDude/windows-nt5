//+--------------------------------------------------------------------------
//
// Copyright (c) 1997-1999 Microsoft Corporation
//
// File:        
//
// Contents:    
//
// History:     
//
//---------------------------------------------------------------------------

[implicit_handle(handle_t HydraLicenseService_IfHandle)]
interface HydraLicenseService 
{
    // The [comm_status] and [fault_status] attributes cause the stubs
    // to return any errors in an error_status_t parameter or return
    // value.  Otherwise, any communication errors will get raised as
    // an exception.  This has no performance affect, but it keeps the
    // client code cleaner.
    [comm_status, fault_status] LSConnect();
    [comm_status, fault_status] LSGetInfo();
    [comm_status, fault_status] LSDisconnect();
    [comm_status, fault_status] LSGetServerName();
    [comm_status, fault_status] LSGetServerScope();
    [comm_status, fault_status] LSIssuePlatformChallenge();
    [comm_status, fault_status] LSIssueNewLicense();
    [comm_status, fault_status] LSUpgradeLicense();
    [comm_status, fault_status] LSAllocateConcurrentLicense();
    [comm_status, fault_status] LSGetLastError();
    [comm_status, fault_status] LSKeyPackEnumBegin();
    [comm_status, fault_status] LSKeyPackEnumNext();
    [comm_status, fault_status] LSKeyPackEnumEnd();
    [comm_status, fault_status] LSKeyPackAdd();
    [comm_status, fault_status] LSKeyPackSetStatus();
    [comm_status, fault_status] LSLicenseEnumBegin();
    [comm_status, fault_status] LSLicenseEnumNext();
    [comm_status, fault_status] LSLicenseEnumEnd();
    [comm_status, fault_status] LSLicenseSetStatus();
    [comm_status, fault_status] LSLicenseGetCert();
    [comm_status, fault_status] LSGetAvailableLicenses();
    [comm_status, fault_status] LSGetServerCertificate();
    [comm_status, fault_status] LSRegisterLicenseKeyPack();
    [comm_status, fault_status] LSSendServerCertificate();
    [comm_status, fault_status] LSInstallCertificate();
}

typedef [allocate(all_nodes)] PBYTE;

