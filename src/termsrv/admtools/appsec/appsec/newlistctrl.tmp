//////////////////////////////////////////////////////////////////////
//New
//////////////////////////////////////////////////////////////////////
class CItemData
{
private:
	LPWSTR	m_wszText;
	int		m_sep;
	int		m_iImage;
public:
	CItemData(LPCWSTR wszText);
	~CItemData();
	operator LPWSTR()
	{ 
		m_wszText[m_sep]='\\';
		return m_wszText;
	}
	LPWSTR Name()
	{
		return m_wszText+m_sep+1;
	}
	LPWSTR Path()
	{
		m_wszText[m_sep]=0;
		return m_wszText;
	}
	void SetImage(int ind)
	{
		m_iImage=(ind==-1)?0:ind;
	}
	void GetImage()
	{
		return m_iImage;
	}

};

class CAppListCtrl
{
private:
	HIMAGELIST	m_nImageList;
	HWND		m_hwndList;
	int			m_iItemCount;
public:
	CAppListCtrl(HWND hwndList):
	~CAppListCtrl();

	BOOL InitList();
	BOOL AddItemToList(LPCWSTR pwszText);
	int GetItemText(int iItem,LPWSTR pwszText,int cchTextMax);
	void DeleteSelectedItems();
	int GetSelectedItemCount();
	int GetItemCount();
	int FindItem(LPCWSTR pwszText);

}
//////////////////////////////////////////////////////////////////////
//Old
//////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////
//New
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//Class CItemData
//////////////////////////////////////////////////////////////////////
CItemData::CItemData(LPCWSTR wszText)
	:m_wszText(NULL),m_sep(0)
{

	if(wszText){
		int size=wcslen(wszText);
		m_wszText=new WCHAR[size+1];
		wcscpy(m_wszText,wszText);
		m_sep=size-1;
		while((m_sep)&&(wszText[m_sep]!='\\')){
			m_sep--;
		}
	}
}

CItemData::~CItemData()
{
	if(m_wszText)
		delete[] m_wszText;
}

//////////////////////////////////////////////////////////////////////
//Class CAppListCtrl
//////////////////////////////////////////////////////////////////////

CAppListCtrl::CAppListCtrl(HWND hwndList)
	:m_hwndList(hwndList),m_hImageList(NULL),
	m_iItemCount(0)
{

}

CAppListCtrl::~CAppListCtrl()
{

}

/*++
Routine Description :

	This routine adds Image List and columns "Name" and "Path" to List Control.

Arguments :

	none

Return Value :

	TRUE is successful.
	FALSE otherwise.
--*/
BOOL
CAppListCtrl::InitList()
{
	m_hImageList=ImageList_Create(GetSystemMetrics(SM_CXSMICON),
		GetSystemMetrics(SM_CXSMICON),ILC_MASK,1,1);
	if(!m_hImageList)
		return FALSE;
	HICON hIcon=LoadIcon(hInst,MAKEINTRESOURCE(IDI_APP));
	if(ImageList_AddIcon(m_hImageList,hIcon)==-1){
		return FALSE;
	}
	DeleteObject(hIcon);
	ListView_SetImageList(m_hwndList,m_hImageList,LVSIL_SMALL);


	
	//Create Columns
	LVCOLUMN lvc;
	lvc.mask=LVCF_FMT|LVCF_WIDTH|LVCF_TEXT|LVCF_SUBITEM;
	lvc.fmt=LVCFMT_LEFT;
	lvc.cx=150;
	lvc.iSubItem=0;
	lvc.iImage=0;
	lvc.iOrder=0;
	lvc.cchTextMax=0;
	lvc.pszText=L"Name";
	if(ListView_InsertColumn(m_hwndList,0,&lvc)==-1){
		return FALSE;
	}
	
	RECT Rect;
	GetClientRect(m_hwndList,&Rect);
	lvc.cx=Rect.right-150;
	lvc.iSubItem=1;
	lvc.iOrder=1;
	lvc.pszText=L"Path";
	if(ListView_InsertColumn(m_hwndList,1,&lvc)==-1){
		return FALSE;
	}
	return TRUE;
}


/*++
Routine Description :

	This routine adds Item (file) to List Control.
	
Arguments :

	LPCWSTR pwszText - Text for the Item (full path and file name)
	
Return Value :

	TRUE is successful.
	FALSE otherwise.
--*/
BOOL
CAppListCtrl::AddItemToList(
	LPCWSTR pwszText)
{
	

	CItemData *pid=new CItemData(pwszText);

	//get file icon
	SHFILEINFO shfi;
	ZeroMemory(&shfi,sizeof( SHFILEINFO ));
	SHGetFileInfo( pwszText, 0, &shfi, sizeof( SHFILEINFO ), 
               SHGFI_ICON | SHGFI_SMALLICON  );
	

	//insert item
	LVITEM lvi;
	ZeroMemory(&lvi,sizeof( LVITEM ));
	lvi.mask=LVIF_PARAM; 
    lvi.iItem=m_iItemCount;
    lvi.lParam=(LONG)pid;
 
	
	//set icon for item
	if(shfi.hIcon){
		pid->SetImage(ImageList_AddIcon(m_hImageList,shfi.hIcon));
		DestroyIcon(shfi.hIcon);
	}
	
	if(SendMessage(hwndList,LVM_INSERTITEM,(WPARAM)0,(LPARAM)&lvi)!=-1){
		m_iItemCount++;
		return TRUE;
		
			
	return TRUE;	
}

/*++

Routine Description :

	This routine returns full path for item.
	
Arguments :

	IN HWND hwndList - List Control Handle.
	IN int iItem - Iten ID
	OUT LPWSTR pwszText - buffer (can be NULL)
	IN int cchTextMax - buffer size (in characters)
	
Return Value :

	Number of characters in item text.
	-1 if error.
		
--*/

int
CAppListCtrl::GetItemText(
	HWND hwndList,
	int iItem,
	LPWSTR pwszText,
	int cchTextMax)
{
	//if pwszText=NULL then retreive length of string
	if(iItem>=SendMessage(hwndList,LVM_GETITEMCOUNT,(WPARAM)0,(LPARAM)0))
		return -1;

	WCHAR wszTmp[MAX_PATH+1];

	if(!pwszText){
		pwszText=wszTmp;
		cchTextMax=MAX_PATH;
	}

	LVITEM lvi;
	ZeroMemory(&lvi,sizeof(lvi));
	lvi.mask=LVIF_TEXT;
	lvi.iSubItem=1;
	lvi.pszText=pwszText;
	lvi.cchTextMax=cchTextMax;
	int iLen=SendMessage(hwndList,LVM_GETITEMTEXT,(WPARAM)iItem,(LPARAM)&lvi);
	if((iLen==-1)||(cchTextMax-iLen-1<=0))
		return -1;
	pwszText[iLen]='\\';
	iLen++;
	pwszText+=iLen;
	lvi.iSubItem=0;
	lvi.pszText=pwszText;
	lvi.cchTextMax=cchTextMax-iLen;
	int iTmp=SendMessage(hwndList,LVM_GETITEMTEXT,(WPARAM)iItem,(LPARAM)&lvi);
	if(iTmp==-1){
		return -1;
	}
	iLen+=iTmp;
	return iLen;
}

/*++

Routine Description :

	This routine deletes all selected items in List Control.
	
Arguments :

	IN HWND hwndList - List Control Handle.

	
Return Value :

	none
		
--*/
void
CAppListCtrl::DeleteSelectedItems(
	HWND hwndList)
{
	//get image list
	HIMAGELIST hImageList=(HIMAGELIST)SendMessage(hwndList,LVM_GETIMAGELIST,
					(WPARAM)LVSIL_SMALL,(LPARAM)0);

	int iItems=SendMessage(hwndList,LVM_GETITEMCOUNT,(WPARAM)0,(LPARAM)0);
	UINT uiState=0;
	int i=0;
	LVITEM lvi;
	lvi.iSubItem = 0;
	lvi.mask = LVIF_STATE | LVIF_IMAGE;
	lvi.stateMask = LVIS_SELECTED; 

	while(i<iItems){
		lvi.iItem = i;
		SendMessage( hwndList,LVM_GETITEM, (WPARAM)0,(LPARAM)&lvi );
		if(lvi.state&LVIS_SELECTED){

			//delete item
			SendMessage(hwndList,LVM_DELETEITEM,(WPARAM)i,(LPARAM)0);
			
			iItems--; //Number of items decreased

			//delete icon from list
			//it will change some icon indexes
			if(lvi.iImage){
				if(ImageList_Remove(hImageList,lvi.iImage)){
					//change icon indexes of all items down the list
					lvi.mask=LVIF_IMAGE;
					for(int j=i;j<iItems;j++)//now i points to next item
					{
						
						lvi.iItem=j;
						SendMessage( hwndList,LVM_GETITEM, (WPARAM)0,(LPARAM)&lvi );
						if(lvi.iImage)
							lvi.iImage--;
						SendMessage( hwndList,LVM_SETITEM, (WPARAM)0,(LPARAM)&lvi );
					}
					lvi.mask=LVIF_STATE | LVIF_IMAGE;//restore mask
				}
				
			}
			
		

			

		}else{
			i++;
		}
	}

}

/*++

Routine Description :

	This routine returns number of selected items in List Control.
	
Arguments :

	IN HWND hwndList - List Control Handle.

	
Return Value :

	number of selected items
		
--*/
int
CAppListCtrl::GetSelectedItemCount(
	HWND hwndList)
{
	return SendMessage( hwndList, LVM_GETSELECTEDCOUNT, (WPARAM) 0, (LPARAM) 0 );
}

/*++

Routine Description :

	This routine returns number of items in List Control.
	
Arguments :

	IN HWND hwndList - List Control Handle.

	
Return Value :

	number of items
		
--*/
int
CAppListCtrl::GetItemCount(
	HWND hwndList)
{
	return SendMessage( hwndList, LVM_GETITEMCOUNT, (WPARAM) 0, (LPARAM) 0 );
}

/*++

Routine Description :

	This routine finds item with specific text in List Control.
	
Arguments :

	IN HWND hwndList - List Control Handle.
	IN LPCWSTR pwszText - text of the item
	
Return Value :

	ID of found item
	-1 if item is ont found
		
--*/
//!!!!!!! Wrong algorithm (slow)
int
CAppListCtrl::FindItem(
	HWND hwndList,
	LPCWSTR pwszText)
{
	//Get item count
	int iItems=SendMessage(hwndList,LVM_GETITEMCOUNT,(WPARAM)0,(LPARAM)0);
	//
	WCHAR wszTmp[MAX_PATH+1];

	for(int i=0;i<iItems;i++){
		GetItemText(hwndList,i,wszTmp,MAX_PATH);
		if(!lstrcmpi(pwszText,wszTmp))
			return i;
	}

	return -1;

	/*
	WCHAR wszName[MAX_PATH+1],wszPath[MAX_PATH+1];
	//Separate file name and path
	SeparatePathAndName(pwszText,wszName,wszPath);
	//Find item 
	LVFINDINFO lvf;
	ZeroMemory(&lvf,sizeof(lvf));
	lvf.flags=LVFI_STRING;
	lvf.psz=wszName;
	lvf.vkDirection=VK_DOWN;
	int Start=-1;
	while(Start=SendMessage(hwndList,LVM_FINDITEM,(WPARAM)Start,(LPARAM)&lvf)!=-1){
		LVITEM lvi;
		lvi.mask=LVIF_TEXT;
		lvi.iItem=Start;
		lvi.iSubItem=1;
		lvi.

	*/
}

//////////////////////////////////////////////////////////////////////
//Old
//////////////////////////////////////////////////////////////////////