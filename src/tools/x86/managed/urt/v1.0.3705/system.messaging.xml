<?xml version="1.0"?>
<doc>
  <assembly>
    <name>System.Messaging</name>
  </assembly>
  <members>
    <member name="M:System.Messaging.ResDescriptionAttribute.#ctor(System.String)">
      <summary>
                Constructs a new sys description.
            </summary>
      <param name="description">
                description text.
            </param>
    </member>
    <member name="P:System.Messaging.ResDescriptionAttribute.Description">
      <summary>
                Retrieves the description text.
            </summary>
      <returns>
                description
            </returns>
    </member>
    <member name="T:System.Messaging.AccessControlEntry">
      <summary>
        <para>Specifies access rights for a trustee (user, group, or
      computer) to perform application-specific implementations of common tasks.</para>
      </summary>
    </member>
    <member name="M:System.Messaging.AccessControlEntry.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Messaging.AccessControlEntry" /> class that specifies neither a trustee nor set
   of rights to apply.</para>
      </summary>
    </member>
    <member name="M:System.Messaging.AccessControlEntry.#ctor(System.Messaging.Trustee)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Messaging.AccessControlEntry" /> class that specifies a trustee to grant or
   deny rights to.</para>
      </summary>
      <param name="trustee">A <see cref="T:System.Messaging.Trustee" /> that specifies a user, group, computer, domain, or alias.</param>
    </member>
    <member name="M:System.Messaging.AccessControlEntry.#ctor(System.Messaging.Trustee,System.Messaging.GenericAccessRights,System.Messaging.StandardAccessRights,System.Messaging.AccessControlEntryType)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Messaging.AccessControlEntry" /> class that specifies a trustee, rights to
   assign, and whether to grant or deny these rights.</para>
      </summary>
      <param name="trustee">A <see cref="T:System.Messaging.Trustee" /> that specifies a user, group, computer, domain, or alias.</param>
      <param name=" genericAccessRights">A bitwise combination of the <see cref="T:System.Messaging.GenericAccessRights" /> values.</param>
      <param name=" standardAccessRights">A bitwise combination of the <see cref="T:System.Messaging.StandardAccessRights" /> values.</param>
      <param name=" entryType">One of the <see cref="T:System.Messaging.AccessControlEntryType" /> values, which specifies whether to allow, deny, set, or revoke the specified rights.</param>
    </member>
    <member name="P:System.Messaging.AccessControlEntry.EntryType">
      <summary>
        <para>Gets or sets a value that indicates how the access rights
      apply to the trustee.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.AccessControlEntry.CustomAccessRights">
      <summary>
        <para>Gets or sets custom access rights.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.AccessControlEntry.GenericAccessRights">
      <summary>
        <para> Gets or
      sets a set of common access rights that map to both standard and
      object-specific access rights for reading, writing, and executing.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.AccessControlEntry.StandardAccessRights">
      <summary>
        <para> Gets or sets a set of standard access rights that correspond to
      operations common to most types of securable objects.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.AccessControlEntry.Trustee">
      <summary>
        <para>Gets or sets the user, group, domain, or alias to which
      you are assigning access rights.</para>
      </summary>
    </member>
    <member name="T:System.Messaging.AccessControlEntryType">
      <summary>
        <para>Specifies whether to allow, deny, or revoke access
      rights for a trustee.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.AccessControlEntryType.Allow">
      <summary>
        <para>An access-allowed entry that causes the new 
      rights to be added to any existing rights the trustee has.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.AccessControlEntryType.Set">
      <summary>
        <para>An access-allowed entry that is similar to <see langword="Allow" />, except 
   that the new entry allows only the
   specified rights. Using it discards any existing rights, including all existing
   access-denied entries for the trustee.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.AccessControlEntryType.Deny">
      <summary>
        <para> 
      An access-denied entry that denies
      the specified rights in addition to any currently denied rights of the trustee.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.AccessControlEntryType.Revoke">
      <summary>
        <para>An entry that removes all existing allowed or denied rights for the 
      specified trustee.</para>
      </summary>
    </member>
    <member name="T:System.Messaging.AccessControlList">
      <summary>
        <para>Contains a list of access control entries, specifying
      access rights for one or more trustees.</para>
      </summary>
    </member>
    <member name="M:System.Messaging.AccessControlList.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Messaging.AccessControlList" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Messaging.AccessControlList.Add(System.Messaging.AccessControlEntry)">
      <summary>
        <para>Appends an access control entry to the access control list.</para>
      </summary>
      <param name="entry">An <see cref="T:System.Messaging.AccessControlEntry" /> to append to the end of the access control list.</param>
      <returns>
        <para>The position into which the new access control entry was inserted.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.AccessControlList.Insert(System.Int32,System.Messaging.AccessControlEntry)">
      <summary>
        <para>Inserts an access control entry into the access control
      list at the specified position.</para>
      </summary>
      <param name="index">The zero-based index at which the access control entry should be inserted.</param>
      <param name=" entry">An <see cref="T:System.Messaging.AccessControlEntry" /> to insert into the access control list.</param>
    </member>
    <member name="M:System.Messaging.AccessControlList.IndexOf(System.Messaging.AccessControlEntry)">
      <summary>
        <para>Determines the specific index of an access control entry 
      in the access control list.</para>
      </summary>
      <param name="entry">The <see cref="T:System.Messaging.AccessControlEntry" /> to locate in the access control list.</param>
      <returns>
        <para>The index of the entry if it was found in the list; otherwise, -1</para>
      </returns>
    </member>
    <member name="M:System.Messaging.AccessControlList.Contains(System.Messaging.AccessControlEntry)">
      <summary>
        <para>Determines whether the access control list contains a 
      specific access control entry.</para>
      </summary>
      <param name="entry">The <see cref="T:System.Messaging.AccessControlEntry" /> to locate in the access control list.</param>
      <returns>
        <para>
          <see langword="true" /> if the access control entry is found in the access 
   control list; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.AccessControlList.Remove(System.Messaging.AccessControlEntry)">
      <summary>
        <para>Removes the first occurrence of a specific access control
      entry from the access control list.</para>
      </summary>
      <param name="entry">The <see cref="T:System.Messaging.AccessControlEntry" /> to remove from the access control list.</param>
    </member>
    <member name="M:System.Messaging.AccessControlList.CopyTo(System.Messaging.AccessControlEntry[],System.Int32)">
      <summary>
        <para>Copies the entire access control list to a compatible
      one-dimensional array of access control entries, starting at the specified index
      of the target array.</para>
      </summary>
      <param name="array">An array of type <see cref="T:System.Messaging.AccessControlEntry" /> to which the access control list entries will be copied. The array must have zero-based indexing.</param>
      <param name=" index">The index in the array at which to begin copying the access control list entries.</param>
    </member>
    <member name="T:System.Messaging.Acknowledgment">
      <summary>
        <para> Specifies the result of an attempted message
      delivery.
      </para>
      </summary>
    </member>
    <member name="F:System.Messaging.Acknowledgment.None">
      <summary>
        <para> The message is
 not an acknowledgment message.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.Acknowledgment.AccessDenied">
      <summary>
        <para>A negative arrival acknowledgment indicating that the sending application does not have the necessary rights to send a
 message to the destination queue.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.Acknowledgment.BadDestinationQueue">
      <summary>
        <para>A negative arrival acknowledgment indicating that the destination queue is not available to the sending
      application.</para>
        <para>
        </para>
      </summary>
    </member>
    <member name="F:System.Messaging.Acknowledgment.BadEncryption">
      <summary>
        <para> A negative arrival acknowledgment indicating that the destination queue manager could not decrypt a
 private message.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.Acknowledgment.BadSignature">
      <summary>
        <para> A negative arrival acknowledgment indicating that the original message's digital signature is not valid and could
 not be authenticated by Message Queuing.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.Acknowledgment.CouldNotEncrypt">
      <summary>
        <para>A negative arrival acknowledgment indicating that the source queue manager could not encrypt a private message.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.Acknowledgment.HopCountExceeded">
      <summary>
        <para>A negative arrival acknowledgment indicating that the original message's hop count (which indicates 
 the number of intermediate servers) was exceeded.</para>
        <note type="note">
 The maximum hop count,
 15, is set by Message Queuing and is immutable.
 
 </note>
      </summary>
    </member>
    <member name="F:System.Messaging.Acknowledgment.NotTransactionalQueue">
      <summary>
        <para>A negative arrival acknowledgment indicating that a transactional message was sent to a non-transactional
 queue.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.Acknowledgment.NotTransactionalMessage">
      <summary>
        <para>A negative arrival acknowledgment indicating that a nontransactional message was sent to a transactional
      queue.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.Acknowledgment.Purged">
      <summary>
        <para>A negative arrival acknowledgment indicating that the message was purged before reaching its destination
 queue.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.Acknowledgment.QueueDeleted">
      <summary>
        <para> A negative read acknowledgment indicating that the queue was deleted before the message
 could be read.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.Acknowledgment.QueueExceedMaximumSize">
      <summary>
        <para>A negative arrival acknowledgment indicating that the
 original message was not delivered because its destination queue is full.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.Acknowledgment.QueuePurged">
      <summary>
        <para>A negative read acknowledgment indicating that the queue was purged before the message could be read.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.Acknowledgment.ReachQueue">
      <summary>
        <para>A positive arrival acknowledgment indicating that the original message reached its destination queue.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.Acknowledgment.ReachQueueTimeout">
      <summary>
        <para>A negative arrival acknowledgment indicating that the time-to-reach-queue or time-to-be-received timer
 expired before the original message could reach the destination queue.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.Acknowledgment.ReceiveTimeout">
      <summary>
        <para>A negative read acknowledgment indicating that the original message was not received from the queue before
 its time-to-be-received timer expired.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.Acknowledgment.Receive">
      <summary>
        <para>A positive read acknowledgment indicating that the original message was received by the receiving
      application.</para>
      </summary>
    </member>
    <member name="T:System.Messaging.AcknowledgeTypes">
      <summary>
        <para> Specifies the types of acknowledgment message Message Queuing returns to the sending application.
      </para>
      </summary>
    </member>
    <member name="F:System.Messaging.AcknowledgeTypes.PositiveArrival">
      <summary>
        <para> A mask used to request a positive acknowledgment when the original message
      reaches the queue.
      </para>
        <para>
        </para>
      </summary>
    </member>
    <member name="F:System.Messaging.AcknowledgeTypes.PositiveReceive">
      <summary>
        <para> A mask used to request a positive acknowledgment when the original message
 is successfully retrieved from the queue.
 </para>
      </summary>
    </member>
    <member name="F:System.Messaging.AcknowledgeTypes.NegativeReceive">
      <summary>
        <para> A mask used to request a negative acknowledgment when the original message fails
      to be received from the queue.
      </para>
        <note type="note">
      Using the <see cref="M:System.Messaging.MessageQueue.Peek" qualify="true" /> method does not remove a message from the
      queue, so this acknowledgment type could be returned even if you did
      peek the message. Only the <see cref="M:System.Messaging.MessageQueue.Receive" qualify="true" /> method (or the related
      asynchronous <see cref="M:System.Messaging.MessageQueue.BeginReceive" qualify="true" /> method) removes a
      message from the queue.
      
   </note>
        <para>
        </para>
      </summary>
    </member>
    <member name="F:System.Messaging.AcknowledgeTypes.None">
      <summary>
        <para> A mask used to request that no acknowledgment messages (positive or negative) be posted.
 </para>
      </summary>
    </member>
    <member name="F:System.Messaging.AcknowledgeTypes.NotAcknowledgeReachQueue">
      <summary>
        <para> A mask used to request a negative acknowledgment when the original message cannot reach
 the queue. This can happen when the time-to-reach-queue timer
 expires, or if a message cannot be authenticated.
 </para>
      </summary>
    </member>
    <member name="F:System.Messaging.AcknowledgeTypes.NotAcknowledgeReceive">
      <summary>
        <para> A mask used to request a negative acknowledgment when an error occurs that prevents the
 original message from being received from the queue before its
 time-to-be-received timer expires.
 </para>
      </summary>
    </member>
    <member name="F:System.Messaging.AcknowledgeTypes.FullReachQueue">
      <summary>
        <para> 
 A mask used to request positive acknowledgment if
 the original message reaches the queue, or negative acknowledgment if the time-to-reach-queue timer
 expires or if the original message cannot be authenticated.
 </para>
      </summary>
    </member>
    <member name="F:System.Messaging.AcknowledgeTypes.FullReceive">
      <summary>
        <para> A mask used to request positive acknowledgment if
 the original message is received from the queue before its time-to-be-received timer
 expires, or negative acknowledgment otherwise.
 </para>
      </summary>
    </member>
    <member name="T:System.Messaging.ActiveXMessageFormatter">
      <summary>
        <para> Serializes or deserializes primitive data types
      and other objects to or from the body
      of a Message Queuing message, using a format that is compatible with
      the MSMQ ActiveX Component.
      </para>
      </summary>
    </member>
    <member name="T:System.Messaging.IMessageFormatter">
      <summary>
        <para> Serializes or deserializes
      objects from the body of a Message
      Queuing message.</para>
      </summary>
    </member>
    <member name="M:System.Messaging.IMessageFormatter.CanRead(System.Messaging.Message)">
      <summary>
        <para> When implemented in a class, determines whether the formatter can deserialize the contents of the message.</para>
      </summary>
      <param name="message">The <see cref="T:System.Messaging.Message" /> to inspect.</param>
      <returns>
        <para>
          <see langword="true" /> if
   the formatter can deserialize the message; otherwise, <see langword="false" /> .</para>
      </returns>
    </member>
    <member name="M:System.Messaging.IMessageFormatter.Read(System.Messaging.Message)">
      <summary>
        <para>When implemented in a class, reads the contents from the given message and creates an object containing
      data from the message.</para>
      </summary>
      <param name="message">The <see cref="T:System.Messaging.Message" /> to deserialize.</param>
      <returns>
        <para> The deserialized message.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.IMessageFormatter.Write(System.Messaging.Message,System.Object)">
      <summary>
        <para> When implemented in a class, serializes an object into the body of the message.</para>
      </summary>
      <param name="message">The <see cref="T:System.Messaging.Message" /> that will contain the serialized object.</param>
      <param name="obj">The object to be serialized into the message.</param>
    </member>
    <member name="M:System.Messaging.ActiveXMessageFormatter.CanRead(System.Messaging.Message)">
      <summary>
        <para> Determine whether the formatter can deserialize the contents of the message.</para>
      </summary>
      <param name="message">The <see cref="T:System.Messaging.Message" /> to inspect.</param>
      <returns>
        <para>
          <see langword="true" /> if the <see cref="T:System.Messaging.ActiveXMessageFormatter" /> 
can deserialize the message; otherwise, <see langword="false" /> .</para>
      </returns>
    </member>
    <member name="M:System.Messaging.ActiveXMessageFormatter.Clone">
      <summary>
        <para>Creates an instance of the <see cref="T:System.Messaging.ActiveXMessageFormatter" /> class that
   is identical to the current <see cref="T:System.Messaging.ActiveXMessageFormatter" /> . </para>
      </summary>
      <returns>
        <para>An object whose properties are identical to those of
      this <see cref="T:System.Messaging.ActiveXMessageFormatter" />
      
      . </para>
      </returns>
    </member>
    <member name="M:System.Messaging.ActiveXMessageFormatter.InitStreamedObject(System.Object)">
      <summary>
        <para> Provides a utility to help the serialize COM objects that implement IPersistStream and require IPersistStreamInit to be called.</para>
      </summary>
      <param name="streamedObject">
        <para>An OLE object that implements IPersistStreamInit.</para>
      </param>
    </member>
    <member name="M:System.Messaging.ActiveXMessageFormatter.Read(System.Messaging.Message)">
      <summary>
        <para>Reads the contents from the given message and creates an object
      containing the deserialized message.</para>
      </summary>
      <param name="message">The <see cref="T:System.Messaging.Message" /> , in MSMQ ActiveX control format, to deserialize.</param>
      <returns>
        <para> The deserialized message.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.ActiveXMessageFormatter.Write(System.Messaging.Message,System.Object)">
      <summary>
        <para> Serializes an object into the body of the message.</para>
      </summary>
      <param name="message">The <see cref="T:System.Messaging.Message" /> whose <see cref="P:System.Messaging.Message.Body" /> property will contain the serialized object.</param>
      <param name="obj">The object to be serialized into the message body.</param>
    </member>
    <member name="T:System.Messaging.BinaryMessageFormatter">
      <summary>
        <para> Serializes or deserializes an object, or an
      entire graph of connected objects, to or from the body of a
      Message Queuing message, using a binary format.</para>
      </summary>
    </member>
    <member name="M:System.Messaging.BinaryMessageFormatter.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Messaging.BinaryMessageFormatter" /> class,
   without specifying a type style or top object assembly style.</para>
      </summary>
    </member>
    <member name="M:System.Messaging.BinaryMessageFormatter.#ctor(System.Runtime.Serialization.Formatters.FormatterAssemblyStyle,System.Runtime.Serialization.Formatters.FormatterTypeStyle)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Messaging.BinaryMessageFormatter" /> class, specifying the formats of the root
   object and the type descriptions.</para>
      </summary>
      <param name="topObjectFormat">Determines how the top (root) object of a graph is laid out in the serialized stream. </param>
      <param name="typeFormat">Determines how type descriptions are laid out in the serialized stream. </param>
    </member>
    <member name="M:System.Messaging.BinaryMessageFormatter.CanRead(System.Messaging.Message)">
      <summary>
        <para> Determines whether the formatter can deserialize the contents of the message.</para>
      </summary>
      <param name="message">The <see cref="T:System.Messaging.Message" /> to inspect.</param>
      <returns>
        <para>
          <see langword="true" /> if the binary message
   formatter can deserialize the message; otherwise, <see langword="false" /> .</para>
      </returns>
    </member>
    <member name="M:System.Messaging.BinaryMessageFormatter.Clone">
      <summary>
        <para>Creates an instance of the <see cref="T:System.Messaging.BinaryMessageFormatter" /> class whose read/write properties (the root object and type description formats) are
   the same as the current <see cref="T:System.Messaging.BinaryMessageFormatter" /> . </para>
      </summary>
      <returns>
        <para>An object whose properties are identical to those of
      this <see cref="T:System.Messaging.BinaryMessageFormatter" />
      , but whose metadata does not specify it to be a
      formatter class instance.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.BinaryMessageFormatter.Read(System.Messaging.Message)">
      <summary>
        <para>Reads the contents from the given message and creates an object
      containing the deserialized message.</para>
      </summary>
      <param name="message">The <see cref="T:System.Messaging.Message" /> , in binary format, to deserialize.</param>
      <returns>
        <para> The deserialized message.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.BinaryMessageFormatter.Write(System.Messaging.Message,System.Object)">
      <summary>
        <para> Serializes an object into the body of the message.</para>
      </summary>
      <param name="message">The <see cref="T:System.Messaging.Message" /> whose <see cref="P:System.Messaging.Message.Body" /> property will contain the serialized object.</param>
      <param name="obj">The object to be serialized into the message body.</param>
    </member>
    <member name="P:System.Messaging.BinaryMessageFormatter.TopObjectFormat">
      <summary>
        <para>Gets or sets a value that defines how the top (root) object of a graph
      is laid out in the serialized stream.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.BinaryMessageFormatter.TypeFormat">
      <summary>
        <para>Gets or sets a value that defines how type descriptions are laid out in the
      serialized stream.</para>
      </summary>
    </member>
    <member name="T:System.Messaging.CryptographicProviderType">
      <summary>
        <para> Specifies the cryptographic service providers available for validating digital signatures.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.CryptographicProviderType.None">
      <summary>
        <para>No cryptographic provider type specified.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.CryptographicProviderType.RsaFull">
      <summary>
        <para>The full RSA provider type, which supports both digital 
 signatures and data encryption. Considered a general purpose cryptographic
 services provider. The RSA public-key algorithm is used for all public-key operations.</para>
        <note type="note">
 RSA Data Security, Inc., is a
 major developer and publisher of public-key cryptography standards. The "RSA" in
 the name stands for the names of the company's three developers and the owners:
 Rivest, Shamir, and Adelman
 </note>
      </summary>
    </member>
    <member name="F:System.Messaging.CryptographicProviderType.RsqSig">
      <summary>
        <para>A subset of the <see langword="RsaFull" /> provider type, which supports
   only those functions and algorithms required for hashes and digital signatures.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.CryptographicProviderType.Dss">
      <summary>
        <para>A provider type that, like
   <see langword="RsqSig" />, only supports hashes and digital signatures.
   <see langword="Dss" /> specifies the DSA (Digital Signature Algorithm) signature algorithm.</para>
        <para>
        </para>
      </summary>
    </member>
    <member name="F:System.Messaging.CryptographicProviderType.Fortezza">
      <summary>
        <para>A provider type that contains a set of cryptographic 
 protocols and algorithms owned by the National Institute of Standards and Technology.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.CryptographicProviderType.MicrosoftExchange">
      <summary>
        <para>A provider type designed for the cryptographic needs of 
 the Microsoft Exchange mail application and other applications compatible with Microsoft Mail.</para>
        <note type="note">
 This provider type
 is preliminary.
 </note>
      </summary>
    </member>
    <member name="F:System.Messaging.CryptographicProviderType.Ssl">
      <summary>
        <para>A provider type that supports the Secure Sockets Layer (SSL) protocol.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.CryptographicProviderType.SttMer">
      <summary>
        <para>Secure Transaction Technology Provider.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.CryptographicProviderType.SttAcq">
      <summary>
        <para> Secure Transaction Technology Provider.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.CryptographicProviderType.SttBrnd">
      <summary>
        <para> Secure Transaction Technology Provider.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.CryptographicProviderType.SttRoot">
      <summary>
        <para>Secure Transaction Technology Provider.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.CryptographicProviderType.SttIss">
      <summary>
        <para>Secure Transaction Technology Provider.</para>
      </summary>
    </member>
    <member name="T:System.Messaging.DefaultPropertiesToSend">
      <summary>
        <para>Specifies the default property values that will be used
      when sending objects other than <see cref="T:System.Messaging.Message" />
      instances to a message queue.</para>
      </summary>
    </member>
    <member name="M:System.Messaging.DefaultPropertiesToSend.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Messaging.DefaultPropertiesToSend" />
class.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.DefaultPropertiesToSend.AcknowledgeType">
      <summary>
        <para> Gets or sets the type of acknowledgement message to be returned to the sending
      application.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.DefaultPropertiesToSend.AdministrationQueue">
      <summary>
        <para> Gets or
      sets the queue that receives acknowledgement messages generated by Message
      Queuing.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.DefaultPropertiesToSend.AppSpecific">
      <summary>
        <para>Gets or sets additional, application-specific information.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.DefaultPropertiesToSend.AttachSenderId">
      <summary>
        <para> Gets or sets a value indicating whether the sender ID should be attached to the
       message.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.DefaultPropertiesToSend.EncryptionAlgorithm">
      <summary>
        <para> Gets or sets the encryption algorithm used to encrypt the body of a
      private message.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.DefaultPropertiesToSend.Extension">
      <summary>
        <para> Gets or sets additional information associated with the message.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.DefaultPropertiesToSend.HashAlgorithm">
      <summary>
        <para> Gets or sets the hashing algorithm used when authenticating 
       messages or creating a digital signature for
       a
       message.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.DefaultPropertiesToSend.Label">
      <summary>
        <para>Gets or sets an application-defined string that describes the message.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.DefaultPropertiesToSend.Priority">
      <summary>
        <para>Gets or sets the message priority, used to determine where 
       the message is placed in the queue.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.DefaultPropertiesToSend.Recoverable">
      <summary>
        <para> Gets or sets a value indicating whether the message is
       guaranteed to be delivered in the event
       of a computer failure or network problem.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.DefaultPropertiesToSend.ResponseQueue">
      <summary>
        <para> Gets or sets the queue that receives application-generated response
       messages.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.DefaultPropertiesToSend.TimeToBeReceived">
      <summary>
        <para> Gets or sets the time limit for the message to be
 retrieved from
 the destination queue.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.DefaultPropertiesToSend.TimeToReachQueue">
      <summary>
        <para> Gets or sets the time limit for the message to
      reach the queue.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.DefaultPropertiesToSend.TransactionStatusQueue">
      <summary>
        <para> Gets the transaction status queue on the source computer. </para>
      </summary>
    </member>
    <member name="P:System.Messaging.DefaultPropertiesToSend.UseAuthentication">
      <summary>
        <para> Gets or sets a value indicating whether the message must be authenticated before being sent.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.DefaultPropertiesToSend.UseDeadLetterQueue">
      <summary>
        <para> Gets or sets a value indicating whether a copy of the message that could not
       be delivered should be sent to a dead-letter queue.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.DefaultPropertiesToSend.UseEncryption">
      <summary>
        <para> Gets or sets a value indicating whether to make the message private.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.DefaultPropertiesToSend.UseJournalQueue">
      <summary>
        <para> Gets or sets a value indicating whether a copy of the message should be kept
       in a machine journal on the originating computer.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.DefaultPropertiesToSend.UseTracing">
      <summary>
        <para> Gets or sets a value indicating whether to trace a message as it moves toward
       its destination queue.</para>
      </summary>
    </member>
    <member name="T:System.Messaging.EncryptionAlgorithm">
      <summary>
        <para> Specifies the encryption algorithm used to encrypt the message body of a
 private message.
 
 </para>
      </summary>
    </member>
    <member name="F:System.Messaging.EncryptionAlgorithm.None">
      <summary>
        <para>
       No encryption.
    </para>
      </summary>
    </member>
    <member name="F:System.Messaging.EncryptionAlgorithm.Rc2">
      <summary>
        <para> The value MQMSG_CALG_RC2. This is the default value for 
 the encryption property of the
 Message Queuing application's message
 
 object.
 
 </para>
      </summary>
    </member>
    <member name="F:System.Messaging.EncryptionAlgorithm.Rc4">
      <summary>
        <para> The value MQMSG_CALG_RC4. This corresponds to the less 
 secure option for the encryption property of the Message Queuing application's message
 
 object.
 
 </para>
      </summary>
    </member>
    <member name="T:System.Messaging.EncryptionRequired">
      <summary>
        <para>Specifies the privacy level of messages received by the queue.
      </para>
      </summary>
    </member>
    <member name="F:System.Messaging.EncryptionRequired.None">
      <summary>
        <para> Accepts
      only
      nonprivate (nonencrypted) messages.
      
   </para>
      </summary>
    </member>
    <member name="F:System.Messaging.EncryptionRequired.Optional">
      <summary>
        <para> Does not force privacy. Accepts private (encrypted) messages and nonprivate (nonencrypted) messages.
      
   </para>
      </summary>
    </member>
    <member name="F:System.Messaging.EncryptionRequired.Body">
      <summary>
        <para>
       Accepts only private (encrypted) messages.
    </para>
      </summary>
    </member>
    <member name="T:System.Messaging.GenericAccessRights">
      <summary>
        <para>Uses the Windows 2000/Windows NT access format to specify a set of common access rights that Message
      Queuing maps to both standard and object-specific access rights for reading,
      writing, and executing.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.GenericAccessRights.All">
      <summary>
        <para>Read, write, and execute access.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.GenericAccessRights.Execute">
      <summary>
        <para> Execute access.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.GenericAccessRights.Write">
      <summary>
        <para> Write access.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.GenericAccessRights.Read">
      <summary>
        <para> Read access.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.GenericAccessRights.None">
      <summary>
        <para> No access.</para>
      </summary>
    </member>
    <member name="T:System.Messaging.HashAlgorithm">
      <summary>
        <para>Specifies the hash algorithm used by Message
      Queuing when authenticating messages.
      </para>
      </summary>
    </member>
    <member name="F:System.Messaging.HashAlgorithm.None">
      <summary>
        <para>
       No hashing
       algorithm.
       
    </para>
      </summary>
    </member>
    <member name="F:System.Messaging.HashAlgorithm.Md2">
      <summary>
        <para>
       MD2 hashing algorithm.
    </para>
      </summary>
    </member>
    <member name="F:System.Messaging.HashAlgorithm.Md4">
      <summary>
        <para>
       MD4 hashing algorithm.
       
    </para>
      </summary>
    </member>
    <member name="F:System.Messaging.HashAlgorithm.Md5">
      <summary>
        <para>
       MD5 hashing algorithm.
    </para>
      </summary>
    </member>
    <member name="F:System.Messaging.HashAlgorithm.Sha">
      <summary>
        <para>
       SHA hashing algorithm.
    </para>
      </summary>
    </member>
    <member name="F:System.Messaging.HashAlgorithm.Mac">
      <summary>
        <para>
       MAC keyed hashing algorithm.
    </para>
      </summary>
    </member>
    <member name="T:System.Messaging.Message">
      <summary>
        <para>Provides access to the properties needed to define a
 Message Queuing message.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.Message.InfiniteTimeout">
      <summary>
        <para> Specifies that no timeout exists.</para>
      </summary>
    </member>
    <member name="M:System.Messaging.Message.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Messaging.Message" /> class with an empty body.</para>
      </summary>
    </member>
    <member name="M:System.Messaging.Message.#ctor(System.Object)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Messaging.Message" /> class, using the <see cref="T:System.Messaging.XmlMessageFormatter" /> to serialize the specified object into the
   body of the message.</para>
      </summary>
      <param name="body">The object to be serialized into the body of the message.</param>
    </member>
    <member name="M:System.Messaging.Message.#ctor(System.Object,System.Messaging.IMessageFormatter)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Messaging.Message" /> class, using the specified formatter to serialize
   the specified object into the body
   of the message.</para>
      </summary>
      <param name="body">The object to be serialized into the body of the message.</param>
      <param name=" formatter">An <see cref="T:System.Messaging.IMessageFormatter" /> that specifies the formatter with which to serialize the message body.</param>
    </member>
    <member name="P:System.Messaging.Message.Acknowledgment">
      <summary>
        <para> Gets the
       classification of acknowledgment that this message represents.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.Message.AcknowledgeType">
      <summary>
        <para> Gets or sets
      the type
      of
      acknowledgment message to be returned to the sending application.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.Message.AdministrationQueue">
      <summary>
        <para>Gets or sets the queue that receives the acknowledgement messages that Message Queuing
      generates.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.Message.AppSpecific">
      <summary>
        <para> Gets or
      sets additional, application-specific information.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.Message.ArrivedTime">
      <summary>
        <para>Gets the time that the message arrived in the destination queue.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.Message.AttachSenderId">
      <summary>
        <para> Gets or sets a value indicating whether the sender identifier should be attached
      to the message.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.Message.Authenticated">
      <summary>
        <para>Gets a value indicating whether the message was
      authenticated.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.Message.AuthenticationProviderName">
      <summary>
        <para> Gets or sets the name of the cryptographic
      provider used to generate the digital signature of the message.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.Message.AuthenticationProviderType">
      <summary>
        <para>Gets or sets the type of cryptographic provider used to
      generate the digital signature of the
      message.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.Message.Body">
      <summary>
        <para> Gets or sets the
      content of the message.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.Message.BodyStream">
      <summary>
        <para>Gets or sets the information in the body of
 the message.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.Message.BodyType">
      <summary>
        <para>Gets
      or sets the type of data that the message body contains.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.Message.ConnectorType">
      <summary>
        <para> Gets
      or sets a value that indicates that some
      message properties typically set by Message Queuing were set by
      the sending
      application.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.Message.CorrelationId">
      <summary>
        <para>Gets or sets the message identifier used by
      acknowledgment, report, and response messages to reference the original
      message.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.Message.DestinationQueue">
      <summary>
        <para> Gets the intended destination queue for a message.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.Message.DestinationSymmetricKey">
      <summary>
        <para>Gets or sets the symmetric key used to encrypt
      application-encrypted messages or messages sent to foreign queues.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.Message.DigitalSignature">
      <summary>
        <para>Gets or sets the digital
      signature that Message Queuing uses to authenticate
      the message.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.Message.EncryptionAlgorithm">
      <summary>
        <para> Gets or sets the encryption algorithm used to encrypt the
      body of a private message.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.Message.Extension">
      <summary>
        <para> Gets or sets additional, application-defined information associated with the message.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.Message.Formatter">
      <summary>
        <para>Gets or sets the formatter
      used to serialize an object into or deserialize an object from the message
      body.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.Message.HashAlgorithm">
      <summary>
        <para>Gets or sets the hashing algorithm that Message Queuing uses when authenticating a message or creating a
      digital signature for a message.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.Message.Id">
      <summary>
        <para> Gets the message's identifier.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.Message.IsFirstInTransaction">
      <summary>
        <para>Gets a value indicating
      whether the message was the first message sent in a transaction.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.Message.IsLastInTransaction">
      <summary>
        <para>Gets a value indicating whether the message was
      the last message sent in a transaction.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.Message.Label">
      <summary>
        <para>Gets or sets an application-defined Unicode string that describes the message.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.Message.MessageType">
      <summary>
        <para> Gets the message type: normal, acknowledgment, or report.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.Message.Priority">
      <summary>
        <para> Gets or sets the message priority, which determines
      where in
      the queue the message is
      placed.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.Message.Recoverable">
      <summary>
        <para> Gets or sets a value
      indicating whether the message is guaranteed to be delivered in the event of
      a computer failure or network problem.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.Message.ResponseQueue">
      <summary>
        <para> Gets or sets the queue that receives application-generated
      response messages.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.Message.SenderCertificate">
      <summary>
        <para>Gets or sets the security certificate used to authenticate messages.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.Message.SenderId">
      <summary>
        <para> Gets the
      identifier of the sending
      user.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.Message.SenderVersion">
      <summary>
        <para> Gets the version of Message Queuing used to send the message.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.Message.SentTime">
      <summary>
        <para> Gets the date and time on the sending computer that the message was sent by
      the source queue manager.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.Message.SourceMachine">
      <summary>
        <para> Gets the computer from which the message originated.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.Message.TimeToBeReceived">
      <summary>
        <para> Gets or
      sets the maximum
      amount of time for the message to be received from the destination
      queue.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.Message.TimeToReachQueue">
      <summary>
        <para> Gets or sets the maximum amount of time for the message to reach
      the queue.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.Message.TransactionId">
      <summary>
        <para> Gets the
      identifier for the transaction of which the message was a part.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.Message.TransactionStatusQueue">
      <summary>
        <para> Gets the
      transaction status queue on the source computer.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.Message.UseAuthentication">
      <summary>
        <para> Gets or sets a value indicating whether the message was
      (or must be) authenticated before being sent.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.Message.UseDeadLetterQueue">
      <summary>
        <para> Gets or sets a value indicating whether a copy of the
      message that could not be delivered should be sent to a dead-letter queue.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.Message.UseEncryption">
      <summary>
        <para> Gets or sets a value indicating whether to make the message private.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.Message.UseJournalQueue">
      <summary>
        <para> Gets or sets a value indicating whether a copy of the message should be kept in a machine
      journal on the originating computer.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.Message.UseTracing">
      <summary>
        <para> Gets or sets a value
      indicating whether to trace a message as
      it moves toward its destination queue.</para>
      </summary>
    </member>
    <member name="T:System.Messaging.MessageEnumerator">
      <summary>
        <para>Provides a
      forward-only cursor to enumerate through messages in a
      message queue.</para>
      </summary>
    </member>
    <member name="M:System.Messaging.MessageEnumerator.Close">
      <summary>
        <para> Frees the resources associated with the enumerator.
      </para>
      </summary>
    </member>
    <member name="M:System.Messaging.MessageEnumerator.Dispose">
      <summary>
        <para>Releases all resources used by the <see cref="T:System.Messaging.MessageEnumerator" />.</para>
      </summary>
    </member>
    <member name="M:System.Messaging.MessageEnumerator.Dispose(System.Boolean)">
      <summary>
        <para>Releases the unmanaged resources used by the <see cref="T:System.Messaging.MessageEnumerator" /> and optionally releases the managed
   resources.</para>
      </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Messaging.MessageEnumerator.MoveNext">
      <summary>
        <para>Advances the enumerator to the next message in the queue, if one
      is currently available.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the enumerator was
   succesfully advanced to the next message; <see langword="false" /> if the enumerator has
   reached the end of the queue.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)">
      <summary>
        <para>Advances the enumerator to the next message in the queue.
 If the enumerator is positioned at the end of the queue, <see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> waits until a message is available or the
 given timeout
 expires.</para>
      </summary>
      <param name="timeout">The <see cref="T:System.TimeSpan" /> to wait for a message to be available if the enumerator is positioned at the end of the queue.</param>
      <returns>
        <para>
          <see langword="true" /> if the enumerator successfully
 advanced to the next message; <see langword="false" /> if the enumerator has
 reached the end of the queue and a message does not become available within the
 time specified by the <paramref name="timeout" />
 parameter.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.MessageEnumerator.RemoveCurrent">
      <summary>
        <para>Removes the current message from a transactional or non-transactional queue and returns the
      message to the calling application. There is no timeout specified for a message
      to arrive in the queue.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)">
      <summary>
        <para> Removes the current message from a transactional queue
      and returns the message to the calling application. There is no
      timeout specified for a message to arrive in the queue.</para>
      </summary>
      <param name="transaction">The <see cref="T:System.Messaging.MessageQueueTransaction" /> object that specifies the transaction in which the message will be removed.</param>
      <returns>
        <para>A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)">
      <summary>
        <para> Removes the current message from a queue
      and returns the message to the calling application. There is no
      timeout specified for a message to arrive in the queue.</para>
      </summary>
      <param name="transactionType">One of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> values, describing the type of transaction context to associate with the message.</param>
      <returns>
        <para>A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)">
      <summary>
        <para> Removes the current message from the queue and returns
      the message to the calling application. If there is a message to remove, the method returns it
      immediately. Otherwise, the method waits the specified timeout for a new message to arrive.</para>
      </summary>
      <param name="timeout">The interval of time to wait for a message to arrive in the queue.</param>
      <returns>
        <para>A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)">
      <summary>
        <para> Removes the current message from a transactional queue
      and returns the message to the calling application. If there is a message to
      remove, the method returns it
      immediately. Otherwise, the method waits the specified timeout for a new message to arrive.</para>
      </summary>
      <param name="timeout">The interval of time to wait for the message to be removed.</param>
      <param name="transaction">The <see cref="T:System.Messaging.MessageQueueTransaction" /> object that specifies the transaction context for the message. </param>
      <returns>
        <para>A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)">
      <summary>
        <para> Removes the current message from a queue and returns the message to the calling application. If there is a
      message to remove, the method returns it immediately. Otherwise, the method
      waits the specified timeout for a new message to arrive.</para>
      </summary>
      <param name="timeout">The interval of time to wait for the message to be removed.</param>
      <param name="transactionType">One of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> values, describing the type of transaction context to associate with the message.</param>
      <returns>
        <para>A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.MessageEnumerator.Reset">
      <summary>
        <para> Resets the current enumerator so it points to
      the head of the queue.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessageEnumerator.Current">
      <summary>
        <para>Gets the current <see cref="T:System.Messaging.Message" /> that this
 enumerator points to.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessageEnumerator.CursorHandle">
      <summary>
        <para>Gets the native Message Queuing cursor handle used to browse messages
      in the queue.</para>
      </summary>
    </member>
    <member name="T:System.Messaging.MessagePriority">
      <summary>
        <para> Specifies the priority Message Queuing applies to a message while it
      is en route to a queue, and when inserting the message into the destination
      queue.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessagePriority.Lowest">
      <summary>
        <para>Lowest message priority.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessagePriority.VeryLow">
      <summary>
        <para>Between <see langword="Low" /> and <see langword="Lowest" /> message priority.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessagePriority.Low">
      <summary>
        <para>Low message priority.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessagePriority.Normal">
      <summary>
        <para>Normal message priority.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessagePriority.AboveNormal">
      <summary>
        <para>Between <see langword="High" /> and 
<see langword="Normal" /> message priority.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessagePriority.High">
      <summary>
        <para>High message priority.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessagePriority.VeryHigh">
      <summary>
        <para>Between <see langword="Highest" /> and 
<see langword="High" /> message priority.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessagePriority.Highest">
      <summary>
        <para>Highest message priority.</para>
      </summary>
    </member>
    <member name="T:System.Messaging.MessagePropertyFilter">
      <summary>
        <para>Controls and selects the properties that are retrieved
      when peeking or receiving messages from a message queue.</para>
      </summary>
    </member>
    <member name="M:System.Messaging.MessagePropertyFilter.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Messaging.MessagePropertyFilter" /> class and sets
   default values for all properties.</para>
      </summary>
    </member>
    <member name="M:System.Messaging.MessagePropertyFilter.ClearAll">
      <summary>
        <para>Sets all Boolean filter values to <see langword="false" />, 
    so that no message
    properties are retrieved when receiving a message.</para>
      </summary>
      <returns>
        <para>Use <see cref="M:System.Messaging.MessagePropertyFilter.ClearAll" /> to set all <see cref="T:System.Messaging.MessagePropertyFilter" /> Boolean properties to <see langword="false" /> . This causes no message 
    properties to be retrieved when receiving messages. <see cref="M:System.Messaging.MessagePropertyFilter.ClearAll" /> does not affect the values for <see cref="P:System.Messaging.MessagePropertyFilter.DefaultBodySize" />, <see cref="P:System.Messaging.MessagePropertyFilter.DefaultExtensionSize" />, or <see cref="P:System.Messaging.MessagePropertyFilter.DefaultLabelSize" />
    .</para>
        <para>After calling <see cref="M:System.Messaging.MessagePropertyFilter.ClearAll" />, it is necessary to set at
 least one filter property to <see langword="true" /> in order to receive data
 related to a message. You can either set individual properties to
 <see langword="true" />, or you can call <see cref="M:System.Messaging.MessagePropertyFilter.SetDefaults" /> or <see cref="M:System.Messaging.MessagePropertyFilter.SetAll" />. </para>
      </returns>
    </member>
    <member name="M:System.Messaging.MessagePropertyFilter.SetDefaults">
      <summary>
        <para>Sets the filter values of common Message Queuing
      properties to <see langword="true" /> and the integer-valued properties to their default
      values.</para>
      </summary>
    </member>
    <member name="M:System.Messaging.MessagePropertyFilter.SetAll">
      <summary>
        <para>Specifies to retrieve all
       message properties when receiving a message.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.Acknowledgment">
      <summary>
        <para> Gets or sets a value indicating whether to retrieve
    <see cref="P:System.Messaging.Message.Acknowledgment" qualify="true" /> property information when receiving or peeking
       a message.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.AcknowledgeType">
      <summary>
        <para> Gets or sets a value indicating whether to retrieve <see cref="P:System.Messaging.Message.AcknowledgeType" qualify="true" /> property information when receiving or peeking
    a message.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.AdministrationQueue">
      <summary>
        <para> Gets or sets a value indicating whether to retrieve <see cref="P:System.Messaging.Message.AdministrationQueue" qualify="true" /> property information when receiving or peeking
   a message.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.AppSpecific">
      <summary>
        <para> Gets or sets a value indicating whether to retrieve <see cref="P:System.Messaging.Message.AppSpecific" qualify="true" /> property information when receiving or peeking
    a message.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.ArrivedTime">
      <summary>
        <para> Gets or sets a value indicating whether to retrieve <see cref="P:System.Messaging.Message.ArrivedTime" qualify="true" /> property information when receiving or peeking
   a message.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.AttachSenderId">
      <summary>
        <para> Gets or sets a value indicating whether to retrieve <see cref="P:System.Messaging.Message.AttachSenderId" qualify="true" /> property information when receiving or peeking
    a message.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.Authenticated">
      <summary>
        <para> Gets or sets a value indicating whether to retrieve <see cref="P:System.Messaging.Message.Authenticated" qualify="true" /> property information when receiving or peeking
    a message.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.AuthenticationProviderName">
      <summary>
        <para> Gets or sets a value indicating whether to retrieve <see cref="P:System.Messaging.Message.AuthenticationProviderName" qualify="true" /> property information when receiving or peeking
    a message.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.AuthenticationProviderType">
      <summary>
        <para> Gets or sets a value indicating whether to retrieve <see cref="P:System.Messaging.Message.AuthenticationProviderType" qualify="true" /> property information when receiving or peeking
    a message.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.Body">
      <summary>
        <para> Gets or sets a value indicating whether to retrieve <see cref="P:System.Messaging.Message.Body" qualify="true" /> property information when receiving or peeking
   a message.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.ConnectorType">
      <summary>
        <para> Gets or sets a value indicating whether to retrieve <see cref="P:System.Messaging.Message.ConnectorType" qualify="true" /> property information when receiving or peeking
    a message.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.CorrelationId">
      <summary>
        <para> Gets or sets a value indicating whether to retrieve <see cref="P:System.Messaging.Message.CorrelationId" qualify="true" /> property information when receiving or peeking
   a message.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.DefaultBodySize">
      <summary>
        <para> Gets or sets the size,
       in bytes, of the default body buffer.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.DefaultExtensionSize">
      <summary>
        <para> Gets or sets the
       size, in bytes, of the default extension buffer.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.DefaultLabelSize">
      <summary>
        <para> Gets or sets the size,
       in bytes, of the default label buffer.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.DestinationQueue">
      <summary>
        <para> Gets or sets a value indicating whether to retrieve <see cref="P:System.Messaging.Message.DestinationQueue" qualify="true" /> property information when receiving or peeking
    a message.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.DestinationSymmetricKey">
      <summary>
        <para> Gets or sets a value indicating whether to retrieve
    <see cref="P:System.Messaging.Message.DestinationSymmetricKey" qualify="true" /> property information when receiving or peeking
       a message.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.DigitalSignature">
      <summary>
        <para> Gets or sets a value indicating whether to retrieve <see cref="P:System.Messaging.Message.DigitalSignature" qualify="true" /> property information when receiving or peeking
    a message.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.EncryptionAlgorithm">
      <summary>
        <para> Gets or sets a value indicating whether to retrieve <see cref="P:System.Messaging.Message.EncryptionAlgorithm" qualify="true" /> property information when receiving or peeking
    a message.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.Extension">
      <summary>
        <para> Gets or sets a value indicating whether to retrieve <see cref="P:System.Messaging.Message.Extension" qualify="true" /> property information when receiving or peeking
    a message.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.HashAlgorithm">
      <summary>
        <para> Gets or sets a value indicating whether to retrieve <see cref="P:System.Messaging.Message.HashAlgorithm" qualify="true" /> property information when receiving or peeking
    a message.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.Id">
      <summary>
        <para> Gets or sets a value indicating whether to retrieve <see cref="P:System.Messaging.Message.Id" qualify="true" />
property information when receiving or peeking a message.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.IsFirstInTransaction">
      <summary>
        <para> Gets or sets a value indicating whether to retrieve <see cref="P:System.Messaging.Message.IsFirstInTransaction" qualify="true" /> property information when receiving or peeking
    a message.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.IsLastInTransaction">
      <summary>
        <para> Gets or sets a value indicating whether to retrieve <see cref="P:System.Messaging.Message.IsLastInTransaction" qualify="true" /> property information when receiving or peeking
    a message.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.Label">
      <summary>
        <para> Gets or sets a value indicating whether to retrieve <see cref="P:System.Messaging.Message.Label" qualify="true" /> property information when receiving or peeking
   a message.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.MessageType">
      <summary>
        <para> Gets or sets a value indicating whether to retrieve <see cref="P:System.Messaging.Message.MessageType" qualify="true" /> property information when receiving or peeking
    a message.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.Priority">
      <summary>
        <para> Gets or sets a value indicating whether to retrieve <see cref="P:System.Messaging.Message.Priority" qualify="true" /> property information when receiving or peeking
   a message.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.Recoverable">
      <summary>
        <para> Gets or sets a value indicating whether to retrieve <see cref="P:System.Messaging.Message.Recoverable" qualify="true" /> property information when receiving or peeking
    a message.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.ResponseQueue">
      <summary>
        <para> Gets or sets a value indicating whether to retrieve <see cref="P:System.Messaging.Message.ResponseQueue" qualify="true" /> property information when receiving or peeking
   a message.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.SenderCertificate">
      <summary>
        <para> Gets or sets a value indicating whether to retrieve <see cref="P:System.Messaging.Message.SenderCertificate" qualify="true" /> property information when receiving or peeking
    a message.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.SenderId">
      <summary>
        <para> Gets or sets a value indicating whether to retrieve <see cref="P:System.Messaging.Message.SenderId" qualify="true" /> property information when receiving or peeking
    a message.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.SenderVersion">
      <summary>
        <para> Gets or sets a value indicating whether to retrieve <see cref="P:System.Messaging.Message.SenderVersion" qualify="true" /> property information when receiving or peeking
    a message.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.SentTime">
      <summary>
        <para> Gets or sets a value indicating whether to retrieve <see cref="P:System.Messaging.Message.SentTime" qualify="true" /> property information when receiving or peeking
   a message.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.SourceMachine">
      <summary>
        <para> Gets or sets a value indicating whether to retrieve <see cref="P:System.Messaging.Message.SourceMachine" qualify="true" /> property information when receiving or peeking
    a message.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.TimeToBeReceived">
      <summary>
        <para> Gets or sets a value indicating whether to retrieve <see cref="P:System.Messaging.Message.TimeToBeReceived" qualify="true" /> property information when receiving or peeking
    a message.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.TimeToReachQueue">
      <summary>
        <para> Gets or sets a value indicating whether to retrieve <see cref="P:System.Messaging.Message.TimeToReachQueue" qualify="true" /> property information when receiving or peeking
    a message.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.TransactionId">
      <summary>
        <para> Gets or sets a value indicating whether to retrieve <see cref="P:System.Messaging.Message.TransactionId" qualify="true" /> property information when receiving or peeking
    a message.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.TransactionStatusQueue">
      <summary>
        <para> Gets or sets a value indicating whether to retrieve <see cref="P:System.Messaging.Message.TransactionStatusQueue" qualify="true" /> property information when receiving or peeking
    a message.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.UseAuthentication">
      <summary>
        <para> Gets or sets a value indicating whether to retrieve <see cref="P:System.Messaging.Message.UseAuthentication" qualify="true" /> property information when receiving or peeking
    a message.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.UseDeadLetterQueue">
      <summary>
        <para> Gets or sets a value indicating whether to retrieve <see cref="P:System.Messaging.Message.UseDeadLetterQueue" qualify="true" /> property information when receiving or peeking
    a message.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.UseEncryption">
      <summary>
        <para> Gets or sets a value indicating whether to retrieve <see cref="P:System.Messaging.Message.UseEncryption" qualify="true" /> property information when receiving or peeking
    a message.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.UseJournalQueue">
      <summary>
        <para> Gets or sets a value indicating whether to retrieve <see cref="P:System.Messaging.Message.UseJournalQueue" qualify="true" /> property information when receiving or peeking
    a message.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessagePropertyFilter.UseTracing">
      <summary>
        <para> Gets or sets a value indicating whether to retrieve <see cref="P:System.Messaging.Message.UseTracing" qualify="true" /> property information when receiving or peeking
    a message.</para>
      </summary>
    </member>
    <member name="T:System.Messaging.MessageQueue">
      <summary>
        <para> Provides access to a queue on a Message Queuing server.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueue.InfiniteTimeout">
      <summary>
        <para> 
       Specifies
       that no time-out exists for methods that peek or receive messages.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueue.InfiniteQueueSize">
      <summary>
        <para>Specifies that no size restriction exists for a queue.</para>
      </summary>
    </member>
    <member name="M:System.Messaging.MessageQueue.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Messaging.MessageQueue" /> class. After the default constructor initializes the new instance, you must set
   the instance's <see cref="P:System.Messaging.MessageQueue.Path" /> property before you
   can use the instance.</para>
      </summary>
    </member>
    <member name="M:System.Messaging.MessageQueue.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Messaging.MessageQueue" /> class that references the Message Queuing
   queue at the specified path.</para>
      </summary>
      <param name="path">The location of the queue referenced by this <see cref="T:System.Messaging.MessageQueue" /> . For information on the proper syntax for this parameter, see the Remarks section.</param>
    </member>
    <member name="M:System.Messaging.MessageQueue.#ctor(System.String,System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Messaging.MessageQueue" /> class that references the Message Queuing
   queue at the specified path
   and with the specified read-access restriction.</para>
      </summary>
      <param name="path">The location of the queue referenced by this <see cref="T:System.Messaging.MessageQueue" /> , which can be "." for the local computer. For information on the proper syntax for this parameter, see the Remarks section.</param>
      <param name="sharedModeDenyReceive">
        <see langword="true" /> to grant exclusive read access to the first application that accesses the queue; otherwise, <see langword="false" /> .</param>
    </member>
    <member name="M:System.Messaging.MessageQueue.BeginPeek">
      <summary>
        <para> Initiates an asynchronous peek
      operation that has no time-out. The operation is not complete until a message becomes
      available in the
      queue.</para>
      </summary>
      <returns>
        <para>The <see cref="T:System.IAsyncResult" /> that identifies
   the posted asynchronous request.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.MessageQueue.BeginPeek(System.TimeSpan)">
      <summary>
        <para> Initiates an asynchronous peek
      operation that has a specified time-out. The operation is not complete until either a message becomes available
      in the queue or the
      time-out occurs.</para>
      </summary>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that indicates the interval of time to wait for a message to become available.</param>
      <returns>
        <para>The <see cref="T:System.IAsyncResult" />
that identifies the
posted asynchronous request.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.MessageQueue.BeginPeek(System.TimeSpan,System.Object)">
      <summary>
        <para> Initiates an asynchronous peek operation that has a
      specified time-out and a
      specified state object, which provides associated information
      throughout the operation's lifetime. The
      operation is not complete until either a message becomes available in the
      queue or the time-out
      occurs.</para>
      </summary>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that indicates the interval of time to wait for a message to become available.</param>
      <param name="stateObject">A state object, specified by the application, that contains information associated with the asynchronous operation.</param>
      <returns>
        <para>The <see cref="T:System.IAsyncResult" /> that identifies
   the posted asynchronous request.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.MessageQueue.BeginPeek(System.TimeSpan,System.Object,System.AsyncCallback)">
      <summary>
        <para> Initiates an asynchronous peek operation that has a
      specified time-out and a specified
      state
      object, which provides associated information throughout
      the operation's lifetime.
      This overload receives notification, through a callback, of the identity of the event handler
      for the operation. The operation is not complete until either a message becomes available
      in the queue or the time-out
      occurs.</para>
      </summary>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that indicates the interval of time to wait for a message to become available.</param>
      <param name="stateObject">A state object, specified by the application, that contains information associated with the asynchronous operation.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> that will receive the notification of the asynchronous operation completion.</param>
      <returns>
        <para>The <see cref="T:System.IAsyncResult" />
that identifies the
posted asynchronous request.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.MessageQueue.BeginReceive">
      <summary>
        <para> Initiates an
      asynchronous receive operation
      that has no time-out. The operation is not complete until a message becomes
      available in the
      queue.</para>
      </summary>
      <returns>
        <para>The <see cref="T:System.IAsyncResult" />
that identifies the
posted asynchronous request.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.MessageQueue.BeginReceive(System.TimeSpan)">
      <summary>
        <para> Initiates an
      asynchronous receive operation that has a specified time-out. The operation is not complete until
      either a message becomes available in the
      queue or the time-out
      occurs.</para>
      </summary>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that indicates the interval of time to wait for a message to become available.</param>
      <returns>
        <para>The <see cref="T:System.IAsyncResult" />
that identifies the
posted asynchronous request.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.MessageQueue.BeginReceive(System.TimeSpan,System.Object)">
      <summary>
        <para> Initiates an asynchronous receive operation
      that has a
      specified time-out and a specified state object, which provides associated information
      throughout the operation's lifetime. The operation
      is not complete until either a message becomes available in the queue or the
      time-out occurs.</para>
      </summary>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that indicates the interval of time to wait for a message to become available.</param>
      <param name="stateObject">A state object, specified by the application, that contains information associated with the asynchronous operation.</param>
      <returns>
        <para>The <see cref="T:System.IAsyncResult" />
that identifies the
posted asynchronous request.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.MessageQueue.BeginReceive(System.TimeSpan,System.Object,System.AsyncCallback)">
      <summary>
        <para> Initiates an asynchronous receive operation that has a
      specified time-out and a specified state object, which provides associated
      information throughout the operation's
      lifetime. This overload receives notification, through a callback, of the identity of
      the event handler for the operation. The operation is not complete until either
      a message becomes available in the queue or the time-out
      occurs.</para>
      </summary>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that indicates the interval of time to wait for a message to become available.</param>
      <param name="stateObject">A state object, specified by the application, that contains information associated with the asynchronous operation.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" /> that will receive the notification of the asynchronous operation completion.</param>
      <returns>
        <para>The <see cref="T:System.IAsyncResult" /> that identifies the
   posted asynchronous request.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.MessageQueue.ClearConnectionCache">
      <summary>
        <para>Clears the connection cache.</para>
      </summary>
    </member>
    <member name="M:System.Messaging.MessageQueue.Close">
      <summary>
        <para>Frees all resources allocated by the <see cref="T:System.Messaging.MessageQueue" />
.</para>
      </summary>
    </member>
    <member name="M:System.Messaging.MessageQueue.Create(System.String)">
      <summary>
        <para> Creates a nontransactional Message Queuing queue at the
      specified path.</para>
      </summary>
      <param name="path">The path of the queue to create.</param>
      <returns>
        <para>A <see cref="T:System.Messaging.MessageQueue" /> that represents the
   new queue.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.MessageQueue.Create(System.String,System.Boolean)">
      <summary>
        <para> Creates a transactional or nontransactional Message Queuing queue at the
      specified path.</para>
      </summary>
      <param name="path">The path of the queue to create.</param>
      <param name="transactional">
        <see langword="true" /> to create a transactional queue; <see langword="false" /> to create a nontransactional queue.</param>
      <returns>
        <para>A <see cref="T:System.Messaging.MessageQueue" /> that represents the new
   queue.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.MessageQueue.Delete(System.String)">
      <summary>
        <para> Deletes a queue on a
      Message Queuing server.</para>
      </summary>
      <param name="path">The location of the queue to be deleted.</param>
    </member>
    <member name="M:System.Messaging.MessageQueue.EndPeek(System.IAsyncResult)">
      <summary>
        <para> Completes the specified asynchronous peek
      operation.</para>
      </summary>
      <param name="asyncResult">The <see cref="T:System.IAsyncResult" /> that identifies the asynchronous peek operation to finish, and from which to retrieve an end result.</param>
      <returns>
        <para>The <see cref="T:System.Messaging.Message" /> associated with the completed asynchronous
   operation.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.MessageQueue.EndReceive(System.IAsyncResult)">
      <summary>
        <para> Completes the specified asynchronous receive
      operation.</para>
      </summary>
      <param name="asyncResult">The <see cref="T:System.IAsyncResult" /> that identifies the asynchronous receive operation to finish, and from which to retrieve an end result.</param>
      <returns>
        <para>The <see cref="T:System.Messaging.Message" />
associated with the completed asynchronous operation.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.MessageQueue.Exists(System.String)">
      <summary>
        <para>Determines whether a Message Queuing queue at the specified path
      exists.</para>
      </summary>
      <param name="path">The location of the queue to find.</param>
      <returns>
        <para>
          <see langword="true" /> if a queue with the specified
   path exists; otherwise, <see langword="false" /> .</para>
      </returns>
    </member>
    <member name="M:System.Messaging.MessageQueue.GetAllMessages">
      <summary>
        <para>Returns all the messages that are in the queue.</para>
      </summary>
      <returns>
        <para>An array of type <see cref="T:System.Messaging.Message" /> that represents all the messages in the
   queue, in the same order as they appear in the Message Queuing
   queue.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.MessageQueue.GetEnumerator">
      <summary>
        <para>Enumerates the messages in a queue.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Collections.IEnumerator" /> that provides a dynamic connection to the 
   messages in the queue.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.MessageQueue.GetMachineId(System.String)">
      <summary>
        <para> Gets the identifier of the computer on
      which the queue referenced by this <see cref="T:System.Messaging.MessageQueue" />
      is located.</para>
      </summary>
      <param name="machineName">The name of the computer that contains the queue, without the two preceding backslashes (\\).</param>
      <returns>
        <para>A <see cref="T:System.Guid" />
that represents a unique identifier for the computer on which the queue
is located. </para>
      </returns>
    </member>
    <member name="M:System.Messaging.MessageQueue.GetMessageQueueEnumerator">
      <summary>
        <para>Provides forward-only cursor semantics to enumerate through all public
      queues on the network.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.Messaging.MessageQueueEnumerator" /> that provides a dynamic listing of all the public message
   queues on the network.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.MessageQueue.GetMessageQueueEnumerator(System.Messaging.MessageQueueCriteria)">
      <summary>
        <para>Provides forward-only cursor semantics to enumerate through all public queues on the
      network that meet the specified criteria.</para>
      </summary>
      <param name="criteria">A <see cref="T:System.Messaging.MessageQueueCriteria" /> that contains the criteria used to filter the available message queues.</param>
      <returns>
        <para>A <see cref="T:System.Messaging.MessageQueueEnumerator" /> that provides a dynamic
   listing of the public message queues on the network that satisfy the restrictions
   specified by the <paramref name="criteria" />
   parameter.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.MessageQueue.GetMessageEnumerator">
      <summary>
        <para> Creates an enumerator object for all the
      messages in the
      queue.</para>
      </summary>
      <returns>
        <para>The <see cref="T:System.Messaging.MessageEnumerator" /> holding
   the messages that
   are contained in the
   queue.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.MessageQueue.GetPrivateQueuesByMachine(System.String)">
      <summary>
        <para>Retrieves all the private queues on
      the specified computer.</para>
      </summary>
      <param name="machineName">The computer from which to retrieve the private queues.</param>
      <returns>
        <para> An array of <see cref="T:System.Messaging.MessageQueue" /> objects
   that reference the retrieved private
   queues.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.MessageQueue.GetPublicQueues">
      <summary>
        <para>Retrieves all the public queues on the network.</para>
      </summary>
      <returns>
        <para>An array of <see cref="T:System.Messaging.MessageQueue" />
objects that reference
the retrieved public queues.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.MessageQueue.GetPublicQueues(System.Messaging.MessageQueueCriteria)">
      <summary>
        <para>Retrieves all the public queues on the network that meet the specified criteria.</para>
      </summary>
      <param name="criteria">A <see cref="T:System.Messaging.MessageQueueCriteria" /> that contains the criteria used to filter the queues.</param>
      <returns>
        <para>An array of <see cref="T:System.Messaging.MessageQueue" /> objects that reference
   the retrieved public queues.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.MessageQueue.GetPublicQueuesByCategory(System.Guid)">
      <summary>
        <para>Retrieves all the public queues
      on the network that belong to the specified category.</para>
      </summary>
      <param name="category">A <see cref="T:System.Guid" /> that groups the set of queues to be retrieved.</param>
      <returns>
        <para>An array of <see cref="T:System.Messaging.MessageQueue" />
objects that reference
the retrieved public queues.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.MessageQueue.GetPublicQueuesByLabel(System.String)">
      <summary>
        <para>Retrieves all the public queues on the network that carry the specified label.</para>
      </summary>
      <param name="label">A label that groups the set of queues to be retrieved.</param>
      <returns>
        <para>An array of <see cref="T:System.Messaging.MessageQueue" />
objects that reference
the retrieved public queues.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.MessageQueue.GetPublicQueuesByMachine(System.String)">
      <summary>
        <para>Retrieves all the public queues that reside on the specified computer.</para>
      </summary>
      <param name="machineName">The name of the computer that contains the set of public queues to be retrieved.</param>
      <returns>
        <para>An array of <see cref="T:System.Messaging.MessageQueue" />
objects that
reference the public
queues on the computer.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.MessageQueue.Peek">
      <summary>
        <para> Returns without removing (peeks) the first
      message in the queue referenced by this <see cref="T:System.Messaging.MessageQueue" /> . The <see cref="M:System.Messaging.MessageQueue.Peek" />
      method is
      synchronous, so it
      blocks the current thread until a message becomes
      available.</para>
      </summary>
      <returns>
        <para>The <see cref="T:System.Messaging.Message" />
that represents the first message in the
queue.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.MessageQueue.Peek(System.TimeSpan)">
      <summary>
        <para>Returns without removing (peeks) the first message in the
      queue referenced by this <see cref="T:System.Messaging.MessageQueue" /> . The <see cref="M:System.Messaging.MessageQueue.Peek" />
      method is synchronous, so
      it blocks the
      current thread until
      a message becomes available or the specified time-out
      occurs.</para>
      </summary>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that indicates the maximum time to wait for the queue to contain a message.</param>
      <returns>
        <para>The <see cref="T:System.Messaging.Message" />
that represents the first message in the
queue.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.MessageQueue.PeekById(System.String)">
      <summary>
        <para>Peeks the message whose message identifier matches
      the <paramref name="id" /> parameter. </para>
      </summary>
      <param name="id">The <see cref="P:System.Messaging.Message.Id" /> of the message to peek.</param>
      <returns>
        <para>The <see cref="T:System.Messaging.Message" /> whose <see cref="P:System.Messaging.Message.Id" />
property matches the <paramref name="id" /> parameter.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.MessageQueue.PeekById(System.String,System.TimeSpan)">
      <summary>
        <para> Peeks the message whose message identifier matches
      the <paramref name="id" />
      parameter. Waits until the message appears in the queue or a
      time-out occurs.</para>
      </summary>
      <param name="id">The <see cref="P:System.Messaging.Message.Id" /> of the message to peek.</param>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that indicates the maximum amount of time to wait for the message to appear in the queue.</param>
      <returns>
        <para>The <see cref="T:System.Messaging.Message" /> whose <see cref="P:System.Messaging.Message.Id" /> property matches the
<paramref name="id" /> parameter.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.MessageQueue.PeekByCorrelationId(System.String)">
      <summary>
        <para> Peeks the message that matches
      the given
      correlation identifier and immediately raises an exception if no message with
      the specified correlation identifier currently exists in the
      queue.</para>
      </summary>
      <param name="correlationId">The <see cref="P:System.Messaging.Message.CorrelationId" /> of the message to peek.</param>
      <returns>
        <para>The <see cref="T:System.Messaging.Message" /> whose
<see cref="P:System.Messaging.Message.CorrelationId" /> matches the <paramref name="correlationId" /> parameter passed in.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.MessageQueue.PeekByCorrelationId(System.String,System.TimeSpan)">
      <summary>
        <para>Peeks the message that matches the given correlation identifier and waits
      until either a message with the specified correlation identifier is
      available in the queue, or the time-out expires.</para>
      </summary>
      <param name="correlationId">The <see cref="P:System.Messaging.Message.CorrelationId" /> of the message to peek.</param>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that indicates the time to wait until a new message is available for inspection .</param>
      <returns>
        <para>The <see cref="T:System.Messaging.Message" /> whose
<see cref="P:System.Messaging.Message.CorrelationId" /> matches the <paramref name="correlationId" /> parameter passed in.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.MessageQueue.Purge">
      <summary>
        <para>Deletes all the messages contained in the queue.</para>
      </summary>
    </member>
    <member name="M:System.Messaging.MessageQueue.Receive">
      <summary>
        <para> Receives the first message available in the queue referenced by the <see cref="T:System.Messaging.MessageQueue" /> . This
   call is synchronous, and blocks the current thread of execution until a message is
   available.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.Messaging.Message" /> that references the first message
   available in the queue.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.MessageQueue.Receive(System.Messaging.MessageQueueTransaction)">
      <summary>
        <para>Receives the first message available in the
      transactional queue referenced by the <see cref="T:System.Messaging.MessageQueue" /> . This
      call is synchronous, and blocks the current thread of execution until a message is
      available.</para>
      </summary>
      <param name="transaction">The <see cref="T:System.Messaging.MessageQueueTransaction" /> object.</param>
      <returns>
        <para>A <see cref="T:System.Messaging.Message" /> that references the first message
   available in the queue.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.MessageQueue.Receive(System.Messaging.MessageQueueTransactionType)">
      <summary>
        <para> Receives the first message available in
      the queue referenced by the <see cref="T:System.Messaging.MessageQueue" /> . This
      call is synchronous, and blocks the current thread of execution until a message is
      available.</para>
      </summary>
      <param name="transactionType">One of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> values, describing the type of transaction context to associate with the message.</param>
      <returns>
        <para>A <see cref="T:System.Messaging.Message" /> that references the first message
   available in the queue.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.MessageQueue.Receive(System.TimeSpan)">
      <summary>
        <para> Receives the first message available in the queue
      referenced by the <see cref="T:System.Messaging.MessageQueue" />
      and waits until
      either a message is available in the queue, or the time-out
      expires.</para>
      </summary>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that indicates the time to wait until a new message is available for inspection.</param>
      <returns>
        <para>A <see cref="T:System.Messaging.Message" /> that
   references the first message available in the
   queue.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.MessageQueue.Receive(System.TimeSpan,System.Messaging.MessageQueueTransaction)">
      <summary>
        <para>Receives the first message available in the transactional queue
      referenced by the <see cref="T:System.Messaging.MessageQueue" /> and waits until either
      a message is available in the queue, or the time-out
      expires.</para>
      </summary>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that indicates the time to wait until a new message is available for inspection.</param>
      <param name="transaction">The <see cref="T:System.Messaging.MessageQueueTransaction" /> object.</param>
      <returns>
        <para>A <see cref="T:System.Messaging.Message" /> that
   references the first message available in the
   queue.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.MessageQueue.Receive(System.TimeSpan,System.Messaging.MessageQueueTransactionType)">
      <summary>
        <para> Receives the first message available in
      the queue referenced by the <see cref="T:System.Messaging.MessageQueue" /> . This
      call is synchronous, and waits until
      either a message is available in the queue, or the time-out
      expires.</para>
      </summary>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that indicates the time to wait until a new message is available for inspection.</param>
      <param name="transactionType">One of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> values, describing the type of transaction context to associate with the message.</param>
      <returns>
        <para>A <see cref="T:System.Messaging.Message" /> that references the first message
   available in the queue.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.MessageQueue.ReceiveById(System.String)">
      <summary>
        <para> Receives the message that matches the given identifier from a non-transactional queue, and immediately raises
      an exception if no message with the specified identifier
      currently exists in the queue.</para>
      </summary>
      <param name="id">The <see cref="P:System.Messaging.Message.Id" /> of the message to receive.</param>
      <returns>
        <para>The <see cref="T:System.Messaging.Message" /> whose <see cref="P:System.Messaging.Message.Id" /> property matches the
<paramref name="id" /> parameter passed in.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.MessageQueue.ReceiveById(System.String,System.Messaging.MessageQueueTransaction)">
      <summary>
        <para>Receives the message that matches the given identifier,
      from a transactional queue, and immediately raises
      an exception if no message with the specified identifier
      currently exists in the queue.</para>
      </summary>
      <param name="id">The <see cref="P:System.Messaging.Message.Id" /> of the message to receive.</param>
      <param name="transaction">The <see cref="T:System.Messaging.MessageQueueTransaction" /> object .</param>
      <returns>
        <para>The <see cref="T:System.Messaging.Message" /> whose <see cref="P:System.Messaging.Message.Id" /> property matches the
<paramref name="id" /> parameter passed in.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.MessageQueue.ReceiveById(System.String,System.Messaging.MessageQueueTransactionType)">
      <summary>
        <para> Receives the message that matches the
      given identifier, and immediately raises an exception if no message with the specified
      identifier currently exists in the queue.</para>
      </summary>
      <param name="id">The <see cref="P:System.Messaging.Message.Id" /> of the message to receive.</param>
      <param name="transactionType">One of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> values, describing the type of transaction context to associate with the message.</param>
      <returns>
        <para>The <see cref="T:System.Messaging.Message" /> whose <see cref="P:System.Messaging.Message.Id" /> property matches the
<paramref name="id" /> parameter passed in.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.MessageQueue.ReceiveById(System.String,System.TimeSpan)">
      <summary>
        <para> Receives the message that matches the given identifier,
      from a nontransactional queue, and waits until either a message with
      the specified identifier is
      available in the queue or the time-out
      expires.</para>
      </summary>
      <param name="id">The <see cref="P:System.Messaging.Message.Id" /> of the message to receive.</param>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that indicates the time to wait until a new message is available for inspection.</param>
      <returns>
        <para>The <see cref="T:System.Messaging.Message" /> whose <see cref="P:System.Messaging.Message.Id" /> property matches the
<paramref name="id" /> parameter passed in.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.MessageQueue.ReceiveById(System.String,System.TimeSpan,System.Messaging.MessageQueueTransaction)">
      <summary>
        <para> Receives the message that matches the
      given identifier, from a transactional queue, and waits
      until either a message with the specified identifier is
      available in the queue or the time-out
      expires.</para>
      </summary>
      <param name="id">The <see cref="P:System.Messaging.Message.Id" /> of the message to receive.</param>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that indicates the time to wait until a new message is available for inspection.</param>
      <param name="transaction">The <see cref="T:System.Messaging.MessageQueueTransaction" /> object .</param>
      <returns>
        <para>The <see cref="T:System.Messaging.Message" /> whose <see cref="P:System.Messaging.Message.Id" /> property matches the
<paramref name="id" /> parameter passed in.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.MessageQueue.ReceiveById(System.String,System.TimeSpan,System.Messaging.MessageQueueTransactionType)">
      <summary>
        <para> Receives the message that matches the given identifier,
      and waits until either a message with the specified identifier is available in
      the queue or the time-out expires.</para>
      </summary>
      <param name="id">The <see cref="P:System.Messaging.Message.Id" /> of the message to receive.</param>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that indicates the time to wait until a new message is available for inspection.</param>
      <param name="transactionType">One of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> values, describing the type of transaction context to associate with the message.</param>
      <returns>
        <para>The <see cref="T:System.Messaging.Message" /> whose <see cref="P:System.Messaging.Message.Id" /> property matches the
<paramref name="id" /> parameter passed in.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String)">
      <summary>
        <para>Receives the message that matches the given correlation identifier, from a nontransactional queue, and
      immediately raises an exception if no message with the specified correlation
      identifier currently exists in the queue.</para>
      </summary>
      <param name="correlationId">The <see cref="P:System.Messaging.Message.CorrelationId" /> of the message to receive.</param>
      <returns>
        <para>The <see cref="T:System.Messaging.Message" /> whose <see cref="P:System.Messaging.Message.CorrelationId" /> matches the
<paramref name="correlationId" /> parameter passed in.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String,System.Messaging.MessageQueueTransaction)">
      <summary>
        <para> Receives the message that matches the given correlation identifier, from a transactional
      queue, and immediately raises an exception if no message with the specified correlation
      identifier currently exists in the queue.</para>
      </summary>
      <param name="correlationId">The <see cref="P:System.Messaging.Message.CorrelationId" /> of the message to receive.</param>
      <param name="transaction">The <see cref="T:System.Messaging.MessageQueueTransaction" /> object.</param>
      <returns>
        <para>The <see cref="T:System.Messaging.Message" /> whose <see cref="P:System.Messaging.Message.CorrelationId" /> matches the
<paramref name="correlationId" /> parameter passed in.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String,System.Messaging.MessageQueueTransactionType)">
      <summary>
        <para> Receives the message that matches the given correlation
      identifier, and immediately raises an exception if no message with the specified correlation
      identifier currently exists in the queue.</para>
      </summary>
      <param name="correlationId">The <see cref="P:System.Messaging.Message.CorrelationId" /> of the message to receive.</param>
      <param name="transactionType">One of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> values, describing the type of transaction context to associate with the message.</param>
      <returns>
        <para>The <see cref="T:System.Messaging.Message" /> whose <see cref="P:System.Messaging.Message.CorrelationId" /> matches the
<paramref name="correlationId" /> parameter passed in.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String,System.TimeSpan)">
      <summary>
        <para>Receives the message that matches the given correlation identifier, from a nontransactional queue, and waits
      until either a message with the specified correlation identifier is available in
      the queue, or the time-out expires.</para>
      </summary>
      <param name="correlationId">The <see cref="P:System.Messaging.Message.CorrelationId" /> of the message to receive.</param>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that indicates the time to wait until a new message is available for inspection .</param>
      <returns>
        <para>The <see cref="T:System.Messaging.Message" /> whose <see cref="P:System.Messaging.Message.CorrelationId" /> matches the
<paramref name="correlationId" /> parameter passed in.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String,System.TimeSpan,System.Messaging.MessageQueueTransaction)">
      <summary>
        <para> Receives the message
      that matches the given correlation identifier, from
      a transactional queue, and waits until either a message with
      the specified correlation identifier is available in
      the queue, or the time-out expires.</para>
      </summary>
      <param name="correlationId">The <see cref="P:System.Messaging.Message.CorrelationId" /> of the message to receive.</param>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that indicates the time to wait until a new message is available for inspection .</param>
      <param name="transaction">The <see cref="T:System.Messaging.MessageQueueTransaction" /> object.</param>
      <returns>
        <para>The <see cref="T:System.Messaging.Message" /> whose <see cref="P:System.Messaging.Message.CorrelationId" /> matches the
<paramref name="correlationId" /> parameter passed in.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String,System.TimeSpan,System.Messaging.MessageQueueTransactionType)">
      <summary>
        <para> Receives the message that matches the given correlation identifier, and
      waits until either a message with the specified correlation identifier is available in
      the queue, or the time-out expires.</para>
      </summary>
      <param name="correlationId">The <see cref="P:System.Messaging.Message.CorrelationId" /> of the message to receive.</param>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that indicates the time to wait until a new message is available for inspection .</param>
      <param name="transactionType">One of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> values, describing the type of transaction context to associate with the message.</param>
      <returns>
        <para>The <see cref="T:System.Messaging.Message" /> whose <see cref="P:System.Messaging.Message.CorrelationId" /> matches the
<paramref name="correlationId" /> parameter passed in.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.MessageQueue.Refresh">
      <summary>
        <para>Refreshes the properties presented by the <see cref="T:System.Messaging.MessageQueue" />
to reflect the current state of the
resource.</para>
      </summary>
    </member>
    <member name="M:System.Messaging.MessageQueue.Send(System.Object)">
      <summary>
        <para> Sends an object to nontransactional queue referenced by this <see cref="T:System.Messaging.MessageQueue" />
.</para>
      </summary>
      <param name="obj">The object to send to the queue.</param>
    </member>
    <member name="M:System.Messaging.MessageQueue.Send(System.Object,System.Messaging.MessageQueueTransaction)">
      <summary>
        <para>Sends an object to the transactional queue referenced by this <see cref="T:System.Messaging.MessageQueue" />
.</para>
      </summary>
      <param name="obj">The object to send to the queue.</param>
      <param name="transaction">The <see cref="T:System.Messaging.MessageQueueTransaction" /> object.</param>
    </member>
    <member name="M:System.Messaging.MessageQueue.Send(System.Object,System.Messaging.MessageQueueTransactionType)">
      <summary>
        <para> Sends an object to the queue referenced by this <see cref="T:System.Messaging.MessageQueue" />
.</para>
      </summary>
      <param name="obj">The object to send to the queue.</param>
      <param name="transactionType">One of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> values, describing the type of transaction context to associate with the message.</param>
    </member>
    <member name="M:System.Messaging.MessageQueue.Send(System.Object,System.String)">
      <summary>
        <para> Sends an object to the nontransactional queue referenced by this <see cref="T:System.Messaging.MessageQueue" />
and specifies
a label for the message.</para>
      </summary>
      <param name="obj">The object to send to the queue.</param>
      <param name="label">The label of the message.</param>
    </member>
    <member name="M:System.Messaging.MessageQueue.Send(System.Object,System.String,System.Messaging.MessageQueueTransaction)">
      <summary>
        <para>Sends an object to the transactional queue referenced by this <see cref="T:System.Messaging.MessageQueue" />
and
specifies a label for the message.</para>
      </summary>
      <param name="obj">The object to send to the queue.</param>
      <param name="label">The label of the message.</param>
      <param name="transaction">The <see cref="T:System.Messaging.MessageQueueTransaction" /> object.</param>
    </member>
    <member name="M:System.Messaging.MessageQueue.Send(System.Object,System.String,System.Messaging.MessageQueueTransactionType)">
      <summary>
        <para> Sends an object to the queue referenced by this <see cref="T:System.Messaging.MessageQueue" />
and specifies a
label for the message.</para>
      </summary>
      <param name="obj">The object to send to the queue.</param>
      <param name=" label">The label of the message.</param>
      <param name="transactionType">One of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> values, describing the type of transaction context to associate with the message.</param>
    </member>
    <member name="M:System.Messaging.MessageQueue.ResetPermissions">
      <summary>
        <para>Resets the permission list to the operating system's default
      values. Removes any queue permissions you have appended to the default list.</para>
      </summary>
    </member>
    <member name="M:System.Messaging.MessageQueue.SetPermissions(System.String,System.Messaging.MessageQueueAccessRights)">
      <summary>
        <para>Gives a computer, group, or user the specified access
      rights.</para>
      </summary>
      <param name="user">The individual, group, or computer that gets additional rights to the queue.</param>
      <param name=" rights">A <see cref="T:System.Messaging.MessageQueueAccessRights" /> that indicates the set of rights to the queue that Message Queuing assigns to the <paramref name="user" /> passed in.</param>
    </member>
    <member name="M:System.Messaging.MessageQueue.SetPermissions(System.String,System.Messaging.MessageQueueAccessRights,System.Messaging.AccessControlEntryType)">
      <summary>
        <para>Gives a computer, group, or user the specified access
      rights, with the specified access control type (allow, deny, revoke, or set).</para>
      </summary>
      <param name="user">The individual, group, or computer that gets additional rights to the queue.</param>
      <param name=" rights">A <see cref="T:System.Messaging.MessageQueueAccessRights" /> that indicates the set of rights to the queue that Message Queuing assigns to the <paramref name="user" /> passed in.</param>
      <param name=" entryType">An <see cref="T:System.Messaging.AccessControlEntryType" /> that specifies whether to grant, deny, or revoke the permissions specified by the <paramref name="rights" /> parameter. </param>
    </member>
    <member name="M:System.Messaging.MessageQueue.SetPermissions(System.Messaging.MessageQueueAccessControlEntry)">
      <summary>
        <para>Assigns access rights to the queue based on the
      contents of an access control entry.</para>
      </summary>
      <param name="ace">A <see cref="T:System.Messaging.MessageQueueAccessControlEntry" /> that specifies a user, an access type, and a permission type.</param>
    </member>
    <member name="M:System.Messaging.MessageQueue.SetPermissions(System.Messaging.AccessControlList)">
      <summary>
        <para>Assigns access rights to the queue based on the contents
      of an access control list.</para>
      </summary>
      <param name="dacl">An <see cref="T:System.Messaging.AccessControlList" /> that contains one or more access control entries that specify the trustees and the permissions to grant.</param>
    </member>
    <member name="P:System.Messaging.MessageQueue.Authenticate">
      <summary>
        <para> Gets or sets a value indicating whether the queue accepts only authenticated
      messages.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessageQueue.BasePriority">
      <summary>
        <para> Gets or sets the base priority Message
      Queuing uses to route a public queue's messages over the network.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessageQueue.CanRead">
      <summary>
        <para> Gets a value indicating whether the <see cref="T:System.Messaging.MessageQueue" />
can be read.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessageQueue.CanWrite">
      <summary>
        <para> Gets a value indicating whether the <see cref="T:System.Messaging.MessageQueue" /> can
   be written to.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessageQueue.Category">
      <summary>
        <para>Gets or sets the queue category.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessageQueue.CreateTime">
      <summary>
        <para>Gets the time and date that the queue was created in Message Queuing.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessageQueue.DefaultPropertiesToSend">
      <summary>
        <para>Gets or sets the message property values to be used by
      default when the application sends messages to the
      queue.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessageQueue.DenySharedReceive">
      <summary>
        <para>Gets or sets a value indicating whether this <see cref="T:System.Messaging.MessageQueue" /> has exclusive access to receive messages from the Message Queuing queue.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessageQueue.EnableConnectionCache">
      <summary>
        <para>Gets or sets a value indicating whether a cache of
      connections will be maintained by the application.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessageQueue.EncryptionRequired">
      <summary>
        <para>Gets or sets a value indicating whether the queue accepts only nonprivate
      (nonencrypted) messages.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessageQueue.FormatName">
      <summary>
        <para>Gets the unique queue name that Message Queuing generated at the time of the queue's creation.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessageQueue.Formatter">
      <summary>
        <para>Gets or sets the formatter used to serialize an object
      into or deserialize
      an object
      from the body of a message read from or written
      to the queue.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessageQueue.Id">
      <summary>
        <para>Gets the unique Message Queuing identifier of the queue.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessageQueue.Label">
      <summary>
        <para>Gets or sets the queue description.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessageQueue.LastModifyTime">
      <summary>
        <para>Gets the last time the properties of a queue were modified.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessageQueue.MachineName">
      <summary>
        <para>Gets or sets the name of the computer where the Message
      Queuing queue
      is located.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessageQueue.MaximumJournalSize">
      <summary>
        <para>Gets or sets the maximum size of the journal queue.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessageQueue.MaximumQueueSize">
      <summary>
        <para>Gets or sets the maximum size of the queue.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessageQueue.MessageReadPropertyFilter">
      <summary>
        <para>Gets or sets the property filter for receiving
      or peeking messages.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessageQueue.Path">
      <summary>
        <para> Gets or sets the queue's path. Setting the <see cref="P:System.Messaging.MessageQueue.Path" /> causes the <see cref="T:System.Messaging.MessageQueue" /> to point to a new queue.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessageQueue.QueueName">
      <summary>
        <para>Gets or sets the friendly
      name that identifies the queue.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessageQueue.ReadHandle">
      <summary>
        <para>Gets the native handle used to read messages from the message queue.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessageQueue.SynchronizingObject">
      <summary>
        <para> Gets or sets the object
      that marshals the event-handler call resulting from a <see cref="E:System.Messaging.MessageQueue.ReceiveCompleted" /> or <see cref="E:System.Messaging.MessageQueue.PeekCompleted" />
      event.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessageQueue.Transactional">
      <summary>
        <para>Gets a
      value indicating whether the queue accepts only transactions.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessageQueue.UseJournalQueue">
      <summary>
        <para>Gets or sets a value indicating whether received messages are copied to the
      journal queue.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessageQueue.WriteHandle">
      <summary>
        <para> Gets the native handle used to send messages to the message queue.</para>
      </summary>
    </member>
    <member name="E:System.Messaging.MessageQueue.PeekCompleted">
      <summary>
        <para>Occurs when a message is read without being removed
      from the queue. This is a result of the asynchronous operation, <see cref="M:System.Messaging.MessageQueue.BeginPeek" />
      .</para>
      </summary>
    </member>
    <member name="E:System.Messaging.MessageQueue.ReceiveCompleted">
      <summary>
        <para> Occurs when a message has been removed from the queue.
      This event is raised by the asynchronous operation, <see cref="M:System.Messaging.MessageQueue.BeginReceive" />.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessageQueue.AsynchronousRequest.AsyncObject">
      <summary>
    IAsyncResult implementation        
 </summary>
    </member>
    <member name="P:System.Messaging.MessageQueue.AsynchronousRequest.AsyncState">
      <summary>
    IAsyncResult implementation        
 </summary>
    </member>
    <member name="P:System.Messaging.MessageQueue.AsynchronousRequest.AsyncWaitHandle">
      <summary>
    IAsyncResult implementation        
 </summary>
    </member>
    <member name="P:System.Messaging.MessageQueue.AsynchronousRequest.CompletedSynchronously">
      <summary>
    IAsyncResult implementation        
 </summary>
    </member>
    <member name="T:System.Messaging.MessageQueueAccessControlEntry">
      <summary>
        <para>Specifies access rights for a trustee (user, group, or
      computer) to perform Message Queuing tasks.</para>
      </summary>
    </member>
    <member name="M:System.Messaging.MessageQueueAccessControlEntry.#ctor(System.Messaging.Trustee,System.Messaging.MessageQueueAccessRights)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Messaging.MessageQueueAccessControlEntry" /> class, granting the specified Message
   Queuing access rights to the specified trustee.</para>
      </summary>
      <param name="trustee">A <see cref="T:System.Messaging.Trustee" /> that specifies a user, group, computer, domain, or alias.</param>
      <param name=" rights">A bitwise combination of the <see cref="T:System.Messaging.MessageQueueAccessRights" /> values which defines the combination of rights to grant to the trustee.</param>
    </member>
    <member name="M:System.Messaging.MessageQueueAccessControlEntry.#ctor(System.Messaging.Trustee,System.Messaging.MessageQueueAccessRights,System.Messaging.AccessControlEntryType)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Messaging.MessageQueueAccessControlEntry" /> class, with the 
   specified trustee and Message Queuing access rights. The type of access (such as
<see langword="Allow" /> or <see langword="Deny" /> 
) is defined
by the entry type you pass in.</para>
      </summary>
      <param name="trustee">A <see cref="T:System.Messaging.Trustee" /> that specifies a user, group, computer, domain, or alias.</param>
      <param name=" rights">A bitwise combination of the <see cref="T:System.Messaging.MessageQueueAccessRights" /> values which defines the combination of rights to grant to the trustee.</param>
      <param name=" entryType">One of the <see cref="T:System.Messaging.AccessControlEntryType" /> values, which specifies whether to allow, deny, set or revoke the specified rights.</param>
    </member>
    <member name="P:System.Messaging.MessageQueueAccessControlEntry.MessageQueueAccessRights">
      <summary>
        <para>Gets or sets the set of Message Queuing-specific rights to apply to the trustee.</para>
      </summary>
    </member>
    <member name="T:System.Messaging.MessageQueueAccessRights">
      <summary>
        <para> Specifies
      a set of object-specific access rights for operations specific to Message Queuing.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueAccessRights.DeleteMessage">
      <summary>
        <para>The right to delete messages from the queue.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueAccessRights.PeekMessage">
      <summary>
        <para>The right to peek messages from the queue.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueAccessRights.WriteMessage">
      <summary>
        <para>The right to send messages to the queue.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueAccessRights.DeleteJournalMessage">
      <summary>
        <para>The right to delete messages from the journal queue.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueAccessRights.SetQueueProperties">
      <summary>
        <para>The right to modify properties of the queue.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueAccessRights.GetQueueProperties">
      <summary>
        <para>The right to read properties of the queue.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueAccessRights.DeleteQueue">
      <summary>
        <para>The right to delete the queue.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueAccessRights.GetQueuePermissions">
      <summary>
        <para>The right to read queue permissions.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueAccessRights.ChangeQueuePermissions">
      <summary>
        <para>The right to modify queue permissions.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueAccessRights.TakeQueueOwnership">
      <summary>
        <para>The right to take ownership of the queue.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueAccessRights.ReceiveMessage">
      <summary>
        <para>The right to receive messages from the queue. This 
      includes the rights to delete and peek messages.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueAccessRights.ReceiveJournalMessage">
      <summary>
        <para>The right to receive messages from the journal queue. This
      includes the rights to delete and peek messages from the journal queue.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueAccessRights.GenericRead">
      <summary>
        <para>A combination of <see langword="GetQueueProperties" />, 
<see langword="GetQueuePermissions" />, <see langword="ReceiveMessage" />, and 
<see langword="ReceiveJournalMessage" /> .</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueAccessRights.GenericWrite">
      <summary>
        <para>A combination of <see langword="GetQueueProperties" />, 
<see langword="GetQueuePermissions" />, and <see langword="WriteMessage" /> .</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueAccessRights.FullControl">
      <summary>
        <para>Full rights to the queue. A union of all other rights in the enumeration.</para>
      </summary>
    </member>
    <member name="T:System.Messaging.MessageQueueCriteria">
      <summary>
        <para> Filters message queues when performing a query using
      the <see cref="T:System.Messaging.MessageQueue" /> class's <see cref="M:System.Messaging.MessageQueue.GetPublicQueues" />
      method.
      </para>
      </summary>
    </member>
    <member name="M:System.Messaging.MessageQueueCriteria.ClearAll">
      <summary>
        <para> Clears all properties from being built into a filter
      and puts all property values into a "not set" state.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessageQueueCriteria.CreatedAfter">
      <summary>
        <para>Gets or sets the lower boundary of the
      queue creation date and time by which to filter queues on
      the network.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessageQueueCriteria.CreatedBefore">
      <summary>
        <para>Gets or sets the upper boundary of the
      queue creation date and time by which to filter queues on
      the network.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessageQueueCriteria.Label">
      <summary>
        <para> Gets or sets the label
      by which to filter queues in the network.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessageQueueCriteria.MachineName">
      <summary>
        <para> Gets or sets the computer
      name by which to filter queues in the network.
      </para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessageQueueCriteria.ModifiedAfter">
      <summary>
        <para>Gets or sets the lower boundary of the
      queue modification date and time by which to filter queues on
      the network.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessageQueueCriteria.ModifiedBefore">
      <summary>
        <para>Gets or sets the upper boundary of the
      queue modification date and time by which to filter queues on
      the network.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessageQueueCriteria.Category">
      <summary>
        <para> Gets or sets the
      category by which to filter queues in the network.
      </para>
      </summary>
    </member>
    <member name="T:System.Messaging.MessageQueueEnumerator">
      <summary>
        <para>Provides a forward-only cursor to enumerate through messages in a message
      queue. </para>
      </summary>
    </member>
    <member name="M:System.Messaging.MessageQueueEnumerator.Close">
      <summary>
        <para>Frees the resources associated with the enumerator.</para>
      </summary>
    </member>
    <member name="M:System.Messaging.MessageQueueEnumerator.Dispose">
      <summary>
        <para> Releases all resources used by
      the <see cref="T:System.Messaging.MessageQueueEnumerator" /> .</para>
      </summary>
    </member>
    <member name="M:System.Messaging.MessageQueueEnumerator.Dispose(System.Boolean)">
      <summary>
        <para>Releases the unmanaged resources used by the <see cref="T:System.Messaging.MessageQueueEnumerator" /> and optionally releases the managed
   resources.</para>
      </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Messaging.MessageQueueEnumerator.MoveNext">
      <summary>
        <para> Advances the enumerator to the next queue of the enumeration, if one
      is currently available.</para>
      </summary>
      <returns>
        <para>
          <see langword="true," /> if the enumerator was succesfully
   advanced to the next queue; <see langword="false" /> , if the
   enumerator has reached the end of the enumeration.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.MessageQueueEnumerator.Reset">
      <summary>
        <para>Resets the cursor, so it points to the beginning of the enumeration.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessageQueueEnumerator.Current">
      <summary>
        <para>Gets the current <see cref="T:System.Messaging.MessageQueue" /> of the enumeration.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessageQueueEnumerator.LocatorHandle">
      <summary>
        <para> Gets the native Message Queuing handle used to locate queues
      in a network.</para>
      </summary>
    </member>
    <member name="T:System.Messaging.MessageQueueErrorCode">
      <summary>
        <para>Identifies the source of an error
      that occurred within the Message Queuing application and generated a
   <see cref="T:System.Messaging.MessageQueueException" /> exception.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.Generic">
      <summary>
        <para>Message text: Generic Error.</para>
        <para>Message Queuing returns this error if it cannot identify a more specific
      source.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.QueueNotFound">
      <summary>
        <para>Message text: The queue is not registered in the directory service.</para>
        <para> Message Queuing returns this error if
      it cannot find the queue. This includes public queues not registered in the
      directory service and Internet queues that do not exist in the Message Queuing
      namespace.
      
   </para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.QueueExists">
      <summary>
        <para>Message text: A queue with the same pathname is already registered.</para>
        <para>Message Queuing registers public queues in the directory service, and
      registers private queues on the local computer. </para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.OperationCanceled">
      <summary>
        <para>Message text: The operation was canceled before it could be completed.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.SharingViolation">
      <summary>
        <para>Message text: Sharing violation. The queue is already opened for
      exclusive receive.</para>
        <para>Message Queuing returns this error if an application is 
      trying to open an already opened queue that has exclusive read rights. For more information
      about receiving messages exclusively from a queue, see the <see cref="T:System.Messaging.MessageQueue" />
      class's <see cref="P:System.Messaging.MessageQueue.DenySharedReceive" />
      property.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.ServiceNotAvailable">
      <summary>
        <para>Message text: The Message Queues service is not available.</para>
        <para> Message Queuing returns this error if the application is unable
      to connect to the Queue Manager.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.MachineNotFound">
      <summary>
        <para>Message text: The specified computer could not be found.</para>
        <para> Message Queuing returns this error if it cannot find
      the queue's computer in the directory service.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.IllegalUser">
      <summary>
        <para>Message text: The user has an invalid user name.</para>
        <para>Message Queuing returns this error if your application is connecting to it
      through an invalid user name.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.NoDs">
      <summary>
        <para>Message text: No connection with this site's controller(s).</para>
        <para> Message Queuing returns this error if the application
      cannot access the directory service. If this error is returned, verify
      permissions for accessing the directory service.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.IllegalQueuePathName">
      <summary>
        <para>Message text: Invalid queue path name.</para>
        <para>See the <see cref="T:System.Messaging.MessageQueue" /> class's <see cref="P:System.Messaging.MessageQueue.Path" /> property for valid path syntax options.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.IllegalPropertyValue">
      <summary>
        <para>Message text: Invalid property value.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.IOTimeout">
      <summary>
        <para>Message text: The receive or peek message time-out has expired.</para>
        <para>Message Queuing returns this error if the time-out specified in a call to
   <see cref="M:System.Messaging.MessageQueue.Receive" qualify="true" /> or <see cref="M:System.Messaging.MessageQueue.Peek" qualify="true" /> expires before a new message
      arrives in the queue. This can only happen if there was no message already
      in the queue; both methods would return immediately if a message
      exists.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.MessageAlreadyReceived">
      <summary>
        <para>Message text: A message that is currently pointed at by the cursor has been removed from
      the queue by another process or by another call to receive the
      message without the use of this cursor.</para>
        <para>Message Queuing returns this error when some other
      cursor, application, or the system administrator has already removed the message
      from the queue. This error is most likely to occur when using the <see cref="T:System.Messaging.MessageEnumerator" /> class, such as the instance returned
      through a call to <see cref="M:System.Messaging.MessageQueue.GetMessageEnumerator" qualify="true" /> or <see cref="M:System.Messaging.MessageQueue.GetEnumerator" qualify="true" />
      .</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.IllegalFormatName">
      <summary>
        <para>Message text: The given format name is invalid.</para>
        <para>For valid format name syntax options, see the <see cref="T:System.Messaging.MessageQueue" /> class's <see cref="P:System.Messaging.MessageQueue.FormatName" /> 
property.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.UnsupportedFormatNameOperation">
      <summary>
        <para> Message text: The requested operation
      for the specified format name is not supported.</para>
        <para> Message Queuing returns
      this error when the requested operation is not supported for the specified
      format name. Operations include trying to open a queue to receive messages by specifying
      a direct format name.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.CannotImpersonateClient">
      <summary>
        <para> Message text: The RPC server cannot impersonate the client application, hence security
      credentials could not be verified.</para>
        <para> Message Queuing returns this error if the
      directory service server cannot impersonate the client application. This is necessary
      to verify the security credentials.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.AccessDenied">
      <summary>
        <para>Message text: Access is denied.</para>
        <para>Message Queuing returns this error if access to the 
      specified queue or computer is denied. If this error is returned, verify
      that you have access rights for the operation, such as creating, deleting, or
      setting properties for a queue. For information about changing access rights
      for a queue, see the <see cref="T:System.Messaging.MessageQueueAccessRights" /> and <see cref="M:System.Messaging.MessageQueue.SetPermissions(System.String,System.Messaging.MessageQueueAccessRights)" qualify="true" />
      topics.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.PrivilegeNotHeld">
      <summary>
        <para>Message text: Client does not have the required privileges to perform the operation.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.InsufficientResources">
      <summary>
        <para>Message text: Insufficient resources to perform operation.</para>
        <para>Message Queuing returns this error, for example, if there is not enough
      memory to complete the operation. When this error is returned, the operation
      fails.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.MessageStorageFailed">
      <summary>
        <para>Message text: Could not store a recoverable or journal message. Message was not sent.</para>
        <para>Message Queuing returns this error if the local computer cannot store a
      recoverable message (one whose delivery is guaranteed in the case of a network
      problem) or a journal message. See the <see cref="T:System.Messaging.Message" /> class's <see cref="P:System.Messaging.Message.Recoverable" /> and <see cref="P:System.Messaging.Message.UseJournalQueue" /> properties for more information
      about these message sending options.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.InvalidCertificate">
      <summary>
        <para>Message text: The user certificate is not valid.</para>
        <para>Message Queuing returns this error if the security certificate specified in
      the <see cref="T:System.Messaging.Message" /> class's <see cref="P:System.Messaging.Message.SenderCertificate" /> property is invalid, or if the certificate is
      not correctly placed in the Microsoft Internet Explorer personal certificate
      store.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.CorruptedInternalCertificate">
      <summary>
        <para>Message text: The internal Message Queuing certificate is corrupted.</para>
        <para>This error applies only to Message Queuing 1.0.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.NoInternalUserCertificate">
      <summary>
        <para>Message text: The internal Message Queuing certificate for the user
      does not exist.</para>
        <para>Message Queuing returns this error if no internal certificate
      is registered or the registered certificate is corrupted. </para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.CorruptedSecurityData">
      <summary>
        <para> Message text: A cryptographic function has failed.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.CorruptedPersonalCertStore">
      <summary>
        <para>Message text: The personal certificate store is corrupted.</para>
        <para>Message Queuing returns this error when the Microsoft Internet Explorer
      personal certificate store is corrupted.</para>
        <para>
        </para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.ComputerDoesNotSupportEncryption">
      <summary>
        <para>Message text: The computer does not support encryption operations.</para>
        <para>Message Queuing returns this error when the application requests encryption and the computer (source or destination)
      does not support encryption operations. When this error is returned, the
      encryption operation fails. For more information about using encryption, see the <see cref="P:System.Messaging.MessageQueue.EncryptionRequired" qualify="true" /> and <see cref="P:System.Messaging.Message.EncryptionAlgorithm" qualify="true" />
      topics.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.CouldNotGetUserSid">
      <summary>
        <para>Message text: Could not get the SID information out of the thread token.</para>
        <para>For more information about sender identifiers, see the <see cref="T:System.Messaging.Message" /> class's <see cref="P:System.Messaging.Message.SenderId" /> 
property.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.CouldNotGetAccountInfo">
      <summary>
        <para>Message text: Could not get the account information for the user.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.PropertyNotAllowed">
      <summary>
        <para> Message text: Invalid property
      for the requested operation</para>
        <para>
        </para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.InsufficientProperties">
      <summary>
        <para>Message text: Not all the required properties for the operation were specified
      in the input parameters.</para>
        <para>
        </para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.MachineExists">
      <summary>
        <para>Message text: Computer with the same name already exists in the site.</para>
        <para>
        </para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.DsIsFull">
      <summary>
        <para>Message text: Directory service is full.</para>
        <para>Message Queuing returns this error if the information store is full. This
      error applies only to Message Queuing 1.0.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.DsError">
      <summary>
        <para>Message text: Internal directory service error.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.InvalidOwner">
      <summary>
        <para>Message text: Invalid object owner. For example CreateQueue failed because the
      Queue Manager object is invalid.</para>
        <para> 
      Message Queuing returns this error, for example, if your
      application attempts to create a queue on a computer on which Message Queuing is
      not installed.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.UnsupportedAccessMode">
      <summary>
        <para>Message text: The specified access mode is not supported.</para>
        <para>Message Queuing returns this error if the access mode specified when opening
      the queue is set to an invalid value, or the access mode and the share mode
      specified are not compatible.</para>
        <para>
        </para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.DeleteConnectedNetworkInUse">
      <summary>
        <para> Message text: The connected network cannot be deleted; it is in use.</para>
        <para>Message Queuing returns this error if it cannot delete the specified
      connected network because the network is defined in at least one other
      computer. Remove the connected network from all connected network lists and try
      again to delete it.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.NoResponseFromObjectServer">
      <summary>
        <para>Message text: No response from object owner.</para>
        <para>Message Queuing returns this error if there is no
      response from the directory service server. When this error is returned, the
      status of the operation is unknown.</para>
        <para>
        </para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.ObjectServerNotAvailable">
      <summary>
        <para>Message text: Object owner is not reachable.</para>
        <para>Message Queuing returns this error if the directory
      service server for the object is not available. When this error is returned,
      the operation fails.</para>
        <para>
        </para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.QueueNotAvailable">
      <summary>
        <para>Message text: Error while reading from a queue residing on a remote computer.</para>
        <para>
        </para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.DtcConnect">
      <summary>
        <para>Message text: Cannot connect to MS DTC.</para>
        <para>Message Queuing returns this error if it is unable to connect to the 
      Microsoft Distributed Transaction Coordinator.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.TransactionImport">
      <summary>
        <para>Message text: Cannot import the transaction.</para>
        <para>
        </para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.TransactionUsage">
      <summary>
        <para>Message text: Wrong transaction usage.</para>
        <para>Message Queuing returns this error if an attempt was made to open a remote
      queue for read access from within a transaction, or an attempt was made to read
      a message from a nontransactional queue from within a transaction.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.TransactionSequence">
      <summary>
        <para>Message text: Wrong transaction operations sequence.</para>
        <para>
        </para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.MissingConnectorType">
      <summary>
        <para>Message text: Connector Type is mandatory when sending an Acknowledgment or secure message.</para>
        <para>Message Queuing returns this error when the application sets a property typically set by Message Queuing, but
      doesn't specify the connector to use. For more information about connector
      types, see the <see cref="T:System.Messaging.Message" /> class's <see cref="P:System.Messaging.Message.ConnectorType" />
      property.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.TransactionEnlist">
      <summary>
        <para>Message text: Cannot enlist the transaction.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.QueueDeleted">
      <summary>
        <para> Message text: The queue was deleted. Messages cannot be received anymore using this
 queue instance. The queue should be closed.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.IllegalContext">
      <summary>
        <para> Message text: Invalid context parameter.</para>
        <para>
        </para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.MqisServerEmpty">
      <summary>
        <para>Message text: The list of MQIS servers (in registry) is empty.</para>
        <para>
        </para>
        <para>This error applies only to Message Queuing 1.0.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.MqisReadOnlyMode">
      <summary>
        <para>Message text: MQIS database is in read-only mode.</para>
        <para>
        </para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.IllegalOperation">
      <summary>
        <para>Message text: The operation is invalid on foreign message queuing systems.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.WriteNotAllowed">
      <summary>
        <para>Message text: Another MQIS server is being installed; write operations to the
      database are not allowed at this time.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.WksCantServeClient">
      <summary>
        <para>Message text: Message Queuing-independent clients cannot serve Message Queuing-dependent
      clients.</para>
        <para>
        </para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.DependentClientLicenseOverflow">
      <summary>
        <para>Message text: The number of dependent clients served by this Message Queuing server reached
      its upper limit.</para>
        <para>
        </para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.CorruptedQueueWasDeleted">
      <summary>
        <para>Message text: The .ini file for the queue in LQS was deleted because it was corrupted.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.RemoteMachineNotAvailable">
      <summary>
        <para>Message text: The remote machine is not available.</para>
        <para>
        </para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.UnsupportedOperation">
      <summary>
        <para>Message text: The operation is not supported for a WORKGROUP installation computer.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.EncryptionProviderNotSupported">
      <summary>
        <para>Message text: The Cryptographic Service Provider is not supported by Message Queuing.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.CannotSetCryptographicSecurityDescriptor">
      <summary>
        <para>Message text: Unable to set the security descriptor for the cryptographic keys.</para>
        <para>For information about cryptographic providers, see the <see cref="T:System.Messaging.CryptographicProviderType" /> and <see cref="P:System.Messaging.Message.AuthenticationProviderType" qualify="true" /> 
topics.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.CertificateNotProvided">
      <summary>
        <para>Message text: A user attempted to send an authenticated message without a certificate.</para>
        <para>Message Queuing returns this error if the sending application attempts to use security context information to authenticate
      a message, and the security context does not include a certificate.
      For more information about certificates, see the <see cref="T:System.Messaging.Message" /> class's <see cref="P:System.Messaging.Message.SenderCertificate" />
      property.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.CannotCreateCertificateStore">
      <summary>
        <para>Message text: Unable to create a certificate store for the internal certificate.</para>
        <para>Message Queuing returns this error if you do not have permission to
      manipulate your own profile.</para>
        <para>
        </para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.CannotOpenCertificateStore">
      <summary>
        <para>Message text: Unable to open the certificates store for the internal certificate.</para>
        <para>Message Queuing returns this error if you do not have permission to
      manipulate your own profile.</para>
        <para>
        </para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.IllegalEnterpriseOperation">
      <summary>
        <para>Message text: The operation is invalid for a Message Queuing services object.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.CannotGrantAddGuid">
      <summary>
        <para>Message text: Failed to grant the "Add Guid" permission to current user.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.CannotLoadMsmqOcm">
      <summary>
        <para>Message text: Cannot load the MSMQOCM.DLL library.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.NoEntryPointMsmqOcm">
      <summary>
        <para>Message text: Cannot locate an entry point in the MSMQOCM.DLL library.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.NoMsmqServersOnDc">
      <summary>
        <para>Message text: Failed to find Message Queuing servers on domain controllers.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.CannotJoinDomain">
      <summary>
        <para>Message text: Failed to join Message Queuing enterprise on Windows 2000 domain.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.CannotCreateOnGlobalCatalog">
      <summary>
        <para>Message text: Failed to create an object on a specified global catalog server.</para>
        <para>
        </para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.GuidNotMatching">
      <summary>
        <para>Message text: Failed to create Message Queuing configuration object with a GUID that matches the computer installation. You must uninstall Message Queuing and then reinstall it.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.PublicKeyNotFound">
      <summary>
        <para>Message text: Unable to find the public key for computer.</para>
        <para> 
      Message Queuing returns this error, for example, if
      you are trying to retrieve the computer properties of a computer running Message
      Queuing 1.0 or if you are trying to get remote computer properties while working
      offline. This error applies only to Message Queuing 2.0.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.PublicKeyDoesNotExist">
      <summary>
        <para>Message text: The public key for the computer does not exist.</para>
        <para> Message Queuing returns this
      error if it was able to query the directory service, but the enhanced key was not
      found. This error applies only to Message Queuing 2.0.</para>
        <para>
        </para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.NoGlobalCatalogInDomain">
      <summary>
        <para>Message text: Unable to find Global Catalog servers in the specified domain.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.NoMsmqServersOnGlobalCatalog">
      <summary>
        <para>Message text: Failed to find Message Queuing servers on Global Catalog domain controllers.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.CannotGetDistinguishedName">
      <summary>
        <para>Message text: Failed to retrieve the distinguished name of local computer.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.CannotHashDataEx">
      <summary>
        <para>Message text: Unable to hash data for an authenticated message.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.CannotSignDataEx">
      <summary>
        <para>Message text: Unable to sign data before sending an authenticated message.</para>
        <para>See the <see cref="T:System.Messaging.Message" /> class's <see cref="P:System.Messaging.Message.DigitalSignature" /> property for more information about 
   signing data.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.CannotCreateHashEx">
      <summary>
        <para>Message text: Unable to create a hash object for an authenticated message.</para>
        <para>See the <see cref="T:System.Messaging.Message" /> class's <see cref="P:System.Messaging.Message.HashAlgorithm" /> property for more
   information about hash algorithms.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueErrorCode.FailVerifySignatureEx">
      <summary>
        <para>Message text: Signature of received message is not valid.</para>
      </summary>
    </member>
    <member name="T:System.Messaging.MessageQueueException">
      <summary>
        <para> The exception that is thrown if a
      Microsoft Message Queuing internal error occurs.
      </para>
      </summary>
    </member>
    <member name="M:System.Messaging.MessageQueueException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para> Populates a serialization information object
      with the data needed to serialize the <see cref="T:System.Messaging.MessageQueueException" /> . </para>
      </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized data associated with the <see cref="T:System.Messaging.MessageQueueException" /> . </param>
      <param name=" context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains the source and destination of the serialized stream associated with the <see cref="T:System.Messaging.MessageQueueException" /> . </param>
    </member>
    <member name="P:System.Messaging.MessageQueueException.MessageQueueErrorCode">
      <summary>
        <para>Gets a value that indicates the error code associated with this exception.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessageQueueException.Message">
      <summary>
        <para> Gets a value that describes the Message 
 Queuing error. </para>
      </summary>
    </member>
    <member name="T:System.Messaging.MessageQueueInstaller">
      <summary>
        <para>Allows you to install and configure a queue that your application needs
      in order to run. This class is called by the installation utility, for
      example InstallUtil.exe, when installing a <see cref="T:System.Messaging.MessageQueue" />.
      </para>
      </summary>
    </member>
    <member name="M:System.Messaging.MessageQueueInstaller.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Messaging.MessageQueueInstaller" /> class. Does not set any instance properties.</para>
      </summary>
    </member>
    <member name="M:System.Messaging.MessageQueueInstaller.#ctor(System.Messaging.MessageQueue)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Messaging.MessageQueueInstaller" /> class, initializing the installation settings
   to those of an existing <see cref="T:System.Messaging.MessageQueue" /> instance.</para>
      </summary>
      <param name="componentToCopy">The <see cref="T:System.Messaging.MessageQueue" /> component whose settings determine the property settings of the new queue installed.</param>
    </member>
    <member name="M:System.Messaging.MessageQueueInstaller.Commit(System.Collections.IDictionary)">
      <summary>
        <para>Completes the installation process by committing the <see cref="T:System.Messaging.MessageQueue" />
installation information that the <see cref="M:System.Messaging.MessageQueueInstaller.Install(System.Collections.IDictionary)" /> method wrote to the
Registry. This method is meant to be used by installation tools, which
automatically call the appropriate methods.</para>
      </summary>
      <param name="savedState">An <see cref="T:System.Collections.IDictionary" /> that contains the post-installation state of the computer. </param>
    </member>
    <member name="M:System.Messaging.MessageQueueInstaller.CopyFromComponent(System.ComponentModel.IComponent)">
      <summary>
        <para>Copies the property values of a <see cref="T:System.Messaging.MessageQueue" /> component that are required at install time
   for a message queue.
   </para>
      </summary>
      <param name="component">An <see cref="T:System.ComponentModel.IComponent" /> to use as a template for the <see cref="T:System.Messaging.MessageQueueInstaller" />.</param>
    </member>
    <member name="M:System.Messaging.MessageQueueInstaller.Install(System.Collections.IDictionary)">
      <summary>
        <para>Performs the installation and writes message queue
      information to the Registry. This method is meant to be
      used by installation tools, which automatically call the appropriate methods.</para>
      </summary>
      <param name="stateSaver">
        <para>An <see cref="T:System.Collections.IDictionary" /> used to save information needed to perform a commit, rollback, or uninstall operation. </para>
      </param>
    </member>
    <member name="M:System.Messaging.MessageQueueInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)">
      <summary>
        <para>Determines whether the specified installer can handle the
      same kind of installation as this installer.</para>
      </summary>
      <param name="otherInstaller">The installer to compare.</param>
      <returns>
        <para>
          <see langword="true" /> if this installer and the
   installer specified by the <paramref name="otherInstaller" /> parameter can handle the
   same kind of installation; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.MessageQueueInstaller.Rollback(System.Collections.IDictionary)">
      <summary>
        <para> Restores the computer to the state it was in before the
      installation, by rolling back the queue information that the installation procedure wrote to the
      Registry. This method is meant to be used by installation tools, which automatically call
      the appropriate methods.
      </para>
      </summary>
      <param name="savedState">
        <para>An <see cref="T:System.Collections.IDictionary" /> that contains the pre-installation state of the computer.</para>
      </param>
    </member>
    <member name="M:System.Messaging.MessageQueueInstaller.Uninstall(System.Collections.IDictionary)">
      <summary>
        <para> Removes an installation by removing queue information
      from the Registry. This method is meant to be used by uninstallation tools, which automatically call the appropriate methods.
      </para>
      </summary>
      <param name="savedState">
        <para>An <see cref="T:System.Collections.IDictionary" /> that contains the post-installation state of the computer. </para>
      </param>
    </member>
    <member name="P:System.Messaging.MessageQueueInstaller.Authenticate">
      <summary>
        <para> Gets or sets a value indicating whether the queue to be installed accepts only authenticated messages.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessageQueueInstaller.BasePriority">
      <summary>
        <para> Gets or sets
      the base priority that is used
      to route a public queue's messages over the network.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessageQueueInstaller.Category">
      <summary>
        <para> Gets or
      sets an implementation-specific queue type.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessageQueueInstaller.EncryptionRequired">
      <summary>
        <para> Gets or sets a value indicating whether the queue accepts only private, or
      encrypted, messages.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessageQueueInstaller.Label">
      <summary>
        <para>Gets or sets a description of the queue.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessageQueueInstaller.MaximumJournalSize">
      <summary>
        <para>Gets or sets the maximum size of the journal that is associated with the queue.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessageQueueInstaller.MaximumQueueSize">
      <summary>
        <para> Gets or sets the maximum size of the queue.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessageQueueInstaller.Path">
      <summary>
        <para> Gets or
      sets the
      location of the
      queue
      that is referenced by this object.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessageQueueInstaller.Permissions">
      <summary>
        <para>Gets or sets permissions associated with the queue.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessageQueueInstaller.Transactional">
      <summary>
        <para> 
      Gets or sets a value indicating whether the queue accepts only
      messages sent as part of a transaction.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessageQueueInstaller.UninstallAction">
      <summary>
        <para>Gets or sets a value indicating what the installer does with the queue at uninstall time: remove it, restore it
      to its pre-installation state, or leave it in its current installed state.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessageQueueInstaller.UseJournalQueue">
      <summary>
        <para>Gets or sets a value indicating whether messages that are retrieved from the queue are also copied to the
      associated journal queue.</para>
      </summary>
    </member>
    <member name="T:System.Messaging.MessageQueuePermission">
      <summary>
        <para>Allows control of code access permissions for messaging.</para>
      </summary>
    </member>
    <member name="M:System.Messaging.MessageQueuePermission.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Messaging.MessageQueuePermission" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Messaging.MessageQueuePermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Messaging.MessageQueuePermission" /> class with the
   specified permission state.</para>
      </summary>
      <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState" /> values.</param>
    </member>
    <member name="M:System.Messaging.MessageQueuePermission.#ctor(System.Messaging.MessageQueuePermissionAccess,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Messaging.MessageQueuePermission" /> class with the 
   specified access levels and the path of the queue.</para>
      </summary>
      <param name="permissionAccess">One of the <see cref="T:System.Messaging.MessageQueuePermissionAccess" /> values.</param>
      <param name=" path">The path of the queue that is referenced by the <see cref="T:System.Messaging.MessageQueue" />.</param>
    </member>
    <member name="M:System.Messaging.MessageQueuePermission.#ctor(System.Messaging.MessageQueuePermissionAccess,System.String,System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Messaging.MessageQueuePermission" /> class with the 
   specified access levels, computer to use, queue description, and queue
   category.</para>
      </summary>
      <param name="permissionAccess">One of the <see cref="T:System.Messaging.MessageQueuePermissionAccess" /> values.</param>
      <param name=" machineName">The name of the computer where the Message Queuing queue is located.</param>
      <param name=" label">The queue description.</param>
      <param name=" category">The queue category (Message Queuing type identifier).</param>
    </member>
    <member name="M:System.Messaging.MessageQueuePermission.#ctor(System.Messaging.MessageQueuePermissionEntry[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Messaging.MessageQueuePermission" /> class with the
   specified permission access level entries.</para>
      </summary>
      <param name="permissionAccessEntries">An array of <see cref="T:System.Messaging.MessageQueuePermissionEntry" /> objects. The <see cref="P:System.Messaging.MessageQueuePermission.PermissionEntries" /> property is set to this value.</param>
    </member>
    <member name="P:System.Messaging.MessageQueuePermission.PermissionEntries">
      <summary>
        <para>Gets the collection of permission entries for this permissions request.</para>
      </summary>
    </member>
    <member name="T:System.Messaging.MessageQueuePermissionAccess">
      <summary>
        <para>Defines access levels used by <see cref="N:System.Messaging" /> permission classes.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueuePermissionAccess.None">
      <summary>
        <para>The <see cref="T:System.Messaging.MessageQueue" /> has no permissions.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueuePermissionAccess.Browse">
      <summary>
        <para>The <see cref="T:System.Messaging.MessageQueue" /> can look 
 at the queues that are available.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueuePermissionAccess.Send">
      <summary>
        <para>The <see cref="T:System.Messaging.MessageQueue" /> can look 
 at the queues that are available and send
 messages.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueuePermissionAccess.Peek">
      <summary>
        <para>The <see cref="T:System.Messaging.MessageQueue" /> can look at the queues that are available and
 read the messages in the queue.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueuePermissionAccess.Receive">
      <summary>
        <para>The <see cref="T:System.Messaging.MessageQueue" /> can look at the queues that are available, 
 read the messages in the queue, and receive messages.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueuePermissionAccess.Administer">
      <summary>
        <para>The <see cref="T:System.Messaging.MessageQueue" /> can look 
 at the queues that are available, read the
 messages in the queue, and send and receive
 messages.</para>
      </summary>
    </member>
    <member name="T:System.Messaging.MessageQueuePermissionAttribute">
      <summary>
        <para>Allows declaritive <see cref="T:System.Messaging.MessageQueue" /> permission checks.</para>
      </summary>
    </member>
    <member name="M:System.Messaging.MessageQueuePermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Messaging.MessageQueuePermissionAttribute" /> class.</para>
      </summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction" /> values.</param>
    </member>
    <member name="M:System.Messaging.MessageQueuePermissionAttribute.CreatePermission">
      <summary>
        <para> Creates the permission based on the requested
      access levels, category, label, computer name, and path that are set through the
   <see cref="P:System.Messaging.MessageQueuePermissionAttribute.PermissionAccess" />, <see cref="P:System.Messaging.MessageQueuePermissionAttribute.Category" />, <see cref="P:System.Messaging.MessageQueuePermissionAttribute.Label" />, <see cref="P:System.Messaging.MessageQueuePermissionAttribute.MachineName" />, and <see cref="P:System.Messaging.MessageQueuePermissionAttribute.Path" /> properties on the attribute.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Security.IPermission" /> that represents the created permission.</para>
      </returns>
    </member>
    <member name="P:System.Messaging.MessageQueuePermissionAttribute.Category">
      <summary>
        <para> Gets or sets the queue category.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessageQueuePermissionAttribute.Label">
      <summary>
        <para> Gets or sets the queue description.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessageQueuePermissionAttribute.MachineName">
      <summary>
        <para> Gets or sets the name of the computer where the Message
      Queuing queue is located.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessageQueuePermissionAttribute.Path">
      <summary>
        <para> Gets or sets the queue's path.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessageQueuePermissionAttribute.PermissionAccess">
      <summary>
        <para>Gets or sets the permission access levels used in the
      permissions request.</para>
      </summary>
    </member>
    <member name="T:System.Messaging.MessageQueuePermissionEntry">
      <summary>
        <para>Defines the smallest unit of a code access security permission set for messaging.</para>
      </summary>
    </member>
    <member name="M:System.Messaging.MessageQueuePermissionEntry.#ctor(System.Messaging.MessageQueuePermissionAccess,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Messaging.MessageQueuePermissionEntry" /> class with the
   specified permission access levels and the path of the queue.</para>
      </summary>
      <param name="permissionAccess">A bitwise combination of the <see cref="T:System.Messaging.MessageQueuePermissionAccess" /> values. The <see cref="P:System.Messaging.MessageQueuePermissionEntry.PermissionAccess" /> property is set to this value.</param>
      <param name=" path">The path of the queue that is referenced by the <see cref="T:System.Messaging.MessageQueue" /> object. The <see cref="P:System.Messaging.MessageQueuePermissionEntry.Path" /> property is set to this value.</param>
    </member>
    <member name="M:System.Messaging.MessageQueuePermissionEntry.#ctor(System.Messaging.MessageQueuePermissionAccess,System.String,System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Messaging.MessageQueuePermissionEntry" /> class with the specified
   permission access levels, the name of the computer where the queue is
   located, the queue description, and the queue category.</para>
      </summary>
      <param name="permissionAccess">A bitwise combination of the <see cref="T:System.Messaging.MessageQueuePermissionAccess" /> values. The <see cref="P:System.Messaging.MessageQueuePermissionEntry.PermissionAccess" /> property is set to this value.</param>
      <param name=" machineName">The name of the computer where the Message Queuing queue is located. The <see cref="P:System.Messaging.MessageQueuePermissionEntry.MachineName" /> property is set to this value.</param>
      <param name=" label">The queue description. The <see cref="P:System.Messaging.MessageQueuePermissionEntry.Label" /> property is set to this value.</param>
      <param name=" category">The queue category (Message Queuing type identifier). The <see cref="P:System.Messaging.MessageQueuePermissionEntry.Category" /> property is set to this value.</param>
    </member>
    <member name="P:System.Messaging.MessageQueuePermissionEntry.Category">
      <summary>
        <para> Gets the queue category.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessageQueuePermissionEntry.Label">
      <summary>
        <para> Gets the queue description.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessageQueuePermissionEntry.MachineName">
      <summary>
        <para> Gets the name of the computer where the Message
      Queuing queue is located.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessageQueuePermissionEntry.Path">
      <summary>
        <para> Gets the queue's path.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.MessageQueuePermissionEntry.PermissionAccess">
      <summary>
        <para>Gets the permission access levels used in the 
      permissions request.</para>
      </summary>
    </member>
    <member name="T:System.Messaging.MessageQueuePermissionEntryCollection">
      <summary>
        <para>Contains a strongly typed collection of <see cref="T:System.Messaging.MessageQueuePermissionEntry" /> objects.</para>
      </summary>
    </member>
    <member name="M:System.Messaging.MessageQueuePermissionEntryCollection.Add(System.Messaging.MessageQueuePermissionEntry)">
      <summary>
        <para>Adds a specified <see cref="T:System.Messaging.MessageQueuePermissionEntry" /> to this collection.</para>
      </summary>
      <param name="value">The <see cref="T:System.Messaging.MessageQueuePermissionEntry" /> to add.</param>
      <returns>
        <para>The zero-based index of the added <see cref="T:System.Messaging.MessageQueuePermissionEntry" />.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.MessageQueuePermissionEntryCollection.AddRange(System.Messaging.MessageQueuePermissionEntry[])">
      <summary>
        <para>Appends a set of specified permission entries to this collection.</para>
      </summary>
      <param name="value">An array of type <see cref="T:System.Messaging.MessageQueuePermissionEntry" /> objects that contains the permission entries to add.</param>
    </member>
    <member name="M:System.Messaging.MessageQueuePermissionEntryCollection.AddRange(System.Messaging.MessageQueuePermissionEntryCollection)">
      <summary>
        <para> Appends a set of specified permission entries to this collection.</para>
      </summary>
      <param name="value">A <see cref="T:System.Messaging.MessageQueuePermissionEntryCollection" /> that contains the permission entries to add.</param>
    </member>
    <member name="M:System.Messaging.MessageQueuePermissionEntryCollection.Contains(System.Messaging.MessageQueuePermissionEntry)">
      <summary>
        <para>Determines whether this collection contains a specified
   <see cref="T:System.Messaging.MessageQueuePermissionEntry" /> .</para>
      </summary>
      <param name="value">The <see cref="T:System.Messaging.MessageQueuePermissionEntry" /> to find.</param>
      <returns>
        <para>
          <see langword="true" /> if the specified <see cref="T:System.Messaging.MessageQueuePermissionEntry" /> belongs to this collection;
   otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.MessageQueuePermissionEntryCollection.CopyTo(System.Messaging.MessageQueuePermissionEntry[],System.Int32)">
      <summary>
        <para>Copies the permission entries from this collection to an
      array, starting at a particular index of the array.</para>
      </summary>
      <param name="array">An array of type <see cref="T:System.Messaging.MessageQueuePermissionEntry" /> that receives this collection's permission entries.</param>
      <param name=" index"> The zero-based index at which to begin copying the permission entries.</param>
    </member>
    <member name="M:System.Messaging.MessageQueuePermissionEntryCollection.IndexOf(System.Messaging.MessageQueuePermissionEntry)">
      <summary>
        <para>Determines the index of a specified permission entry in this collection.</para>
      </summary>
      <param name="value">The permission entry to search for.</param>
      <returns>
        <para>The zero-based index of the specified permission 
      entry, or -1 if the permission entry was not found in the collection.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.MessageQueuePermissionEntryCollection.Insert(System.Int32,System.Messaging.MessageQueuePermissionEntry)">
      <summary>
        <para>Inserts a permission entry into this collection at a specified index.</para>
      </summary>
      <param name="index">The zero-based index into the collection at which to insert the permission entry.</param>
      <param name=" value">The permission entry to insert into this collection.</param>
    </member>
    <member name="M:System.Messaging.MessageQueuePermissionEntryCollection.Remove(System.Messaging.MessageQueuePermissionEntry)">
      <summary>
        <para>Removes a specified permission entry from this collection.</para>
      </summary>
      <param name="value">The permission entry to remove.</param>
    </member>
    <member name="P:System.Messaging.MessageQueuePermissionEntryCollection.Item(System.Int32)">
      <summary>
        <para>Gets or sets the object at a specified index.</para>
      </summary>
      <param name="index">The zero-based index into the collection.</param>
    </member>
    <member name="T:System.Messaging.MessageQueueTransaction">
      <summary>
        <para> Provides a Message Queuing internal transaction.</para>
      </summary>
    </member>
    <member name="M:System.Messaging.MessageQueueTransaction.#ctor">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Messaging.MessageQueueTransaction" /> class.
   </para>
      </summary>
    </member>
    <member name="M:System.Messaging.MessageQueueTransaction.Abort">
      <summary>
        <para> Rolls back the pending internal transaction.
      </para>
      </summary>
    </member>
    <member name="M:System.Messaging.MessageQueueTransaction.Begin">
      <summary>
        <para> Begins a new Message Queuing internal transaction.
      </para>
      </summary>
    </member>
    <member name="M:System.Messaging.MessageQueueTransaction.Commit">
      <summary>
        <para> Commits a pending internal transaction.
      </para>
      </summary>
    </member>
    <member name="M:System.Messaging.MessageQueueTransaction.Dispose">
      <summary>
        <para> Releases all resources used by the <see cref="T:System.Messaging.MessageQueueTransaction" />
.</para>
      </summary>
    </member>
    <member name="M:System.Messaging.MessageQueueTransaction.Dispose(System.Boolean)">
      <summary>
        <para>Releases the unmanaged resources used by the <see cref="T:System.Messaging.MessageQueueTransaction" /> and optionally releases the managed resources. </para>
      </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources. </param>
    </member>
    <member name="P:System.Messaging.MessageQueueTransaction.Status">
      <summary>
        <para> Gets the status of the transaction.
      </para>
      </summary>
    </member>
    <member name="T:System.Messaging.MessageQueueTransactionStatus">
      <summary>
        <para>Specifies the state of an internal Message Queuing transaction.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueTransactionStatus.Aborted">
      <summary>
        <para>The transaction has been aborted and all participants 
      have been notified.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueTransactionStatus.Committed">
      <summary>
        <para>The transaction has been committed and all participants 
      have been notified.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueTransactionStatus.Initialized">
      <summary>
        <para>The transaction has been initialized. It has not yet been started.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueTransactionStatus.Pending">
      <summary>
        <para>The transaction has been started. It has not yet been 
      either committed or rolled back.</para>
      </summary>
    </member>
    <member name="T:System.Messaging.MessageQueueTransactionType">
      <summary>
        <para> Specifies the type of a Message Queuing transaction.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueTransactionType.None">
      <summary>
        <para>Operation will not be transactional.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueTransactionType.Automatic">
      <summary>
        <para>A transaction type used for Microsoft Transaction Server
      (MTS) or COM+ 1.0 Services. If there is already an MTS transaction context, it will be used when
      sending or receiving the message.</para>
        <para>
        </para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageQueueTransactionType.Single">
      <summary>
        <para>A transaction type used for single internal 
      transactions.</para>
      </summary>
    </member>
    <member name="T:System.Messaging.MessageType">
      <summary>
        <para> Identifies the type of a message. A message can be a typical Message Queuing message, a positive (arrival and read) or negative
      (arrival and read) acknowledgment message, or a report message.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageType.Acknowledgment">
      <summary>
        <para> 
 An acknowledgment message.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageType.Normal">
      <summary>
        <para>A normal Message Queuing message.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.MessageType.Report">
      <summary>
        <para>A report message.</para>
      </summary>
    </member>
    <member name="T:System.Messaging.MessagingDescriptionAttribute">
      <summary>
        <para> 
      Specifies a description for a property
      or event.</para>
      </summary>
    </member>
    <member name="M:System.Messaging.MessagingDescriptionAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Messaging.MessagingDescriptionAttribute" /> class, using the
   specified description.</para>
      </summary>
      <param name="description">The application-defined description text. </param>
    </member>
    <member name="P:System.Messaging.MessagingDescriptionAttribute.Description">
      <summary>
        <para>Gets description text associated with the item monitored.</para>
      </summary>
    </member>
    <member name="T:System.Messaging.PeekCompletedEventArgs">
      <summary>
        <para>Provides data for the <see cref="E:System.Messaging.MessageQueue.PeekCompleted" /> event. When your asynchronous peek
   operation calls an event handler, an instance of this class is passed to the
   handler.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.PeekCompletedEventArgs.AsyncResult">
      <summary>
        <para>Gets or sets the result of the asynchronous
       operation requested.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.PeekCompletedEventArgs.Message">
      <summary>
        <para> Gets the message associated with the asynchronous peek operation.</para>
      </summary>
    </member>
    <member name="T:System.Messaging.PeekCompletedEventHandler">
      <summary>
        <para>Represents the method that will handle the <see cref="E:System.Messaging.MessageQueue.PeekCompleted" /> event of a <see cref="T:System.Messaging.MessageQueue" />.</para>
      </summary>
      <param name="sender">The source of the event, the <see cref="T:System.Messaging.MessageQueue" /> .</param>
      <param name="e">A <see cref="T:System.Messaging.PeekCompletedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:System.Messaging.ReceiveCompletedEventArgs">
      <summary>
        <para>Provides data for the <see cref="E:System.Messaging.MessageQueue.ReceiveCompleted" />
event. When your asynchronous receive operation calls an event handler, an
instance of this class is passed to the
handler.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.ReceiveCompletedEventArgs.AsyncResult">
      <summary>
        <para> Gets or sets the result of the asynchronous
       operation requested.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.ReceiveCompletedEventArgs.Message">
      <summary>
        <para> Gets the message associated
 with the asynchronous receive operation.</para>
      </summary>
    </member>
    <member name="T:System.Messaging.ReceiveCompletedEventHandler">
      <summary>
        <para>Represents the method that will handle the <see cref="E:System.Messaging.MessageQueue.ReceiveCompleted" /> event of a <see cref="T:System.Messaging.MessageQueue" />.</para>
      </summary>
      <param name="sender">The source of the event, the <see cref="T:System.Messaging.MessageQueue" /> .</param>
      <param name="e">A <see cref="T:System.Messaging.ReceiveCompletedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:System.Messaging.StandardAccessRights">
      <summary>
        <para>Specifies a set of standard access rights that correspond
      to operations common to most types of securable objects.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.StandardAccessRights.Delete">
      <summary>
        <para>The right to delete the object.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.StandardAccessRights.ReadSecurity">
      <summary>
        <para>The right to read the information in the object's
      security descriptor.</para>
        <para>
        </para>
      </summary>
    </member>
    <member name="F:System.Messaging.StandardAccessRights.WriteSecurity">
      <summary>
        <para>The right to modify the discretionary access control 
      list (DACL) in the security descriptor.</para>
        <note type="note">
      The DACL controls access to the
      object. Being able to write to the DACL gives the user the ability to set
      security for the object.
   </note>
      </summary>
    </member>
    <member name="F:System.Messaging.StandardAccessRights.Synchronize">
      <summary>
        <para>The right to use the object for synchronization. This
      enables a thread to wait until the object is in a specific state.</para>
        <para>
        </para>
      </summary>
    </member>
    <member name="F:System.Messaging.StandardAccessRights.ModifyOwner">
      <summary>
        <para>The right to change the owner in the object's security descriptor.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.StandardAccessRights.Read">
      <summary>
        <para>The right to read the information in the object's 
      security descriptor. <see langword="Read" /> is currently defined
      to equal <see langword="ReadSecurity" />.
      </para>
      </summary>
    </member>
    <member name="F:System.Messaging.StandardAccessRights.Write">
      <summary>
        <para>The right to read the information in the object's 
      security descriptor. <see langword="Write" /> is currently defined
      to equal <see langword="ReadSecurity" />.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.StandardAccessRights.Execute">
      <summary>
        <para>The right to read the information in the object's 
      security descriptor. On Windows 2000 and Windows NT, the security descriptor
      contains the security information for a securable object. It identifies the object's owner and primary group. <see langword="Execute" /> is currently defined
      to equal <see langword="ReadSecurity" />.</para>
        <para>
        </para>
      </summary>
    </member>
    <member name="F:System.Messaging.StandardAccessRights.Required">
      <summary>
        <para>Combines <see langword="Delete" />, 
<see langword="ReadSecurity" />, <see langword="WriteSecurity" />, and 
<see langword="ModifyOwner" /> access.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.StandardAccessRights.All">
      <summary>
        <para>Combines <see langword="Delete" />, 
<see langword="ReadSecurity" />, <see langword="WriteSecurity" /> , 
<see langword="ModifyOwner" />, and <see langword="Synchronize" /> access.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.StandardAccessRights.None">
      <summary>
        <para> No access.</para>
      </summary>
    </member>
    <member name="T:System.Messaging.Trustee">
      <summary>
        <para>Specifies a user account, group account, or logon
      session to which an access control entry applies.</para>
      </summary>
    </member>
    <member name="M:System.Messaging.Trustee.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Messaging.Trustee" /> class
   without setting any of its read/write properties.</para>
      </summary>
    </member>
    <member name="M:System.Messaging.Trustee.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Messaging.Trustee" /> class
   of type <see langword="Unknown" />, setting the <see cref="P:System.Messaging.Trustee.Name" />
   property to the value specified, and the <see cref="P:System.Messaging.Trustee.SystemName" /> to <see langword="null" />.</para>
      </summary>
      <param name="name">The value to assign to the <see cref="P:System.Messaging.Trustee.Name" /> property.</param>
    </member>
    <member name="M:System.Messaging.Trustee.#ctor(System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Messaging.Trustee" /> class
   of type <see langword="Unknown" />, setting the <see cref="P:System.Messaging.Trustee.Name" /> and the
<see langword="SystemName" /> properties to the values specified. </para>
      </summary>
      <param name="name">The value to assign to the <see cref="P:System.Messaging.Trustee.Name" /> property.</param>
      <param name=" systemName">The value to assign to the <see cref="P:System.Messaging.Trustee.SystemName" /> property.</param>
    </member>
    <member name="M:System.Messaging.Trustee.#ctor(System.String,System.String,System.Messaging.TrusteeType)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Messaging.Trustee" /> class of the specified type, setting the <see cref="P:System.Messaging.Trustee.Name" /> and 
   the <see cref="P:System.Messaging.Trustee.SystemName" /> properties to the values specified. </para>
      </summary>
      <param name="name">The value to assign to the <see cref="P:System.Messaging.Trustee.Name" /> property.</param>
      <param name=" systemName">The value to assign to the <see cref="P:System.Messaging.Trustee.SystemName" /> property.</param>
      <param name=" trusteeType">A <see cref="T:System.Messaging.TrusteeType" /> that indicates the account type of the trustee.</param>
    </member>
    <member name="P:System.Messaging.Trustee.Name">
      <summary>
        <para>Gets or sets the name of the trustee.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.Trustee.SystemName">
      <summary>
        <para> Gets or sets the computer on which to look up the
      trustee's account.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.Trustee.TrusteeType">
      <summary>
        <para>Gets or sets the type of the trustee, which identifies
      whether the trustee is a user, group, computer, domain, or alias.</para>
      </summary>
    </member>
    <member name="T:System.Messaging.TrusteeType">
      <summary>
        <para>Specifies the type of a trustee.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.TrusteeType.Unknown">
      <summary>
        <para>The trustee type is unknown, but not necessarily invalid.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.TrusteeType.User">
      <summary>
        <para> The trustee is a user.</para>
      </summary>
    </member>
    <member name="F:System.Messaging.TrusteeType.Group">
      <summary>
        <para> The trustee is a group.</para>
        <para>
        </para>
      </summary>
    </member>
    <member name="F:System.Messaging.TrusteeType.Domain">
      <summary>
        <para> The
      trustee is a domain.</para>
        <para>
        </para>
      </summary>
    </member>
    <member name="F:System.Messaging.TrusteeType.Alias">
      <summary>
        <para>The trustee is an alias.</para>
        <para>
        </para>
      </summary>
    </member>
    <member name="F:System.Messaging.TrusteeType.Computer">
      <summary>
        <para>The trustee is a computer.</para>
        <para>
        </para>
      </summary>
    </member>
    <member name="T:System.Messaging.XmlMessageFormatter">
      <summary>
        <para>Serializes and deserializes objects to or from the body of a message, using the XML format based on the XSD schema
      definition.</para>
      </summary>
    </member>
    <member name="M:System.Messaging.XmlMessageFormatter.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Messaging.XmlMessageFormatter" />
class, without target types set.</para>
      </summary>
    </member>
    <member name="M:System.Messaging.XmlMessageFormatter.#ctor(System.String[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Messaging.XmlMessageFormatter" /> class, setting
   target types passed in as an array of
   (fully qualified) string values.</para>
      </summary>
      <param name="targetTypeNames">An array of type <see cref="T:System.String" /> that specifies the set of possible types that will be deserialized by the formatter from the message provided. These values must be fully qualified, for example, "MyNamespace.MyOrders, MyOrdersAssemblyName".</param>
    </member>
    <member name="M:System.Messaging.XmlMessageFormatter.#ctor(System.Type[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Messaging.XmlMessageFormatter" />class, setting target types passed in as
   an array of object types.</para>
      </summary>
      <param name="targetTypes">An array of type <see cref="T:System.Type" /> that specifies the set of possible types that will be deserialized by the formatter from the message provided.</param>
    </member>
    <member name="M:System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)">
      <summary>
        <para> Determines whether the formatter can deserialize the message. </para>
      </summary>
      <param name="message">The <see cref="T:System.Messaging.Message" /> to inspect.</param>
      <returns>
        <para>
          <see langword="true" /> if the XML formatter can deserialize the
   message; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.XmlMessageFormatter.Clone">
      <summary>
        <para>Creates an instance of the <see cref="T:System.Messaging.XmlMessageFormatter" /> class whose read/write properties (the sets of target types) are
   the same as the current <see cref="T:System.Messaging.XmlMessageFormatter" /> instance. </para>
      </summary>
      <returns>
        <para>An object whose properties are identical to those of
      this <see cref="T:System.Messaging.XmlMessageFormatter" />
      instance, but whose metadata does not specify it to be a
      formatter class instance.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)">
      <summary>
        <para>Reads the contents from the given message and creates an object
      containing the deserialized message.</para>
      </summary>
      <param name="message">The <see cref="T:System.Messaging.Message" /> , in XML format, to deserialize.</param>
      <returns>
        <para> The deserialized message.</para>
      </returns>
    </member>
    <member name="M:System.Messaging.XmlMessageFormatter.Write(System.Messaging.Message,System.Object)">
      <summary>
        <para> Serializes an object into the body of the message.</para>
      </summary>
      <param name="message">The <see cref="T:System.Messaging.Message" /> whose <see cref="P:System.Messaging.Message.Body" /> property will contain the serialized object.</param>
      <param name="obj">The <see cref="T:System.Object" /> to be serialized into the message body.</param>
    </member>
    <member name="P:System.Messaging.XmlMessageFormatter.TargetTypeNames">
      <summary>
        <para>Specifies the set of possible types that will
      be deserialized by the formatter from the
      message provided.</para>
      </summary>
    </member>
    <member name="P:System.Messaging.XmlMessageFormatter.TargetTypes">
      <summary>
        <para>Specifies the set of possible types that will
      be deserialized by the formatter from the
      message provided.</para>
      </summary>
    </member>
    <member name="M:System.Messaging.Design.MessageFormatterConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
        <para>Gets a value indicating whether this converter can
       convert an object to the given destination type using the context.</para>
      </summary>
      <param name="context">
        <para>An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </para>
      </param>
      <param name="destinationType">A <see cref="T:System.Type" /> that represents the type you wish to convert to.</param>
      <returns>
        <para>
          <see langword="true " />if this converter can perform the conversion; otherwise, 
 <see langword="false" />. </para>
      </returns>
    </member>
    <member name="M:System.Messaging.Design.QueuePathDialog.#ctor(System.IServiceProvider)">
      <summary>
     Creates a path editor control.
     This will create also a tree view control, and an ImageList with
     the icons.
 </summary>
    </member>
    <member name="M:System.Messaging.Design.QueuePathDialog.#ctor(System.Windows.Forms.Design.IUIService)">
    </member>
    <member name="M:System.Messaging.Design.QueuePathDialog.ChoosePath">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Messaging.Design.QueuePathDialog.DoubleClicked(System.Object,System.EventArgs)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Messaging.Design.QueuePathDialog.SelectQueue(System.Messaging.MessageQueue)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Messaging.Design.QueuePathDialog.Path">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="T:System.Messaging.Design.QueuePathEditor">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Messaging.Design.QueuePathEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>
      Edits the given object value using the editor style provided by
      GetEditorStyle.  A service provider is provided so that any
      required editing services can be obtained.
 </summary>
      <param name="context">
      A type descriptor context that can be used to provide additional
      context information.
 </param>
      <param name="provider">
      A service provider object through which editing services may
      be obtained.
 </param>
      <param name="value">
      An instance of the value being edited.
 </param>
      <returns>
      The new value of the object.  If the value of the object hasn't
      changed, this should return the same object it was passed.
 </returns>
    </member>
    <member name="M:System.Messaging.Design.QueuePathEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
      Retrieves the editing style of the Edit method.  If the method
      is not supported, this will return None.
 </summary>
      <param name="context">
      A type descriptor context that can be used to provide additional
      context information.
 </param>
      <returns>
      An enum value indicating the provided editing style.
 </returns>
    </member>
    <member name="M:System.Messaging.Design.SizeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
    </member>
    <member name="M:System.Messaging.Design.SizeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
    </member>
    <member name="M:System.Messaging.Design.SizeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
    </member>
    <member name="M:System.Messaging.Design.TimeoutConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
      Determines if this converter can convert an object in the given source
      type to the native type of the converter.
 </summary>
      <param name="context">
      A formatter context.  This object can be used to extract additional information
      about the environment this converter is being invoked from.  This may be null,
      so you should always check.  Also, properties on the context object may also
      return null.
 </param>
      <param name="sourceType">
      The type you wish to convert from.
 </param>
      <returns>
      True if this object can perform the conversion.
 </returns>
    </member>
    <member name="M:System.Messaging.Design.TimeoutConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
      Converts the given object to the converter's native type.
 </summary>
      <param name="context">
      A formatter context.  This object can be used to extract additional information
      about the environment this converter is being invoked from.  This may be null,
      so you should always check.  Also, properties on the context object may also
      return null.
 </param>
      <param name="culture">
      Culture to use to perform the conversion
 </param>
      <param name="value">
      The object to convert.
 </param>
      <returns>
      The converted object.  This will throw an excetpion if the converson
      could not be performed.
 </returns>
    </member>
    <member name="M:System.Messaging.Design.TimeoutConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
      Converts the given object to another type.  The most common types to convert
      are to and from a string object.  The default implementation will make a call
      to ToString on the object if the object is valid and if the destination
      type is string.  If this cannot convert to the desitnation type, this will
      throw a NotSupportedException.
 </summary>
      <param name="context">
      A formatter context.  This object can be used to extract additional information
      about the environment this converter is being invoked from.  This may be null,
      so you should always check.  Also, properties on the context object may also
      return null.
 </param>
      <param name="culture">
      Culture to use to perform the conversion
 </param>
      <param name="value">
      The object to convert.
 </param>
      <param name="destinationType">
      The type to convert the object to.
 </param>
      <returns>
      The converted object.
 </returns>
    </member>
  </members>
</doc>