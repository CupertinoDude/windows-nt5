<?xml version="1.0"?>
<doc>
  <assembly>
    <name>System.Design</name>
  </assembly>
  <members>
    <member name="M:System.Design.SRDescriptionAttribute.#ctor(System.String)">
      <summary>
                Constructs a new sys description.
            </summary>
      <param name="description">
                description text.
            </param>
    </member>
    <member name="P:System.Design.SRDescriptionAttribute.Description">
      <summary>
                Retrieves the description text.
            </summary>
      <returns>
                description
            </returns>
    </member>
    <member name="F:System.Design.NativeMethods.CommonHandles.Accelerator">
    </member>
    <member name="F:System.Design.NativeMethods.CommonHandles.Cursor">
    </member>
    <member name="F:System.Design.NativeMethods.CommonHandles.EMF">
    </member>
    <member name="F:System.Design.NativeMethods.CommonHandles.Find">
    </member>
    <member name="F:System.Design.NativeMethods.CommonHandles.GDI">
    </member>
    <member name="F:System.Design.NativeMethods.CommonHandles.HDC">
    </member>
    <member name="F:System.Design.NativeMethods.CommonHandles.Icon">
    </member>
    <member name="F:System.Design.NativeMethods.CommonHandles.Kernel">
    </member>
    <member name="F:System.Design.NativeMethods.CommonHandles.Menu">
    </member>
    <member name="F:System.Design.NativeMethods.CommonHandles.Window">
    </member>
    <member name="M:System.Design.NativeMethods.HandleCollector.Add(System.IntPtr,System.Int32)">
    </member>
    <member name="M:System.Design.NativeMethods.HandleCollector.RegisterType(System.String,System.Int32,System.Int32)">
    </member>
    <member name="M:System.Design.NativeMethods.HandleCollector.Remove(System.IntPtr,System.Int32)">
    </member>
    <member name="M:System.Design.NativeMethods.HandleCollector.HandleType.#ctor(System.String,System.Int32,System.Int32)">
    </member>
    <member name="M:System.Design.NativeMethods.HandleCollector.HandleType.Add(System.IntPtr)">
    </member>
    <member name="M:System.Design.NativeMethods.HandleCollector.HandleType.Collected">
    </member>
    <member name="M:System.Design.NativeMethods.HandleCollector.HandleType.GetHandleCount">
    </member>
    <member name="M:System.Design.NativeMethods.HandleCollector.HandleType.NeedCollection">
    </member>
    <member name="M:System.Design.NativeMethods.HandleCollector.HandleType.Remove(System.IntPtr)">
    </member>
    <member name="M:System.Diagnostics.Design.CategoryValueConverter.#ctor">
    </member>
    <member name="M:System.Diagnostics.Design.CounterCreationDataConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
        <para>Gets a value indicating whether this converter can
       convert an object to the given destination type using the context.</para>
      </summary>
      <param name="context">
        <para>An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </para>
      </param>
      <param name="destinationType">A <see cref="T:System.Type" /> that represents the type you wish to convert to.</param>
      <returns>
        <para>
          <see langword="true " />if this converter can perform the conversion; otherwise, 
 <see langword="false" />. </para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.Design.CounterCreationDataConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
      Converts the given object to another type.  The most common types to convert
      are to and from a string object.  The default implementation will make a call
      to ToString on the object if the object is valid and if the destination
      type is string.  If this cannot convert to the desitnation type, this will
      throw a NotSupportedException.
 </summary>
      <param name="context">
      A formatter context.  This object can be used to extract additional information
      about the environment this converter is being invoked from.  This may be null,
      so you should always check.  Also, properties on the context object may also
      return null.
 </param>
      <param name="culture">
     An optional culture info.  If not supplied the current culture is assumed.
 </param>
      <param name="value">
      The object to convert.
 </param>
      <param name="destinationType">
      The type to convert the object to.
 </param>
      <returns>
      The converted object.
 </returns>
    </member>
    <member name="M:System.Diagnostics.Design.CounterNameConverter.#ctor">
    </member>
    <member name="M:System.Diagnostics.Design.InstanceNameConverter.#ctor">
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.CodeDomSerializer">
      <summary>
        <para> Serializes an object graph to a series of CodeDOM
      statements.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
      <summary>
        <para> Deserializes the specified serialized CodeDOM object into an
      object.</para>
      </summary>
      <param name="manager">A serialization manager interface that is used during the deserialization process.</param>
      <param name="codeObject">A serialized CodeDOM object to deserialize.</param>
      <returns>
        <para> The deserialized CodeDOM object.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializer.DeserializePropertiesFromResources(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Attribute[])">
      <summary>
        <para> Deserializes the properties of the specified object that match the specified filter, if a
      filter was specified.</para>
      </summary>
      <param name="manager">A serialization manager interface that is used during the deserialization process. </param>
      <param name="value">The object to deserialize properties for. </param>
      <param name="filter">An optional filter to apply to the properties. </param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializer.DeserializeStatement(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeStatement)">
      <summary>
        <para> Deserializes the specified statement.</para>
      </summary>
      <param name="manager">A serialization manager interface that is used during the deserialization process.</param>
      <param name="statement">The CodeDOM statement to deserialize.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializer.DeserializeExpression(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.String,System.CodeDom.CodeExpression)">
      <summary>
        <para>Deserializes the specified expression.</para>
      </summary>
      <param name="manager">A serialization manager interface that is used during the deserialization process.</param>
      <param name="name"> An optional name to give the expression. If the expression results in the creation of an object, the object is given this name for subsequent searches through the serialization manager. If this is <see langword="null" />, no name will be given.</param>
      <param name="expression">The CodeDOM expression to deserialize.</param>
      <returns>
        <para> The deserialized expression.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
      <summary>
        <para>Serializes the specified object into a CodeDOM 
      object.</para>
      </summary>
      <param name="manager">A serialization manager interface that is used during the deserialization process.</param>
      <param name="value">The object to serialize.</param>
      <returns>
        <para>A <see langword="CodeDOM " /> object representing the object that has been serialized.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializer.SerializeEvents(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeStatementCollection,System.Object,System.Attribute[])">
      <summary>
        <para>Serializes all events of the specified object.</para>
      </summary>
      <param name="manager">The serialization manager to use during serialization.</param>
      <param name="statements">A statements collection to which serialized event statements are added.</param>
      <param name="value">The object whose events are to be serialized.</param>
      <param name="filter">A member attribute filter to apply to the event search.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializer.SerializeProperties(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeStatementCollection,System.Object,System.Attribute[])">
      <summary>
        <para> Serializes all properties for the specified object, using the specified filter.</para>
      </summary>
      <param name="manager">The serialization manager to use during serialization.</param>
      <param name="statements">A collection of statements to add the serialized property statements to.</param>
      <param name="value"> The object whose properties are serialized.</param>
      <param name="filter">A member attribute filter to apply to the property search.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializer.SerializePropertiesToResources(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeStatementCollection,System.Object,System.Attribute[])">
      <summary>
        <para> Serializes the specified properties to resources.</para>
      </summary>
      <param name="manager">A serialization manager interface that is used during the deserialization process.</param>
      <param name="statements">A collection of statements to use during serialization. The resource serializer uses this to write resource creation statements, but will not have individual property assign statements because all the properties are serialized to a resource.</param>
      <param name="value">The object to deserialize properties for.</param>
      <param name="filter">An optional filter to apply to the properties.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializer.SerializeResource(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.String,System.Object)">
      <summary>
        <para> Serializes the specified resource value using the specified name.</para>
      </summary>
      <param name="manager">The serialization manager to use during serialization. </param>
      <param name="resourceName">The name of the resource to serialize. </param>
      <param name="value">The object to serialize. </param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializer.SerializeResourceInvariant(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.String,System.Object)">
      <summary>
        <para>Serializes the specified resource value using the specified name.</para>
      </summary>
      <param name="manager">The serialization manager to use during serialization. </param>
      <param name="resourceName">The name of the resource to serialize. </param>
      <param name="value">The object to serialize. </param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializer.SerializeToExpression(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
      <summary>
        <para>Serializes the specified value to a CodeDOM expression.</para>
      </summary>
      <param name="manager">The serialization manager to use during serialization.</param>
      <param name="value">The object to serialize.</param>
      <returns>
        <para> The serialized value. This returns
   <see langword="null" /> if there is no serializer for the specified
      value, or if the serializer for that value did not return a <see cref="T:System.CodeDom.CodeExpression" />.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializer.SerializeToReferenceExpression(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
      <summary>
        <para>Serializes the specified value to a CodeDOM expression.</para>
      </summary>
      <param name="manager">The serialization manager to use during serialization.</param>
      <param name="value">The object to serialize.</param>
      <returns>
        <para> The serialized value. This returns
   <see langword="null" /> if no reference expression can be obtained for the specified value, or
      the value cannot be serialized.</para>
      </returns>
    </member>
    <member name="M:System.Diagnostics.Design.StringDictionaryCodeDomSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
    </member>
    <member name="M:System.Diagnostics.Design.StringDictionaryCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
    </member>
    <member name="T:System.ComponentModel.Design.CollectionEditor">
      <summary>
        <para> Provides a user interface that can edit most types of collections at design time.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.#ctor(System.Type)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.ComponentModel.Design.CollectionEditor" /> class using the
   specified collection type.
   </para>
      </summary>
      <param name="type">The type of the collection for this editor to edit. </param>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.CanRemoveInstance(System.Object)">
      <summary>
        <para> Indicates whether original members of the collection can be removed.</para>
      </summary>
      <param name="value">The value to remove.</param>
      <returns>
        <para>
          <see langword="true" /> if it is permissible to remove this value from the collection; otherwise, <see langword="false" /> . The default
   implementation always returns <see langword="true" />.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.CanSelectMultipleInstances">
      <summary>
        <para> Indicates whether multiple collection items can be selected at
      once.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if it 
   multiple collection members can be selected at the same
   time; otherwise, <see langword="false" />. By default, this
   returns <see langword="true" />.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.CreateCollectionForm">
      <summary>
        <para>Creates a new
      form to display and edit the current collection.</para>
      </summary>
      <returns>
        <para>An instance of <see cref="T:System.ComponentModel.Design.CollectionEditor.CollectionForm" />
to provide as the user interface for
editing the collection.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.CreateInstance(System.Type)">
      <summary>
        <para> Creates a new instance of the specified collection item type.
 </para>
      </summary>
      <param name="itemType">The type of item to create. </param>
      <returns>
        <para>A new instance of the specified object.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.CreateCollectionItemType">
      <summary>
        <para> Gets the
      data type that this collection contains.
      </para>
      </summary>
      <returns>
        <para> The data type of the items
      in the collection, or an instance of <see cref="T:System.Object" /> if no <see langword="Item" /> property can be located on the collection.
      </para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.CreateNewItemTypes">
      <summary>
        <para> Gets the data types
      that this collection editor can contain.
      </para>
      </summary>
      <returns>
        <para> An array of data types that this collection can contain.
      </para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.DestroyInstance(System.Object)">
      <summary>
        <para> Destroys the specified instance of the object.
      </para>
      </summary>
      <param name="instance">The object to destroy. </param>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>
        <para>Edits the value of the specified object using the specified service provider and context.</para>
      </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.</param>
      <param name="provider">A service provider object through which editing services can be obtained.</param>
      <param name="value">The object to edit the value of.</param>
      <returns>
        <para>The new value of the object. If the value of the object has not
      changed, this should return the same object it was passed.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <para>Gets the edit style used by the <see cref="M:System.ComponentModel.Design.CollectionEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)" /> method.</para>
      </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.</param>
      <returns>
        <para>A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle" /> enumeration 
   value
   indicating the provided editing
   style. If the method is not supported in the specified context, this method will
   return the <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None" />
   identifier.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.GetItems(System.Object)">
      <summary>
        <para>Gets an array of objects containing the specified collection.</para>
      </summary>
      <param name="editValue">The collection to edit.</param>
      <returns>
        <para>An array containing the collection objects, or an empty object array if
      the specified collection does not inherit from <see cref="T:System.Collections.ICollection" />.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.GetService(System.Type)">
      <summary>
        <para> Gets the requested service, if it is available.
      </para>
      </summary>
      <param name="serviceType">The type of service to retrieve. </param>
      <returns>
        <para> An instance of the service, or <see langword="null" /> if the service cannot be
   found.
   </para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.SetItems(System.Object,System.Object[])">
      <summary>
        <para> Sets the specified array as the items of the collection.</para>
      </summary>
      <param name="editValue">The collection to edit.</param>
      <param name=" value">An array of objects to set as the collection items.</param>
      <returns>
        <para>The newly created collection object or, otherwise, the
 collection indicated by the <paramref name="editValue" /> parameter.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.ShowHelp">
      <summary>
        <para>Displays the default Help topic for the collection editor.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.Design.CollectionEditor.CollectionItemType">
      <summary>
        <para> Gets the data type of each item in the collection.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.Design.CollectionEditor.CollectionType">
      <summary>
        <para> Gets the data type of the collection object.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.Design.CollectionEditor.Context">
      <summary>
        <para> Gets a type descriptor that indicates the current context.
      </para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.Design.CollectionEditor.NewItemTypes">
      <summary>
        <para> Gets
      the available types of items that can be created for this collection.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.Design.CollectionEditor.HelpTopic">
      <summary>
        <para>Gets the <see langword="Help" /> keyword to display the 
 Help topic or topic list for when the editor's dialog <see langword="Help" />
 button or <see langword="F1" /> is
 pressed.</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.Design.CollectionEditor.CollectionForm">
      <summary>
        <para>Provides a modal dialog box for editing the contents of a
 collection using a <see cref="T:System.Drawing.Design.UITypeEditor" />.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.CollectionForm.#ctor(System.ComponentModel.Design.CollectionEditor)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.CollectionEditor.CollectionForm" /> class.</para>
      </summary>
      <param name="editor">The <see cref="T:System.ComponentModel.Design.CollectionEditor" /> to use for editing the collection.</param>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.CollectionForm.CanRemoveInstance(System.Object)">
      <summary>
        <para> Indicates whether you can remove the original members
      of the collection.</para>
      </summary>
      <param name="value">The value to remove.</param>
      <returns>
        <para>
          <see langword="true" /> if it
   is permissible to remove this value from the collection;
   otherwise, <see langword="false" />. By default, this method returns the value from
<see cref="M:System.ComponentModel.Design.CollectionEditor.CanRemoveInstance(System.Object)" /> of the <see cref="T:System.ComponentModel.Design.CollectionEditor" /> for this form. </para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.CollectionForm.CanSelectMultipleInstances">
      <summary>
        <para> Indicates whether multiple collection items can be selected at
      once.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if it multiple collection members
   can be selected at the same time; otherwise, <see langword="false" />. By default, this method returns the value from
<see cref="M:System.ComponentModel.Design.CollectionEditor.CanSelectMultipleInstances" /> of the <see cref="T:System.ComponentModel.Design.CollectionEditor" /> for this form.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.CollectionForm.CreateInstance(System.Type)">
      <summary>
        <para> Creates a new instance of the specified collection item type.
 </para>
      </summary>
      <param name="itemType">The type of item to create. </param>
      <returns>
        <para>A new instance of the specified object, or <see langword="null" /> if the user
 chose to cancel the creation of this instance.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.CollectionForm.DestroyInstance(System.Object)">
      <summary>
        <para>
       Destroys the specified instance of the object.
    </para>
      </summary>
      <param name="instance">
    The object to destroy.
 </param>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.CollectionForm.DisplayError(System.Exception)">
      <summary>
        <para>Displays the specified exception to the user.</para>
      </summary>
      <param name="e">The exception to display.</param>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.CollectionForm.GetService(System.Type)">
      <summary>
        <para> Gets the requested service, if it is available.
      </para>
      </summary>
      <param name="serviceType">The type of service to retrieve. </param>
      <returns>
        <para> An instance of the service, or <see langword="null" />
if the service cannot be
found.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.CollectionForm.ShowEditorDialog(System.Windows.Forms.Design.IWindowsFormsEditorService)">
      <summary>
        <para>Shows the dialog box for the collection editor using the
      specified <see cref="T:System.Windows.Forms.Design.IWindowsFormsEditorService" /> object.</para>
      </summary>
      <param name="edSvc">An <see cref="T:System.Windows.Forms.Design.IWindowsFormsEditorService" /> that can be used to show the dialog box.</param>
      <returns>
        <para>A <see cref="T:System.Windows.Forms.DialogResult" /> that indicates the result code
   returned from the dialog box.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.CollectionForm.OnEditValueChanged">
      <summary>
        <para>Provides an opportunity to perform processing when a collection value has
 changed.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.Design.CollectionEditor.CollectionForm.CollectionItemType">
      <summary>
        <para> Gets the data type of each item in the collection.
      </para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.Design.CollectionEditor.CollectionForm.CollectionType">
      <summary>
        <para> Gets the data type of the collection object.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.Design.CollectionEditor.CollectionForm.Context">
      <summary>
        <para> Gets a type descriptor that indicates the current context.
      </para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.Design.CollectionEditor.CollectionForm.EditValue">
      <summary>
        <para> Gets or sets the collection object to edit.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.Design.CollectionEditor.CollectionForm.Items">
      <summary>
        <para> Gets or sets
      the array of items for this form to display.
      </para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.Design.CollectionEditor.CollectionForm.NewItemTypes">
      <summary>
        <para>Gets the available item types that can be created for this collection.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.CollectionEditorCollectionForm.OnEditValueChanged">
      <summary>
      This is called when the value property in the CollectionForm has changed.
      In it you should update your user interface to reflect the current value.
 </summary>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.CollectionEditorCollectionForm.ShowEditorDialog(System.Windows.Forms.Design.IWindowsFormsEditorService)">
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.CollectionEditorCollectionForm.SelectionWrapper.CanResetValue(System.Object)">
      <summary>
        <para>
       When overridden in a derived class, indicates whether
       resetting the <paramref name="component " />will change the value of the
    <paramref name="component" />.
 </para>
      </summary>
      <param name="component">
        <para> The component to test for reset capability.</para>
      </param>
      <returns>
        <para>
          <see langword="true " />if resetting 
          the <paramref name="component " />will change the value of the <paramref name="component" />; 
          otherwise, <see langword="false" />.
       </para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.CollectionEditorCollectionForm.SelectionWrapper.GetValue(System.Object)">
      <summary>
        <para>
       When overridden in a derived class, gets the current
       value
       of the
       property on a component.
    </para>
      </summary>
      <param name="component">
    The component with the property whose value will be retrieved.
 </param>
      <returns>
        <para>
       The value of a property for a specified component.
    </para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.CollectionEditorCollectionForm.SelectionWrapper.ResetValue(System.Object)">
      <summary>
        <para>
       When overridden in a derived class, resets the
       value
       for this property
       of the component.
    </para>
      </summary>
      <param name="component">
        <para>The component with the property whose value will be reset. </para>
      </param>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.CollectionEditorCollectionForm.SelectionWrapper.SetValue(System.Object,System.Object)">
      <summary>
        <para>
       When overridden in a derived class, sets the value of
       the component to a different value.
    </para>
      </summary>
      <param name="component">
        <para> The component with the property whose value will be set.</para>
      </param>
      <param name="value">
       The new value.
    </param>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.CollectionEditorCollectionForm.SelectionWrapper.ShouldSerializeValue(System.Object)">
      <summary>
        <para>
       When overridden in a derived class, indicates whether the
       value of
       this property needs to be persisted.
    </para>
      </summary>
      <param name="component">
        <para>The component with the property will be examined for persistance. </para>
      </param>
      <returns>
        <para>
          <see langword="true " />when the property should be persisted; 
          otherwise, <see langword="false" />.
       </para>
      </returns>
    </member>
    <member name="P:System.ComponentModel.Design.CollectionEditor.CollectionEditorCollectionForm.SelectionWrapper.ComponentType">
      <summary>
        <para>
       When overridden in a derived class, gets the type of the
       component this property
       is bound to.
    </para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.Design.CollectionEditor.CollectionEditorCollectionForm.SelectionWrapper.IsReadOnly">
      <summary>
        <para>
       When overridden in
       a derived class, gets a value
       indicating whether this property is read-only.
    </para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.Design.CollectionEditor.CollectionEditorCollectionForm.SelectionWrapper.PropertyType">
      <summary>
        <para>
       When overridden in a derived class,
       gets the type of the property.
    </para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.Design.CollectionEditor.PropertyGridSite.Component">
    </member>
    <member name="P:System.ComponentModel.Design.CollectionEditor.PropertyGridSite.Container">
    </member>
    <member name="P:System.ComponentModel.Design.CollectionEditor.PropertyGridSite.DesignMode">
    </member>
    <member name="P:System.ComponentModel.Design.CollectionEditor.PropertyGridSite.Name">
    </member>
    <member name="M:System.Diagnostics.Design.VerbConverter.#ctor">
    </member>
    <member name="T:System.ComponentModel.Design.ArrayEditor">
      <summary>
        <para> Provides a user interface for editing arrays at design time.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.ArrayEditor.#ctor(System.Type)">
      <summary>
        <para>Initializes a new instance of <see cref="T:System.ComponentModel.Design.ArrayEditor" /> using the specified
   data type for the array.</para>
      </summary>
      <param name="type"> The data type of the items in the array.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ArrayEditor.CreateCollectionItemType">
      <summary>
        <para>Gets the data type
      that
      this collection is designed to contain.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.Type" /> that indicates the data type that the collection is designed to contain.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.ArrayEditor.GetItems(System.Object)">
      <summary>
        <para>Gets the items in the array.</para>
      </summary>
      <param name="editValue">The array from which to retrieve the items.</param>
      <returns>
        <para>An array consisting of the items within the specified array. If the object specified
      in the <paramref name="editValue" /> parameter is not an array, a new empty object is
      returned.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.ArrayEditor.SetItems(System.Object,System.Object[])">
      <summary>
        <para>Sets the items in the array.</para>
      </summary>
      <param name="editValue">The array to set the items to.</param>
      <param name=" value">The array of objects to set as the items of the array.</param>
      <returns>
        <para> An instance of the new array. If the object specified by
      the <paramref name="editValue" /> parameter is not an array, the object specified by the
   <paramref name="editValue" /> parameter is returned.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.BinaryEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>
        <para>Edits the value of the specified object using the specified service provider and context.</para>
      </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information. </param>
      <param name="provider">A service provider object through which editing services may be obtained. </param>
      <param name="value">The object to edit the value of. </param>
      <returns>
        <para>The new value of the object. If the value of the object hasn't
      changed, this should return the same object it was passed.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.BinaryEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <para>Gets the editor style used by the <see cref="M:System.ComponentModel.Design.BinaryEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)" /> method.</para>
      </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information. </param>
      <returns>
        <para>An enum value indicating the provided editing style.</para>
      </returns>
    </member>
    <member name="T:System.ComponentModel.Design.ByteViewer">
      <summary>
        <para>Displays byte arrays in
 hexadecimal, ANSI, and Unicode formats.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.ByteViewer.#ctor">
      <summary>
        <para>
       Initializes a new instance of the <see cref="T:System.ComponentModel.Design.ByteViewer" /> class.
    </para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.ByteViewer.GetBytes">
      <summary>
        <para>Gets the bytes in the buffer.</para>
      </summary>
      <returns>
        <para>The unsigned byte array reference.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.ByteViewer.GetDisplayMode">
      <summary>
        <para> Gets the display mode for the control.
      </para>
      </summary>
      <returns>
        <para> The display mode that this control 
      uses. The returned value is defined in <see cref="T:System.ComponentModel.Design.DisplayMode" />.
      </para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.ByteViewer.SaveToFile(System.String)">
      <summary>
        <para> Writes the raw data from the data buffer to a file.
      </para>
      </summary>
      <param name="path">The file path to save to. </param>
    </member>
    <member name="M:System.ComponentModel.Design.ByteViewer.SetBytes(System.Byte[])">
      <summary>
        <para> Sets the byte array to display in the viewer.
      </para>
      </summary>
      <param name="bytes">The byte array to display. </param>
    </member>
    <member name="M:System.ComponentModel.Design.ByteViewer.SetDisplayMode(System.ComponentModel.Design.DisplayMode)">
      <summary>
        <para> Sets the current display mode.
      </para>
      </summary>
      <param name="mode">The display mode to set. </param>
    </member>
    <member name="M:System.ComponentModel.Design.ByteViewer.SetFile(System.String)">
      <summary>
        <para> Sets the file to display in the viewer.
 </para>
      </summary>
      <param name="path">The file path to load from. </param>
    </member>
    <member name="M:System.ComponentModel.Design.ByteViewer.SetStartLine(System.Int32)">
      <summary>
        <para> Sets the current line for the <see cref="F:System.ComponentModel.Design.DisplayMode.Hexdump" /> view.
   </para>
      </summary>
      <param name="line">The current line to display from. </param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentDesigner">
      <summary>
        <para> Provides a basic designer for components.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.InvokeGetInheritanceAttribute(System.ComponentModel.Design.ComponentDesigner)">
      <summary>
        <para>Gets the <see cref="T:System.ComponentModel.InheritanceAttribute" /> of the specified
<see cref="T:System.ComponentModel.Design.ComponentDesigner" />.</para>
      </summary>
      <param name="toInvoke">The <see cref="T:System.ComponentModel.Design.ComponentDesigner" /> whose inheritance attribute to retrieve.</param>
      <returns>
        <para>The <see cref="T:System.ComponentModel.InheritanceAttribute" /> of the specified designer.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.Dispose">
      <summary>
        <para> Releases all resources used by the
   <see cref="T:System.ComponentModel.Design.ComponentDesigner" /> .</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.Dispose(System.Boolean)">
      <summary>
        <para>Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Design.ComponentDesigner" /> and optionally releases the managed
 resources.</para>
      </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.DoDefaultAction">
      <summary>
        <para>Creates a method signature in the source code file for the default event on the component and navigates
 the user's cursor to that location in preparation for assigning
 the default action.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.Initialize(System.ComponentModel.IComponent)">
      <summary>
        <para> Prepares the designer to view, edit,
      and design the specified component.</para>
      </summary>
      <param name="component">The component for this designer. </param>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.InitializeNonDefault">
      <summary>
        <para>Initializes the settings for an imported component that is already initialized to settings other than the
 defaults.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.GetService(System.Type)">
      <summary>
        <para>Provides
      a way for a designer to get services from the hosting
      environment.</para>
      </summary>
      <param name="serviceType">The type of service to request.</param>
      <returns>
        <para>An object implementing the requested service, or
   <see langword="null" />
   if the service
   cannot be resolved.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.OnSetComponentDefaults">
      <summary>
        <para> Sets the default properties for the component.
      </para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.PostFilterAttributes(System.Collections.IDictionary)">
      <summary>
        <para> Allows a designer to change or remove items from the set
 of attributes that it exposes through a <see cref="T:System.ComponentModel.TypeDescriptor" />.
 </para>
      </summary>
      <param name="attributes">The attributes for the class of the component. </param>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.PostFilterEvents(System.Collections.IDictionary)">
      <summary>
        <para> Allows a designer to change or remove items from the set
 of events that it exposes through a <see cref="T:System.ComponentModel.TypeDescriptor" />.
 </para>
      </summary>
      <param name="events">The events for the class of the component.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.PostFilterProperties(System.Collections.IDictionary)">
      <summary>
        <para> Allows a designer to change or remove items from the set
 of properties that it exposes through a <see cref="T:System.ComponentModel.TypeDescriptor" />.
 </para>
      </summary>
      <param name="properties">The properties for the class of the component. </param>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.PreFilterAttributes(System.Collections.IDictionary)">
      <summary>
        <para> Allows a designer to add to the set
      of
      attributes that it exposes through a <see cref="T:System.ComponentModel.TypeDescriptor" />.</para>
      </summary>
      <param name="attributes">The attributes for the class of the component. </param>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.PreFilterEvents(System.Collections.IDictionary)">
      <summary>
        <para> Allows a designer to add to the
      set of events that it exposes through a <see cref="T:System.ComponentModel.TypeDescriptor" />
      
      .
      </para>
      </summary>
      <param name="events">The events for the class of the component. </param>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.PreFilterProperties(System.Collections.IDictionary)">
      <summary>
        <para> Allows a designer
      to add to the set of properties that it exposes through a <see cref="T:System.ComponentModel.TypeDescriptor" />
      
      .
      </para>
      </summary>
      <param name="properties">The properties for the class of the component. </param>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.RaiseComponentChanged(System.ComponentModel.MemberDescriptor,System.Object,System.Object)">
      <summary>
        <para> Notifies the <see cref="T:System.ComponentModel.Design.IComponentChangeService" /> that
 this component has been changed.
 </para>
      </summary>
      <param name="member">A <see cref="T:System.ComponentModel.MemberDescriptor" /> that indicates the member that has been changed.</param>
      <param name=" oldValue">The old value of the member.</param>
      <param name=" newValue">The new value of the member.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.RaiseComponentChanging(System.ComponentModel.MemberDescriptor)">
      <summary>
        <para> Notifies the <see cref="T:System.ComponentModel.Design.IComponentChangeService" /> that
 this component is about to be changed.
 </para>
      </summary>
      <param name="member">A <see cref="T:System.ComponentModel.MemberDescriptor" /> that indicates the member that is about to be changed.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentDesigner.AssociatedComponents">
      <summary>
        <para> Gets the collection of components associated with this designer.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentDesigner.Component">
      <summary>
        <para> Gets the component this designer is designing.
      </para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentDesigner.Inherited">
      <summary>
        <para> Gets a value indicating whether this component is inherited.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentDesigner.InheritanceAttribute">
      <summary>
        <para> Gets an attribute that indicates the type of inheritance of the associated component.
      </para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentDesigner.ShadowProperties">
      <summary>
        <para> Gets a collection of property values that override user settings.</para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentDesigner.Verbs">
      <summary>
        <para> Gets the design-time verbs supported by the component that is associated with the designer.
      </para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentDesigner.ShadowPropertyCollection">
      <summary>
        <para>Represents a collection of shadow properties that should override inherited default or assigned values for
 specific properties. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.ShadowPropertyCollection.Contains(System.String)">
      <summary>
        <para> Indicates whether a property
 matching the specified name exists in the collection.</para>
      </summary>
      <param name="propertyName">The name of the property to check for in the collection.</param>
      <returns>
        <para>
          <see langword="true" /> if the property exists in the collection; otherwise,
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentDesigner.ShadowPropertyCollection.Item(System.String)">
      <summary>
        <para>Gets or sets the object at the specified index.</para>
      </summary>
      <param name="propertyName">The name of the property to access in the collection.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DateTimeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>
      Edits the specified object value using the editor style provided by
      GetEditorStyle.  A service provider is provided so that any
      required editing services can be obtained.
 </summary>
      <param name="context">
      A type descriptor context that can be used to provide additional
      context information.
 </param>
      <param name="provider">
      A service provider object through which editing services may
      be obtained.
 </param>
      <param name="value">
      An instance of the value being edited.
 </param>
      <returns>
      The new value of the object.  If the value of the object hasn't
      changed, this should return the same object it was passed.
 </returns>
    </member>
    <member name="M:System.ComponentModel.Design.DateTimeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
      Retrieves the editing style of the Edit method.  If the method
      is not supported, this will return None.
 </summary>
      <param name="context">
      A type descriptor context that can be used to provide additional
      context information.
 </param>
      <returns>
      An enum value indicating the provided editing style.
 </returns>
    </member>
    <member name="M:System.ComponentModel.Design.DateTimeEditor.DateTimeUI.#ctor">
      <summary>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.DateTimeEditor.DateTimeUI.End">
      <summary>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.DateTimeEditor.DateTimeUI.Start(System.Windows.Forms.Design.IWindowsFormsEditorService,System.Object)">
      <summary>
      </summary>
    </member>
    <member name="P:System.ComponentModel.Design.DateTimeEditor.DateTimeUI.Value">
      <summary>
      </summary>
    </member>
    <member name="T:System.ComponentModel.Design.DisplayMode">
      <summary>
        <para> Defines identifiers that indicate the display modes used
      by <see cref="T:System.ComponentModel.Design.ByteViewer" />.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.DisplayMode.Hexdump">
      <summary>
        <para>A hexadecimal
      format display.</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.DisplayMode.Ansi">
      <summary>
        <para> An ANSI format display.
      </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.DisplayMode.Unicode">
      <summary>
        <para> A Unicode format display.
      </para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.DisplayMode.Auto">
      <summary>
        <para> A display mode that automatically selects a display mode.
      In this mode, the bytes are examined to determine if they are hexadecimal or
      printable. If the bytes are in hexadecimal format, the <see cref="F:System.ComponentModel.Design.DisplayMode.Hexdump" /> mode is selected. If
      the characters match
      a printable character set, a test is run to automatically select either
      the <see cref="F:System.ComponentModel.Design.DisplayMode.Ansi" /> or <see cref="F:System.ComponentModel.Design.DisplayMode.Unicode" /> display mode.
      </para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.Design.InheritanceService">
      <summary>
        <para> Provides a
      set of methods for identifying inherited components.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.InheritanceService.#ctor">
      <summary>
        <para>
       Initializes a new instance of the <see cref="T:System.ComponentModel.Design.InheritanceService" /> class.
    </para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.InheritanceService.Dispose">
      <summary>
        <para>Releases all resources used by the <see cref="T:System.ComponentModel.Design.InheritanceService" />.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.InheritanceService.AddInheritedComponents(System.ComponentModel.IComponent,System.ComponentModel.IContainer)">
      <summary>
        <para>Adds the components inherited by the specified component to the <see cref="T:System.ComponentModel.Design.InheritanceService" />.</para>
      </summary>
      <param name="component">The component to search for inherited components to add to the specified container.</param>
      <param name="container">The container to add the inherited components to.</param>
    </member>
    <member name="M:System.ComponentModel.Design.InheritanceService.AddInheritedComponents(System.Type,System.ComponentModel.IComponent,System.ComponentModel.IContainer)">
      <summary>
        <para>Adds the components of the specified type that are 
      inherited by the specified component to the <see cref="T:System.ComponentModel.Design.InheritanceService" />.</para>
      </summary>
      <param name="type"> The base type to search for.</param>
      <param name="component">The component to search for inherited components to add to the specified container.</param>
      <param name="container">The container to add the inherited components to.</param>
    </member>
    <member name="M:System.ComponentModel.Design.InheritanceService.IgnoreInheritedMember(System.Reflection.MemberInfo,System.ComponentModel.IComponent)">
      <summary>
        <para>Indicates whether to ignore the specified member.</para>
      </summary>
      <param name="member">The member to check. This member is either a <see cref="T:System.Reflection.FieldInfo" /> or a <see cref="T:System.Reflection.MethodInfo" /> .</param>
      <param name="component">The component instance this member is bound to.</param>
      <returns>
        <para>
          <see langword="true" /> if
 the specified member should be included in the set of inherited components;
 otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.InheritanceService.GetInheritanceAttribute(System.ComponentModel.IComponent)">
      <summary>
        <para>Gets the inheritance attribute
 of the specified component.</para>
      </summary>
      <param name="component">The component to retrieve the inheritance attribute for.</param>
      <returns>
        <para> An <see cref="T:System.ComponentModel.InheritanceAttribute" /> that
 describes the level of
 inheritance that this component comes from.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.InheritedPropertyDescriptor.#ctor(System.ComponentModel.PropertyDescriptor,System.Object,System.Attribute[])">
      <summary>
        <para>
       Initializes a new instance of the <see cref="T:System.ComponentModel.Design.InheritedPropertyDescriptor" /> class.
    </para>
      </summary>
      <param name="propertyDescriptor">
    The property descriptor to inherit from.
 </param>
      <param name="component">
    The compnent to create this inherited property descriptor for.
 </param>
      <param name="attrs">
    An array of new member attributes to merge into this property's attribute set.
 </param>
    </member>
    <member name="M:System.ComponentModel.Design.InheritedPropertyDescriptor.#ctor(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>
        <para>
       Initializes a new instance of the <see cref="T:System.ComponentModel.Design.InheritedPropertyDescriptor" /> class.
    </para>
      </summary>
      <param name="propertyDescriptor">
    The property descriptor to inherit from.
 </param>
      <param name="component">
    The compnent to create this inherited property descriptor for.
 </param>
    </member>
    <member name="M:System.ComponentModel.Design.InheritedPropertyDescriptor.#ctor(System.ComponentModel.PropertyDescriptor,System.Object,System.Attribute)">
      <summary>
        <para>
       Initializes a new instance of the <see cref="T:System.ComponentModel.Design.InheritedPropertyDescriptor" /> class.
    </para>
      </summary>
      <param name="propertyDescriptor">
    The property descriptor to inherit from.
 </param>
      <param name="component">
    The compnent to create this inherited property descriptor for.
 </param>
      <param name="a1">
    An additional attribute to merge into the property's attribute set.
 </param>
    </member>
    <member name="M:System.ComponentModel.Design.InheritedPropertyDescriptor.#ctor(System.ComponentModel.PropertyDescriptor,System.Object,System.Attribute,System.Attribute)">
      <summary>
        <para>
       Initializes a new instance of the <see cref="T:System.ComponentModel.Design.InheritedPropertyDescriptor" /> class.
    </para>
      </summary>
      <param name="propertyDescriptor">
    The property descriptor to inherit from.
 </param>
      <param name="component">
    The compnent to create this inherited property descriptor for.
 </param>
      <param name="a1">
    An additional attribute to merge into the property's attribute set.
 </param>
      <param name="a2">
    An additional attribute to merge into the property's attribute set.
 </param>
    </member>
    <member name="M:System.ComponentModel.Design.InheritedPropertyDescriptor.#ctor(System.ComponentModel.PropertyDescriptor,System.Object,System.Attribute,System.Attribute,System.Attribute)">
      <summary>
        <para>
       Initializes a new instance of the <see cref="T:System.ComponentModel.Design.InheritedPropertyDescriptor" /> class.
    </para>
      </summary>
      <param name="propertyDescriptor">
    The property descriptor to inherit from.
 </param>
      <param name="component">
    The compnent to create this inherited property descriptor for.
 </param>
      <param name="a1">
    An additional attribute to merge into the property's attribute set.
 </param>
      <param name="a2">
    An additional attribute to merge into the property's attribute set.
 </param>
      <param name="a3">
    An additional attribute to merge into the property's attribute set.
 </param>
    </member>
    <member name="M:System.ComponentModel.Design.InheritedPropertyDescriptor.#ctor(System.ComponentModel.PropertyDescriptor,System.Object,System.Attribute,System.Attribute,System.Attribute,System.Attribute)">
      <summary>
        <para>
       Initializes a new instance of the <see cref="T:System.ComponentModel.Design.InheritedPropertyDescriptor" /> class.
    </para>
      </summary>
      <param name="propertyDescriptor">
    The property descriptor to inherit from.
 </param>
      <param name="component">
    The compnent to create this inherited property descriptor for.
 </param>
      <param name="a1">
    An additional attribute to merge into the property's attribute set.
 </param>
      <param name="a2">
    An additional attribute to merge into the property's attribute set.
 </param>
      <param name="a3">
    An additional attribute to merge into the property's attribute set.
 </param>
      <param name="a4">
    An additional attribute to merge into the property's attribute set.
 </param>
    </member>
    <member name="M:System.ComponentModel.Design.InheritedPropertyDescriptor.CanResetValue(System.Object)">
      <summary>
        <para>Indicates whether reset will change
       the value of the component.</para>
      </summary>
      <param name="component">The component that owns the property that will be tested for resetability.</param>
      <returns>
        <para>
          <see langword="true" /> if the value would be changed by a reset, the value of 
    shouldPersist if this method exists; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.InheritedPropertyDescriptor.GetValue(System.Object)">
      <summary>
        <para> Gets the current value of the property on the component,
       invoking the getXXX method.</para>
      </summary>
      <param name="component">The component that owns the property to retrieve the value for.</param>
      <returns>
        <para>The value of the property of the specified component.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.InheritedPropertyDescriptor.ResetValue(System.Object)">
      <summary>
        <para>Resets the default value for this property
       on the component.</para>
      </summary>
      <param name="component">The component that owns the property which will have its value reset.</param>
    </member>
    <member name="M:System.ComponentModel.Design.InheritedPropertyDescriptor.SetValue(System.Object,System.Object)">
      <summary>
        <para>
       Sets the value to be the new value of this property
       on the component by invoking the setXXX method on the component.
    </para>
      </summary>
      <param name="component">
    The component to set the property's value on.
 </param>
      <param name="value">
    The new value for the property on the component.
 </param>
    </member>
    <member name="M:System.ComponentModel.Design.InheritedPropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary>
        <para>Indicates whether the value of this property needs to be persisted.</para>
      </summary>
      <param name="component">The component that owns the property to be examined to determine the need for its persistance.</param>
      <returns>
        <para>
          <see langword="true" /> if the property should be 
    persisted; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="P:System.ComponentModel.Design.InheritedPropertyDescriptor.ComponentType">
      <summary>
        <para>
       Gets or sets the type of the component this property descriptor is bound to.
    </para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.Design.InheritedPropertyDescriptor.DefaultValue">
      <summary>
        <para>
       Gets or sets the default value for this property.
    </para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.Design.InheritedPropertyDescriptor.IsReadOnly">
      <summary>
        <para>
       Gets or sets a value indicating whether this property is read only.
    </para>
      </summary>
    </member>
    <member name="P:System.ComponentModel.Design.InheritedPropertyDescriptor.PropertyType">
      <summary>
        <para>
       Gets or sets the type of the property.
    </para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.Design.LocalizationExtenderProvider">
      <summary>
        <para> Provides design-time localization support for code generators to enable programs
      to provide run-time localization features.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.LocalizationExtenderProvider.#ctor(System.ComponentModel.ISite,System.ComponentModel.IComponent)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.LocalizationExtenderProvider" /> class using the
   specified service provider and base component.</para>
      </summary>
      <param name="serviceProvider">A service provider for the specified component.</param>
      <param name=" baseComponent">The base component to localize.</param>
    </member>
    <member name="M:System.ComponentModel.Design.LocalizationExtenderProvider.GetLanguage(System.Object)">
      <summary>
        <para> Gets the current language resource for the specified object.</para>
      </summary>
      <param name="o">The object to get the current language resource for.</param>
      <returns>
        <para>A <see cref="T:System.Globalization.CultureInfo" /> indicating the language support.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.LocalizationExtenderProvider.GetLoadLanguage(System.Object)">
      <summary>
        <para>Gets the language resource that should be used during loading.</para>
      </summary>
      <param name="o">The object to get the load language for.</param>
      <returns>
        <para>A <see cref="T:System.Globalization.CultureInfo" /> indicating the language support.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.LocalizationExtenderProvider.GetLocalizable(System.Object)">
      <summary>
        <para> Gets a value indicating whether the specified object supports resource
      localization.</para>
      </summary>
      <param name="o"> The object to check for localization support.</param>
      <returns>
        <para>
          <see langword="true" /> if the specified object supports resource 
   localization; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.LocalizationExtenderProvider.SetLanguage(System.Object,System.Globalization.CultureInfo)">
      <summary>
        <para> Sets the current language resource for the 
      specified object to the specified
      language resource.</para>
      </summary>
      <param name="o">The base component to set the language resource for. </param>
      <param name=" language">A <see cref="T:System.Globalization.CultureInfo" /> that indicates the language resource to use.</param>
    </member>
    <member name="M:System.ComponentModel.Design.LocalizationExtenderProvider.SetLocalizable(System.Object,System.Boolean)">
      <summary>
        <para> Sets a value indicating whether the specified object has
      localization support.</para>
      </summary>
      <param name=" o"> The base component to set as localizable or not localizable. </param>
      <param name="localizable">
        <see langword="true" /> if the object supports resource localization; otherwise, <see langword="false" />. </param>
    </member>
    <member name="M:System.ComponentModel.Design.LocalizationExtenderProvider.ShouldSerializeLanguage(System.Object)">
      <summary>
        <para> Gets a value indicating whether the specified object must have its design-time localization support persisted in a language resource. </para>
      </summary>
      <param name="o">The object to get the language support persistence flag for.</param>
      <returns>
        <para>
          <see langword="true" /> if the language support should be persisted; otherwise,
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.LocalizationExtenderProvider.ResetLanguage(System.Object)">
      <summary>
        <para> Resets the language for the specified
      object.</para>
      </summary>
      <param name="o">The object to reset the language for.</param>
    </member>
    <member name="M:System.ComponentModel.Design.LocalizationExtenderProvider.Dispose">
      <summary>
        <para>Disposes of the resources (other than memory) used by the <see cref="T:System.ComponentModel.Design.LocalizationExtenderProvider" />.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.LocalizationExtenderProvider.CanExtend(System.Object)">
      <summary>
        <para>Indicates whether this object can provide its extender properties to the 
      specified object.</para>
      </summary>
      <param name="o">The object to receive the extender properties.</param>
      <returns>
        <para>
          <see langword="true" /> if this object can provide extender properties to the 
   specified object; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="F:System.ComponentModel.Design.ObjectSelectorEditor.SubObjectSelector">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.ObjectSelectorEditor.prevValue">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.ObjectSelectorEditor.currValue">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.ObjectSelectorEditor.#ctor">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.ObjectSelectorEditor.#ctor(System.Boolean)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.ObjectSelectorEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.ObjectSelectorEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.ObjectSelectorEditor.EqualsToValue(System.Object)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.ObjectSelectorEditor.FillTreeWithData(System.ComponentModel.Design.ObjectSelectorEditor.Selector,System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.ObjectSelectorEditor.SetValue(System.Object)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.ObjectSelectorEditor.Selector.clickSeen">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.ObjectSelectorEditor.Selector.#ctor(System.ComponentModel.Design.ObjectSelectorEditor)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.ObjectSelectorEditor.Selector.AddNode(System.String,System.Object,System.ComponentModel.Design.ObjectSelectorEditor.SelectorNode)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.ObjectSelectorEditor.Selector.Clear">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.ObjectSelectorEditor.Selector.OnAfterSelect(System.Object,System.Windows.Forms.TreeViewEventArgs)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.ObjectSelectorEditor.Selector.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.ObjectSelectorEditor.Selector.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.ObjectSelectorEditor.Selector.SetSelection(System.Object,System.Windows.Forms.TreeNodeCollection)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.ObjectSelectorEditor.Selector.Start(System.Windows.Forms.Design.IWindowsFormsEditorService,System.Object)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.ObjectSelectorEditor.Selector.Stop">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.ObjectSelectorEditor.Selector.WndProc(System.Windows.Forms.Message@)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="F:System.ComponentModel.Design.ObjectSelectorEditor.SelectorNode.value">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.ObjectSelectorEditor.SelectorNode.#ctor(System.String,System.Object)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.CodeDomSerializerException">
      <summary>
        <para>The exception that is thrown when line number information
      is available for a serialization error.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerException.#ctor(System.String,System.CodeDom.CodeLinePragma)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializerException" /> class
   using the specified message and line information.</para>
      </summary>
      <param name="message">
        <para>A message describing the exception.</para>
      </param>
      <param name="linePragma">
        <para>A <see cref="T:System.CodeDom.CodeLinePragma" /> that indicates where the exception occurred.</para>
      </param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerException.#ctor(System.Exception,System.CodeDom.CodeLinePragma)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializerException" /> class using
   the specified exception and line information.</para>
      </summary>
      <param name="ex">
        <para> The exception to throw.</para>
      </param>
      <param name="linePragma">
        <para>A <see cref="T:System.CodeDom.CodeLinePragma" /> that indicates where the exception occurred.</para>
      </param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializerException" /> class using
   the specified
   serialization data and context.</para>
      </summary>
      <param name="info">Stores the data that was being used to serialize or deserialize the object that the <see cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" /> was serializing or deserializing.</param>
      <param name=" context">Describes the source and destination of the stream that generated the exception, as well as a means for serialization to retain that context and an additional caller-defined context.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.CodeDomSerializerException.LinePragma">
      <summary>
        <para>Gets or sets the line information for the error 
      associated with this exception.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CollectionCodeDomSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
      <summary>
     Deserilizes the given CodeDom object into a real object.  This
     will use the serialization manager to create objects and resolve
     data types.  The root of the object graph is returned.
 </summary>
      <param name="manager">
     A serialization manager interface that is used during the deserialization
     process.
 </param>
      <param name="codeObject">
     A CodeDom object to deserialize.
 </param>
      <returns>
     An object representing the deserialized CodeDom object.
 </returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CollectionCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
      <summary>
     Serializes the given object into a CodeDom object.
 </summary>
      <param name="manager">
     A serialization manager interface that is used during the deserialization
     process.
 </param>
      <param name="value">
     The object to serialize.
 </param>
      <returns>
     A CodeDom object representing the object that has been serialized.  Collections can
     be serialized several ways.  We will look at the current value on the context stack
     and modify our serialization based on it.  Here are the interesting things we
     look for on the context stack:

     CodeValueExpression
         This is our first choice.  If we see this we validate that the value in the
         expression is the value we're serializing, and then we pull out the expression
         and treat it as follows.

     CodePropertyReferenceExpression
         This allows us to perform the most flexible serialization.  We will use the
         data type of the property as a guide to serialization.  If the data type is
         an array, we will create an array and assign it to the property.  If it
         isn't, we will look on the data type for a single "AddRange" method that
         takes an array.  Failing that, we will look for an "Add" method and create
         multiple method invoke statements.  If this expression is on the
         context stack the return value may be a single assignment statement, a
         single method invoke statement, or a statement collection consisting
         of multiple method invokes.

     Any other expression
         In this case, the collection serializer will create an array create
         expression, but only if the collection is an array.  Otherwise, we
         will fail to serialize.
 </returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.CollectionCodeDomSerializer.Default">
      <summary>
     Retrieves a default static instance of this serializer.
 </summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentCodeDomSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
      <summary>
     Deserilizes the given CodeDom object into a real object.  This
     will use the serialization manager to create objects and resolve
     data types.  The root of the object graph is returned.
 </summary>
      <param name="manager">
     A serialization manager interface that is used during the deserialization
     process.
 </param>
      <param name="codeObject">
     A CodeDom object to deserialize.  For this serializer this must point to
     a CodeStatementCollection that has statements whose left hand side
     ultimately points to the object we need to deserialize.
 </param>
      <returns>
     An object representing the deserialized CodeDom object.
 </returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
      <summary>
     Serializes the given object into a CodeDom object.
 </summary>
      <param name="manager">
     A serialization manager interface that is used during the deserialization
     process.
 </param>
      <param name="value">
     The object to serialize.
 </param>
      <returns>
     A CodeDom object representing the object that has been serialized.  For components,
     this returns a CodeStatementCollection containing all of the properties, events
     and methods that had to be set to serialize the given component.  In addition,
     this may create a variable reference in a CodeTypeDeclaration, if one can be
     found in the serialization context stack.
 </returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ComponentCodeDomSerializer.Default">
      <summary>
     Retrieves a default static instance of this serializer.
 </summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.EnumCodeDomSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
      <summary>
     Deserilizes the given CodeDom object into a real object.  This
     will use the serialization manager to create objects and resolve
     data types.  The root of the object graph is returned.
 </summary>
      <param name="manager">
     A serialization manager interface that is used during the deserialization
     process.
 </param>
      <param name="codeObject">
     A CodeDom object to deserialize. We do not actually process this; we just let the
     default code parser handle it.
 </param>
      <returns>
     An object representing the deserialized CodeDom object.
 </returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.EnumCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
      <summary>
     Serializes the given object into a CodeDom object.
 </summary>
      <param name="manager">
     A serialization manager interface that is used during the deserialization
     process.
 </param>
      <param name="value">
     The object to serialize.
 </param>
      <returns>
     A CodeDom object representing the object that has been serialized.
 </returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.EnumCodeDomSerializer.Default">
      <summary>
     Retrieves a default static instance of this serializer.
 </summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ICodeDomDesignerReload">
      <summary>
        <para>Provides an interface that can be used to optimize the
      reloading of a designer.</para>
      </summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ICodeDomDesignerReload.ShouldReloadDesigner(System.CodeDom.CodeCompileUnit)">
      <summary>
        <para> Indicates whether the designer should reload in
      order to import the specified compile unit correctly.</para>
      </summary>
      <param name="newTree">A <see cref="T:System.CodeDom.CodeCompileUnit" /> containing the designer document code.</param>
      <returns>
        <para>
          <see langword="true" /> if the designer should reload; otherwise,
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptorCodeDomSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
      <summary>
     Deserilizes the given CodeDom object into a real object.  This
     will use the serialization manager to create objects and resolve
     data types.  The root of the object graph is returned.
 </summary>
      <param name="manager">
     A serialization manager interface that is used during the deserialization
     process.
 </param>
      <param name="codeObject">
     A CodeDom object to deserialize.
 </param>
      <returns>
     An object representing the deserialized CodeDom object.
 </returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptorCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
      <summary>
     Serializes the given object into a CodeDom object.
 </summary>
      <param name="manager">
     A serialization manager interface that is used during the deserialization
     process.
 </param>
      <param name="value">
     The object to serialize.
 </param>
      <returns>
     A CodeDom object representing the object that has been serialized.  For
     InstanceDescriptors, this will create a CodeExpression representing the
     descriptor.
 </returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptorCodeDomSerializer.Default">
      <summary>
     Retrieves a default static instance of this serializer.
 </summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ObjectCodeDomSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
      <summary>
     Deserilizes the given CodeDom object into a real object.  This
     will use the serialization manager to create objects and resolve
     data types.  The root of the object graph is returned.
 </summary>
      <param name="manager">
     A serialization manager interface that is used during the deserialization
     process.
 </param>
      <param name="codeObject">
     A CodeDom object to deserialize.
 </param>
      <returns>
     An object representing the deserialized CodeDom object.
 </returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ObjectCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
      <summary>
     Serializes the given object into a CodeDom object.
 </summary>
      <param name="manager">
     A serialization manager interface that is used during the deserialization
     process.
 </param>
      <param name="value">
     The object to serialize.
 </param>
      <returns>
     A CodeDom object representing the object that has been serialized.  For
     generic objects, this just walks the object's properties and events.
     It returns a CodeStatementCollection.
 </returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ObjectCodeDomSerializer.Default">
      <summary>
     Retrieves a default static instance of this serializer.
 </summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.PrimitiveCodeDomSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
      <summary>
     Deserilizes the given CodeDom object into a real object.  This
     will use the serialization manager to create objects and resolve
     data types.  The root of the object graph is returned.
 </summary>
      <param name="manager">
     A serialization manager interface that is used during the deserialization
     process.
 </param>
      <param name="codeObject">
     A CodeDom object to deserialize. This must be an instance of CodePrimitiveExpression.
 </param>
      <returns>
     An object representing the deserialized CodeDom object.
 </returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.PrimitiveCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
      <summary>
     Serializes the given object into a CodeDom object.
 </summary>
      <param name="manager">
     A serialization manager interface that is used during the deserialization
     process.
 </param>
      <param name="value">
     The object to serialize.
 </param>
      <returns>
     A CodeDom object representing the object that has been serialized.
 </returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.PrimitiveCodeDomSerializer.Default">
      <summary>
     Retrieves a default static instance of this serializer.
 </summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ResourceCodeDomSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ResourceCodeDomSerializer.DeserializeInvariant(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.String)">
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ResourceCodeDomSerializer.GetEnumerator(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Globalization.CultureInfo)">
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ResourceCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ResourceCodeDomSerializer.SerializeInvariant(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ResourceCodeDomSerializer.WriteResource(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.String,System.Object)">
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ResourceCodeDomSerializer.WriteResourceInvariant(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.String,System.Object)">
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ResourceCodeDomSerializer.Default">
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ResourceCodeDomSerializer.SerializationResourceManager.GetEnumerator(System.Globalization.CultureInfo)">
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ResourceCodeDomSerializer.SerializationResourceManager.GetObject(System.String)">
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ResourceCodeDomSerializer.SerializationResourceManager.GetObject(System.String,System.Boolean)">
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ResourceCodeDomSerializer.SerializationResourceManager.GetString(System.String)">
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ResourceCodeDomSerializer.SerializationResourceManager.SetValue(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.String,System.Object,System.Boolean)">
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ResourceCodeDomSerializer.SerializationResourceManager.SetValue(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.ComponentModel.Design.Serialization.CodeValueExpression,System.Object,System.Boolean)">
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ResourceCodeDomSerializer.SerializationResourceManager.DeclarationAdded">
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootCodeDomSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
      <summary>
     Deserilizes the given CodeDom element into a real object.  This
     will use the serialization manager to create objects and resolve
     data types.  The root of the object graph is returned.
 </summary>
      <param name="manager">
     A serialization manager interface that is used during the deserialization
     process.
 </param>
      <param name="codeObject">
     A CodeDom object to deserialize.  For this serializer this must point to a
     CodeTypeDeclaration.
 </param>
      <returns>
     An object representing the deserialized CodeDom object.
 </returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
      <summary>
     Serializes the given object into a CodeDom object.
 </summary>
      <param name="manager">
     A serialization manager interface that is used during the deserialization
     process.
 </param>
      <param name="value">
     The object to serialize.
 </param>
      <returns>
     A CodeDom object representing the object that has been serialized.  This always
     returns a CodeTypeDeclaration.
 </returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootCodeDomSerializer.ContainerName">
      <summary>
     The name of the IContainer we will use for components that require a container.
     Note that compnent model serializer also has this property.
 </summary>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootCodeDomSerializer.ContainerRequired">
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootCodeDomSerializer.InitMethodName">
      <summary>
     The name of the method we will serialize into.  We always use this, so if there
     is a need to change it down the road, we can make it virtual.
 </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.AdornmentType.GrabHandle">
      <summary>
        <para>
       Specifies
       the type as
       grab handle adornments.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.AdornmentType.ContainerSelector">
      <summary>
        <para>
       Specifies
       the type as
       container selector adornments.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.AdornmentType.Maximum">
      <summary>
        <para>
       Specifies the
       type as the
       maximum size of any adornment.
    </para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.AdvancedBindingConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
        <para>Converts the specified object to the specified destination type, if possible.</para>
      </summary>
      <param name="context">A type decriptor context that can be used to provide context information.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> that can be used to provide culture information.</param>
      <param name="value">The object to convert.</param>
      <param name="destinationType">The destination type to convert to, if possible.</param>
      <returns>
        <para>The converted object, or <see langword="null" /> if conversion is not 
    possible.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.AdvancedBindingEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>
        <para>Edits the specified value using the specified provider 
       within the specified context.</para>
      </summary>
      <param name="context">The context of the value.</param>
      <param name=" provider">The provider to use to provide values.</param>
      <param name=" value"> The object to be edited.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.AdvancedBindingEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <para>Gets the edit style from the current context.</para>
      </summary>
      <param name="context">The context of the object the bindings provide values to.</param>
      <returns>
        <para>A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle" /> value.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.AdvancedBindingObject.#ctor(System.Windows.Forms.ControlBindingsCollection)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Windows.Forms.Design.AdvancedBindingObject" /> class.</para>
      </summary>
      <param name="bindings">The bindings to store.</param>
    </member>
    <member name="P:System.Windows.Forms.Design.AdvancedBindingObject.Bindings">
      <summary>
        <para>Gets or sets the collection of bindings.</para>
      </summary>
    </member>
    <member name="E:System.Windows.Forms.Design.AdvancedBindingObject.Disposed">
      <summary>
        <para>Adds a event handler to listen to the Disposed event on the component.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.Design.AdvancedBindingObject.ShowAll">
      <summary>
        <para>Indicates whether to show all bindings.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.Design.AdvancedBindingObject.Name">
      <summary>
        <para>Gets or sets the name for this object.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.AdvancedBindingPicker.#ctor(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Windows.Forms.Design.AdvancedBindingPicker" /> class.</para>
      </summary>
      <param name="context">A type descriptor context that can provide context information.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.AdvancedBindingPropertyDescriptor.GetEditor(System.Type)">
      <summary>
        <para>Gets an editor of the specified type.</para>
      </summary>
      <param name="type">The type of editor to retrieve.</param>
      <returns>
        <para>An instance of the requested editor type, or <see langword="null " />if an 
    editor could not be found. </para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.AdvancedBindingPropertyDescriptor.CanResetValue(System.Object)">
      <summary>
        <para>Indicates whether resetting the component will change the value of the 
       component.</para>
      </summary>
      <param name="component">The component to determine if resetting will change the value of the property on.</param>
      <returns>
        <para>
          <see langword="true" /> if the component can be reset without changing the 
    value of the property; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.AdvancedBindingPropertyDescriptor.FillAttributes(System.Collections.IList)">
      <summary>
        <para>In an derived class, adds the attributes of the inherited class to the
       specified list of attributes in the parent class.</para>
      </summary>
      <param name="attributeList">An <see cref="T:System.Collections.IList" /> that lists the attributes in the parent class. Initially, this will be empty.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.AdvancedBindingPropertyDescriptor.GetValue(System.Object)">
      <summary>
        <para>Gets the current value of the property on the specified 
       component.</para>
      </summary>
      <param name="component">The component from which to get the value of the property this descriptor describes.</param>
      <returns>
        <para>The value of the property on the specified component.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.AdvancedBindingPropertyDescriptor.ResetValue(System.Object)">
      <summary>
        <para>Resets the value of the property on the specified component.</para>
      </summary>
      <param name="component">The component with this property that should be reset.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.AdvancedBindingPropertyDescriptor.SetValue(System.Object,System.Object)">
      <summary>
        <para>Sets the value of the property on the specified component to the specified 
       value.</para>
      </summary>
      <param name="component">The component that owns the property to set the value of.</param>
      <param name=" value">The value to set the property to.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.AdvancedBindingPropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary>
        <para>Indicates whether the value of this property should be persisted.</para>
      </summary>
      <param name="component">The component that owns the property to determine whether the value of should be persisted.</param>
      <returns>
        <para>
          <see langword="true" /> if the property should be persisted; otherwise, 
 <see langword="false" />.</para>
      </returns>
    </member>
    <member name="P:System.Windows.Forms.Design.AdvancedBindingPropertyDescriptor.ComponentType">
      <summary>
        <para>Gets the type of component this property is bound to.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.Design.AdvancedBindingPropertyDescriptor.IsReadOnly">
      <summary>
        <para>Indicates whether this property is read-only.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.Design.AdvancedBindingPropertyDescriptor.PropertyType">
      <summary>
        <para>Gets the type of the property.</para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.Design.AnchorEditor">
      <summary>
        <para>Provides a user interface for configuring an
 <see cref="P:System.Windows.Forms.Control.Anchor" />
 property.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.AnchorEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>
        <para>Edits the value of the specified object using the specified service provider and context.</para>
      </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.</param>
      <param name="provider">An <see cref="T:System.IServiceProvider" /> through which editing services may be obtained.</param>
      <param name="value">An instance of the value being edited.</param>
      <returns>
        <para>The new value of the object. If the value of the object hasn't
      changed, this should return the same object it was passed.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.AnchorEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <para>Gets
      the editor style used by the <see cref="M:System.Windows.Forms.Design.AnchorEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)" />
      method.</para>
      </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.</param>
      <returns>
        <para>One of the <see cref="T:System.Drawing.Design.UITypeEditorEditStyle" /> values
   indicating
   the provided editing style. If the method is not supported, this method will
   return <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None" />.</para>
      </returns>
    </member>
    <member name="T:System.Windows.Forms.Design.ControlDesigner">
      <summary>
        <para> Extends design-time behavior for components that extend
   <see cref="T:System.Windows.Forms.Control" />.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.ControlDesigner.InvalidPoint">
      <summary>
        <para>Defines a local <see cref="T:System.Drawing.Point" /> object that represents the 
 values of an invalid <see cref="T:System.Drawing.Point" />
 object.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.ControlDesigner.accessibilityObj">
      <summary>
        <para>Specifies the accessibility object for the designer.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.BaseWndProc(System.Windows.Forms.Message@)">
      <summary>
        <para> Processes Windows messages.</para>
      </summary>
      <param name="m">The <see cref="T:System.Windows.Forms.Message" /> to process.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.CanBeParentedTo(System.ComponentModel.Design.IDesigner)">
      <summary>
        <para> Indicates whether the control managed by the specified
      designer can be a child of the control
      managed by this designer.</para>
      </summary>
      <param name="parentDesigner">The <see cref="T:System.ComponentModel.Design.IDesigner" /> that manages the control to be tested.</param>
      <returns>
        <para>
          <see langword="true" /> if the
   control managed by the specified designer can be parented to the control managed by this
   designer; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.DefWndProc(System.Windows.Forms.Message@)">
      <summary>
        <para> Provides default processing for messages.</para>
      </summary>
      <param name="m">The <see cref="T:System.Windows.Forms.Message" /> to process.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.DisplayError(System.Exception)">
      <summary>
        <para>Displays information about the specified exception to the user.</para>
      </summary>
      <param name="e">The <see cref="T:System.Exception" /> to display.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.Dispose(System.Boolean)">
      <summary>
        <para>Releases the unmanaged resources used by the <see cref="T:System.Windows.Forms.Design.ControlDesigner" /> and optionally releases the managed
   resources.</para>
      </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.EnableDragDrop(System.Boolean)">
      <summary>
        <para> Enables or disables drag-and-drop support.</para>
      </summary>
      <param name="value">
        <see langword="true" /> to enable drag-and-drop support for the control; <see langword="false" /> if the control should not have drag-and-drop support.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.GetHitTest(System.Drawing.Point)">
      <summary>
        <para> Indicates whether the
      specified point is within the bounds of the component.</para>
      </summary>
      <param name="point">A <see cref="T:System.Drawing.Point" /> relative to the upper-left corner of the control.</param>
      <returns>
        <para>
          <see langword="true" /> if the 
   specified point
   is to be handled by the component; otherwise, <see langword="false" />
   .</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.HookChildControls(System.Windows.Forms.Control)">
      <summary>
        <para>Routes messages from the child controls of the specified control to the designer.</para>
      </summary>
      <param name="firstChild">The first child <see cref="T:System.Windows.Forms.Control" /> to process. This method may recursively call itself for children of the control. </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.Initialize(System.ComponentModel.IComponent)">
      <summary>
        <para>Initializes the designer with the specified component.</para>
      </summary>
      <param name="component">The <see cref="T:System.ComponentModel.IComponent" /> to associate the designer with. This component must always be an instance of, or derive from, <see cref="T:System.Windows.Forms.Control" /> . </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.InitializeNonDefault">
      <summary>
        <para>Initializes properties of the control to any non-default values.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.OnContextMenu(System.Int32,System.Int32)">
      <summary>
        <para>Shows the context menu and provides an opportunity to perform additional processing when the context menu is about to be displayed.</para>
      </summary>
      <param name="x">The x coordinate at which to display the context menu.</param>
      <param name=" y">The y coordinate at which to display the context menu.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.OnCreateHandle">
      <summary>
        <para>Provides an opportunity to perform additional 
 processing immediately after the control handle has been created.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.OnDragEnter(System.Windows.Forms.DragEventArgs)">
      <summary>
        <para>Called when a drag-and-drop operation enters the control designer view.</para>
      </summary>
      <param name="de">A <see cref="T:System.Windows.Forms.DragEventArgs" /> that provides data for the event.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.OnDragDrop(System.Windows.Forms.DragEventArgs)">
      <summary>
        <para>Called when a drag-and-drop object is dropped onto the control designer view.</para>
      </summary>
      <param name="de">A <see cref="T:System.Windows.Forms.DragEventArgs" /> that provides data for the event.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.OnDragLeave(System.EventArgs)">
      <summary>
        <para>Called when a drag-and-drop operation leaves the control designer view.</para>
      </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that provides data for the event.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.OnDragOver(System.Windows.Forms.DragEventArgs)">
      <summary>
        <para> Called when a drag-and-drop object is dragged over the control designer view.</para>
      </summary>
      <param name="de">A <see cref="T:System.Windows.Forms.DragEventArgs" /> that provides data for the event.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)">
      <summary>
        <para>Called when a drag-and-drop operation is in progress to
      provide an opportunity for the designer to provide feedback about the
      currently dragged over location so the user can consider feedback cues when determining where to drop an object.</para>
      </summary>
      <param name="e">A <see cref="T:System.Windows.Forms.GiveFeedbackEventArgs" /> that provides data for the event.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.OnMouseDragBegin(System.Int32,System.Int32)">
      <summary>
        <para>Called in response to the left mouse button being pressed and held while
      over the component.</para>
      </summary>
      <param name="x">The x position of the mouse. </param>
      <param name="y">The y position of the mouse. </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.OnMouseDragEnd(System.Boolean)">
      <summary>
        <para>Called at the end of a drag-and-drop operation to complete or cancel the
      operation.</para>
      </summary>
      <param name="cancel">
        <see langword="true" /> to cancel the drag; <see langword="false" /> to commit it. </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.OnMouseDragMove(System.Int32,System.Int32)">
      <summary>
        <para>Called for each movement of the mouse during a drag-and-drop operation.</para>
      </summary>
      <param name="x">The x position, in screen coordinates, of the mouse. </param>
      <param name="y">The y position, in screen coordinates, of the mouse. </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.OnMouseEnter">
      <summary>
        <para>Called when the mouse first enters the control.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.OnMouseHover">
      <summary>
        <para> Called after
      the mouse hovers over the control.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.OnMouseLeave">
      <summary>
        <para> Called when
 the mouse first enters the control.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.OnPaintAdornments(System.Windows.Forms.PaintEventArgs)">
      <summary>
        <para> Called when the control that the designer is managing has painted
      its surface so the designer can paint any additional adornments on top of the
      control.</para>
      </summary>
      <param name="pe">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> the designer can use to draw on the control. </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.OnSetCursor">
      <summary>
        <para> 
 
 Called each time
 the cursor needs to be set.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.OnSetComponentDefaults">
      <summary>
        <para> Called when the designer
      is initialized, so the designer can set default values for properties of the component.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.PreFilterProperties(System.Collections.IDictionary)">
      <summary>
        <para>Adjusts the set of properties the component exposes
      through a <see cref="T:System.ComponentModel.TypeDescriptor" />
      .</para>
      </summary>
      <param name="properties">An <see cref="T:System.Collections.IDictionary" /> containing the properties for the class of the component. </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.UnhookChildControls(System.Windows.Forms.Control)">
      <summary>
        <para>Routes messages for the children of the specified
      control to each control rather than to a parent designer.</para>
      </summary>
      <param name="firstChild">The first child <see cref="T:System.Windows.Forms.Control" /> to process. This method may recursively call itself for children of the control. </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.WndProc(System.Windows.Forms.Message@)">
      <summary>
   Processes Windows messages.
</summary>
      <param name="m">The <see cref="T:System.Windows.Forms.Message" />to process. </param>
    </member>
    <member name="P:System.Windows.Forms.Design.ControlDesigner.AssociatedComponents">
      <summary>
        <para> Gets the collection of components associated
      with the designer.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.Design.ControlDesigner.AccessibilityObject">
      <summary>
        <para> Gets the <see cref="T:System.Windows.Forms.AccessibleObject" /> assigned to the control.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.Design.ControlDesigner.Control">
      <summary>
        <para> Gets the control that the designer is designing.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.Design.ControlDesigner.EnableDragRect">
      <summary>
        <para>Gets a value indicating whether drag rectangles can be drawn on this designer component.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.Design.ControlDesigner.SelectionRules">
      <summary>
        <para> Gets the selection rules that indicate the movement capabilities of a component.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.IDesignerTarget.DefWndProc(System.Windows.Forms.Message@)">
      <summary>
     Causes default window processing for the given message.  We
     just forward this on to the old control target.
 </summary>
      <param name="m">
      The message to process.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.ChildSubClass.#ctor(System.Windows.Forms.Design.ControlDesigner,System.IntPtr)">
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.ChildSubClass.WndProc(System.Windows.Forms.Message@)">
      <summary>
     Overrides Window's WndProc to process messages.
 </summary>
      <param name="m">
      The message to process.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.ChildWindowTarget.#ctor(System.Windows.Forms.Design.ControlDesigner,System.Windows.Forms.IWindowTarget)">
      <summary>
     Creates a new ChildWindowTarget object.  This hooks the
     given control's window target.
 </summary>
      <param name="designer">
      The control designer we will route design-time messages
      to.
 </param>
      <param name="oldWindowTarget">
      The old IWindowTarget to hook.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.ChildWindowTarget.DefWndProc(System.Windows.Forms.Message@)">
      <summary>
     Causes default window processing for the given message.  We
     just forward this on to the old control target.
 </summary>
      <param name="m">
      The message to process.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.ChildWindowTarget.OnHandleChange(System.IntPtr)">
      <summary>
      Called when the window handle of the control has changed.
 </summary>
      <param name="newHandle">
      The new window handle value.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.ChildWindowTarget.OnMessage(System.Windows.Forms.Message@)">
      <summary>
      Called to do control-specific processing for this window.
 </summary>
      <param name="m">
      The message to process.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.DesignerWindowTarget.#ctor(System.Windows.Forms.Design.ControlDesigner)">
      <summary>
     Creates a new DesignerTarget object.
 </summary>
      <param name="designer">
      The control designer that owns this target.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.DesignerWindowTarget.DefWndProc(System.Windows.Forms.Message@)">
      <summary>
     Causes default window processing for the given message.  We
     just forward this on to the old control target.
 </summary>
      <param name="m">
      The message to process.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.DesignerWindowTarget.Dispose">
      <summary>
      Disposes this window target.  This re-establishes the
      prior window target.
 </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.DesignerWindowTarget.OnHandleChange(System.IntPtr)">
      <summary>
      Called when the window handle of the control has changed.
 </summary>
      <param name="newHandle">
      The new window handle value.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.DesignerWindowTarget.OnMessage(System.Windows.Forms.Message@)">
      <summary>
      Called to do control-specific processing for this window.
 </summary>
      <param name="m">
      The message to process.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.ControlDesignerAccessibleObject.#ctor(System.Windows.Forms.Design.ControlDesigner,System.Windows.Forms.Control)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Windows.Forms.Design.ControlDesigner.ControlDesignerAccessibleObject" /> class
   using the specified designer and control.</para>
      </summary>
      <param name="designer">The <see cref="T:System.Windows.Forms.Design.ControlDesigner" /> for the accessible object.</param>
      <param name=" control">The <see cref="T:System.Windows.Forms.Control" /> for the accessible object.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.AxHostDesigner.#ctor">
      <summary>
        <para>
       Initializes a new instance of the <see cref="T:System.Windows.Forms.Design.AxHostDesigner" /> class.
    </para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.AxHostDesigner.OnCreateHandle">
      <summary>
      This is called immediately after the control handle has been created.
 </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.AxHostDesigner.OnSetComponentDefaults">
      <summary>
     Called when the designer is intialized.  This allows the designer to provide some
     meaningful default values in the component.  The default implementation of this
     sets the components's default property to it's name, if that property is a string.
 </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.AxHostDesigner.PreFilterProperties(System.Collections.IDictionary)">
      <summary>
      Allows a designer to filter the set of properties
      the component it is designing will expose through the
      TypeDescriptor object.  This method is called
      immediately before its corresponding "Post" method.
      If you are overriding this method you should call
      the base implementation before you perform your own
      filtering.
 </summary>
      <param name="properties">
      The properties for the class of the component.
 </param>
      <returns>
      The augmented set of properties.  If the method does not
      modify any properties, it may just return a reference to
      its input parameter.  If you do make a change to the
      properties, you must create a new array.
 </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.AxHostDesigner.WndProc(System.Windows.Forms.Message@)">
      <summary>
     This method should be called by the extending designer for each message
     the control would normally receive.  This allows the designer to pre-process
     messages before allowing them to be routed to the control.
 </summary>
      <param name="m">
     The message.
 </param>
    </member>
    <member name="P:System.Windows.Forms.Design.AxHostDesigner.Verbs">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.Design.AxImporter">
      <summary>
        <para>
       Imports ActiveX controls and generates a wrapper that can be accessed by a
       designer.
    </para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.AxImporter.#ctor(System.Windows.Forms.Design.AxImporter.Options)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Windows.Forms.Design.AxImporter" /> class.</para>
      </summary>
      <param name="options">An <see cref="T:System.Windows.Forms.Design.AxImporter.Options" /> that indicates the options for the ActiveX control importer to use.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.AxImporter.GetFileOfTypeLib(System.Runtime.InteropServices.TYPELIBATTR@)">
      <summary>
        <para>Gets the path and file name to the specified type library.</para>
      </summary>
      <param name="tlibattr">A <see cref="T:System.Runtime.InteropServices.TYPELIBATTR" /> that indicates the type library to retrieve the file name of.</param>
      <returns>
        <para>The path and file name to the specified type library, or
   <see langword="null" /> if the library could not be located.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.AxImporter.GenerateFromFile(System.IO.FileInfo)">
      <summary>
        <para>Generates a wrapper for an ActiveX control for use in the design-time
      environment.</para>
      </summary>
      <param name="file">A <see cref="T:System.IO.FileInfo" /> indicating the file that contains the control.</param>
      <returns>
        <para>A wrapper for the ActiveX control.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.AxImporter.GenerateFromTypeLibrary(System.Runtime.InteropServices.UCOMITypeLib)">
      <summary>
        <para>Generates a wrapper for an ActiveX control for use in the design-time
      environment.</para>
      </summary>
      <param name="typeLib">A <see cref="T:System.Runtime.InteropServices.UCOMITypeLib" /> that indicates the type library to generate the control from.</param>
      <returns>
        <para>A wrapper for the ActiveX control.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.AxImporter.GenerateFromTypeLibrary(System.Runtime.InteropServices.UCOMITypeLib,System.Guid)">
      <summary>
        <para> Generates a wrapper for an ActiveX control for use in the design-time
      environment.
      </para>
      </summary>
      <param name="typeLib">A <see cref="T:System.Runtime.InteropServices.UCOMITypeLib" /> that indicates the type library to generate the control from.</param>
      <param name="clsid">The <see cref="T:System.Guid" /> for the control wrapper. </param>
      <returns>
        <para>A wrapper for the ActiveX control.</para>
      </returns>
    </member>
    <member name="P:System.Windows.Forms.Design.AxImporter.GeneratedAssemblies">
      <summary>
        <para> Gets the names of the assemblies that are
      generated for the control.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.Design.AxImporter.GeneratedTypeLibAttributes">
      <summary>
        <para> Gets the attributes for the generated type library.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.Design.AxImporter.GeneratedSources">
      <summary>
        <para> Gets the names of the source files that were generated.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.AxImporter.Options.outputName">
      <summary>
        <para>Specifies the filename to generate the ActiveX control wrapper to.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.AxImporter.Options.outputDirectory">
      <summary>
        <para> Specifies the path to the directory that the generated assemblies will
      be created in.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.AxImporter.Options.publicKey">
      <summary>
        <para>Specifies the public key used to sign the generated assemblies.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.AxImporter.Options.keyPair">
      <summary>
        <para>Specifies the strong name used for the generated assemblies.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.AxImporter.Options.keyFile">
      <summary>
        <para> Specifies the path to the file that contains the
      strong name key for the generated assemblies.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.AxImporter.Options.keyContainer">
      <summary>
        <para> Specifies the path to the file that contains the
      strong name key container for the generated assemblies.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.AxImporter.Options.genSources">
      <summary>
        <para> Specifies whether sources for the type library wrapper
      should be generated.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.AxImporter.Options.noLogo">
      <summary>
        <para> Indicates whether the
      ActiveX importer tool logo will be displayed when the control is imported.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.AxImporter.Options.silentMode">
      <summary>
        <para> Specifies whether to compile in
      silent mode, which generates less displayed information at compile time.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.AxImporter.Options.verboseMode">
      <summary>
        <para> Specifies whether to compile in verbose mode, which generates more displayed information
      at compile time.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.AxImporter.Options.delaySign">
      <summary>
        <para> Specifies whether the generated assembly is strongly named and will
      be signed later.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.AxImporter.Options.overwriteRCW">
      <summary>
        <para> Specifies whether to overwrite
      existing files when generating assemblies.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.AxImporter.Options.references">
      <summary>
        <para> Specifies the <see cref="T:System.Windows.Forms.Design.AxImporter.IReferenceResolver" /> to use to resolve types
   and references when generating assemblies.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.AxImporter.IReferenceResolver.ResolveManagedReference(System.String)">
      <summary>
        <para>Resolves a reference to the specified assembly.</para>
      </summary>
      <param name="assemName">The name of the assembly to resolve a reference to.</param>
      <returns>
        <para>A fully qualified path to an assembly.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.AxImporter.IReferenceResolver.ResolveComReference(System.Runtime.InteropServices.UCOMITypeLib)">
      <summary>
        <para>Resolves a reference to the specified type library that
      contains an COM component.</para>
      </summary>
      <param name="typeLib">A <see cref="T:System.Runtime.InteropServices.UCOMITypeLib" /> to resolve a reference to.</param>
      <returns>
        <para>A fully qualified path to an assembly.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.AxImporter.IReferenceResolver.ResolveComReference(System.Reflection.AssemblyName)">
      <summary>
        <para>Resolves a reference to the specified assembly that contains a COM component.</para>
      </summary>
      <param name="name">An <see cref="T:System.Reflection.AssemblyName" /> that indicates the assembly to resolve a reference to.</param>
      <returns>
        <para>A fully qualified path to an assembly.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.AxImporter.IReferenceResolver.ResolveActiveXReference(System.Runtime.InteropServices.UCOMITypeLib)">
      <summary>
        <para>Resolves a reference to the specified type library that
      contains an ActiveX control.</para>
      </summary>
      <param name="typeLib">A <see cref="T:System.Runtime.InteropServices.UCOMITypeLib" /> to resolve a reference to.</param>
      <returns>
        <para>A fully qualified path to an assembly.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.AxParameterData.#ctor(System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Windows.Forms.Design.AxParameterData" /> class using the
   specified name and type name.</para>
      </summary>
      <param name="inname">The name of the parameter.</param>
      <param name=" typeName">The name of the type of the parameter.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.AxParameterData.#ctor(System.String,System.Type)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Windows.Forms.Design.AxParameterData" /> class using the
   specified name and type.</para>
      </summary>
      <param name="inname">The name of the parameter.</param>
      <param name=" type"> The type of the parameter.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.AxParameterData.#ctor(System.Reflection.ParameterInfo)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Windows.Forms.Design.AxParameterData" /> class using the specified parameter
 information.</para>
      </summary>
      <param name="info">A <see cref="T:System.Reflection.ParameterInfo" /> indicating the parameter information to use.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.AxParameterData.#ctor(System.Reflection.ParameterInfo,System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Windows.Forms.Design.AxParameterData" /> class using the specified parameter 
    information and whether to ignore by reference parameters.</para>
      </summary>
      <param name="info">A <see cref="T:System.Reflection.ParameterInfo" /> indicating the parameter information to use.</param>
      <param name=" ignoreByRefs">A value indicating whether to ignore parameters passed by reference.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.AxParameterData.Convert(System.Reflection.ParameterInfo[])">
      <summary>
        <para>Converts the specified parameter information to an <see cref="T:System.Windows.Forms.Design.AxParameterData" /> 
object.</para>
      </summary>
      <param name="infos">An array of <see cref="T:System.Reflection.ParameterInfo" /> objects to convert.</param>
      <returns>
        <para>An array of <see cref="T:System.Windows.Forms.Design.AxParameterData" /> objects representing the specified array
 of <see cref="T:System.Reflection.ParameterInfo" /> objects.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.AxParameterData.Convert(System.Reflection.ParameterInfo[],System.Boolean)">
      <summary>
        <para>Converts the specified parameter information to an <see cref="T:System.Windows.Forms.Design.AxParameterData" />object, according to the specified value
 indicating whether to ignore by reference parameters.</para>
      </summary>
      <param name="infos">An array of <see cref="T:System.Reflection.ParameterInfo" /> objects to convert.</param>
      <param name=" ignoreByRefs">A value indicating whether to ignore parameters passed by reference.</param>
      <returns>
        <para>An array of <see cref="T:System.Windows.Forms.Design.AxParameterData" /> objects representing the specified array
 of <see cref="T:System.Reflection.ParameterInfo" /> objects.</para>
      </returns>
    </member>
    <member name="P:System.Windows.Forms.Design.AxParameterData.Direction">
      <summary>
        <para>Indicates the direction of assignment fields.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.Design.AxParameterData.IsByRef">
      <summary>
        <para>Indicates whether the parameter data is passed by reference.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.Design.AxParameterData.IsIn">
      <summary>
        <para>Indicates whether the parameter data is in.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.Design.AxParameterData.IsOut">
      <summary>
        <para>Indicates whether the parameter data is out.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.Design.AxParameterData.IsOptional">
      <summary>
        <para> Indicates whether the parameter data is optional.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.Design.AxParameterData.Name">
      <summary>
        <para>Gets or sets the name of the parameter.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.Design.AxParameterData.ParameterType">
      <summary>
        <para> Gets the type expected by the parameter.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.Design.AxParameterData.TypeName">
      <summary>
        <para> Gets the name of the type expected by the parameter.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.AxWrapperGen.GeneratedSources">
      <summary>
        <para>This field initializes a local <see cref="T:System.Collections.ArrayList" /> variable named GeneratedSources.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.AxWrapperGen.#ctor(System.Type)">
      <summary>
        <para>Generates an ActiveX wrapper for design-time hosting of an ActiveX control.</para>
      </summary>
      <param name="axType">The type of ActiveX control to generate a wrapper for.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComboBoxDesigner.Dispose(System.Boolean)">
    </member>
    <member name="M:System.Windows.Forms.Design.ComboBoxDesigner.Initialize(System.ComponentModel.IComponent)">
    </member>
    <member name="P:System.Windows.Forms.Design.ComboBoxDesigner.SelectionRules">
    </member>
    <member name="M:System.Windows.Forms.Design.CommandSet.#ctor(System.ComponentModel.ISite)">
      <summary>
     Creates a new CommandSet object.  This object implements the set
     of commands that the UI.Win32 form designer offers.
 </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.CommandSet.Dispose">
      <summary>
     Disposes of this object, removing all commands from the menu service.
 </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.CommandSet.GetCopySelection">
      <summary>
     Used to retrieve the selection for a copy.  The default implementation
     retrieves the current selection.
 </summary>
      <returns>
     An array of objects that should be part of the copy.
 </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.CommandSet.GetProperty(System.Object,System.String)">
      <summary>
     Retrieves the given property on the given component.
 </summary>
      <param name="comp">
     The component to get the property on.
 </param>
      <param name="propName">
     The name of the property.
 </param>
      <returns>
     an PropertyDescriptor for the given property or null if
     no such property could be found.
 </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.CommandSet.GetService(System.Type)">
      <summary>
      Retrieves the requested service.
 </summary>
      <param name="serviceType">
     Type type of the service.
 </param>
      <returns>
     An object representing the service, or null of no such service
     was found.
 </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.CommandSet.GetSnapInformation(System.ComponentModel.Design.IDesignerHost,System.ComponentModel.IComponent,System.Drawing.Size@,System.ComponentModel.IComponent@,System.ComponentModel.PropertyDescriptor@)">
      <summary>
      Retrieves the snap information for the given component.  
 </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.CommandSet.OnKeyCancel(System.Object)">
      <summary>
     Called for the two cancel commands we support.  Returns true
     If we did anything with the cancel, or false if not.
 </summary>
      <param name="sender">
     The MenuCommand object sending the event.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.CommandSet.OnKeyDefault(System.Object,System.EventArgs)">
      <summary>
      Called for the "default" command, typically the Enter key.
 </summary>
      <param name="sender">
     The MenuCommand object sending the event.
 </param>
      <param name="e">
     The event that was sent.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.CommandSet.OnKeyMove(System.Object,System.EventArgs)">
      <summary>
      Called for all cursor movement commands.
 </summary>
      <param name="sender">
     The MenuCommand object sending the event.
 </param>
      <param name="e">
     The event that was sent.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.CommandSet.OnMenuAlignByPrimary(System.Object,System.EventArgs)">
      <summary>
     Called for all alignment operations that key off of a primary
     selection.
 </summary>
      <param name="sender">
     The MenuCommand object sending the event.
 </param>
      <param name="e">
     The event that was sent.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.CommandSet.OnMenuAlignToGrid(System.Object,System.EventArgs)">
      <summary>
     Called when the align-&gt;to grid menu item is selected.
 </summary>
      <param name="sender">
     The MenuCommand object sending the event.
 </param>
      <param name="e">
     The event that was sent.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.CommandSet.OnMenuCenterSelection(System.Object,System.EventArgs)">
      <summary>
     Called when the center horizontally or center vertically menu item is selected.
 </summary>
      <param name="sender">
     The MenuCommand object sending the event.
 </param>
      <param name="e">
     The event that was sent.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.CommandSet.OnMenuCopy(System.Object,System.EventArgs)">
      <summary>
     Called when the copy menu item is selected.
 </summary>
      <param name="sender">
     The MenuCommand object sending the event.
 </param>
      <param name="e">
     The event that was sent.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.CommandSet.OnMenuCut(System.Object,System.EventArgs)">
      <summary>
     Called when the cut menu item is selected.
 </summary>
      <param name="sender">
     The MenuCommand object sending the event.
 </param>
      <param name="e">
     The event that was sent.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.CommandSet.OnMenuDelete(System.Object,System.EventArgs)">
      <summary>
     Called when the delete menu item is selected.
 </summary>
      <param name="sender">
     The MenuCommand object sending the event.
 </param>
      <param name="e">
     The event that was sent.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.CommandSet.OnMenuPaste(System.Object,System.EventArgs)">
      <summary>
     Called when the paste menu item is selected.
 </summary>
      <param name="sender">
     The MenuCommand object sending the event.
 </param>
      <param name="e">
     The event that was sent.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.CommandSet.OnMenuSelectAll(System.Object,System.EventArgs)">
      <summary>
     Called when the select all menu item is selected.
 </summary>
      <param name="sender">
     The MenuCommand object sending the event.
 </param>
      <param name="e">
     The event that was sent.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.CommandSet.OnMenuShowGrid(System.Object,System.EventArgs)">
      <summary>
     Called when the show grid menu item is selected.
 </summary>
      <param name="sender">
     The MenuCommand object sending the event.
 </param>
      <param name="e">
     The event that was sent.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.CommandSet.OnMenuSizingCommand(System.Object,System.EventArgs)">
      <summary>
     Handles the various size to commands.
 </summary>
      <param name="sender">
     The MenuCommand object sending the event.
 </param>
      <param name="e">
     The event that was sent.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.CommandSet.OnMenuSizeToGrid(System.Object,System.EventArgs)">
      <summary>
     Called when the size-&gt;to grid menu item is selected.
 </summary>
      <param name="sender">
     The MenuCommand object sending the event.
 </param>
      <param name="e">
     The event that was sent.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.CommandSet.OnMenuDesignerProperties(System.Object,System.EventArgs)">
      <summary>
     Called when the properties menu item is selected on the Context menu
 </summary>
      <param name="sender">
     The MenuCommand object sending the event.
 </param>
      <param name="e">
     The event that was sent.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.CommandSet.OnMenuSnapToGrid(System.Object,System.EventArgs)">
      <summary>
     Called when the snap to grid menu item is selected.
 </summary>
      <param name="sender">
     The MenuCommand object sending the event.
 </param>
      <param name="e">
     The event that was sent.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.CommandSet.OnMenuSpacingCommand(System.Object,System.EventArgs)">
      <summary>
     Called when a spacing command is selected

 </summary>
      <param name="sender">
     The MenuCommand object sending the event.
 </param>
      <param name="e">
     The event that was sent.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.CommandSet.OnSelectionChanged(System.Object,System.EventArgs)">
      <summary>
     Called when the current selection changes.  Here we determine what
     commands can and can't be enabled.
 </summary>
      <param name="sender">
     The object sending the event.
 </param>
      <param name="e">
     The event that was sent.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.CommandSet.OnStatusAlways(System.Object,System.EventArgs)">
      <summary>
     Determines the status of a menu command.  Commands with this event
     handler are always enabled.
 </summary>
      <param name="sender">
     Object that sent the event.  This must be a MenuCommand
     object.
 </param>
      <param name="e">
     Event.  This is not used.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.CommandSet.OnStatusAnySelection(System.Object,System.EventArgs)">
      <summary>
     Determines the status of a menu command.  Commands with this event
     handler are enabled when one or more objects are selected.
 </summary>
      <param name="sender">
     Object that sent the event.  This must be a MenuCommand
     object.
 </param>
      <param name="e">
     Event.  This is not used.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.CommandSet.OnStatusCopy(System.Object,System.EventArgs)">
      <summary>
      Status for the copy command.  This is enabled when
      there is something juicy selected.
 </summary>
      <param name="sender">
     The MenuCommand object sending the event.
 </param>
      <param name="e">
     The event that was sent.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.CommandSet.OnStatusCut(System.Object,System.EventArgs)">
      <summary>
      Status for the cut command.  This is enabled when
      there is something juicy selected and that something
      does not contain any inherited components.
 </summary>
      <param name="sender">
     The MenuCommand object sending the event.
 </param>
      <param name="e">
     The event that was sent.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.CommandSet.OnStatusDelete(System.Object,System.EventArgs)">
      <summary>
      Status for the delete command.  This is enabled when there
      is something selected and that something does not contain
      inherited components.
 </summary>
      <param name="sender">
     The MenuCommand object sending the event.
 </param>
      <param name="e">
     The event that was sent.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.CommandSet.OnStatusNYI(System.Object,System.EventArgs)">
      <summary>
     Determines the status of a menu command.  Commands with this event are
     considered to be not yet implemented and are disabled.
 </summary>
      <param name="sender">
     Object that sent the event.  This must be a MenuCommand
     object.
 </param>
      <param name="e">
     Event.  This is not used.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.CommandSet.OnStatusPaste(System.Object,System.EventArgs)">
      <summary>
     Determines the status of a menu command.  Commands with this event are
     enabled when there is something yummy on the clipboard.
 </summary>
      <param name="sender">
     Object that sent the event.  This must be a MenuCommand
     object.
 </param>
      <param name="e">
     Event.  This is not used.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.CommandSet.OnUpdateCommandStatus">
      <summary>
      This is called when the selection has changed.  Anyone using CommandSetItems
      that need to update their status based on selection changes should override
      this and update their own commands at this time.  The base implementaion
      runs through all base commands and calls UpdateStatus on them.
 </summary>
    </member>
    <member name="P:System.Windows.Forms.Design.CommandSet.MenuService">
      <summary>
      Retrieves the menu command service, which the command set
      typically uses quite a bit.
 </summary>
    </member>
    <member name="P:System.Windows.Forms.Design.CommandSet.SelectionCount">
      <summary>
      Retrieves the count of the currently selected objects.
 </summary>
    </member>
    <member name="P:System.Windows.Forms.Design.CommandSet.SelectionInherited">
      <summary>
      Determines if the selection contains any inherited components.
 </summary>
    </member>
    <member name="P:System.Windows.Forms.Design.CommandSet.SelectionPrimary">
      <summary>
      Retrieves the current primary selection, if there is one.
 </summary>
    </member>
    <member name="P:System.Windows.Forms.Design.CommandSet.SelectionService">
      <summary>
      Retrieves the selection service, which the command set
      typically uses quite a bit.
 </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.CommandSet.CommandSetItem.#ctor(System.Windows.Forms.Design.CommandSet,System.EventHandler,System.EventHandler,System.ComponentModel.Design.CommandID)">
      <summary>
     Creates a new CommandSetItem.
 </summary>
      <param name="commandSet">
     The CommandSet object this is related to.
     status.
 </param>
      <param name="statusHandler">
     An event handler that will be called when it
     is time to determine the status of this command.
 </param>
      <param name="invokeHandler">
     An event handler that will be called when this
     command has been invoked.
 </param>
      <param name="id">
     The CommandID of this command.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.CommandSet.CommandSetItem.Invoke">
      <summary>
     This may be called to invoke the menu item.
 </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.CommandSet.CommandSetItem.UpdateStatus">
      <summary>
     Called when the status of this command should be re-queried.
 </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.CommandSet.ImmediateCommandSetItem.#ctor(System.Windows.Forms.Design.CommandSet,System.EventHandler,System.EventHandler,System.ComponentModel.Design.CommandID)">
      <summary>
     Creates a new ImmediateCommandSetItem.
 </summary>
      <param name="commandSet">
     The CommandSet object this is related to.
     status.
 </param>
      <param name="statusHandler">
     An event handler that will be called when it
     is time to determine the status of this command.
 </param>
      <param name="invokeHandler">
     An event handler that will be called when this
     command has been invoked.
 </param>
      <param name="id">
     The CommandID of this command.
 </param>
    </member>
    <member name="P:System.Windows.Forms.Design.CommandSet.ImmediateCommandSetItem.OleStatus">
      <summary>
      Overrides OleStatus in MenuCommand to invoke our status handler first.
 </summary>
    </member>
    <member name="T:System.Windows.Forms.Design.ComponentTray">
      <summary>
        <para> Provides behavior for the component tray
      of the form designer. The component tray represents components that do not otherwise provide a visible surface at design time and
      provides a way for users to access and set the properties of those components.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ISelectionUIHandler.BeginDrag(System.Object[],System.Windows.Forms.Design.SelectionRules,System.Int32,System.Int32)">
      <summary>
     Begins a drag on the currently selected designer.  The designer should provide
     UI feedback about the drag at this time.  Typically, this feedback consists
     of an inverted rectangle for each component, or a caret if the component
     is text.

 </summary>
      <param name="components">
     The set of components that is going to be dragged.
 </param>
      <param name="rules">
     The rules for the operation to begin, from SelectionRules
 </param>
      <param name="initialX">
     Starting X position, in screen coordinates, of the drag
 </param>
      <param name="initialY">
     Starting X position, in screen coordinates, of the drag
 </param>
      <returns>
 True if the drag should begin
  </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ISelectionUIHandler.DragMoved(System.Object[],System.Drawing.Rectangle)">
      <summary>
     Called when the user has moved the mouse.  This will only be called on
     the designer that returned true from beginDrag.  The designer
     should update its UI feedback here.

 </summary>
      <param name="components">
     The same set of components that was passed to beginDrag.
 </param>
      <param name="offset">
     A rectangle providing the new offset for each of the
     components.  The x and y fields contain the position
     offset and the width and height fields contain the
     size differential.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ISelectionUIHandler.EndDrag(System.Object[],System.Boolean)">
      <summary>
     Called when the user has completed the drag.  The designer should
     remove any UI feedback it may be providing.

 </summary>
      <param name="components">
     The same set of components that was passed to beginDrag.
 </param>
      <param name="cancel">
     true if the user cancelled the drag operation,
     or false otherwise.  If the drag was cancelled,
     the designer should not actually reposition the components.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ISelectionUIHandler.GetComponentBounds(System.Object)">
      <summary>
     Retrieves the shape of the component.  The component's shape should be in
     absolute coordinates and in pixels, where 0,0 is the upper left corner of
     the screen.

 </summary>
      <param name="component">
     The component to get the bounds for.

 </param>
      <returns>
     The components shape, in screen coordinates, or null if the
     component has no shape.
 </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ISelectionUIHandler.GetComponentRules(System.Object)">
      <summary>
     Retrieves a set of rules concerning the movement capabilities of a component.
     This should be one or more flags from the SelectionRules class.  If no designer
     provides rules for a component, the component will not get any UI services.

 </summary>
      <param name="component">
     The component to get the selection rules for.

 </param>
      <returns>
     The components selection rules.
 </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ISelectionUIHandler.GetSelectionClipRect(System.Object)">
      <summary>
     Determines the rectangle that any selection adornments should be clipped
     to. This is normally the client area (in screen coordinates) of the
     container.
 </summary>
      <param name="component">
     Component currently selected. If this component is the
     container of the UIHandler, then clipping isn't needed.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ISelectionUIHandler.OnSelectionDoubleClick(System.ComponentModel.IComponent)">
      <summary>
     Handle a double-click on the selection rectangle
     of the given component.
 </summary>
      <param name="component">
     Component that got the double-click.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ISelectionUIHandler.QueryBeginDrag(System.Object[],System.Windows.Forms.Design.SelectionRules,System.Int32,System.Int32)">
      <summary>
     Queries to see if a drag operation
     is valid on this handler for the given set of components.
     If it returns true, BeginDrag will be called immediately after.
 </summary>
      <param name="components">
     The set of components that is going to be dragged.
 </param>
      <param name="rules">
     The rules for the operation to begin, from SelectionRules
 </param>
      <param name="initialX">
     Starting X position, in screen coordinates, of the drag
 </param>
      <param name="initialY">
     Starting X position, in screen coordinates, of the drag
 </param>
      <returns>
     true if the designer is going to be the one handling this
     drag, or false if not.
 </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ISelectionUIHandler.ShowContextMenu(System.ComponentModel.IComponent)">
      <summary>
     Shows the context menu for the given component.
 </summary>
      <param name="component">
     Component that has to show the context menu.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.IOleDragClient.AddComponent(System.ComponentModel.IComponent,System.String,System.Boolean)">
      <summary>
        <para> Adds the specified component
       using the specified name.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the component could be added; otherwise, 
 <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.IOleDragClient.IsDropOk(System.ComponentModel.IComponent)">
      <summary>
        <para>Indicates whether it is valid to drop the specified comoponent's type on this document.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.IOleDragClient.GetDesignerControl">
      <summary>
        <para>Gets the control view instance for the designer that is hosting the drag.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.IOleDragClient.GetControlForComponent(System.Object)">
      <summary>
        <para>Gets the control view instance for the specified component.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.Design.IOleDragClient.CanModifyComponents">
      <summary>
        <para> Indicates whether components can be added or removed from the designer.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.#ctor(System.ComponentModel.Design.IDesigner,System.IServiceProvider)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Windows.Forms.Design.ComponentTray" /> class using the
   specified designer and service provider.</para>
      </summary>
      <param name="mainDesigner">The <see cref="T:System.ComponentModel.Design.IDesigner" /> that is the main or document designer for the current project.</param>
      <param name=" serviceProvider">An <see cref="T:System.IServiceProvider" /> that can be used to obtain design-time services.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.AddComponent(System.ComponentModel.IComponent)">
      <summary>
        <para>Adds a component to the tray.</para>
      </summary>
      <param name="component">The <see cref="T:System.ComponentModel.IComponent" /> to add to the tray.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.CanCreateComponentFromTool(System.Drawing.Design.ToolboxItem)">
      <summary>
        <para>Gets a value indicating whether the specified tool can be used to
      create a new component.</para>
      </summary>
      <param name="tool">The <see cref="T:System.Drawing.Design.ToolboxItem" /> to test.</param>
      <returns>
        <para>
          <see langword="true" /> if the specified tool can be used
   to create a component; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.CanDisplayComponent(System.ComponentModel.IComponent)">
      <summary>
        <para>Gets a value indicating whether the specified component can be displayed.</para>
      </summary>
      <param name="component">The <see cref="T:System.ComponentModel.IComponent" /> to test.</param>
      <returns>
        <para>
          <see langword="true" /> if the component can be displayed; otherwise,
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.CreateComponentFromTool(System.Drawing.Design.ToolboxItem)">
      <summary>
        <para> Creates a component from the specified toolbox item, adds the component to the current
      document, and displays a representation for the component in the component
      tray.</para>
      </summary>
      <param name="tool">The <see cref="T:System.Drawing.Design.ToolboxItem" /> to create a component from.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.DisplayError(System.Exception)">
      <summary>
        <para> Displays an error message to the
      user with information about the specified exception.</para>
      </summary>
      <param name="e">The exception about which to display information. </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.Dispose(System.Boolean)">
      <summary>
        <para> Releases the unmanaged resources used by the <see cref="T:System.Windows.Forms.Design.ComponentTray" /> and optionally releases the managed resources.
   </para>
      </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.GetLocation(System.ComponentModel.IComponent)">
      <summary>
        <para> Gets the location of the specified component, relative to
      the upper-left corner
      of the component tray.</para>
      </summary>
      <param name="receiver">The <see cref="T:System.ComponentModel.IComponent" /> to retrieve the location of.</param>
      <returns>
        <para>A <see cref="T:System.Drawing.Point" /> indicating the coordinates of the
   specified component, or an empty <see cref="T:System.Drawing.Point" /> if the specified component could not be
   found in the component tray. An empty <see cref="T:System.Drawing.Point" /> has an <see cref="P:System.Drawing.Point.IsEmpty" /> property equal to <see langword="true" /> and typically has <see cref="P:System.Drawing.Point.X" /> and <see cref="P:System.Drawing.Point.Y" /> properties that are
   each equal to zero.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.GetService(System.Type)">
      <summary>
        <para> Gets the requested service type.
 </para>
      </summary>
      <param name="serviceType">The type of the service to retrieve. </param>
      <returns>
        <para> An instance of the requested service, or 
 <see langword="null" /> if the
 service could not be found.
 </para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.OnDoubleClick(System.EventArgs)">
      <summary>
        <para>Called when the mouse is double clicked over the component tray.</para>
      </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that provides data for the event.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)">
      <summary>
        <para> Called during an OLE drag and drop operation to provide
      an opportunity for the component tray to give feedback to the user about
      the results of dropping the object at a specific point.</para>
      </summary>
      <param name="gfevent">A <see cref="T:System.Windows.Forms.GiveFeedbackEventArgs" /> that provides data for the event. </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.OnDragDrop(System.Windows.Forms.DragEventArgs)">
      <summary>
        <para> Called when an object that has
      been dragged is dropped on the component tray.</para>
      </summary>
      <param name="de">A <see cref="T:System.Windows.Forms.DragEventArgs" /> that provides data for the event.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.OnDragEnter(System.Windows.Forms.DragEventArgs)">
      <summary>
        <para>Called when an object is dragged over, and has entered the area over, the component tray.</para>
      </summary>
      <param name="de">A <see cref="T:System.Windows.Forms.DragEventArgs" /> that provides data for the event.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.OnDragLeave(System.EventArgs)">
      <summary>
        <para>Called when an object is dragged out of the area over the component tray.</para>
      </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that provides data for the event.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.OnDragOver(System.Windows.Forms.DragEventArgs)">
      <summary>
        <para> Called when an object is dragged over the component tray.</para>
      </summary>
      <param name="de">A <see cref="T:System.Windows.Forms.DragEventArgs" /> that provides data for the event.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.OnLostCapture">
      <summary>
        <para> Called when a mouse drag selection
      operation is canceled.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
      <summary>
        <para> Called when the mouse button is pressed.</para>
      </summary>
      <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that provides data for the event. </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
      <summary>
        <para>Called when the mouse cursor position has changed.</para>
      </summary>
      <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that provides data for the event. </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
      <summary>
        <para> Called when the mouse button has been released.</para>
      </summary>
      <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that provides data for the event. </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.OnPaint(System.Windows.Forms.PaintEventArgs)">
      <summary>
        <para>Called when the view for the component tray should be refreshed.</para>
      </summary>
      <param name="pe">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that provides data for the event.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.OnSetCursor">
      <summary>
        <para> Called to set the mouse
      cursor.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.RemoveComponent(System.ComponentModel.IComponent)">
      <summary>
        <para>Removes the specified component from the tray.</para>
      </summary>
      <param name="component">The <see cref="T:System.ComponentModel.IComponent" /> to remove from the tray. </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.SetLocation(System.ComponentModel.IComponent,System.Drawing.Point)">
      <summary>
        <para>Sets the location of the specified component to the specified location.</para>
      </summary>
      <param name="receiver">The <see cref="T:System.ComponentModel.IComponent" /> to set the location of.</param>
      <param name=" location">A <see cref="T:System.Drawing.Point" /> indicating the new location for the specified component.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.WndProc(System.Windows.Forms.Message@)">
      <summary>
        <para> Processes Windows messages.</para>
      </summary>
      <param name="m">The <see cref="T:System.Windows.Forms.Message" /> to process. </param>
    </member>
    <member name="P:System.Windows.Forms.Design.ComponentTray.AutoArrange">
      <summary>
        <para>Gets or sets a value indicating whether the tray items are
      automatically aligned.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.Design.ComponentTray.ComponentCount">
      <summary>
        <para> Gets the number of components contained in the tray.
      </para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.Design.ComponentTray.ShowLargeIcons">
      <summary>
        <para>Gets or sets a value indicating whether the tray displays a large icon to represent each component in the tray.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.OleDragDropHandler.CreateTool(System.Drawing.Design.ToolboxItem,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
      <summary>
      This is the worker method of all CreateTool methods.  It is the only one
      that can be overridden.
 </summary>
      <param name="tool">
      The tool to create.
 </param>
      <param name="x">
      The x location, in screen coordinates, of the location of the tool.
      If the size of the tool is specified here, this will be the upper left
      corner of the tool.  If no size is specified, then this should be
      interpreted as the center of the tool.
 </param>
      <param name="y">
      The y location, in screen coordinates, of the location of the tool.
      If the size of the tool is specified here, this will be the upper left
      corner of the tool.  If no size is specified, then this should be
      interpreted as the center of the tool.
 </param>
      <param name="width">
      The width of the tool.  This is ignored if hasSize is false.
 </param>
      <param name="height">
      The height of the tool.  This is ignored if hasSize is false.
 </param>
      <param name="hasLocation">
      If this is false the x and y values will be calculated to place
      the in the center of the currently selected control.
 </param>
      <param name="hasSize">
      If this is false the width and height values will be calculated to
      be the default width and height for the control.
 </param>
      <returns>
      An array of components that were created by the tool.
 </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.OleDragDropHandler.ComponentDataObject.ApplyDiffs(System.Int32,System.Int32)">
      <summary>
 Applys new diffs from a drop point to all the
 top level controls in a selection.
 </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.OleDragDropHandler.ComponentDataObject.GetDataPresent(System.String,System.Boolean)">
      <summary>
     If the there is data store in the data object associated with
     format this will return true.

 </summary>
      <param name="format">
     Format to check for.
 </param>
      <param name="autoConvert">
     If set to true then this will attempt to
     convert any existing formats into the one specified.

 </param>
      <returns>
     true if there is data for format.
 </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.OleDragDropHandler.ComponentDataObject.GetDataPresent(System.String)">
      <summary>
     If the there is data store in the data object associated with
     format this will return true.

 </summary>
      <param name="format">
     Format to check for.

 </param>
      <returns>
     true if there is data for format.
 </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.OleDragDropHandler.ComponentDataObject.GetDataPresent(System.Type)">
      <summary>
     If the there is data store in the data object associated with
     format this will return true.

 </summary>
      <param name="format">
     Format to check for.

 </param>
      <returns>
     true if there is data for format.
 </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.OleDragDropHandler.ComponentDataObject.GetFormats(System.Boolean)">
      <summary>
     Retrieves a list of all formats stored in this data object.

 </summary>
      <param name="autoConvert">
     If set to true then this will show
     all formats this could possible return.
 </param>
      <returns>
     list of all formats.
 </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.OleDragDropHandler.ComponentDataObject.GetFormats">
      <summary>
     Retrieves a list of all formats stored in this data object.

 </summary>
      <returns>
     list of all formats.
 </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.OleDragDropHandler.ComponentDataObject.SetData(System.String,System.Boolean,System.Object)">
    </member>
    <member name="M:System.Windows.Forms.Design.OleDragDropHandler.ComponentDataObject.SetData(System.String,System.Object)">
      <summary>
     Sets the data to be associated with the specific data format. For
     a listing of predefined formats see System.Windows.Forms.DataFormats.

 </summary>
      <param name="format">
     Format of the data to store.
 </param>
      <param name="data">
     Data to store.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.OleDragDropHandler.ComponentDataObject.SetData(System.Type,System.Object)">
      <summary>
     Sets the data to be associated with the specific data format.

 </summary>
      <param name="format">
     Format of the data to store.
 </param>
      <param name="data">
     Data to store.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.OleDragDropHandler.ComponentDataObject.SetData(System.Object)">
      <summary>
     Stores data in the data object. The format assumed is the
     class of data

 </summary>
      <param name="data">
     Data to store.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.TrayControl.#ctor(System.Windows.Forms.Design.ComponentTray,System.ComponentModel.IComponent)">
      <summary>
      Creates a new TrayControl based on the component.
 </summary>
      <param name="tray">
      The tray we are connected to.
 </param>
      <param name="component">
      The component we are displaying.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.TrayControl.Dispose(System.Boolean)">
      <summary>
     Destroys this control.  Views automatically destroy themselves when they
     are removed from the design container.
 </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.TrayControl.FromComponent(System.ComponentModel.IComponent)">
      <summary>
      Retrieves the tray control object for the given component.
 </summary>
      <returns>
      The tray control, or null if there is no tray control for
      the component.
 </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.TrayControl.OnHandleCreated(System.EventArgs)">
      <summary>
     Overrides handle creation notification for a control.  Here we just ensure
     that we're the proper size.
 </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.TrayControl.OnDoubleClick(System.EventArgs)">
      <summary>
     Called in response to a double-click of the left mouse button.  The
     default behavior here calls onDoubleClick on IMouseHandler
 </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.TrayControl.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
      <summary>
     Called when the mouse button is pressed down.  Here, we provide drag
     support for the component.
 </summary>
      <param name="me">
     The mouse event.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.TrayControl.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
      <summary>
     Called when the mouse is moved over the component.  We update our drag
     information here if we're dragging the component around.
 </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.TrayControl.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
      <summary>
     Called when the mouse button is released.  Here, we finish our drag
     if one was started.
 </summary>
      <param name="me">
     The mouse event.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.TrayControl.OnPaint(System.Windows.Forms.PaintEventArgs)">
      <summary>
     Painting for our control.
 </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.TrayControl.OnFontChanged(System.EventArgs)">
      <summary>
     Overrides control's FontChanged.  Here we re-adjust our size if the font changes.
 </summary>
      <param name="e">
     The property change event.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.TrayControl.OnTextChanged(System.EventArgs)">
      <summary>
     Overrides control's TextChanged.  Here we re-adjust our size if the font changes.
 </summary>
      <param name="e">
     The property change event.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.TrayControl.SetVisibleCore(System.Boolean)">
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.TrayControl.ViewDefaultEvent(System.ComponentModel.IComponent)">
      <summary>
      This creates a method signature in the source code file for the
      default event on the component and navigates the user's cursor
      to that location.
 </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.TrayControl.WndProc(System.Windows.Forms.Message@)">
      <summary>
     This method should be called by the extending designer for each message
     the control would normally receive.  This allows the designer to pre-process
     messages before allowing them to be routed to the control.
 </summary>
      <param name="m">
     The message.
 </param>
    </member>
    <member name="P:System.Windows.Forms.Design.ComponentTray.TrayControl.Component">
      <summary>
      Retrieves the compnent this control is representing.
 </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.SelectionUIHandler.BeginDrag(System.Object[],System.Windows.Forms.Design.SelectionRules,System.Int32,System.Int32)">
      <summary>
        <para>Begins a drag operation.</para>
      </summary>
      <param name="components">The set of components that is going to be dragged.</param>
      <param name="rules">The rules for the operation to begin, from SelectionRules</param>
      <param name="initialX">Starting X position, in screen coordinates, of the drag</param>
      <param name="initialY">Starting X position, in screen coordinates, of the drag</param>
      <returns>
        <para>
          <see langword="true" /> if the designer is going to 
    be handling this drag, or <see langword="false" />
    if not.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.SelectionUIHandler.DragMoved(System.Object[],System.Drawing.Rectangle)">
      <summary>
        <para>Called when the user has moved the mouse.</para>
      </summary>
      <param name="components">The same set of components that was passed to beginDrag.</param>
      <param name="offset">A rectangle providing the new offset for each of the components. The x and y fields contain the position offset and the width and height fields contain the size differential.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.SelectionUIHandler.EndDrag(System.Object[],System.Boolean)">
      <summary>
        <para>Called when the user has completed the drag. The designer should
       remove any UI feedback it may be providing.</para>
      </summary>
      <param name="components">The same set of components that was passed to beginDrag.</param>
      <param name="cancel">true if the user cancelled the drag operation, or false otherwise. If the drag was cancelled, the designer should not actually reposition the components.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.SelectionUIHandler.GetComponent">
      <summary>
      Retrieves the base component for the selection handler.
 </summary>
      <returns>
      The component for this selection handler.
 </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.SelectionUIHandler.GetControl">
      <summary>
      Retrieves the base component's UI control for the selection handler.
 </summary>
      <returns>
      The UI control for this selection handler's base control.
 </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.SelectionUIHandler.GetControl(System.ComponentModel.IComponent)">
      <summary>
      Retrieves the UI control for the given component.
 </summary>
      <param name="component">
      The component to retrieve the UI control for.
 </param>
      <returns>
      The control that provides UI for this component.
 </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.SelectionUIHandler.GetCurrentSnapSize">
      <summary>
      Retrieves the current grid snap size we should snap objects
      to.
 </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.SelectionUIHandler.GetService(System.Type)">
      <summary>
      We use this to request often-used services.
 </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.SelectionUIHandler.GetShouldSnapToGrid">
      <summary>
      Determines if the selection UI handler should attempt to snap
      objects to a grid.
 </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.SelectionUIHandler.GetUpdatedRect(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Boolean)">
      <summary>
      Given a rectangle, this updates the dimensions of it
      with any grid snaps and returns a new rectangle.  If
      no changes to the rectangle's size were needed, this
      may return the same rectangle.
 </summary>
      <param name="orignalRect">
      The rectangle to update.
 </param>
      <param name="dragRect">
      The dragging rectangle of the component.
 </param>
      <param name="updateSize">
      True to updateSize as well
 </param>
      <returns>
      A rectangle with updated dimensions.
 </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.SelectionUIHandler.QueryBeginDrag(System.Object[],System.Windows.Forms.Design.SelectionRules,System.Int32,System.Int32)">
      <summary>
     Queries to see if a drag operation
     is valid on this handler for the given set of components.
     If it returns true, BeginDrag will be called immediately after.
 </summary>
      <param name="components">
     The set of components that is going to be dragged.
 </param>
      <param name="rules">
     The rules for the operation to begin, from SelectionRules
 </param>
      <param name="initialX">
     Starting X position, in screen coordinates, of the drag
 </param>
      <param name="initialY">
     Starting X position, in screen coordinates, of the drag
 </param>
      <returns>
     true if the designer is going to be the one handling this
     drag, or false if not.
 </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.SelectionUIHandler.SetCursor">
      <summary>
     Asks the handler to set the appropriate cursor
 </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.SelectionUIHandler.BoundsInfo.#ctor(System.Windows.Forms.Control)">
      <summary>
     Creates and initializes a new BoundsInfo object.
 </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.SelectionUIHandler.BoundsInfo.ToString">
      <summary>
     Overrides object ToString.
 </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.TraySelectionUIHandler.#ctor(System.Windows.Forms.Design.ComponentTray)">
      <summary>
      Creates a new selection UI handler for the given
      component tray.
 </summary>
      <param name="tray">
      The tray this handler will work with to
      help provide selection UI.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.TraySelectionUIHandler.BeginDrag(System.Object[],System.Windows.Forms.Design.SelectionRules,System.Int32,System.Int32)">
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.TraySelectionUIHandler.EndDrag(System.Object[],System.Boolean)">
      <summary>
     Called when the user has completed the drag.  The designer should
     remove any UI feedback it may be providing.
 </summary>
      <param name="components">
     The same set of components that was passed to beginDrag.
 </param>
      <param name="cancel">
     true if the user cancelled the drag operation,
     or false otherwise.  If the drag was cancelled,
     the designer should not actually reposition the components.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.TraySelectionUIHandler.GetComponent">
      <summary>
      Retrieves the base component for the selection handler.
 </summary>
      <returns>
      The component for this selection handler.
 </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.TraySelectionUIHandler.GetControl">
      <summary>
      Retrieves the base component's UI control for the selection handler.
 </summary>
      <returns>
      The UI control for this selection handler's base control.
 </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.TraySelectionUIHandler.GetControl(System.ComponentModel.IComponent)">
      <summary>
      Retrieves the UI control for the given component.
 </summary>
      <param name="component">
      The component to retrieve the UI control for.
 </param>
      <returns>
      The control that provides UI for this component.
 </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.TraySelectionUIHandler.GetCurrentSnapSize">
      <summary>
      Retrieves the current grid snap size we should snap objects
      to.
 </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.TraySelectionUIHandler.GetService(System.Type)">
      <summary>
      We use this to request often-used services.
 </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.TraySelectionUIHandler.GetShouldSnapToGrid">
      <summary>
      Determines if the selection UI handler should attempt to snap
      objects to a grid.
 </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.TraySelectionUIHandler.GetUpdatedRect(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Boolean)">
      <summary>
      Given a rectangle, this updates the dimensions of it
      with any grid snaps and returns a new rectangle.  If
      no changes to the rectangle's size were needed, this
      may return the same rectangle.
 </summary>
      <param name="originalRect">
      The rectangle to update.
 </param>
      <param name="dragRect">
      The dragging rectangle of the component.
 </param>
      <param name="updateSize">
      True to updateSize as well
 </param>
      <returns>
      A rectangle with updated dimensions.
 </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.TraySelectionUIHandler.SetCursor">
      <summary>
     Asks the handler to set the appropriate cursor
 </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.CompositionCommandSet.#ctor(System.Windows.Forms.Control,System.ComponentModel.ISite)">
      <summary>
      Constructs a new composition command set object.
 </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.CompositionCommandSet.Dispose">
    </member>
    <member name="M:System.Windows.Forms.Design.CompositionCommandSet.OnKeyCancel(System.Object)">
      <summary>
     Called for the two cancel commands we support.
 </summary>
      <param name="sender">
     The MenuCommand object sending the event.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.CompositionCommandSet.OnKeySelect(System.Object,System.EventArgs)">
      <summary>
     Called for selection via the tab key.
 </summary>
      <param name="sender">
     The MenuCommand object sending the event.
 </param>
      <param name="e">
     The event that was sent.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.CompositionCommandSet.OnUpdateCommandStatus">
      <summary>
      This is called when the selection has changed.  Anyone using CommandSetItems
      that need to update their status based on selection changes should override
      this and update their own commands at this time.  The base implementaion
      runs through all base commands and calls UpdateStatus on them.
 </summary>
    </member>
    <member name="T:System.Windows.Forms.Design.ComponentDocumentDesigner">
      <summary>
        <para> Extends design-time behavior for a design 
      document that supports Windows Forms child components.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentDocumentDesigner.Dispose(System.Boolean)">
      <summary>
        <para>Releases the unmanaged resources used by the <see cref="T:System.Windows.Forms.Design.ComponentDocumentDesigner" /> and optionally releases the managed
   resources.</para>
      </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentDocumentDesigner.GetToolSupported(System.Drawing.Design.ToolboxItem)">
      <summary>
        <para>Gets a value indicating whether the specified tool is supported by the
      designer.</para>
      </summary>
      <param name="tool">The <see cref="T:System.Drawing.Design.ToolboxItem" /> to test for toolbox support.</param>
      <returns>
        <para>
          <see langword="true" /> if the tool should be enabled on
   the toolbox; <see langword="false" />
   if the document designer doesn't know how to use the tool.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentDocumentDesigner.Initialize(System.ComponentModel.IComponent)">
      <summary>
        <para> Initializes the designer with the specified component.</para>
      </summary>
      <param name="component">The <see cref="T:System.ComponentModel.IComponent" /> to associate with the designer.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentDocumentDesigner.PreFilterProperties(System.Collections.IDictionary)">
      <summary>
        <para> Adjusts the
      set of properties the component will expose through a <see cref="T:System.ComponentModel.TypeDescriptor" />.</para>
      </summary>
      <param name="properties">An <see cref="T:System.Collections.IDictionary" /> that contains the properties for the class of the component.</param>
    </member>
    <member name="P:System.Windows.Forms.Design.ComponentDocumentDesigner.Control">
      <summary>
        <para>Gets the control for the designer.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.Design.ComponentDocumentDesigner.TrayAutoArrange">
      <summary>
        <para>Gets or sets a value indicating whether the component tray for the designer
      is in auto-arrange mode.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.Design.ComponentDocumentDesigner.TrayLargeIcon">
      <summary>
        <para> Gets or sets a value indicating whether the component tray for the designer is in large icon mode.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentDocumentDesigner.CompositionUI.#ctor(System.Windows.Forms.Design.ComponentDocumentDesigner,System.IServiceProvider)">
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentDocumentDesigner.CompositionUI.AddComponent(System.ComponentModel.IComponent)">
      <summary>
      Adds a component to the tray.
 </summary>
      <param name="component">
      The component to add.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentDocumentDesigner.CompositionUI.OnDragDrop(System.Windows.Forms.DragEventArgs)">
      <summary>
      We don't want to allow drag/drop operations onto the banner area.
 </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentDocumentDesigner.CompositionUI.OnDragOver(System.Windows.Forms.DragEventArgs)">
      <summary>
      We don't want to allow drag/drop operations onto the banner area.
 </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentDocumentDesigner.CompositionUI.OnSetCursor">
      <summary>
      Sets the cursor.  We override to provide support for the toolbox.
 </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentDocumentDesigner.CompositionUI.RemoveComponent(System.ComponentModel.IComponent)">
      <summary>
      Removes a component from the tray.
 </summary>
      <param name="component">
      The component to remove.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentDocumentDesigner.CompositionUI.WndProc(System.Windows.Forms.Message@)">
      <summary>
      We override the wndproc of the control so we can intercept non client
      messages.  We create the banner for the composition designer by
      changing the dimensions of the non-client area.
 </summary>
      <param name="m">
     Win32 message
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentDocumentDesigner.CompositionUI.CompositionSelectionUIHandler.#ctor(System.Windows.Forms.Design.ComponentDocumentDesigner)">
      <summary>
      Creates a new selection UI handler for the given
      composition designer.
 </summary>
      <param name="compositionDesigner">
      The composition designer this handler will work with to
      help provide selection UI.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentDocumentDesigner.CompositionUI.CompositionSelectionUIHandler.GetComponent">
      <summary>
      Retrieves the base component for the selection handler.
 </summary>
      <returns>
      The component for this selection handler.
 </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentDocumentDesigner.CompositionUI.CompositionSelectionUIHandler.GetControl">
      <summary>
      Retrieves the base component's UI control for the selection handler.
 </summary>
      <returns>
      The UI control for this selection handler's base control.
 </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentDocumentDesigner.CompositionUI.CompositionSelectionUIHandler.GetControl(System.ComponentModel.IComponent)">
      <summary>
      Retrieves the UI control for the given component.
 </summary>
      <param name="component">
      The component to retrieve the UI control for.
 </param>
      <returns>
      The control that provides UI for this component.
 </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentDocumentDesigner.CompositionUI.CompositionSelectionUIHandler.GetCurrentSnapSize">
      <summary>
      Retrieves the current grid snap size we should snap objects
      to.
 </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentDocumentDesigner.CompositionUI.CompositionSelectionUIHandler.GetService(System.Type)">
      <summary>
      We use this to request often-used services.
 </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentDocumentDesigner.CompositionUI.CompositionSelectionUIHandler.GetShouldSnapToGrid">
      <summary>
      Determines if the selection UI handler should attempt to snap
      objects to a grid.
 </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentDocumentDesigner.CompositionUI.CompositionSelectionUIHandler.GetUpdatedRect(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Boolean)">
      <summary>
      Given a rectangle, this updates the dimensions of it
      with any grid snaps and returns a new rectangle.  If
      no changes to the rectangle's size were needed, this
      may return the same rectangle.
 </summary>
      <param name="originalRect">
      The rectangle to update.
 </param>
      <param name="dragRect">
     The dragging rectangle of the component.
 </param>
      <param name="updateSize">
      True to updateSize as well
 </param>
      <returns>
      A rectangle with updated dimensions.
 </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentDocumentDesigner.CompositionUI.CompositionSelectionUIHandler.SetCursor">
      <summary>
     Asks the handler to set the appropriate cursor
 </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ContainerSelectorActiveEventArgs.#ctor(System.Object)">
    </member>
    <member name="M:System.Windows.Forms.Design.ContainerSelectorActiveEventArgs.#ctor(System.Object,System.Windows.Forms.Design.ContainerSelectorActiveEventArgsType)">
    </member>
    <member name="P:System.Windows.Forms.Design.ContainerSelectorActiveEventArgs.Component">
    </member>
    <member name="P:System.Windows.Forms.Design.ContainerSelectorActiveEventArgs.EventType">
    </member>
    <member name="F:System.Windows.Forms.Design.ContainerSelectorActiveEventArgsType.Contextmenu">
      <summary>
        <para>
       Indicates
       the container of the active event was the contextmenu.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.ContainerSelectorActiveEventArgsType.Mouse">
      <summary>
        <para>
       Indicates
       the container of the active event was the mouse.
    </para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlCodeDomSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
      <summary>
     Deserilizes the given CodeDom object into a real object.  This
     will use the serialization manager to create objects and resolve
     data types.  The root of the object graph is returned.
 </summary>
      <param name="manager">
     A serialization manager interface that is used during the deserialization
     process.
 </param>
      <param name="codeObject">
     A CodeDom object to deserialize.  For this serializer this must point to
     a CodeStatementCollection that has statements whose left hand side
     ultimately points to the object we need to deserialize.
 </param>
      <returns>
     An object representing the deserialized CodeDom object.
 </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
      <summary>
     Serializes the given object into a CodeDom object.
 </summary>
      <param name="manager">
     A serialization manager interface that is used during the deserialization
     process.
 </param>
      <param name="value">
     The object to serialize.
 </param>
      <returns>
     A CodeDom object representing the object that has been serialized.  For components,
     this returns a CodeStatementCollection containing all of the properties, events
     and methods that had to be set to serialize the given component.  In addition,
     this may create a variable reference in a CodeTypeDeclaration, if one can be
     found in the serialization context stack.
 </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlCommandSet.#ctor(System.ComponentModel.ISite)">
      <summary>
     Creates a new CommandSet object.  This object implements the set
     of commands that the UI.Win32 form designer offers.
 </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlCommandSet.Dispose">
      <summary>
     Disposes of this object, removing all commands from the menu service.
 </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlCommandSet.GetSnapInformation(System.ComponentModel.Design.IDesignerHost,System.ComponentModel.IComponent,System.Drawing.Size@,System.ComponentModel.IComponent@,System.ComponentModel.PropertyDescriptor@)">
      <summary>
      Retrieves the snap information for the given component.  
 </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlCommandSet.OnKeyCancel(System.Object)">
      <summary>
     Called for the two cancel commands we support.
 </summary>
      <param name="sender">
     The MenuCommand object sending the event.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlCommandSet.OnKeySize(System.Object,System.EventArgs)">
      <summary>
     Called for the various sizing commands we support.
 </summary>
      <param name="sender">
     The MenuCommand object sending the event.
 </param>
      <param name="e">
     The event that was sent.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlCommandSet.OnKeySelect(System.Object,System.EventArgs)">
      <summary>
     Called for selection via the tab key.
 </summary>
      <param name="sender">
     The MenuCommand object sending the event.
 </param>
      <param name="e">
     The event that was sent.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlCommandSet.OnMenuLockControls(System.Object,System.EventArgs)">
      <summary>
     Called when the lock controls menu item is selected.
 </summary>
      <param name="sender">
     The MenuCommand object sending the event.
 </param>
      <param name="e">
     The event that was sent.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlCommandSet.OnStatusAnyControls(System.Object,System.EventArgs)">
      <summary>
     Determines the status of a menu command.  Commands with this event
     handler are enabled when there is one or more controls on the design
     surface.
 </summary>
      <param name="sender">
     Object that sent the event.  This must be a MenuCommand
     object.
 </param>
      <param name="e">
     Event.  This is not used.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlCommandSet.OnStatusControlsOnlySelection(System.Object,System.EventArgs)">
      <summary>
     Determines the status of a menu command.  Commands with this event
     handler are enabled when one or more objects are selected.
 </summary>
      <param name="sender">
     Object that sent the event.  This must be a MenuCommand
     object.
 </param>
      <param name="e">
     Event.  This is not used.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlCommandSet.OnStatusMultiSelect(System.Object,System.EventArgs)">
      <summary>
     Determines the status of a menu command.  Commands with this event
     handler are enabled when more than one object is selected.
 </summary>
      <param name="sender">
     Object that sent the event.  This must be a MenuCommand
     object.
 </param>
      <param name="e">
     Event.  This is not used.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlCommandSet.OnStatusMultiSelectPrimary(System.Object,System.EventArgs)">
      <summary>
     Determines the status of a menu command.  Commands with this event
     handler are enabled when more than one object is selected and one
     of them is marked as the primary selection.
 </summary>
      <param name="sender">
     Object that sent the event.  This must be a MenuCommand
     object.
 </param>
      <param name="e">
     Event.  This is not used.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlCommandSet.OnStatusShowGrid(System.Object,System.EventArgs)">
      <summary>
     Determines the status of a menu command.  This event handler is
     dedicated to the ShowGrid item.
 </summary>
      <param name="sender">
     Object that sent the event.  This must be a MenuCommand
     object.
 </param>
      <param name="e">
     Event.  This is not used.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlCommandSet.OnStatusSnapToGrid(System.Object,System.EventArgs)">
      <summary>
     Determines the status of a menu command.  This event handler is
     dedicated to the SnapToGrid item.
 </summary>
      <param name="sender">
     Object that sent the event.  This must be a MenuCommand
     object.
 </param>
      <param name="e">
     Event.  This is not used.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlCommandSet.OnUpdateCommandStatus">
      <summary>
      This is called when the selection has changed.  Anyone using CommandSetItems
      that need to update their status based on selection changes should override
      this and update their own commands at this time.  The base implementaion
      runs through all base commands and calls UpdateStatus on them.
 </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlCommandSet.ControlComparer.Compare(System.Object,System.Object)">
      <summary>
        <para>Compares two controls for equality.</para>
      </summary>
      <param name="x">The first object to compare.</param>
      <param name=" y">The second object to compare.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.DataGridColumnCollectionEditor.CreateNewItemTypes">
      <summary>
        <para> 
       Gets the
       data types this collection can contain.</para>
      </summary>
      <returns>
        <para>An array of types this collection can contain.</para>
      </returns>
    </member>
    <member name="F:System.Windows.Forms.Design.DataGridDesigner.designerVerbs">
      <summary>
        <para>Gets the design-time verbs suppoted by the component associated with the 
       designer.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.DataGridDesigner.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Windows.Forms.Design.DataGridDesigner" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.DataGridDesigner.OnAutoFormat(System.Object,System.EventArgs)">
      <summary>
        <para>Raises the AutoFormat event.</para>
      </summary>
      <param name="sender">The source of the event.</param>
      <param name=" e">An EventArgs that contains the event data.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.DataGridDesigner.OnPopulateGrid(System.Object,System.EventArgs)">
      <summary>
        <para>Raises the PopulateGrid event.</para>
      </summary>
      <param name="sender">The source of the event.</param>
      <param name=" evevent">An EventArgs that contains the event data.</param>
    </member>
    <member name="P:System.Windows.Forms.Design.DataGridDesigner.Verbs">
      <summary>
        <para>Gets the design-time verbs supported by the component associated with the 
       designer.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.DateTimePickerDesigner.OnSetComponentDefaults">
    </member>
    <member name="P:System.Windows.Forms.Design.DateTimePickerDesigner.SelectionRules">
    </member>
    <member name="M:System.Windows.Forms.Design.DesignBindingPropertyDescriptor.CanResetValue(System.Object)">
      <summary>
        <para>Gets a value indicating whether the specified component can reset the value 
       of the property.</para>
      </summary>
      <param name="component">The component to test whether it can change the value of the property.</param>
      <returns>
        <para>
          <see langword="true" /> if the value can be reset; otherwise, 
 <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.DesignBindingPropertyDescriptor.GetValue(System.Object)">
      <summary>
        <para>Gets a value from the specified component.</para>
      </summary>
      <param name="component">The component to retrieve a value from.</param>
      <returns>
        <para>The value of the specified component.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.DesignBindingPropertyDescriptor.ResetValue(System.Object)">
      <summary>
        <para>Resets the value of the specified component.</para>
      </summary>
      <param name="component">The component to reset the value of.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.DesignBindingPropertyDescriptor.SetValue(System.Object,System.Object)">
      <summary>
        <para>Sets the specified value for the specified component.</para>
      </summary>
      <param name="component">The component to set the value for.</param>
      <param name=" value">The value to set.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.DesignBindingPropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary>
        <para>Indicates whether the specified component should persist the value.</para>
      </summary>
      <param name="component">The component to determine whether the value of should be persisted.</param>
      <returns>
        <para>
          <see langword="true" /> if the value should be persisted; 
    otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="P:System.Windows.Forms.Design.DesignBindingPropertyDescriptor.ComponentType">
      <summary>
        <para>Gets or sets the type of the component that owns the property.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.Design.DesignBindingPropertyDescriptor.Converter">
      <summary>
        <para>Gets or sets the type converter.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.Design.DesignBindingPropertyDescriptor.IsReadOnly">
      <summary>
        <para>Indicates whether the property is read-only.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.Design.DesignBindingPropertyDescriptor.PropertyType">
      <summary>
        <para>Gets or sets the type of the property.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.DesignerExtenders.#ctor(System.ComponentModel.Design.IExtenderProviderService)">
    </member>
    <member name="M:System.Windows.Forms.Design.DesignerExtenders.Dispose">
    </member>
    <member name="M:System.Windows.Forms.Design.DesignerExtenders.ModifiersExtenderProvider.CanExtend(System.Object)">
    </member>
    <member name="M:System.Windows.Forms.Design.DesignerExtenders.ModifiersExtenderProvider.GetModifiers(System.ComponentModel.IComponent)">
    </member>
    <member name="M:System.Windows.Forms.Design.DesignerExtenders.ModifiersExtenderProvider.SetModifiers(System.ComponentModel.IComponent,System.CodeDom.MemberAttributes)">
    </member>
    <member name="M:System.Windows.Forms.Design.DesignerExtenders.ModifiersInheritedExtenderProvider.CanExtend(System.Object)">
    </member>
    <member name="M:System.Windows.Forms.Design.DesignerExtenders.ModifiersInheritedExtenderProvider.GetModifiers(System.ComponentModel.IComponent)">
    </member>
    <member name="M:System.Windows.Forms.Design.DesignerExtenders.ModifierConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
    </member>
    <member name="M:System.Windows.Forms.Design.DesignerExtenders.ModifierConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
    </member>
    <member name="M:System.Windows.Forms.Design.DesignerExtenders.ModifierConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
    </member>
    <member name="M:System.Windows.Forms.Design.DesignerExtenders.ModifierConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
    </member>
    <member name="M:System.Windows.Forms.Design.DesignerExtenders.ModifierConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
    </member>
    <member name="M:System.Windows.Forms.Design.DesignerExtenders.ModifierConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
    </member>
    <member name="M:System.Windows.Forms.Design.DesignerExtenders.ModifierConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
    </member>
    <member name="M:System.Windows.Forms.Design.DesignerExtenders.ModifierConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
    </member>
    <member name="M:System.Windows.Forms.Design.DesignerExtenders.ModifierConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
    </member>
    <member name="M:System.Windows.Forms.Design.DesignerExtenders.ModifierConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
    </member>
    <member name="M:System.Windows.Forms.Design.DesignerExtenders.ModifierConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
    </member>
    <member name="M:System.Windows.Forms.Design.DesignerExtenders.ModifierConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
    </member>
    <member name="M:System.Windows.Forms.Design.IOverlayService.PushOverlay(System.Windows.Forms.Control)">
      <summary>
     Pushes the given control on top of the overlay list.  This is a "push"
     operation, meaning that it forces this control to the top of the existing
     overlay list.

 </summary>
      <param name="control">
     The control to push to the top of the overlay list.  An
     exception will be thrown if this control is already in
     the list.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.IOverlayService.RemoveOverlay(System.Windows.Forms.Control)">
      <summary>
     Removes the given control from the overlay list.  Unlike pushOverlay,
     this can remove a control from the middle of the overlay list.

 </summary>
      <param name="control">
     The control to remove.  An exception will be thrown if this
     control is not currently in the list.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ISplitWindowService.AddSplitWindow(System.Windows.Forms.Control)">
      <summary>
      Requests the service to add a window 'pane'.
 </summary>
      <param name="window">
  The window pane to add.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ISplitWindowService.RemoveSplitWindow(System.Windows.Forms.Control)">
      <summary>
      Requests the service to remove a window 'pane'.
 </summary>
      <param name="window">
  The window pane to add.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.DesignerFrame.#ctor(System.ComponentModel.ISite)">
    </member>
    <member name="M:System.Windows.Forms.Design.DesignerFrame.Initialize(System.Windows.Forms.Control)">
    </member>
    <member name="M:System.Windows.Forms.Design.DesignerFrame.OnGotFocus(System.EventArgs)">
    </member>
    <member name="M:System.Windows.Forms.Design.DesignerFrame.OnLostFocus(System.EventArgs)">
    </member>
    <member name="M:System.Windows.Forms.Design.DesignerFrame.ProcessDialogKey(System.Windows.Forms.Keys)">
    </member>
    <member name="M:System.Windows.Forms.Design.DesignerFrame.WndProc(System.Windows.Forms.Message@)">
    </member>
    <member name="M:System.Windows.Forms.Design.DesignerFrame.OverlayControl.#ctor(System.IServiceProvider)">
    </member>
    <member name="M:System.Windows.Forms.Design.DesignerFrame.OverlayControl.OnCreateControl">
    </member>
    <member name="M:System.Windows.Forms.Design.DesignerFrame.OverlayControl.OnLayout(System.Windows.Forms.LayoutEventArgs)">
    </member>
    <member name="M:System.Windows.Forms.Design.DesignerFrame.OverlayControl.PushOverlay(System.Windows.Forms.Control)">
    </member>
    <member name="M:System.Windows.Forms.Design.DesignerFrame.OverlayControl.RemoveOverlay(System.Windows.Forms.Control)">
    </member>
    <member name="M:System.Windows.Forms.Design.DesignerFrame.OverlayControl.WndProc(System.Windows.Forms.Message@)">
    </member>
    <member name="P:System.Windows.Forms.Design.DesignerFrame.OverlayControl.OverlayVisible">
    </member>
    <member name="M:System.Windows.Forms.Design.DockEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>
        <para>Edits the specifiedn object value using the editor style provided by
 GetEditorStyle. A service provider is provided so that any
 required editing services can be obtained.</para>
      </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information. </param>
      <param name="provider">A service provider object through which editing services may be obtained. </param>
      <param name="value">An instance of the value being edited. </param>
      <returns>
        <para>The new value of the object. If the value of the object hasn't
 changed, this should return the same object it was passed.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.DockEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <para>Retrieves the editing style of the EditValue method. If the method
 is not supported, this will return None.</para>
      </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information. </param>
      <returns>
        <para>An enum value indicating the provided editing style.</para>
      </returns>
    </member>
    <member name="T:System.Windows.Forms.Design.DocumentDesigner">
      <summary>
        <para>Provides a designer that extends the <see cref="T:System.Windows.Forms.Design.ScrollableControlDesigner" /> and implements <see cref="T:System.ComponentModel.Design.IRootDesigner" />.</para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.Design.ScrollableControlDesigner">
      <summary>
        <para> Extends design-time behavior for scrollable controls.</para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.Design.ParentControlDesigner">
      <summary>
        <para>Extends design-time behavior for a 
      Windows Forms control. This designer extends <see cref="T:System.Windows.Forms.Design.ControlDesigner" /> and provides a selection UI handler
      and the ability to add and manipulate nested components.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.Dispose(System.Boolean)">
      <summary>
        <para>Releases the unmanaged resources used by the <see cref="T:System.Windows.Forms.Design.ParentControlDesigner" /> and optionally releases the managed 
   resources.</para>
      </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.InvokeCreateTool(System.Windows.Forms.Design.ParentControlDesigner,System.Drawing.Design.ToolboxItem)">
      <summary>
        <para>Creates a tool from the specified <see cref="T:System.Drawing.Design.ToolboxItem" /> . </para>
      </summary>
      <param name="toInvoke">The <see cref="T:System.Windows.Forms.Design.ParentControlDesigner" /> that the tool is to be used with.</param>
      <param name=" tool">The <see cref="T:System.Drawing.Design.ToolboxItem" /> to create a tool from.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.CanParent(System.Windows.Forms.Design.ControlDesigner)">
      <summary>
        <para>Indicates whether the control managed by the
      specified designer can be a child of the control managed by this designer.</para>
      </summary>
      <param name="controlDesigner">The designer that manages the control to determine whether can be a child of the control managed by the designer.</param>
      <returns>
        <para>
          <see langword="true" /> if the control managed by the
   specified designer can be a child of the control managed by this designer;
   otherwise, <see langword="false" /> .</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.CanParent(System.Windows.Forms.Control)">
      <summary>
        <para>Indicates whether the specified control can be a child of the control
      managed by this designer.</para>
      </summary>
      <param name="control">The <see cref="T:System.Windows.Forms.Control" /> to determine whether can be a child of the designer.</param>
      <returns>
        <para>
          <see langword="true" /> if
   the specified control can be a child of the control managed by this designer;
   otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.CreateTool(System.Drawing.Design.ToolboxItem)">
      <summary>
        <para>Creates a component or control from the specified tool and adds it to the current design document.</para>
      </summary>
      <param name="tool">The <see cref="T:System.Drawing.Design.ToolboxItem" /> to create a component from.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.CreateTool(System.Drawing.Design.ToolboxItem,System.Drawing.Point)">
      <summary>
        <para>Creates a component or control from the specified tool and adds it to the current design document at
      the specified location.</para>
      </summary>
      <param name="tool">The <see cref="T:System.Drawing.Design.ToolboxItem" /> to create a component from.</param>
      <param name="location">The <see cref="T:System.Drawing.Point" /> , in design-time view screen coordinates, at which to center the component. </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.CreateTool(System.Drawing.Design.ToolboxItem,System.Drawing.Rectangle)">
      <summary>
        <para> Creates a component or control from the specified tool and adds it to the current design document
      within the bounds of the specified rectangle.</para>
      </summary>
      <param name="tool">The <see cref="T:System.Drawing.Design.ToolboxItem" /> to create a component from.</param>
      <param name="bounds">A <see cref="T:System.Drawing.Rectangle" /> indicating the location and size for the component created from the tool. The <see cref="P:System.Drawing.Rectangle.X" /> and <see cref="P:System.Drawing.Rectangle.Y" /> values of the <see cref="T:System.Drawing.Rectangle" /> indicate the design-time view screen coordinates of the upper-left corner of the component.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.CreateToolCore(System.Drawing.Design.ToolboxItem,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
      <summary>
        <para> Provides core functionality for all the <see cref="M:System.Windows.Forms.Design.ParentControlDesigner.CreateTool(System.Drawing.Design.ToolboxItem)" />
methods.</para>
      </summary>
      <param name="tool">The <see cref="T:System.Drawing.Design.ToolboxItem" /> to create a component from.</param>
      <param name="x"> The horizontal position, in design-time view coordinates, of the location of the left edge of the tool, if a size is specified, or of the center of the tool, if no size is specified.</param>
      <param name="y"> The vertical position, in design-time view coordinates, of the location of the top edge of the tool, if a size is specified, or of the center of the tool, if no size is specified.</param>
      <param name="width">The width of the tool. This parameter is ignored if the <paramref name="hasSize" /> parameter is set to <see langword="false" /> .</param>
      <param name="height">The height of the tool. This parameter is ignored if the <paramref name="hasSize" /> parameter is set to <see langword="false" /> .</param>
      <param name="hasLocation">
        <see langword="true" /> if a location for the component is specified; <see langword="false" /> if the component is to be positioned in the center of the currently selected control.</param>
      <param name="hasSize">
        <see langword="true" /> if a size for the component is specified; <see langword="false" /> if the default height and width values for the component are to be used.</param>
      <returns>
        <para> An array of components created from the tool.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.GetControl(System.Object)">
      <summary>
        <para>Gets the control from the designer of the specified component.</para>
      </summary>
      <param name="component">The component to retrieve the control for.</param>
      <returns>
        <para>The <see cref="T:System.Windows.Forms.Control" /> that the specified component belongs 
   to.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.GetUpdatedRect(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Boolean)">
      <summary>
        <para>Updates the position of the specified rectangle,
      adjusting it for grid alignment if gird alignment mode is
      enabled.</para>
      </summary>
      <param name="originalRect">A <see cref="T:System.Drawing.Rectangle" /> indicating the initial position of the component being updated. </param>
      <param name="dragRect">A <see cref="T:System.Drawing.Rectangle" /> indicating the new position of the component. </param>
      <param name="updateSize">
        <see langword="true" /> to update the size of the rectangle, if there has been any change; otherwise, <see langword="false" />. </param>
      <returns>
        <para> A rectangle indicating
      the position of the component in design-time view screen coordinates. If no changes have been made,
      this method returns the original rectangle.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.Initialize(System.ComponentModel.IComponent)">
      <summary>
        <para>Initializes the designer with the specified component.</para>
      </summary>
      <param name="component">The <see cref="T:System.ComponentModel.IComponent" /> to associate with the designer. </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.OnDragDrop(System.Windows.Forms.DragEventArgs)">
      <summary>
        <para> Provides an opportunity to perform
      processing when an object is dropped onto a designer control.</para>
      </summary>
      <param name="de">A <see cref="T:System.Windows.Forms.DragEventArgs" /> that provides data for the event.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.OnDragEnter(System.Windows.Forms.DragEventArgs)">
      <summary>
        <para> Provides an opportunity to perform processing when an object is dragged into the area over the designer's control.</para>
      </summary>
      <param name="de">A <see cref="T:System.Windows.Forms.DragEventArgs" /> that provides data for the event.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.OnDragLeave(System.EventArgs)">
      <summary>
        <para>Provides an opportunity to perform processing when an object is dragged out of the area over the designer's control.</para>
      </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that provides data for the event.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.OnDragOver(System.Windows.Forms.DragEventArgs)">
      <summary>
        <para> Provides an opportunity to perform processing when an object is dragged over the control designer view.</para>
      </summary>
      <param name="de">A <see cref="T:System.Windows.Forms.DragEventArgs" /> that provides data for the event.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)">
      <summary>
        <para> Provides an opportunity to perform processing to
      provide visual cues based on the location of the mouse
      while a drag operation is in progress.</para>
      </summary>
      <param name="e">A <see cref="T:System.Windows.Forms.GiveFeedbackEventArgs" /> that provides data for the event.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.OnMouseDragBegin(System.Int32,System.Int32)">
      <summary>
        <para> Provides an opportunity to perform processing when a drag operation begins.</para>
      </summary>
      <param name="x">The x position, in control coordinates, of the mouse. </param>
      <param name="y">The y position, in control coordinates, of the mouse. </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.OnMouseDragEnd(System.Boolean)">
      <summary>
        <para> Provides an opportunity to perform processing when a drag operation
      ends.</para>
      </summary>
      <param name="cancel">
        <see langword="true" /> to cancel the drag operation; <see langword="false" /> to commit it. </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.OnMouseDragMove(System.Int32,System.Int32)">
      <summary>
        <para>Provides an opportunity to perform processing for
      each movement of the mouse during an OLE drag operation.</para>
      </summary>
      <param name="x">The x position, in screen coordinates, of the mouse. </param>
      <param name="y">The y position, in screen coordinates, of the mouse. </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.OnMouseEnter">
      <summary>
        <para>Provides an opportunity to perform processing when the mouse cursor enters the area over the
      control.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.OnMouseHover">
      <summary>
        <para>Provides an opportunity to perform processing when the mouse hovers
      at a point over the control.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.OnMouseLeave">
      <summary>
        <para> Provides an opportunity to perform processing when the mouse leaves
      the area over the control.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.OnPaintAdornments(System.Windows.Forms.PaintEventArgs)">
      <summary>
        <para>Provides an opportunity to perform processing after a component has finished painting.</para>
      </summary>
      <param name="pe">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that provides data for the event. </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.OnSetCursor">
      <summary>
        <para> 
      Provides an opportunity to change the current mouse cursor.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.PreFilterProperties(System.Collections.IDictionary)">
      <summary>
        <para> Adjusts the set of properties the component will expose
      through a <see cref="T:System.ComponentModel.TypeDescriptor" />
      
      .</para>
      </summary>
      <param name="properties">An <see cref="T:System.Collections.IDictionary" /> that contains the properties for the class of the component. </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.WndProc(System.Windows.Forms.Message@)">
      <summary>
        <para> Processes Windows messages.</para>
      </summary>
      <param name="m">The <see cref="T:System.Windows.Forms.Message" /> to process.</param>
    </member>
    <member name="P:System.Windows.Forms.Design.ParentControlDesigner.DefaultControlLocation">
      <summary>
        <para>Gets the default location for a control added to the designer.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.Design.ParentControlDesigner.DrawGrid">
      <summary>
        <para> Gets
      or sets a value indicating whether a
      grid should be drawn on the control for this designer.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.Design.ParentControlDesigner.EnableDragRect">
      <summary>
        <para>Gets a value indicating whether drag rectangles are drawn by the designer.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.Design.ParentControlDesigner.GridSize">
      <summary>
        <para> 
      Gets or sets the size of each square of
      the grid that is drawn when the designer is in grid draw
      mode.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.ControlOleDragDropHandler.OnInitializeComponent(System.ComponentModel.IComponent,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
      <summary>
     This is called by the drag drop handler for each new tool that is created.  It gives us a chance to
     place the control on the correct designer.
 </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.IMenuStatusHandler.OverrideInvoke(System.ComponentModel.Design.MenuCommand)">
      <summary>
     CommandSet will check with this handler on each status update
     to see if the handler wants to override the availability of
     this command.
 </summary>
      <param name="cmd">
     The menu command to override the invokation for.
 </param>
      <returns>
     true if the handler overrode the invocation on
     the command.
 </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.IMenuStatusHandler.OverrideStatus(System.ComponentModel.Design.MenuCommand)">
      <summary>
     CommandSet will check with this handler on each status update
     to see if the handler wants to override the availability of
     this command.
 </summary>
      <param name="cmd">
     The menu command to override the status for.
 </param>
      <returns>
     true if the handler overrode the status on
     the command.
 </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.EscapeHandler.#ctor(System.Windows.Forms.Design.ParentControlDesigner)">
      <summary>
      Creates a new escape handler.
 </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.EscapeHandler.OverrideInvoke(System.ComponentModel.Design.MenuCommand)">
      <summary>
     CommandSet will check with this handler on each status update
     to see if the handler wants to override the availability of
     this command.
 </summary>
      <param name="cmd">
     The menu command to override the invokation for.
 </param>
      <returns>
     true if the handler overrode the invocation on
     the command.
 </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.EscapeHandler.OverrideStatus(System.ComponentModel.Design.MenuCommand)">
      <summary>
     CommandSet will check with this handler on each status update
     to see if the handler wants to override the availability of
     this command.
 </summary>
      <param name="cmd">
     The menu command to override the status for.
 </param>
      <returns>
     true if the handler overrode the status on
     the command.
 </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.ParentControlSelectionUIHandler.#ctor(System.Windows.Forms.Design.ParentControlDesigner)">
      <summary>
      Creates a new selection UI handler for the given
      designer.
 </summary>
      <param name="parentControlDesigner">
      The designer this handler will work with to
      help provide selection UI.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.ParentControlSelectionUIHandler.GetComponent">
      <summary>
      Retrieves the base component for the selection handler.
 </summary>
      <returns>
      The component for this selection handler.
 </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.ParentControlSelectionUIHandler.GetControl">
      <summary>
      Retrieves the base component's UI control for the selection handler.
 </summary>
      <returns>
      The UI control for this selection handler's base control.
 </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.ParentControlSelectionUIHandler.GetControl(System.ComponentModel.IComponent)">
      <summary>
      Retrieves the UI control for the given component.
 </summary>
      <param name="component">
      The component to retrieve the UI control for.
 </param>
      <returns>
      The control that provides UI for this component.
 </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.ParentControlSelectionUIHandler.GetCurrentSnapSize">
      <summary>
      Retrieves the current grid snap size we should snap objects
      to.
 </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.ParentControlSelectionUIHandler.GetService(System.Type)">
      <summary>
      We use this to request often-used services.
 </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.ParentControlSelectionUIHandler.GetShouldSnapToGrid">
      <summary>
      Determines if the selection UI handler should attempt to snap
      objects to a grid.
 </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.ParentControlSelectionUIHandler.GetUpdatedRect(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Boolean)">
      <summary>
      Given a rectangle, this updates the dimensions of it
      with any grid snaps and returns a new rectangle.  If
      no changes to the rectangle's size were needed, this
      may return the same rectangle.
 </summary>
      <param name="originalRect">
      The rectangle to update.
 </param>
      <param name="dragRect">
     The dragging rectangle of the component.
 </param>
      <param name="updateSize">
      True to updateSize as well
 </param>
      <returns>
      A rectangle with updated dimensions.
 </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.ParentControlSelectionUIHandler.SetCursor">
      <summary>
     Asks the handler to set the appropriate cursor
 </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ScrollableControlDesigner.GetHitTest(System.Drawing.Point)">
      <summary>
        <para>Indicates
      whether the specified point was within the boundaries of the component.
      </para>
      </summary>
      <param name="pt">The <see cref="T:System.Drawing.Point" /> , in screen coordinates, that was clicked.</param>
      <returns>
        <para>
          <see langword="true" /> if the point
   at the cursor is
   within the boundaries of the component; otherwise, <see langword="false" /> .</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ScrollableControlDesigner.WndProc(System.Windows.Forms.Message@)">
      <summary>
        <para> Processes Windows messages.</para>
      </summary>
      <param name="m">The <see cref="T:System.Windows.Forms.Message" /> to process.</param>
    </member>
    <member name="F:System.Windows.Forms.Design.DocumentDesigner.menuEditorService">
      <summary>
        <para> Initializes the menuEditorService variable to
   <see langword="null" />.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.DocumentDesigner.Dispose(System.Boolean)">
      <summary>
        <para>Releases the unmanaged resources used by the <see cref="T:System.Windows.Forms.Design.DocumentDesigner" /> and optionally releases the managed resources.</para>
      </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.DocumentDesigner.GetToolSupported(System.Drawing.Design.ToolboxItem)">
      <summary>
        <para> 
      Indicates whether the specified tool is supported by
      the designer.</para>
      </summary>
      <param name="tool">The <see cref="T:System.Drawing.Design.ToolboxItem" /> to test for toolbox support. </param>
      <returns>
        <para>
          <see langword="true" /> if the tool should be enabled on
   the toolbox; <see langword="false" />
   if the document designer doesn't know how to use the tool.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.DocumentDesigner.Initialize(System.ComponentModel.IComponent)">
      <summary>
        <para>Initializes the designer with the specified component.</para>
      </summary>
      <param name="component">The <see cref="T:System.ComponentModel.IComponent" /> to associate with the designer. </param>
    </member>
    <member name="M:System.Windows.Forms.Design.DocumentDesigner.OnContextMenu(System.Int32,System.Int32)">
      <summary>
        <para> Called when the context menu should
      be displayed.</para>
      </summary>
      <param name="x">The horizontal screen coordinate to display the context menu at.</param>
      <param name=" y">The vertical screen coordinate to display the context menu at.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.DocumentDesigner.OnCreateHandle">
      <summary>
        <para> Called immediately after the handle for the designer has been created.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.DocumentDesigner.EnsureMenuEditorService(System.ComponentModel.IComponent)">
      <summary>
        <para>Checks for the existence of a menu editor service and
      creates one if one does not already exist.</para>
      </summary>
      <param name="c">The <see cref="T:System.ComponentModel.IComponent" /> to ensure has a context menu service.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.DocumentDesigner.PreFilterProperties(System.Collections.IDictionary)">
      <summary>
        <para> Adjusts the set of properties the component exposes through a <see cref="T:System.ComponentModel.TypeDescriptor" />.</para>
      </summary>
      <param name="properties">An <see cref="T:System.Collections.IDictionary" /> that contains the properties for the class of the component. </param>
    </member>
    <member name="M:System.Windows.Forms.Design.DocumentDesigner.ToolPicked(System.Drawing.Design.ToolboxItem)">
      <summary>
        <para>Handles the behavior that occurs when a user double-clicks a toolbox item.</para>
      </summary>
      <param name="tool">The <see cref="T:System.Drawing.Design.ToolboxItem" /> to create a component for. </param>
    </member>
    <member name="M:System.Windows.Forms.Design.DocumentDesigner.WndProc(System.Windows.Forms.Message@)">
      <summary>
        <para>Processes Windows messages.</para>
      </summary>
      <param name="m">The <see cref="T:System.Windows.Forms.Message" /> to process.</param>
    </member>
    <member name="P:System.Windows.Forms.Design.DocumentDesigner.SelectionRules">
      <summary>
        <para> Gets the <see cref="T:System.Windows.Forms.Design.SelectionRules" /> for the designer.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.DocumentDesigner.AxToolboxItem.CreateComponentsCore(System.ComponentModel.Design.IDesignerHost)">
    </member>
    <member name="M:System.Windows.Forms.Design.DocumentDesigner.AxToolboxItem.Deserialize(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
    </member>
    <member name="M:System.Windows.Forms.Design.DocumentDesigner.AxToolboxItem.Serialize(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
    </member>
    <member name="M:System.Windows.Forms.Design.DocumentDesigner.DocumentInheritanceService.#ctor(System.Windows.Forms.Design.DocumentDesigner)">
      <summary>
      Creates a new document inheritance service.
 </summary>
      <param name="designer">
      A back pointer to our designer.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.DocumentDesigner.DocumentInheritanceService.IgnoreInheritedMember(System.Reflection.MemberInfo,System.ComponentModel.IComponent)">
      <summary>
        <para>Indicates the inherited members to ignore.</para>
      </summary>
      <param name="member">The member to check.  This will either be a FieldInfo or a MethodInfo</param>
      <param name="component">The component instance this member is bound to.</param>
      <returns>
        <para>
          <see langword="true" /> if
    the specified member should be included in the set of inherited components;
    otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.IEventHandlerService.GetHandler(System.Type)">
      <summary>
        <para>Gets the currently active event handler of the specified type.</para>
      </summary>
      <param name="handlerType">The type of the handler to get.</param>
      <returns>
        <para>An instance of the handler, or <see langword="null" /> if
    there is no handler of the requested type.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.IEventHandlerService.PopHandler(System.Object)">
      <summary>
        <para> 
       Pops the specified handler off of the stack.</para>
      </summary>
      <param name="handler">The handler to remove from the stack.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.IEventHandlerService.PushHandler(System.Object)">
      <summary>
        <para>Pushes the new, specified event handler on the stack.</para>
      </summary>
      <param name="handler">The handle to add to the stack.</param>
    </member>
    <member name="P:System.Windows.Forms.Design.IEventHandlerService.FocusWindow">
      <summary>
        <para>Gets or sets the control that handles focus changes
       for this event handler service.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.EventHandlerService.#ctor(System.Windows.Forms.Control)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.EventHandlerService.GetHandler(System.Type)">
      <summary>
        <para> 
       Gets the currently active event handler of the specified type.</para>
      </summary>
      <param name="handlerType">The type of the handler to get.</param>
      <returns>
        <para>An instance of the handler, or null if
       there is no handler of the requested type.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.EventHandlerService.PopHandler(System.Object)">
      <summary>
        <para> 
       Pops
       the given handler off of the stack.</para>
      </summary>
      <param name="handler">The handler to remove from the stack.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.EventHandlerService.PushHandler(System.Object)">
      <summary>
        <para>Pushes a new event handler on the stack.</para>
      </summary>
      <param name="handler">The handle to add to the stack.</param>
    </member>
    <member name="E:System.Windows.Forms.Design.EventHandlerService.EventHandlerChanged">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.Design.EventHandlerService.FocusWindow">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.EventHandlerService.HandlerEntry.#ctor(System.Object,System.Windows.Forms.Design.EventHandlerService.HandlerEntry)">
      <summary>
     Creates a new handler entry objet.
 </summary>
      <param name="handler">
     The handler to contain.
 </param>
      <param name="next">
     The next node in the chain.
 </param>
    </member>
    <member name="T:System.Windows.Forms.Design.FileNameEditor">
      <summary>
        <para> Provides a user interface for selecting a
      file name.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.FileNameEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>
        <para>Edits the specified object using the editor style provided
      by the <see cref="M:System.Windows.Forms.Design.FileNameEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)" /> method.</para>
      </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.</param>
      <param name="provider">A service provider object through which editing services may be obtained.</param>
      <param name="value">An instance of the value being edited.</param>
      <returns>
        <para>The new value of the object. If the value of the object hasn't
      changed, this should return the same object it was passed.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.FileNameEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <para>Gets the editing style used
      by the <see cref="M:System.Windows.Forms.Design.FileNameEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)" /> method.</para>
      </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.</param>
      <returns>
        <para>One of the <see cref="T:System.Drawing.Design.UITypeEditorEditStyle" /> values indicating the provided editing style.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.FileNameEditor.InitializeDialog(System.Windows.Forms.OpenFileDialog)">
      <summary>
        <para>Initializes the open file dialog when it is created.</para>
      </summary>
      <param name="openFileDialog"> The <see cref="T:System.Windows.Forms.OpenFileDialog" /> to use to select a file name.</param>
    </member>
    <member name="F:System.Windows.Forms.Design.FolderNameEditor.FolderBrowserFolder.Desktop">
      <summary>
        <para>
      The user's desktop.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.FolderNameEditor.FolderBrowserFolder.Favorites">
      <summary>
        <para>
      The user's favorites list.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.FolderNameEditor.FolderBrowserFolder.MyComputer">
      <summary>
        <para>
      The contents of the My Computer icon.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.FolderNameEditor.FolderBrowserFolder.MyDocuments">
      <summary>
        <para>
      The user's My Documents folder.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.FolderNameEditor.FolderBrowserFolder.MyPictures">
      <summary>
        <para>
      User's location to store pictures.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.FolderNameEditor.FolderBrowserFolder.NetAndDialUpConnections">
      <summary>
        <para>
      Network and dial-up connections.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.FolderNameEditor.FolderBrowserFolder.NetworkNeighborhood">
      <summary>
        <para>
      The network neighborhood.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.FolderNameEditor.FolderBrowserFolder.Printers">
      <summary>
        <para>
      A folder containing installed printers.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.FolderNameEditor.FolderBrowserFolder.Recent">
      <summary>
        <para>
      A folder containing shortcuts to recently opened files.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.FolderNameEditor.FolderBrowserFolder.SendTo">
      <summary>
        <para>
      A folder containing shortcuts to applications to send documents to.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.FolderNameEditor.FolderBrowserFolder.StartMenu">
      <summary>
        <para>
      The user's start menu.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.FolderNameEditor.FolderBrowserFolder.Templates">
      <summary>
        <para>
      The user's file templates.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.FolderNameEditor.FolderBrowserStyles.BrowseForComputer">
      <summary>
        <para> The folder browser can only return computers. If the user selects anything
      other than a computer, the <see langword="OK" /> button is grayed.
      </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.FolderNameEditor.FolderBrowserStyles.BrowseForEverything">
      <summary>
        <para> The folder browser can return any object that it can return.
      </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.FolderNameEditor.FolderBrowserStyles.BrowseForPrinter">
      <summary>
        <para> The folder browser can only return printers. If the user selects anything other
      than a printer, the <see langword="OK" /> button is grayed.
      </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.FolderNameEditor.FolderBrowserStyles.RestrictToDomain">
      <summary>
        <para> The folder browser will not include network folders 
      below the domain level in the dialog box's tree view control, or allow navigation to network locations outside of the domain.
      </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.FolderNameEditor.FolderBrowserStyles.RestrictToFilesystem">
      <summary>
        <para> The folder browser will only return local file system directories. If the user selects
      folders that are not part of the local file system, the <see langword="OK" /> button is grayed.
      </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.FolderNameEditor.FolderBrowserStyles.RestrictToSubfolders">
      <summary>
        <para> The folder browser will only return obejcts of 
      the local file system that are within the root folder or a subfolder
      of the root folder. If the user selects a subfolder of the root folder
      that is not part of the local file system, the <see langword="OK" />
      button is grayed.
      </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.FolderNameEditor.FolderBrowserStyles.ShowTextBox">
      <summary>
        <para> The folder browser includes a <see cref="T:System.Windows.Forms.TextBox" /> control in the browse dialog box that allows the user to type the name of an item.
   </para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.FormDocumentDesigner.Dispose(System.Boolean)">
      <summary>
        <para>Disposes of the resources used by this designer (other than memory).</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.FormDocumentDesigner.EnsureMenuEditorService(System.ComponentModel.IComponent)">
    </member>
    <member name="M:System.Windows.Forms.Design.FormDocumentDesigner.Initialize(System.ComponentModel.IComponent)">
      <summary>
        <para>Initializes the designer with the specified component.</para>
      </summary>
      <param name="component">The component to associate with this designer.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.FormDocumentDesigner.OnCreateHandle">
      <summary>
        <para>Handles the create handle event.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.FormDocumentDesigner.OnDragOver(System.Windows.Forms.DragEventArgs)">
      <summary>
        <para> Provides an opportunity to perform processing when an object is dragged over the control designer view.</para>
      </summary>
      <param name="de">A <see cref="T:System.Windows.Forms.DragEventArgs" /> that provides data for the event.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.FormDocumentDesigner.PreFilterProperties(System.Collections.IDictionary)">
      <summary>
        <para> 
       Allows a
       designer to filter the set of properties the component
       it is designing will expose through the TypeDescriptor
       object.</para>
      </summary>
      <param name="properties">The properties for the class of the component.</param>
      <returns>
        <para>The augmented set of properties. If the method does not
       modify any properties, it may just return a reference to
       its input parameter. If you do make a change to the
       properties, you must create a new array.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.GroupBoxDesigner.OnPaintAdornments(System.Windows.Forms.PaintEventArgs)">
      <summary>
        <para> 
       Overrides and handles the PaintAdornments event.</para>
      </summary>
      <param name="pe">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that provides data for the event.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.GroupBoxDesigner.WndProc(System.Windows.Forms.Message@)">
      <summary>
        <para> 
       Provides for Windows message processing.</para>
      </summary>
      <param name="m">The message to process.</param>
    </member>
    <member name="P:System.Windows.Forms.Design.GroupBoxDesigner.DefaultControlLocation">
      <summary>
        <para> 
       Gets the default location for a control added to this designer.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.HelpNamespaceEditor.InitializeDialog(System.Windows.Forms.OpenFileDialog)">
      <summary>
        <para>Initializes the open file dialog when it is created.</para>
      </summary>
      <param name="openFileDialog">An instance of the OpenFileDialog we will use to choose a file name.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ImageCollectionEditor.#ctor(System.Type)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Windows.Forms.Design.ImageCollectionEditor" /> class.</para>
      </summary>
      <param name="type">The type of the collection to edit.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ImageCollectionEditor.CreateInstance(System.Type)">
      <summary>
        <para>Creates an instance of the specified type in the collection.</para>
      </summary>
      <param name="type">The type of the image to insert in the collection.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ImageIndexEditor.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Windows.Forms.Design.ImageIndexEditor" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ImageIndexEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <para>Gets a value indicating whether this editor supports the painting of a representation
       of an object's value.</para>
      </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.</param>
      <returns>
        <para>
          <see langword="true" /> if PaintValue is implemented; 
    otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ImageIndexEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
      <summary>
        <para> 
       Paints a representative value of the specified object to
       the specified canvas.</para>
      </summary>
      <param name="e">
    What to paint and where to paint it.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ImageListDesigner.PreFilterProperties(System.Collections.IDictionary)">
      <summary>
        <para>Provides an opportunity for the designer to filter the properties.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ImageListDesigner.OriginalImageCollection.Add(System.Drawing.Image)">
      <summary>
        <para>Add the specified image to the ImageList.</para>
      </summary>
      <param name="value"> A System.Drawing.Bitmap image to add.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ImageListDesigner.OriginalImageCollection.Clear">
      <summary>
     Remove all images and masks from the ImageList.
 </summary>
    </member>
    <member name="T:System.Windows.Forms.Design.IMenuEditorService">
      <summary>
        <para>Provides access to the menu editing service.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.IMenuEditorService.GetMenu">
      <summary>
        <para>Gets the current menu.</para>
      </summary>
      <returns>
        <para>The current <see cref="T:System.Windows.Forms.Menu" />.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.IMenuEditorService.IsActive">
      <summary>
        <para> Indicates whether the current menu is active.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the current menu is currently active; otherwise, 
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.IMenuEditorService.SetMenu(System.Windows.Forms.Menu)">
      <summary>
        <para> Sets the specified menu visible
      on the form.</para>
      </summary>
      <param name="menu">The <see cref="T:System.Windows.Forms.Menu" /> to render.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.IMenuEditorService.SetSelection(System.Windows.Forms.MenuItem)">
      <summary>
        <para>Sets the selected menu item of the current menu.</para>
      </summary>
      <param name="item">A <see cref="T:System.Windows.Forms.MenuItem" /> to set as the currently selected menu item.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.IMenuEditorService.MessageFilter(System.Windows.Forms.Message@)">
      <summary>
        <para>Allows the editor service to intercept Win32 messages.</para>
      </summary>
      <param name="m">The <see cref="T:System.Windows.Forms.Message" /> to process.</param>
      <returns>
        <para>
          <see langword="true" /> if the message is for the control; otherwise,
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.IMouseHandler.OnMouseDoubleClick(System.ComponentModel.IComponent)">
      <summary>
        <para>This is called when the user double clicks on a component. The typical 
       behavior is to create an event handler for the component's default event and
       navigate to the handler.</para>
      </summary>
      <param name="component">The component that recieved the double click.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.IMouseHandler.OnMouseDown(System.ComponentModel.IComponent,System.Windows.Forms.MouseButtons,System.Int32,System.Int32)">
      <summary>
     This is called when a mouse button is depressed.  This will perform
     the default drag action for the selected components,  which is to
     move those components around by the mouse.
 </summary>
      <param name="component">
     The compnent that the mouse was over when the user
     pressed the button down.
 </param>
      <param name="button">
     The button that was pressed.
 </param>
      <param name="x">
     The location of the mouse, in screen coordinates.
 </param>
      <param name="y">
     The location of the mouse, in screen coordinates.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.IMouseHandler.OnMouseHover(System.ComponentModel.IComponent)">
      <summary>
     This is called when the mouse momentarially hovers over the
     view for the given component.
 </summary>
      <param name="component">
     The component the mouse is hovering over.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.IMouseHandler.OnMouseMove(System.ComponentModel.IComponent,System.Int32,System.Int32)">
      <summary>
     This is called for each movement of the mouse.
 </summary>
      <param name="component">
     The component the mouse is over.
 </param>
      <param name="x">
     The location of the mouse, in screen coordinates.
 </param>
      <param name="y">
     The location of the mouse, in screen coordinates.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.IMouseHandler.OnMouseUp(System.ComponentModel.IComponent,System.Windows.Forms.MouseButtons)">
      <summary>
     This is called when the user releases the mouse from a component.
     This will update the UI to reflect the release of the mouse.

 </summary>
      <param name="component">
     The component that recieved the click.
 </param>
      <param name="button">
     The button that has been released.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.IMouseHandler.OnSetCursor(System.ComponentModel.IComponent)">
      <summary>
     This is called when the cursor for the given component should be updated.
     The mouse is always over the given component's view when this is called.
 </summary>
      <param name="component">
     The component to update the cursor for.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.InheritanceUI.AddInheritedControl(System.Windows.Forms.Control,System.ComponentModel.InheritanceLevel)">
    </member>
    <member name="M:System.Windows.Forms.Design.InheritanceUI.RemoveInheritedControl(System.Windows.Forms.Control)">
    </member>
    <member name="P:System.Windows.Forms.Design.InheritanceUI.InheritanceGlyph">
    </member>
    <member name="P:System.Windows.Forms.Design.InheritanceUI.InheritanceGlyphRectangle">
    </member>
    <member name="M:System.Windows.Forms.Design.ISelectionUIService.AssignSelectionUIHandler(System.Object,System.Windows.Forms.Design.ISelectionUIHandler)">
      <summary>
     Assigns a selection UI handler to a given component.  The handler will be
     called when the UI service needs information about the component.  A single
     selection UI handler can be assigned to multiple components.

     When multiple components are dragged, only a single handler may control the
     drag.  Because of this, only components that are assigned the same handler
     as the primary selection are included in drag operations.

     A selection UI handler is automatically unassigned when the component is removed
     from the container or disposed.

 </summary>
      <param name="component">
     The component that this handler is in control of.  A handler may
     control multiple components.
 </param>
      <param name="handler">
     The selection UI handler to assign.

 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ISelectionUIService.BeginDrag(System.Windows.Forms.Design.SelectionRules,System.Int32,System.Int32)">
      <summary>
     This can be called by an outside party to begin a drag of the currently selected
     set of components.  At least one designer must have added a UI handler or
     else this method will always return false.

 </summary>
      <param name="rules">
     A set of selection rules that define what type of a drag you're
     interested in.  This will be used to mask off components that
     don't have the capabilities that you want.  The default ruleset
     is zero.

 </param>
      <param name="initialX">
     Starting X position, in screen coordinates, of the drag
 </param>
      <param name="initialY">
     Starting X position, in screen coordinates, of the drag
 </param>
      <returns>
     true if the selection service will allow the drag to proceed.
 </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ISelectionUIService.DragMoved(System.Drawing.Rectangle)">
      <summary>
     Called by an outside party to update drag information.  This can only be called
     after a successful call to beginDrag.

 </summary>
      <param name="offset">
     The offset in size and location of the new components.  The
     selection service may filter this offset to conform to limitations
     on the currently selected components.

 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ISelectionUIService.EndDrag(System.Boolean)">
      <summary>
     Called by an outside party to finish a drag operation.  This can only be called
     after a successful call to beginDrag.

 </summary>
      <param name="cancel">
     true if the caller now wishes to cancel the drag, or false
     to carry it out.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ISelectionUIService.FilterSelection(System.Object[],System.Windows.Forms.Design.SelectionRules)">
      <summary>
     Filters the set of selected components.  The selection service will retrieve all
     components that are currently selected.  This method allows you to filter this
     set down to components that match your criteria.  The selectionRules parameter
     must contain one or more flags from the SelectionRules class.  These flags
     allow you to constrain the set of selected objects to visible, movable,
     sizeable or all objects.

 </summary>
      <param name="components">
     The array of components to filter.
 </param>
      <param name="selectionRules">
     One or more flags from the SelectionRules class.
     Selection rules can be used to define one or more
     constraints on the selection set that is returned.
     If this parameter is zero, all selected components
     are returned.
 </param>
      <returns>
     the filtered set of components.
 </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ISelectionUIService.GetAdornmentDimensions(System.Windows.Forms.Design.AdornmentType)">
      <summary>
     Retrieves the width and height of a selection border grab handle.
     Designers may need this to properly position their user interfaces.

 </summary>
      <param name="adornmentType">
     Adorment type to get dimensions for.

 </param>
      <returns>
     a Size containing the width and height of a selection grab
     handle.
 </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ISelectionUIService.GetAdornmentHitTest(System.Object,System.Drawing.Point)">
      <summary>
     Tests to determine if the given screen coordinate is over an adornment
     for the specified component. This will only return true if the
     adornment, and selection UI, is visible.
 </summary>
      <param name="component">
     Component to test
 </param>
      <param name="pt">
     point, in screen coordinates, to test
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ISelectionUIService.GetContainerSelected(System.Object)">
      <summary>
        <para>Gets a value indicating whether the specified component is the currently selected container.</para>
      </summary>
      <param name="component">The component to test.</param>
      <returns>
        <para>
          <see langword="true" /> if the component is part of the user's current container selection; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ISelectionUIService.GetSelectionRules(System.Object)">
      <summary>
     Retrieves a set of flags that define rules for the selection.  Selection
     rules indicate if the given component can be moved or sized, for example.

 </summary>
      <param name="component">
     The component to inquire about.  An exception will be thrown
     if this compnent is not currently selected.

 </param>
      <returns>
     a series of flags from the SelectionRules class.

 </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ISelectionUIService.GetSelectionStyle(System.Object)">
      <summary>
     Allows you to configure the style of the selection frame that a
     component uses.  This is useful if your component supports different
     modes of operation (such as an in-place editing mode and a static
     design mode).  Where possible, you should leave the selection style
     as is and use the design-time hit testing feature of the IDesigner
     interface to provide features at design time.  The value of style
     must be one of the  SelectionStyle enum values.

     The selection style is only valid for the duration that the component is
     selected.

 </summary>
      <param name="component">
     The component to set the selection style for.

 </param>
      <returns>
     the selection style.  If the given component is not selected this
     will throw an exception.
 </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ISelectionUIService.SetContainerSelected(System.Object,System.Boolean)">
      <summary>
        <para>Changes the container selection status of the specified component.</para>
      </summary>
      <param name="component">The component to modify the container selection status of.</param>
      <param name="selected">
        <see langword="true" /> to set the component to become the selected container; <see langword="false" /> to be unselected.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ISelectionUIService.SetSelectionStyle(System.Object,System.Windows.Forms.Design.SelectionStyles)">
      <summary>
     Allows you to configure the style of the selection frame that a
     component uses.  This is useful if your component supports different
     modes of operation (such as an in-place editing mode and a static
     design mode).  Where possible, you should leave the selection style
     as is and use the design-time hit testing feature of the IDesigner
     interface to provide features at design time.  The value of style
     must be one of the  SelectionStyle enum values.

     The selection style is only valid for the duration that the component is
     selected.

 </summary>
      <param name="component">
     The component to set the selection style for.
 </param>
      <param name="style">
     The style to set it to.

 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.ISelectionUIService.SyncSelection">
      <summary>
     This should be called when a component has been moved, sized or re-parented,
     but the change was not the result of a property change.  All property
     changes are monitored by the selection UI service, so this is automatic most
     of the time.  There are times, however, when a component may be moved without
     a property change notification occurring.  Scrolling an auto scroll Win32
     form is an example of this.

     This method simply re-queries all currently selected components for their
     bounds and udpates the selection handles for any that have changed.
 </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ISelectionUIService.SyncComponent(System.Object)">
      <summary>
     This should be called when a component's property changed, that the designer
     thinks should result in a selection UI change.

     This method simply re-queries all currently selected components for their
     bounds and udpates the selection handles for any that have changed.
 </summary>
    </member>
    <member name="P:System.Windows.Forms.Design.ISelectionUIService.Visible">
      <summary>
     Determines if the selection UI is shown or not.

 </summary>
      <returns>
     true if the UI is being displayed, or false
     if it is currently invisible.
 </returns>
    </member>
    <member name="E:System.Windows.Forms.Design.ISelectionUIService.ContainerSelectorActive">
      <summary>
     Adds an event handler to the ContainerSelectorActive event.
     This event is fired whenever the user interacts with the container
     selector in a manor that would indicate that the selector should
     continued to be displayed. Since the container selector normally
     will vanish after a timeout, designers should listen to this event
     and reset the timeout when this event occurs.
 </summary>
    </member>
    <member name="P:System.Windows.Forms.Design.ISelectionUIService.Dragging">
      <summary>
     This can be used to determine if the user is in the middle of a drag operation.
 </summary>
      <returns>
     true if the user is currently dragging components around.
 </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.LabelDesigner.Dispose(System.Boolean)">
    </member>
    <member name="M:System.Windows.Forms.Design.LabelDesigner.Initialize(System.ComponentModel.IComponent)">
    </member>
    <member name="P:System.Windows.Forms.Design.LabelDesigner.SelectionRules">
    </member>
    <member name="M:System.Windows.Forms.Design.LinkAreaEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>
        <para>Edits the given object value using the editor style 
       provided by <see cref="M:System.Windows.Forms.Design.LinkAreaEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)" />.</para>
      </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.</param>
      <param name="provider">A service provider object through which editing services may be obtained.</param>
      <param name="value">An instance of the value being edited.</param>
      <returns>
        <para>The new value of the object. If the value of the object hasn't
       changed, this should return the same object it was passed.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.LinkAreaEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <para>Gets the <see cref="T:System.Drawing.Design.UITypeEditorEditStyle" /> of the <see cref="M:System.Windows.Forms.Design.LinkAreaEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)" /> method.</para>
      </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.</param>
      <returns>
        <para>One of the <see cref="T:System.Drawing.Design.UITypeEditorEditStyle" /> values indicating the provided editing 
    style. If the method is not supported, this will return
 <see langword="None" />.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ListBoxDesigner.Dispose(System.Boolean)">
      <summary>
        <para>Disposes of the resources (other than memory) used by 
       the <see cref="T:System.Windows.Forms.Design.ListBoxDesigner" />.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ListBoxDesigner.Initialize(System.ComponentModel.IComponent)">
      <summary>
        <para>Initializes the designer with the specified component.</para>
      </summary>
      <param name="component">The component to associate this designer with. This must always be an instance of Control.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ListBoxDesigner.OnCreateHandle">
      <summary>
        <para> Handles the CreateHandle event.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.StringCollectionEditor.CreateCollectionForm">
      <summary>
        <para> Creates a
       new form to show the current collection.</para>
      </summary>
      <returns>
        <para>An instance of CollectionForm to provide as the user interface for
       editing the collection.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.StringCollectionEditor.StringCollectionForm.#ctor(System.ComponentModel.Design.CollectionEditor)">
      <summary>
     Constructs a StringCollectionForm.
 </summary>
    </member>
    <member name="P:System.Windows.Forms.Design.StringCollectionEditor.StringCollectionForm.HelpTopic">
    </member>
    <member name="M:System.Windows.Forms.Design.ListViewDesigner.GetHitTest(System.Drawing.Point)">
      <summary>
        <para>Indicates whether the specified point was within the bounds of the component.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the specified point should be considered
    "active"; <see langword="false" /> if it is not something the user can
    interact with.</para>
      </returns>
    </member>
    <member name="P:System.Windows.Forms.Design.ListViewDesigner.AssociatedComponents">
    </member>
    <member name="T:System.Windows.Forms.Design.MenuCommands">
      <summary>
        <para> Defines a set of <see cref="T:System.ComponentModel.Design.CommandID" /> fields that each correspond to
   a
   command function provided by the host environment.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.SelectionMenu">
      <summary>
        <para>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access 
   the selection menu.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.ContainerMenu">
      <summary>
        <para>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the container menu.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.TraySelectionMenu">
      <summary>
        <para>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access 
   the tray selection menu.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.ComponentTrayMenu">
      <summary>
        <para>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the component tray menu.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.DesignerProperties">
      <summary>
        <para>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access 
   the properties page for the designer.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeyCancel">
      <summary>
        <para>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access 
   the cancel key handler.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeyReverseCancel">
      <summary>
        <para>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access 
   the key reverse cancel handler.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeyDefaultAction">
      <summary>
        <para>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access 
   the default key handler.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeyMoveUp">
      <summary>
        <para>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access 
   the key move up handler.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeyMoveDown">
      <summary>
        <para>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access 
   the key move down handler.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeyMoveLeft">
      <summary>
        <para>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access 
   the key move left handler.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeyMoveRight">
      <summary>
        <para>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access 
   the key move right handler.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeyNudgeUp">
      <summary>
        <para>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to 
   access the key nudge up handler.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeyNudgeDown">
      <summary>
        <para>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access 
   the key nudge down handler.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeyNudgeLeft">
      <summary>
        <para>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access 
   the key nudge left handler.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeyNudgeRight">
      <summary>
        <para>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access 
   the key nudge right handler.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeySizeWidthIncrease">
      <summary>
        <para>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access 
   the key size width increase handler.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeySizeHeightIncrease">
      <summary>
        <para>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access 
   the key size height increase handler.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeySizeWidthDecrease">
      <summary>
        <para>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access 
   the key size width decrease handler.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeySizeHeightDecrease">
      <summary>
        <para>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access 
   the key size height decrease handler.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeyNudgeWidthIncrease">
      <summary>
        <para>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access 
   the key nudge width increase handler.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeyNudgeHeightIncrease">
      <summary>
        <para>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access 
   the key nudge height increase handler.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeyNudgeWidthDecrease">
      <summary>
        <para>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access 
   the key nudge width decrease handler.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeyNudgeHeightDecrease">
      <summary>
        <para>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access 
   the key nudge height decrease handler.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeySelectNext">
      <summary>
        <para>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access 
   the key select next handler.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeySelectPrevious">
      <summary>
        <para>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access 
   the key select previous handler.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeyTabOrderSelect">
      <summary>
        <para>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access 
   the key tab order select handler.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.Design.MonthCalendarDesigner.SelectionRules">
    </member>
    <member name="M:System.Windows.Forms.Design.PanelDesigner.OnPaintAdornments(System.Windows.Forms.PaintEventArgs)">
      <summary>
        <para>Overrides the OnPaintAdornments method of the base class.</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.PictureBoxDesigner.Dispose(System.Boolean)">
    </member>
    <member name="M:System.Windows.Forms.Design.PictureBoxDesigner.Initialize(System.ComponentModel.IComponent)">
    </member>
    <member name="P:System.Windows.Forms.Design.PictureBoxDesigner.SelectionRules">
    </member>
    <member name="M:System.Windows.Forms.Design.PropertyGridDesigner.PreFilterProperties(System.Collections.IDictionary)">
      <summary>
        <para>Adjusts the set of properties the component exposes
      through a <see cref="T:System.ComponentModel.TypeDescriptor" />
      .</para>
      </summary>
      <param name="properties">An <see cref="T:System.Collections.IDictionary" /> containing the properties for the class of the component. </param>
    </member>
    <member name="M:System.Windows.Forms.Design.RichTextBoxDesigner.OnSetComponentDefaults">
      <summary>
        <para>Handles the SetComponentDefaults event.</para>
      </summary>
    </member>
    <member name="T:System.Windows.Forms.Design.SelectionRules">
      <summary>
        <para> Defines identifiers
      that are used to indicate selection rules for a component.
      </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.SelectionRules.None">
      <summary>
        <para>
       Indicates
       no special selection attributes.
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.SelectionRules.Moveable">
      <summary>
        <para> 
      Indicates the component supports a location property that
      allows it to be moved on the screen.
      </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.SelectionRules.Visible">
      <summary>
        <para> Indicates the component has some form of visible user
      interface and the selection service is drawing a selection border around
      this user interface. If a selected component has this rule set, you can assume
      that the component implements <see cref="T:System.ComponentModel.IComponent" />
      and that it
      is associated with a corresponding designer instance.
      </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.SelectionRules.Locked">
      <summary>
        <para> Indicates the component is locked to its container. 
      Overrides the <see cref="F:System.Windows.Forms.Design.SelectionRules.Moveable" />, <see cref="F:System.Windows.Forms.Design.SelectionRules.AllSizeable" />, <see cref="F:System.Windows.Forms.Design.SelectionRules.BottomSizeable" />, <see cref="F:System.Windows.Forms.Design.SelectionRules.LeftSizeable" />, <see cref="F:System.Windows.Forms.Design.SelectionRules.RightSizeable" />, and <see cref="F:System.Windows.Forms.Design.SelectionRules.TopSizeable" />
      
      bit flags of this enumeration.
      </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.SelectionRules.TopSizeable">
      <summary>
   Indicates the component supports resize from the top.
</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.SelectionRules.BottomSizeable">
      <summary>
        <para>Indicates the component supports resize from the bottom.</para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.SelectionRules.LeftSizeable">
      <summary>
        <para> 
      Indicates the component supports
      resize from the left.
      </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.SelectionRules.RightSizeable">
      <summary>
        <para> 
      Indicates the component supports
      resize from the right.
      </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.SelectionRules.AllSizeable">
      <summary>
        <para> 
      Indicates the component supports sizing in all directions.
      </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.SelectionStyles.None">
      <summary>
     The component is not currently selected.
 </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.SelectionStyles.Selected">
      <summary>
        <para>
       A component is selected and may be dragged around the
    </para>
      </summary>
    </member>
    <member name="F:System.Windows.Forms.Design.SelectionStyles.Active">
      <summary>
        <para>
       An alternative selection border,
       indicating that a component is in active editing mode and that clicking and
       dragging on the component affects the component itself, not its position
       in the designer.
       
    </para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.SelectionUIService.#ctor(System.ComponentModel.Design.IDesignerHost)">
      <summary>
     Creates a new selection manager object.  The selection manager manages all
     selection of all designers under the current form file.
 </summary>
      <param name="host">
     The IDesignerHost interface this will communicate with
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.SelectionUIService.Dispose(System.Boolean)">
      <summary>
     Disposes the entire selection UI manager.
 </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.SelectionUIService.GetTransactionName(System.Windows.Forms.Design.SelectionRules,System.Object[])">
    </member>
    <member name="M:System.Windows.Forms.Design.SelectionUIService.OnHandleCreated(System.EventArgs)">
      <summary>
     update our window region on first create.  We shouldn't do this before the handle
     is created or else we will force creation.
 </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.SelectionUIService.OnDragEnter(System.Windows.Forms.DragEventArgs)">
      <summary>
     Inheriting classes should override this method to handle this event.
     Call super.onDragEnter to send this event to any registered event listeners.
 </summary>
      <param name="devent">
     event
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.SelectionUIService.OnDragOver(System.Windows.Forms.DragEventArgs)">
      <summary>
     Inheriting classes should override this method to handle this event.
     Call super.onDragOver to send this event to any registered event listeners.
 </summary>
      <param name="devent">
     event
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.SelectionUIService.OnDragLeave(System.EventArgs)">
      <summary>
     Inheriting classes should override this method to handle this event.
     Call super.onDragLeave to send this event to any registered event listeners.
 </summary>
      <param name="e">
     event
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.SelectionUIService.OnDragDrop(System.Windows.Forms.DragEventArgs)">
      <summary>
     Inheriting classes should override this method to handle this event.
     Call super.onDragDrop to send this event to any registered event listeners.
 </summary>
      <param name="devent">
     event
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.SelectionUIService.OnDoubleClick(System.EventArgs)">
      <summary>
     Inheriting classes should override this method to handle this event.
     Call base.OnDoiubleClick to send this event to any registered event listeners.
 </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.SelectionUIService.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
      <summary>
     Overrides Control to handle our selection grab handles.
 </summary>
      <param name="me">
     The mouse event.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.SelectionUIService.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
      <summary>
     Overrides Control to handle our selection grab handles.
 </summary>
      <param name="me">
     The mouse event.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.SelectionUIService.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
      <summary>
     Overrides Control to handle our selection grab handles.
 </summary>
      <param name="me">
     The mouse event.
 </param>
    </member>
    <member name="M:System.Windows.Forms.Design.SelectionUIService.OnMove(System.EventArgs)">
      <summary>
     If the selection manager move, this indicates that the form has autoscolling
     enabled and has been scrolled.  We have to invalidate here because we may
     get moved before the rest of the components so we may draw the selection in
     the wrong spot.
 </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.SelectionUIService.OnPaint(System.Windows.Forms.PaintEventArgs)">
      <summary>
     overrides control.onPaint.  here we paint the selection handles.  The window's
     region was setup earlier.
 </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.SelectionUIService.WndProc(System.Windows.Forms.Message@)">
      <summary>
     Override of our control's WNDPROC.  We diddle with capture a bit,
     and it's important to turn this off if the capture changes.
 </summary>
    </member>
    <member name="P:System.Windows.Forms.Design.SelectionUIService.CreateParams">
      <summary>
     override of control.
 </summary>
    </member>
    <member name="P:System.Windows.Forms.Design.SelectionUIService.System#Windows#Forms#Design#ISelectionUIService#Dragging">
      <summary>
     This can be used to determine if the user is in the middle of a drag operation.
 </summary>
      <returns>
     true if the user is currently dragging components around.
 </returns>
    </member>
    <member name="P:System.Windows.Forms.Design.SelectionUIService.System#Windows#Forms#Design#ISelectionUIService#Visible">
      <summary>
     Determines if the selection UI is shown or not.

 </summary>
      <returns>
     true if the UI is being displayed, or false
     if it is currently invisible.
 </returns>
    </member>
    <member name="E:System.Windows.Forms.Design.SelectionUIService.System#Windows#Forms#Design#ISelectionUIService#ContainerSelectorActive">
      <summary>
     Adds an event handler to the ContainerSelectorActive event.
     This event is fired whenever the user interacts with the container
     selector in a manor that would indicate that the selector should
     continued to be displayed. Since the container selector normally
     will vanish after a timeout, designers should listen to this event
     and reset the timeout when this event occurs.
 </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.SelectionUIService.SelectionUIItem.#ctor(System.Windows.Forms.Design.SelectionUIService,System.Object)">
      <summary>
     constructor
 </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.SelectionUIService.SelectionUIItem.DoPaint(System.Drawing.Graphics)">
      <summary>
     paints the selection
 </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.SelectionUIService.SelectionUIItem.GetCursorAtPoint(System.Drawing.Point)">
      <summary>
     Retrieves an appropriate cursor at the given point.  If there is no appropriate
     cursor here (ie, the point lies outside the selection rectangle), then this
     will return null.
 </summary>
      <param name="pt">
     The point to check.
 </param>
      <returns>
     a Cursor object, or null.
 </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.SelectionUIService.SelectionUIItem.GetHitTest(System.Drawing.Point)">
      <summary>
     returns the hit test code of the given point.  This may be one of:
 </summary>
      <param name="pt">
     - the point to inquire about
 </param>
      <returns>
     .  A hit test code that may be one of:
     NOHIT      - the point is not within this selection
     SIZE_X     - the point can by sized in the X direction
     SIZE_Y     - the point can be sized in the Y direction
     MOVE_X     - the point can be moved in the X direction
     MOVE_Y     - the point can be moved in the Y direction
     Move and size flags may be logically OR'd together
 </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.SelectionUIService.SelectionUIItem.GetRegion">
      <summary>
     returns a region handle that defines this selection.  This is used to piece
     together a paint region for the surface that we draw our selection handles on
 </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.SelectionUIService.SelectionUIItem.GetRules">
      <summary>
     Retrieves the rules associated with this selection.
 </summary>
      <returns>
     a set of flags from SelectionRules.
 </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.SelectionUIService.SelectionUIItem.Invalidate">
      <summary>
     Invalidates the region for this selection glyph.
 </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.SelectionUIService.SelectionUIItem.PointWithinSelection(System.Drawing.Point)">
      <summary>
     Part of our hit testing logic; determines if the point is somewhere
     within our selection.
 </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.SelectionUIService.SelectionUIItem.UpdateRules">
      <summary>
     Updates our cached selection rules based on current
     handler values.
 </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.SelectionUIService.SelectionUIItem.UpdateSize">
      <summary>
     rebuilds the inner and outer rectangles based on the current
     selItem.component dimensions.  We could calcuate this every time, but that
     would be expensive for functions like getHitTest that are called a lot
     (like on every mouse move)
 </summary>
    </member>
    <member name="P:System.Windows.Forms.Design.SelectionUIService.SelectionUIItem.Style">
      <summary>
     Retrieves the style of the selection frame for this selection.
 </summary>
      <returns>
     one of the enum values from SelectionStyle
 </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.SelectionUIService.ContainerSelectionUIItem.#ctor(System.Windows.Forms.Design.SelectionUIService,System.Object)">
      <summary>
     constructor
 </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.SplitterDesigner.OnPaintAdornments(System.Windows.Forms.PaintEventArgs)">
      <summary>
        <para>Handles the PaintAdornments event. 
       Overrides the base class method.</para>
      </summary>
    </member>
    <member name="P:System.Windows.Forms.Design.StatusBarDesigner.AssociatedComponents">
      <summary>
        <para>
       Retrieves a list of assosciated components.  These are components that should be incluced in a cut or copy operation on this component.
    </para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.StringArrayEditor.CreateCollectionItemType">
      <summary>
        <para>Gets the data type this collection contains.</para>
      </summary>
      <returns>
        <para>The data type the collection is designed to contain.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.StringArrayEditor.GetItems(System.Object)">
      <summary>
        <para> Gets the items in this collection.</para>
      </summary>
      <param name="editValue">
      </param>
    </member>
    <member name="M:System.Windows.Forms.Design.StringArrayEditor.SetItems(System.Object,System.Object[])">
      <summary>
        <para> 
       Sets the items in this collection.</para>
      </summary>
      <param name="editValue">
      </param>
      <param name=" value">
      </param>
    </member>
    <member name="M:System.Windows.Forms.Design.TabControlDesigner.CanParent(System.Windows.Forms.Control)">
    </member>
    <member name="M:System.Windows.Forms.Design.TabControlDesigner.Dispose(System.Boolean)">
    </member>
    <member name="M:System.Windows.Forms.Design.TabControlDesigner.GetHitTest(System.Drawing.Point)">
    </member>
    <member name="M:System.Windows.Forms.Design.TabControlDesigner.Initialize(System.ComponentModel.IComponent)">
    </member>
    <member name="M:System.Windows.Forms.Design.TabControlDesigner.WndProc(System.Windows.Forms.Message@)">
    </member>
    <member name="P:System.Windows.Forms.Design.TabControlDesigner.Verbs">
    </member>
    <member name="M:System.Windows.Forms.Design.TabOrder.#ctor(System.ComponentModel.Design.IDesignerHost)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Windows.Forms.Design.TabOrder" /> class using
    the specified designer host.</para>
      </summary>
      <param name="host"> The designer host.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.TabOrder.Dispose(System.Boolean)">
      <summary>
        <para>Disposes of the resources (other than memory) used by 
       the <see cref="T:System.Windows.Forms.Design.TabOrder" /> .</para>
      </summary>
    </member>
    <member name="M:System.Windows.Forms.Design.TabOrder.OnMouseDoubleClick(System.ComponentModel.IComponent)">
      <summary>
        <para> Handlers the MouseDoubleClick event.</para>
      </summary>
      <param name="component">The component that recieved the double click.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.TabOrder.OnMouseDown(System.ComponentModel.IComponent,System.Windows.Forms.MouseButtons,System.Int32,System.Int32)">
      <summary>
        <para> Handles the MouseDown event using the specified mouse down coordinates.</para>
      </summary>
      <param name="component">The component that the mouse was over when the user pressed the button down.</param>
      <param name="button">The button that was pressed.</param>
      <param name="x">The location of the mouse, in screen coordinates.</param>
      <param name="y">The location of the mouse, in screen coordinates.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.TabOrder.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
      <summary>
        <para> 
       Overrides
       the OnMouseDown method
       from Control.</para>
      </summary>
      <param name="e">An EventArgs the provides data for the event.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.TabOrder.OnMouseHover(System.ComponentModel.IComponent)">
      <summary>
        <para>Handles the MouseHover event.</para>
      </summary>
      <param name="component">The component the mouse is hovering over.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.TabOrder.OnMouseMove(System.ComponentModel.IComponent,System.Int32,System.Int32)">
      <summary>
        <para> Handles the MouseMove event.</para>
      </summary>
      <param name="component">The component the mouse is over.</param>
      <param name="x">The location of the mouse, in screen coordinates.</param>
      <param name="y">The location of the mouse, in screen coordinates.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.TabOrder.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
      <summary>
        <para>Overrides the OnMouseMove method from Control.</para>
      </summary>
      <param name="e">The mouse event.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.TabOrder.OnMouseUp(System.ComponentModel.IComponent,System.Windows.Forms.MouseButtons)">
      <summary>
        <para> 
       Handles the MouseUp event.</para>
      </summary>
      <param name="component">The component that recieved the click.</param>
      <param name="button">The button that has been released.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.TabOrder.OnSetCursor(System.ComponentModel.IComponent)">
      <summary>
        <para>Handles the SetCursor event.</para>
      </summary>
      <param name="component">The component to update the cursor for.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.TabOrder.OnPaint(System.Windows.Forms.PaintEventArgs)">
      <summary>
        <para>Handles the Paint event.</para>
      </summary>
      <param name="e">An EventArgs that provides data for the event.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.TabOrder.OverrideInvoke(System.ComponentModel.Design.MenuCommand)">
      <summary>
        <para> Indicates whether to override
       the invocation of the specified command, depending on the result of
       this handler.</para>
      </summary>
      <param name="cmd">The menu command to override the invokation for.</param>
      <returns>
        <para>
          <see langword="true" /> if the handler overrode the 
    invocation of the command; otherwise, <see langword="false" />
    .</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.TabOrder.OverrideStatus(System.ComponentModel.Design.MenuCommand)">
      <summary>
        <para> Indicates whether to override the invocation of the 
       specified command, depending on the result of this handler.</para>
      </summary>
      <param name="cmd">The menu command to override the status for.</param>
      <returns>
        <para>
          <see langword="true" /> if the handler overrode the status 
    on the command; otherwise, <see langword="false" />
    .</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.TabPageDesigner.CanBeParentedTo(System.ComponentModel.Design.IDesigner)">
    </member>
    <member name="P:System.Windows.Forms.Design.TabPageDesigner.SelectionRules">
    </member>
    <member name="M:System.Windows.Forms.Design.TextBoxBaseDesigner.Dispose(System.Boolean)">
    </member>
    <member name="M:System.Windows.Forms.Design.TextBoxBaseDesigner.Initialize(System.ComponentModel.IComponent)">
    </member>
    <member name="P:System.Windows.Forms.Design.TextBoxBaseDesigner.SelectionRules">
    </member>
    <member name="P:System.Windows.Forms.Design.ToolBarDesigner.AssociatedComponents">
    </member>
    <member name="P:System.Windows.Forms.Design.ToolBarDesigner.SelectionRules">
    </member>
    <member name="P:System.Windows.Forms.Design.TrackBarDesigner.SelectionRules">
    </member>
    <member name="M:System.Windows.Forms.Design.TreeNodeCollectionEditor.CreateCollectionForm">
      <summary>
        <para> Creates a new form that can
       be used to show the current collection.</para>
      </summary>
      <returns>
        <para>An instance of CollectionForm that can be used for the user interface for
       editing the collection.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.TreeNodeCollectionEditor.TreeNodeCollectionForm.OnEditValueChanged">
      <summary>
      This is called when the value property in the CollectionForm has changed.
      In it you should update your user interface to reflect the current value.
 </summary>
    </member>
    <member name="P:System.Windows.Forms.Design.TreeNodeCollectionEditor.TreeNodeCollectionForm.HelpTopic">
    </member>
    <member name="M:System.Windows.Forms.Design.TreeViewDesigner.GetHitTest(System.Drawing.Point)">
    </member>
    <member name="P:System.Windows.Forms.Design.UpDownBaseDesigner.SelectionRules">
    </member>
    <member name="M:System.Windows.Forms.Design.UserControlDocumentDesigner.GetToolSupported(System.Drawing.Design.ToolboxItem)">
      <summary>
        <para>Indicates whether the specified tool is supported by this 
       designer.</para>
      </summary>
      <param name="tool">The tool that is to be enabled on the toolbox.</param>
      <returns>
        <para>
          <see langword="true" /> if the tool can be enabled on 
    the toolbox; <see langword="false" />
    if the document designer doesn't know how to use the tool.</para>
      </returns>
    </member>
    <member name="M:System.Windows.Forms.Design.UserControlDocumentDesigner.Initialize(System.ComponentModel.IComponent)">
      <summary>
        <para>Initializes the designer with the specified component.</para>
      </summary>
      <param name="component">The component to associate with this designer.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.UserControlDocumentDesigner.PreFilterProperties(System.Collections.IDictionary)">
    </member>
    <member name="T:System.Diagnostics.Design.LogConverter">
      <summary>
 LogConverter is the TypeConverter for the Log property on EventLog. It returns
 a list of all event logs on the system.
 </summary>
    </member>
    <member name="M:System.Diagnostics.Design.LogConverter.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Diagnostics.Design.LogConverter" /> class for the given type.
   </para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.Design.LogConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.Design.LogConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Diagnostics.Design.ProcessDesigner.PreFilterProperties(System.Collections.IDictionary)">
    </member>
    <member name="M:System.Diagnostics.Design.ProcessModuleDesigner.PreFilterProperties(System.Collections.IDictionary)">
    </member>
    <member name="M:System.Diagnostics.Design.ProcessThreadDesigner.PreFilterProperties(System.Collections.IDictionary)">
    </member>
    <member name="T:System.Web.UI.Design.ColorBuilder">
      <summary>
        <para> Starts a color editor that allows a user to select a color. </para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.ColorBuilder.BuildColor(System.ComponentModel.IComponent,System.Windows.Forms.Control,System.String)">
      <summary>
        <para>Starts a color editor to build an HTML color property value.</para>
      </summary>
      <param name="component">The <see cref="T:System.ComponentModel.IComponent" /> whose site is to be used to access design-time services. </param>
      <param name="owner">The <see cref="T:System.Web.UI.Control" /> used to parent the picker window. </param>
      <param name="initialColor">The initial color to be shown in the picker window, in a valid HTML color format. </param>
      <returns>
        <para>The color value, represented as a string in an HTML
      color format, or <see langword="null" />
      if the builder service could not be retrieved.</para>
      </returns>
    </member>
    <member name="T:System.Web.UI.Design.ControlParser">
      <summary>
        <para>Provides methods for creating a Web Server <see cref="T:System.Web.UI.Control" />
or <see cref="T:System.Web.UI.ITemplate" /> from a string of aspx code representing a
persisted control or template.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.ControlParser.ParseControl(System.ComponentModel.Design.IDesignerHost,System.String)">
      <summary>
        <para> Creates a control from the specified persisted control code,
      using the specified designer host.</para>
      </summary>
      <param name="designerHost">An <see cref="T:System.ComponentModel.Design.IDesignerHost" /> that is the designer host for the document.</param>
      <param name=" controlText">The text of the code for the control.</param>
      <returns>
        <para>The <see cref="T:System.Web.UI.Control" /> that the specified text represents, or <see langword="null" /> if the parser could not build
   the control. </para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.ControlParser.ParseControl(System.ComponentModel.Design.IDesignerHost,System.String,System.String)">
      <summary>
        <para>Creates a control from the specified persisted control code, using the
      specified designer host and directives.</para>
      </summary>
      <param name="designerHost">An <see cref="T:System.ComponentModel.Design.IDesignerHost" /> that is the designer host for the document.</param>
      <param name=" controlText">The text of the code for the control.</param>
      <param name=" directives">The directives to include in the code for the control.</param>
      <returns>
        <para>The <see cref="T:System.Web.UI.Control" />
that the specified text represents. </para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.ControlParser.ParseTemplate(System.ComponentModel.Design.IDesignerHost,System.String)">
      <summary>
        <para>Creates an <see cref="T:System.Web.UI.ITemplate" /> from the specified persisted template code.</para>
      </summary>
      <param name="designerHost">An <see cref="T:System.ComponentModel.Design.IDesignerHost" /> that is the designer host for the document.</param>
      <param name=" templateText">A string that represents a persisted template. </param>
      <returns>
        <para>An <see cref="T:System.Web.UI.ITemplate" /> created by parsing the specified persisted
   template code.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.ControlParser.ParseTemplate(System.ComponentModel.Design.IDesignerHost,System.String,System.String)">
      <summary>
        <para>Parses the specified persisted template code and creates an <see cref="T:System.Web.UI.ITemplate" />.</para>
      </summary>
      <param name="designerHost">An <see cref="T:System.ComponentModel.Design.IDesignerHost" /> that is the designer host for the document.</param>
      <param name=" templateText">A string that represents a persisted template.</param>
      <param name=" directives">Any directives to add to the beginning of the code for the template.</param>
      <returns>
        <para> An <see cref="T:System.Web.UI.ITemplate" />
created
by parsing the specified persisted template code.</para>
      </returns>
    </member>
    <member name="T:System.Web.UI.Design.DataBindingCollectionConverter">
      <summary>
        <para> Provides a type converter
      for <see cref="T:System.Web.UI.DataBindingCollection" /> objects.
      </para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.DataBindingCollectionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
        <para>Converts a data binding collection to the specified type.</para>
      </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that indicates the component or control the data binding collection belongs to.</param>
      <param name=" culture">A <see cref="T:System.Globalization.CultureInfo" /> that can be used to provide additional culture information.</param>
      <param name=" value">The object to convert.</param>
      <param name=" destinationType">The type to convert to.</param>
      <returns>
        <para>The object produced by the type conversion. If the
   <paramref name="destinationType" /> parameter is of type string, this method returns an empty string.</para>
      </returns>
    </member>
    <member name="T:System.Web.UI.Design.DataBindingCollectionEditor">
      <summary>
        <para>Provides a user interface for editing a collection of data bindings.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.DataBindingCollectionEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>
        <para> Edits the value of the specified data-binding collection using the specified service provider and context.
      </para>
      </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that identifies the component or control the collection belongs to. </param>
      <param name=" provider">The <see cref="T:System.IServiceProvider" /> to use. </param>
      <param name=" value">The collection to edit. </param>
      <returns>
        <para> The new collection.
      </para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.DataBindingCollectionEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <para> Gets the editor style used by the <see cref="M:System.Web.UI.Design.DataBindingCollectionEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)" /> method.
   </para>
      </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that identifies the component or control to retrieve the edit style for. </param>
      <returns>
        <para> A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle" /> that specifies the editor edit style of the component or control.
   </para>
      </returns>
    </member>
    <member name="T:System.Web.UI.Design.DataBindingHandler">
      <summary>
        <para> Provides a base class for a data-binding handler.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.DataBindingHandler.DataBindControl(System.ComponentModel.Design.IDesignerHost,System.Web.UI.Control)">
      <summary>
        <para> Data binds the specified control.</para>
      </summary>
      <param name="designerHost">The <see cref="T:System.ComponentModel.Design.IDesignerHost" /> for the document.</param>
      <param name=" control">The <see cref="T:System.Web.UI.Control" /> to data bind.</param>
    </member>
    <member name="M:System.Web.UI.Design.DataBindingValueUIHandler.OnGetUIValueItem(System.ComponentModel.ITypeDescriptorContext,System.ComponentModel.PropertyDescriptor,System.Collections.ArrayList)">
      <summary>
        <para> Adds a data binding for the specified property and the specified value item
      list if the current control has data bindings and the current object does not already
      have a binding.</para>
      </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> object that can provide additional context information.</param>
      <param name=" propDesc">A <see cref="T:System.ComponentModel.PropertyDescriptor" /> that represents the property to add a data binding for. </param>
      <param name=" valueUIItemList">An <see cref="T:System.Collections.ArrayList" /> of items that have data bindings.</param>
    </member>
    <member name="T:System.Web.UI.Design.DataFieldConverter">
      <summary>
        <para> Provides a type converter that can retrieve a list of data
      fields from the current component's selected data source.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.DataFieldConverter.#ctor">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Web.UI.Design.DataFieldConverter" /> class.
 </para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.DataFieldConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
        <para> Gets a value
      indicating whether the converter can convert an object of the specified source type to the native type
      of the converter.
      </para>
      </summary>
      <param name="context">
        <para>An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information. </para>
      </param>
      <param name="sourceType">A <see cref="T:System.Type" /> that represents the type you wish to convert from. </param>
      <returns>
        <para>
          <see langword="true " />if the converter can perform the conversion; otherwise,
<see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.DataFieldConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
        <para>Converts the specified object to the native type of the converter.</para>
      </summary>
      <param name="context">
        <para>An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information. </para>
      </param>
      <param name=" culture">A <see cref="T:System.Globalization.CultureInfo" /> that can be used to support localization features.</param>
      <param name="value">The <see cref="T:System.Object" /> to convert.</param>
      <returns>
        <para>An <see cref="T:System.Object" /> that represents
   the specified
   object after conversion.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.DataFieldConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <para> Gets the data fields present within the selected data source if information about them is available.
      </para>
      </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> indicating the component or control to get values for. </param>
      <returns>
        <para> A <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />
listing the standard accessible data sources.</para>
        <para>A <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />
listing the data fields from the
data source selected for the component. This method uses the <see cref="T:System.Web.UI.Design.IDataSourceProvider" /> implementation on the component's designer
to retrieve the selected data source.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.DataFieldConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <para> Gets a value indicating whether the collection of standard values returned from
   <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />
   is a list of all possible values.
   </para>
      </summary>
      <param name="context">
        <para>An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information. </para>
      </param>
      <returns>
        <para>
          <see langword="true " />if the
<see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />
returned from <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> is an all exclusive list of all
possible values; <see langword="false " />if other values are possible. </para>
        <para>As implemented in this class, this method always returns
<see langword="false" /> .</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.DataFieldConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <para> Gets a value indicating whether the converter supports a standard set of values
 that can be picked from a list.
 </para>
      </summary>
      <param name="context">
        <para>An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.</para>
      </param>
      <returns>
        <para>
          <see langword="true" /> if <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> can be
 called to find a common set of values the object supports; otherwise,
<see langword="false" />.
 </para>
      </returns>
    </member>
    <member name="T:System.Web.UI.Design.DataMemberConverter">
      <summary>
        <para> Provides a type converter that can retrieve a
      list of data members from the current component's selected data
      source.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.DataMemberConverter.#ctor">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Web.UI.Design.DataFieldConverter" /> class.
 </para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.DataMemberConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
        <para> Gets a value indicating
      whether the converter can convert an object of the specified source type to the native type
      of the converter.
      </para>
      </summary>
      <param name="context">
        <para>An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information. </para>
      </param>
      <param name="sourceType">A <see cref="T:System.Type" /> that represents the type you wish to convert from. </param>
      <returns>
        <para>
          <see langword="true " />if the converter can perform the conversion; otherwise,
<see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.DataMemberConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
        <para>Converts the specified object to the native type of the converter.</para>
      </summary>
      <param name="context">
        <para>An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information. </para>
      </param>
      <param name=" culture">A <see cref="T:System.Globalization.CultureInfo" /> that can be used to support localization features.</param>
      <param name="value">The <see cref="T:System.Object" /> to convert.</param>
      <returns>
        <para>An <see cref="T:System.Object" /> that represents the specified
   object after conversion.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.DataMemberConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <para> Gets the data members present within the selected data source, if information about them is available.
      </para>
      </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> indicating the component or control to get values for. </param>
      <returns>
        <para> A <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />
listing the data members of the data source selected for the component. The
converter uses the <see cref="T:System.Web.UI.Design.IDataSourceProvider" /> implementation of the
associated component's designer to
retrieve the current data source selection.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.DataMemberConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <para> Gets a value indicating whether the collection of standard values returned from
   <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />
   is a list of all possible values.
   </para>
      </summary>
      <param name="context">
        <para>An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </para>
      </param>
      <returns>
        <para>
          <see langword="true " />if the
<see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />
returned from <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> is an exclusive list of
possible values; <see langword="false " />if other values are
possible.</para>
        <para> As implemented in this class, this method always returns
<see langword="false" /> .</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.DataMemberConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <para> Gets a value indicating whether the converter supports a standard set of values
      that can be picked from a list.
      </para>
      </summary>
      <param name="context">
        <para>An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information. </para>
      </param>
      <returns>
        <para>
          <see langword="true" /> if <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> should be
   called to find a common set of values the object supports; otherwise,
<see langword="false" />. This implementation always returns 
<see langword="true" />.
   </para>
      </returns>
    </member>
    <member name="T:System.Web.UI.Design.DataSourceConverter">
      <summary>
        <para> Provides a type
      converter that can retrieve a list of data sources accessible to the current
      component.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.DataSourceConverter.#ctor">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Web.UI.Design.DataSourceConverter" /> class.
 </para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.DataSourceConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
        <para> Gets a value
      indicating whether the converter can convert an object of the specified source type to the native type
      of the converter.
      </para>
      </summary>
      <param name="context">
        <para>An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information. </para>
      </param>
      <param name="sourceType">A <see cref="T:System.Type" /> that represents the type you wish to convert from. </param>
      <returns>
        <para>
          <see langword="true " />if the converter can perform the conversion; otherwise,
<see langword="false" />.
   </para>
        <para> As implemented in this class, this method
   always returns <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.DataSourceConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
        <para> Converts the specified object to the native type of the converter.
      </para>
      </summary>
      <param name="context">
        <para>An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information. </para>
      </param>
      <param name="culture">
        <para>The <see cref="T:System.Globalization.CultureInfo" /> that can be used to support localization features.</para>
      </param>
      <param name="value">The <see cref="T:System.Object" /> to convert. </param>
      <returns>
        <para> An <see cref="T:System.Object" /> that represents
   the specified object after conversion.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.DataSourceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <para> Gets the standard data sources accessible to the control.
      </para>
      </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> indicating the component or control to get values for. </param>
      <returns>
        <para> A <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />
listing the standard accessible data sources.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.DataSourceConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <para> Gets a value indicating whether the collection of standard values returned from
   <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />
   is a list of all possible values.
   </para>
      </summary>
      <param name="context">
        <para>An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information. </para>
      </param>
      <returns>
        <para>
          <see langword="true " />if the
<see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />
returned from <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> is an exclusive list of all
possible values; <see langword="false " />if other values
are possible.</para>
        <para> As implemented in this class, this method always returns
<see langword="false" /> .</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.DataSourceConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <para> Gets a value indicating whether the converter supports a standard set of values
      that can be picked from a list.
      </para>
      </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.</param>
      <returns>
        <para>
          <see langword="true" /> if <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> should be
   called to find a common set of values the object supports; otherwise,
<see langword="false" />. This implementation always 
   returns <see langword="true" />.
   </para>
      </returns>
    </member>
    <member name="T:System.Web.UI.Design.DesignTimeData">
      <summary>
        <para> Provides helper methods that can be used by control designers to generate sample data for
      data bound properties at design time.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.DesignTimeData.CreateDummyDataTable">
      <summary>
        <para>Creates a datatable that contains sample data.</para>
      </summary>
      <returns>
        <para>A new <see cref="T:System.Data.DataTable" /> that contains 3 columns. These columns can contain data of type string.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.DesignTimeData.CreateSampleDataTable(System.Collections.IEnumerable)">
      <summary>
        <para>Creates a sample datatable with the same schema as the specified data source.</para>
      </summary>
      <param name="referenceData">A data source with the schema to use as the format for the sample datatable. </param>
      <returns>
        <para>A <see cref="T:System.Data.DataTable" /> that contains dummy data in the format of the specified
   data source, or a default dummy data table if the specified data source
   contained no data columns.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.DesignTimeData.GetDataFields(System.Collections.IEnumerable)">
      <summary>
        <para>Gets the data fields of the specified data source.</para>
      </summary>
      <param name="dataSource">The data source to retrieve the data fields of.</param>
      <returns>
        <para>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> that represents the data fields of
   the specified data source.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.DesignTimeData.GetDataMembers(System.Object)">
      <summary>
        <para>Gets the data members of the specified data source.</para>
      </summary>
      <param name="dataSource">The data source to retrieve the members of.</param>
      <returns>
        <para>An array of type string that represents the data members of the specified data
      source.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.DesignTimeData.GetDataMember(System.ComponentModel.IListSource,System.String)">
      <summary>
        <para>Gets the specified data member from the specified data source.</para>
      </summary>
      <param name="dataSource">An <see cref="T:System.ComponentModel.IListSource" /> that contains the data member to retrieve.</param>
      <param name=" dataMember"> The data member to retrieve.</param>
      <returns>
        <para>The specified data member from the specified data source, if it exists.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.DesignTimeData.GetDesignTimeDataSource(System.Data.DataTable,System.Int32)">
      <summary>
        <para> Adds sample rows to the specified data table and returns the updated table.</para>
      </summary>
      <param name="dataTable">The <see cref="T:System.Data.DataTable" /> that defines the shape of the data source. Sample rows are added to this table. </param>
      <param name="minimumRows">The minimum number of rows of sample data that the data source will contain. </param>
      <returns>
        <para>A live data source for use at design time.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.DesignTimeData.GetSelectedDataSource(System.ComponentModel.IComponent,System.String)">
      <summary>
        <para> Gets the specified data source.</para>
      </summary>
      <param name="component">The <see cref="T:System.ComponentModel.IComponent" /> that contains the data source.</param>
      <param name=" dataSource">The data source to retrieve.</param>
      <returns>
        <para>The data source object, or <see langword="null" />
if the data source or component's site could not be
accessed.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.DesignTimeData.GetSelectedDataSource(System.ComponentModel.IComponent,System.String,System.String)">
      <summary>
        <para> Gets the specified data member of the specified data source.</para>
      </summary>
      <param name="component">The <see cref="T:System.ComponentModel.IComponent" /> that contains the data sourced property.</param>
      <param name=" dataSource">The data source to retrieve.</param>
      <param name=" dataMember">The data member to retrieve.</param>
      <returns>
        <para>The data member, or <see langword="null" /> if the data source or component's site could not be
   accessed.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.GlobalDataBindingHandler.OnDataBind(System.Object,System.EventArgs)">
      <summary>
      </summary>
    </member>
    <member name="T:System.Web.UI.Design.HtmlControlDesigner">
      <summary>
        <para> Provides basic design-time functionality for ASP.NET server controls.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.HtmlControlDesigner.#ctor">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Web.UI.Design.HtmlControlDesigner" /> class.
 </para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.HtmlControlDesigner.Dispose(System.Boolean)">
      <summary>
        <para>Releases the unmanaged resources used by the <see cref="T:System.Web.UI.Design.HtmlControlDesigner" /> and optionally releases the managed
   resources.</para>
      </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Web.UI.Design.HtmlControlDesigner.OnBehaviorAttached">
      <summary>
        <para> Provides an opportunity to perform processing when a behavior is attached to the designer.
      </para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.HtmlControlDesigner.OnBehaviorDetaching">
      <summary>
        <para>Provides an opportunity to perform processing when a behavior
      is detached from the designer.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.HtmlControlDesigner.OnSetParent">
      <summary>
        <para> Provides an opportunity to perform when the associated control is parented.
      </para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.HtmlControlDesigner.PreFilterEvents(System.Collections.IDictionary)">
      <summary>
        <para> Modifies the set of events that the designer exposes through a <see cref="T:System.ComponentModel.TypeDescriptor" /> object. </para>
      </summary>
      <param name="events">
        <para>An <see cref="T:System.Collections.IDictionary" /> that contains the names of the events of the component to expose.</para>
      </param>
    </member>
    <member name="M:System.Web.UI.Design.HtmlControlDesigner.PreFilterProperties(System.Collections.IDictionary)">
      <summary>
        <para> Modifies the set of properties that the
      designer exposes through a <see cref="T:System.ComponentModel.TypeDescriptor" />
      object.
      </para>
      </summary>
      <param name="properties">The set of properties to filter for the component. </param>
    </member>
    <member name="M:System.Web.UI.Design.HtmlControlDesigner.OnBindingsCollectionChanged(System.String)">
      <summary>
        <para> Provides a method that can be used to indicate
      when a data binding has been changed.
      </para>
      </summary>
      <param name="propName">The name of the property that has been changed. </param>
    </member>
    <member name="P:System.Web.UI.Design.HtmlControlDesigner.Behavior">
      <summary>
        <para> Gets or sets the DHTML behavior associated with the designer instance.
      </para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Design.HtmlControlDesigner.DataBindings">
      <summary>
        <para>Gets or sets the data bindings for the current control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Design.HtmlControlDesigner.ShouldCodeSerialize">
      <summary>
        <para>Gets or sets a value indicating whether a field declaration for the control should be
      created in the code-behind file for the current design document during serialization.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.Design.HtmlIntrinsicControlDesigner">
      <summary>
        <para>Provides a base designer for all intrinsic HTML controls.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.Design.IDataSourceProvider">
      <summary>
        <para> Defines an interface that a control designer can implement to provide access to a data source.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.IDataSourceProvider.GetSelectedDataSource">
      <summary>
        <para> Gets a reference to the selected data source of this data source provider.</para>
      </summary>
      <returns>
        <para>The currently selected data source object of this data source provider.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.IDataSourceProvider.GetResolvedSelectedDataSource">
      <summary>
        <para> Gets the selected data member from the selected data source.</para>
      </summary>
      <returns>
        <para> The selected data member from the selected data source, 
      if the control allows the user to select an <see cref="T:System.ComponentModel.IListSource" /> (such as a <see cref="T:System.Data.DataSet" />) for the data source, and provides
      a DataMember property to select a particular list (or <see cref="T:System.Data.DataTable" /> )
      within the data source.</para>
      </returns>
    </member>
    <member name="T:System.Web.UI.Design.IHtmlControlDesignerBehavior">
      <summary>
        <para> Defines an interface that enables the extension of specific behaviors of an HTML control designer.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.IHtmlControlDesignerBehavior.GetAttribute(System.String,System.Boolean)">
      <summary>
        <para>Gets the specified attribute.</para>
      </summary>
      <param name="attribute">The attribute to retrieve.</param>
      <param name=" ignoreCase">
        <see langword="true" /> if the attribute syntax is case-insensitive; otherwise, <see langword="false" />.</param>
      <returns>
        <para>The attribute that was retrieved.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.IHtmlControlDesignerBehavior.RemoveAttribute(System.String,System.Boolean)">
      <summary>
        <para>Removes the specified attribute.</para>
      </summary>
      <param name="attribute">The attribute to remove.</param>
      <param name=" ignoreCase">
        <see langword="true" /> if the attribute syntax is case-insensitive; otherwise, <see langword="false" />.</param>
    </member>
    <member name="M:System.Web.UI.Design.IHtmlControlDesignerBehavior.SetAttribute(System.String,System.Object,System.Boolean)">
      <summary>
        <para>Sets the specified attribute to the specified object.</para>
      </summary>
      <param name="attribute">The attribute to set.</param>
      <param name=" value">The object on which to set the attribute.</param>
      <param name=" ignoreCase">
        <see langword="true" /> if the attribute syntax is case-insensitive; otherwise, <see langword="false" />.</param>
    </member>
    <member name="M:System.Web.UI.Design.IHtmlControlDesignerBehavior.GetStyleAttribute(System.String,System.Boolean,System.Boolean)">
      <summary>
        <para>Gets the specified style attribute.</para>
      </summary>
      <param name="attribute">The style attribute to retrieve.</param>
      <param name=" designTimeOnly">
        <see langword="true" /> if the attribute is only active at design time; otherwise,<see langword=" false" />.</param>
      <param name=" ignoreCase">
        <see langword="true" /> if the attribute syntax is case-insensitive; otherwise, <see langword="false" />.</param>
      <returns>
        <para>The style attribute that was retrieved.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.IHtmlControlDesignerBehavior.RemoveStyleAttribute(System.String,System.Boolean,System.Boolean)">
      <summary>
        <para>Removes the specified style attribute.</para>
      </summary>
      <param name="attribute">The style attribute to remove.</param>
      <param name=" designTimeOnly">
        <see langword="true" /> if the attribute is only active at design time; otherwise,<see langword=" false" />.</param>
      <param name=" ignoreCase">
        <see langword="true" /> if the attribute syntax is case-insensitive; otherwise, <see langword="false" />.</param>
    </member>
    <member name="M:System.Web.UI.Design.IHtmlControlDesignerBehavior.SetStyleAttribute(System.String,System.Boolean,System.Object,System.Boolean)">
      <summary>
        <para>Sets the specified style attribute to the specified object.</para>
      </summary>
      <param name="attribute">The attribute to set.</param>
      <param name=" designTimeOnly">
        <see langword="true" /> if the attribute is only active at design-time; otherwise,<see langword=" false" />.</param>
      <param name=" value">The object to set the attribute on.</param>
      <param name=" ignoreCase">
        <see langword="true" /> if the attribute syntax is case-insensitive; otherwise, <see langword="false" />.</param>
    </member>
    <member name="P:System.Web.UI.Design.IHtmlControlDesignerBehavior.Designer">
      <summary>
        <para>Gets or sets the designer that the behavior is associated with.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Design.IHtmlControlDesignerBehavior.DesignTimeElement">
      <summary>
        <para>Gets the element that the designer is associated with.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.Design.ImageUrlEditor">
      <summary>
        <para>Provides a user interface for selecting a
      URL to an image.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.Design.UrlEditor">
      <summary>
        <para> Provides a user interface for selecting a URL.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.UrlEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>
        <para> Edits the value of the specified object using the editor style
      provided by the <see cref="M:System.Web.UI.Design.UrlEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)" />
      method.
      </para>
      </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information. </param>
      <param name="provider">A service provider object through which editing services may be obtained. </param>
      <param name="value">An instance of the value being edited. </param>
      <returns>
        <para> The new value of the object. If the value of the object hasn't changed,
      this method should return the same object it was passed.
      </para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.UrlEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <para>Gets the editing style of the <see cref="M:System.Web.UI.Design.UrlEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)" /> method.</para>
      </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.</param>
      <returns>
        <para>One of the <see cref="T:System.Drawing.Design.UITypeEditorEditStyle" /> values
   indicating the provided editing style. If the method is not supported, this will
   return <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None" />.</para>
      </returns>
    </member>
    <member name="P:System.Web.UI.Design.UrlEditor.Caption">
      <summary>
        <para> Gets the caption to display on the selection dialog box.
      </para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Design.UrlEditor.Options">
      <summary>
        <para> Indicates the options for the URL builder to use.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Design.UrlEditor.Filter">
      <summary>
        <para>Gets the file name filter string for the editor. This is used to
      determine the items that appear in the file list of the dialog box.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Design.ImageUrlEditor.Caption">
      <summary>
        <para>Gets the caption to display on the selection dialog window.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Design.ImageUrlEditor.Filter">
      <summary>
        <para> Gets the file type filter string for the editor.
      This is used to determine the items that appear in the file list of the dialog box.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.Design.ITemplateEditingFrame">
      <summary>
        <para> Provides an interface to manage a template editing area.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.ITemplateEditingFrame.Close(System.Boolean)">
      <summary>
        <para>Closes the control and optionally saves any changes.</para>
      </summary>
      <param name="saveChanges">
        <see langword="true" /> if changes to the document should be saved; otherwise, <see langword="false" />.</param>
    </member>
    <member name="M:System.Web.UI.Design.ITemplateEditingFrame.Open">
      <summary>
        <para>Opens and displays the control.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.ITemplateEditingFrame.Resize(System.Int32,System.Int32)">
      <summary>
        <para>Resizes the control to the specified width and height.</para>
      </summary>
      <param name="width">The new width for the control.</param>
      <param name=" height">The new height for the control.</param>
    </member>
    <member name="M:System.Web.UI.Design.ITemplateEditingFrame.Save">
      <summary>
        <para>Saves any changes to the document.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.ITemplateEditingFrame.UpdateControlName(System.String)">
      <summary>
        <para>Changes the name of the control to the specified name.</para>
      </summary>
      <param name="newName">The new name for the control.</param>
    </member>
    <member name="P:System.Web.UI.Design.ITemplateEditingFrame.ControlStyle">
      <summary>
        <para> Gets the style for the editing frame.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Design.ITemplateEditingFrame.Name">
      <summary>
        <para> Gets the name of the editing frame.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Design.ITemplateEditingFrame.InitialHeight">
      <summary>
        <para>Gets or sets the initial height of the control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Design.ITemplateEditingFrame.InitialWidth">
      <summary>
        <para>Gets or sets the initial width of the control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Design.ITemplateEditingFrame.TemplateNames">
      <summary>
        <para> Gets a set of names of templates to use.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Design.ITemplateEditingFrame.TemplateStyles">
      <summary>
        <para> Gets the template styles for the control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Design.ITemplateEditingFrame.Verb">
      <summary>
        <para> Gets or sets the verb that invokes the template.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.Design.ITemplateEditingService">
      <summary>
        <para>Provides services for editing control templates at design time.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.ITemplateEditingService.CreateFrame(System.Web.UI.Design.TemplatedControlDesigner,System.String,System.String[])">
      <summary>
        <para>Creates a new template editing frame for the specified 
      templated control designer, using the specified name and templates.</para>
      </summary>
      <param name="designer">The <see cref="T:System.Web.UI.Design.TemplatedControlDesigner" /> that will use the template editing frame.</param>
      <param name=" frameName">The name of the editing frame that will be displayed on the frame. Typically this is the same as the <see cref="P:System.ComponentModel.Design.DesignerVerb.Text" /> property used as the menu text for the <see cref="T:System.Web.UI.Design.TemplateEditingVerb" /> that is invoked to create the frame.</param>
      <param name=" templateNames">An array of names for the templates that the template editing frame will contain.</param>
      <returns>
        <para>The new <see cref="T:System.Web.UI.Design.ITemplateEditingFrame" />.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.ITemplateEditingService.CreateFrame(System.Web.UI.Design.TemplatedControlDesigner,System.String,System.String[],System.Web.UI.WebControls.Style,System.Web.UI.WebControls.Style[])">
      <summary>
        <para>Creates a new template editing frame for the specified
   <see cref="T:System.Web.UI.Design.TemplatedControlDesigner" />, using the specified name, template names, control
      style, and template styles.</para>
      </summary>
      <param name="designer">The <see cref="T:System.Web.UI.Design.TemplatedControlDesigner" /> that will use the template editing frame.</param>
      <param name=" frameName">The name of the editing frame that will be displayed on the frame. Typically this is the same as the <see cref="P:System.ComponentModel.Design.DesignerVerb.Text" /> property used as the menu text for the <see cref="T:System.Web.UI.Design.TemplateEditingVerb" /> that is invoked to create the frame.</param>
      <param name=" templateNames">An array of names for the templates that the template editing frame will contain.</param>
      <param name=" controlStyle">The control <see cref="T:System.Web.UI.WebControls.Style" /> for the editing frame.</param>
      <param name=" templateStyles">An array of type <see cref="T:System.Web.UI.WebControls.Style" /> that represents the template styles for the editing frame.</param>
      <returns>
        <para>The new <see cref="T:System.Web.UI.Design.ITemplateEditingFrame" />.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.ITemplateEditingService.GetContainingTemplateName(System.Web.UI.Control)">
      <summary>
        <para>Gets the name of the parent template.</para>
      </summary>
      <param name="control">The <see cref="T:System.Web.UI.Control" /> for which to get the name of the parent template.</param>
      <returns>
        <para>The name of the parent template.</para>
      </returns>
    </member>
    <member name="P:System.Web.UI.Design.ITemplateEditingService.SupportsNestedTemplateEditing">
      <summary>
        <para>Indicates whether the service supports nested template editing.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.Design.IControlDesignerBehavior">
      <summary>
        <para> Enables the extension of specific behaviors of a control designer.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.IControlDesignerBehavior.OnTemplateModeChanged">
      <summary>
        <para>Provides an opportunity to perform processing when the 
      designer enters or exits template mode.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Design.IControlDesignerBehavior.DesignTimeElementView">
      <summary>
        <para> Gets the design-time view control object for the designer.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Design.IControlDesignerBehavior.DesignTimeHtml">
      <summary>
        <para>Gets or sets the design-time HTML for the designer's control.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.Design.IWebFormReferenceManager">
      <summary>
        <para> Provides an interface that can lookup information about
      the types used in the current Web
      Forms project.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.IWebFormReferenceManager.GetObjectType(System.String,System.String)">
      <summary>
        <para>Gets the type of the specified object.</para>
      </summary>
      <param name="tagPrefix">The tag prefix for the type.</param>
      <param name=" typeName">The name of the type.</param>
      <returns>
        <para>The <see cref="T:System.Type" /> 
of the object, if it could be resolved.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.IWebFormReferenceManager.GetTagPrefix(System.Type)">
      <summary>
        <para> Gets the tag prefix for the specified type of object.
      </para>
      </summary>
      <param name="objectType">The type of the object. </param>
      <returns>
        <para>The tag prefix for the specified object type, if it could be located.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.IWebFormReferenceManager.GetRegisterDirectives">
      <summary>
        <para> Gets the register directives for the current project.
      </para>
      </summary>
      <returns>
        <para>The register directives for the current project.</para>
      </returns>
    </member>
    <member name="T:System.Web.UI.Design.IWebFormsBuilderUIService">
      <summary>
        <para> Provides methods to start specific user interfaces for
      building properties at design-time.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.IWebFormsBuilderUIService.BuildColor(System.Windows.Forms.Control,System.String)">
      <summary>
        <para>Starts a <see cref="T:System.Web.UI.Design.ColorBuilder" /> to build a color property.</para>
      </summary>
      <param name="owner">The control used to parent the dialog shown by the <see cref="T:System.Web.UI.Design.ColorBuilder" /> .</param>
      <param name=" initialColor">The initial color for the editor to pre-select.</param>
      <returns>
        <para>The color that was selected. This value will be a 
      named color, or an RGB color expressed in HTML color format (#RRGGBB).</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.IWebFormsBuilderUIService.BuildUrl(System.Windows.Forms.Control,System.String,System.String,System.String,System.String,System.Web.UI.Design.UrlBuilderOptions)">
      <summary>
        <para>Launches an editor to build a URL property.</para>
      </summary>
      <param name="owner">The control used to parent the dialog shown by the <see cref="T:System.Web.UI.Design.UrlBuilder" /> .</param>
      <param name=" initialUrl">The initial URL to display in the selection interface.</param>
      <param name=" baseUrl"> The base URL used to construct relative URLs.</param>
      <param name=" caption">A caption that presents a message in the selection interface.</param>
      <param name=" filter">The filter string to use to optionally filter the files displayed in the selection interface.</param>
      <param name=" options">A <see cref="T:System.Web.UI.Design.UrlBuilderOptions" /> that indicates the options for the <see cref="T:System.Web.UI.Design.UrlBuilder" />.</param>
      <returns>
        <para>A string that contains the URL returned by the
   <see cref="T:System.Web.UI.Design.UrlBuilder" />. </para>
      </returns>
    </member>
    <member name="T:System.Web.UI.Design.IWebFormsDocumentService">
      <summary>
        <para>Provides methods to access services for tracking the loading state of a Web Forms
      document, handling events at load time, accessing a document's location,
      managing a document's undo service, and setting a new selection within the document.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.IWebFormsDocumentService.CreateDiscardableUndoUnit">
      <summary>
        <para>Creates a discardable undo unit.</para>
      </summary>
      <returns>
        <para>The new discardable undo unit.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.IWebFormsDocumentService.DiscardUndoUnit(System.Object)">
      <summary>
        <para>Discards the specified undo unit.</para>
      </summary>
      <param name="discardableUndoUnit">The undo unit to discard.</param>
    </member>
    <member name="M:System.Web.UI.Design.IWebFormsDocumentService.EnableUndo(System.Boolean)">
      <summary>
        <para>Enables the ability to undo actions that occur within
 undoable action units or transactions.</para>
      </summary>
      <param name="enable">
        <see langword="true" /> if actions should be undoable; otherwise, <see langword="false" />.</param>
    </member>
    <member name="M:System.Web.UI.Design.IWebFormsDocumentService.UpdateSelection">
      <summary>
        <para>When implemented in a derived class, updates the current selection.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Design.IWebFormsDocumentService.DocumentUrl">
      <summary>
        <para> Gets the URL at which the document is located.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Design.IWebFormsDocumentService.IsLoading">
      <summary>
        <para>Gets a value indicating whether the document service is currently loading.</para>
      </summary>
    </member>
    <member name="E:System.Web.UI.Design.IWebFormsDocumentService.LoadComplete">
      <summary>
        <para>Occurs when the service has finished loading.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.Design.ReadWriteControlDesigner">
      <summary>
        <para> Extends design-time behavior for read/write server controls.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.Design.ControlDesigner">
      <summary>
        <para> Provides a base class for Web server control designers.
      </para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.ControlDesigner.CreatePlaceHolderDesignTimeHtml">
      <summary>
        <para>Creates a simple HTML section for the control that can be
      used to display information related to the control at design time when there
      is not enough information to display a meaningful representation of the
      control.</para>
      </summary>
      <returns>
        <para> A string containing design-time HTML that provides basic information about the control.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.ControlDesigner.CreatePlaceHolderDesignTimeHtml(System.String)">
      <summary>
        <para>Creates a simple HTML section for the control, using the specified
      additional information, that can be used to display information related to the control at design time
      when there is not enough information to display a meaningful representation of the
      control.</para>
      </summary>
      <param name="instruction">A string containing information to add to the HTML section.</param>
      <returns>
        <para> A string containing design-time HTML that provides information about
      the control.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.ControlDesigner.GetDesignTimeHtml">
      <summary>
        <para> Gets the HTML that is used to represent the control at design time.
      </para>
      </summary>
      <returns>
        <para> The HTML that is used to represent the control at design time.
      </para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.ControlDesigner.GetEmptyDesignTimeHtml">
      <summary>
        <para> Gets the HTML that is used to represent an empty control at design time.</para>
      </summary>
      <returns>
        <para> The HTML that is used to represent an empty control at
      design time. By default, this HTML contains the name of the component.
      </para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.ControlDesigner.GetErrorDesignTimeHtml(System.Exception)">
      <summary>
        <para>Gets the HTML that provides information about the specified exception. This method is typically called after an error
      has been encountered at design time.</para>
      </summary>
      <param name="e">The exception that occurred.</param>
      <returns>
        <para> The HTML for the specified exception.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.ControlDesigner.GetPersistInnerHtml">
      <summary>
        <para> Gets the persistable inner HTML of the control.
      </para>
      </summary>
      <returns>
        <para> The persistable inner HTML of the control.
      </para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.ControlDesigner.Initialize(System.ComponentModel.IComponent)">
      <summary>
        <para> Initializes the designer and
      loads the specified component.
      </para>
      </summary>
      <param name="component">The control element being designed. </param>
    </member>
    <member name="M:System.Web.UI.Design.ControlDesigner.IsPropertyBound(System.String)">
      <summary>
        <para> Gets a value indicating whether the specified property is data-bound.
      </para>
      </summary>
      <param name="propName">The property to check for data binding. </param>
      <returns>
        <para>
          <see langword="true" /> if the property is data bound; otherwise,
<see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.ControlDesigner.OnBehaviorAttached">
      <summary>
        <para> Called when the designer is attached to the behavior.
 </para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.ControlDesigner.OnBindingsCollectionChanged(System.String)">
      <summary>
        <para> Called
      when the data bindings collection changes.
      </para>
      </summary>
      <param name="propName">The property to test for changes in its bindings collection. </param>
    </member>
    <member name="M:System.Web.UI.Design.ControlDesigner.OnComponentChanged(System.Object,System.ComponentModel.Design.ComponentChangedEventArgs)">
      <summary>
        <para> Called when the component changes.
      </para>
      </summary>
      <param name="sender"> The source of the event. </param>
      <param name="ce">A <see cref="T:System.ComponentModel.Design.ComponentChangedEventArgs" /> that contains the event data. </param>
    </member>
    <member name="M:System.Web.UI.Design.ControlDesigner.OnControlResize">
      <summary>
        <para> 
 Called when the design-time control has been resized.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.ControlDesigner.RaiseResizeEvent">
      <summary>
        <para>Raises the <see cref="M:System.Web.UI.Design.ControlDesigner.OnControlResize" /> event.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.ControlDesigner.UpdateDesignTimeHtml">
      <summary>
        <para>Refreshes the display of the control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Design.ControlDesigner.AllowResize">
      <summary>
        <para> Gets a value
      indicating whether the control can be resized.
      </para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Design.ControlDesigner.DesignTimeHtmlRequiresLoadComplete">
      <summary>
        <para> Gets a value indicating whether the designer must
      have completed loading before the design-time HTML can be used.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Design.ControlDesigner.ID">
      <summary>
        <para> Gets or sets the ID string for the control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Design.ControlDesigner.IsDirty">
      <summary>
        <para> Gets or sets a value indicating whether the Web server control has been marked as changed.
      </para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Design.ControlDesigner.ReadOnly">
      <summary>
        <para> Gets or sets a value indicating whether the properties of the control are read-only at design-time.
      </para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.ReadWriteControlDesigner.#ctor">
      <summary>
        <para>
       Initializes an instance of the <see cref="T:System.Web.UI.Design.ReadWriteControlDesigner" /> class.
    </para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.ReadWriteControlDesigner.OnComponentChanged(System.Object,System.ComponentModel.Design.ComponentChangedEventArgs)">
      <summary>
        <para>Represents the method that will handle the
   <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" /> event
      of the <see cref="T:System.ComponentModel.Design.IComponentChangeService" />.</para>
      </summary>
      <param name="sender">The object sending the event.</param>
      <param name="ce">The <see cref="T:System.ComponentModel.Design.ComponentChangedEventArgs" /> that provides data for the event.</param>
    </member>
    <member name="M:System.Web.UI.Design.ReadWriteControlDesigner.MapPropertyToStyle(System.String,System.Object)">
      <summary>
        <para>Maps a property, including description and value, to an intrinsic HTML style.</para>
      </summary>
      <param name="propName">The name of the property to map.</param>
      <param name="varPropValue">The value of the property.</param>
      <returns>
        <note type="inheritinfo">
      This method
      must be overridden in
      a derived class to implement the designer.
      
   </note>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.ReadWriteControlDesigner.OnBehaviorAttached">
      <summary>
        <para> Provides notification that is raised when a behavior is attached to
      the designer.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.Design.TemplatedControlDesigner">
      <summary>
        <para> Extends design-time behavior for template-based server controls.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.TemplatedControlDesigner.#ctor">
      <summary>
        <para>
       Initializes a new instance of the <see cref="T:System.Web.UI.Design.TemplatedControlDesigner" />
       class.
    </para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.TemplatedControlDesigner.CreateTemplateEditingFrame(System.Web.UI.Design.TemplateEditingVerb)">
      <summary>
        <para>Creates a template editing frame for the specified verb.</para>
      </summary>
      <param name="verb">The template editing verb to create a template editing frame for.</param>
      <returns>
        <para>The new template editing frame.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.TemplatedControlDesigner.EnterTemplateMode(System.Web.UI.Design.ITemplateEditingFrame)">
      <summary>
        <para> Opens a particular template frame object for editing in the designer.
 </para>
      </summary>
      <param name="newTemplateEditingFrame"> The template editing frame object to open in the designer. </param>
    </member>
    <member name="M:System.Web.UI.Design.TemplatedControlDesigner.ExitTemplateMode(System.Boolean,System.Boolean,System.Boolean)">
      <summary>
        <para> Closes the currently active template editing frame after saving any relevant changes.
      </para>
      </summary>
      <param name="fSwitchingTemplates">
        <see langword="true" /> when switching from one template editing frame to another; otherwise <see langword="false" />. </param>
      <param name="fNested">
        <see langword="true" /> if this designer is nested (one or more levels) within another control whose designer is also in template editing mode; otherwise <see langword="false" />. </param>
      <param name=" fSave">
        <see langword="true" /> if templates shold be saved on exit; otherwise, <see langword="false" />.</param>
    </member>
    <member name="M:System.Web.UI.Design.TemplatedControlDesigner.GetCachedTemplateEditingVerbs">
      <summary>
        <para>Gets the cached template editing verbs.</para>
      </summary>
      <returns>
        <para>An array of <see cref="T:System.Web.UI.Design.TemplateEditingVerb" /> objects, if any.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.TemplatedControlDesigner.GetPersistInnerHtml">
      <summary>
        <para> Gets the HTML to be persisted for the content present within the associated server control runtime.
 </para>
      </summary>
      <returns>
        <para> The persistable inner HTML.
 </para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.TemplatedControlDesigner.GetTemplateContainerDataItemProperty(System.String)">
      <summary>
        <para> Gets the data item property of the template's container.
 </para>
      </summary>
      <param name="templateName"> The name of the template. </param>
      <returns>
        <para> A string representing the data.
 </para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.TemplatedControlDesigner.GetTemplateContainerDataSource(System.String)">
      <summary>
        <para> Gets the data source of the template's container.
 </para>
      </summary>
      <param name="templateName">The name of the template. </param>
      <returns>
        <para> The data source of the container of the specified template.
 </para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.TemplatedControlDesigner.GetTemplateContent(System.Web.UI.Design.ITemplateEditingFrame,System.String,System.Boolean@)">
      <summary>
        <para> Gets the template's content.
      </para>
      </summary>
      <param name="editingFrame">The template editing frame to retrieve the content of. </param>
      <param name="templateName">The name of the template. </param>
      <param name=" allowEditing">
        <see langword="true" /> if the template's content can be edited; <see langword="false" /> if the content is read-only. </param>
      <returns>
        <para> The content of the template.
      </para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.TemplatedControlDesigner.GetTemplateEditingVerbs">
      <summary>
        <para>Gets the template editing verbs available to the designer.</para>
      </summary>
      <returns>
        <para>The template editing verbs available to the designer.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.TemplatedControlDesigner.GetTemplateFromText(System.String)">
      <summary>
        <para>Creates a template from the specified text.</para>
      </summary>
      <param name="text">The text to retrieve a template from.</param>
      <returns>
        <para>An <see cref="T:System.Web.UI.ITemplate" /> from the specified text.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.TemplatedControlDesigner.GetTemplatePropertyParentType(System.String)">
      <summary>
        <para>Gets the type of the parent of the template property.</para>
      </summary>
      <param name="templateName">The name of the template to return the type of the parent for.</param>
      <returns>
        <para>The type of the object that has the template property.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.TemplatedControlDesigner.GetTextFromTemplate(System.Web.UI.ITemplate)">
      <summary>
        <para>Gets a string of text that represents the specified template.</para>
      </summary>
      <param name="template">The <see cref="T:System.Web.UI.ITemplate" /> to convert to text.</param>
      <returns>
        <para>A string that represents the specified template.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.TemplatedControlDesigner.OnBehaviorAttached">
      <summary>
        <para> Provides an opportunity to perform additional processing when a behavior is attached to the designer.
      </para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.TemplatedControlDesigner.OnComponentChanged(System.Object,System.ComponentModel.Design.ComponentChangedEventArgs)">
      <summary>
        <para> Delegate to handle the component changed event.
 </para>
      </summary>
      <param name="sender">The object sending the event. </param>
      <param name="ce">A <see cref="T:System.ComponentModel.Design.ComponentChangedEventArgs" /> that provides data for the event. </param>
    </member>
    <member name="M:System.Web.UI.Design.TemplatedControlDesigner.OnSetParent">
      <summary>
        <para> Provides an opportunity to perform additional processing when the parent of this designer is changed.
      </para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.TemplatedControlDesigner.OnTemplateModeChanged">
      <summary>
        <para> Provides an opportunity to perform
      additional processing when the template mode is changed.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.TemplatedControlDesigner.PreFilterProperties(System.Collections.IDictionary)">
      <summary>
        <para> Allows a designer to filter the set of member attributes 
 the component it is designing will expose through a <see cref="T:System.ComponentModel.TypeDescriptor" />
 object.
 </para>
      </summary>
      <param name="properties"> The member attributes for component. </param>
      <returns>
        <para> The augmented set of attributes. If the method does not modify any attributes,
 it may just return a reference to its input parameter. If you do make a change
 to the attributes, you must create a new array.
 </para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.TemplatedControlDesigner.SaveActiveTemplateEditingFrame">
      <summary>
        <para>Saves the active template editing frame.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.TemplatedControlDesigner.SetTemplateContent(System.Web.UI.Design.ITemplateEditingFrame,System.String,System.String)">
      <summary>
        <para> Sets the specified template's content to the specified content.
 </para>
      </summary>
      <param name="editingFrame">The template editing frame to provide content for. </param>
      <param name="templateName">The name of the template. </param>
      <param name="templateContent">The content to set for the template. </param>
    </member>
    <member name="M:System.Web.UI.Design.TemplatedControlDesigner.UpdateDesignTimeHtml">
      <summary>
        <para> Updates the design-time HTML.
 </para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Design.TemplatedControlDesigner.ActiveTemplateEditingFrame">
      <summary>
        <para>Gets the active template editing frame.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Design.TemplatedControlDesigner.CanEnterTemplateMode">
      <summary>
        <para>Indicates whether or not this designer will allow the viewing or editing of templates. This property is read-only.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Design.TemplatedControlDesigner.HidePropertiesInTemplateMode">
      <summary>
        <para>Indicates whether the properties of the control
 will be hidden when the control is placed into template editing mode.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Design.TemplatedControlDesigner.InTemplateMode">
      <summary>
        <para>Indicates whether or not the designer document is in template mode.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.TemplateEditingFrame.#ctor(System.Web.UI.Design.TemplatedControlDesigner,System.String,System.String[],System.Web.UI.WebControls.Style,System.Web.UI.WebControls.Style[])">
    </member>
    <member name="M:System.Web.UI.Design.TemplateEditingFrame.Close(System.Boolean)">
    </member>
    <member name="M:System.Web.UI.Design.TemplateEditingFrame.Dispose">
    </member>
    <member name="M:System.Web.UI.Design.TemplateEditingFrame.Open">
    </member>
    <member name="M:System.Web.UI.Design.TemplateEditingFrame.Resize(System.Int32,System.Int32)">
    </member>
    <member name="M:System.Web.UI.Design.TemplateEditingFrame.Save">
    </member>
    <member name="M:System.Web.UI.Design.TemplateEditingFrame.Show">
    </member>
    <member name="M:System.Web.UI.Design.TemplateEditingFrame.UpdateControlName(System.String)">
    </member>
    <member name="P:System.Web.UI.Design.TemplateEditingFrame.ControlStyle">
    </member>
    <member name="P:System.Web.UI.Design.TemplateEditingFrame.Name">
    </member>
    <member name="P:System.Web.UI.Design.TemplateEditingFrame.InitialHeight">
    </member>
    <member name="P:System.Web.UI.Design.TemplateEditingFrame.InitialWidth">
    </member>
    <member name="P:System.Web.UI.Design.TemplateEditingFrame.TemplateNames">
    </member>
    <member name="P:System.Web.UI.Design.TemplateEditingFrame.TemplateStyles">
    </member>
    <member name="P:System.Web.UI.Design.TemplateEditingFrame.Verb">
    </member>
    <member name="M:System.Web.UI.Design.TemplateEditingService.#ctor(System.ComponentModel.Design.IDesignerHost)">
    </member>
    <member name="M:System.Web.UI.Design.TemplateEditingService.CreateFrame(System.Web.UI.Design.TemplatedControlDesigner,System.String,System.String[])">
    </member>
    <member name="M:System.Web.UI.Design.TemplateEditingService.CreateFrame(System.Web.UI.Design.TemplatedControlDesigner,System.String,System.String[],System.Web.UI.WebControls.Style,System.Web.UI.WebControls.Style[])">
    </member>
    <member name="M:System.Web.UI.Design.TemplateEditingService.Dispose">
    </member>
    <member name="M:System.Web.UI.Design.TemplateEditingService.Finalize">
    </member>
    <member name="M:System.Web.UI.Design.TemplateEditingService.GetContainingTemplateName(System.Web.UI.Control)">
    </member>
    <member name="P:System.Web.UI.Design.TemplateEditingService.SupportsNestedTemplateEditing">
    </member>
    <member name="T:System.Web.UI.Design.TemplateEditingVerb">
      <summary>
        <para>Represents a designer verb that creates a template 
 editing frame, and can only be invoked by a template editor.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.TemplateEditingVerb.#ctor(System.String,System.Int32,System.Web.UI.Design.TemplatedControlDesigner)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.Design.TemplateEditingVerb" /> class.</para>
      </summary>
      <param name="text">The text to show for the verb on a menu.</param>
      <param name=" index">An optional integer value that can be used by a designer; typically to indicate the index of the verb within a set of verbs.</param>
      <param name=" designer">The <see cref="T:System.Web.UI.Design.TemplatedControlDesigner" /> that can use this verb.</param>
    </member>
    <member name="M:System.Web.UI.Design.TemplateEditingVerb.Dispose">
      <summary>
        <para>Releases all resources used by the <see cref="T:System.Web.UI.Design.TemplateEditingVerb" /> .</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.TemplateEditingVerb.Dispose(System.Boolean)">
      <summary>
        <para>Releases the unmanaged resources used by the <see cref="T:System.Web.UI.Design.TemplateEditingVerb" /> and optionally releases the managed
 resources.</para>
      </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="P:System.Web.UI.Design.TemplateEditingVerb.Index">
      <summary>
        <para> Gets the index, or other user data, for the verb.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.Design.TextControlDesigner">
      <summary>
        <para>Extends design-time behavior for the ASP.NET <see cref="T:System.Web.UI.WebControls.Label" />
and <see cref="T:System.Web.UI.WebControls.HyperLink" /> server controls.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.TextControlDesigner.Initialize(System.ComponentModel.IComponent)">
      <summary>
        <para>Initializes the designer with the specified component.</para>
      </summary>
      <param name="component">The <see cref="T:System.ComponentModel.IComponent" /> for this designer to design.</param>
    </member>
    <member name="M:System.Web.UI.Design.TextControlDesigner.GetDesignTimeHtml">
      <summary>
        <para>Gets the HTML that is used to represent the
      associated control at design time.</para>
      </summary>
      <returns>
        <para>The HTML used to represent the control at design time.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.TextControlDesigner.GetPersistInnerHtml">
      <summary>
        <para>Gets the HTML to persist for the inner tags of the control.</para>
      </summary>
      <returns>
        <para>The HTML for the tags of the control.</para>
      </returns>
    </member>
    <member name="T:System.Web.UI.Design.TextDataBindingHandler">
      <summary>
        <para> Provides a data-binding handler for a data bound control at design-time.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.TextDataBindingHandler.DataBindControl(System.ComponentModel.Design.IDesignerHost,System.Web.UI.Control)">
      <summary>
        <para> Data binds the specified control.</para>
      </summary>
      <param name="designerHost">The <see cref="T:System.ComponentModel.Design.IDesignerHost" /> for the document that contains the control.</param>
      <param name=" control">The <see cref="T:System.Web.UI.Control" /> to data bind.</param>
    </member>
    <member name="T:System.Web.UI.Design.UrlBuilder">
      <summary>
        <para>Starts a URL editor that allows a user to select a URL.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.UrlBuilder.BuildUrl(System.ComponentModel.IComponent,System.Windows.Forms.Control,System.String,System.String,System.String)">
      <summary>
        <para> Starts a URL picker to build a URL.</para>
      </summary>
      <param name="component">The <see cref="T:System.ComponentModel.IComponent" /> whose site is to be used to access design-time services. </param>
      <param name="owner">The <see cref="T:System.Web.UI.Control" /> used to parent the picker window. </param>
      <param name="initialUrl">The initial URL to be shown in the picker window. </param>
      <param name="caption">The caption of the picker window. </param>
      <param name="filter">The filter string to use to optionally filter the files displayed in the picker window. </param>
      <returns>
        <para>The URL returned from the URL picker.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.UrlBuilder.BuildUrl(System.ComponentModel.IComponent,System.Windows.Forms.Control,System.String,System.String,System.String,System.Web.UI.Design.UrlBuilderOptions)">
      <summary>
        <para> Starts the URL picker to build a URL, using the
      specified <see cref="T:System.Web.UI.Design.UrlBuilderOptions" />.</para>
      </summary>
      <param name="component">The <see cref="T:System.ComponentModel.IComponent" /> whose site is to be used to access design-time services. </param>
      <param name=" owner">The <see cref="T:System.Web.UI.Control" /> used to parent the picker window. </param>
      <param name=" initialUrl">The initial URL to be shown in the picker window.</param>
      <param name=" caption">The caption of the picker window. </param>
      <param name=" filter">The filter string to use to optionally filter the files displayed in the picker window. </param>
      <param name=" options">A <see cref="T:System.Web.UI.Design.UrlBuilderOptions" /> indicating the options for URL selection.</param>
      <returns>
        <para>The URL returned from the URL picker.</para>
      </returns>
    </member>
    <member name="T:System.Web.UI.Design.UrlBuilderOptions">
      <summary>
        <para>Defines identifiers for settings of a <see cref="T:System.Web.UI.Design.UrlBuilder" />.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.Design.UrlBuilderOptions.None">
      <summary>
        <para>Use no additional options for the <see cref="T:System.Web.UI.Design.UrlBuilder" />.</para>
      </summary>
    </member>
    <member name="F:System.Web.UI.Design.UrlBuilderOptions.NoAbsolute">
      <summary>
        <para> Build a URL that references a path relative to the current path,
      rather than one that references a fully qualified, absolute path.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.Design.ControlPersister">
      <summary>
        <para> Provides methods for persisting Web server controls at design-time.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.ControlPersister.PersistInnerProperties(System.Object,System.ComponentModel.Design.IDesignerHost)">
      <summary>
        <para>Gets a string of data that can persist the inner properties of the specified control.</para>
      </summary>
      <param name="component">The component to persist the inner properties of.</param>
      <param name="host">An <see cref="T:System.ComponentModel.Design.IDesignerHost" /> that is the designer host for the control.</param>
      <returns>
        <para>A string that contains the information to persist about
      the inner properties
      of the control.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.ControlPersister.PersistInnerProperties(System.IO.TextWriter,System.Object,System.ComponentModel.Design.IDesignerHost)">
      <summary>
        <para>Outputs a string of data that can persist the inner
      properties of the specified control to the specified <see cref="T:System.IO.TextWriter" />
      , using the specified designer host.</para>
      </summary>
      <param name="sw">The <see cref="T:System.IO.TextWriter" /> to use.</param>
      <param name=" component">The component to persist.</param>
      <param name="host">An <see cref="T:System.ComponentModel.Design.IDesignerHost" /> that is the designer host for the control.</param>
    </member>
    <member name="M:System.Web.UI.Design.ControlPersister.PersistControl(System.Web.UI.Control)">
      <summary>
        <para>Gets a string of data that represents the persisted form 
      of the specified control.</para>
      </summary>
      <param name="control">The <see cref="T:System.Web.UI.Control" /> to persist.</param>
      <returns>
        <para> A string that represents the persisted
      form of the control.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.ControlPersister.PersistControl(System.Web.UI.Control,System.ComponentModel.Design.IDesignerHost)">
      <summary>
        <para>Gets a string of data that represents the persisted form of the specified 
      control, using the specified designer host.</para>
      </summary>
      <param name="control">The <see cref="T:System.Web.UI.Control" /> to persist.</param>
      <param name="host">An <see cref="T:System.ComponentModel.Design.IDesignerHost" /> that is the designer host for the control.</param>
      <returns>
        <para>A string that represents the persisted form of the control.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.ControlPersister.PersistControl(System.IO.TextWriter,System.Web.UI.Control)">
      <summary>
        <para>Outputs a string of data that represents the persisted form of the specified control to the specified <see cref="T:System.IO.TextWriter" />.</para>
      </summary>
      <param name="sw">The <see cref="T:System.IO.TextWriter" /> to output the persisted control data to. </param>
      <param name=" control">The <see cref="T:System.Web.UI.Control" /> to persist. </param>
    </member>
    <member name="M:System.Web.UI.Design.ControlPersister.PersistControl(System.IO.TextWriter,System.Web.UI.Control,System.ComponentModel.Design.IDesignerHost)">
      <summary>
        <para>Outputs a string of data that represents the persisted form of the 
      specified control to the specified <see cref="T:System.IO.TextWriter" />, using the specified designer
      host.</para>
      </summary>
      <param name="sw">The <see cref="T:System.IO.TextWriter" /> to output the persisted control data to.</param>
      <param name=" control">The <see cref="T:System.Web.UI.Control" /> to persist.</param>
      <param name="host">An <see cref="T:System.ComponentModel.Design.IDesignerHost" /> that is the designer host for the control.</param>
    </member>
    <member name="T:System.Web.UI.Design.WebControlToolboxItem">
      <summary>
        <para>Provides a base class for a Web server control <see cref="T:System.Drawing.Design.ToolboxItem" />.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControlToolboxItem.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.Design.WebControlToolboxItem" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControlToolboxItem.#ctor(System.Type)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.Design.WebControlToolboxItem" /> class.</para>
      </summary>
      <param name="type">The Type of the tool for this toolbox item</param>
    </member>
    <member name="M:System.Web.UI.Design.WebControlToolboxItem.GetToolAttributeValue(System.ComponentModel.Design.IDesignerHost,System.Type)">
      <summary>
        <para> Gets the value of the specified type of attribute of the toolbox item.</para>
      </summary>
      <param name="host">The <see cref="T:System.ComponentModel.Design.IDesignerHost" /> for the current design document.</param>
      <param name=" attributeType">The type of attribute to retrieve the value of.</param>
      <returns>
        <para>The value of the specified type of attribute.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.WebControlToolboxItem.GetToolHtml(System.ComponentModel.Design.IDesignerHost)">
      <summary>
        <para>Gets the HTML for the Web control that the tool creates.</para>
      </summary>
      <param name="host">The <see cref="T:System.ComponentModel.Design.IDesignerHost" /> for the current design document.</param>
      <returns>
        <para>The HTML for the Web control that the tool creates.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.WebControlToolboxItem.GetToolType(System.ComponentModel.Design.IDesignerHost)">
      <summary>
        <para>Gets the type of this toolbox item.</para>
      </summary>
      <param name="host">The <see cref="T:System.ComponentModel.Design.IDesignerHost" /> for the current design document.</param>
      <returns>
        <para>The Type of this toolbox item.</para>
      </returns>
    </member>
    <member name="T:System.Web.UI.Design.XmlFileEditor">
      <summary>
        <para>Provides a user interface for selecting an XML file
      using a standard <see cref="T:System.Windows.Forms.OpenFileDialog" /> box.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.Design.XmlUrlEditor">
      <summary>
        <para>Provides a user interface for selecting a URL that indicates the location of an XML file.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Design.XmlUrlEditor.Caption">
      <summary>
        <para> Gets the caption to display on the selection dialog window.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Design.XmlUrlEditor.Filter">
      <summary>
        <para>Gets the file name filter string for the editor. This is used to determine the
      items that appear in the file list of the dialog box.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Design.XmlUrlEditor.Options">
      <summary>
        <para> Indicates the options for the URL builder to use.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.Design.XslUrlEditor">
      <summary>
        <para>Provides a user interface for selecting an URL that indicates the location of an XSL file.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Design.XslUrlEditor.Caption">
      <summary>
        <para>Gets or sets the caption to display on the selection dialog window.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Design.XslUrlEditor.Filter">
      <summary>
        <para> Gets the file name filter string for the editor. This is used to determine the
      items that appear in the file list of the dialog box.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Design.XslUrlEditor.Options">
      <summary>
        <para>Indicates the options for the URL builder to use.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.DataBindingUI.DataBindingForm.#ctor(System.Web.UI.Control,System.IServiceProvider)">
      <summary>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.DataBindingUI.DataBindingForm.OnActivated(System.EventArgs)">
      <summary>
      </summary>
    </member>
    <member name="F:System.Web.UI.Design.DataBindingUI.DataBindingType.Custom">
      <summary>
        <para>
       Indicates a custom, or other type of data binding.
    </para>
      </summary>
    </member>
    <member name="F:System.Web.UI.Design.DataBindingUI.DataBindingType.DataBinderEval">
      <summary>
        <para>
       Indicates a data binding consisting of a DataBinderEval statement with
       understood references which consist of parseable arguments.
    </para>
      </summary>
    </member>
    <member name="F:System.Web.UI.Design.DataBindingUI.DataBindingType.Reference">
      <summary>
        <para>
       Indicates a data binding with a single reference identifier.
    </para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.Util.ColorComboBox.#ctor">
      <summary>
   Creates a new ColorComboBox
 </summary>
    </member>
    <member name="M:System.Web.UI.Design.Util.ColorComboBox.OnHandleCreated(System.EventArgs)">
      <summary>
      </summary>
    </member>
    <member name="P:System.Web.UI.Design.Util.ColorComboBox.Color">
      <summary>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.Util.GroupLabel.#ctor">
      <summary>
    Creates a new GroupLabel
 </summary>
    </member>
    <member name="M:System.Web.UI.Design.Util.GroupLabel.OnPaint(System.Windows.Forms.PaintEventArgs)">
      <summary>
    Custom UI is painted here
 </summary>
    </member>
    <member name="M:System.Web.UI.Design.Util.TridentSite.CreateDocument">
      <summary>
     Creates a new instance of mshtml and initializes it as a new document
     using its IPersistStreamInit.
 </summary>
    </member>
    <member name="M:System.Web.UI.Design.Util.TridentSite.CloseDocument">
      <summary>
     Closes the mshtml instance by deactivating and releasing it.
 </summary>
    </member>
    <member name="M:System.Web.UI.Design.Util.TridentSite.ActivateDocument">
      <summary>
     Activates the mshtml instance
 </summary>
    </member>
    <member name="M:System.Web.UI.Design.Util.NumberEdit.WndProc(System.Windows.Forms.Message@)">
      <summary>
    Override of wndProc to listen to WM_CHAR and filter out invalid
    key strokes. Valid keystrokes are:
    0...9,
    '.' (if fractions allowed),
    '-' (if negative allowed),
    BKSP.
    A beep is generated for invalid keystrokes
 </summary>
    </member>
    <member name="P:System.Web.UI.Design.Util.NumberEdit.AllowDecimal">
      <summary>
    Controls whether the edit control allows negative values
 </summary>
    </member>
    <member name="P:System.Web.UI.Design.Util.NumberEdit.AllowNegative">
      <summary>
    Controls whether the edit control allows negative values
 </summary>
    </member>
    <member name="M:System.Web.UI.Design.Util.UnitControl.#ctor">
      <summary>
     Createa a new UnitControl.
 </summary>
    </member>
    <member name="P:System.Web.UI.Design.Util.UnitControl.AllowNegativeValues">
      <summary>
     Controls whether the unit value can be negative
 </summary>
    </member>
    <member name="P:System.Web.UI.Design.Util.UnitControl.AllowNonUnitValues">
      <summary>
     Controls whether the unit value can be a unit-less
 </summary>
    </member>
    <member name="P:System.Web.UI.Design.Util.UnitControl.AllowPercentValues">
      <summary>
     Controls whether the unit value can be a percent value
 </summary>
    </member>
    <member name="P:System.Web.UI.Design.Util.UnitControl.DefaultUnit">
      <summary>
     The default unit to be used
 </summary>
    </member>
    <member name="P:System.Web.UI.Design.Util.UnitControl.Value">
      <summary>
     The unit reflecting the value and unit type within the UI.
     Returns null if no unit is selected.
 </summary>
    </member>
    <member name="T:System.Web.UI.Design.WebControls.AdRotatorDesigner">
      <summary>
        <para>Extends design-time behavior for the <see cref="T:System.Web.UI.WebControls.AdRotator" />
Web server control.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.AdRotatorDesigner.GetDesignTimeHtml">
      <summary>
        <para>Gets the HTML that is used to represent the control
 at design time.</para>
      </summary>
      <returns>
        <para>The HTML that is used to represent the control at design time.</para>
      </returns>
    </member>
    <member name="T:System.Web.UI.Design.WebControls.BaseDataListComponentEditor">
      <summary>
        <para>Provides a base component editor class for the Web
 Forms <see cref="T:System.Web.UI.WebControls.DataGrid" /> and <see cref="T:System.Web.UI.WebControls.DataList" /> Web
 server
 controls.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.BaseDataListComponentEditor.#ctor(System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.Design.WebControls.BaseDataListComponentEditor" />
class.</para>
      </summary>
      <param name="initialPage">The index of the initial page to display.</param>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.BaseDataListComponentEditor.EditComponent(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Windows.Forms.IWin32Window)">
      <summary>
        <para>Edits the specified component using the
      specified context descriptor and parent window.</para>
      </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.</param>
      <param name="obj">The component to edit.</param>
      <param name=" parent">The <see cref="T:System.Windows.Forms.IWin32Window" /> that represents the parent window.</param>
      <returns>
        <para>
          <see langword="true" /> if editing the component succeeded; otherwise,
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.BaseDataListComponentEditor.GetInitialComponentEditorPageIndex">
      <summary>
        <para> Gets the index of the initial component editor page.
 </para>
      </summary>
      <returns>
        <para> The index of the initial page.
 </para>
      </returns>
    </member>
    <member name="T:System.Web.UI.Design.WebControls.BaseDataListDesigner">
      <summary>
        <para>Provides a base designer class for the <see cref="T:System.Web.UI.WebControls.DataList" /> Web server control.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.BaseDataListDesigner.#ctor">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Web.UI.Design.WebControls.BaseDataListDesigner" /> class.
 </para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.BaseDataListDesigner.Dispose(System.Boolean)">
      <summary>
        <para>Releases the unmanaged resources used by the <see cref="T:System.Web.UI.Design.WebControls.BaseDataListDesigner" /> and optionally releases the
   managed resources.</para>
      </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.BaseDataListDesigner.GetDesignTimeDataSource(System.Int32,System.Boolean@)">
      <summary>
        <para>Gets a set of sample data that matches the schema of the selected data source.</para>
      </summary>
      <param name="minimumRows">The minimum number of rows of sample data that the data source should contain.</param>
      <param name="dummyDataSource">
        <see langword="true" /> if the returned data source contains dummy data; <see langword="false" /> if the returned data source contains data from an actual data source.</param>
      <returns>
        <para> A live data source for use at
      design-time.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.BaseDataListDesigner.GetDesignTimeDataSource(System.Collections.IEnumerable,System.Int32,System.Boolean@)">
      <summary>
        <para> Gets a set of sample data that matches the schema of the selected data source.
      </para>
      </summary>
      <param name="selectedDataSource">The data source that will be used as a template for the format of the data. </param>
      <param name="minimumRows">The minimum number of rows of sample data that the data source data should contain. </param>
      <param name="dummyDataSource">
        <see langword="true" /> if the returned data source contains dummy data; <see langword="false" /> if the returned data source contains data from an actual data source. </param>
      <returns>
        <para> A live data source for use at design-time.
      </para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.BaseDataListDesigner.GetResolvedSelectedDataSource">
      <summary>
        <para>Gets the data member that is currently selected within
 the data source currently bound to the control.</para>
      </summary>
      <returns>
        <para>The currently selected data member, or <see langword="null" /> if the control was not bound to a data
 source, or the data source, site of the designer's component, or the
 container of the data source could not be accessed.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.BaseDataListDesigner.GetSelectedDataSource">
      <summary>
        <para> Gets the selected data source component from the component's container.
 </para>
      </summary>
      <returns>
        <para> The
 selected data source, or <see langword="null" /> if a data source is not found, or if a data
 source with the same name does not exist.
 </para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.BaseDataListDesigner.GetTemplateContainerDataSource(System.String)">
      <summary>
        <para> Gets the data source of the template's container.
      </para>
      </summary>
      <param name="templateName">The name of the template to retrieve the data source for. </param>
      <returns>
        <para> An object that implements <see cref="T:System.Collections.IEnumerable" /> and contains the data source or data sources available to
   the template's container.
   </para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.BaseDataListDesigner.Initialize(System.ComponentModel.IComponent)">
      <summary>
        <para> Initializes the designer with the specified <see cref="T:System.Web.UI.WebControls.DataGrid" /> 
or <see cref="T:System.Web.UI.WebControls.DataList" />
control.</para>
      </summary>
      <param name="component">The <see cref="T:System.Web.UI.WebControls.DataGrid" /> or <see cref="T:System.Web.UI.WebControls.DataList" /> control to associate with the designer. </param>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.BaseDataListDesigner.InvokePropertyBuilder(System.Int32)">
      <summary>
        <para>
       Invokes the property builder beginning with the specified page.
    </para>
      </summary>
      <param name="initialPage">
    The page to begin with.
 </param>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.BaseDataListDesigner.OnAutoFormat(System.Object,System.EventArgs)">
      <summary>
        <para> Represents the method that will handle the AutoFormat event.
      </para>
      </summary>
      <param name="sender">The source of the event. </param>
      <param name=" e">
        <para>An <see cref="T:System.EventArgs" /> that contains the event data.</para>
      </param>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.BaseDataListDesigner.OnComponentChanged(System.Object,System.ComponentModel.Design.ComponentChangedEventArgs)">
      <summary>
        <para> Represents the method that will handle the component changed event.
      </para>
      </summary>
      <param name="sender">The source of the event. </param>
      <param name=" e">The <see cref="T:System.ComponentModel.Design.ComponentChangedEventArgs" /> that contains the event data. </param>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.BaseDataListDesigner.OnPropertyBuilder(System.Object,System.EventArgs)">
      <summary>
        <para> Represents the method that will handle the property builder event.
 </para>
      </summary>
      <param name="sender">The source of the event. </param>
      <param name=" e">An <see cref="T:System.EventArgs" /> object that contains the event data. </param>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.BaseDataListDesigner.OnStylesChanged">
      <summary>
        <para> Provides a method that can be overridden to implement
      functionality that should occur when a style of the control has been changed.
      </para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.BaseDataListDesigner.OnTemplateEditingVerbsChanged">
      <summary>
        <para>Provides a method that can be overridden to implement
      functionality that should occur when the designer's template
      editing verbs have changed.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.BaseDataListDesigner.PreFilterProperties(System.Collections.IDictionary)">
      <summary>
        <para> Filters the properties exposed through a <see cref="T:System.ComponentModel.TypeDescriptor" /> and replaces the runtime DataSource property descriptor with
   a design-time data source.
   </para>
      </summary>
      <param name="properties">An <see cref="T:System.Collections.IDictionary" /> that contains the set of properties to filter. </param>
    </member>
    <member name="P:System.Web.UI.Design.WebControls.BaseDataListDesigner.DesignTimeHtmlRequiresLoadComplete">
      <summary>
        <para>Gets a value indicating whether loading must have completed to
      display the design-time HTML.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Design.WebControls.BaseDataListDesigner.DataKeyField">
      <summary>
        <para>Gets or sets the value of the control's data key field.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Design.WebControls.BaseDataListDesigner.DataMember">
      <summary>
        <para>Gets or sets the value of the control's data member field.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Design.WebControls.BaseDataListDesigner.DataSource">
      <summary>
        <para>Gets or sets the value of the control's data source property.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Design.WebControls.BaseDataListDesigner.Verbs">
      <summary>
        <para> Gets or sets the collection of verbs available to this designer.
      </para>
      </summary>
    </member>
    <member name="T:System.Web.UI.Design.WebControls.BaseValidatorDesigner">
      <summary>
        <para> Extends design-time behavior for controls that derive from
   <see cref="T:System.Web.UI.WebControls.BaseValidator" />.
      </para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.BaseValidatorDesigner.GetDesignTimeHtml">
      <summary>
        <para> Gets the HTML that is used to represent the control at design time.
 </para>
      </summary>
      <returns>
        <para> The HTML that is used to represent the
 control at design time.
 </para>
      </returns>
    </member>
    <member name="T:System.Web.UI.Design.WebControls.ButtonDesigner">
      <summary>
        <para>Extends design-time behavior for the <see cref="T:System.Web.UI.WebControls.Button" /> Web server control.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.ButtonDesigner.GetDesignTimeHtml">
      <summary>
        <para>Gets the HTML that is used to represent the control at design time.</para>
      </summary>
      <returns>
        <para> The HTML that is used to represent the control at design time.</para>
      </returns>
    </member>
    <member name="T:System.Web.UI.Design.WebControls.CalendarAutoFormatDialog">
      <summary>
        <para>Provides an AutoFormat page for a <see cref="T:System.Web.UI.WebControls.Calendar" /> Web server
 control.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.CalendarAutoFormatDialog.OnActivated(System.Object,System.EventArgs)">
      <summary>
        <para>Occurs when the <see cref="T:System.Web.UI.Design.WebControls.CalendarAutoFormatDialog" /> dialog
   is activated.</para>
      </summary>
      <param name="source">The source of the event.</param>
      <param name=" e">An <see cref="T:System.EventArgs" /> that provides information about the event.</param>
    </member>
    <member name="T:System.Web.UI.Design.CalendarDataBindingHandler">
      <summary>
        <para>Provides a data-binding handler for a calendar.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.CalendarDataBindingHandler.DataBindControl(System.ComponentModel.Design.IDesignerHost,System.Web.UI.Control)">
      <summary>
        <para>Sets the calendar's date to the current day if the <see cref="P:System.Web.UI.WebControls.Calendar.SelectedDate" /> property is data-bound.</para>
      </summary>
      <param name="designerHost">The <see cref="T:System.ComponentModel.Design.IDesignerHost" /> for the document that contains the control.</param>
      <param name=" control">The <see cref="T:System.Web.UI.Control" /> to add data binding to.</param>
    </member>
    <member name="T:System.Web.UI.Design.WebControls.CalendarDesigner">
      <summary>
        <para>Extends design-time behavior for the <see cref="T:System.Web.UI.WebControls.Calendar" /> Web server
 control.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.CalendarDesigner.Initialize(System.ComponentModel.IComponent)">
      <summary>
        <para> Initializes the designer with the specified component.</para>
      </summary>
      <param name="component">The <see cref="T:System.ComponentModel.IComponent" /> for this designer.</param>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.CalendarDesigner.OnAutoFormat(System.Object,System.EventArgs)">
      <summary>
        <para> Handles the the
      AutoFormat event to display a new <see cref="T:System.Web.UI.Design.WebControls.CalendarAutoFormatDialog" /> . </para>
      </summary>
      <param name="sender">The source of the event. </param>
      <param name=" e">The <see cref="T:System.EventArgs" /> object that contains the event data. </param>
    </member>
    <member name="P:System.Web.UI.Design.WebControls.CalendarDesigner.Verbs">
      <summary>
        <para> Gets the verbs available to this designer.
      </para>
      </summary>
    </member>
    <member name="T:System.Web.UI.Design.WebControls.CheckBoxDesigner">
      <summary>
        <para>Extends design-time behavior for the <see cref="T:System.Web.UI.WebControls.CheckBox" /> Web server control.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.CheckBoxDesigner.GetDesignTimeHtml">
      <summary>
        <para> Gets the HTML that is used to represent the control at design
      time.</para>
      </summary>
      <returns>
        <para> The HTML that is used to represent the control at design
      time.</para>
      </returns>
    </member>
    <member name="T:System.Web.UI.Design.WebControls.DataGridColumnCollectionEditor">
      <summary>
        <para> Provides a collection editing user interface for a 
 column collection of a <see cref="T:System.Web.UI.WebControls.DataGrid" /> Web server control.
 </para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.DataGridColumnCollectionEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>
        <para> Edits the specified value using the specified context
      descriptor and service provider.
      </para>
      </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that indicates the context of the object to edit the value of. </param>
      <param name=" provider">An <see cref="T:System.IServiceProvider" />. </param>
      <param name=" value">The object to edit. </param>
      <returns>
        <para> The new value.
      </para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.DataGridColumnCollectionEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <para> Gets the edit style used by the <see cref="M:System.Web.UI.Design.WebControls.DataGridColumnCollectionEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)" /> method.
   </para>
      </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that indicates the context of the object to edit the value of. </param>
      <returns>
        <para> A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle" /> that
   represents the editor style that this editor uses.
   </para>
      </returns>
    </member>
    <member name="T:System.Web.UI.Design.WebControls.DataGridComponentEditor">
      <summary>
        <para>Provides a component editor for a Web Forms <see cref="T:System.Web.UI.WebControls.DataGrid" /> Web 
 server
 control.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.DataGridComponentEditor.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.Design.WebControls.DataGridComponentEditor" /> 
 class.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.DataGridComponentEditor.#ctor(System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.Design.WebControls.DataGridComponentEditor" /> 
 class.</para>
      </summary>
      <param name="initialPage">The index of the initial page.</param>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.DataGridComponentEditor.GetComponentEditorPages">
      <summary>
        <para>Gets the component editor pages shown for the <see cref="T:System.Web.UI.WebControls.DataGrid" /> control in its 
   associated <see cref="T:System.ComponentModel.ComponentEditor" />.</para>
      </summary>
      <returns>
        <para>An array consisting of the set of component editor pages.</para>
      </returns>
    </member>
    <member name="T:System.Web.UI.Design.WebControls.DataGridDesigner">
      <summary>
        <para>Extends design-time behavior for the <see cref="T:System.Web.UI.WebControls.DataGrid" /> Web server
 control.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.DataGridDesigner.#ctor">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Web.UI.Design.WebControls.DataGridDesigner" /> class.
 </para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.DataGridDesigner.CreateTemplateEditingFrame(System.Web.UI.Design.TemplateEditingVerb)">
      <summary>
        <para>Creates a template editing frame using the specified verb.</para>
      </summary>
      <param name="verb">The <see cref="T:System.Web.UI.Design.TemplateEditingVerb" /> to create the template editing frame for.</param>
      <returns>
        <para>A new <see cref="T:System.Web.UI.Design.ITemplateEditingFrame" /> .</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.DataGridDesigner.Dispose(System.Boolean)">
      <summary>
        <para> Releases the unmanaged resources used by the <see cref="T:System.Web.UI.Design.WebControls.DataGridDesigner" /> and optionally releases the
   managed resources.
   </para>
      </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.DataGridDesigner.GetCachedTemplateEditingVerbs">
      <summary>
        <para>Gets the cached template editing verbs.</para>
      </summary>
      <returns>
        <para>An array containing the cached template editing verbs.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.DataGridDesigner.GetDesignTimeHtml">
      <summary>
        <para> Gets the HTML that is used to represent the control
 at design time.
 </para>
      </summary>
      <returns>
        <para>The HTML that is used to represent the control at design time.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.DataGridDesigner.GetEmptyDesignTimeHtml">
      <summary>
        <para> Gets the HTML used to represent an empty template-based control at design
 time.</para>
      </summary>
      <returns>
        <para> The HTML used to represent an empty template-based control at design time.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.DataGridDesigner.GetErrorDesignTimeHtml(System.Exception)">
      <summary>
        <para>Gets the HTML displayed at design-time for the specified exception when an error has been encountered
 while rendering the control.</para>
      </summary>
      <param name="e">The exception to display an error message for.</param>
      <returns>
        <para>The HTML displayed at design-time for the specified exception.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.DataGridDesigner.GetTemplateContainerDataItemProperty(System.String)">
      <summary>
        <para> Gets the data item property of the template's container.
      </para>
      </summary>
      <param name="templateName">The name of the template. </param>
      <returns>
        <para> The data item property of the template's container.
      </para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.DataGridDesigner.GetTemplateContent(System.Web.UI.Design.ITemplateEditingFrame,System.String,System.Boolean@)">
      <summary>
        <para> Gets the template's content.
      </para>
      </summary>
      <param name="editingFrame">The <see cref="T:System.Web.UI.Design.ITemplateEditingFrame" /> to retrieve content for. </param>
      <param name=" templateName">The name of the template. </param>
      <param name=" allowEditing">
        <see langword="true" /> if the template's content can be edited; <see langword="false" /> if the content is read-only.</param>
      <returns>
        <para> The template's content.
      </para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.DataGridDesigner.GetTemplatePropertyParentType(System.String)">
      <summary>
        <para>Gets the type of the parent with the template property. </para>
      </summary>
      <param name="templateName">The name of the template to return the type of the parent for.</param>
      <returns>
        <para>The type of the object that has the template property.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.DataGridDesigner.OnColumnsChanged">
      <summary>
        <para>
       Notification that is called when the columns changed event occurs.
    </para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.DataGridDesigner.OnTemplateEditingVerbsChanged">
      <summary>
        <para>Provides an opportunity to do processing or other actions when a change has 
 been made to the template editing verbs.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.DataGridDesigner.Initialize(System.ComponentModel.IComponent)">
      <summary>
        <para>Initializes the designer with the specified <see cref="T:System.Web.UI.WebControls.DataGrid" /> 
control.</para>
      </summary>
      <param name="component">The <see cref="T:System.ComponentModel.IComponent" /> for the designer. </param>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.DataGridDesigner.SetTemplateContent(System.Web.UI.Design.ITemplateEditingFrame,System.String,System.String)">
      <summary>
        <para> Sets the content for the specified template and frame.
      </para>
      </summary>
      <param name="editingFrame">The <see cref="T:System.Web.UI.Design.ITemplateEditingFrame" /> to set the content for. </param>
      <param name=" templateName">The name of the template. </param>
      <param name=" templateContent">The content to set. </param>
    </member>
    <member name="T:System.Web.UI.Design.WebControls.DataListComponentEditor">
      <summary>
        <para> Provides a component editor for a Web Forms <see cref="T:System.Web.UI.WebControls.DataList" />
control.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.DataListComponentEditor.#ctor">
      <summary>
        <para>
       Initializes a new instance of <see cref="T:System.Web.UI.Design.WebControls.DataListComponentEditor" />.
    </para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.DataListComponentEditor.#ctor(System.Int32)">
      <summary>
        <para> Initializes a new instance of <see cref="T:System.Web.UI.Design.WebControls.DataListComponentEditor" />.
 </para>
      </summary>
      <param name="initialPage">The index of the initial page to display. </param>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.DataListComponentEditor.GetComponentEditorPages">
      <summary>
        <para>Gets the component editor pages shown for the <see cref="T:System.Web.UI.WebControls.DataList" /> control in its 
   associated <see cref="T:System.ComponentModel.ComponentEditor" />.</para>
      </summary>
      <returns>
        <para> An array of type <see cref="T:System.Type" /> that contains the pages owned by the designer.
   </para>
      </returns>
    </member>
    <member name="T:System.Web.UI.Design.WebControls.DataListDesigner">
      <summary>
        <para> Extends design-time behavior for the <see cref="T:System.Web.UI.WebControls.DataList" /> Web server
 control.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.DataListDesigner.#ctor">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Web.UI.Design.WebControls.DataListDesigner" /> class. 
</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.DataListDesigner.CreateTemplateEditingFrame(System.Web.UI.Design.TemplateEditingVerb)">
      <summary>
        <para>Creates a template editing frame using the specified verb.</para>
      </summary>
      <param name="verb">The <see cref="T:System.Web.UI.Design.TemplateEditingVerb" /> that was invoked to create a template editing frame.</param>
      <returns>
        <para>An <see cref="T:System.Web.UI.Design.ITemplateEditingFrame" />.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.DataListDesigner.Dispose(System.Boolean)">
      <summary>
        <para> Releases the unmanaged resources used by the <see cref="T:System.Web.UI.Design.WebControls.DataListDesigner" /> and optionally releases the
   managed resources.
   </para>
      </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.DataListDesigner.GetCachedTemplateEditingVerbs">
      <summary>
        <para>Gets the cached template editing verbs available to the designer.</para>
      </summary>
      <returns>
        <para>The cached template editing verbs available to the designer.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.DataListDesigner.GetDesignTimeHtml">
      <summary>
        <para> Gets the HTML that is used to represent the control
 at design time.
 </para>
      </summary>
      <returns>
        <para> The HTML that is used to represent the control at design time.
 </para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.DataListDesigner.GetEmptyDesignTimeHtml">
      <summary>
        <para>Gets the HTML used to represent an empty template-based control at design 
 time.</para>
      </summary>
      <returns>
        <para>The HTML used to represent an empty template-based control at design time.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.DataListDesigner.GetErrorDesignTimeHtml(System.Exception)">
      <summary>
        <para>Gets the HTML to display at design-time for the specified exception when an error has been encountered
      while rendering the control.</para>
      </summary>
      <param name="e">The Exception to display the error message for.</param>
      <returns>
        <para>The HTML displayed at design-time for the specified exception.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.DataListDesigner.GetTemplateContainerDataItemProperty(System.String)">
      <summary>
        <para> Gets the template container's data item property.
      </para>
      </summary>
      <param name="templateName">The name of the template. </param>
      <returns>
        <para> The data item property of the container of the template.
      </para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.DataListDesigner.GetTemplateContent(System.Web.UI.Design.ITemplateEditingFrame,System.String,System.Boolean@)">
      <summary>
        <para> Gets the template's content.
      </para>
      </summary>
      <param name="editingFrame">The <see cref="T:System.Web.UI.Design.ITemplateEditingFrame" /> to get content from. </param>
      <param name=" templateName">The name of the template. </param>
      <param name=" allowEditing">
        <see langword="true" /> if the template's content can be edited; <see langword="false" /> if the content is read-only.</param>
      <returns>
        <para> The template's content.
      </para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.DataListDesigner.Initialize(System.ComponentModel.IComponent)">
      <summary>
        <para> Initializes
      the designer with the specified component.
      </para>
      </summary>
      <param name="component">The <see cref="T:System.ComponentModel.IComponent" /> for the designer. </param>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.DataListDesigner.OnTemplateEditingVerbsChanged">
      <summary>
        <para>Provides an opportunity to do processing or other 
 actions when a change has been made to the template editing verbs.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.DataListDesigner.SetTemplateContent(System.Web.UI.Design.ITemplateEditingFrame,System.String,System.String)">
      <summary>
        <para> Sets the content for the specified template and frame.
      </para>
      </summary>
      <param name="editingFrame">The <see cref="T:System.Web.UI.Design.ITemplateEditingFrame" /> to set content for. </param>
      <param name=" templateName">The name of the template. </param>
      <param name=" templateContent">The content to set. </param>
    </member>
    <member name="P:System.Web.UI.Design.WebControls.DataListDesigner.AllowResize">
      <summary>
        <para>Gets a value indicating whether the data list can be resized.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Design.WebControls.DataListDesigner.TemplatesExist">
      <summary>
        <para> Gets a value
      that indicates whether templates associated with the designer currently exist.
      </para>
      </summary>
    </member>
    <member name="T:System.Web.UI.Design.HyperLinkDataBindingHandler">
      <summary>
        <para> Provides a data-binding handler for a hyperlink property.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.HyperLinkDataBindingHandler.DataBindControl(System.ComponentModel.Design.IDesignerHost,System.Web.UI.Control)">
      <summary>
        <para> Data binds the specified control.</para>
      </summary>
      <param name="designerHost">The <see cref="T:System.ComponentModel.Design.IDesignerHost" /> for the document that contains the control.</param>
      <param name=" control">The <see cref="T:System.Web.UI.Control" /> to data bind.</param>
    </member>
    <member name="T:System.Web.UI.Design.WebControls.HyperLinkDesigner">
      <summary>
        <para> Extends design-time behavior for the <see cref="T:System.Web.UI.WebControls.HyperLink" />
Web server control.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.HyperLinkDesigner.GetDesignTimeHtml">
      <summary>
        <para> Gets the HTML that is used to represent the control at
      design
      time.</para>
      </summary>
      <returns>
        <para> The HTML that is used to represent the control at design
      time.</para>
      </returns>
    </member>
    <member name="T:System.Web.UI.Design.WebControls.LabelDesigner">
      <summary>
        <para>Extends design-time behavior for the <see cref="T:System.Web.UI.WebControls.Label" />
Web server control. </para>
      </summary>
    </member>
    <member name="T:System.Web.UI.Design.WebControls.LinkButtonDesigner">
      <summary>
        <para> Extends design-time behavior for the <see cref="T:System.Web.UI.WebControls.LinkButton" />
Web server control.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.Design.WebControls.ListControlDataBindingHandler">
      <summary>
        <para>Provides a data-binding handler for a <see cref="T:System.Web.UI.WebControls.ListControl" /> .</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.ListControlDataBindingHandler.DataBindControl(System.ComponentModel.Design.IDesignerHost,System.Web.UI.Control)">
      <summary>
        <para>Performs data binding on the specified control.</para>
      </summary>
      <param name="designerHost">The <see cref="T:System.ComponentModel.Design.IDesignerHost" /> for the document that contains the control.</param>
      <param name=" control">The <see cref="T:System.Web.UI.Control" /> to data bind to. </param>
    </member>
    <member name="T:System.Web.UI.Design.WebControls.ListControlDesigner">
      <summary>
        <para> Extends design-time behavior for <see cref="T:System.Web.UI.WebControls.ListControl" /> Web server
 controls.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.ListControlDesigner.#ctor">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Web.UI.Design.WebControls.ListControlDesigner" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.ListControlDesigner.GetDesignTimeHtml">
      <summary>
        <para> Gets the HTML that is used to represent the control at design time.</para>
      </summary>
      <returns>
        <para>The HTML that is used to represent the control at design time.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.ListControlDesigner.Initialize(System.ComponentModel.IComponent)">
      <summary>
        <para> Initializes the designer with the specified component.
      </para>
      </summary>
      <param name="component">The <see cref="T:System.ComponentModel.IComponent" /> for the designer. </param>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.ListControlDesigner.GetResolvedSelectedDataSource">
      <summary>
        <para>Gets the data member that is currently selected 
 within the data source currently bound to the control.</para>
      </summary>
      <returns>
        <para>The currently selected data member, or 
 <see langword="null" /> if the control was not bound to a data source, or the data 
 source, site of the designer's component, or the container of the data source could not be accessed.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.ListControlDesigner.GetSelectedDataSource">
      <summary>
        <para> Gets the selected data source component from the component's container.
 </para>
      </summary>
      <returns>
        <para> The
 selected data source, or <see langword="null" /> if a data source is not found or if a data
 source with the same name does not exist.
 </para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.ListControlDesigner.OnComponentChanged(System.Object,System.ComponentModel.Design.ComponentChangedEventArgs)">
      <summary>
        <para> Raises the ComponentChanged event.
 </para>
      </summary>
      <param name="source">The source of the event.</param>
      <param name=" ce">A <see cref="T:System.ComponentModel.Design.ComponentChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.ListControlDesigner.OnDataSourceChanged">
      <summary>
        <para> Raises the DataSourceChanged event.
      </para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.ListControlDesigner.PreFilterProperties(System.Collections.IDictionary)">
      <summary>
        <para>Filters the properties exposed through a <see cref="T:System.ComponentModel.TypeDescriptor" /> and replaces
   the property descriptor for the DataSource property, which contains the value used at
   runtime, with a property descriptor that contains a value indicating a
   design-time data source.</para>
      </summary>
      <param name="properties">An <see cref="T:System.Collections.IDictionary" /> that contains the set of properties to expose for the control.</param>
    </member>
    <member name="P:System.Web.UI.Design.WebControls.ListControlDesigner.DataMember">
      <summary>
        <para>Gets or sets the data member for the control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Design.WebControls.ListControlDesigner.DataSource">
      <summary>
        <para>Gets or sets the data source property of the control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Design.WebControls.ListControlDesigner.DataValueField">
      <summary>
        <para>Gets or sets the data value field of the control.</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Design.WebControls.ListControlDesigner.DataTextField">
      <summary>
        <para> Gets or sets the data text field of the control.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.Design.WebControls.ListItemsCollectionEditor">
      <summary>
        <para>Provides a user interface for editing the items collection of a list.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.ListItemsCollectionEditor.#ctor(System.Type)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.Design.WebControls.ListItemsCollectionEditor" /> class.</para>
      </summary>
      <param name="type">The type of the collection to edit.</param>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.ListItemsCollectionEditor.CanSelectMultipleInstances">
      <summary>
        <para> Indicates whether multiple items in the list can be selected at the
 same time.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if multiple 
 items can be selected at the same time;
 otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="T:System.Web.UI.Design.UserControlDesigner">
      <summary>
        <para>Extends design-time behavior for Web user controls.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.UserControlDesigner.#ctor">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Web.UI.Design.UserControlDesigner" />
class.</para>
      </summary>
    </member>
    <member name="T:System.Web.UI.Design.WebControls.PanelDesigner">
      <summary>
        <para>Extends design-time behavior for the <see cref="T:System.Web.UI.WebControls.Panel" />
 Web server control.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.PanelDesigner.MapPropertyToStyle(System.String,System.Object)">
      <summary>
        <para>
       Maps a specified property and value to a specified HTML style.
    </para>
      </summary>
      <param name="propName">
    The property name.
 </param>
      <param name="varPropValue">
    The property value.
 </param>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.PanelDesigner.OnBehaviorAttached">
      <summary>
        <para> Provides notification when a behavior is attached to the designer.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.RegexEditorDialog.cmdHelp_Click(System.Object,System.EventArgs)">
      <summary>
        <para>Represents the method that will handle the Help event of 
 the dialog.</para>
      </summary>
      <param name="sender">The source of the event.</param>
      <param name=" e">An EventArgs that provides data for the event.</param>
    </member>
    <member name="T:System.Web.UI.Design.WebControls.RegexTypeEditor">
      <summary>
        <para>Provides a user interface for editing regular expressions.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.RegexTypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>
        <para>Edits
      the value of the specified object using the specified service provider and
      context.</para>
      </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can provide additional context information.</param>
      <param name=" provider">A service provider.</param>
      <param name=" value">The object to edit the value of.</param>
      <returns>
        <para> The new value of the object. If the value of the object hasn't changed,
      this method returns the same object it was passed.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.RegexTypeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <para>Gets the editor style used by the <see cref="M:System.Web.UI.Design.WebControls.RegexTypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)" /> method.</para>
      </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that may be used to gain additional context information.</param>
      <returns>
        <para>A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle" /> that indicates
   the editor style.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.RepeaterDesigner.#ctor">
      <summary>
        <para>
       Initializes a new instance of the <see cref="T:System.Web.UI.Design.WebControls.RepeaterDesigner" /> class.
    </para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.RepeaterDesigner.Dispose(System.Boolean)">
      <summary>
   Performs the cleanup of the designer class.
 </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.RepeaterDesigner.GetDesignTimeDataSource(System.Int32)">
      <summary>
   Returns a sample data matching the schema of the selected datasource.
 </summary>
      <param name="minimumRows">
   The minimumn rows of sample data the datasource should contain.
 </param>
      <returns>
   A live datasource for use at design-time.
 </returns>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.RepeaterDesigner.GetDesignTimeDataSource(System.Collections.IEnumerable,System.Int32)">
      <summary>
   Returns a sample data matching the schema of the selected datasource.
 </summary>
      <param name="selectedDataSource">
   The selected datasource to be used as a reference for the shape of the data.
 </param>
      <param name="minimumRows">
   The minimumn rows of sample data the datasource should contain.
 </param>
      <returns>
   A live datasource for use at design-time.
 </returns>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.RepeaterDesigner.GetDesignTimeHtml">
      <summary>
   Retrieves the HTML to be used for the design-time representation
   of the control.
 </summary>
      <returns>
   Design Time HTML.
 </returns>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.RepeaterDesigner.GetEmptyDesignTimeHtml">
      <summary>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.RepeaterDesigner.GetErrorDesignTimeHtml(System.Exception)">
      <summary>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.RepeaterDesigner.GetResolvedSelectedDataSource">
      <summary>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.RepeaterDesigner.GetSelectedDataSource">
      <summary>
   Retrieves the selected datasource component from the component's container.
 </summary>
      <returns>
   The selected datasource; null if a datasource is not found, or a datasource
   with the same name does not exist.
 </returns>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.RepeaterDesigner.Initialize(System.ComponentModel.IComponent)">
      <summary>
   Initializes the designer with the Repeater control that this instance
   of the designer is associated with.
 </summary>
      <param name="component">
   The associated Repeater control.
 </param>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.RepeaterDesigner.OnComponentChanged(System.Object,System.ComponentModel.Design.ComponentChangedEventArgs)">
      <summary>
   Handles changes made to the component. This includes changes made
   in the Properties window.
 </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.RepeaterDesigner.OnDataSourceChanged">
      <summary>
   Handles changes made to the data source
 </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.RepeaterDesigner.PreFilterProperties(System.Collections.IDictionary)">
      <summary>
   Filter the properties to replace the runtime DataSource property
   descriptor with the designer's.
 </summary>
    </member>
    <member name="P:System.Web.UI.Design.WebControls.RepeaterDesigner.DataMember">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Web.UI.Design.WebControls.RepeaterDesigner.DataSource">
      <summary>
   Designer implementation of DataSource property that operates on
   the DataSource property in the control's binding collection.
 </summary>
    </member>
    <member name="P:System.Web.UI.Design.WebControls.RepeaterDesigner.TemplatesExist">
      <summary>
      </summary>
    </member>
    <member name="T:System.Web.UI.Design.WebControls.TableCellsCollectionEditor">
      <summary>
        <para>Provides a user interface for editing the collection of cells in a table row.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.TableCellsCollectionEditor.#ctor(System.Type)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.Design.WebControls.TableCellsCollectionEditor" /> class.</para>
      </summary>
      <param name="type">The type of the collection to edit.</param>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.TableCellsCollectionEditor.CreateInstance(System.Type)">
      <summary>
        <para>Creates an instance of the editor for use with the specified type.</para>
      </summary>
      <param name="itemType"> The type to create an instance of.</param>
      <returns>
        <para>An object of the specified type.</para>
      </returns>
    </member>
    <member name="T:System.Web.UI.Design.WebControls.TableDesigner">
      <summary>
        <para> Extends design-time behavior for the <see cref="T:System.Web.UI.WebControls.Table" />
Web server control.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.TableDesigner.GetDesignTimeHtml">
      <summary>
        <para> Gets the HTML that is used to represent the control at design
      time.</para>
      </summary>
      <returns>
        <para> The HTML that is used to represent the control at design
      time.</para>
      </returns>
    </member>
    <member name="T:System.Web.UI.Design.WebControls.TableRowsCollectionEditor">
      <summary>
        <para>Provides a user interface for editing rows of a table.</para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.TableRowsCollectionEditor.#ctor(System.Type)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Web.UI.Design.WebControls.TableRowsCollectionEditor" /> class.</para>
      </summary>
      <param name="type">The type of the collection to edit.</param>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.TableRowsCollectionEditor.CanSelectMultipleInstances">
      <summary>
        <para> Indicates whether multiple instances may be selected.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if multiple items can be selected at once; otherwise,
<see langword="false" />. This implementation always returns 
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.TableRowsCollectionEditor.CreateInstance(System.Type)">
      <summary>
        <para>Creates an instance of the specified type.</para>
      </summary>
      <param name="itemType"> The type to create an instance of.</param>
      <returns>
        <para>An object of the specified type.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.XmlDesigner.#ctor">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Web.UI.Design.WebControls.XmlDesigner" /> class.
 </para>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.XmlDesigner.Dispose(System.Boolean)">
      <summary>
        <para>Releases the unmanaged resources used by the <see cref="T:System.Web.UI.Design.WebControls.XmlDesigner" /> and optionally releases the managed resources.</para>
      </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.XmlDesigner.GetDesignTimeHtml">
      <summary>
        <para> Gets the HTML that is used to represent the control
 at design time.</para>
      </summary>
      <returns>
        <para>The HTML that is used to represent the control at design time.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.XmlDesigner.GetEmptyDesignTimeHtml">
      <summary>
        <para>Gets the HTML that is used to fill an empty control.</para>
      </summary>
      <returns>
        <para>The HTML used to fill an empty control.</para>
      </returns>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.XmlDesigner.Initialize(System.ComponentModel.IComponent)">
      <summary>
        <para> Initializes the designer with the control that this instance
      of the designer is associated with.</para>
      </summary>
      <param name="component">The associated control. </param>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.ListControls.AutoFormatDialog.#ctor">
      <summary>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.ListControls.AutoFormatDialog.SetComponent(System.Web.UI.WebControls.BaseDataList)">
      <summary>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.ListControls.AutoFormatDialog.OnActivated(System.EventArgs)">
      <summary>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.ListControls.AutoFormatDialog.OnHandleDestroyed(System.EventArgs)">
      <summary>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.ListControls.AutoFormatDialog.SchemePreview.#ctor(System.Design.NativeMethods.IHTMLDocument2)">
      <summary>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.ListControls.AutoFormatDialog.SchemePreview.InitPreview">
      <summary>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.ListControls.AutoFormatDialog.SchemePreview.ClearPreviewDocument(System.Boolean)">
      <summary>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.ListControls.AutoFormatDialog.SchemePreview.ClosePreview">
      <summary>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.ListControls.AutoFormatDialog.SchemePreview.PreviewScheme(System.Web.UI.Design.WebControls.ListControls.AutoFormatDialog.BaseDataListScheme)">
      <summary>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.ListControls.BaseDataListPage.SetComponent(System.ComponentModel.IComponent)">
      <summary>
   Sets the component that is to be edited in the page.
 </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.ListControls.BaseDataListPage.ShowHelp">
    </member>
    <member name="M:System.Web.UI.Design.WebControls.ListControls.BaseDataListPage.SupportsHelp">
    </member>
    <member name="T:System.Web.UI.Design.WebControls.ListControls.BaseDataListPage.DataSourceItem">
      <summary>
   This contains information about a datasource and is used to populate
   the datasource combo. This is used in the General page for a DataList
   and the Data page for a DataGrid.
 </summary>
    </member>
    <member name="T:System.Web.UI.Design.WebControls.ListControls.BaseDataListPage.ListSourceDataSourceItem">
      <summary>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.ListControls.BordersPage.#ctor">
      <summary>
   Creates a new instance of BordersPage.
 </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.ListControls.BordersPage.LoadComponent">
      <summary>
   Loads the component into the page.
 </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.ListControls.BordersPage.SaveComponent">
      <summary>
   Saves the component loaded into the page.
 </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.ListControls.BordersPage.SetComponent(System.ComponentModel.IComponent)">
      <summary>
   Sets the component that is to be edited in the page.
 </summary>
    </member>
    <member name="P:System.Web.UI.Design.WebControls.ListControls.BordersPage.HelpKeyword">
    </member>
    <member name="M:System.Web.UI.Design.WebControls.ListControls.DataGridColumnsPage.#ctor">
      <summary>
   Creates a new instance of DataGridColumnsPage.
 </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.ListControls.DataGridColumnsPage.LoadComponent">
      <summary>
   Loads the component into the page.
 </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.ListControls.DataGridColumnsPage.SaveComponent">
      <summary>
   Saves the component loaded into the page.
 </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.ListControls.DataGridColumnsPage.SetComponent(System.ComponentModel.IComponent)">
      <summary>
   Sets the component that is to be edited in the page.
 </summary>
    </member>
    <member name="P:System.Web.UI.Design.WebControls.ListControls.DataGridColumnsPage.HelpKeyword">
    </member>
    <member name="M:System.Web.UI.Design.WebControls.ListControls.DataGridGeneralPage.#ctor">
      <summary>
   Creates a new instance of DataGridGeneralPage.
 </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.ListControls.DataGridGeneralPage.LoadComponent">
      <summary>
   Loads the component into the page.
 </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.ListControls.DataGridGeneralPage.SaveComponent">
      <summary>
   Saves the component loaded into the page.
 </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.ListControls.DataGridGeneralPage.SetComponent(System.ComponentModel.IComponent)">
      <summary>
   Sets the component that is to be edited in the page.
 </summary>
    </member>
    <member name="P:System.Web.UI.Design.WebControls.ListControls.DataGridGeneralPage.HelpKeyword">
    </member>
    <member name="M:System.Web.UI.Design.WebControls.ListControls.DataGridPagingPage.#ctor">
      <summary>
   Creates a new instance of DataGridPagingPage.
 </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.ListControls.DataGridPagingPage.LoadComponent">
      <summary>
   Loads the component into the page.
 </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.ListControls.DataGridPagingPage.SaveComponent">
      <summary>
   Saves the component loaded into the page.
 </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.ListControls.DataGridPagingPage.SetComponent(System.ComponentModel.IComponent)">
      <summary>
   Sets the component that is to be edited in the page.
 </summary>
    </member>
    <member name="P:System.Web.UI.Design.WebControls.ListControls.DataGridPagingPage.HelpKeyword">
    </member>
    <member name="M:System.Web.UI.Design.WebControls.ListControls.DataListGeneralPage.#ctor">
      <summary>
   Creates a new instance of DataListGeneralPage.
 </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.ListControls.DataListGeneralPage.LoadComponent">
      <summary>
   Loads the component into the page.
 </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.ListControls.DataListGeneralPage.SaveComponent">
      <summary>
   Saves the component loaded into the page.
 </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.ListControls.DataListGeneralPage.SetComponent(System.ComponentModel.IComponent)">
      <summary>
   Sets the component that is to be edited in the page.
 </summary>
    </member>
    <member name="P:System.Web.UI.Design.WebControls.ListControls.DataListGeneralPage.HelpKeyword">
    </member>
    <member name="M:System.Web.UI.Design.WebControls.ListControls.FormatPage.#ctor">
      <summary>
   Creates a new instance of FormatPage.
 </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.ListControls.FormatPage.LoadComponent">
      <summary>
   Loads the component into the page.
 </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.ListControls.FormatPage.OnHandleCreated(System.EventArgs)">
      <summary>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.ListControls.FormatPage.SaveComponent">
      <summary>
   Saves the component loaded into the page.
 </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.ListControls.FormatPage.SetComponent(System.ComponentModel.IComponent)">
      <summary>
   Sets the component that is to be edited in the page.
 </summary>
    </member>
    <member name="P:System.Web.UI.Design.WebControls.ListControls.FormatPage.HelpKeyword">
    </member>
    <member name="M:System.Web.UI.Design.WebControls.ListControls.FormatPage.FormatTreeNode.#ctor(System.String,System.Web.UI.Design.WebControls.ListControls.FormatPage.FormatObject)">
      <summary>
      </summary>
    </member>
    <member name="P:System.Web.UI.Design.WebControls.ListControls.FormatPage.FormatTreeNode.Dirty">
      <summary>
      </summary>
    </member>
    <member name="P:System.Web.UI.Design.WebControls.ListControls.FormatPage.FormatTreeNode.FormatObject">
      <summary>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.ListControls.FormatPage.FormatStyle.#ctor(System.Web.UI.WebControls.Style)">
      <summary>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.ListControls.FormatPage.FormatStyle.LoadFormatInfo">
      <summary>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.ListControls.FormatPage.FormatStyle.SaveFormatInfo">
      <summary>
      </summary>
    </member>
    <member name="P:System.Web.UI.Design.WebControls.ListControls.FormatPage.FormatStyle.IsTableItemStyle">
      <summary>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.ListControls.FormatPage.FormatColumn.#ctor(System.Web.UI.WebControls.DataGridColumn)">
      <summary>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.ListControls.FormatPage.FormatColumn.LoadFormatInfo">
      <summary>
      </summary>
    </member>
    <member name="M:System.Web.UI.Design.WebControls.ListControls.FormatPage.FormatColumn.SaveFormatInfo">
      <summary>
      </summary>
    </member>
    <member name="M:System.ServiceProcess.Design.ServiceControllerDesigner.PreFilterProperties(System.Collections.IDictionary)">
    </member>
    <member name="M:System.Messaging.Design.MessageDesigner.PreFilterProperties(System.Collections.IDictionary)">
    </member>
  </members>
</doc>