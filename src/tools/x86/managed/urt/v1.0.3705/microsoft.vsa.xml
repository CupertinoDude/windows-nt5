<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Microsoft.Vsa</name>
  </assembly>
  <members>
    <member name="P:Microsoft.Vsa.IVsaEngine.Evidence">
      <summary>
        <para>Provides evidence for the purpose of validating the current object's identity.</para>
      </summary>
    </member>
    <member name="M:Microsoft.Vsa.IVsaCodeItem.AddEventSource(System.String,System.String)">
      <summary>
        <para>Adds an event source to the code item. The code item uses the event source to hook up an event to the named event source by calling the <see cref="M:Microsoft.Vsa.IVsaSite.GetEventSourceInstance(System.String,System.String)" qualify="true" /> method, which is implemented by the host.</para>
      </summary>
      <param name="eventSourceName">A programmatic name of the event source.</param>
      <param name="eventSourceType">The type name of the event source.</param>
    </member>
    <member name="M:Microsoft.Vsa.IVsaCodeItem.AppendSourceText(System.String)">
      <summary>
        <para>Appends specified text to the end of the code item.</para>
      </summary>
      <param name="text">The text to be appended to the code item.</param>
    </member>
    <member name="P:Microsoft.Vsa.IVsaCodeItem.CodeDOM">
      <summary>
        <para>Gets the code document object model (CodeDOM) represented in the code item.</para>
      </summary>
    </member>
    <member name="P:Microsoft.Vsa.IVsaCodeItem.SourceText">
      <summary>
        <para>Sets or gets the text of a specified code item, including auto-generated code, if any.</para>
      </summary>
      <returns>
        <para>Returns the source text of the code item.</para>
      </returns>
    </member>
    <member name="T:Microsoft.Vsa.IVsaCodeItem">
      <summary>
        <para>Represents a code item to be compiled by the script engine.</para>
      </summary>
    </member>
    <member name="M:Microsoft.Vsa.IVsaCodeItem.RemoveEventSource(System.String)">
      <summary>
        <para>Removes the specified event source from the code item.</para>
      </summary>
      <param name="eventSourceName">The programmatic name of the event source to be removed.</param>
    </member>
    <member name="P:Microsoft.Vsa.IVsaEngine.Assembly">
      <summary>
        <para>Gets a reference to the running assembly generated by the <see cref="M:Microsoft.Vsa.IVsaEngine.Run" qualify="true" /> method.</para>
      </summary>
      <returns>
        <para>Reference to the currently running assembly.</para>
      </returns>
    </member>
    <member name="M:Microsoft.Vsa.IVsaEngine.Close">
      <summary>
        <para>Closes the script engine and releases all resources. If the script engine is currently running, the <see cref="M:Microsoft.Vsa.IVsaEngine.Reset" qualify="true" /> method is called first.</para>
      </summary>
    </member>
    <member name="M:Microsoft.Vsa.IVsaEngine.Compile">
      <summary>
        <para>Causes the script engine to compile the existing source state.</para>
      </summary>
    </member>
    <member name="P:Microsoft.Vsa.IVsaEngine.GenerateDebugInfo">
      <summary>
        <para>Sets or gets a Boolean value that signifies whether the script engine produces debug information when the <see cref="M:Microsoft.Vsa.IVsaEngine.Compile" qualify="true" /> method is called.</para>
      </summary>
    </member>
    <member name="M:Microsoft.Vsa.IVsaEngine.GetOption(System.String)">
      <summary>
        <para>Gets implementation-specific options for a script engine.</para>
      </summary>
      <param name="name">The name of the option to get.</param>
      <returns>
        <para>Returns the value of the option.</para>
      </returns>
    </member>
    <member name="M:Microsoft.Vsa.IVsaEngine.InitNew">
      <summary>
        <para>Provides a notification that the initialization phase is complete and that the script engine is prepared for the addition of <see cref="T:Microsoft.Vsa.IVsaItem" /> objects.</para>
      </summary>
    </member>
    <member name="T:Microsoft.Vsa.IVsaEngine">
      <summary>
        <para>Defines the methods and properties that a script engine must support and provides programmatic access to the script engine.</para>
      </summary>
    </member>
    <member name="P:Microsoft.Vsa.IVsaEngine.IsCompiled">
      <summary>
        <para>Gets a Boolean value that signifies whether a script engine has successfully compiled the current source state.</para>
      </summary>
      <returns>
        <para>Returns <see langword="true" /> if the current source state of the engine is successfully compiled. Returns <see langword="false" /> if the script engine does not have a valid compiled state. The default value for this property is <see langword="false" />.</para>
      </returns>
    </member>
    <member name="P:Microsoft.Vsa.IVsaEngine.IsDirty">
      <summary>
        <para>Gets a Boolean value that reports whether the script engine's source state has changed since the last save operation, or since the script engine was originally loaded.</para>
      </summary>
      <returns>
        <para>Returns <see langword="true" /> if the script engine is dirty. Returns <see langword="false" /> if the script engine is not dirty. The default value for this property is <see langword="false" />.</para>
      </returns>
    </member>
    <member name="P:Microsoft.Vsa.IVsaEngine.IsRunning">
      <summary>
        <para>Gets a Boolean value that reports whether the script engine is currently in run mode.</para>
      </summary>
      <returns>
        <para>Returns <see langword="true" /> if the script engine is running. Returns <see langword="false" /> if the script engine is not running. The default value for this property is <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:Microsoft.Vsa.IVsaEngine.IsValidIdentifier(System.String)">
      <summary>
        <para>Checks whether the supplied identifier is valid for the script engine.</para>
      </summary>
      <param name="identifier">A string value provided as identifier.</param>
      <returns>
        <para>Returns <see langword="true" /> if the identifier is valid; otherwise, it returns <see langword="false" />.</para>
      </returns>
    </member>
    <member name="P:Microsoft.Vsa.IVsaEngine.Items">
      <summary>
        <para>Gets the <see cref="T:Microsoft.Vsa.IVsaItems" /> collection of <see cref="T:Microsoft.Vsa.IVsaItem" /> objects, which represent all items added to the script engine using the <see cref="M:Microsoft.Vsa.IVsaItems.CreateItem(System.String,Microsoft.Vsa.VsaItemType,Microsoft.Vsa.VsaItemFlag)" qualify="true" /> method, including code items, reference items, and global items.</para>
      </summary>
      <returns>
        <para>Returns an <see cref="T:Microsoft.Vsa.IVsaItems" /> collection.</para>
      </returns>
    </member>
    <member name="P:Microsoft.Vsa.IVsaEngine.Language">
      <summary>
        <para>Gets the nonlocalized name of the programming language supported by the script engine.</para>
      </summary>
      <returns>
        <para>Returns the English-language name of the programming language supported by the script engine.</para>
      </returns>
    </member>
    <member name="P:Microsoft.Vsa.IVsaEngine.LCID">
      <summary>
        <para>Gets or sets the geographical locale and language in which to report exception messages.</para>
      </summary>
      <returns>
        <para>Returns an integer value representing the locale in which exception messages are to be reported. </para>
      </returns>
    </member>
    <member name="M:Microsoft.Vsa.IVsaEngine.LoadSourceState(Microsoft.Vsa.IVsaPersistSite)">
      <summary>
        <para>Directs the script engine to load source items from their point of persistence, as specified by the host-provided object that implements the <see cref="T:Microsoft.Vsa.IVsaPersistSite" /> interface.</para>
      </summary>
      <param name="site">The site from which the specified source items is loaded.</param>
    </member>
    <member name="P:Microsoft.Vsa.IVsaEngine.Name">
      <summary>
        <para>Sets or gets the display name of the script engine that is used primarily for identifying individual script engines to users in a hosted environment.</para>
      </summary>
      <returns>
        <para>Returns the value of the script engine's <see cref="P:Microsoft.Vsa.IVsaEngine.Name" /> property, which may be the empty string.</para>
      </returns>
    </member>
    <member name="M:Microsoft.Vsa.IVsaEngine.Reset">
      <summary>
        <para>Removes the script engine from the running state and disconnects automatically bound event handlers.</para>
      </summary>
    </member>
    <member name="M:Microsoft.Vsa.IVsaEngine.RevokeCache">
      <summary>
        <para>Invalidates the cached assembly for a script engine, as specified by its root moniker.</para>
      </summary>
    </member>
    <member name="P:Microsoft.Vsa.IVsaEngine.RootMoniker">
      <summary>
        <para>Sets or gets a script engine's root moniker.</para>
      </summary>
      <returns>
        <para>Returns the current value of the <see cref="P:Microsoft.Vsa.IVsaEngine.RootMoniker" /> property.</para>
      </returns>
    </member>
    <member name="P:Microsoft.Vsa.IVsaEngine.RootNamespace">
      <summary>
        <para>Sets or gets the root namespace used by the script engine.</para>
      </summary>
      <returns>
        <para>Returns the string value of the root namespace.</para>
      </returns>
    </member>
    <member name="M:Microsoft.Vsa.IVsaEngine.Run">
      <summary>
        <para>Initiates execution of compiled code in the script engine and binds all event handlers.</para>
      </summary>
    </member>
    <member name="M:Microsoft.Vsa.IVsaEngine.SaveCompiledState(System.Byte[]@,System.Byte[]@)">
      <summary>
        <para>Saves the compiled state of the script engine; optionally, it also saves debugging information.</para>
      </summary>
      <param name="pe">The compiled state of the script engine.</param>
      <param name="pdb">Specifies debugging information contained in the .PDB file corresponding to the PE (portable executable).</param>
    </member>
    <member name="M:Microsoft.Vsa.IVsaEngine.SaveSourceState(Microsoft.Vsa.IVsaPersistSite)">
      <summary>
        <para>Directs the script engine to persist its source state to the specified <see cref="T:Microsoft.Vsa.IVsaPersistSite" /> object.</para>
      </summary>
      <param name="site">The site established by the <see cref="T:Microsoft.Vsa.IVsaPersistSite" /> interface to which source state is saved.</param>
    </member>
    <member name="M:Microsoft.Vsa.IVsaEngine.SetOption(System.String,System.Object)">
      <summary>
        <para>Sets implementation-specific options for a script engine.</para>
      </summary>
      <param name="name">The name of the option to set.</param>
      <param name="value">The value for the option being set.</param>
    </member>
    <member name="P:Microsoft.Vsa.IVsaEngine.Site">
      <summary>
        <para>Sets or gets the host-implemented <see cref="T:Microsoft.Vsa.IVsaSite" /> object that is used by the script engine to communicate with the host.</para>
      </summary>
      <returns>
        <para>Returns a reference to the current <see cref="T:Microsoft.Vsa.IVsaSite" /> object.</para>
      </returns>
    </member>
    <member name="P:Microsoft.Vsa.IVsaEngine.Version">
      <summary>
        <para>Gets the current version of the language compiler supported by the script engine, in the form <c>Major.Minor.Revision.Build</c>.</para>
      </summary>
      <returns>
        <para>String value of the current version, in the format <c>Major.Minor.Revision.Build</c>.</para>
      </returns>
    </member>
    <member name="P:Microsoft.Vsa.IVsaError.EndColumn">
      <summary>
        <para>Gets the ending column number for the source text that caused the error, if available.</para>
      </summary>
    </member>
    <member name="P:Microsoft.Vsa.IVsaError.Description">
      <summary>
        <para>Gets a brief description of the error, in some instances returning a reference to the token(s) in the source code that are causing the error.</para>
      </summary>
    </member>
    <member name="P:Microsoft.Vsa.IVsaError.Number">
      <summary>
        <para>Gets a number that uniquely identifies the error.</para>
      </summary>
    </member>
    <member name="T:Microsoft.Vsa.IVsaError">
      <summary>
        <para>Provides access to compilation errors encountered during execution of the <see cref="M:Microsoft.Vsa.IVsaEngine.Compile" qualify="true" /> method.</para>
      </summary>
    </member>
    <member name="P:Microsoft.Vsa.IVsaError.Line">
      <summary>
        <para>Gets the line number on which an error occurs.</para>
      </summary>
    </member>
    <member name="P:Microsoft.Vsa.IVsaError.LineText">
      <summary>
        <para>Gets the text of the source code from the line that caused the error.</para>
      </summary>
    </member>
    <member name="P:Microsoft.Vsa.IVsaError.Severity">
      <summary>
        <para>Sets the severity of the error.</para>
      </summary>
    </member>
    <member name="P:Microsoft.Vsa.IVsaError.SourceMoniker">
      <summary>
        <para>Gets the fully qualified name of the source item that contained the error, in a format recognizable by the script engine.</para>
      </summary>
    </member>
    <member name="P:Microsoft.Vsa.IVsaError.SourceItem">
      <summary>
        <para>Gets a reference to the <see cref="T:Microsoft.Vsa.IVsaItem" /> object that generated the error.</para>
      </summary>
    </member>
    <member name="P:Microsoft.Vsa.IVsaError.StartColumn">
      <summary>
        <para>Gets the starting column number for the source text that caused the error, if available.</para>
      </summary>
    </member>
    <member name="P:Microsoft.Vsa.IVsaGlobalItem.ExposeMembers">
      <summary>
        <para>Sets a value indicating whether the members of the global object should be made available to the script engine. [Not presently supported.]</para>
      </summary>
    </member>
    <member name="T:Microsoft.Vsa.IVsaGlobalItem">
      <summary>
        <para>Describes global objects added to the script engine.</para>
      </summary>
    </member>
    <member name="P:Microsoft.Vsa.IVsaGlobalItem.TypeString">
      <summary>
        <para>Gets or sets the type of the global item.</para>
      </summary>
    </member>
    <member name="M:Microsoft.Vsa.IVsaItem.GetOption(System.String)">
      <summary>
        <para>Gets implementation-specific options for a script engine.</para>
      </summary>
      <param name="name">The name of the option to retrieve.</param>
      <returns>
        <para>Returns the value of the specified option.</para>
      </returns>
    </member>
    <member name="P:Microsoft.Vsa.IVsaItem.IsDirty">
      <summary>
        <para>Returns a value indicating whether the current in-memory representation of the item differs from the persisted representation.</para>
      </summary>
      <returns>
        <para>Returns <see langword="true" /> if the item is dirty, and thus requires saving; returns <see langword="false" /> if the item is not dirty.</para>
      </returns>
    </member>
    <member name="P:Microsoft.Vsa.IVsaItem.ItemType">
      <summary>
        <para>Gets the specified object's type, as determined by the <see cref="M:Microsoft.Vsa.IVsaItems.CreateItem(System.String,Microsoft.Vsa.VsaItemType,Microsoft.Vsa.VsaItemFlag)" qualify="true" /> method.</para>
      </summary>
      <returns>
        <para>A type as enumerated by the <see cref="T:Microsoft.Vsa.VsaItemType" /> enumeration.</para>
      </returns>
    </member>
    <member name="P:Microsoft.Vsa.IVsaItem.Name">
      <summary>
        <para>Sets or gets the name of the item.</para>
      </summary>
    </member>
    <member name="T:Microsoft.Vsa.IVsaItem">
      <summary>
        <para>Defines an interface for all items added to .NET script engine, including code items, reference items, and global items. It defines generic properties and methods that apply to all item types recognized by the engine.</para>
      </summary>
    </member>
    <member name="P:Microsoft.Vsa.IVsaItems.Count">
      <summary>
        <para>Gets the number of items in the specified collection.</para>
      </summary>
      <returns>
        <para>Returns the integer value for the number of items in the collection.</para>
      </returns>
    </member>
    <member name="M:Microsoft.Vsa.IVsaItems.CreateItem(System.String,Microsoft.Vsa.VsaItemType,Microsoft.Vsa.VsaItemFlag)">
      <summary>
        <para>Creates a new instance of one of the <see cref="T:Microsoft.Vsa.IVsaItem" /> types, as defined in the <see cref="T:Microsoft.Vsa.VsaItemType" /> enumeration.</para>
      </summary>
      <param name="name">The name to associate with the new item.</param>
      <param name="itemType">The type of item created, as defined in the <see cref="T:Microsoft.Vsa.VsaItemType" /> enumeration.</param>
      <param name="itemFlag">The optional flag to specify the initial content of a Code item.</param>
    </member>
    <member name="M:Microsoft.Vsa.IVsaItem.SetOption(System.String,System.Object)">
      <summary>
        <para>Sets implementation-specific options for a script engine.</para>
      </summary>
      <param name="name">The name of the option to set.</param>
      <param name="value">A new value for the option.</param>
    </member>
    <member name="T:Microsoft.Vsa.IVsaItems">
      <summary>
        <para>Defines an interface for a collection of <see cref="T:Microsoft.Vsa.IVsaItem" /> objects, which can be addressed either by name or by index.</para>
      </summary>
    </member>
    <member name="P:Microsoft.Vsa.IVsaItems.Item(System.Int32)">
      <summary>
        <para>Gets an item from the collection by its index value.</para>
      </summary>
      <param name="index">A 0-based index of the retrievable items.</param>
      <returns>
        <para>Returns the item at the specified index.</para>
      </returns>
    </member>
    <member name="P:Microsoft.Vsa.IVsaItems.Item(System.String)">
      <summary>
        <para>Gets an item from the collection by its name.</para>
      </summary>
      <param name="name">The name of the item to retrieve from the collection.</param>
      <returns>
        <para>Returns the item specified by name.</para>
      </returns>
    </member>
    <member name="M:Microsoft.Vsa.IVsaItems.Remove(System.Int32)">
      <summary>
        <para>Removes an item from the collection, as specified by its index value.</para>
      </summary>
      <param name="index">The index value of the item to be removed.</param>
    </member>
    <member name="M:Microsoft.Vsa.IVsaItems.Remove(System.String)">
      <summary>
        <para>Removes an item from the collection, as specified by its name.</para>
      </summary>
      <param name="name">The name of the item to be removed from the collection.</param>
    </member>
    <member name="T:Microsoft.Vsa.IVsaPersistSite">
      <summary>
        <para>Manages project persistence and stores and retrieves code and other items using save and load operations implemented by the host.</para>
      </summary>
    </member>
    <member name="M:Microsoft.Vsa.IVsaPersistSite.LoadElement(System.String)">
      <summary>
        <para>Gets the source string previously saved using the <see cref="M:Microsoft.Vsa.IVsaPersistSite.SaveElement(System.String,System.String)" qualify="true" /> method.</para>
      </summary>
      <param name="name">The name of the code item to be loaded. This can be a null reference when loading the Project file.</param>
      <returns>
        <para>Returns the contents of the source-code element associated with the <paramref name="name" /> parameter.</para>
      </returns>
    </member>
    <member name="M:Microsoft.Vsa.IVsaPersistSite.SaveElement(System.String,System.String)">
      <summary>
        <para>Saves an arbitrary source string with a given <paramref name="name" /> parameter, which can then be used in a call to the <see cref="M:Microsoft.Vsa.IVsaPersistSite.LoadElement(System.String)" qualify="true" /> method to reload the string.</para>
      </summary>
      <param name="name">A name to associate with the specified source item. This can be a null reference when saving the Project file..</param>
      <param name="source">The source string for the item.</param>
    </member>
    <member name="P:Microsoft.Vsa.IVsaReferenceItem.AssemblyName">
      <summary>
        <para>Gets or sets the name of the referenced assembly.</para>
      </summary>
    </member>
    <member name="T:Microsoft.Vsa.IVsaReferenceItem">
      <summary>
        <para>Describes a reference added to the script engine.</para>
      </summary>
    </member>
    <member name="M:Microsoft.Vsa.IVsaSite.GetCompiledState(System.Byte[]@,System.Byte[]@)">
      <summary>
        <para>Gets the compiled state of a script engine, and, optionally, associated debugging information.</para>
      </summary>
      <param name="pe">The compiled state of the engine; an assembly in byte form.</param>
      <param name="debugInfo">The debugging information for the assembly, or a null reference if such information does not exist or is not available.</param>
    </member>
    <member name="M:Microsoft.Vsa.IVsaSite.GetEventSourceInstance(System.String,System.String)">
      <summary>
        <para>Gets a reference to an event source previously added to a script engine using the <see cref="M:Microsoft.Vsa.IVsaCodeItem.AddEventSource(System.String,System.String)" qualify="true" /> method.</para>
      </summary>
      <param name="itemName">The specified item name.</param>
      <param name="eventSourceName">The specified event source name.</param>
      <returns>
        <para>Returns the event source to the engine.</para>
      </returns>
    </member>
    <member name="M:Microsoft.Vsa.IVsaSite.GetGlobalInstance(System.String)">
      <summary>
        <para>Gets a reference to a global item, such as the host-provided application object.</para>
      </summary>
      <param name="name">The specified name of the global object to retrieve.</param>
      <returns>
        <para>Returns a reference to the global object.</para>
      </returns>
    </member>
    <member name="T:Microsoft.Vsa.IVsaSite">
      <summary>
        <para>Enables communication between the host and the script engine. This interface is implemented by the host.</para>
      </summary>
    </member>
    <member name="M:Microsoft.Vsa.IVsaSite.Notify(System.String,System.Object)">
      <summary>
        <para>Notifies the host about events generated by the .NET script engine.</para>
      </summary>
      <param name="notify">A string identifying the notification.</param>
      <param name="info">An object containing additional information about the notification.</param>
    </member>
    <member name="M:Microsoft.Vsa.IVsaSite.OnCompilerError(Microsoft.Vsa.IVsaError)">
      <summary>
        <para>Notifies the host about compiler errors encountered by the script engine.</para>
      </summary>
      <param name="error">The <see cref="T:Microsoft.Vsa.IVsaError" /> object representing the offending error.</param>
    </member>
    <member name="T:Microsoft.Vsa.VsaError">
      <summary>
        <para>Defines the set of exceptions that can be thrown by a .NET script engine.</para>
      </summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.AppDomainCannotBeSet">
      <summary>Value: 0x80133000

<para>Exception string: The application domain cannot be set.</para><para>Thrown by the <see cref="M:Microsoft.Vsa.IVsaEngine.GetOption(System.String)" qualify="true" /> or<see cref="M:Microsoft.Vsa.IVsaEngine.SetOption(System.String,System.Object)" qualify="true" /> methods when attempts fail to set the AppDomain option on a managed engine, such as the Visual BasicÂ .NET or JScriptÂ .NET script engines. Managed script engines do not support using custom application domains. Managed script engines will always use the application domain in which they are running.</para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.AppDomainInvalid">
      <summary>Value: 0x80133001

<para>Exception string: The specified application domain is not valid.</para><para>Thrown by the <see cref="M:Microsoft.Vsa.IVsaEngine.GetOption(System.String)" qualify="true" /> or<see cref="M:Microsoft.Vsa.IVsaEngine.SetOption(System.String,System.Object)" qualify="true" /> methods when attempting to set an <see langword="AppDomain" /> reference that is not valid. To reset the <see langword="AppDomain" /> option to a null reference, call the <see cref="M:Microsoft.Vsa.IVsaEngine.Reset" qualify="true" /> method. </para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.ApplicationBaseCannotBeSet">
      <summary>Value: 0x80133002

<para>Exception string: Application base cannot be set.</para><para>Thrown by the <see cref="M:Microsoft.Vsa.IVsaEngine.GetOption(System.String)" qualify="true" /> or<see cref="M:Microsoft.Vsa.IVsaEngine.SetOption(System.String,System.Object)" qualify="true" /> methods when attempts to get or set the ApplicationBase option on a managed engine, such as the Visual BasicÂ .NET or JScriptÂ .NET script engines. The host must set the <see langword="ApplicationBase" /> option in the application domain in which it creates its script engine. </para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.ApplicationBaseInvalid">
      <summary>Value: 0x80133003

<para>Exception string: The specified application base directory is not valid.</para><para>Thrown by the <see cref="M:Microsoft.Vsa.IVsaEngine.GetOption(System.String)" qualify="true" /> or<see cref="M:Microsoft.Vsa.IVsaEngine.SetOption(System.String,System.Object)" qualify="true" /> methods when attempts to get or set the ApplicationBase option on an engine, and by the <see cref="M:Microsoft.Vsa.IVsaEngine.Run" qualify="true" /> method when the directory specified as the Application Base directory is not a valid directory.</para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.AssemblyExpected">
      <summary>Value: 0x80133004

<para>Exception string: <see cref="T:Microsoft.Vsa.IVsaReferenceItem" /> does not reference a valid assembly.</para><para>Thrown by the <see cref="M:Microsoft.Vsa.IVsaEngine.Compile" qualify="true" /> method when one of the <see cref="T:Microsoft.Vsa.IVsaReferenceItem" /> objects contained in the <see cref="T:Microsoft.Vsa.IVsaItems" /> collection does not represent a valid assembly. </para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.AssemblyNameInvalid">
      <summary>Value: 0x80133005

<para>Exception string: Assembly name is not valid.</para><para>Thrown by the <see cref="P:Microsoft.Vsa.IVsaReferenceItem.AssemblyName" qualify="true" /> property when an assembly name that is not valid is specified for an <see cref="T:Microsoft.Vsa.IVsaReferenceItem" /> object. </para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.BadAssembly">
      <summary>Value: 0x80133006

<para>Exception string: Assembly format is not valid.</para><para>Thrown when the assembly provided to the engine is not valid. This exception typically occurs when an engine tries to run or use the assembly. </para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.CachedAssemblyInvalid">
      <summary>Value: 0x80133007

<para>Exception string: The cached assembly is not valid.</para><para>Thrown by the <see cref="M:Microsoft.Vsa.IVsaEngine.Run" qualify="true" /> method when it is called and it tries to use a previously cached assembly, but the assembly is not valid, for example, it is <see langword="null" />. </para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.CallbackUnexpected">
      <summary>Value: 0x80133008

<para>Exception string: Callback cannot be made at this time.</para><para>Thrown by multiple methods when one of the <see cref="T:Microsoft.Vsa.IVsaSite" /> or <see cref="T:Microsoft.Vsa.IVsaPersistSite" /> callback methods is called at an unexpected time. For example, the <see cref="M:Microsoft.Vsa.IVsaSite.GetCompiledState(System.Byte[]@,System.Byte[]@)" qualify="true" /> method should only be called by an engine as a result of a call to the <see cref="M:Microsoft.Vsa.IVsaEngine.Run" qualify="true" /> method. If it is called at any other time, a CallbackUnexpected exception will be thrown. </para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.CodeDOMNotAvailable">
      <summary>Value: 0x80133009

<para>Exception string: A valid Code Document Object Model (CodeDOM) is not available.</para><para>Thrown by the <see cref="P:Microsoft.Vsa.IVsaCodeItem.CodeDOM" qualify="true" /> property when the property is not available to be read. The engine either does not support the property or it requires an explicit call to the <see cref="M:Microsoft.Vsa.IVsaEngine.Compile" qualify="true" /> method in order to generate the Document Object Model (DOM). </para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.CompiledStateNotFound">
      <summary>Value: 0x8013300A

<para>Exception string: The specified compiled state could not be loaded.</para><para>Thrown by the <see cref="M:Microsoft.Vsa.IVsaSite.GetCompiledState(System.Byte[]@,System.Byte[]@)" qualify="true" /> method when it is called for an engine that does not have compiled state. </para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.DebugInfoNotSupported">
      <summary>Value: 0x8013300B

<para>Exception string: The use of debug information is not supported.</para><para>Thrown by the <see cref="P:Microsoft.Vsa.IVsaEngine.GenerateDebugInfo" qualify="true" /> property when it is set to <see langword="true" />, but the engine does not support the generation of debugging information. Compilation continues, but the engine compiles code without debug information. </para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.ElementNameInvalid">
      <summary>Value: 0x8013300C

<para>Exception string: The element name is not valid.</para><para>Thrown by the <see cref="M:Microsoft.Vsa.IVsaPersistSite.LoadElement(System.String)" qualify="true" /> and <see cref="M:Microsoft.Vsa.IVsaPersistSite.SaveElement(System.String,System.String)" qualify="true" /> methods when either is called with a name parameter that is not valid, for example, one that contains characters that are not valid. Note that the host must not throw an ElementNameInvalid Exception when the <paramref name="name" /> parameter is a null pointer, as a null pointer is a valid argument used to request engine-level data. </para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.ElementNotFound">
      <summary>Value: 0x8013300D

<para>Exception string: The element was not found.</para><para>Thrown by <see cref="M:Microsoft.Vsa.IVsaPersistSite.LoadElement(System.String)" qualify="true" /> method when it is called with a name parameter that is not valid, that is, one that does not correspond to a previously saved element. </para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.EngineBusy">
      <summary>Value: 0x8013300E

<para>Exception string: Engine is busy servicing another thread.</para><para>Thrown by all members when an engine is currently servicing a request from another thread. By design, a .NET script engine should only be called from one thread at a time. </para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.EngineCannotClose">
      <summary>Value: 0x8013300F

<para>Exception string: The specified engine cannot be closed.</para><para>Thrown by <see cref="M:Microsoft.Vsa.IVsaEngine.Close" qualify="true" /> method when an attempt is made to call this method, but the.NET script engine cannot be closed properly.</para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.EngineCannotReset">
      <summary>Value: 0x80133010

<para>Exception string: The specified engine cannot be reset.</para><para>Thrown by the <see cref="M:Microsoft.Vsa.IVsaEngine.Reset" qualify="true" /> method when it is called, but the .NET script engine could not be reset or its events could not be unhooked. </para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.EngineClosed">
      <summary>Value: 0x80133011

<para>Exception string: Engine has been closed.</para><para>Thrown in most cases after the .NET script engine has been closed using a call to the <see cref="M:Microsoft.Vsa.IVsaEngine.Close" qualify="true" /> method. Once the <see langword="Close" /> method has been called, the engine can no longer be used, and a new script engine must be created to perform any tasks. </para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.EngineEmpty">
      <summary>Value: 0x80133012

<para>Exception string: The specified engine has no source items to compile.</para><para>Thrown by the <see cref="M:Microsoft.Vsa.IVsaEngine.Compile" qualify="true" /> method when it is called, but there are no items in the <see cref="T:Microsoft.Vsa.IVsaItems" /> collection to compile, that is, the <see cref="P:Microsoft.Vsa.IVsaItems.Count" qualify="true" /> property = 0. </para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.EngineInitialized">
      <summary>Value: 0x80133013

<para>Exception string: Engine has already been initialized.</para><para>Thrown by the <see cref="M:Microsoft.Vsa.IVsaEngine.LoadSourceState(Microsoft.Vsa.IVsaPersistSite)" qualify="true" /> and <see cref="M:Microsoft.Vsa.IVsaEngine.InitNew" qualify="true" /> methods when these methods are called but the .NET script engine has already been initialized. If the host wants to load source state or initialize a new script engine, the respective methods must be the first ones called after setting the <see cref="P:Microsoft.Vsa.IVsaEngine.RootMoniker" qualify="true" /> and <see cref="P:Microsoft.Vsa.IVsaEngine.Site" qualify="true" /> properties. </para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.EngineNameInUse">
      <summary>Value: 0x80133014

<para>Exception string: The specified engine name is already in use by another engine.</para><para>Thrown by <see cref="P:Microsoft.Vsa.IVsaEngine.Name" qualify="true" /> property when an attempt is made to set it to the same name as that of an existing .NET script engine inside the host. While the <see langword="Name" /> property does not need to be globally unique, it cannot be the same as the name of a script engine that is currently being hosted.</para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.EngineNotCompiled">
      <summary>Value: 0x80133015

<para>Exception string: The specified engine is not compiled.</para><para>Thrown by the <see cref="M:Microsoft.Vsa.IVsaEngine.Run" qualify="true" /> and <see cref="M:Microsoft.Vsa.IVsaEngine.SaveCompiledState(System.Byte[]@,System.Byte[]@)" qualify="true" /> methods when there is no compiled state to run or save. Either the .NET script engine must compile the code with a call to the <see cref="M:Microsoft.Vsa.IVsaEngine.Compile" qualify="true" /> method, or the <see cref="M:Microsoft.Vsa.IVsaEngine.LoadSourceState(Microsoft.Vsa.IVsaPersistSite)" qualify="true" /> method must be called before the script engine can be run or saved. </para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.EngineNotInitialized">
      <summary>Value: 0x80133016

<para>Exception string: The specified engine has not been initialized.</para><para>Thrown by multiple members when the .NET script engine has not been properly initialized, and the host tries to access a property or method that requires the script engine to be initialized. </para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.EngineNotRunning">
      <summary>Value: 0x80133017

<para>Exception string: The specified engine must be running.</para><para>Thrown by the <see cref="M:Microsoft.Vsa.IVsaEngine.Reset" qualify="true" /> method and <see cref="P:Microsoft.Vsa.IVsaEngine.Assembly" qualify="true" /> property when either is called and the specified .NET script engine is not running. </para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.EngineRunning">
      <summary>Value: 0x80133018

<para>Exception string: Engine is running.</para><para>Thrown by multiple members when the .NET script engine is running, and the host attempts to perform an operation that is not allowed while the script engine is running. For example, attempting to create a new code item using the <see cref="M:Microsoft.Vsa.IVsaItems.CreateItem(System.String,Microsoft.Vsa.VsaItemType,Microsoft.Vsa.VsaItemFlag)" qualify="true" /> method will produce this exception if the engine is in the running state. </para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.EventSourceInvalid">
      <summary>Value: 0x80133019

<para>Exception string: The specified event source does not exist.</para><para>Thrown by the <see cref="M:Microsoft.Vsa.IVsaSite.GetEventSourceInstance(System.String,System.String)" qualify="true" /> method when it is called with a parameter or pairing of parameters that is not valid. Either the itemName parameter refers to an item that the host did not add to the engine, or the eventSourceName parameter refers to an event source that was not added to the specified item. </para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.EventSourceNameInUse">
      <summary>Value: 0x8013301A

<para>Exception string: The specified event source name is already in use.</para><para>Thrown by the <see cref="M:Microsoft.Vsa.IVsaCodeItem.AddEventSource(System.String,System.String)" qualify="true" /> method when it is called with an eventSourceName parameter that has previously been used as an event source name. </para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.EventSourceNameInvalid">
      <summary>Value: 0x8013301B

<para>Exception string: The specified event source name is not valid.</para><para>Thrown by the <see cref="M:Microsoft.Vsa.IVsaCodeItem.AddEventSource(System.String,System.String)" qualify="true" /> and <see cref="M:Microsoft.Vsa.IVsaCodeItem.RemoveEventSource(System.String)" qualify="true" /> methods when either is called with an eventSourceName parameter that is not a valid identifier. Hosts can determine whether an identifier is valid by first calling the <see cref="M:Microsoft.Vsa.IVsaEngine.IsValidIdentifier(System.String)" qualify="true" /> method. </para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.EventSourceNotFound">
      <summary>Value: 0x8013301C

<para>Exception string: The specified event source not found.</para><para>Thrown by the <see cref="M:Microsoft.Vsa.IVsaCodeItem.RemoveEventSource(System.String)" qualify="true" /> method when it is called with an eventNameType parameter that is not already in use as an event source in the code item. </para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.EventSourceTypeInvalid">
      <summary>Value: 0x8013301D

<para>Exception string: The specified event source type is not valid.</para><para>Thrown by the <see cref="M:Microsoft.Vsa.IVsaCodeItem.AddEventSource(System.String,System.String)" qualify="true" /> method when it is called with an eventSourceType parameter that is not a valid type. Note that this is not true for the Visual BasicÂ .NET script engine, which instead reports a compile exception in this situation. </para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.GetCompiledStateFailed">
      <summary>Value: 0x8013301E

<para>Exception string: The specified compiled state could not be loaded.</para><para>Thrown by the <see cref="M:Microsoft.Vsa.IVsaSite.GetCompiledState(System.Byte[]@,System.Byte[]@)" qualify="true" /> and <see cref="M:Microsoft.Vsa.IVsaEngine.Run" qualify="true" /> methods when the <see langword="GetCompiledState" /> method fails. The <see langword="Run" /> method returns to the caller the <see cref="F:Microsoft.Vsa.VsaError.GetCompiledStateFailed" /> exception returned by the <see langword="GetCompiledState" /> method. The <see langword="Run" /> method may also generate the GetCompiledStateFailed exception if the assembly cache throws an exception. </para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.GlobalInstanceInvalid">
      <summary>Value: 0x8013301F

<para>Exception string: The specified global instance does not exist.</para><para>Thrown by <see cref="M:Microsoft.Vsa.IVsaSite.GetGlobalInstance(System.String)" qualify="true" /> method when it is called with an invalid name parameter, that is, one that was not added using the <see cref="M:Microsoft.Vsa.IVsaItems.CreateItem(System.String,Microsoft.Vsa.VsaItemType,Microsoft.Vsa.VsaItemFlag)" qualify="true" /> method. </para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.GlobalInstanceTypeInvalid">
      <summary>Value: 0x80133020

<para>Exception string: Global instance type is not valid.</para><para>Thrown when the <see langword="TypeString" /> property of an <see cref="T:Microsoft.Vsa.IVsaGlobalItem" /> object is not valid. </para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.InternalCompilerError">
      <summary>Value: 0x80133021

<para>Exception string: An internal compiler exception has occurred.</para><para>Thrown by the <see cref="M:Microsoft.Vsa.IVsaEngine.Compile" qualify="true" /> method when it is called and an unexpected exception occurs within the compiler. This exception is not thrown for compilation errors, which are signaled to the host by means of the <see cref="M:Microsoft.Vsa.IVsaSite.OnCompilerError(Microsoft.Vsa.IVsaError)" qualify="true" /> method, but for exceptions in the compiler itself. </para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.ItemCannotBeRemoved">
      <summary>Value: 0x80133022

<para>Exception string: The specified item cannot be removed.</para><para>Thrown by the <see cref="M:Microsoft.Vsa.IVsaItems.Remove(System.String)" qualify="true" /> and <see cref="M:Microsoft.Vsa.IVsaItems.Remove(System.Int32)" qualify="true" /> methods when an attempt is made to remove an item that cannot be removed.</para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.ItemFlagNotSupported">
      <summary>Value: 0x80133023

<para>Exception string: The specified flag is not supported.</para><para>Thrown by the <see cref="M:Microsoft.Vsa.IVsaItems.CreateItem(System.String,Microsoft.Vsa.VsaItemType,Microsoft.Vsa.VsaItemFlag)" qualify="true" /> method when the call specifies a flag that is not valid, or a flag that is not supported by the host. </para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.ItemNameInUse">
      <summary>Value: 0x80133024 

<para>Exception string: The specified item's name is already in use.</para><para>Thrown by the <see cref="M:Microsoft.Vsa.IVsaItems.CreateItem(System.String,Microsoft.Vsa.VsaItemType,Microsoft.Vsa.VsaItemFlag)" qualify="true" /> method and the <see cref="P:Microsoft.Vsa.IVsaItem.Name" qualify="true" /> property when a call to the <see langword="CreateItem" /> method is made with a <paramref name="name" /> parameter that is already in use, or when an existing item has its <see langword="Name" /> property set to a name that is already in use. </para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.ItemNameInvalid">
      <summary>Value: 0x80133025

<para>Exception string: Item name is not valid.</para><para>Thrown by the <see cref="M:Microsoft.Vsa.IVsaItems.CreateItem(System.String,Microsoft.Vsa.VsaItemType,Microsoft.Vsa.VsaItemFlag)" qualify="true" /> method and <see cref="P:Microsoft.Vsa.IVsaItem.Name" qualify="true" /> property when the name of an item is not valid. The name of an item can be set either when calling the <see langword="CreateItem" /> method, or when setting the <see langword="Name" /> property. Use the <see cref="M:Microsoft.Vsa.IVsaEngine.IsValidIdentifier(System.String)" qualify="true" /> method to determine whether an identifier is valid for the engine. </para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.ItemNotFound">
      <summary>Value: 0x80133026

<para>Exception string: The specified item not found in the collection.</para><para>Thrown by the <see cref="P:Microsoft.Vsa.IVsaItems.Item(System.String)" qualify="true" /> property, <see cref="M:Microsoft.Vsa.IVsaItems.Remove(System.String)" qualify="true" /> method, <see cref="P:Microsoft.Vsa.IVsaItems.Item(System.Int32)" qualify="true" /> property, and <see cref="M:Microsoft.Vsa.IVsaItems.Remove(System.Int32)" qualify="true" /> method when the <see cref="IVsaItems.Item(Int)" qualify="true" /> property is indexed using a parameter that is not valid. When using the string overload, the <paramref name="name" /> parameter must be the same as the name of an item already in the collection; when using the int overload, the <paramref name="index" /> parameter must be between 0 and the value of the <see cref="P:Microsoft.Vsa.IVsaItems.Count" qualify="true" /> property -1, inclusive. </para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.ItemTypeNotSupported">
      <summary>Value: 0x80133027

<para>Exception string: The specified item type is not supported.</para><para>Thrown by the <see cref="M:Microsoft.Vsa.IVsaItems.CreateItem(System.String,Microsoft.Vsa.VsaItemType,Microsoft.Vsa.VsaItemFlag)" qualify="true" /> method when a call is made with an <paramref name="itemType" /> parameter that is not supported by the engine. Note that not all engines support all the values of the <see cref="T:Microsoft.Vsa.VsaItemType" /> enumeration. </para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.LCIDNotSupported">
      <summary>Value: 0x80133028

<para>Exception string: The specified locale identifier (LCID) is not supported.</para><para>Thrown by the <see cref="P:Microsoft.Vsa.IVsaEngine.LCID" qualify="true" /> property when it is set to an LCID that is not supported by the engine. </para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.LoadElementFailed">
      <summary>Value: 0x80133029

<para>Exception string: The specified element could not be loaded.</para><para>Thrown by the <see cref="M:Microsoft.Vsa.IVsaEngine.LoadSourceState(Microsoft.Vsa.IVsaPersistSite)" qualify="true" /> and <see cref="M:Microsoft.Vsa.IVsaPersistSite.LoadElement(System.String)" qualify="true" /> methods when a call to the <see langword="LoadElement" /> method fails. The <see langword="LoadSourceState" /> method returns the LoadElementFailed exception from the <see cref="M:Microsoft.Vsa.IVsaPersistSite.LoadElement(System.String)" qualify="true" /> method. </para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.NotificationInvalid">
      <summary>Value: 0x8013302A

<para>Exception string: The specified notification is not valid.</para><para>Thrown by the <see cref="M:Microsoft.Vsa.IVsaSite.Notify(System.String,System.Object)" qualify="true" /> method when it is called with a notification that is not valid. It is generally recommended that host applications ignore notifications of which they are not aware, or to which they do not need to respond. However, in cases where they do handle a specific notification and the notification is not valid, hosts should throw the NotificationInvalid exception. </para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.OptionInvalid">
      <summary>Value: 0x8013302B

<para>Exception string: The specified option is not valid.</para><para>Thrown by the <see cref="M:Microsoft.Vsa.IVsaEngine.SetOption(System.String,System.Object)" qualify="true" /> and <see cref="M:Microsoft.Vsa.IVsaItem.SetOption(System.String,System.Object)" qualify="true" /> methods when the host attempts to set an option using either method, but the value supplied is not valid for the option. </para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.OptionNotSupported">
      <summary>Value: 0x8013302C

<para>Exception string: The specified option is not supported.</para><para>Thrown by the <see cref="M:Microsoft.Vsa.IVsaEngine.SetOption(System.String,System.Object)" qualify="true" /><see cref="M:Microsoft.Vsa.IVsaItem.SetOption(System.String,System.Object)" qualify="true" />, <see cref="M:Microsoft.Vsa.IVsaEngine.GetOption(System.String)" qualify="true" />, and <see cref="M:Microsoft.Vsa.IVsaItem.SetOption(System.String,System.Object)" qualify="true" /> methods when trying to get or set an option that is not supported by the engine. </para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.RevokeFailed">
      <summary>Value: 0x8013302D

<para>Exception string: A request to revoke the assembly cache failed.</para><para>Thrown by the <see cref="M:Microsoft.Vsa.IVsaEngine.RevokeCache" qualify="true" /> method when it is called, but it cannot revoke the cache. More information may be available by means of the <see cref="Sytem.Exception.InnerException" qualify="true" /> property. Note that if there is no cached assembly to revoke, the engine should return "success" and not throw this exception. </para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.RootMonikerAlreadySet">
      <summary>Value: 0x8013302E

<para>Exception string: The <see cref="P:Microsoft.Vsa.IVsaEngine.RootMoniker" qualify="true" /> property has already been set and cannot be set again.</para><para>Thrown by the <see cref="P:Microsoft.Vsa.IVsaEngine.RootMoniker" qualify="true" /> property when an attempt is made to set this property after it has already been set to a valid value. The <see langword="RootMoniker" /> property can only be set once. </para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.RootMonikerInUse">
      <summary>Value: 0x8013302F

<para>Exception string: The specified root moniker is already in use.</para><para>Thrown by the <see cref="P:Microsoft.Vsa.IVsaEngine.RootMoniker" qualify="true" /> property when an attempt is made to set this property to a value that is already in use by another engine. The <see langword="RootMoniker" /> property must be globally unique. </para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.RootMonikerInvalid">
      <summary>Value: 0x80133030

<para>Exception string: The specified root moniker is not valid.</para><para>Thrown by the <see cref="P:Microsoft.Vsa.IVsaEngine.RootMoniker" qualify="true" /> property when an attempt is made to set this property to a value that is not a valid moniker. A moniker can be invalid for the following reasons:</para><list type="bullet"><item><term>It does not adhere to the moniker syntax of &lt;protocol&gt;://&lt;path&gt;.</term></item><item><term>It uses characters that are not valid inside a Uniform Resource Identifier (URI). For more information about valid characters, see "Request For Comments 2396" at http://www.ietf.org/rfc/rfc2396. </term></item></list></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.RootMonikerNotSet">
      <summary>Value: 0x80133031

<para>Exception string: The <see cref="P:Microsoft.Vsa.IVsaEngine.RootMoniker" qualify="true" /> property has not been set.</para><para>Thrown by the <see cref="M:Microsoft.Vsa.IVsaEngine.Compile" qualify="true" />, <see cref="M:Microsoft.Vsa.IVsaEngine.LoadSourceState(Microsoft.Vsa.IVsaPersistSite)" qualify="true" />, <see cref="M:Microsoft.Vsa.IVsaEngine.Run" qualify="true" />, and <see cref="M:Microsoft.Vsa.IVsaEngine.InitNew" qualify="true" /> methods, and the<see cref="P:Microsoft.Vsa.IVsaEngine.Site" qualify="true" /> property when the property or method requires a valid root moniker, but the <see langword="RootMoniker" /> property has not been set. </para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.RootMonikerProtocolInvalid">
      <summary>Value: 0x80133032

<para>Exception string: The protocol specified in the root moniker is not valid.</para><para>Thrown by the <see cref="P:Microsoft.Vsa.IVsaEngine.RootMoniker" qualify="true" /> property when an attempt is made to set this property to a value that uses a protocol already registered on the machine, such as <c>file</c> or <c>http</c>. Registered protocols cannot be used as part of the moniker. </para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.RootNamespaceInvalid">
      <summary>Value: 0x80133033

<para>Exception string: The specified root namespace is not valid.</para><para>Thrown by the <see cref="P:Microsoft.Vsa.IVsaEngine.RootNamespace" qualify="true" /> property when an attempt is made to set this property to a value that is not a valid namespace identifier. </para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.RootNamespaceNotSet">
      <summary>Value: 0x80133034

<para>Exception string: The root namespace has not been set.</para><para>Thrown by the <see cref="M:Microsoft.Vsa.IVsaEngine.Compile" qualify="true" /> method if it is called before the <see cref="P:Microsoft.Vsa.IVsaEngine.RootNamespace" qualify="true" /> property is set. The runtime loader engine and the Visual BasicÂ .NET script engine will also throw this exception on calling the <see langword="Run" /> method if the property has not been set. </para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.SaveCompiledStateFailed">
      <summary>Value: 0x80133035

<para>Exception string: The specified compiled state could not be saved.</para><para>Thrown by the <see cref="M:Microsoft.Vsa.IVsaEngine.SaveCompiledState(System.Byte[]@,System.Byte[]@)" qualify="true" /> method when this method fails. Note that this method does not actually save code, but rather simply provides the host application with the specified binary data, so that the host can save it. </para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.SaveElementFailed">
      <summary>Value: 0x80133036

<para>Exception string: The specified element could not be saved.</para><para>Thrown by the <see cref="M:Microsoft.Vsa.IVsaEngine.SaveSourceState(Microsoft.Vsa.IVsaPersistSite)" qualify="true" /> and <see cref="M:Microsoft.Vsa.IVsaPersistSite.SaveElement(System.String,System.String)" qualify="true" /> methods when a call to the <see langword="SaveElement" /> method fails. The <see langword="InnerException" /> property of the <see cref="T:System.Exception" qualify="true" /> class is set to the actual exception thrown by the underlying code (for example, an out of disk space exception). For more information, see <see cref="M:System.Exception.InnerException" qualify="true" />. The <see langword="SaveSourceState" /> method returns the SaveElementFailed exception from the <see langword="SaveElement" /> method back to the caller. </para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.SiteAlreadySet">
      <summary>Value: 0x80133037

<para>Exception string: The specified site has already been set.</para><para>Thrown by the <see cref="P:Microsoft.Vsa.IVsaEngine.Site" qualify="true" /> property when an attempt is made to set this property and it already has a non-null value. Once it has been set, the <see langword="Site" /> property cannot be reset. </para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.SiteInvalid">
      <summary>Value: 0x80133038

<para>Exception string: The specified site is not valid.</para><para>Thrown by the <see cref="P:Microsoft.Vsa.IVsaEngine.Site" qualify="true" /> property when an attempt is made to set this property to a value that is not a valid <see cref="T:Microsoft.Vsa.IVsaSite" /> object reference. </para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.SiteNotSet">
      <summary>Value: 0x80133039

<para>Exception string: Site has not been set.</para><para>Thrown by the <see cref="M:Microsoft.Vsa.IVsaEngine.Compile" qualify="true" />, <see cref="M:Microsoft.Vsa.IVsaEngine.LoadSourceState(Microsoft.Vsa.IVsaPersistSite)" qualify="true" />, <see cref="M:Microsoft.Vsa.IVsaEngine.Run" qualify="true" />, and <see cref="M:Microsoft.Vsa.IVsaEngine.InitNew" qualify="true" /> methods when a property or method that requires a valid <see cref="T:Microsoft.Vsa.IVsaSite" /> object is called, but the <see cref="P:Microsoft.Vsa.IVsaEngine.Site" qualify="true" /> property has not been set. </para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.SourceItemNotAvailable">
      <summary>Value: 0x8013303A

<para>Exception string: Source item is not available for this exception.</para><para>Thrown when there is no source item for an exception, that is, the <see cref="P:Microsoft.Vsa.IVsaError.SourceItem" qualify="true" /> property is not set. </para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.SourceMonikerNotAvailable">
      <summary>Value: 0x8013303B

<para>Exception string: Source moniker is not available for this exception.</para><para>Thrown when there is no moniker for an exception, that is, the <see cref="P:Microsoft.Vsa.IVsaError.SourceMoniker" qualify="true" /> property is not set. </para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.URLInvalid">
      <summary>Value: 0x8013303C

<para>Exception string: Invalid URL; ASPX file extension is missing.</para><para>Thrown by the <see cref="IVsaDTEngine.TargetURL" qualify="true" /> property property when the target URL to which the debugger is set is not valid. The property must be pointing to an ASPX file. </para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.BrowserNotExist">
      <summary>Value: 0x8013303D

<para>Exception string: The specified browser was not found.</para><para>Thrown by the <see cref="IVsaDTEngine.AttachDebugger" qualify="true" /> method when a remote debugging session has been initiated and an attempt made to launch the remote browser, but a browser is not available. </para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.DebuggeeNotStarted">
      <summary>Value: 0x8013303E

<para>Exception string: Debug target application not started.</para><para>Thrown by the <see cref="IVsaDTEngine.AttachDebugger" qualify="true" /> method when a Windows client debugging session is initiated, but the <see langword="AttachDebugger" /> method is not able to launch the target application that is specified with the TargetEXE option. </para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.EngineNameInvalid">
      <summary>Value: 0x8013303F

<para>Exception string: Engine name not valid.</para><para>Thrown by the <see cref="IVsaDTEngine.Name" qualify="true" /> property if the specified name is already in use by another engine. VSA requires that design-time engine names be unique. </para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.EngineNotExist">
      <summary>Value: 0x80133040

<para>Exception string: Engine does not exist.</para><para>Thrown by the <see cref="IVsaIDE.ExtensibilityObject" qualify="true" /> property in cases where there are no valid engines from which to retrieve the extensibility object.</para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.FileFormatUnsupported">
      <summary>Value: 0x80133041

<para>Exception string: File format is not supported.</para><para>Reserved for future use.</para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.FileTypeUnknown">
      <summary>Value: 0x80133042

<para>Exception string: File is of unknown type.</para><para>Reserved for future use.</para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.ItemCannotBeRenamed">
      <summary>Value: 0x80133043

<para>Exception string: The item cannot be renamed.</para><para>Thrown by the <see cref="P:Microsoft.Vsa.IVsaItem.Name" qualify="true" /> property in cases where an attempt is made to rename an item that cannot be renamed. </para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.MissingSource">
      <summary>Value: 0x80133044

<para>Exception string: Missing source.</para><para>Reserved for future use.</para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.NotInitCompleted">
      <summary>Value: 0x80133045

<para>Exception string: The <see cref="IVsaDTEngine.InitCompleted" qualify="true" /> method has not been called.</para><para>Thrown by the <see cref="IVsaDTEngine.GetIDE" qualify="true" /> method or by the <see cref="IDesignTime.ShowIDE" qualify="true" /> method in cases where either is called before the <see langword="InitCompleted " />method has been called, signaling that initialization is complete. In the case of the <see langword="ShowIDE" /> method, the exception signals that the first engine in the engines collection has not yet been initialized. </para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.NameTooLong">
      <summary>Value: 0x80133046

<para>Exception string: The engine name exceeds the allowable length of 256 characters.</para><para>Thrown by the <see cref="P:Microsoft.Vsa.IVsaEngine.Name" qualify="true" /> property in cases where the value set for the engine name exceeds 256 characters. </para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.ProcNameInUse">
      <summary>Value: 0x80133047

<para>Exception string: n/a</para><para>Reserved for future use.</para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.ProcNameInvalid">
      <summary>Value: 0x80133048

<para>Exception string: n/a</para><para>Reserved for future use.</para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.VsaServerDown">
      <summary>Value: 0x80133049

<para>Exception string: n/a</para><para>Reserved for future use.</para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.MissingPdb">
      <summary>Value: 0x8013304A

<para>Exception string: n/a</para><para>Reserved for future use.</para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.NotClientSideAndNoUrl">
      <summary>Value: 0x8013304B

<para>Exception string: n/a</para><para>Reserved for future use.</para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.CannotAttachToWebServer">
      <summary>Value: 0x8013304C

<para>Exception string: Cannot attach to the specified Web server.</para><para>Thrown by the <see cref="IVsaDTEngine.AttachDebugger" qualify="true" /> method when launching a server-side debugging session and VSA cannot attach the debugger to the specified Web server. </para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.EngineNameNotSet">
      <summary>Value: 0x8013304D

<para>Exception string: The <see langword="Name" /> property for the specified engine is not set.</para><para>Thrown by the <see cref="P:Microsoft.Vsa.IVsaEngine.Name" qualify="true" /> property in cases where an attempt is made to get the property value when the value has not been set.</para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaError.UnknownError">
      <summary>Value: 0x801330FF

<para>Exception string: Unknown exception.</para><para>Thrown by multiple members when the exception is not recognized. </para></summary>
    </member>
    <member name="T:Microsoft.Vsa.VsaItemFlag">
      <summary>
        <para>Identifies the type of code item as Class, Module, or None.</para>
      </summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaItemFlag.None">
      <summary>Value: 0

<para>Used when the code item is generic or when the item type does not accept flags, such as the AppGlobal item type of the <see cref="T:Microsoft.Vsa.VsaItemType" /> enumeration. In such cases, no special flags are required to create the item.</para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaItemFlag.Module">
      <summary>Value: 1

<para>Used when the code item is a module.</para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaItemFlag.Class">
      <summary>Value: 2

<para>Used when the code item is a class.</para></summary>
    </member>
    <member name="T:Microsoft.Vsa.VsaItemType">
      <summary>
        <para>Identifies the item type as Code, Reference, or AppGlobal.</para>
      </summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaItemType.Reference">
      <summary>Value: 0

<para>Used to add a reference to an external .NET assembly, which can then be referenced from code. This type is used to create an <see cref="T:Microsoft.Vsa.IVsaReferenceItem" /> object.</para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaItemType.AppGlobal">
      <summary>Value: 1

<para>Used to add a global object to the .NET script engine. This type is used to create an <see cref="T:Microsoft.Vsa.IVsaGlobalItem" /> object.</para></summary>
    </member>
    <member name="F:Microsoft.Vsa.VsaItemType.Code">
      <summary>Value: 2

<para>Used to create a code item for storing source code for the .NET script engine.</para></summary>
    </member>
  </members>
</doc>