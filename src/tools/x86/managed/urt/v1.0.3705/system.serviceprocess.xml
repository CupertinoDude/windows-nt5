<?xml version="1.0"?>
<doc>
  <assembly>
    <name>System.ServiceProcess</name>
  </assembly>
  <members>
    <member name="M:System.ServiceProcess.ResDescriptionAttribute.#ctor(System.String)">
      <summary>
                Constructs a new sys description.
            </summary>
      <param name="description">
                description text.
            </param>
    </member>
    <member name="P:System.ServiceProcess.ResDescriptionAttribute.Description">
      <summary>
                Retrieves the description text.
            </summary>
      <returns>
                description
            </returns>
    </member>
    <member name="T:System.ServiceProcess.PowerBroadcastStatus">
      <summary>
        <para>Indicates the system's power status.</para>
      </summary>
    </member>
    <member name="F:System.ServiceProcess.PowerBroadcastStatus.BatteryLow">
      <summary>
        <para> Battery power is low.</para>
      </summary>
    </member>
    <member name="F:System.ServiceProcess.PowerBroadcastStatus.OemEvent">
      <summary>
        <para>An Advanced Power Management (APM) BIOS signaled an APM OEM event.</para>
      </summary>
    </member>
    <member name="F:System.ServiceProcess.PowerBroadcastStatus.PowerStatusChange">
      <summary>
        <para>A change in the power status of the computer is 
      detected, such as a switch from battery power to A/C. The system also broadcasts
      this event when remaining battery power slips below the threshold specified by
      the user or if the battery power changes by a specified percentage.</para>
      </summary>
    </member>
    <member name="F:System.ServiceProcess.PowerBroadcastStatus.QuerySuspend">
      <summary>
        <para>The system has requested permission to suspend the
      computer. An application that grants permission should carry out preparations
      for the suspension before returning.</para>
      </summary>
    </member>
    <member name="F:System.ServiceProcess.PowerBroadcastStatus.QuerySuspendFailed">
      <summary>
        <para> The system was denied permission to suspend
      the computer. This status is broadcast if any application or driver denied a
      previous <see langword="QuerySuspend" /> status.</para>
        <para>
        </para>
      </summary>
    </member>
    <member name="F:System.ServiceProcess.PowerBroadcastStatus.ResumeAutomatic">
      <summary>
        <para>The computer has woken up automatically to 
      handle an event.</para>
        <note type="note">
      If the system detects any user
      activity after broadcasting <see langword="ResumeAutomatic" />, it will broadcast a
   <see langword="ResumeSuspend" /> event to let applications know they can resume full 
      interaction with the user.
   </note>
      </summary>
    </member>
    <member name="F:System.ServiceProcess.PowerBroadcastStatus.ResumeCritical">
      <summary>
        <para> The system has resumed operation after
      a critical suspension caused by a failing battery.</para>
        <note type="note">
      Because a critical suspension occurs
      without prior notification, resources and data previously available may not be
      present when the application receives this event. The application should attempt
      to restore its state to the best of its ability.
      
   </note>
      </summary>
    </member>
    <member name="F:System.ServiceProcess.PowerBroadcastStatus.ResumeSuspend">
      <summary>
        <para> The system has resumed operation after being suspended.</para>
      </summary>
    </member>
    <member name="F:System.ServiceProcess.PowerBroadcastStatus.Suspend">
      <summary>
        <para>The computer is about to enter a suspended state. This 
      event is typically broadcast when all applications and installable drivers have
      returned <see langword="true" />
      to a previous <see langword="QuerySuspend" /> state.</para>
      </summary>
    </member>
    <member name="T:System.ServiceProcess.ServiceAccount">
      <summary>
        <para>Specifies a service's security context, which defines
      its logon type.</para>
      </summary>
    </member>
    <member name="F:System.ServiceProcess.ServiceAccount.LocalService">
      <summary>
        <para>An account that provides extensive local privileges, and presents 
 the computer's credentials to any remote server.</para>
      </summary>
    </member>
    <member name="F:System.ServiceProcess.ServiceAccount.NetworkService">
      <summary>
        <para>An account that acts as a non-privileged user on the
 local computer, and
 presents the computer's credentials to any remote server.</para>
      </summary>
    </member>
    <member name="F:System.ServiceProcess.ServiceAccount.LocalSystem">
      <summary>
        <para>An account that acts as a non-privileged user on the
 local computer, and
 presents anonymous credentials to any remote server.</para>
        <para>
        </para>
      </summary>
    </member>
    <member name="F:System.ServiceProcess.ServiceAccount.User">
      <summary>
        <para>An account defined by a specific user on the network.
      Specifying <see langword="User" /> for the <see cref="P:System.ServiceProcess.ServiceProcessInstaller.Account" qualify="true" /> member causes the
      system to prompt for a valid user name and password when the service is
      installed, unless you set values for both the <see cref="P:System.ServiceProcess.ServiceProcessInstaller.Username" /> and <see cref="P:System.ServiceProcess.ServiceProcessInstaller.Password" /> properties of your <see cref="T:System.ServiceProcess.ServiceProcessInstaller" />
      instance.</para>
      </summary>
    </member>
    <member name="T:System.ServiceProcess.ServiceBase">
      <summary>
        <para>Provides a base class for a service that will exist as part of a service application. <see cref="T:System.ServiceProcess.ServiceBase" />
must
be derived when creating a new service class.</para>
      </summary>
    </member>
    <member name="F:System.ServiceProcess.ServiceBase.MaxNameLength">
      <summary>
        <para> Indicates the maximum size for a service name.
      </para>
      </summary>
    </member>
    <member name="M:System.ServiceProcess.ServiceBase.#ctor">
      <summary>
        <para>Creates a new instance of the <see cref="T:System.ServiceProcess.ServiceBase" /> class.</para>
      </summary>
    </member>
    <member name="M:System.ServiceProcess.ServiceBase.OnContinue">
      <summary>
        <para> When implemented in a derived class, <see cref="M:System.ServiceProcess.ServiceBase.OnContinue" />
runs when a Continue command is sent to the service
by the
Service Control Manager (SCM). Specifies actions to take when a
service resumes normal functioning after being paused.</para>
      </summary>
    </member>
    <member name="M:System.ServiceProcess.ServiceBase.OnPause">
      <summary>
        <para> When implemented in a
      derived class, executes when a Pause command is sent
      to
      the service by the Service Control Manager (SCM). Specifies
      actions to take when a service pauses.</para>
      </summary>
    </member>
    <member name="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)">
      <summary>
        <para> When implemented in a derived class, executes when the
      computer's power status has changed. This applies to laptop computers when they go into suspended mode, which is not the same
      as a system shutdown.</para>
      </summary>
      <param name="powerStatus">A <see cref="T:System.ServiceProcess.PowerBroadcastStatus" /> that indicates a notification from the system about its power status.</param>
      <returns>
        <para>When implemented in a derived class, the needs of 
      your application determine what value to return. For example, if a
   <see langword="QuerySuspend" /> broadcast status is passed, you could cause your 
      application to reject the query by returning <see langword="false" />
      .</para>
      </returns>
    </member>
    <member name="M:System.ServiceProcess.ServiceBase.OnShutdown">
      <summary>
        <para>When implemented in a derived class,
      executes when the system is shutting down.
      Specifies what should
      happen immediately prior
      to the system shutting down.</para>
      </summary>
    </member>
    <member name="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])">
      <summary>
        <para> When implemented in a derived class, executes when a 
      Start command is sent to the service
      by the Service Control Manager (SCM) or when the
      operating system starts (for a service
      that starts automatically). Specifies actions to take when the service starts.</para>
        <para>
        </para>
      </summary>
      <param name="args">Data passed by the start command.</param>
    </member>
    <member name="M:System.ServiceProcess.ServiceBase.OnStop">
      <summary>
        <para> When implemented in a
      derived class, executes when a Stop command is sent to the
      service by the Service Control Manager (SCM). Specifies actions to take when a
      service stops
      running.</para>
      </summary>
    </member>
    <member name="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)">
      <summary>
        <para>When implemented in a derived class, <see cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" /> executes when the Service
   Control Manager (SCM) passes a custom
   command to the service. Specifies actions to take when
   a command with the specified parameter value occurs.</para>
      </summary>
      <param name="command">The command message sent to the service.</param>
    </member>
    <member name="M:System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase[])">
      <summary>
        <para>Provides the main entry point for an executable that
      contains multiple associated services. Loads the specified services into memory so they can be
      started.</para>
      </summary>
      <param name="services">An array of ServiceBase instances, which indicate services to start. </param>
    </member>
    <member name="M:System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase)">
      <summary>
        <para>Provides the main
      entry point for an executable that contains a single
      service. Loads the service into memory so it can be
      started.</para>
      </summary>
      <param name="service">A <see cref="T:System.ServiceProcess.ServiceBase" /> which indicates a service to start.</param>
    </member>
    <member name="P:System.ServiceProcess.ServiceBase.AutoLog">
      <summary>
        <para> Indicates whether to report Start, Stop, Pause,
      and Continue commands
      in
      the
      event
      log.</para>
      </summary>
    </member>
    <member name="P:System.ServiceProcess.ServiceBase.CanHandlePowerEvent">
      <summary>
        <para> Gets or sets
      a value indicating whether the service can handle notifications of
      computer power status changes.
      </para>
      </summary>
    </member>
    <member name="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue">
      <summary>
        <para> Gets or sets a value indicating whether the service can be paused
      and resumed.</para>
      </summary>
    </member>
    <member name="P:System.ServiceProcess.ServiceBase.CanShutdown">
      <summary>
        <para> Gets or sets a value indicating whether the service should be notified when
      the system is shutting down.</para>
      </summary>
    </member>
    <member name="P:System.ServiceProcess.ServiceBase.CanStop">
      <summary>
        <para> Gets or sets a value indicating whether the service can be
      stopped once it has started.</para>
      </summary>
    </member>
    <member name="P:System.ServiceProcess.ServiceBase.EventLog">
      <summary>
        <para> Gets an event log you can use to write notification of service
      command calls, such as Start and Stop, to the Application event log.</para>
      </summary>
    </member>
    <member name="P:System.ServiceProcess.ServiceBase.ServiceName">
      <summary>
        <para> Gets or sets the short name used to identify the service to the system.</para>
      </summary>
    </member>
    <member name="T:System.ServiceProcess.ServiceController">
      <summary>
        <para> Represents a Windows service and allows you to connect to a running or stopped
      service, manipulate it, or get information about it.</para>
      </summary>
    </member>
    <member name="M:System.ServiceProcess.ServiceController.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ServiceProcess.ServiceController" /> class that is not associated with a specific service.</para>
      </summary>
    </member>
    <member name="M:System.ServiceProcess.ServiceController.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ServiceProcess.ServiceController" /> class that is associated with an existing service on the
   local computer.</para>
      </summary>
      <param name="name">The short name that identifies the service to the system. </param>
    </member>
    <member name="M:System.ServiceProcess.ServiceController.#ctor(System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ServiceProcess.ServiceController" /> class that is associated with an existing service
   on the specified computer.</para>
      </summary>
      <param name="name">The short name that identifies the service to the system. </param>
      <param name="machineName">The computer on which the service resides. </param>
    </member>
    <member name="M:System.ServiceProcess.ServiceController.Close">
      <summary>
        <para>Disconnects this <see cref="T:System.ServiceProcess.ServiceController" /> instance from 
   the service and frees all the resources that the instance allocated.</para>
      </summary>
    </member>
    <member name="M:System.ServiceProcess.ServiceController.GetDevices">
      <summary>
        <para>Retrieves the device driver services on the local computer.</para>
      </summary>
      <returns>
        <para>An array of type <see cref="T:System.ServiceProcess.ServiceController" /> in which each element is associated
   with a device driver service on the local computer.</para>
      </returns>
    </member>
    <member name="M:System.ServiceProcess.ServiceController.GetDevices(System.String)">
      <summary>
        <para>Retrieves the device driver services on the specified computer.</para>
      </summary>
      <param name="machineName">
        <para>The computer from which to retrieve the device driver services. </para>
      </param>
      <returns>
        <para>An array of type <see cref="T:System.ServiceProcess.ServiceController" /> in which each element is associated
   with a device driver service on the specified computer.</para>
      </returns>
    </member>
    <member name="M:System.ServiceProcess.ServiceController.GetServices">
      <summary>
        <para>Retrieves all the services on the local computer, except for the device driver services.</para>
      </summary>
      <returns>
        <para>An array of type <see cref="T:System.ServiceProcess.ServiceController" /> in which each element
   is associated with a service on the local computer.</para>
      </returns>
    </member>
    <member name="M:System.ServiceProcess.ServiceController.GetServices(System.String)">
      <summary>
        <para>Retrieves all the services on the specified computer, except for the device driver services.</para>
      </summary>
      <param name="machineName">
        <para> The computer from which to retrieve the services. </para>
      </param>
      <returns>
        <para>An array of type <see cref="T:System.ServiceProcess.ServiceController" /> in which each element
   is associated with a service on the specified computer.</para>
      </returns>
    </member>
    <member name="M:System.ServiceProcess.ServiceController.Pause">
      <summary>
        <para>Suspends a service's operation.</para>
      </summary>
    </member>
    <member name="M:System.ServiceProcess.ServiceController.Continue">
      <summary>
        <para>Continues a service after it has been paused.</para>
      </summary>
    </member>
    <member name="M:System.ServiceProcess.ServiceController.ExecuteCommand(System.Int32)">
      <summary>
        <para>Executes a custom command on the service.</para>
      </summary>
      <param name="command">An application-defined command flag that indicates which custom command to execute. </param>
    </member>
    <member name="M:System.ServiceProcess.ServiceController.Refresh">
      <summary>
        <para>Refreshes all the property values, setting them to the current values.</para>
      </summary>
    </member>
    <member name="M:System.ServiceProcess.ServiceController.Start">
      <summary>
        <para>Starts the service, passing no arguments.</para>
      </summary>
    </member>
    <member name="M:System.ServiceProcess.ServiceController.Start(System.String[])">
      <summary>
        <para> Starts a service, passing the specified arguments.</para>
      </summary>
      <param name="args"> An array of arguments to pass to the service when it starts.</param>
    </member>
    <member name="M:System.ServiceProcess.ServiceController.Stop">
      <summary>
        <para> Stops this service and any services that are dependent on
      this service.</para>
      </summary>
    </member>
    <member name="M:System.ServiceProcess.ServiceController.WaitForStatus(System.ServiceProcess.ServiceControllerStatus)">
      <summary>
        <para> Infinitely waits for the service to reach the specified status.</para>
      </summary>
      <param name="desiredStatus">The status to wait for.</param>
    </member>
    <member name="M:System.ServiceProcess.ServiceController.WaitForStatus(System.ServiceProcess.ServiceControllerStatus,System.TimeSpan)">
      <summary>
        <para>Waits for the service to reach the specified status or for the specified time-out
      to expire.</para>
      </summary>
      <param name="desiredStatus">The status to wait for.</param>
      <param name=" timeout">The amount of time to wait for the service to reach the specified status.</param>
    </member>
    <member name="P:System.ServiceProcess.ServiceController.CanPauseAndContinue">
      <summary>
        <para> Gets a value indicating whether the service can be paused and resumed.</para>
      </summary>
    </member>
    <member name="P:System.ServiceProcess.ServiceController.CanShutdown">
      <summary>
        <para> Gets a value indicating whether the service should be notified when the system is shutting down.</para>
      </summary>
    </member>
    <member name="P:System.ServiceProcess.ServiceController.CanStop">
      <summary>
        <para> Gets a value indicating whether the service can be stopped after it has started.</para>
      </summary>
    </member>
    <member name="P:System.ServiceProcess.ServiceController.DisplayName">
      <summary>
        <para> Gets or sets a friendly name for the service. </para>
      </summary>
    </member>
    <member name="P:System.ServiceProcess.ServiceController.DependentServices">
      <summary>
        <para>Gets the set of services that depends on the service
      associated with this <see cref="T:System.ServiceProcess.ServiceController" />
      instance.</para>
      </summary>
    </member>
    <member name="P:System.ServiceProcess.ServiceController.MachineName">
      <summary>
        <para>Gets or sets the name of the computer on which this service resides.</para>
      </summary>
    </member>
    <member name="P:System.ServiceProcess.ServiceController.ServiceName">
      <summary>
        <para> Gets or sets the name that identifies the service that this instance
      references.</para>
      </summary>
    </member>
    <member name="P:System.ServiceProcess.ServiceController.ServicesDependedOn">
      <summary>
        <para>The set of services that this service depends on.</para>
      </summary>
    </member>
    <member name="P:System.ServiceProcess.ServiceController.Status">
      <summary>
        <para> Gets the status of the service that
      is referenced by this instance.</para>
      </summary>
    </member>
    <member name="P:System.ServiceProcess.ServiceController.ServiceType">
      <summary>
        <para>Gets the type of service that this object references.</para>
      </summary>
    </member>
    <member name="T:System.ServiceProcess.ServiceControllerPermission">
      <summary>
        <para>Allows control of code access security permissions for service
 controllers.</para>
      </summary>
    </member>
    <member name="M:System.ServiceProcess.ServiceControllerPermission.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ServiceProcess.ServiceControllerPermission" /> class.</para>
      </summary>
    </member>
    <member name="M:System.ServiceProcess.ServiceControllerPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ServiceProcess.ServiceControllerPermission" /> class with 
   the specified access to resources.</para>
      </summary>
      <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState" /> values.</param>
    </member>
    <member name="M:System.ServiceProcess.ServiceControllerPermission.#ctor(System.ServiceProcess.ServiceControllerPermissionAccess,System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ServiceProcess.ServiceControllerPermission" /> 
class with the specified permission access levels, the name of the computer on
which the service resides, and the short name that identifies the
service to the system.</para>
      </summary>
      <param name="permissionAccess">One of the <see cref="T:System.ServiceProcess.ServiceControllerPermissionAccess" /> values.</param>
      <param name=" machineName"> The name of the computer on which the service resides.</param>
      <param name=" serviceName"> The short name that identifies the service to the system.</param>
    </member>
    <member name="M:System.ServiceProcess.ServiceControllerPermission.#ctor(System.ServiceProcess.ServiceControllerPermissionEntry[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ServiceProcess.ServiceControllerPermission" /> class with 
   the specified permission entries.</para>
      </summary>
      <param name="permissionAccessEntries">An array of <see cref="T:System.ServiceProcess.ServiceControllerPermissionEntry" /> objects. The <see cref="P:System.ServiceProcess.ServiceControllerPermission.PermissionEntries" /> property is set to this value.</param>
    </member>
    <member name="P:System.ServiceProcess.ServiceControllerPermission.PermissionEntries">
      <summary>
        <para>Gets the collection of permission entries for this permissions request.</para>
      </summary>
    </member>
    <member name="T:System.ServiceProcess.ServiceControllerPermissionAccess">
      <summary>
        <para>Defines access levels used by <see cref="T:System.ServiceProcess.ServiceController" /> permission classes.</para>
      </summary>
    </member>
    <member name="F:System.ServiceProcess.ServiceControllerPermissionAccess.None">
      <summary>
        <para>The <see cref="T:System.ServiceProcess.ServiceController" /> has no permissions.</para>
      </summary>
    </member>
    <member name="F:System.ServiceProcess.ServiceControllerPermissionAccess.Browse">
      <summary>
        <para>The <see cref="T:System.ServiceProcess.ServiceController" /> can connect
 to, but not control, existing services.</para>
      </summary>
    </member>
    <member name="F:System.ServiceProcess.ServiceControllerPermissionAccess.Control">
      <summary>
        <para>The <see cref="T:System.ServiceProcess.ServiceController" /> can
 connect to and control existing services.</para>
      </summary>
    </member>
    <member name="T:System.ServiceProcess.ServiceControllerPermissionAttribute">
      <summary>
        <para>Allows declarative service controller permission checks.</para>
      </summary>
    </member>
    <member name="M:System.ServiceProcess.ServiceControllerPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ServiceProcess.ServiceControllerPermissionAttribute" /> class.</para>
      </summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction" /> values.</param>
    </member>
    <member name="M:System.ServiceProcess.ServiceControllerPermissionAttribute.CreatePermission">
      <summary>
        <para>Creates the permission based on the requested access
 levels that are set through the <see cref="P:System.ServiceProcess.ServiceControllerPermissionAttribute.PermissionAccess" /> property on the attribute.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Security.IPermission" /> that represents the created permission.</para>
      </returns>
    </member>
    <member name="P:System.ServiceProcess.ServiceControllerPermissionAttribute.MachineName">
      <summary>
        <para> Gets or sets the name of the computer on which the service resides.</para>
      </summary>
    </member>
    <member name="P:System.ServiceProcess.ServiceControllerPermissionAttribute.PermissionAccess">
      <summary>
        <para>Gets or sets the access levels used in the permissions request.</para>
      </summary>
    </member>
    <member name="P:System.ServiceProcess.ServiceControllerPermissionAttribute.ServiceName">
      <summary>
        <para>Gets or sets the short name that identifies the service to the system.</para>
      </summary>
    </member>
    <member name="T:System.ServiceProcess.ServiceControllerPermissionEntry">
      <summary>
        <para>Defines the smallest unit of a code access security permission that is set for a
   <see cref="T:System.ServiceProcess.ServiceController" />.</para>
      </summary>
    </member>
    <member name="M:System.ServiceProcess.ServiceControllerPermissionEntry.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ServiceProcess.ServiceControllerPermissionEntry" /> class.</para>
      </summary>
    </member>
    <member name="M:System.ServiceProcess.ServiceControllerPermissionEntry.#ctor(System.ServiceProcess.ServiceControllerPermissionAccess,System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ServiceProcess.ServiceControllerPermissionEntry" /> class with 
   the specified
   permission access levels, the name of the computer, and a short name
   that identifies the service.</para>
      </summary>
      <param name="permissionAccess">One of the <see cref="T:System.ServiceProcess.ServiceControllerPermissionAccess" /> values.</param>
      <param name=" machineName">The name of the computer on which the service resides.</param>
      <param name=" serviceName">The short name that identifies the service to the system.</param>
    </member>
    <member name="P:System.ServiceProcess.ServiceControllerPermissionEntry.MachineName">
      <summary>
        <para>Gets the name of the computer on which the service resides.</para>
      </summary>
    </member>
    <member name="P:System.ServiceProcess.ServiceControllerPermissionEntry.PermissionAccess">
      <summary>
        <para>Gets the access levels used in the permissions request.</para>
      </summary>
    </member>
    <member name="P:System.ServiceProcess.ServiceControllerPermissionEntry.ServiceName">
      <summary>
        <para>Gets the short name that identifies the service to the system.</para>
      </summary>
    </member>
    <member name="T:System.ServiceProcess.ServiceControllerPermissionEntryCollection">
      <summary>
        <para>Contains a strongly-typed collection of <see cref="T:System.ServiceProcess.ServiceControllerPermissionEntry" /> objects.</para>
      </summary>
    </member>
    <member name="M:System.ServiceProcess.ServiceControllerPermissionEntryCollection.Add(System.ServiceProcess.ServiceControllerPermissionEntry)">
      <summary>
        <para>Adds a specified <see cref="T:System.ServiceProcess.ServiceControllerPermissionEntry" /> to this collection.</para>
      </summary>
      <param name="value">The <see cref="T:System.ServiceProcess.ServiceControllerPermissionEntry" /> object to add.</param>
      <returns>
        <para>The zero-based index of the added <see cref="T:System.ServiceProcess.ServiceControllerPermissionEntry" /> object.</para>
      </returns>
    </member>
    <member name="M:System.ServiceProcess.ServiceControllerPermissionEntryCollection.AddRange(System.ServiceProcess.ServiceControllerPermissionEntry[])">
      <summary>
        <para>Appends a set of specified permission entries to this collection.</para>
      </summary>
      <param name="value">An array of type <see cref="T:System.ServiceProcess.ServiceControllerPermissionEntry" /> objects that contains the permission entries to add.</param>
    </member>
    <member name="M:System.ServiceProcess.ServiceControllerPermissionEntryCollection.AddRange(System.ServiceProcess.ServiceControllerPermissionEntryCollection)">
      <summary>
        <para> Appends a set of specified permission entries to this collection.</para>
      </summary>
      <param name="value">A <see cref="T:System.ServiceProcess.ServiceControllerPermissionEntryCollection" /> that contains the permission entries to add.</param>
    </member>
    <member name="M:System.ServiceProcess.ServiceControllerPermissionEntryCollection.Contains(System.ServiceProcess.ServiceControllerPermissionEntry)">
      <summary>
        <para>Determines whether this collection contains a specified 
 <see cref="T:System.ServiceProcess.ServiceControllerPermissionEntry" /> object.</para>
      </summary>
      <param name="value">The <see cref="T:System.ServiceProcess.ServiceControllerPermissionEntry" /> object to find.</param>
      <returns>
        <para>
          <see langword="true" /> if the 
 specified <see cref="T:System.ServiceProcess.ServiceControllerPermissionEntry" /> object belongs to this collection;
 otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.ServiceProcess.ServiceControllerPermissionEntryCollection.CopyTo(System.ServiceProcess.ServiceControllerPermissionEntry[],System.Int32)">
      <summary>
        <para>Copies the permission entries from this collection to an
      array, starting at a particular index of the array.</para>
      </summary>
      <param name="array">An array of type <see cref="T:System.ServiceProcess.ServiceControllerPermissionEntry" /> that receives the copied permission entries.</param>
      <param name=" index">The zero-based index at which to begin copying the permission entries.</param>
    </member>
    <member name="M:System.ServiceProcess.ServiceControllerPermissionEntryCollection.IndexOf(System.ServiceProcess.ServiceControllerPermissionEntry)">
      <summary>
        <para>Determines the index of a specified permission entry in this collection.</para>
      </summary>
      <param name="value">The permission entry to search for.</param>
      <returns>
        <para>The zero-based index of the specified permission 
      entry, or -1 if the permission entry was not found in the collection.</para>
      </returns>
    </member>
    <member name="M:System.ServiceProcess.ServiceControllerPermissionEntryCollection.Insert(System.Int32,System.ServiceProcess.ServiceControllerPermissionEntry)">
      <summary>
        <para>Inserts a permission entry into this collection at a specified index.</para>
      </summary>
      <param name="index">The zero-based index of the collection at which to insert the permission entry.</param>
      <param name=" value">The permission entry to insert into this collection.</param>
    </member>
    <member name="M:System.ServiceProcess.ServiceControllerPermissionEntryCollection.Remove(System.ServiceProcess.ServiceControllerPermissionEntry)">
      <summary>
        <para>Removes a specified permission entry from this collection.</para>
      </summary>
      <param name="value">The permission entry to remove.</param>
    </member>
    <member name="P:System.ServiceProcess.ServiceControllerPermissionEntryCollection.Item(System.Int32)">
      <summary>
        <para>Gets or sets the object at a specified index.</para>
      </summary>
      <param name="index">The zero-based index into the collection.</param>
    </member>
    <member name="T:System.ServiceProcess.ServiceControllerStatus">
      <summary>
        <para>Indicates the current state of the service.</para>
      </summary>
    </member>
    <member name="F:System.ServiceProcess.ServiceControllerStatus.ContinuePending">
      <summary>
        <para>The service continue is pending.</para>
      </summary>
    </member>
    <member name="F:System.ServiceProcess.ServiceControllerStatus.Paused">
      <summary>
        <para>The service is paused.</para>
      </summary>
    </member>
    <member name="F:System.ServiceProcess.ServiceControllerStatus.PausePending">
      <summary>
        <para>The service pause is pending.</para>
      </summary>
    </member>
    <member name="F:System.ServiceProcess.ServiceControllerStatus.Running">
      <summary>
        <para>The service is running.</para>
      </summary>
    </member>
    <member name="F:System.ServiceProcess.ServiceControllerStatus.StartPending">
      <summary>
        <para>The service is starting.</para>
      </summary>
    </member>
    <member name="F:System.ServiceProcess.ServiceControllerStatus.Stopped">
      <summary>
        <para>The service is stopping.</para>
      </summary>
    </member>
    <member name="F:System.ServiceProcess.ServiceControllerStatus.StopPending">
      <summary>
        <para>The service is not running.</para>
      </summary>
    </member>
    <member name="T:System.ServiceProcess.ServiceInstaller">
      <summary>
        <para>Installs a class that extends <see cref="T:System.ServiceProcess.ServiceBase" /> to implement a service. This class is called
   by the install utility when installing a service application.</para>
      </summary>
    </member>
    <member name="M:System.ServiceProcess.ServiceInstaller.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ServiceProcess.ServiceInstaller" /> class.</para>
      </summary>
    </member>
    <member name="M:System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)">
      <summary>
        <para> Copies properties from an instance of <see cref="T:System.ServiceProcess.ServiceBase" />
to this installer.</para>
      </summary>
      <param name="component">The <see cref="T:System.ComponentModel.IComponent" /> from which to copy.</param>
    </member>
    <member name="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)">
      <summary>
        <para>Installs the service by writing service application
      information to the registry. This method is meant to be used by installation
      tools, which process the appropriate methods automatically.</para>
      </summary>
      <param name="stateSaver">An <see cref="T:System.Collections.IDictionary" /> that contains the context information associated with the installation.</param>
    </member>
    <member name="M:System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)">
      <summary>
        <para>Indicates whether two installers would install 
      the same service. </para>
      </summary>
      <param name="otherInstaller">A <see cref="T:System.Configuration.Install.ComponentInstaller" /> to which you are comparing the current installer.</param>
      <returns>
        <para>
          <see langword="true" /> if calling <see cref="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" /> on both of these installers would result 
   in installing the same service; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)">
      <summary>
        <para> Rolls back service application information written to the registry
      by the installation procedure. This method is meant to be used by installation
      tools, which process the appropriate methods automatically.</para>
      </summary>
      <param name="savedState">An <see cref="T:System.Collections.IDictionary" /> that contains the context information associated with the installation.</param>
    </member>
    <member name="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)">
      <summary>
        <para>Uninstalls the service by removing information about it from the registry.</para>
      </summary>
      <param name="savedState">An <see cref="T:System.Collections.IDictionary" /> that contains the context information associated with the installation.</param>
    </member>
    <member name="P:System.ServiceProcess.ServiceInstaller.DisplayName">
      <summary>
        <para>Indicates the friendly name that identifies the service to
      the user. </para>
      </summary>
    </member>
    <member name="P:System.ServiceProcess.ServiceInstaller.ServicesDependedOn">
      <summary>
        <para> Indicates the services that must be running for this service to run.</para>
      </summary>
    </member>
    <member name="P:System.ServiceProcess.ServiceInstaller.ServiceName">
      <summary>
        <para>Indicates the name used by the system to identify
      this service. This property must be identical to the <see cref="P:System.ServiceProcess.ServiceBase.ServiceName" qualify="true" /> of the service you want to install.</para>
      </summary>
    </member>
    <member name="P:System.ServiceProcess.ServiceInstaller.StartType">
      <summary>
        <para>Indicates how and when this service is started.</para>
      </summary>
    </member>
    <member name="T:System.ServiceProcess.ServiceProcessDescriptionAttribute">
      <summary>
        <para> Specifies a description for a property
      or event.</para>
      </summary>
    </member>
    <member name="M:System.ServiceProcess.ServiceProcessDescriptionAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ServiceProcess.ServiceProcessDescriptionAttribute" /> class, using the specified description.</para>
      </summary>
      <param name="description">The application-defined description text. </param>
    </member>
    <member name="P:System.ServiceProcess.ServiceProcessDescriptionAttribute.Description">
      <summary>
        <para>Gets description text associated with the service process.</para>
      </summary>
    </member>
    <member name="T:System.ServiceProcess.ServiceProcessInstaller">
      <summary>
        <para>Installs an executable containing classes
      that extend <see cref="T:System.ServiceProcess.ServiceBase" /> . This class is called by installation utilities, such as InstallUtil.exe, when installing a service application.</para>
      </summary>
    </member>
    <member name="M:System.ServiceProcess.ServiceProcessInstaller.CopyFromComponent(System.ComponentModel.IComponent)">
      <summary>
        <para>Implements the base class <see cref="M:System.Configuration.Install.ComponentInstaller.CopyFromComponent(System.ComponentModel.IComponent)" qualify="true" /> method with no <see cref="T:System.ServiceProcess.ServiceProcessInstaller" /> class-specific behavior.</para>
      </summary>
      <param name="comp">The <see cref="T:System.ComponentModel.IComponent" /> that represents the service process.</param>
    </member>
    <member name="M:System.ServiceProcess.ServiceProcessInstaller.Install(System.Collections.IDictionary)">
      <summary>
        <para>Writes service application information to the registry.
      This method is meant to be used by installation tools, which call the appropriate methods automatically.</para>
      </summary>
      <param name="stateSaver">An <see cref="T:System.Collections.IDictionary" /> that contains the context information associated with the installation.</param>
    </member>
    <member name="M:System.ServiceProcess.ServiceProcessInstaller.Rollback(System.Collections.IDictionary)">
      <summary>
        <para> Rolls back service application information
      written to the registry by the installation procedure. This method is meant to be used by installation tools, which process
      the appropriate methods automatically.</para>
      </summary>
      <param name="savedState">An <see cref="T:System.Collections.IDictionary" /> that contains the context information associated with the installation.</param>
    </member>
    <member name="P:System.ServiceProcess.ServiceProcessInstaller.HelpText">
      <summary>
        <para>Gets help text displayed for service installation options.</para>
      </summary>
    </member>
    <member name="P:System.ServiceProcess.ServiceProcessInstaller.Password">
      <summary>
        <para> Gets or sets the password associated with the user account under
      which the service application runs.</para>
      </summary>
    </member>
    <member name="P:System.ServiceProcess.ServiceProcessInstaller.Account">
      <summary>
        <para>Gets or sets the type of account under which to run 
      this service application.</para>
      </summary>
    </member>
    <member name="P:System.ServiceProcess.ServiceProcessInstaller.Username">
      <summary>
        <para> Gets or sets the user account under which
      the service application will run.</para>
      </summary>
    </member>
    <member name="T:System.ServiceProcess.ServiceStartMode">
      <summary>
        <para> Indicates the start mode of the service.</para>
      </summary>
    </member>
    <member name="F:System.ServiceProcess.ServiceStartMode.Manual">
      <summary>
        <para> Indicates that the service is started only manually, by a user (using the Service
      Control Manager) or by an application.</para>
      </summary>
    </member>
    <member name="F:System.ServiceProcess.ServiceStartMode.Automatic">
      <summary>
        <para>Indicates that the service is to be started (or was started) by the operating
      system, at system start-up. If an automatically started service depends on a
      manually started service, the manually started service is also started
      automatically at system startup.</para>
        <para>
        </para>
      </summary>
    </member>
    <member name="F:System.ServiceProcess.ServiceStartMode.Disabled">
      <summary>
        <para> Indicates that the service
      is disabled, so that it cannot be started by a user or application.</para>
      </summary>
    </member>
    <member name="T:System.ServiceProcess.ServiceType">
      <summary>
        <para>Represents the type of the service.</para>
      </summary>
    </member>
    <member name="F:System.ServiceProcess.ServiceType.Adapter">
      <summary>
        <para>A service for a hardware device that requires its own driver.</para>
        <para>
        </para>
      </summary>
    </member>
    <member name="F:System.ServiceProcess.ServiceType.FileSystemDriver">
      <summary>
        <para>A file system driver, which is also a Kernel device driver.</para>
      </summary>
    </member>
    <member name="F:System.ServiceProcess.ServiceType.InteractiveProcess">
      <summary>
        <para> A service
      that can communicate with the desktop.</para>
      </summary>
    </member>
    <member name="F:System.ServiceProcess.ServiceType.KernelDriver">
      <summary>
        <para>A Kernel device driver such as a hard disk or other 
      low-level hardware device driver.</para>
      </summary>
    </member>
    <member name="F:System.ServiceProcess.ServiceType.RecognizerDriver">
      <summary>
        <para>A file system driver used during startup to determine the file systems
      present on the system.</para>
        <para>
        </para>
      </summary>
    </member>
    <member name="F:System.ServiceProcess.ServiceType.Win32OwnProcess">
      <summary>
        <para>A Win32 program that can be started by the Service 
      Controller and that obeys the service control protocol. This type of Win32
      service runs in a process by itself.</para>
      </summary>
    </member>
    <member name="F:System.ServiceProcess.ServiceType.Win32ShareProcess">
      <summary>
        <para>A Win32 service that can share a process with other Win32 services.</para>
      </summary>
    </member>
    <member name="T:System.ServiceProcess.TimeoutException">
      <summary>
        <para>The exception that is thrown when a specified timeout has expired.</para>
      </summary>
    </member>
    <member name="M:System.ServiceProcess.TimeoutException.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ServiceProcess.TimeoutException" /> class with no message text.</para>
      </summary>
    </member>
    <member name="M:System.ServiceProcess.TimeoutException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.ServiceProcess.TimeoutException" /> class with the specified message text.</para>
      </summary>
      <param name="message">Text that describes the type or source of the exception.</param>
    </member>
    <member name="T:System.ServiceProcess.Design.ServiceInstallerDialogResult">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="F:System.ServiceProcess.Design.ServiceInstallerDialogResult.OK">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="F:System.ServiceProcess.Design.ServiceInstallerDialogResult.UseSystem">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="F:System.ServiceProcess.Design.ServiceInstallerDialogResult.Canceled">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="T:System.ServiceProcess.Design.ServiceInstallerDialog">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.ServiceProcess.Design.ServiceInstallerDialog.#ctor">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.ServiceProcess.Design.ServiceInstallerDialog.Main">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.ServiceProcess.Design.ServiceInstallerDialog.Password">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.ServiceProcess.Design.ServiceInstallerDialog.Result">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.ServiceProcess.Design.ServiceInstallerDialog.Username">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
  </members>
</doc>