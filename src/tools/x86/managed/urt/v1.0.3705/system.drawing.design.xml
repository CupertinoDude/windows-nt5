<?xml version="1.0"?>
<doc>
  <assembly>
    <name>System.Drawing.Design</name>
  </assembly>
  <members>
    <member name="M:System.Drawing.Design.SRDescriptionAttribute.#ctor(System.String)">
      <summary>
                Constructs a new sys description.
            </summary>
      <param name="description">
                description text.
            </param>
    </member>
    <member name="P:System.Drawing.Design.SRDescriptionAttribute.Description">
      <summary>
                Retrieves the description text.
            </summary>
      <returns>
                description
            </returns>
    </member>
    <member name="T:System.Drawing.Design.BitmapEditor">
      <summary>
        <para>Provides a user interface for selecting bitmap files in a properties
      window.</para>
      </summary>
    </member>
    <member name="T:System.Drawing.Design.ImageEditor">
      <summary>
        <para>Provides a user interface for selecting images in a Properties window.</para>
      </summary>
    </member>
    <member name="M:System.Drawing.Design.ImageEditor.CreateExtensionsString(System.String[],System.String)">
      <summary>
        <para>Creates a string of file name extensions using the specified array of file
      extensions and the specified separator.</para>
      </summary>
      <param name="extensions">The extensions to filter for.</param>
      <param name=" sep">The separator to use.</param>
      <returns>
        <para>A string containing the specified file name 
      extensions, each separated by the specified separator.</para>
      </returns>
    </member>
    <member name="M:System.Drawing.Design.ImageEditor.CreateFilterEntry(System.Drawing.Design.ImageEditor)">
      <summary>
        <para>Creates a filter entry for a file dialog box's file list.</para>
      </summary>
      <param name="e">The image editor to get the filter entry from.</param>
      <returns>
        <para>The new filter entry string.</para>
      </returns>
    </member>
    <member name="M:System.Drawing.Design.ImageEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>
        <para> Edits the specified object value using the edit style
      provided by <see cref="M:System.Drawing.Design.ImageEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)" />.</para>
      </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.</param>
      <param name="provider">A service provider object through which editing services can be obtained.</param>
      <param name="value">An instance of the value being edited.</param>
      <returns>
        <para>The new value of the object. If the value of the object has not changed,
      this method should return the same object passed to it.</para>
      </returns>
    </member>
    <member name="M:System.Drawing.Design.ImageEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <para> Gets the editing style of the <see cref="M:System.Drawing.Design.ImageEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)" />
method.</para>
      </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.</param>
      <returns>
        <para>A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle" /> enumeration value indicating the supported editing style.</para>
      </returns>
    </member>
    <member name="M:System.Drawing.Design.ImageEditor.GetFileDialogDescription">
      <summary>
        <para> Gets the description for the default file list filter provided by
      this editor.</para>
      </summary>
      <returns>
        <para> The description for the default type of files to filter the file list
      for.</para>
      </returns>
    </member>
    <member name="M:System.Drawing.Design.ImageEditor.GetExtensions">
      <summary>
        <para> Gets the extensions for the file list filter that this editor initially uses to filter the file list.</para>
      </summary>
      <returns>
        <para> A set of file extensions used to filter the file list.</para>
      </returns>
    </member>
    <member name="M:System.Drawing.Design.ImageEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <para> Gets a value indicating whether this editor supports painting a representation
      of an object's value.</para>
      </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.</param>
      <returns>
        <para>
          <see langword="true" />
if <see cref="M:System.Drawing.Design.ImageEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)" />
is implemented;
otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Drawing.Design.ImageEditor.LoadFromStream(System.IO.Stream)">
      <summary>
        <para>Loads an image from the specified stream.</para>
      </summary>
      <param name="stream">A stream that contains the image to load.</param>
      <returns>
        <para>The <see cref="T:System.Drawing.Image" /> that has been loaded.</para>
      </returns>
    </member>
    <member name="M:System.Drawing.Design.ImageEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
      <summary>
        <para>Paints a value indicated by the specified <see cref="T:System.Drawing.Design.PaintValueEventArgs" />.</para>
      </summary>
      <param name="e">A <see cref="T:System.Drawing.Design.PaintValueEventArgs" /> indicating what to paint and where to paint it.</param>
    </member>
    <member name="M:System.Drawing.Design.BitmapEditor.GetFileDialogDescription">
      <summary>
        <para>Gets the description for the default file list filter provided by this
      editor.</para>
      </summary>
      <returns>
        <para>The description for the default type of files to filter the file list
      for.</para>
      </returns>
    </member>
    <member name="M:System.Drawing.Design.BitmapEditor.GetExtensions">
      <summary>
        <para>Gets the extensions for the file list filter that the bitmap editor will initially
      use to filter the file list.</para>
      </summary>
      <returns>
        <para>The default set of file extensions used to filter the file list.</para>
      </returns>
    </member>
    <member name="M:System.Drawing.Design.BitmapEditor.LoadFromStream(System.IO.Stream)">
      <summary>
        <para>Loads an image from the specified stream.</para>
      </summary>
      <param name="stream">The stream from which to load the image.</param>
      <returns>
        <para>The <see cref="T:System.Drawing.Image" /> loaded from the stream.</para>
      </returns>
    </member>
    <member name="M:System.Drawing.Design.ColorEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>
        <para>
       Edits the given object value using the editor style
       provided by <see cref="M:System.Drawing.Design.ColorEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)" />
       .
    </para>
      </summary>
      <param name="context">
    An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.
 </param>
      <param name="provider">
    An <see cref="T:System.IServiceProvider" /> through which editing services may be obtained.
 </param>
      <param name="value">
    An instance of the value being edited.
 </param>
      <returns>
        <para>
       The new value of the object. If the value of the object hasn't
       changed, this should return the same object it was passed.
    </para>
      </returns>
    </member>
    <member name="M:System.Drawing.Design.ColorEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <para>
       Gets the editing style of the Edit method. If the method
       is not supported, this will return <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None" />.
    </para>
      </summary>
      <param name="context">
    An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.
 </param>
      <returns>
        <para>
       An enum value indicating the provided editing style.
    </para>
      </returns>
    </member>
    <member name="M:System.Drawing.Design.ColorEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <para>
       Gets a value indicating if this editor supports the painting of a representation
       of an object's value.
    </para>
      </summary>
      <param name="context">
    An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.
 </param>
      <returns>
        <para>
          <see langword="true" /> if PaintValue is implemented; 
       otherwise, <see langword="false" /> .
    </para>
      </returns>
    </member>
    <member name="M:System.Drawing.Design.ColorEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
      <summary>
        <para>
       Paints a representative value of the given object to the provided
       canvas. Painting should be done within the boundaries of the
       provided rectangle.
    </para>
      </summary>
      <param name="e">
    What to paint and where to paint it.
 </param>
    </member>
    <member name="M:System.Drawing.Design.ColorEditor.ColorPalette.ColorPaletteAccessibleObject.#ctor(System.Drawing.Design.ColorEditor.ColorPalette)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Drawing.Design.ColorEditor.ColorPalette.ColorPaletteAccessibleObject.GetChildCount">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Drawing.Design.ColorEditor.ColorPalette.ColorPaletteAccessibleObject.GetChild(System.Int32)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Drawing.Design.ColorEditor.ColorPalette.ColorPaletteAccessibleObject.HitTest(System.Int32,System.Int32)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Drawing.Design.ColorEditor.ColorPalette.ColorPaletteAccessibleObject.ColorCellAccessibleObject.#ctor(System.Drawing.Design.ColorEditor.ColorPalette.ColorPaletteAccessibleObject,System.Drawing.Color,System.Int32)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Drawing.Design.ColorEditor.ColorPalette.ColorPaletteAccessibleObject.ColorCellAccessibleObject.Bounds">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Drawing.Design.ColorEditor.ColorPalette.ColorPaletteAccessibleObject.ColorCellAccessibleObject.Name">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Drawing.Design.ColorEditor.ColorPalette.ColorPaletteAccessibleObject.ColorCellAccessibleObject.Parent">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Drawing.Design.ColorEditor.ColorPalette.ColorPaletteAccessibleObject.ColorCellAccessibleObject.Role">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Drawing.Design.ColorEditor.ColorPalette.ColorPaletteAccessibleObject.ColorCellAccessibleObject.Value">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Drawing.Design.ColorEditor.ColorUI.#ctor(System.Drawing.Design.ColorEditor)">
      <summary>
      </summary>
    </member>
    <member name="M:System.Drawing.Design.ColorEditor.ColorUI.End">
      <summary>
      </summary>
    </member>
    <member name="M:System.Drawing.Design.ColorEditor.ColorUI.Start(System.Windows.Forms.Design.IWindowsFormsEditorService,System.Object)">
      <summary>
      </summary>
    </member>
    <member name="P:System.Drawing.Design.ColorEditor.ColorUI.EditorService">
      <summary>
      Allows someone else to close our dropdown.
 </summary>
    </member>
    <member name="P:System.Drawing.Design.ColorEditor.ColorUI.Value">
      <summary>
      </summary>
    </member>
    <member name="M:System.Drawing.Design.ContentAlignmentEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>
        <para>
       Edits the given object value using
       the editor style provided by GetEditStyle.
    </para>
      </summary>
      <param name="context">
    An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.
 </param>
      <param name="provider">
        <para>An <see cref="T:System.IServiceProvider" /> through which editing services may be obtained.</para>
      </param>
      <param name="value">
    An instance of the value being edited.
 </param>
      <returns>
        <para>
       The new value of the object. If the value of the object hasn't
       changed, this should return the same object it was passed.
    </para>
      </returns>
    </member>
    <member name="M:System.Drawing.Design.ContentAlignmentEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <para>
       Gets the editing style of the Edit method.
    </para>
      </summary>
      <param name="context">
    An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.
 </param>
      <returns>
        <para>
       A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle" /> value indicating the
       provided editing style. If the method to retrieve the edit style is not
       supported, this will return <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None" />.
    </para>
      </returns>
    </member>
    <member name="M:System.Drawing.Design.ContentAlignmentEditor.ContentUI.#ctor">
      <summary>
      </summary>
    </member>
    <member name="M:System.Drawing.Design.ContentAlignmentEditor.ContentUI.End">
      <summary>
      </summary>
    </member>
    <member name="M:System.Drawing.Design.ContentAlignmentEditor.ContentUI.Start(System.Windows.Forms.Design.IWindowsFormsEditorService,System.Object)">
      <summary>
      </summary>
    </member>
    <member name="M:System.Drawing.Design.ContentAlignmentEditor.ContentUI.ProcessDialogKey(System.Windows.Forms.Keys)">
      <summary>
     Here, we handle the return, tab, and escape keys appropriately
 </summary>
    </member>
    <member name="P:System.Drawing.Design.ContentAlignmentEditor.ContentUI.Value">
      <summary>
      </summary>
    </member>
    <member name="M:System.Drawing.Design.CursorEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>
      Edits the given object value using the editor style provided by
      GetEditorStyle.  A service provider is provided so that any
      required editing services can be obtained.
 </summary>
      <param name="context">
      A type descriptor context that can be used to provide additional
      context information.
 </param>
      <param name="provider">
      A service provider object through which editing services may
      be obtained.
 </param>
      <param name="value">
      An instance of the value being edited.
 </param>
      <returns>
      The new value of the object.  If the value of the object hasn't
      changed, this should return the same object it was passed.
 </returns>
    </member>
    <member name="M:System.Drawing.Design.CursorEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
      Retrieves the editing style of the Edit method.  If the method
      is not supported, this will return None.
 </summary>
      <param name="context">
      A type descriptor context that can be used to provide additional
      context information.
 </param>
      <returns>
      An enum value indicating the provided editing style.
 </returns>
    </member>
    <member name="T:System.Drawing.Design.FontEditor">
      <summary>
        <para> Provides a user interface to select and configure
      a <see cref="T:System.Drawing.Font" />
      
      object.</para>
      </summary>
    </member>
    <member name="M:System.Drawing.Design.FontEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>
        <para>Edits the value of the specified object using the editor style
      indicated by <see cref="M:System.Drawing.Design.FontEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)" />.</para>
      </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.</param>
      <param name="provider">An <see cref="T:System.IServiceProvider" /> that this editor can use to obtain services.</param>
      <param name="value">The object to edit.</param>
      <returns>
        <para> The new value of the object. If the value of the object has not changed,
      this should return the same object that was passed to it.</para>
      </returns>
    </member>
    <member name="M:System.Drawing.Design.FontEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <para>Gets the editor style used by the <see cref="M:System.Drawing.Design.FontEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)" /> method.</para>
      </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.</param>
      <returns>
        <para>A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle" /> value that
   indicates the style of editor used by <see cref="M:System.Drawing.Design.FontEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)" />. </para>
      </returns>
    </member>
    <member name="M:System.Drawing.Design.FontNameEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
      Determines if this editor supports the painting of a representation
      of an object's value.
 </summary>
      <param name="context">
      A type descriptor context that can be used to provide additional
      context information.
 </param>
      <returns>
      Returns true if PaintValue is implemented.
 </returns>
    </member>
    <member name="M:System.Drawing.Design.FontNameEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
      <summary>
        <para>
       Paints a representative value of the given object to the provided
       canvas. Painting should be done within the boundaries of the
       provided rectangle.
    </para>
      </summary>
      <param name="e">
    What to paint and where to paint it.
 </param>
    </member>
    <member name="M:System.Drawing.Design.IconEditor.CreateExtensionsString(System.String[],System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Drawing.Design.IconEditor.CreateFilterEntry(System.Drawing.Design.IconEditor)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Drawing.Design.IconEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>
      Edits the given object value using the editor style provided by
      GetEditorStyle.  A service provider is provided so that any
      required editing services can be obtained.
 </summary>
      <param name="context">
      A type descriptor context that can be used to provide additional
      context information.
 </param>
      <param name="provider">
      A service provider object through which editing services may
      be obtained.
 </param>
      <param name="value">
      An instance of the value being edited.
 </param>
      <returns>
      The new value of the object.  If the value of the object hasn't
      changed, this should return the same object it was passed.
 </returns>
    </member>
    <member name="M:System.Drawing.Design.IconEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
      Retrieves the editing style of the Edit method.  If the method
      is not supported, this will return None.
 </summary>
      <param name="context">
      A type descriptor context that can be used to provide additional
      context information.
 </param>
      <returns>
      An enum value indicating the provided editing style.
 </returns>
    </member>
    <member name="M:System.Drawing.Design.IconEditor.GetFileDialogDescription">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Drawing.Design.IconEditor.GetExtensions">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Drawing.Design.IconEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
      Determines if this editor supports the painting of a representation
      of an object's value.
 </summary>
      <param name="context">
      A type descriptor context that can be used to provide additional
      context information.
 </param>
      <returns>
      Returns true if PaintValue is implemented.
 </returns>
    </member>
    <member name="M:System.Drawing.Design.IconEditor.LoadFromStream(System.IO.Stream)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Drawing.Design.IconEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
      <summary>
        <para>
       Paints a representative value of the given object to the provided
       canvas. Painting should be done within the boundaries of the
       provided rectangle.
    </para>
      </summary>
      <param name="e">
    What to paint and where to paint it.
 </param>
    </member>
    <member name="M:System.Drawing.Design.MetafileEditor.GetFileDialogDescription">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Drawing.Design.MetafileEditor.GetExtensions">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Drawing.Design.MetafileEditor.LoadFromStream(System.IO.Stream)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
  </members>
</doc>