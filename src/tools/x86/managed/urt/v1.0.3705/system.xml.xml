<?xml version="1.0"?>
<doc>
  <assembly>
    <name>System.Xml</name>
  </assembly>
  <members>
    <member name="M:System.Xml.ResDescriptionAttribute.#ctor(System.String)">
      <summary>
                Constructs a new sys description.
            </summary>
      <param name="description">
                description text.
            </param>
    </member>
    <member name="P:System.Xml.ResDescriptionAttribute.Description">
      <summary>
                Retrieves the description text.
            </summary>
      <returns>
                description
            </returns>
    </member>
    <member name="T:System.Xml.XPath.XPathNavigator">
      <summary>
        <para>Reads data from any data store using a cursor model.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Clone">
      <summary>
        <para> Creates a new <see langword="XPathNavigator" /> positioned
   at the same node as this <see langword="XPathNavigator" />
   
   .</para>
      </summary>
      <returns>
        <para>A new <see langword="XPathNavigator" /> object positioned at the same node
   as the original <see langword="XPathNavigator" /> .</para>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.GetAttribute(System.String,System.String)">
      <summary>
        <para> Gets the value of the attribute with the
      specified <see cref="P:System.Xml.XPath.XPathNavigator.LocalName" /> and <see cref="P:System.Xml.XPath.XPathNavigator.NamespaceURI" /> .</para>
      </summary>
      <param name="localName">The local name of the attribute.</param>
      <param name="namespaceURI">The namespace URI of the attribute.</param>
      <returns>
        <para>The value of the specified attribute; String.Empty if a 
      matching attribute is not found or if the navigator is not positioned on an element node.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToAttribute(System.String,System.String)">
      <summary>
        <para> Moves to the attribute with matching <see cref="P:System.Xml.XPath.XPathNavigator.LocalName" /> and <see cref="P:System.Xml.XPath.XPathNavigator.NamespaceURI" />
.</para>
      </summary>
      <param name="localName">The local name of the attribute.</param>
      <param name="namespaceURI">The namespace URI of the attribute.</param>
      <returns>
        <para>
          <see langword="true" /> if the attribute is found;
   otherwise, <see langword="false" />. If <see langword="false" />, the position
   of the navigator does not change.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFirstAttribute">
      <summary>
        <para> Moves to the first attribute.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the
   navigator is successful moving to the first attribute; otherwise,
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNextAttribute">
      <summary>
        <para> Moves to the next attribute.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the
   navigator is successful moving to the next attribute;
<see langword="false" /> if there are no more attributes.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.GetNamespace(System.String)">
      <summary>
        <para> Returns the value of the namespace node
      corresponding to the specified local name.</para>
      </summary>
      <param name="name">The local name of the namespace node.</param>
      <returns>
        <para>The value of the namespace node; String.Empty if a 
      matching namespace node is not found or if the
      navigator is not positioned on an element node.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNamespace(System.String)">
      <summary>
        <para> Moves the
   <see langword="XPathNavigator" /> to the namespace
      node with the specified local name.</para>
      </summary>
      <param name="name">The local name of the namespace node.</param>
      <returns>
        <para>
          <see langword="true" /> if the move was
   successful; <see langword="false" /> if a matching namespace node was not found or
   if the navigator is not positioned on an element node.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFirstNamespace">
      <summary>
        <para> Moves the
   <see langword="XPathNavigator" /> to first namespace node of the current element.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the
   navigator is successful moving to the
   first namespace node; otherwise <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNextNamespace">
      <summary>
        <para> Moves the
   <see langword="XPathNavigator" />
   to the next namespace node.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the
   navigator is successful moving to the
   next namespace node; otherwise <see langword="false" />. If <see langword="false" />, the position of
   the navigator is unchanged.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFirstNamespace(System.Xml.XPath.XPathNamespaceScope)">
      <summary>
        <para>Moves the <see langword="XPathNavigator" /> to the first
   namespace node matching the <see cref="T:System.Xml.XPath.XPathNamespaceScope" /> specified.</para>
      </summary>
      <param name="namespaceScope">An <see cref="T:System.Xml.XPath.XPathNamespaceScope" /> value describing the namespace scope.</param>
      <returns>
        <para>
          <see langword="true" /> if the navigator is successful moving to the first namespace node; otherwise <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNextNamespace(System.Xml.XPath.XPathNamespaceScope)">
      <summary>
        <para>Moves the <see langword="XPathNavigator" /> to the next namespace node matching
   the <see cref="T:System.Xml.XPath.XPathNamespaceScope" />
   specified. </para>
      </summary>
      <param name="namespaceScope">An <see cref="T:System.Xml.XPath.XPathNamespaceScope" /> value describing the namespace scope.</param>
      <returns>
        <para>
          <see langword="true" /> if the navigator is successful moving to the next
   namespace node; otherwise <see langword="false" />. If <see langword="false" />, the
   position of the navigator is unchanged.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNext">
      <summary>
        <para> Moves to the
      next sibling of the current node.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the
   navigator is successful moving to the next sibling node;
<see langword="false" /> if there are no more siblings or if the 
   navigator is currently positioned on an attribute node. If
<see langword="false" /> 
, the position of the navigator is unchanged.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToPrevious">
      <summary>
        <para> Moves to the
      previous sibling of the current node.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the
   navigator is successful moving to the previous sibling node;
<see langword="false" /> if there is no 
   previous sibling or if the navigator is currently positioned on an attribute node. </para>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFirst">
      <summary>
        <para> Moves to the
      first sibling of the current node.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the
   navigator is successful moving to the first sibling node;
<see langword="false" /> if there is no 
   first sibling or if the navigator is currently positioned on an attribute node. </para>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFirstChild">
      <summary>
        <para> Moves to the
      first child of the current node.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if there is a first child node; otherwise
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToParent">
      <summary>
        <para> Moves to
      the parent of the current node.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if there is a parent node; otherwise
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToRoot">
      <summary>
        <para> Moves to the root node
      to which the current node belongs.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveTo(System.Xml.XPath.XPathNavigator)">
      <summary>
        <para> Moves to the same
      position as the specified <see langword="XPathNavigator" />
      .</para>
      </summary>
      <param name="other">The <see langword="XPathNavigator" /> positioned on the node that you want to move to.</param>
      <returns>
        <para>
          <see langword="true " />if successful; otherwise <see langword="false" />. If <see langword="false" /> , the position of the
   navigator is unchanged.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToId(System.String)">
      <summary>
        <para> Moves to the
      node that has an attribute of type ID whose
      value matches the specified string.</para>
      </summary>
      <param name="id">A string representing the ID value of the node to which you want to move. This argument does not need to be atomized.</param>
      <returns>
        <para>
          <see langword="true " />if the move
   was successful; otherwise <see langword="false" />. If
<see langword="false" /> , the position of the navigator is unchanged.</para>
        <note type="note">
   If the navigator is implemented over
   an <see cref="T:System.Xml.XmlDataDocument" />, this method always returns <see langword="false" />
   and the position of the navigator is not changed.
</note>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.IsSamePosition(System.Xml.XPath.XPathNavigator)">
      <summary>
        <para> Determines whether
      the current <see langword="XPathNavigator" /> is at the same position as the
      specified <see langword="XPathNavigator" />
      .</para>
      </summary>
      <param name="other">The <see langword="XPathNavigator" /> that you want to compare against.</param>
      <returns>
        <para>
          <see langword="true" /> if the two navigators have the
   same position; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Compile(System.String)">
      <summary>
        <para> Compiles a string representing an XPath expression and returns
      an <see cref="T:System.Xml.XPath.XPathExpression" />
      .</para>
      </summary>
      <param name="xpath">A string representing an XPath expression.</param>
      <returns>
        <para>An <see langword="XPathExpression" /> object representing
   the XPath expression.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Evaluate(System.Xml.XPath.XPathExpression)">
      <summary>
        <para>Evaluates the <see cref="T:System.Xml.XPath.XPathExpression" /> and returns the typed result (number, Boolean,
   string, or node set). Use the <see cref="T:System.Xml.XPath.XPathNodeIterator" /> to iterate over a set of
   nodes.</para>
      </summary>
      <param name="expr">An <see langword="XPathExpression" /> that can be evaluated.</param>
      <returns>
        <para>The result of the expression.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Evaluate(System.Xml.XPath.XPathExpression,System.Xml.XPath.XPathNodeIterator)">
      <summary>
        <para>Evaluates the <see cref="T:System.Xml.XPath.XPathExpression" /> using the supplied context and returns the
   typed result (number, Boolean, string, or node set).</para>
      </summary>
      <param name="expr">An <see langword="XPathExpression" /> that can be evaluated.</param>
      <param name=" context">An <see cref="T:System.Xml.XPath.XPathNodeIterator" /> pointing to the selected node set that the evaluation is to be performed on.</param>
      <returns>
        <para>The result of the expression.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Evaluate(System.String)">
      <summary>
        <para>Evaluates the string representing an XPath expression and
      returns the typed result (number, Boolean, string, or node set). Use
      the <see cref="T:System.Xml.XPath.XPathNodeIterator" />
      to iterate over a set of nodes.</para>
      </summary>
      <param name="xpath">A string representing an XPath expression that can be evaluated.</param>
      <returns>
        <para>The result of the expression.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Matches(System.Xml.XPath.XPathExpression)">
      <summary>
        <para>Determines whether the current node matches the
      specified <see cref="T:System.Xml.XPath.XPathExpression" />
      .</para>
      </summary>
      <param name="expr">An <see langword="XPathExpression" /> encapsulating a compiled XSLT pattern.</param>
      <returns>
        <para>
          <see langword="true" /> if the
   current node matches the <see langword="XPathExpression" />
   ; otherwise,
<see langword="false" />
.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Matches(System.String)">
      <summary>
        <para>Determines whether the current node matches the
      specified XSLT pattern.</para>
      </summary>
      <param name="xpath">A string representing an XSLT pattern.</param>
      <returns>
        <para>
          <see langword="true" /> if the
   current node matches the XSLT pattern; otherwise,
<see langword="false" />
.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Select(System.Xml.XPath.XPathExpression)">
      <summary>
        <para>Selects a node set using the specified <see cref="T:System.Xml.XPath.XPathExpression" />
.</para>
      </summary>
      <param name="expr">An <see langword="XPathExpression" /> .</param>
      <returns>
        <para>An <see cref="T:System.Xml.XPath.XPathNodeIterator" /> pointing to the
   selected node set.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Select(System.String)">
      <summary>
        <para>Selects a node set using the specified XPath expression.</para>
      </summary>
      <param name="xpath">A string representing an XPath expression.</param>
      <returns>
        <para>An <see cref="T:System.Xml.XPath.XPathNodeIterator" /> pointing to the
   selected node set.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectChildren(System.Xml.XPath.XPathNodeType)">
      <summary>
        <para> Selects all the child nodes of the current node
      with the matching <see cref="T:System.Xml.XPath.XPathNodeType" />.</para>
      </summary>
      <param name="type">The <see langword="XPathNodeType" /> of the child nodes.</param>
      <returns>
        <para>An <see cref="T:System.Xml.XPath.XPathNodeIterator" /> pointing to the selected nodes.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectChildren(System.String,System.String)">
      <summary>
        <para>Selects all the child element nodes of the current node
      with the supplied local name and namespace URI.</para>
      </summary>
      <param name="name">The local name of the child nodes.</param>
      <param name=" namespaceURI">The namespace URI of the child nodes.</param>
      <returns>
        <para>An <see cref="T:System.Xml.XPath.XPathNodeIterator" /> pointing to the selected nodes.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectDescendants(System.Xml.XPath.XPathNodeType,System.Boolean)">
      <summary>
        <para> Selects all the descendant nodes of the current
      node with the matching <see cref="T:System.Xml.XPath.XPathNodeType" /> .</para>
      </summary>
      <param name="type">The <see langword="XPathNodeType" /> of the descendant nodes.</param>
      <param name=" matchSelf">
        <see langword="true" /> to include the context node in the selection; otherwise <see langword="false" /> .</param>
      <returns>
        <para>An <see cref="T:System.Xml.XPath.XPathNodeIterator" /> pointing to the selected nodes.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectDescendants(System.String,System.String,System.Boolean)">
      <summary>
        <para>Selects all the descendant element nodes of the current
      node with the supplied local name and namespace URI.</para>
      </summary>
      <param name="name">The local name of the descendant nodes.</param>
      <param name=" namespaceURI">The namespace URI of the descendant nodes.</param>
      <param name=" matchSelf">
        <see langword="true" /> to include the context node in the selection; otherwise <see langword="false" /> .</param>
      <returns>
        <para>An <see cref="T:System.Xml.XPath.XPathNodeIterator" /> pointing to the selected nodes.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectAncestors(System.Xml.XPath.XPathNodeType,System.Boolean)">
      <summary>
        <para>Selects all the ancestor element nodes of the current
      node with the matching <see cref="T:System.Xml.XPath.XPathNodeType" /> .</para>
      </summary>
      <param name="type">The <see langword="XPathNodeType" /> of the ancestor nodes.</param>
      <param name=" matchSelf">
        <see langword="true" /> to include the context node in the selection; otherwise <see langword="false" /> .</param>
      <returns>
        <para>An <see cref="T:System.Xml.XPath.XPathNodeIterator" /> pointing to the selected nodes.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectAncestors(System.String,System.String,System.Boolean)">
      <summary>
        <para>Selects all the ancestor element nodes of the current
      node with the supplied local name and namespace URI.</para>
      </summary>
      <param name="name">The local name of the ancestor nodes.</param>
      <param name=" namespaceURI">The namespace URI of the ancestor nodes.</param>
      <param name=" matchSelf">
        <see langword="true" /> to include the context node in the selection; otherwise <see langword="false" /> .</param>
      <returns>
        <para>An <see cref="T:System.Xml.XPath.XPathNodeIterator" /> pointing to the selected nodes.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ComparePosition(System.Xml.XPath.XPathNavigator)">
      <summary>
        <para> Compares the position of the current navigator with the
      position of the specified <see langword="XPathNavigator" /> .</para>
      </summary>
      <param name="nav">The <see langword="XPathNavigator" /> to compare against.</param>
      <returns>
        <para>An <see cref="T:System.Xml.XmlNodeOrder" /> value representing the comparative position of the
   two navigators. The following table describes the <see langword="XmlNodeOrder" />
   enumeration.</para>
        <list type="table">
          <listheader>
            <term>XmlNodeOrder</term>
            <description>Description</description>
          </listheader>
          <item>
            <term> Before</term>
            <description>
              <para> The current node of this navigator is before the current node
            of the supplied navigator.</para>
            </description>
          </item>
          <item>
            <term> After</term>
            <description>
              <para> The current node of this navigator is after the current node of
               the supplied navigator.</para>
            </description>
          </item>
          <item>
            <term> Same</term>
            <description>
              <para> The two navigators are positioned
                  on the same node.</para>
            </description>
          </item>
          <item>
            <term> Unknown</term>
            <description>
              <para>The node positions cannot be determined in document order, relative to
                     each other. This could occur if the two nodes reside in different
                     trees.</para>
            </description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.IsDescendant(System.Xml.XPath.XPathNavigator)">
      <summary>
        <para>Determines whether the specified
 <see langword="XPathNavigator" /> is a descendant of the current
 <see langword="XPathNavigator" />.</para>
      </summary>
      <param name="nav">The <see langword="XPathNavigator" /> that you want to compare against. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="nav" />
is a descendant of the current navigator; otherwise <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ToString">
      <summary>
        <para>Gets the text value of the current node. This
      method is equivalent to returning the <see cref="P:System.Xml.XPath.XPathNavigator.Value" /> property.</para>
      </summary>
      <returns>
        <para>The content returned depends on the <see cref="P:System.Xml.XPath.XPathNavigator.NodeType" /> of the node. </para>
        <list type="table">
          <listheader>
            <term>Node Type</term>
            <description>Value</description>
          </listheader>
          <item>
            <term> Attribute</term>
            <description>The value of the attribute.</description>
          </item>
          <item>
            <term> Element</term>
            <description>The <see cref="P:System.Xml.XmlNode.InnerText" /> of the element.</description>
          </item>
          <item>
            <term> Comment</term>
            <description>The content of the comment.</description>
          </item>
          <item>
            <term> ProcessingInstruction</term>
            <description>The entire content excluding the target.</description>
          </item>
          <item>
            <term> Text</term>
            <description>
              <para>The content of the text node.</para>
            </description>
          </item>
          <item>
            <term> Whitespace</term>
            <description>The white space between mark-up.</description>
          </item>
          <item>
            <term> SignificantWhitespace</term>
            <description>The white space between markup in a mixed content 
      model or white space within an xml:space= 'preserve' scope.</description>
          </item>
          <item>
            <term> Root</term>
            <description>The <see cref="P:System.Xml.XmlNode.InnerText" /> of the root 
   node.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.NodeType">
      <summary>
        <para> Gets the type of the current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.LocalName">
      <summary>
        <para> Gets the name of the current node without the namespace prefix.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.NamespaceURI">
      <summary>
        <para> Gets the namespace URI (as defined in the W3C Namespace Specification) of the current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.Name">
      <summary>
        <para> Gets the qualified name of
      the current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.Prefix">
      <summary>
        <para> Gets the prefix associated with
      the current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.Value">
      <summary>
        <para> Gets the text value of the current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.BaseURI">
      <summary>
        <para> Gets the base URI for the current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.XmlLang">
      <summary>
        <para> Gets the
   <see langword="xml:lang" /> scope for the
      current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.IsEmptyElement">
      <summary>
        <para> Gets a value indicating whether
      the current
      node is an empty element (for example, &lt;MyElement/&gt;).</para>
      </summary>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.NameTable">
      <summary>
        <para> Gets
      the <see cref="T:System.Xml.XmlNameTable" />
      associated with this implementation.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.HasAttributes">
      <summary>
        <para> Gets a
      value indicating whether the element node has any attributes.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.HasChildren">
      <summary>
        <para> Gets a value indicating whether
      the current node has child nodes.</para>
      </summary>
    </member>
    <member name="T:System.Xml.IHasXmlNode">
      <summary>
        <para>Enables a class to return an <see cref="T:System.Xml.XmlNode" /> from the
   current context or position.</para>
      </summary>
    </member>
    <member name="M:System.Xml.IHasXmlNode.GetNode">
      <summary>
        <para>Returns the <see cref="T:System.Xml.XmlNode" /> for the current position.</para>
      </summary>
      <returns>
        <para>The <see langword="XmlNode" /> for the
   current position.</para>
      </returns>
    </member>
    <member name="T:System.Xml.XPath.XPathNodeIterator">
      <summary>
        <para> Provides an iterator over a set of selected nodes.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XPath.XPathNodeIterator.Clone">
      <summary>
        <para>When overridden in a derived class, creates a new
   <see langword="XPathNodeIterator" />.</para>
      </summary>
      <returns>
        <para>A new
   <see langword="XPathNodeIterator" /> object.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNodeIterator.MoveNext">
      <summary>
        <para>When overridden in a derived class, moves
      the <see cref="T:System.Xml.XPath.XPathNavigator" /> to the next node in the selected set.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the
<see langword="XPathNavigator" /> moved to the next node; 
<see langword="false" /> if there are no more selected nodes.</para>
      </returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNodeIterator.Current">
      <summary>
        <para>When overridden in a derived class, returns the
      navigator for this <see langword="XPathNodeIterator" /> positioned on the current
      node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XPath.XPathNodeIterator.CurrentPosition">
      <summary>
        <para>When overridden in a derived class, gets the index of the current position in the selected
      set of nodes.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XPath.XPathNodeIterator.Count">
      <summary>
        <para>Gets the index of the last node in the selected set of nodes.</para>
      </summary>
    </member>
    <member name="T:System.Xml.EntityHandling">
      <summary>
        <para>Specifies how entities are handled.</para>
      </summary>
    </member>
    <member name="F:System.Xml.EntityHandling.ExpandEntities">
      <summary>
        <para> Expands all entities. This is the default.
 </para>
        <para> Entity reference nodes (<see cref="P:System.Xml.XmlValidatingReader.NodeType" />= XmlNodeType.EntityReference) are not returned. The entity text is
 expanded in place of the entity references.
 </para>
      </summary>
    </member>
    <member name="F:System.Xml.EntityHandling.ExpandCharEntities">
      <summary>
        <para>Expands character entities and returns general entities
      as nodes (<see cref="P:System.Xml.XmlValidatingReader.NodeType" />=XmlNodeType.EntityReference, <see cref="P:System.Xml.XmlValidatingReader.Name" />=the name of the entity, <see cref="P:System.Xml.XmlValidatingReader.HasValue" />
      =
      false).</para>
        <para>You must call <see cref="M:System.Xml.XmlReader.ResolveEntity" /> to see what the general entities expand to. This
   enables you to optimize entity handling by only expanding the entity the
   first time it is used.</para>
        <para>When set to ExpandCharEntities, a reader call to the <see cref="M:System.Xml.XmlReader.GetAttribute(System.String)" />
method expands all entities
(both general and character entities).</para>
      </summary>
    </member>
    <member name="T:System.Xml.IXmlLineInfo">
      <summary>
        <para>Provides an interface to enable a class to return line and position information.</para>
      </summary>
    </member>
    <member name="M:System.Xml.IXmlLineInfo.HasLineInfo">
      <summary>
   Gets a value indicating whether the class can return
   line information.
</summary>
      <returns>
        <see langword="true" /> if <see cref="P:System.Xml.IXmlLineInfo.LineNumber" /> and <see cref="P:System.Xml.IXmlLineInfo.LinePosition" /> can be provided; otherwise, <see langword="false" />.
</returns>
    </member>
    <member name="P:System.Xml.IXmlLineInfo.LineNumber">
      <summary>
        <para>Gets the current line number.</para>
      </summary>
    </member>
    <member name="P:System.Xml.IXmlLineInfo.LinePosition">
      <summary>
        <para>Gets the current line position.</para>
      </summary>
    </member>
    <member name="T:System.Xml.NameTable">
      <summary>
        <para>Implements a single-threaded <see cref="T:System.Xml.XmlNameTable" /> .</para>
      </summary>
    </member>
    <member name="T:System.Xml.XmlNameTable">
      <summary>
        <para> Table of atomized string objects.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlNameTable.Get(System.Char[],System.Int32,System.Int32)">
      <summary>
        <para>When overridden in a derived class, gets the atomized 
      string containing the
      same characters as the specified range of characters in the given array.</para>
        <para>For more information on atomized strings, see <see cref="T:System.Xml.XmlNameTable" /> .</para>
      </summary>
      <param name="array">The character array containing the name to look up.</param>
      <param name="offset">The zero-based index into the array specifying the first character of the name.</param>
      <param name="length">The number of characters in the name.</param>
      <returns>
        <para> The atomized string or <see langword="null" /> if the
   string has not already been atomized. If <paramref name="length" /> is zero,
   String.Empty is returned.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNameTable.Get(System.String)">
      <summary>
        <para>When overridden in a derived class, gets the atomized 
      string containing the same
      value as the specified string.</para>
        <para>For more information on atomized strings, see <see cref="T:System.Xml.XmlNameTable" /> .</para>
      </summary>
      <param name="array">The name to look up.</param>
      <returns>
        <para>The atomized string or <see langword="null" /> if the
   string has not already been atomized.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNameTable.Add(System.Char[],System.Int32,System.Int32)">
      <summary>
        <para>When overridden in a derived class, atomizes the 
      specified string and adds it to the <see langword="XmlNameTable" />.</para>
        <para>For more information on atomized strings, see <see cref="T:System.Xml.XmlNameTable" /> .</para>
      </summary>
      <param name="array">The character array containing the name to add.</param>
      <param name="offset">Zero based index into the array specifying the first character of the name.</param>
      <param name="length">The number of characters in the name.</param>
      <returns>
        <para>The new atomized string or the existing one if it
      already exists. If length is zero, String.Empty is returned.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNameTable.Add(System.String)">
      <summary>
        <para>When overridden in a derived class, atomizes the
      specified string and adds it to the <see langword="XmlNameTable" /> .</para>
        <para>For more information on atomized strings, see <see cref="T:System.Xml.XmlNameTable" /> .</para>
      </summary>
      <param name="array">The name to add.</param>
      <returns>
        <para>The new atomized string or the existing one if it already
      exists.</para>
      </returns>
    </member>
    <member name="M:System.Xml.NameTable.#ctor">
      <summary>
        <para>Initializes a new instance of the 
 <see langword="NameTable" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Xml.NameTable.Add(System.String)">
      <summary>
        <para> Atomizes the specified string and adds it to the
   <see langword="NameTable" />
   .</para>
        <para> For more information on atomized strings, see <see cref="T:System.Xml.NameTable" />
.</para>
      </summary>
      <param name="key">The string to add.</param>
      <returns>
        <para>The atomized string or the existing string if it already
      exists in the <see langword="NameTable" /> .</para>
      </returns>
    </member>
    <member name="M:System.Xml.NameTable.Add(System.Char[],System.Int32,System.Int32)">
      <summary>
        <para> Atomizes the specified string and adds it to the
   <see langword="NameTable" />
   .</para>
        <para>For more information on atomized strings, see <see cref="T:System.Xml.NameTable" />.</para>
      </summary>
      <param name="key">The character array containing the string to add.</param>
      <param name="start">The zero-based index into the array specifying the first character of the string.</param>
      <param name="len">The number of characters in the string.</param>
      <returns>
        <para>The atomized string or the existing string if one already
      exists in the <see langword="NameTable" />
      . If <paramref name="len" /> is zero, String.Empty is returned.</para>
      </returns>
    </member>
    <member name="M:System.Xml.NameTable.Get(System.String)">
      <summary>
        <para> Gets the atomized string with the specified
      value.</para>
        <para>For more information on atomized strings, see <see cref="T:System.Xml.NameTable" /> 
.</para>
      </summary>
      <param name="value">The name to find.</param>
      <returns>
        <para>The atomized string object or
   <see langword="null" /> if the string has not already been atomized.</para>
      </returns>
    </member>
    <member name="M:System.Xml.NameTable.Get(System.Char[],System.Int32,System.Int32)">
      <summary>
        <para>Gets the atomized string
      containing the same characters as the specified range of characters in the given
      array.</para>
        <para>For more information on atomized strings, see <see cref="T:System.Xml.NameTable" />.</para>
      </summary>
      <param name="key">The character array containing the name to find.</param>
      <param name="start">The zero-based index into the array specifying the first character of the name.</param>
      <param name="len">The number of characters in the name.</param>
      <returns>
        <para>The atomized string or <see langword="null" /> if the
   string has not already been atomized. If <paramref name="len" /> is zero,
   String.Empty is returned.</para>
      </returns>
    </member>
    <member name="T:System.Xml.ReadState">
      <summary>
        <para>Specifies the state of the reader.</para>
      </summary>
    </member>
    <member name="F:System.Xml.ReadState.Initial">
      <summary>
        <para>The <see langword="Read" /> method has not been called.</para>
      </summary>
    </member>
    <member name="F:System.Xml.ReadState.Interactive">
      <summary>
        <para>The <see langword="Read" /> method 
 has been called. Additional methods may be called on the reader.</para>
      </summary>
    </member>
    <member name="F:System.Xml.ReadState.Error">
      <summary>
    An error occurred that prevents the
    read operation from continuing.
 </summary>
    </member>
    <member name="F:System.Xml.ReadState.EndOfFile">
      <summary>
        <para>The end of the file has been reached
      successfully.</para>
      </summary>
    </member>
    <member name="F:System.Xml.ReadState.Closed">
      <summary>
        <para>The <see cref="M:System.Xml.XmlReader.Close" /> method has been called.</para>
      </summary>
    </member>
    <member name="T:System.Xml.ValidationType">
      <summary>
        <para>Specifies the type of validation to perform.</para>
      </summary>
    </member>
    <member name="F:System.Xml.ValidationType.None">
      <summary>
        <para>Creates an XML 1.0 compliant non-validating parser. 
      Default attributes are reported and general entities can be resolved by calling
   <see cref="M:System.Xml.XmlValidatingReader.ResolveEntity" />
   . The DOCTYPE is not used
   for validation purposes.</para>
        <para> No validation
   errors are thrown.</para>
      </summary>
    </member>
    <member name="F:System.Xml.ValidationType.Auto">
      <summary>
        <see cref="T:System.Xml.XmlValidatingReader" />validates if DTD or 
   schema information is found.
</summary>
    </member>
    <member name="F:System.Xml.ValidationType.DTD">
      <summary>
        <para>Validates according to the DTD.</para>
      </summary>
    </member>
    <member name="F:System.Xml.ValidationType.XDR">
      <summary>
        <para> Validate according to XDR schemas; including inline
 schemas. XDR schemas are recognized using the <see langword="x-schema" />
 namespace prefix
 or the <see cref="P:System.Xml.XmlValidatingReader.Schemas" />
 property.</para>
      </summary>
    </member>
    <member name="F:System.Xml.ValidationType.Schema">
      <summary>
        <para> Validate according to XSD schemas; including inline
 schemas. XSD schemas are associated with namespace URIs either by using the
 <see langword="schemaLocation" />
 attribute or the provided <see cref="P:System.Xml.XmlValidatingReader.Schemas" />
 property.</para>
      </summary>
    </member>
    <member name="T:System.Xml.WhitespaceHandling">
      <summary>
        <para> Specifies how white space is handled.
      </para>
      </summary>
    </member>
    <member name="F:System.Xml.WhitespaceHandling.All">
      <summary>
        <para>Return <see langword="Whitespace" /> and 
<see langword="SignificantWhitespace" /> 
nodes. This is the default.</para>
      </summary>
    </member>
    <member name="F:System.Xml.WhitespaceHandling.Significant">
      <summary>
        <para> Return <see langword="SignificantWhitespace" /> nodes only.
   </para>
      </summary>
    </member>
    <member name="F:System.Xml.WhitespaceHandling.None">
      <summary>
        <para>Return no <see langword="Whitespace" /> and no 
<see langword="SignificantWhitespace" /> 
nodes.</para>
      </summary>
    </member>
    <member name="T:System.Xml.XmlAttribute">
      <summary>
        <para> Represents an attribute. Valid and default values for the attribute are defined in a DTD or schema.
      </para>
      </summary>
    </member>
    <member name="T:System.Xml.XmlNode">
      <summary>
        <para> Represents a single node in the XML document.
      </para>
      </summary>
    </member>
    <member name="T:System.Xml.XPath.IXPathNavigable">
      <summary>
        <para>Provides an accessor to the <see cref="T:System.Xml.XPath.XPathNavigator" />.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XPath.IXPathNavigable.CreateNavigator">
      <summary>
        <para>Creates a new <see cref="T:System.Xml.XPath.XPathNavigator" /> for this
<see langword="IXPathNavigable" /> interface.</para>
      </summary>
      <returns>
        <para>An <see langword="XPathNavigator" />
object.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNode.CreateNavigator">
      <summary>
        <para>Creates an <see cref="T:System.Xml.XPath.XPathNavigator" /> for navigating this object.</para>
      </summary>
      <returns>
        <para>An <see langword="XPathNavigator" />
object. The <see langword="XPathNavigator" /> is positioned on the node from
which the method was called. It is not positioned on the root of the
document.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNode.SelectSingleNode(System.String)">
      <summary>
        <para>Selects the first <see langword="XmlNode" /> that matches the
   XPath expression.</para>
      </summary>
      <param name="xpath">The XPath expression.</param>
      <returns>
        <para>The first <see langword="XmlNode" /> that matches the
   XPath query or <see langword="null" /> if no matching node was found.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNode.SelectSingleNode(System.String,System.Xml.XmlNamespaceManager)">
      <summary>
        <para>Selects the first <see langword="XmlNode" /> that matches the XPath
   expression. Any prefixes found in the XPath expression are resolved using the supplied <see cref="T:System.Xml.XmlNamespaceManager" />
   .</para>
      </summary>
      <param name="xpath">The XPath expression.</param>
      <param name=" nsmgr">An <see cref="T:System.Xml.XmlNamespaceManager" /> to use for resolving namespaces for prefixes in the XPath expression.</param>
      <returns>
        <para>The first <see langword="XmlNode" />
that matches the XPath query or <see langword="null" /> if no matching node was
found.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNode.SelectNodes(System.String)">
      <summary>
        <para>Selects a list of nodes matching the XPath
      expression.</para>
      </summary>
      <param name="xpath">The XPath expression.</param>
      <returns>
        <para>An <see cref="T:System.Xml.XmlNodeList" /> containing a collection of nodes
   matching the XPath query.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNode.SelectNodes(System.String,System.Xml.XmlNamespaceManager)">
      <summary>
        <para>Selects a list of nodes matching the XPath expression.
      Any prefixes found in the XPath expression are resolved using the supplied
   <see cref="T:System.Xml.XmlNamespaceManager" /> .</para>
      </summary>
      <param name="xpath">The XPath expression.</param>
      <param name=" nsmgr">An <see cref="T:System.Xml.XmlNamespaceManager" /> to use for resolving namespaces for prefixes in the XPath expression.</param>
      <returns>
        <para>An <see cref="T:System.Xml.XmlNodeList" /> containing a collection of nodes matching the XPath
   query.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNode.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary>
        <para>Inserts the specified node immediately before the specified reference node.</para>
      </summary>
      <param name="newChild">The <see langword="XmlNode" /> to insert.</param>
      <param name="refChild">The <see langword="XmlNode" /> that is the reference node. The <paramref name="newChild" /> is placed before this node.</param>
      <returns>
   The node being inserted.
</returns>
    </member>
    <member name="M:System.Xml.XmlNode.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary>
        <para>Inserts the specified node immediately after the specified reference node.</para>
      </summary>
      <param name="newChild">The <see langword="XmlNode" /> to insert.</param>
      <param name="refChild">The <see langword="XmlNode" /> that is the reference node. The <paramref name="newNode" /> is placed after the <paramref name="refNode" /> .</param>
      <returns>
   The node being inserted.
</returns>
    </member>
    <member name="M:System.Xml.XmlNode.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary>
        <para>Replaces the child node <paramref name="oldChild" />
with <paramref name="newChild" /> node.</para>
      </summary>
      <param name="newChild">The new node to put in the child list.</param>
      <param name="oldChild">The node being replaced in the list.</param>
      <returns>
        <para>The node replaced.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNode.RemoveChild(System.Xml.XmlNode)">
      <summary>
        <para>Removes specified child node.</para>
      </summary>
      <param name="oldChild">The node being removed.</param>
      <returns>
        <para>The node removed.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNode.PrependChild(System.Xml.XmlNode)">
      <summary>
        <para>Adds the specified node to the beginning of the list of children of
      this node.</para>
      </summary>
      <param name="newChild">The node to add. If it is an <see cref="T:System.Xml.XmlDocumentFragment" /> , the entire contents of the document fragment are moved into the child list of this node.</param>
      <returns>
        <para>The node added.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)">
      <summary>
        <para>Adds the specified node to the end of the list of children of
      this node.</para>
      </summary>
      <param name="newChild">The node to add. If it is a <see cref="T:System.Xml.XmlDocumentFragment" /> , the entire contents of the document fragment are moved into the child list of this node.</param>
      <returns>
        <para>The node added.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNode.CloneNode(System.Boolean)">
      <summary>
        <para>When overridden in a derived class, creates a duplicate of the node.</para>
      </summary>
      <param name="deep">
        <see langword="true" />to recursively clone the subtree under the specified node; <see langword="false" /> to clone only the node itself.</param>
      <returns>
        <para>The cloned node.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNode.Normalize">
      <summary>
        <para> Puts all XmlText nodes in the full depth of the sub-tree underneath
      this XmlNode into a "normal" form where only markup
      (that is, tags, comments, processing instructions, CDATA sections,
      and entity references) separates XmlText nodes, that is, there
      are no adjacent XmlText nodes.
      </para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlNode.Supports(System.String,System.String)">
      <summary>
        <para> Test if the DOM implementation implements a specific feature.
      </para>
      </summary>
      <param name="feature">The package name of the feature to test. This name is case-insensitive. </param>
      <param name="version">This is the version number of the package name to test. If the version is not specified (null), supporting any version of the feature will cause the method to return true. </param>
      <returns>
        <para>
          <see langword="true" /> if the feature is implemented in the specified version;
   otherwise, <see langword="false" />.
   </para>
The following table describes the combinations that
return <see langword="true" />.
<list type="table"><listheader><term> Feature</term><description> Version</description></listheader><item><term> XML</term><description> 1.0</description></item><item><term> XML</term><description>2.0</description></item></list></returns>
    </member>
    <member name="M:System.Xml.XmlNode.Clone">
      <summary>
        <para>Creates a duplicate of this node.</para>
      </summary>
      <returns>
        <para>The cloned node.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNode.GetEnumerator">
      <summary>
        <para> Provides support for the for each style iteration over
      the nodes in the <see langword="XmlNode" />
      .</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Collections.IEnumerator" /> .</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNode.WriteTo(System.Xml.XmlWriter)">
      <summary>
        <para>When overridden in a derived class, saves the current node to the specified <see cref="T:System.Xml.XmlWriter" /> .</para>
      </summary>
      <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="M:System.Xml.XmlNode.WriteContentTo(System.Xml.XmlWriter)">
      <summary>
        <para>When overridden in a derived class, saves all the children of the node to the specified
   <see cref="T:System.Xml.XmlWriter" /> .</para>
      </summary>
      <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="M:System.Xml.XmlNode.RemoveAll">
      <summary>
        <para>Removes all the children and/or attributes
      of the current node.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)">
      <summary>
        <para>Looks up the closest xmlns declaration for the given
      prefix that is in scope for the current node and returns
      the namespace URI in the declaration.</para>
      </summary>
      <param name="prefix">Prefix whose namespace URI you want to find</param>
      <returns>
        <para>The namespace URI of the specified prefix.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNode.GetPrefixOfNamespace(System.String)">
      <summary>
        <para>Looks up the closest xmlns declaration for the given namespace
      URI that is in scope for the current node and returns
      the prefix defined in that declaration.</para>
      </summary>
      <param name="namespaceURI">Namespace URI whose prefix you want to find</param>
      <returns>
        <para>The prefix for the specified namespace URI.</para>
      </returns>
    </member>
    <member name="P:System.Xml.XmlNode.Name">
      <summary>
        <para>When overridden in a derived class, gets the qualified name of the node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNode.Value">
      <summary>
        <para>Gets or sets the value of the node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNode.NodeType">
      <summary>
        <para>When overridden in a derived class, gets the type of the current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNode.ParentNode">
      <summary>
        <para>Gets the parent of this node (for nodes that can have
      parents).</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNode.ChildNodes">
      <summary>
        <para>Gets all the children of the node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNode.PreviousSibling">
      <summary>
        <para>Gets
      the node immediately preceding this node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNode.NextSibling">
      <summary>
        <para>Gets
      the node immediately following this node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNode.Attributes">
      <summary>
        <para>Gets an <see cref="T:System.Xml.XmlAttributeCollection" />
containing the attributes
of this node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNode.OwnerDocument">
      <summary>
        <para>Gets the <see cref="T:System.Xml.XmlDocument" /> to which this node belongs.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNode.FirstChild">
      <summary>
        <para>Gets the first child of the node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNode.LastChild">
      <summary>
        <para>Gets the last child of the node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNode.HasChildNodes">
      <summary>
        <para>Gets a value indicating whether this node has any child nodes.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNode.NamespaceURI">
      <summary>
        <para>Gets the namespace URI of this node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNode.Prefix">
      <summary>
        <para>Gets or sets the namespace prefix of this node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNode.LocalName">
      <summary>
        <para> When overridden in a derived class, gets the local name of the node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNode.IsReadOnly">
      <summary>
        <para> Gets a value indicating whether the node is read-only.
      </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNode.InnerText">
      <summary>
        <para>Gets or sets the concatenated values of the node and
      all its children.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNode.OuterXml">
      <summary>
        <para>Gets the markup
      representing this node and all its children.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNode.InnerXml">
      <summary>
        <para>Gets or sets the markup representing
      just the children of this node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNode.BaseURI">
      <summary>
        <para>Gets the base URI of the current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNode.Item(System.String)">
      <summary>
        <para> Gets the first child element with the specified
   <see cref="P:System.Xml.XmlNode.Name" /> .</para>
      </summary>
      <param name="name">The qualified name of the element to retrieve</param>
    </member>
    <member name="P:System.Xml.XmlNode.Item(System.String,System.String)">
      <summary>
        <para> Gets the first child element with the
      specified <see cref="P:System.Xml.XmlNode.LocalName" /> and <see cref="P:System.Xml.XmlNode.NamespaceURI" />
      .</para>
      </summary>
      <param name="localname">The local name of the element.</param>
      <param name=" ns">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlAttribute.CloneNode(System.Boolean)">
      <summary>
        <para>Creates a duplicate of this node.</para>
      </summary>
      <param name="deep">
        <see langword="true" /> to recursively clone the subtree under the specified node; <see langword="false" /> to clone only the node itself </param>
      <returns>
        <para>The duplicate node.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlAttribute.WriteTo(System.Xml.XmlWriter)">
      <summary>
        <para>Saves the node to the specified <see cref="T:System.Xml.XmlWriter" /> .</para>
      </summary>
      <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="M:System.Xml.XmlAttribute.WriteContentTo(System.Xml.XmlWriter)">
      <summary>
        <para>Saves all the children of the node to the specified 
   <see cref="T:System.Xml.XmlWriter" /> .</para>
      </summary>
      <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="P:System.Xml.XmlAttribute.ParentNode">
      <summary>
   Gets the parent of this node. For
<see langword="XmlAttribute" /> nodes, this property always returns 
<see langword="null" />.
</summary>
    </member>
    <member name="P:System.Xml.XmlAttribute.Name">
      <summary>
        <para>Gets the qualified name of the node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlAttribute.LocalName">
      <summary>
        <para> Gets the local name of the node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlAttribute.NamespaceURI">
      <summary>
        <para>Gets the namespace URI of this node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlAttribute.Prefix">
      <summary>
        <para>Gets or sets the namespace prefix of this node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlAttribute.NodeType">
      <summary>
        <para>Gets the type of the current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlAttribute.OwnerDocument">
      <summary>
        <para>Gets the <see cref="T:System.Xml.XmlDocument" /> to which this node belongs.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlAttribute.Value">
      <summary>
        <para>Gets or sets the value of the node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlAttribute.InnerText">
      <summary>
        <para>Gets or sets the concatenated values of the node and all
      its children.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlAttribute.Specified">
      <summary>
        <para>Gets a value indicating whether the attribute value was
      explicitly set.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlAttribute.OwnerElement">
      <summary>
        <para>Gets the <see cref="T:System.Xml.XmlElement" /> to which the attribute
   belongs.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlAttribute.InnerXml">
      <summary>
        <para> Gets or sets the markup representing
      the children of this node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlAttribute.BaseURI">
      <summary>
        <para>Gets the base URI of the node.</para>
      </summary>
    </member>
    <member name="T:System.Xml.XmlAttributeCollection">
      <summary>
        <para>
       Represents a collection of attributes that can be accessed by name or
       index.
    </para>
      </summary>
    </member>
    <member name="T:System.Xml.XmlNamedNodeMap">
      <summary>
        <para>
       Represents a
       collection of nodes that can be accessed by name or index.
    </para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.GetNamedItem(System.String)">
      <summary>
        <para>Retrieves an <see cref="T:System.Xml.XmlNode" />
specified by name.</para>
      </summary>
      <param name="name">The qualified name of the node to retrieve. It is matched against the <see cref="P:System.Xml.XmlNode.Name" /> property of the matching node.</param>
      <returns>
        <para>An <see langword="XmlNode" /> with 
   the specified name or <see langword="null" /> if a matching node is
   not found.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.SetNamedItem(System.Xml.XmlNode)">
      <summary>
        <para>Adds an <see cref="T:System.Xml.XmlNode" /> using its <see cref="P:System.Xml.XmlNode.Name" /> property</para>
      </summary>
      <param name="node">An <see langword="XmlNode" /> to store in the <see langword="XmlNamedNodeMap" /> . If a node with that name is already present in the map, it is replaced by the new one.</param>
      <returns>
        <para>If the <paramref name="node" /> replaces an
   existing node with the same name, the old node is returned;
   otherwise, <see langword="null" />
   is returned.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.RemoveNamedItem(System.String)">
      <summary>
        <para>Removes the node from the
   <see langword="XmlNamedNodeMap" /> .</para>
      </summary>
      <param name="name">The qualified name of the node to remove. The name is matched against the <see cref="P:System.Xml.XmlNode.Name" /> property of the matching node.</param>
      <returns>
        <para>The <see langword="XmlNode" /> removed from this
<see langword="XmlNamedNodeMap" /> or <see langword="null" /> if a 
   matching node was
   not found. </para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.Item(System.Int32)">
      <summary>
        <para>Retrieves the node at the specified index in the
   <see langword="XmlNamedNodeMap" />
   .</para>
      </summary>
      <param name="index">The index position of the node to retrieve from the <see langword="XmlNamedNodeMap" /> . The index is zero-based; therefore, the index of the first node is 0 and the index of the last node is <see cref="P:System.Xml.XmlNamedNodeMap.Count" /> -1.</param>
      <returns>
        <para>The <see cref="T:System.Xml.XmlNode" /> at the specified index. If <paramref name="index" /> is less than 0 or
   greater than or equal to the <see cref="P:System.Xml.XmlNamedNodeMap.Count" />
   property, <see langword="null" /> is returned.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.GetNamedItem(System.String,System.String)">
      <summary>
        <para>Retrieves a node with the matching <see cref="P:System.Xml.XmlNode.LocalName" /> and <see cref="P:System.Xml.XmlNode.NamespaceURI" />
.</para>
      </summary>
      <param name="localName">The local name of the node to retrieve.</param>
      <param name=" namespaceURI">The namespace URI of the node to retrieve.</param>
      <returns>
        <para>An <see cref="T:System.Xml.XmlNode" /> with 
   the matching local name and namespace URI or <see langword="null" /> if a
   matching node was not found.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.RemoveNamedItem(System.String,System.String)">
      <summary>
        <para> Removes a node with the matching <see cref="P:System.Xml.XmlNode.LocalName" />
and <see cref="P:System.Xml.XmlNode.NamespaceURI" /> .</para>
      </summary>
      <param name="localName">The local name of the node to remove.</param>
      <param name=" namespaceURI">The namespace URI of the node to remove.</param>
      <returns>
        <para>The <see cref="T:System.Xml.XmlNode" /> removed or
<see langword="null" /> if a matching node was not found.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.GetEnumerator">
      <summary>
        <para>Provides support for the "foreach" style iteration over 
      the collection of nodes in the <see langword="XmlNamedNodeMap" />
      .</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Collections.IEnumerator" /> .</para>
      </returns>
    </member>
    <member name="P:System.Xml.XmlNamedNodeMap.Count">
      <summary>
        <para>Gets the number of nodes in the
   <see langword="XmlNamedNodeMap" /> .</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.SetNamedItem(System.Xml.XmlNode)">
      <summary>
        <para>Adds a <see cref="T:System.Xml.XmlNode" /> using its <see cref="P:System.Xml.XmlNode.Name" /> property</para>
      </summary>
      <param name="node">An attribute node to store in this collection. The node will later be accessible using the name of the node. If a node with that name is already present in the collection, it is replaced by the new one; otherwise, the node is appended to the end of the collection.</param>
      <returns>
        <para>If the <paramref name="node" /> replaces an 
   existing node with the same name, the old node is returned; otherwise, the added
   node
   is returned.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.Prepend(System.Xml.XmlAttribute)">
      <summary>
        <para>Inserts the specified attribute as the first node in the collection.</para>
      </summary>
      <param name="node">The <see cref="T:System.Xml.XmlAttribute" /> to insert.</param>
      <returns>
        <para>The <see langword="XmlAttribute" />
added to the collection.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.Append(System.Xml.XmlAttribute)">
      <summary>
        <para>Inserts the specified attribute as the last node in the collection.</para>
      </summary>
      <param name="node">The <see cref="T:System.Xml.XmlAttribute" /> to insert.</param>
      <returns>
        <para>The <see langword="XmlAttribute" /> to
   append to the collection.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.InsertBefore(System.Xml.XmlAttribute,System.Xml.XmlAttribute)">
      <summary>
        <para>Inserts the specified attribute immediately before the specified reference attribute.</para>
      </summary>
      <param name="newNode">The <see cref="T:System.Xml.XmlAttribute" /> to insert.</param>
      <param name="refNode">The <see cref="T:System.Xml.XmlAttribute" /> that is the reference attribute. <paramref name="newNode" /> is placed before the <paramref name="refNode" /> .</param>
      <returns>
        <para>The <see langword="XmlAttribute" /> to insert into the
   collection.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.InsertAfter(System.Xml.XmlAttribute,System.Xml.XmlAttribute)">
      <summary>
        <para>Inserts the specified attribute immediately after the specified reference attribute.</para>
      </summary>
      <param name="newNode">The <see cref="T:System.Xml.XmlAttribute" /> to insert.</param>
      <param name="refNode">The <see cref="T:System.Xml.XmlAttribute" /> that is the reference attribute. <paramref name="newNode" /> is placed after the <paramref name="refNode" /> .</param>
      <returns>
        <para>The <see langword="XmlAttribute" /> to
   insert into the collection.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.Remove(System.Xml.XmlAttribute)">
      <summary>
        <para> Removes the specified attribute from the collection.</para>
      </summary>
      <param name="node">The <see cref="T:System.Xml.XmlAttribute" /> to remove.</param>
      <returns>
        <para>The node removed
      or <see langword="null" /> if it is not found in the collection.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.RemoveAt(System.Int32)">
      <summary>
        <para>Removes the attribute corresponding to the specified index from the collection.</para>
      </summary>
      <param name="i">The index of the node to remove. The first node has index 0.</param>
      <returns>
        <para>Returns <see langword="null" /> if
   there is no attribute at the specified index.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.RemoveAll">
      <summary>
        <para>Removes all attributes from the collection.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.CopyTo(System.Xml.XmlAttribute[],System.Int32)">
      <summary>
        <para> Copies all the <see cref="T:System.Xml.XmlAttribute" /> objects from
   this collection into the given array.</para>
      </summary>
      <param name="array">The array that is the destination of the objects copied from this collection.</param>
      <param name=" index">The index in <paramref name="array" /> where copying begins. </param>
    </member>
    <member name="P:System.Xml.XmlAttributeCollection.ItemOf(System.Int32)">
      <summary>
        <para>Gets the attribute with the specified index.</para>
      </summary>
      <param name="i">The index of the attribute.</param>
    </member>
    <member name="P:System.Xml.XmlAttributeCollection.ItemOf(System.String)">
      <summary>
        <para>Gets the attribute with the specified name.</para>
      </summary>
      <param name="name">The qualified name of the attribute.</param>
    </member>
    <member name="P:System.Xml.XmlAttributeCollection.ItemOf(System.String,System.String)">
      <summary>
        <para>Gets the attribute with the specified local name and namespace URI.</para>
      </summary>
      <param name="localName">The local name of the attribute.</param>
      <param name=" namespaceURI">The namespace URI of the attribute.</param>
    </member>
    <member name="T:System.Xml.XmlCDataSection">
      <summary>
 Represents a CDATA section.
</summary>
    </member>
    <member name="T:System.Xml.XmlCharacterData">
      <summary>
   Provides text manipulation methods that are used by
   several classes.
</summary>
    </member>
    <member name="T:System.Xml.XmlLinkedNode">
      <summary>
        <para>Gets the node immediately preceding or following this node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlLinkedNode.PreviousSibling">
      <summary>
        <para>Gets the node immediately preceding this
      node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlLinkedNode.NextSibling">
      <summary>
        <para>Gets the node immediately following this
      node.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlCharacterData.Substring(System.Int32,System.Int32)">
      <summary>
        <para> Retrieves a substring, of the full string, from the specified range.
      </para>
      </summary>
      <param name="offset">The position within the string to start retrieving. An offset of zero indicates the starting point is at the start of the data. </param>
      <param name=" count">The number of characters to retrieve. </param>
      <returns>
   The substring corresponding to the
   specified range.
</returns>
    </member>
    <member name="M:System.Xml.XmlCharacterData.AppendData(System.String)">
      <summary>
        <para> Appends the specified string to the end of the character
      data of the node.
      </para>
      </summary>
      <param name="strData">The string to insert into the existing string. </param>
    </member>
    <member name="M:System.Xml.XmlCharacterData.InsertData(System.Int32,System.String)">
      <summary>
        <para> Insert the specified string at the specified character offset.
      </para>
      </summary>
      <param name="offset">The position within the string to insert the supplied string data. </param>
      <param name="strData">The string data that is to be inserted into the existing string. </param>
    </member>
    <member name="M:System.Xml.XmlCharacterData.DeleteData(System.Int32,System.Int32)">
      <summary>
        <para>Remove a range of characters from the node.</para>
      </summary>
      <param name="offset">The position within the string to start deleting. </param>
      <param name=" count">The number of characters to delete. </param>
    </member>
    <member name="M:System.Xml.XmlCharacterData.ReplaceData(System.Int32,System.Int32,System.String)">
      <summary>
        <para>Replace the specified number of characters starting at the specified offset with the
      specified string.</para>
      </summary>
      <param name="offset">The position within the string to start replacing. </param>
      <param name=" count">The number of characters to replace. </param>
      <param name="strData">The new data that replaces the old string data. </param>
    </member>
    <member name="P:System.Xml.XmlCharacterData.Value">
      <summary>
        <para>Gets or sets the value of the node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlCharacterData.InnerText">
      <summary>
        <para> Gets or sets the concatenated values of the node and all the children
      of the node.
      </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlCharacterData.Data">
      <summary>
        <para> Contains the data of the node.
      </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlCharacterData.Length">
      <summary>
        <para>Gets the length of the data, in characters.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlCDataSection.CloneNode(System.Boolean)">
      <summary>
        <para>Creates a duplicate of this node.</para>
      </summary>
      <param name="deep">
        <see langword="true" /> to recursively clone the subtree under the specified node; <see langword="false" /> to clone only the node itself. Because CDATA nodes do not have children, regardless of the parameter setting, the cloned node will always include the data content .</param>
      <returns>
        <para>The cloned node.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlCDataSection.WriteTo(System.Xml.XmlWriter)">
      <summary>
        <para>Saves the node to the specified <see cref="T:System.Xml.XmlWriter" /> .</para>
      </summary>
      <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="M:System.Xml.XmlCDataSection.WriteContentTo(System.Xml.XmlWriter)">
      <summary>
        <para>Saves the children of the node to the specified <see cref="T:System.Xml.XmlWriter" /> .</para>
      </summary>
      <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="P:System.Xml.XmlCDataSection.Name">
      <summary>
        <para>Gets the qualified name of the node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlCDataSection.LocalName">
      <summary>
        <para> Gets the local name of the node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlCDataSection.NodeType">
      <summary>
        <para>Gets the type of the current node.</para>
      </summary>
    </member>
    <member name="T:System.Xml.XmlNodeList">
      <summary>
        <para>Represents an ordered collection of nodes.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlNodeList.Item(System.Int32)">
      <summary>
        <para>Retrieves a node at the given index.</para>
      </summary>
      <param name="index">Zero-based index into the list of nodes.</param>
      <returns>
        <para>The <see cref="T:System.Xml.XmlNode" /> in the collection. If <paramref name="index" /> is greater
   than or equal to the number of nodes in the list, this returns
<see langword="null" />
.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNodeList.GetEnumerator">
      <summary>
        <para>Provides a simple "foreach" style iteration over the 
      collection of nodes in the <see langword="XmlNodeList" />
      .</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Collections.IEnumerator" /> .</para>
      </returns>
    </member>
    <member name="P:System.Xml.XmlNodeList.Count">
      <summary>
        <para>Gets the number of nodes in the 
   <see langword="XmlNodeList" /> .</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNodeList.ItemOf(System.Int32)">
      <summary>
        <para>Retrieves a node at the given index.</para>
      </summary>
      <param name="i">Zero-based index into the list of nodes.</param>
    </member>
    <member name="T:System.Xml.XmlComment">
      <summary>
        <para> Represents the content of an XML comment.
 </para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlComment.CloneNode(System.Boolean)">
      <summary>
        <para>Creates a duplicate of this node.</para>
      </summary>
      <param name="deep">
        <see langword="true" /> to recursively clone the subtree under the specified node; <see langword="false" /> to clone only the node itself. Because comment nodes do not have children, the cloned node always includes the text content, regardless of the parameter setting.</param>
      <returns>
        <para>The cloned node.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlComment.WriteTo(System.Xml.XmlWriter)">
      <summary>
        <para>Saves the node to the specified <see cref="T:System.Xml.XmlWriter" /> .</para>
      </summary>
      <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="M:System.Xml.XmlComment.WriteContentTo(System.Xml.XmlWriter)">
      <summary>
        <para>Saves all the children of the node to the specified
   <see cref="T:System.Xml.XmlWriter" /> . Because comment 
      nodes do not have children this method has no effect.</para>
      </summary>
      <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="P:System.Xml.XmlComment.Name">
      <summary>
        <para>Gets the qualified name of the node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlComment.LocalName">
      <summary>
        <para> Gets the local name of the node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlComment.NodeType">
      <summary>
        <para>Gets the type of the current node.</para>
      </summary>
    </member>
    <member name="T:System.Xml.XmlConvert">
      <summary>
        <para>Encodes and decodes XML names and provides methods for
      converting between common language runtime types and XML Schema definition
      language (XSD) types. When converting data types the values returned are locale independent.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlConvert.EncodeName(System.String)">
      <summary>
        <para> Converts the
      name to a valid XML name.</para>
      </summary>
      <param name="name">A name to be translated.</param>
      <returns>
        <para>Returns the name with any invalid characters replaced by
      an escape string.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.EncodeNmToken(System.String)">
      <summary>
        <para> Verifies the
      name is valid according to the XML specification.</para>
      </summary>
      <param name="name">The name to be encoded.</param>
      <returns>
        <para>The encoded name.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.EncodeLocalName(System.String)">
      <summary>
        <para> Converts the name to a valid XML local name.</para>
      </summary>
      <param name="name">The name to be encoded.</param>
      <returns>
        <para>The encoded name.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.DecodeName(System.String)">
      <summary>
        <para> Decodes a name. This method does the reverse of
      the <see cref="M:System.Xml.XmlConvert.EncodeName(System.String)" /> and <see cref="M:System.Xml.XmlConvert.EncodeLocalName(System.String)" /> methods.</para>
      </summary>
      <param name="name">The name to be transformed.</param>
      <returns>
        <para>The decoded name.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyName(System.String)">
      <summary>
        <para> Verifies that the name is a valid name according
      to the W3C Extended Markup Language recommendation.</para>
      </summary>
      <param name="name">The name to verify.</param>
      <returns>
        <para>The name, if it is a valid XML name.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyNCName(System.String)">
      <summary>
        <para>Verifies that the name is a valid NCName according to
      the W3C Extended Markup Language recommendation.</para>
      </summary>
      <param name="name">The name to verify.</param>
      <returns>
        <para>The name, if it is a valid NCName.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Boolean)">
      <summary>
        <para>Converts the <see cref="T:System.Boolean" /> to a <see cref="T:System.String" />.</para>
      </summary>
      <param name="value">The value to convert.</param>
      <returns>
        <para>A string representation of the <see langword="Boolean" />,
   that is, "true" or "false".</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Char)">
      <summary>
        <para>Converts the <see cref="T:System.Char" /> to a <see cref="T:System.String" /> .</para>
      </summary>
      <param name="value">The value to convert.</param>
      <returns>
        <para>A string representation of the <see langword="Char" /> 
.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Decimal)">
      <summary>
        <para>Converts the <see cref="T:System.Decimal" /> to a <see cref="T:System.String" /> .</para>
      </summary>
      <param name="value">The value to convert.</param>
      <returns>
        <para>A string representation of the 
   <see langword="Decimal" /> 
   .</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.SByte)">
      <summary>
        <para>Converts the <see cref="T:System.SByte" /> to a <see cref="T:System.String" /> .</para>
      </summary>
      <param name="value">The value to convert.</param>
      <returns>
        <para>A string representation of the
   <see langword="SByte" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Int16)">
      <summary>
        <para>Converts the <see cref="T:System.Int16" /> to a <see cref="T:System.String" /> .</para>
      </summary>
      <param name="value">The value to convert.</param>
      <returns>
        <para>A string representation of the
   <see langword="Int16" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Int32)">
      <summary>
        <para>Converts the <see cref="T:System.Int32" /> to a <see cref="T:System.String" /> .</para>
      </summary>
      <param name="value">The value to convert.</param>
      <returns>
        <para>A string representation of the
      <see langword="Int32" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Int64)">
      <summary>
        <para>Converts the <see cref="T:System.Int64" /> to a <see cref="T:System.String" /> .</para>
      </summary>
      <param name="value">The value to convert.</param>
      <returns>
        <para>A string representation of the
   <see langword="Int64" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Byte)">
      <summary>
        <para>Converts the <see cref="T:System.Byte" /> to a <see cref="T:System.String" /> .</para>
      </summary>
      <param name="value">The value to convert.</param>
      <returns>
        <para>A string representation of the
   <see langword="Byte" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.UInt16)">
      <summary>
        <para>Converts the <see cref="T:System.UInt16" /> to a <see cref="T:System.String" /> .</para>
      </summary>
      <param name="value">The value to convert.</param>
      <returns>
        <para>A string representation of the
   <see langword="UInt16" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.UInt32)">
      <summary>
        <para>Converts the <see cref="T:System.UInt32" /> to a <see cref="T:System.String" /> .</para>
      </summary>
      <param name="value">The value to convert.</param>
      <returns>
        <para>A string representation of the
   <see langword="UInt32" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.UInt64)">
      <summary>
        <para>Converts the <see cref="T:System.UInt64" /> to a <see cref="T:System.String" /> .</para>
      </summary>
      <param name="value">The value to convert.</param>
      <returns>
   A string representation of the
<see langword="UInt64" />.
</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Single)">
      <summary>
        <para>Converts the <see cref="T:System.Single" /> to a <see cref="T:System.String" /> .</para>
      </summary>
      <param name="value">The value to convert.</param>
      <returns>
        <para>A string representation of the
   <see langword="Single" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Double)">
      <summary>
        <para>Converts the <see cref="T:System.Double" /> to a <see cref="T:System.String" /> .</para>
      </summary>
      <param name="value">The value to convert.</param>
      <returns>
        <para>A string representation of the
   <see langword="Double" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.TimeSpan)">
      <summary>
        <para>Converts the <see cref="T:System.TimeSpan" /> to a <see cref="T:System.String" /> .</para>
      </summary>
      <param name="value">The value to convert.</param>
      <returns>
        <para>A string representation of the
   <see langword="TimeSpan" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.DateTime)">
      <summary>
        <para>Converts the <see cref="T:System.DateTime" /> to a <see cref="T:System.String" /> .</para>
      </summary>
      <param name="value">The value to convert.</param>
      <returns>
        <para>A string representation of the
   <see langword="DateTime" /> in the format yyyy-MM-ddTHH:mm:ss where 'T' is a constant literal.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.DateTime,System.String)">
      <summary>
        <para>Converts the <see cref="T:System.DateTime" /> to a <see cref="T:System.String" /> .</para>
      </summary>
      <param name="value">The value to convert.</param>
      <param name=" format">The format structure that defines how to display the converted string. Valid formats include "yyyy-MM-ddTHH:mm:sszzzzzz" and its subsets. </param>
      <returns>
   A string representation of the
<see langword="DateTime" /> in the specified format.
</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Guid)">
      <summary>
        <para>Converts the <see cref="T:System.Guid" /> to a <see cref="T:System.String" /> .</para>
      </summary>
      <param name="value">The value to convert.</param>
      <returns>
        <para>A string representation of the
      <see langword="Guid" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToBoolean(System.String)">
      <summary>
        <para>Converts the <see cref="T:System.String" /> to a <see cref="T:System.Boolean" /> equivalent.</para>
      </summary>
      <param name="s">The string to convert.</param>
      <returns>
        <para>A <see langword="Boolean" /> value, 
   that is,
<see langword="true" /> or <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToChar(System.String)">
      <summary>
        <para>Converts the <see cref="T:System.String" /> to a <see cref="T:System.Char" /> equivalent.</para>
      </summary>
      <param name="s">The string to convert.</param>
      <returns>
        <para>A <see langword="Char" /> representing
   the first character in the string.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDecimal(System.String)">
      <summary>
        <para>Converts the <see cref="T:System.String" /> to a <see cref="T:System.Decimal" /> equivalent.</para>
      </summary>
      <param name="s">The string to convert.</param>
      <returns>
        <para>A <see langword="Decimal" /> 
equivalent of the string.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToSByte(System.String)">
      <summary>
        <para>Converts the <see cref="T:System.String" /> to a <see cref="T:System.SByte" /> equivalent.</para>
      </summary>
      <param name="s">The string to convert.</param>
      <returns>
        <para>An <see langword="SByte" />
equivalent of the string.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToInt16(System.String)">
      <summary>
        <para>Converts the <see cref="T:System.String" /> to a <see cref="T:System.Int16" /> equivalent.</para>
      </summary>
      <param name="s">The string to convert.</param>
      <returns>
        <para>An <see langword="Int16" />
equivalent of the string.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToInt32(System.String)">
      <summary>
        <para>Converts the <see cref="T:System.String" /> to a <see cref="T:System.Int32" /> equivalent.</para>
      </summary>
      <param name="s">The string to convert.</param>
      <returns>
        <para>An <see langword="Int32" />
equivalent of the string.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToInt64(System.String)">
      <summary>
        <para>Converts the <see cref="T:System.String" /> to a <see cref="T:System.Int64" /> equivalent.</para>
      </summary>
      <param name="s">The string to convert.</param>
      <returns>
        <para>An <see langword="Int64" />
equivalent of the string.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToByte(System.String)">
      <summary>
        <para>Converts the <see cref="T:System.String" /> to a <see cref="T:System.Byte" /> equivalent.</para>
      </summary>
      <param name="s">The string to convert.</param>
      <returns>
        <para>A <see langword="Byte" /> 
equivalent of the string.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToUInt16(System.String)">
      <summary>
        <para>Converts the <see cref="T:System.String" /> to a <see cref="T:System.UInt16" /> equivalent.</para>
      </summary>
      <param name="s">The string to convert.</param>
      <returns>
        <para>A <see langword="UInt16" /> 
equivalent of the string.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToUInt32(System.String)">
      <summary>
        <para>Converts the <see cref="T:System.String" /> to a <see cref="T:System.UInt32" /> equivalent.</para>
      </summary>
      <param name="s">The string to convert.</param>
      <returns>
        <para>A <see langword="UInt32" /> 
equivalent of the string.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToUInt64(System.String)">
      <summary>
        <para>Converts the <see cref="T:System.String" /> to a <see cref="T:System.UInt64" /> equivalent.</para>
      </summary>
      <param name="s">The string to convert.</param>
      <returns>
        <para>A <see langword="UInt64" /> 
equivalent of the string.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToSingle(System.String)">
      <summary>
        <para>Converts the <see cref="T:System.String" /> to a <see cref="T:System.Single" /> equivalent.</para>
      </summary>
      <param name="s">The string to convert.</param>
      <returns>
        <para>A <see langword="Single" />
equivalent of the string.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDouble(System.String)">
      <summary>
        <para>Converts the <see cref="T:System.String" /> to a <see cref="T:System.Double" /> equivalent.</para>
      </summary>
      <param name="s">The string to convert.</param>
      <returns>
        <para>A <see langword="Double" />
equivalent of the string.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToTimeSpan(System.String)">
      <summary>
        <para>Converts the <see cref="T:System.String" /> to a <see cref="T:System.TimeSpan" /> equivalent.</para>
      </summary>
      <param name="s">The string to convert.</param>
      <returns>
        <para>A <see langword="TimeSpan" /> 
equivalent of the string.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTime(System.String)">
      <summary>
        <para>Converts the <see cref="T:System.String" /> to a <see cref="T:System.DateTime" /> equivalent.</para>
      </summary>
      <param name="s">The string to convert.</param>
      <returns>
        <para>A <see langword="DateTime" />
equivalent of the string.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTime(System.String,System.String)">
      <summary>
        <para>Converts the <see cref="T:System.String" /> to a <see cref="T:System.DateTime" /> equivalent.</para>
      </summary>
      <param name="s">The string to convert.</param>
      <param name=" format">The format structure to apply to the converted <see langword="DateTime" />. Valid formats include "yyyy-MM-ddTHH:mm:sszzzzzz" and its subsets. The string is validated against this format.</param>
      <returns>
   A <see langword="DateTime" /> equivalent
   of the string.
</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTime(System.String,System.String[])">
      <summary>
        <para>Converts the <see cref="T:System.String" /> to a <see cref="T:System.DateTime" /> equivalent.</para>
      </summary>
      <param name="s">The string to convert.</param>
      <param name=" formats">An array containing the format structures to apply to the converted <see langword="DateTime" /> . Valid formats include "yyyy-MM-ddTHH:mm:sszzzzzz" and its subsets.</param>
      <returns>
        <para>A <see langword="DateTime" /> equivalent
   of the string.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToGuid(System.String)">
      <summary>
        <para>Converts the <see cref="T:System.String" /> to a <see cref="T:System.Guid" /> equivalent.</para>
      </summary>
      <param name="s">The string to convert.</param>
      <returns>
        <para>A <see langword="Guid" /> 
equivalent of the string.</para>
      </returns>
    </member>
    <member name="T:System.Xml.XmlDeclaration">
      <summary>
        <para>Represents the XML declaration node: &lt;?xml version='1.0' ...?&gt;. </para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlDeclaration.CloneNode(System.Boolean)">
      <summary>
        <para>Creates a duplicate of this node.</para>
      </summary>
      <param name="deep">
        <see langword="true" /> to recursively clone the subtree under the specified node; <see langword="false" /> to clone only the node itself. Because <see langword="XmlDeclaration" /> nodes do not have children, the cloned node always includes the data value, regardless of the parameter setting.</param>
      <returns>
        <para>The cloned node.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlDeclaration.WriteTo(System.Xml.XmlWriter)">
      <summary>
        <para>Saves the node to the specified <see cref="T:System.Xml.XmlWriter" /> .</para>
      </summary>
      <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="M:System.Xml.XmlDeclaration.WriteContentTo(System.Xml.XmlWriter)">
      <summary>
        <para> Saves the children of the node to the specified 
   <see cref="T:System.Xml.XmlWriter" /> .</para>
        <para>Because <see langword="XmlDeclaration" /> nodes 
   do not have children, this method has no effect.</para>
      </summary>
      <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="P:System.Xml.XmlDeclaration.Version">
      <summary>
        <para> Gets the
      XML version of the document.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlDeclaration.Encoding">
      <summary>
        <para>Gets or sets the encoding level of the XML
      document.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlDeclaration.Standalone">
      <summary>
        <para>Gets or sets the value of the standalone attribute.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlDeclaration.Value">
      <summary>
        <para>Gets or sets the value of the
 <see langword="XmlDeclaration" />.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlDeclaration.InnerText">
      <summary>
        <para> Gets or sets the concatenated values of the
 <see langword="XmlDeclaration" />
 .</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlDeclaration.Name">
      <summary>
        <para>Gets the qualified name of the node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlDeclaration.LocalName">
      <summary>
        <para> Gets the local name of the node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlDeclaration.NodeType">
      <summary>
        <para>Gets the type of the current node.</para>
      </summary>
    </member>
    <member name="T:System.Xml.XmlDocument">
      <summary>
        <para> Represents an XML
 document.
 </para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlDocument.#ctor">
      <summary>
        <para>Initializes a new instance of the
   <see langword="XmlDocument" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlDocument.#ctor(System.Xml.XmlNameTable)">
      <summary>
        <para>Initializes a new instance of the 
   <see langword="XmlDocument" /> class with the specified <see cref="T:System.Xml.XmlNameTable" /> 
   .</para>
      </summary>
      <param name="nt">The <see langword="XmlNameTable" /> to use.</param>
    </member>
    <member name="M:System.Xml.XmlDocument.#ctor(System.Xml.XmlImplementation)">
      <summary>
        <para>Initializes a new instance of the <see langword="XmlDocument" /> class with the 
   specified <see cref="T:System.Xml.XmlImplementation" /> .</para>
      </summary>
      <param name="imp">The <see langword="XmlImplementation" /> to use.</param>
    </member>
    <member name="M:System.Xml.XmlDocument.CloneNode(System.Boolean)">
      <summary>
        <para>Creates a duplicate of this node.</para>
      </summary>
      <param name="deep">
        <see langword="true" />to recursively clone the subtree under the specified node; <see langword="false" /> to clone only the node itself.</param>
      <returns>
        <para>The cloned <see langword="XmlDocument" /> node.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateAttribute(System.String)">
      <summary>
        <para>Creates an <see cref="T:System.Xml.XmlAttribute" /> with the specified <see cref="P:System.Xml.XmlDocument.Name" /> .</para>
      </summary>
      <param name="name">The qualified name of the attribute. If the name contains a colon, the <see cref="P:System.Xml.XmlNode.Prefix" /> property reflects the part of the name preceding the first colon and the <see cref="P:System.Xml.XmlDocument.LocalName" /> property reflects the part of the name following the first colon. The <see cref="P:System.Xml.XmlNode.NamespaceURI" /> remains empty unless the prefix is a recognized built-in prefix such as xmlns. In this case <see langword="NamespaceURI" /> has a value of http://www.w3.org/2000/xmlns/ . </param>
      <returns>
        <para>The new <see langword="XmlAttribute" /> .</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateCDataSection(System.String)">
      <summary>
        <para>Creates an <see cref="T:System.Xml.XmlCDataSection" /> containing the specified data.</para>
      </summary>
      <param name="data">The content of the new <see langword="XmlCDataSection" /> .</param>
      <returns>
        <para>The new <see langword="XmlCDataSection" /> .</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateComment(System.String)">
      <summary>
        <para>Creates an <see cref="T:System.Xml.XmlComment" /> containing the specified data.</para>
      </summary>
      <param name="data">The content of the new <see langword="XmlComment" /> .</param>
      <returns>
        <para>The new <see langword="XmlComment" /> .</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateDocumentType(System.String,System.String,System.String,System.String)">
      <summary>
        <para>Returns a new <see cref="T:System.Xml.XmlDocumentType" /> object.</para>
      </summary>
      <param name="name">Name of the document type.</param>
      <param name="publicId">The public identifier of the document type or <see langword="null" /> .</param>
      <param name="systemId">The system identifier of the document type or <see langword="null" /> .</param>
      <param name="internalSubset">The DTD internal subset of the document type or <see langword="null" /> .</param>
      <returns>
        <para>The new <see langword="XmlDocumentType" /> .</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateDocumentFragment">
      <summary>
        <para>Creates an <see cref="T:System.Xml.XmlDocumentFragment" /> .</para>
      </summary>
      <returns>
        <para>The new <see langword="XmlDocumentFragment" /> .</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateElement(System.String)">
      <summary>
        <para>Creates an element with the specified name.</para>
      </summary>
      <param name="name">The qualified name of the element. If the name contains a colon then the <see cref="P:System.Xml.XmlNode.Prefix" /> property reflects the part of the name preceding the colon and the <see cref="P:System.Xml.XmlDocument.LocalName" /> property reflects the part of the name after the colon. The qualified name cannot include a prefix of'xmlns'.</param>
      <returns>
        <para>The new <see langword="XmlElement" /> .</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateEntityReference(System.String)">
      <summary>
        <para>Creates an <see cref="T:System.Xml.XmlEntityReference" /> with the specified name.</para>
      </summary>
      <param name="name">The name of the entity reference.</param>
      <returns>
        <para>The new <see langword="XmlEntityReference" /> .</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateProcessingInstruction(System.String,System.String)">
      <summary>
        <para>Creates an <see cref="T:System.Xml.XmlProcessingInstruction" /> with the specified
   name and data.</para>
      </summary>
      <param name="target">The name of the processing instruction.</param>
      <param name="data">The data for the processing instruction.</param>
      <returns>
        <para>The new <see langword="XmlProcessingInstruction" /> .</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateXmlDeclaration(System.String,System.String,System.String)">
      <summary>
        <para>Creates an <see cref="T:System.Xml.XmlDeclaration" /> node with the specified values. </para>
      </summary>
      <param name="version">The version must be "1.0".</param>
      <param name=" encoding">
        <para>The value of the encoding attribute. This is the encoding that is used when you save the <see cref="T:System.Xml.XmlDocument" /> to a file or a stream; therefore, it must be set to a string supported by the <see cref="T:System.Text.Encoding" /> class, otherwise <see cref="M:System.Xml.XmlDocument.Save(System.String)" /> fails. If this is <see langword="null" /> or String.Empty, the <see langword="Save" /> method does not write an encoding attribute on the XML declaration and therefore the default encoding, UTF-8, is used. </para>
        <para>
          <see langword="Note:" /> If the <see langword="XmlDocument" /> is saved to either a <see cref="T:System.IO.TextWriter" /> or an <see cref="T:System.Xml.XmlTextWriter" />, this encoding value is discarded. Instead, the encoding of the <see langword="TextWriter" /> or the <see langword="XmlTextWriter" /> is used. This ensures that the XML written out can be read back using the correct encoding.</para>
      </param>
      <param name=" standalone">The value must be either "yes" or "no". If this is <see langword="null" /> or String.Empty, the <see langword="Save" /> method does not write a standalone attribute on the XML declaration.</param>
      <returns>
        <para>The new <see langword="XmlDeclaration" /> node.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateTextNode(System.String)">
      <summary>
        <para>Creates an <see cref="T:System.Xml.XmlText" /> with the specified text.</para>
      </summary>
      <param name="text">The text for the Text node.</param>
      <returns>
        <para>The new <see langword="XmlText" /> node.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateSignificantWhitespace(System.String)">
      <summary>
        <para>Creates an <see cref="T:System.Xml.XmlSignificantWhitespace" /> node.</para>
      </summary>
      <param name="text">The string must contain only the following characters &amp;#20; &amp;#10; &amp;#13; and &amp;#9;</param>
      <returns>
        <para>A new <see langword="XmlSignificantWhitespace" /> node.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateNavigator(System.Xml.XmlNode)">
      <summary>
        <para> Creates an <see cref="T:System.Xml.XPath.XPathNavigator" /> object
   for navigating this document.</para>
      </summary>
      <param name="node">The <see cref="T:System.Xml.XmlNode" /> you want the navigator initially positioned on.</param>
      <returns>
        <para>An <see cref="T:System.Xml.XPath.XPathNavigator" /> object.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateWhitespace(System.String)">
      <summary>
        <para>Creates an <see cref="T:System.Xml.XmlWhitespace" /> node.</para>
      </summary>
      <param name="text">The string must contain only the following characters &amp;#20; &amp;#10; &amp;#13; and &amp;#9;</param>
      <returns>
        <para>A new <see langword="XmlWhitespace" /> node.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.GetElementsByTagName(System.String)">
      <summary>
        <para>Returns an <see cref="T:System.Xml.XmlNodeList" /> containing a list of all descendant
   elements that match the specified <see cref="P:System.Xml.XmlDocument.Name" />
   .</para>
      </summary>
      <param name="name"> The qualified name to match. It is matched against the <see langword="Name" /> property of the matching node. The special value "*" matches all tags.</param>
      <returns>
        <para>An <see cref="T:System.Xml.XmlNodeList" /> containing a list of all matching nodes.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateAttribute(System.String,System.String)">
      <summary>
        <para>Creates an <see cref="T:System.Xml.XmlAttribute" /> with the specified qualified
   name and <see cref="P:System.Xml.XmlNode.NamespaceURI" />
   .</para>
      </summary>
      <param name="qualifiedName">The qualified name of the attribute. If the name contains a colon then the <see cref="P:System.Xml.XmlNode.Prefix" /> property will reflect the part of the name preceding the colon and the <see cref="P:System.Xml.XmlDocument.LocalName" /> property will reflect the part of the name after the colon.</param>
      <param name="namespaceURI">The namespaceURI of the attribute. If the qualified name includes a prefix of xmlns, then this parameter must be http://www.w3.org/2000/xmlns/ .</param>
      <returns>
        <para>The new <see langword="XmlAttribute" /> .</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateElement(System.String,System.String)">
      <summary>
        <para>Creates an <see cref="T:System.Xml.XmlElement" /> with the qualified name and <see cref="P:System.Xml.XmlNode.NamespaceURI" />
.</para>
      </summary>
      <param name="qualifiedName">The qualified name of the element. If the name contains a colon then the <see cref="P:System.Xml.XmlNode.Prefix" /> property will reflect the part of the name preceding the colon and the <see cref="P:System.Xml.XmlDocument.LocalName" /> property will reflect the part of the name after the colon. The qualified name cannot include a prefix of'xmlns'.</param>
      <param name="namespaceURI">The namespace URI of the element.</param>
      <returns>
        <para>The new <see langword="XmlElement" /> .</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.GetElementsByTagName(System.String,System.String)">
      <summary>
        <para>Returns an <see cref="T:System.Xml.XmlNodeList" /> containing a list of all descendant
   elements that match the specified <see cref="P:System.Xml.XmlDocument.LocalName" /> and <see cref="P:System.Xml.XmlNode.NamespaceURI" />
   .</para>
      </summary>
      <param name="localName">The LocalName to match. The special value "*" matches all tags.</param>
      <param name="namespaceURI">NamespaceURI to match.</param>
      <returns>
        <para>An <see cref="T:System.Xml.XmlNodeList" /> containing a list of all matching nodes.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.GetElementById(System.String)">
      <summary>
        <para>Gets the <see cref="T:System.Xml.XmlElement" /> with the
   specified ID.</para>
      </summary>
      <param name="elementId">The attribute ID to match.</param>
      <returns>
        <para>The <see langword="XmlElement" /> with
   the matching ID or <see langword="null" /> if no matching element is found.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.ImportNode(System.Xml.XmlNode,System.Boolean)">
      <summary>
        <para>Imports a node from another document to the current document.</para>
      </summary>
      <param name="node">The node being imported.</param>
      <param name="deep">
        <see langword="true" />to perform a deep clone; otherwise, <see langword="false" /> .</param>
      <returns>
        <para>The imported <see cref="T:System.Xml.XmlNode" /> .</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateAttribute(System.String,System.String,System.String)">
      <summary>
        <para>Creates an <see cref="T:System.Xml.XmlAttribute" /> with the specified <see cref="P:System.Xml.XmlNode.Prefix" />,
<see cref="P:System.Xml.XmlDocument.LocalName" />, and <see cref="P:System.Xml.XmlNode.NamespaceURI" />
.</para>
      </summary>
      <param name="prefix">The prefix of the attribute (if any). String.Empty and <see langword="null" /> are equivalent.</param>
      <param name="localName">The local name of the attribute.</param>
      <param name="namespaceURI">The namespace URI of the attribute (if any). String.Empty and <see langword="null" /> are equivalent. If <paramref name="prefix" /> is xmlns, then this parameter must be http://www.w3.org/2000/xmlns/; otherwise an exception is thrown.</param>
      <returns>
        <para>The new <see langword="XmlAttribute" /> .</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateDefaultAttribute(System.String,System.String,System.String)">
      <summary>
        <para>Creates a default attribute with the specified prefix,
      local name and namespace URI.</para>
      </summary>
      <param name="prefix">The prefix of the attribute (if any).</param>
      <param name=" localName">The local name of the attribute.</param>
      <param name=" namespaceURI">The namespace URI of the attribute (if any).</param>
      <returns>
        <para>The new <see cref="T:System.Xml.XmlAttribute" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateElement(System.String,System.String,System.String)">
      <summary>
        <para>Creates an element with the specified <see cref="P:System.Xml.XmlNode.Prefix" />,
<see cref="P:System.Xml.XmlDocument.LocalName" />, and <see cref="P:System.Xml.XmlNode.NamespaceURI" />
.</para>
      </summary>
      <param name="prefix">The prefix of the new element (if any). String.Empty and <see langword="null" /> are equivalent.</param>
      <param name=" localName">The local ame of the new element.</param>
      <param name=" namespaceURI">The namespace URI of the new element (if any). String.Empty and <see langword="null" /> are equivalent.</param>
      <returns>
        <para> The new <see cref="T:System.Xml.XmlElement" /> .</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String,System.String)">
      <summary>
        <para>Creates a <see cref="T:System.Xml.XmlNode" /> with the specified <see cref="T:System.Xml.XmlNodeType" />,
<see cref="P:System.Xml.XmlNode.Prefix" />, <see cref="P:System.Xml.XmlDocument.Name" />, and <see cref="P:System.Xml.XmlNode.NamespaceURI" /> .</para>
      </summary>
      <param name="type">The <see langword="XmlNodeType" /> of the new node.</param>
      <param name=" prefix">The prefix of the new node.</param>
      <param name=" name">The local name of the new node.</param>
      <param name=" namespaceURI">The namespace URI of the new node.</param>
      <returns>
        <para>The new <see langword="XmlNode" /> .</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateNode(System.String,System.String,System.String)">
      <summary>
        <para>Creates an <see cref="T:System.Xml.XmlNode" /> with the specified node type, <see cref="P:System.Xml.XmlDocument.Name" />,
   and <see cref="P:System.Xml.XmlNode.NamespaceURI" />
   .</para>
      </summary>
      <param name="nodeTypeString">String version of the <see cref="T:System.Xml.XmlNodeType" /> of the new node. This parameter must be one of the values listed in the table below.</param>
      <param name=" name">The qualified name of the new node. If the name contains a colon, it is parsed into <see cref="P:System.Xml.XmlNode.Prefix" /> and <see cref="P:System.Xml.XmlDocument.LocalName" /> components.</param>
      <param name=" namespaceURI">The namespace URI of the new node.</param>
      <returns>
        <para>The new <see langword="XmlNode" /> .</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String)">
      <summary>
        <para>Creates an <see cref="T:System.Xml.XmlNode" /> with the specified <see cref="T:System.Xml.XmlNodeType" />,
<see cref="P:System.Xml.XmlDocument.Name" />, and <see cref="P:System.Xml.XmlNode.NamespaceURI" />
.</para>
      </summary>
      <param name="type">The <see langword="XmlNodeType" /> of the new node.</param>
      <param name=" name">The qualified name of the new node. If the name contains a colon then it is parsed into <see cref="P:System.Xml.XmlNode.Prefix" /> and <see cref="P:System.Xml.XmlDocument.LocalName" /> components.</param>
      <param name=" namespaceURI">The namespace URI of the new node.</param>
      <returns>
        <para>The new <see langword="XmlNode" /> .</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.ReadNode(System.Xml.XmlReader)">
      <summary>
        <para>Creates an <see cref="T:System.Xml.XmlNode" /> object based on the information in
   the <see cref="T:System.Xml.XmlReader" /> .
   The reader must be positioned on a node or attribute.</para>
      </summary>
      <param name="reader">The Xml source</param>
      <returns>
        <para>The new <see langword="XmlNode" /> or <see langword="null" /> if no more nodes exist.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlDocument.Load(System.String)">
      <summary>
        <para>Loads the XML document from the specified URL.</para>
      </summary>
      <param name="filename">URL for the file containing the XML document to load.</param>
    </member>
    <member name="M:System.Xml.XmlDocument.Load(System.IO.Stream)">
      <summary>
        <para>Loads the XML document from the specified stream.</para>
      </summary>
      <param name="inStream">The stream containing the XML document to load.</param>
    </member>
    <member name="M:System.Xml.XmlDocument.Load(System.IO.TextReader)">
      <summary>
        <para>Loads the XML document from the specified <see cref="T:System.IO.TextReader" /> .</para>
      </summary>
      <param name="txtReader">The <see langword="TextReader" /> used to feed the XML data into the document.</param>
    </member>
    <member name="M:System.Xml.XmlDocument.Load(System.Xml.XmlReader)">
      <summary>
        <para>Loads the XML document from the specified <see cref="T:System.Xml.XmlReader" /> .</para>
      </summary>
      <param name="reader">The <see langword="XmlReader" /> used to feed the XML data into the document.</param>
    </member>
    <member name="M:System.Xml.XmlDocument.LoadXml(System.String)">
      <summary>
        <para>Loads the XML document from the specified string.</para>
      </summary>
      <param name="xml">String containing the XML document to load.</param>
    </member>
    <member name="M:System.Xml.XmlDocument.Save(System.String)">
      <summary>
        <para>Saves the XML document to the specified file.</para>
      </summary>
      <param name="filename">The location of the file where you want to save the document.</param>
    </member>
    <member name="M:System.Xml.XmlDocument.Save(System.IO.Stream)">
      <summary>
        <para>Saves the XML document to the specified stream.</para>
      </summary>
      <param name="outStream">The stream to which you want to save.</param>
    </member>
    <member name="M:System.Xml.XmlDocument.Save(System.IO.TextWriter)">
      <summary>
        <para>Saves the XML document to the specified <see cref="T:System.IO.TextWriter" /> .</para>
      </summary>
      <param name="writer">The <see langword="TextWriter" /> to which you want to save.</param>
    </member>
    <member name="M:System.Xml.XmlDocument.Save(System.Xml.XmlWriter)">
      <summary>
        <para>Saves the XML document to the specified <see cref="T:System.Xml.XmlWriter" /> .</para>
      </summary>
      <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="M:System.Xml.XmlDocument.WriteTo(System.Xml.XmlWriter)">
      <summary>
        <para>Saves the <see langword="XmlDocument" /> node to the specified <see cref="T:System.Xml.XmlWriter" /> .</para>
      </summary>
      <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="M:System.Xml.XmlDocument.WriteContentTo(System.Xml.XmlWriter)">
      <summary>
        <para>Saves all the children of the
   <see langword="XmlDocument" /> node to the specified <see cref="T:System.Xml.XmlWriter" /> .</para>
      </summary>
      <param name="xw">The <see langword="XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="P:System.Xml.XmlDocument.NodeType">
      <summary>
        <para> Gets the type of the current node.
      </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlDocument.DocumentType">
      <summary>
        <para>Gets the node containing the DOCTYPE declaration.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlDocument.Implementation">
      <summary>
        <para> Gets the <see cref="T:System.Xml.XmlImplementation" /> object for the current document.
   </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlDocument.Name">
      <summary>
        <para> Gets the qualified name of the node.
 </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlDocument.LocalName">
      <summary>
        <para> Gets the local name of the node.
 </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlDocument.DocumentElement">
      <summary>
        <para>Gets the root <see cref="T:System.Xml.XmlElement" /> for the document.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlDocument.OwnerDocument">
      <summary>
        <para>Gets the <see cref="T:System.Xml.XmlDocument" /> to which the current node belongs.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlDocument.XmlResolver">
      <summary>
        <para>Sets the <see cref="T:System.Xml.XmlResolver" /> to use for resolving external
   resources.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlDocument.NameTable">
      <summary>
        <para>Gets the <see cref="T:System.Xml.XmlNameTable" /> associated with this
   implementation.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlDocument.PreserveWhitespace">
      <summary>
        <para>Gets or sets a value indicating whether to preserve white space.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlDocument.IsReadOnly">
      <summary>
        <para> Gets a value indicating whether the current node is read-only.
      </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlDocument.InnerXml">
      <summary>
        <para>Gets or sets the markup representing the children
      of the current node.</para>
      </summary>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeInserting">
      <summary>
        <para>Occurs when a node belonging to this document is
      about to be inserted into another node.</para>
      </summary>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeInserted">
      <summary>
        <para>Occurs when a node belonging to this
      document has been inserted into another node.</para>
      </summary>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeRemoving">
      <summary>
        <para> Occurs when a node belonging to this document
      is about to be removed from the document.</para>
      </summary>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeRemoved">
      <summary>
        <para>Occurs when a node belonging to this
      document has been removed from its parent.</para>
      </summary>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeChanging">
      <summary>
        <para> Occurs when the <see cref="P:System.Xml.XmlNode.Value" /> of a node
   belonging to this document is about to be changed.</para>
      </summary>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeChanged">
      <summary>
        <para>Occurs when the <see cref="P:System.Xml.XmlNode.Value" /> of a node
   belonging to this document has been changed.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlDocument.BaseURI">
      <summary>
        <para>Gets the base URI of the current node.</para>
      </summary>
    </member>
    <member name="T:System.Xml.XmlDocumentFragment">
      <summary>
        <para>
       Represents a lightweight object that is useful for tree insert
       operations.
    </para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlDocumentFragment.CloneNode(System.Boolean)">
      <summary>
        <para>Creates a duplicate of this node.</para>
      </summary>
      <param name="deep">
        <see langword="true" /> to recursively clone the subtree under the specified node; <see langword="false" /> to clone only the node itself.</param>
      <returns>
        <para>The cloned node.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlDocumentFragment.WriteTo(System.Xml.XmlWriter)">
      <summary>
        <para>Saves the node to the specified <see cref="T:System.Xml.XmlWriter" /> .</para>
      </summary>
      <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="M:System.Xml.XmlDocumentFragment.WriteContentTo(System.Xml.XmlWriter)">
      <summary>
        <para>Saves all the children of the node to the specified
      <see cref="T:System.Xml.XmlWriter" /> .</para>
      </summary>
      <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.Name">
      <summary>
        <para>Gets the qualified name of the node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.LocalName">
      <summary>
        <para> Gets the local name of the node.
 </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.NodeType">
      <summary>
        <para>Gets the type of the current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.ParentNode">
      <summary>
        <para>Gets the parent of this node (for nodes that can have
      parents).</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.OwnerDocument">
      <summary>
        <para>Gets the <see cref="T:System.Xml.XmlDocument" /> to which this node belongs.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.InnerXml">
      <summary>
        <para> Gets or sets the markup representing
      the children of this node.</para>
      </summary>
    </member>
    <member name="T:System.Xml.XmlDocumentType">
      <summary>
        <para> Represents the document type declaration.
      </para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlDocumentType.CloneNode(System.Boolean)">
      <summary>
        <para>Creates a duplicate of this node.</para>
      </summary>
      <param name="deep">
        <see langword="true" /> to recursively clone the subtree under the specified node; <see langword="false" /> to clone only the node itself. For document type nodes, the cloned node always includes the subtree, regardless of the parameter setting.</param>
      <returns>
        <para>The cloned node.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlDocumentType.WriteTo(System.Xml.XmlWriter)">
      <summary>
        <para>Saves the node to the specified <see cref="T:System.Xml.XmlWriter" /> .</para>
      </summary>
      <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="M:System.Xml.XmlDocumentType.WriteContentTo(System.Xml.XmlWriter)">
      <summary>
        <para>Saves all the children of the node to the specified 
   <see cref="T:System.Xml.XmlWriter" />. For <see langword="XmlDocumentType" /> nodes, this method has no effect.</para>
      </summary>
      <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="P:System.Xml.XmlDocumentType.Name">
      <summary>
        <para>Gets the qualified name of the node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlDocumentType.LocalName">
      <summary>
        <para> Gets the local name of the node.
 </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlDocumentType.NodeType">
      <summary>
        <para>Gets the type of the current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlDocumentType.IsReadOnly">
      <summary>
        <para>Gets a value indicating whether the node is read-only.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlDocumentType.Entities">
      <summary>
        <para>Gets the collection of <see cref="T:System.Xml.XmlEntity" /> nodes declared in the document type declaration.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlDocumentType.Notations">
      <summary>
        <para>Gets the collection of <see cref="T:System.Xml.XmlNotation" /> nodes present in the document type declaration.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlDocumentType.PublicId">
      <summary>
        <para>
       Gets
       the value of the public identifier on the DOCTYPE declaration.
    </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlDocumentType.SystemId">
      <summary>
        <para>
       Gets the value of
       the system identifier on the DOCTYPE declaration.
    </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlDocumentType.InternalSubset">
      <summary>
        <para> Gets the value of the DTD internal subset
 on the DOCTYPE
 declaration.</para>
      </summary>
    </member>
    <member name="T:System.Xml.XmlTextWriter">
      <summary>
        <para> Represents a writer that provides a fast, non-cached, forward-only way
 of generating streams or files containing XML data that conforms to the
 W3C Extensible Markup Language (XML) 1.0 and the Namespaces in XML
 recommendations.
 </para>
      </summary>
    </member>
    <member name="T:System.Xml.XmlWriter">
      <summary>
        <para> Represents a writer that provides a fast, non-cached, forward-only means of generating streams or files containing XML data that conforms to the W3C Extensible Markup Language (XML) 1.0 and the Namespaces in XML recommendations.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartDocument">
      <summary>
        <para> When overridden in a derived class, writes the XML declaration with the version "1.0".</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartDocument(System.Boolean)">
      <summary>
        <para> When overridden in a derived class, writes the XML declaration with the version "1.0" and the
      standalone attribute.</para>
      </summary>
      <param name="standalone">If <see langword="true" />, it writes "standalone=yes"; if <see langword="false" />, it writes "standalone=no"</param>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndDocument">
      <summary>
        <para>When overridden in a derived class, closes any open elements or attributes and
      puts the writer back in the Start state.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteDocType(System.String,System.String,System.String,System.String)">
      <summary>
        <para> When overridden in a derived class, writes the DOCTYPE declaration with the specified name
      and optional attributes.</para>
      </summary>
      <param name="name">The name of the DOCTYPE. This must be non-empty.</param>
      <param name="pubid">If non-null it also writes PUBLIC "pubid" "sysid" where pubid and sysid are replaced with the value of the given arguments.</param>
      <param name="sysid">If pubid is <see langword="null" /> and sysid is non-null it writes SYSTEM "sysid" where sysid is replaced with the value of this argument.</param>
      <param name="subset">If non-null it writes [subset] where subset is replaced with the value of this argument.</param>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartElement(System.String,System.String)">
      <summary>
        <para> When overridden in a derived class, writes the specified start tag and associates it with the
      given namespace.</para>
      </summary>
      <param name="localName">
        <para> The local name of the element.</para>
      </param>
      <param name="ns">
        <para> The namespace URI to associate with the element. If this namespace is already in scope and has an associated prefix, the writer automatically writes that prefix also.</para>
      </param>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartElement(System.String,System.String,System.String)">
      <summary>
        <para> When overridden in a derived class, writes the specified start tag and
      associates it with the given namespace and prefix.</para>
      </summary>
      <param name="prefix">The namespace prefix of the element.</param>
      <param name="localName">The local name of the element.</param>
      <param name="ns">The namespace URI to associate with the element.</param>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartElement(System.String)">
      <summary>
        <para>When overridden in a derived class, writes out a start tag with the specified local name.</para>
      </summary>
      <param name="localName">The local name of the element.</param>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndElement">
      <summary>
        <para>When overridden in a derived class, closes one element and pops the corresponding namespace scope.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteFullEndElement">
      <summary>
        <para>When overridden in a derived class, closes one element and pops the
      corresponding namespace scope.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String)">
      <summary>
        <para> When overridden in a derived class, writes an attribute with the specified
      parameters.</para>
      </summary>
      <param name="localName">The local name of the attribute.</param>
      <param name=" ns">The namespace URI to associate with the attribute.</param>
      <param name=" value">The value of the attribute.</param>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String)">
      <summary>
        <para>When overridden in a derived class, writes out the attribute with the specified local name and value.</para>
      </summary>
      <param name="localName">The local name of the attribute.</param>
      <param name=" value">The value of the attribute.</param>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String,System.String)">
      <summary>
        <para>When overridden in a derived class, writes out the attribute with the specified prefix, local
      name, namespace URI and value.</para>
      </summary>
      <param name="prefix">The namespace prefix of the attribute.</param>
      <param name=" localName">The local name of the attribute.</param>
      <param name=" ns">The namespace URI of the attribute.</param>
      <param name=" value">The value of the attribute.</param>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)">
      <summary>
        <para>When overridden in a derived class, writes the start of an attribute.</para>
      </summary>
      <param name="localName">The local name of the attribute.</param>
      <param name=" ns">The namespace URI of the attribute</param>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String,System.String)">
      <summary>
        <para>When overridden in a derived class, writes the start of an attribute.</para>
      </summary>
      <param name="prefix">The namespace prefix of the attribute.</param>
      <param name=" localName">The local name of the attribute.</param>
      <param name=" ns">The namespace URI for the attribute.</param>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndAttribute">
      <summary>
        <para>When overridden in a derived class, closes the previous <see cref="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)" />
call.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteCData(System.String)">
      <summary>
        <para>When overridden in a derived class, writes out a &lt;![CDATA[...]]&gt; block containing
      the specified text.</para>
      </summary>
      <param name="text">The text to place inside the CDATA block.</param>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteComment(System.String)">
      <summary>
        <para>When overridden in a derived class, writes out a comment &lt;!--...--&gt; containing
      the specified text.</para>
      </summary>
      <param name="text">Text to place inside the comment.</param>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteProcessingInstruction(System.String,System.String)">
      <summary>
        <para>When overridden in a derived class, writes out a processing instruction with a space between
      the name and text as follows: &lt;?name text?&gt;.</para>
      </summary>
      <param name="name">The name of the processing instruction.</param>
      <param name=" text">The text to include in the processing instruction.</param>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEntityRef(System.String)">
      <summary>
        <para>When overridden in a derived class, writes out an entity reference as follows:
      &amp;<paramref name="name" /> ;.</para>
      </summary>
      <param name="name">The name of the entity reference.</param>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteCharEntity(System.Char)">
      <summary>
        <para>When overridden in a derived class, forces the
 generation of a character entity for the specified Unicode character value.</para>
      </summary>
      <param name="ch">The Unicode character for which to generate a character entity.</param>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteWhitespace(System.String)">
      <summary>
        <para>When overridden in a derived class, writes out the given white space.</para>
      </summary>
      <param name="ws">The string of white space characters.</param>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteString(System.String)">
      <summary>
        <para> When overridden in a derived class, writes the given text content.</para>
      </summary>
      <param name="text">The text to write.</param>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
      <summary>
        <para>When overridden in a derived class, generates and writes the surrogate character entity
      for the surrogate character pair.</para>
      </summary>
      <param name="lowChar">The low surrogate. This must be a value between 0xDC00 and 0xDFFF. </param>
      <param name=" highChar">The high surrogate. This must be a value between 0xD800 and 0xDBFF.</param>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
      <summary>
        <para>When overridden in a derived class, writes text a buffer at a time.</para>
      </summary>
      <param name=" buffer">Character array containing the text to write.</param>
      <param name="index">The position within the buffer indicating the start of the text to write.</param>
      <param name="count">The number of characters to write.</param>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
      <summary>
        <para> When overridden in a derived class, writes raw markup manually from a character buffer.
 </para>
      </summary>
      <param name="buffer">Character array containing the text to write. </param>
      <param name="index">The position within the buffer indicating the start of the text to write. </param>
      <param name="count">The number of characters to write. </param>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteRaw(System.String)">
      <summary>
        <para>When overridden in a derived class, writes raw markup manually from a string.</para>
      </summary>
      <param name="data">String containing the text to write.</param>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para>When overridden in a derived class, encodes the specified binary bytes as base64 and writes out
 the resulting text.</para>
      </summary>
      <param name="buffer">Byte array to encode.</param>
      <param name="index">The position within the buffer indicating the start of the bytes to write.</param>
      <param name="count">The number of bytes to write.</param>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para> When overridden in a derived class, encodes the specified binary bytes as binhex and writes out
 the resulting text.
 </para>
      </summary>
      <param name="buffer">Byte array to encode. </param>
      <param name="index">The position within the buffer indicating the start of the bytes to write. </param>
      <param name="count">The number of bytes to write. </param>
    </member>
    <member name="M:System.Xml.XmlWriter.Close">
      <summary>
        <para>When overridden in a derived class, closes this stream and the underlying stream.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlWriter.Flush">
      <summary>
        <para>When overridden in a derived class, flushes whatever is in the buffer to the underlying streams and also flushes the
 underlying stream.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlWriter.LookupPrefix(System.String)">
      <summary>
        <para> When overridden in a derived class, returns the closest prefix defined in the
      current namespace scope for the namespace URI.</para>
      </summary>
      <param name="ns">The namespace URI whose prefix you want to find.</param>
      <returns>
        <para>The matching prefix or <see langword="null" /> if no matching namespace URI is found in the current scope.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNmToken(System.String)">
      <summary>
        <para>When overridden in a derived class, writes out the specified name, ensuring it is a valid NmToken according to
 the W3C XML 1.0 recommendation (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).</para>
      </summary>
      <param name="name">The name to write.</param>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteName(System.String)">
      <summary>
        <para>When overridden in a derived class, writes out the specified name, ensuring it is a valid name according to
 the W3C XML 1.0 recommendation
 (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).</para>
      </summary>
      <param name="name">The name to write.</param>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteQualifiedName(System.String,System.String)">
      <summary>
        <para> When overridden in a derived class, writes out the namespace-qualified name. This method looks up the prefix
 that is in scope for the given namespace.</para>
      </summary>
      <param name="localName">The local name to write.</param>
      <param name=" ns">The namespace URI for the name.</param>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributes(System.Xml.XmlReader,System.Boolean)">
      <summary>
        <para> When overridden in a derived class, writes out all the attributes found at the
      current position in the <see cref="T:System.Xml.XmlReader" />
      .</para>
      </summary>
      <param name="reader">The <see langword="XmlReader" /> from which to copy the attributes.</param>
      <param name="defattr">
        <see langword="true" /> to copy the default attributes from the <see langword="XmlReader" /> ; otherwise, <see langword="false" />.</param>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNode(System.Xml.XmlReader,System.Boolean)">
      <summary>
        <para>When overridden in a derived class, copies everything from the reader to the writer and
 moves the reader to the start of the next
 sibling.</para>
      </summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="defattr">
        <see langword="true" /> to copy the default attributes from the <see langword="XmlReader" /> ; otherwise, <see langword="false" />.</param>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteElementString(System.String,System.String)">
      <summary>
        <para> When overridden in a derived class, writes an element with the specified local name and value.</para>
      </summary>
      <param name="localName">The local name of the element</param>
      <param name=" value">The value of the element</param>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteElementString(System.String,System.String,System.String)">
      <summary>
        <para> When overridden in a derived class, writes an element with the specified parameters.</para>
      </summary>
      <param name="localName">The local name of the element</param>
      <param name="ns">The namespace URI to associate with the element</param>
      <param name=" value">The value of the element</param>
    </member>
    <member name="P:System.Xml.XmlWriter.WriteState">
      <summary>
        <para>When overridden in a derived class, gets the state of the writer.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlWriter.XmlSpace">
      <summary>
        <para> When overridden in a derived class, gets an <see cref="T:System.Xml.XmlSpace" /> representing the current xml:space scope.
   </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlWriter.XmlLang">
      <summary>
        <para> When overridden in a derived class, gets the current xml:lang scope.
      </para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlTextWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>
        <para>Creates an instance of the <see langword="XmlTextWriter" /> class using the specified
   stream.</para>
      </summary>
      <param name="w">The stream to which you want to write.</param>
      <param name=" encoding"> The encoding to generate. If encoding is <see langword="null" /> it writes out the stream as UTF-8 and omits the encoding attribute from the ProcessingInstruction.</param>
    </member>
    <member name="M:System.Xml.XmlTextWriter.#ctor(System.String,System.Text.Encoding)">
      <summary>
        <para>Creates an instance of the <see langword="XmlTextWriter" /> class using the specified file.</para>
      </summary>
      <param name="filename"> The filename to write to. If the file exists, it will truncate it and overwrite it with the new content.</param>
      <param name=" encoding"> The encoding to generate. If encoding is <see langword="null" /> it writes the file out as UTF-8, and omits the encoding attribute from the ProcessingInstruction.</param>
    </member>
    <member name="M:System.Xml.XmlTextWriter.#ctor(System.IO.TextWriter)">
      <summary>
        <para> Creates an instance of the <see langword="XmlTextWriter" />
class using the specified <see cref="T:System.IO.TextWriter" />
.</para>
      </summary>
      <param name="w">The <see langword="TextWriter" /> to write to. It is assumed that the <see langword="TextWriter" /> is already set to the correct encoding. </param>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteStartDocument">
      <summary>
        <para> Writes the XML declaration with the
      version "1.0".</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteStartDocument(System.Boolean)">
      <summary>
        <para> Writes the XML declaration with the
      version "1.0" and the standalone attribute.</para>
      </summary>
      <param name="standalone">If <see langword="true" />, it writes "standalone=yes"; if <see langword="false" />, it writes "standalone=no"</param>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteEndDocument">
      <summary>
        <para>Closes any open elements or attributes and puts the
      writer back in the Start state.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
      <summary>
        <para> Writes the DOCTYPE declaration with the specified name
      and optional attributes.</para>
      </summary>
      <param name="name">The name of the DOCTYPE. This must be non-empty.</param>
      <param name="pubid">If non-null it also writes PUBLIC "pubid" "sysid" where pubid and sysid are replaced with the value of the given arguments.</param>
      <param name="sysid">If pubid is null and sysid is non-null it writes SYSTEM "sysid" where sysid is replaced with the value of this argument.</param>
      <param name="subset">If non-null it writes [subset] where subset is replaced with the value of this argument.</param>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteStartElement(System.String,System.String,System.String)">
      <summary>
        <para> Writes the specified start tag and associates it with the given namespace
      and prefix.</para>
      </summary>
      <param name=" prefix">The namespace prefix of the element.</param>
      <param name="localName">
        <para> The local name of the element.</para>
      </param>
      <param name="ns">
        <para>The namespace URI to associate with the element. If this namespace is already in scope and has an associated prefix then the writer will automatically write that prefix also.</para>
      </param>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteEndElement">
      <summary>
        <para>Closes one element and pops the corresponding namespace scope.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteFullEndElement">
      <summary>
        <para>Closes one element and pops the corresponding namespace scope.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)">
      <summary>
        <para>Writes the start of an attribute.</para>
      </summary>
      <param name=" prefix">Namespace prefix of the attribute.</param>
      <param name="localName">LocalName of the attribute.</param>
      <param name=" ns">NamespaceURI of the attribute</param>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteEndAttribute">
      <summary>
        <para>Closes the previous <see cref="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)" />
call.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteCData(System.String)">
      <summary>
        <para>Writes out a &lt;![CDATA[...]]&gt; block containing
      the specified text.</para>
      </summary>
      <param name="text">Text to place inside the CDATA block.</param>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteComment(System.String)">
      <summary>
        <para>Writes out a comment &lt;!--...--&gt; containing
      the specified text.</para>
      </summary>
      <param name="text">Text to place inside the comment.</param>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteProcessingInstruction(System.String,System.String)">
      <summary>
        <para>Writes out a processing instruction with a space between
      the name and text as follows: &lt;?name text?&gt;.</para>
      </summary>
      <param name="name">Name of the processing instruction.</param>
      <param name=" text">Text to include in the processing instruction.</param>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteEntityRef(System.String)">
      <summary>
        <para>Writes out an entity reference as follows:
      &amp;<paramref name="name" /> ;.</para>
      </summary>
      <param name="name">Name of the entity reference.</param>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteCharEntity(System.Char)">
      <summary>
        <para>Forces the
 generation of a character entity for the specified Unicode character value.</para>
      </summary>
      <param name="ch">Unicode character for which to generate a character entity.</param>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteWhitespace(System.String)">
      <summary>
        <para>Writes out the given white space.</para>
      </summary>
      <param name="ws">The string of white space characters.</param>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteString(System.String)">
      <summary>
        <para> Writes the given text content.</para>
      </summary>
      <param name="text">Text to write.</param>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
      <summary>
        <para> Generates and writes the surrogate character entity
      for the surrogate character pair.</para>
      </summary>
      <param name="lowChar">The low surrogate. This must be a value between 0xDC00 and 0xDFFF. </param>
      <param name=" highChar">The high surrogate. This must be a value between 0xD800 and 0xDBFF.</param>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
      <summary>
        <para> Writes text a buffer at a time.
      </para>
      </summary>
      <param name="buffer">Character array containing the text to write. </param>
      <param name="index">The position within the buffer indicating the start of the text to write. </param>
      <param name="count">The number of characters to write. </param>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
      <summary>
        <para> Writes raw markup manually from a character buffer.
 </para>
      </summary>
      <param name="buffer">Character array containing the text to write. </param>
      <param name="index">The position within the buffer indicating the start of the text to write. </param>
      <param name="count">The number of characters to write. </param>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteRaw(System.String)">
      <summary>
        <para>Writes raw markup manually from a string.</para>
      </summary>
      <param name="data">String containing the text to write.</param>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para>Encodes the specified binary bytes as base64 and writes out
 the resulting text.</para>
      </summary>
      <param name="buffer">Byte array to encode.</param>
      <param name="index">The position within the buffer indicating the start of the bytes to write.</param>
      <param name="count">The number of bytes to write.</param>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para> Encodes the specified binary bytes as binhex and writes out
 the resulting text.
 </para>
      </summary>
      <param name="buffer">Byte array to encode. </param>
      <param name="index">The position within the buffer indicating the start of the bytes to write. </param>
      <param name="count">The number of bytes to write. </param>
    </member>
    <member name="M:System.Xml.XmlTextWriter.Close">
      <summary>
        <para>Closes this stream and the underlying stream.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlTextWriter.Flush">
      <summary>
        <para>Flushes whatever is in the buffer to the underlying streams and also flushes the
 underlying stream.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteName(System.String)">
      <summary>
        <para>Writes out the specified name, ensuring it is a valid 
 name according to the W3C XML 1.0 recommendation(http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name
 ).</para>
      </summary>
      <param name="name">Name to write.</param>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
      <summary>
        <para> Writes out the namespace-qualified name. This method looks up the prefix
 that is in scope for the given namespace.</para>
      </summary>
      <param name="localName">The local name to write.</param>
      <param name=" ns">The namespace URI to associate with the name.</param>
    </member>
    <member name="M:System.Xml.XmlTextWriter.LookupPrefix(System.String)">
      <summary>
        <para> Returns the closest prefix defined in the
      current namespace scope for the namespace URI.</para>
      </summary>
      <param name="ns">Namespace URI whose prefix you want to find.</param>
      <returns>
        <para>The matching prefix. Or <see langword="null" /> if no matching namespace URI is found in the current scope.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteNmToken(System.String)">
      <summary>
        <para>Writes out the specified name, ensuring it is a valid NmToken according
 to the W3C XML 1.0 recommendation(http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).</para>
      </summary>
      <param name="name">Name to write.</param>
    </member>
    <member name="P:System.Xml.XmlTextWriter.BaseStream">
      <summary>
        <para>Gets the underlying stream object.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlTextWriter.Namespaces">
      <summary>
        <para>Gets
      or sets a value indicating whether to do namespace support.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlTextWriter.Formatting">
      <summary>
        <para> Indicates how the output
      is formatted.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlTextWriter.Indentation">
      <summary>
        <para>Gets or sets how many IndentChars to write for each level
      in the hierarchy when <see cref="P:System.Xml.XmlTextWriter.Formatting" /> is set to
   <see langword="Formatting.Indented" />
   .</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlTextWriter.IndentChar">
      <summary>
        <para>Gets or sets which character to use for indenting
      when <see cref="P:System.Xml.XmlTextWriter.Formatting" /> is set to Formatting.Indented.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlTextWriter.QuoteChar">
      <summary>
        <para>Gets or sets which character to use to quote attribute
      values.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlTextWriter.WriteState">
      <summary>
        <para>Gets the state of the writer.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlTextWriter.XmlSpace">
      <summary>
        <para> Gets an <see cref="T:System.Xml.XmlSpace" /> representing the current xml:space scope.
   </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlTextWriter.XmlLang">
      <summary>
        <para> Gets the current xml:lang scope.
      </para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlDOMTextWriter.WriteStartElement(System.String,System.String,System.String)">
    </member>
    <member name="M:System.Xml.XmlDOMTextWriter.WriteStartAttribute(System.String,System.String,System.String)">
    </member>
    <member name="T:System.Xml.XmlElement">
      <summary>
        <para>
       Represents an element.
    </para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlElement.CloneNode(System.Boolean)">
      <summary>
        <para>Creates a duplicate of this node.</para>
      </summary>
      <param name="deep">
        <see langword="true" /> to recursively clone the subtree under the specified node; <see langword="false" /> to clone only the node itself (and its attributes if the node is an <see langword="XmlElement" /> ).</param>
      <returns>
        <para>The cloned node.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlElement.GetAttribute(System.String)">
      <summary>
        <para>Returns the value for the attribute with the specified name.</para>
      </summary>
      <param name="name">The name of the attribute to retrieve. This is a qualified name. It is matched against the <see langword="Name" /> property of the matching node. </param>
      <returns>
        <para>The value of the specified attribute. An empty string is 
      returned if a matching attribute is not found or if the attribute does not have a specified or default value.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlElement.SetAttribute(System.String,System.String)">
      <summary>
        <para>Sets the value of the attribute
      with the specified name.</para>
      </summary>
      <param name="name">The name of the attribute to create or alter. This is a qualified name. If the name contains a colon it is parsed into prefix and local name components.</param>
      <param name=" value">The value to set for the attribute.</param>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAttribute(System.String)">
      <summary>
        <para>Removes an attribute by name.</para>
      </summary>
      <param name="name">The name of the attribute to remove.This is a qualified name. It is matched against the <see langword="Name" /> property of the matching node.</param>
    </member>
    <member name="M:System.Xml.XmlElement.GetAttributeNode(System.String)">
      <summary>
        <para>Returns the <see langword="XmlAttribute" /> with the specified name.</para>
      </summary>
      <param name="name">The name of the attribute to retrieve. This is a qualified name. It is matched against the <see langword="Name" /> property of the matching node.</param>
      <returns>
        <para>The specified <see langword="XmlAttribute" /> or
<see langword="null" /> if a matching attribute was not found.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlElement.SetAttributeNode(System.Xml.XmlAttribute)">
      <summary>
        <para>Adds the specified <see cref="T:System.Xml.XmlAttribute" /> .</para>
      </summary>
      <param name="newAttr">The <see langword="XmlAttribute" /> node to add to the attribute collection for this element.</param>
      <returns>
        <para>If the attribute replaces an existing attribute with the 
      same name, the old <see langword="XmlAttribute" />
      is returned; otherwise,
   <see langword="null" />
   is
   returned.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAttributeNode(System.Xml.XmlAttribute)">
      <summary>
        <para>Removes the specified <see cref="T:System.Xml.XmlAttribute" /> .</para>
      </summary>
      <param name="oldAttr">The <see langword="XmlAttribute" /> node to remove. If the removed attribute has a default value, it is immediately replaced.</param>
      <returns>
        <para>The removed <see langword="XmlAttribute" /> or 
<see langword="null" /> if <paramref name="oldAttr" /> is not an attribute node of the 
<see langword="XmlElement" /> .</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlElement.GetElementsByTagName(System.String)">
      <summary>
        <para>Returns an <see cref="T:System.Xml.XmlNodeList" /> containing a list of all descendant
   elements that match the specified <see cref="P:System.Xml.XmlElement.Name" />
   .</para>
      </summary>
      <param name="name">The name tag to match. This is a qualified name. It is matched against the <see langword="Name" /> property of the matching node. The asterik (*) is a special value that matches all tags.</param>
      <returns>
        <para>An <see cref="T:System.Xml.XmlNodeList" /> containing a list of all matching nodes.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlElement.GetAttribute(System.String,System.String)">
      <summary>
        <para>Returns the value for the attribute with the
      specified local name and namespace URI.</para>
      </summary>
      <param name="localName">The local name of the attribute to retrieve.</param>
      <param name="namespaceURI">The namespace URI of the attribute to retrieve.</param>
      <returns>
        <para>The value of the specified attribute. An empty string is returned if a matching attribute is not found or if the attribute does not have a specified or default value.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlElement.SetAttribute(System.String,System.String,System.String)">
      <summary>
        <para>Sets the value of the attribute with the
      specified local name and namespace URI.</para>
      </summary>
      <param name="localName">The local name of the attribute.</param>
      <param name="namespaceURI">The namespace URI of the attribute.</param>
      <param name="value">The value to set for the attribute.</param>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAttribute(System.String,System.String)">
      <summary>
        <para>Removes an attribute with the specified local name and namespace URI.</para>
        <note type="note">
      If the removed attribute has a
      default value, it is immediately replaced.
   </note>
      </summary>
      <param name="localName">The local name of the attribute to remove.</param>
      <param name="namespaceURI">The namespace URI of the attribute to remove.</param>
    </member>
    <member name="M:System.Xml.XmlElement.GetAttributeNode(System.String,System.String)">
      <summary>
        <para>Returns the <see cref="T:System.Xml.XmlAttribute" /> with the specified local name and namespace URI.</para>
      </summary>
      <param name="localName">The local name of the attribute.</param>
      <param name="namespaceURI">The namespace URI of the attribute.</param>
      <returns>
        <para>The specified <see langword="XmlAttribute" /> or
<see langword="null" /> if a matching attribute was not found.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlElement.SetAttributeNode(System.String,System.String)">
      <summary>
        <para>Adds the specified <see cref="T:System.Xml.XmlAttribute" /> .</para>
      </summary>
      <param name="localName">The local name of the attribute.</param>
      <param name="namespaceURI">The namespace URI of the attribute.</param>
      <returns>
        <para>The <see langword="XmlAttribute" /> to add.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAttributeNode(System.String,System.String)">
      <summary>
        <para>Removes the <see cref="T:System.Xml.XmlAttribute" />specified by the local name and namespace URI.</para>
        <note type="note">
   If the removed attribute has a
   default value, it is immediately replaced.
</note>
      </summary>
      <param name="localName">The local name of the attribute.</param>
      <param name="namespaceURI">The namespace URI of the attribute.</param>
      <returns>
        <para>The removed <see langword="XmlAttribute" /> or
<see langword="null" /> if the <see langword="XmlElement" /> does not have a 
   matching attribute node.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlElement.GetElementsByTagName(System.String,System.String)">
      <summary>
        <para>Returns an <see cref="T:System.Xml.XmlNodeList" /> containing a list of all descendant
   elements that match the specified <see cref="P:System.Xml.XmlElement.LocalName" /> and <see cref="P:System.Xml.XmlElement.NamespaceURI" />
   .</para>
      </summary>
      <param name="localName">The local name to match. The asterik (*) is a special value that matches all tags.</param>
      <param name="namespaceURI">The namespace URI to match.</param>
      <returns>
        <para>An <see cref="T:System.Xml.XmlNodeList" /> containing a list of all matching nodes.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlElement.HasAttribute(System.String)">
      <summary>
        <para>Determines whether the current node has an attribute with the specified
      name.</para>
      </summary>
      <param name="name">The name of the attribute to find. This is a qualified name. It is matched against the <see langword="Name" /> property of the matching node.</param>
      <returns>
        <para>
          <see langword="true" /> if the current node has the specified attribute;
   otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlElement.HasAttribute(System.String,System.String)">
      <summary>
        <para>Determines whether the current node has an attribute
      with the specified local name and namespace URI.</para>
      </summary>
      <param name="localName">The local name of the attribute to find.</param>
      <param name="namespaceURI">The namespace URI of the attribute to find.</param>
      <returns>
        <para>
          <see langword="true" /> if the current node has the specified attribute;
   otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlElement.WriteTo(System.Xml.XmlWriter)">
      <summary>
        <para>Saves the current node to the specified <see cref="T:System.Xml.XmlWriter" /> .</para>
      </summary>
      <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="M:System.Xml.XmlElement.WriteContentTo(System.Xml.XmlWriter)">
      <summary>
        <para>Saves all the children of the node to the specified
   <see cref="T:System.Xml.XmlWriter" /> .</para>
      </summary>
      <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAttributeAt(System.Int32)">
      <summary>
        <para> Removes the attribute node with the specified index from the element. </para>
        <note type="note">
      If the removed attribute has a
      default value, it is immediately replaced.
      
   </note>
      </summary>
      <param name="i">The index of the node to remove. The first node has index 0.</param>
      <returns>
        <para>The attribute node removed or
   <see langword="null " />if there is no node at the given index.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAllAttributes">
      <summary>
        <para>Removes all specified attributes from the element. Default attributes are not removed.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAll">
      <summary>
        <para>Removes all specified attributes and children of the current node. Default
      attributes are not removed.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlElement.Name">
      <summary>
        <para>Gets the qualified name of the node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlElement.LocalName">
      <summary>
        <para> Gets the local name of the current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlElement.NamespaceURI">
      <summary>
        <para>Gets the namespace URI of this node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlElement.Prefix">
      <summary>
        <para>Gets or sets the namespace prefix of this node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlElement.NodeType">
      <summary>
        <para>Gets the type of the current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlElement.OwnerDocument">
      <summary>
        <para>Gets the <see cref="T:System.Xml.XmlDocument" /> to which this node belongs.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlElement.IsEmpty">
      <summary>
        <para> Gets or sets the tag format of the element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlElement.Attributes">
      <summary>
        <para>Gets an <see cref="T:System.Xml.XmlAttributeCollection" /> containing the list of attributes for this node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlElement.HasAttributes">
      <summary>
        <para>Gets a <see langword="boolean" /> value indicating whether the current node
   has any attributes.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlElement.InnerXml">
      <summary>
        <para>Gets or sets the markup representing just
      the children of this node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlElement.InnerText">
      <summary>
        <para>Gets or sets the concatenated values of the
      node and all its children.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlElement.NextSibling">
      <summary>
   Gets the <see cref="T:System.Xml.XmlNode" /> immediately following this element.
</summary>
    </member>
    <member name="T:System.Xml.XmlEntity">
      <summary>
        <para> Represents an entity declaration: &lt;!ENTITY ... &gt;.
      </para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlEntity.CloneNode(System.Boolean)">
      <summary>
        <para>Creates a duplicate of this node. Entity nodes 
      cannot be cloned. Calling this method on an <see langword="XmlEntity" /> object throws an exception.</para>
      </summary>
      <param name="deep">
        <see langword="true" /> to recursively clone the subtree under the specified node; <see langword="false" /> to clone only the node itself.</param>
    </member>
    <member name="M:System.Xml.XmlEntity.WriteTo(System.Xml.XmlWriter)">
      <summary>
        <para>Saves the node to the specified <see cref="T:System.Xml.XmlWriter" /> .</para>
For <see langword="XmlEntity" /> nodes, this
method has no effect.
</summary>
      <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="M:System.Xml.XmlEntity.WriteContentTo(System.Xml.XmlWriter)">
      <summary>
        <para>Saves all the children of the node to the specified
   <see cref="T:System.Xml.XmlWriter" /> .</para>
        <para>For <see langword="XmlEntity" /> nodes, this method has no effect.</para>
      </summary>
      <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="P:System.Xml.XmlEntity.IsReadOnly">
      <summary>
        <para>Gets a value indicating whether the node is read-only.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlEntity.Name">
      <summary>
        <para>Gets the name of the node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlEntity.LocalName">
      <summary>
        <para> Gets the name of the node without the namespace prefix.
      </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlEntity.InnerText">
      <summary>
        <para>Gets the concatenated values of the entity node and all
      its children.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlEntity.NodeType">
      <summary>
        <para>Gets the type of the node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlEntity.PublicId">
      <summary>
        <para>Gets
      the value of the public identifier on the entity declaration.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlEntity.SystemId">
      <summary>
        <para>Gets the value of
      the system identifier on the entity declaration.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlEntity.NotationName">
      <summary>
        <para>Gets
      the name of the optional NDATA attribute on the
      entity declaration.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlEntity.OuterXml">
      <summary>
        <para>Gets the markup representing this node and all its
      children.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlEntity.InnerXml">
      <summary>
        <para> Gets the markup representing the children of
      this node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlEntity.BaseURI">
      <summary>
        <para>Gets the base URI of the current node.</para>
      </summary>
    </member>
    <member name="T:System.Xml.XmlTextReader">
      <summary>
        <para> Represents a reader that provides
      fast, non-cached, forward-only
      access to XML data.</para>
      </summary>
    </member>
    <member name="T:System.Xml.XmlReader">
      <summary>
        <para> Represents a reader that provides fast, non-cached, forward-only access
      to XML data.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlReader.GetAttribute(System.String)">
      <summary>
        <para>When overridden in a derived class, gets the value of the attribute with the specified
 <see cref="P:System.Xml.XmlReader.Name" /> .</para>
      </summary>
      <param name="name">The qualified name of the attribute.</param>
      <returns>
        <para>The value of the specified attribute. If the attribute 
 is not found, String.Empty is returned.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlReader.GetAttribute(System.String,System.String)">
      <summary>
        <para>When overridden in a derived class, gets the value of the attribute with the
 specified <see cref="P:System.Xml.XmlReader.LocalName" /> and <see cref="P:System.Xml.XmlReader.NamespaceURI" /> .</para>
      </summary>
      <param name="name">The local name of the attribute.</param>
      <param name=" namespaceURI">The namespace URI of the attribute.</param>
      <returns>
        <para>The value of the specified attribute. If the attribute 
 is not found, String.Empty is returned. This method does not move the reader.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlReader.GetAttribute(System.Int32)">
      <summary>
        <para>When overridden in a derived class, gets the value of the attribute with the specified index.</para>
      </summary>
      <param name="i">The index of the attribute. The index is zero-based. (The first attribute has index 0.)</param>
      <returns>
        <para>The value of the specified attribute. This method does not move the reader.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToAttribute(System.String)">
      <summary>
        <para>When overridden in a derived class, moves to the attribute with the specified <see cref="P:System.Xml.XmlReader.Name" /> .</para>
      </summary>
      <param name="name">The qualified name of the attribute.</param>
      <returns>
        <para>
          <see langword="true" /> if the attribute is found;
 otherwise, <see langword="false" />. If <see langword="false" />,
 the reader's position does not change.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToAttribute(System.String,System.String)">
      <summary>
        <para>When overridden in a derived class, moves to the attribute with the specified <see cref="P:System.Xml.XmlReader.LocalName" />
and <see cref="P:System.Xml.XmlReader.NamespaceURI" /> .</para>
      </summary>
      <param name="name">The local name of the attribute.</param>
      <param name=" ns">The namespace URI of the attribute.</param>
      <returns>
        <para>
          <see langword="true" /> if the attribute is found; otherwise,
<see langword="false" />. If <see langword="false" />, the reader's position does
 not change.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToAttribute(System.Int32)">
      <summary>
        <para>When overridden in a derived class, moves to the attribute with the specified index.</para>
      </summary>
      <param name="i">The index of the attribute.</param>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToFirstAttribute">
      <summary>
        <para>When overridden in a derived class, moves to the first attribute.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if an 
 attribute exists (the reader moves to the first attribute); otherwise,
<see langword="false " />(the position of the reader does not change).</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToNextAttribute">
      <summary>
        <para>When overridden in a derived class, moves to the next attribute.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if there is a next attribute;
<see langword="false" /> if there are no more attributes.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToElement">
      <summary>
        <para>When overridden in a derived class, moves to the element that contains the current attribute node.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the reader 
 is positioned on an attribute (the reader moves to the element that owns
 the attribute); <see langword="false" /> if the reader is not
 positioned on an attribute
 (the position of the reader does not change).</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlReader.Read">
      <summary>
        <para>When overridden in a derived class, reads the next
 node from the stream.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the next node was read successfully;
<see langword="false" /> if there are no more nodes to read. </para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlReader.Close">
      <summary>
        <para> When overridden in a derived class, changes the <see cref="P:System.Xml.XmlReader.ReadState" /> to 
<see langword="Closed" />
.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlReader.Skip">
      <summary>
        <para> Skips the children of the current node.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlReader.ReadString">
      <summary>
        <para>When overridden in a derived class, reads the contents of an element or text node as a string.</para>
      </summary>
      <returns>
        <para>The contents of the element or text node. This can be an empty string if
      the reader is positioned on something other than an element or text node, or
      if there is no more text content to return in the current context.</para>
        <para>
          <see langword="Note:" /> The text node can be either an element or
   an attribute text node.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToContent">
      <summary>
        <para> Checks whether the current node is a content (non-white
      space text, <see langword="CDATA" />, <see langword="Element" />,
   <see langword="EndElement" />, <see langword="EntityReference" />, or
   <see langword="EndEntity" /> )
      node. If the node is not a content node, the reader skips ahead to the
      next content node or end of file. It skips over nodes of the following type:
   <see langword="ProcessingInstruction" />, <see langword="DocumentType" />,
   <see langword="Comment" />, <see langword="Whitespace" />, or
   <see langword="SignificantWhitespace" />.</para>
      </summary>
      <returns>
        <para> The <see cref="P:System.Xml.XmlReader.NodeType" /><see langword=" " />of the current
   node found by the method or <see langword="XmlNodeType.None" />
   if the reader has reached the end of the input stream.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadStartElement">
      <summary>
        <para>Checks that the current node is an element and advances the reader to the next
       node.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlReader.ReadStartElement(System.String)">
      <summary>
        <para>Checks that the current content node is an element with
 the given <see cref="P:System.Xml.XmlReader.Name" /> and
 advances the reader to the next node.</para>
      </summary>
      <param name="name">The qualified name of the element.</param>
    </member>
    <member name="M:System.Xml.XmlReader.ReadStartElement(System.String,System.String)">
      <summary>
        <para>Checks that the current content node is an element with
 the given <see cref="P:System.Xml.XmlReader.LocalName" /> and <see cref="P:System.Xml.XmlReader.NamespaceURI" />
 and advances the reader to the next node.</para>
      </summary>
      <param name="localname">The local name of the element.</param>
      <param name="ns"> The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementString">
      <summary>
        <para>Reads a text-only element.</para>
      </summary>
      <returns>
        <para> The text contained in the element that was read.
 An empty string if the element is empty
 (<c>&lt;item&gt;&lt;/item&gt;</c> or <c>&lt;item/&gt;</c>).</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementString(System.String)">
      <summary>
        <para>Checks that the <see cref="P:System.Xml.XmlReader.Name" />
property of the element found
matches the given string before reading a text-only element.</para>
      </summary>
      <param name="name">The name to check.</param>
      <returns>
        <para>The text contained in the element that was read.
 An empty string if the element is empty
 (<c>&lt;item&gt;&lt;/item&gt;</c> or <c>&lt;item/&gt;</c>).</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementString(System.String,System.String)">
      <summary>
        <para>Checks that the <see cref="P:System.Xml.XmlReader.LocalName" /> and <see cref="P:System.Xml.XmlReader.NamespaceURI" /> properties of the element found
 matches the given strings before reading a text-only element.</para>
      </summary>
      <param name="localname">The local name to check.</param>
      <param name=" ns">The namespace URI to check.</param>
      <returns>
        <para>The text contained in the element that was read.
 An empty string if the element is empty
 (<c>&lt;item&gt;&lt;/item&gt;</c> or <c>&lt;item/&gt;</c>).</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadEndElement">
      <summary>
        <para>Checks that the current content node is an end tag and advances the reader to
 the next node.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlReader.IsStartElement">
      <summary>
        <para>Calls <see cref="M:System.Xml.XmlReader.MoveToContent" /> and tests if the current
   content node is a start tag or empty element tag.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if
<see langword="MoveToContent" /> finds a start tag or empty element
   tag; <see langword="false" /> if a node type other than
<see langword="XmlNodeType.Element" /> 
was found.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlReader.IsStartElement(System.String)">
      <summary>
        <para>Calls <see cref="M:System.Xml.XmlReader.MoveToContent" /> and tests if the current content node is
   a start tag or empty element tag and if the
<see cref="P:System.Xml.XmlReader.Name" />
property of the element found matches the given argument.</para>
      </summary>
      <param name="name">The string matched against the <see langword="Name" /> property of the element found.</param>
      <returns>
        <para>
          <see langword="true" /> if the
   resulting node is an element and the <see langword="Name " />
   property matches the specified
   string. <see langword="false" /> if a node type other than
<see langword="XmlNodeType.Element" /> 
was found or if the element <see langword="Name" /> property does not match the specified string.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlReader.IsStartElement(System.String,System.String)">
      <summary>
        <para>Calls <see cref="M:System.Xml.XmlReader.MoveToContent" /> and tests if the
   current content node is a start tag or empty element tag and if
   the <see cref="P:System.Xml.XmlReader.LocalName" /> and
<see cref="P:System.Xml.XmlReader.NamespaceURI" />
properties of the element found match the given strings.</para>
      </summary>
      <param name="localname">The string to match against the <see langword="LocalName" /> property of the element found.</param>
      <param name="ns">The string to match against the <see langword="NamespaceURI" /> property of the element found. </param>
      <returns>
        <para>
          <see langword="true" /> if the
   resulting node is an element. <see langword="false" /> if a
   node type other than <see langword="XmlNodeType.Element" /> was found or if the
<see langword="LocalName" /> and <see langword="NamespaceURI " />properties of
   the element do not match the specified strings.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlReader.IsName(System.String)">
      <summary>
        <para>Gets a value indicating whether
 the string argument is a valid XML name.</para>
      </summary>
      <param name="str">The name to validate.</param>
      <returns>
        <para>
          <see langword="true" /> if the name 
 is valid; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlReader.IsNameToken(System.String)">
      <summary>
        <para>Gets a value indicating whether or not the
      string argument is a valid XML name token.</para>
      </summary>
      <param name="str">The name token to validate.</param>
      <returns>
        <para>
          <see langword="true" /> if it is a
   valid name token; otherwise <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadInnerXml">
      <summary>
        <para>When overridden in a derived class, reads all the content, including markup, as a string.</para>
      </summary>
      <returns>
        <para> All the XML content, including markup, in the current node. If the current node has no children, an empty string is returned.</para>
        <para>If the current node is neither an element nor attribute, an empty
 string is returned.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadOuterXml">
      <summary>
        <para>When overridden in a derived class, reads the content, including markup, representing this node and all its children.</para>
      </summary>
      <returns>
        <para>If the reader is positioned on an element or an attribute node, this method
 returns all the XML content, including markup, of the current node and all its
 children; otherwise, it returns an empty string.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlReader.LookupNamespace(System.String)">
      <summary>
        <para> When overridden in a derived class, resolves a namespace prefix in the current element's scope.
 </para>
      </summary>
      <param name="prefix">The prefix whose namespace URI you want to resolve. To match the default namespace, pass an empty string. This string does not have to be atomized. </param>
      <returns>
        <para> The namespace URI to which the prefix maps or <see langword="null" /> if no
 matching prefix is found.
 </para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlReader.ResolveEntity">
      <summary>
        <para> When overridden in a derived class, resolves the entity
 reference for <see langword="EntityReference" /> nodes.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlReader.ReadAttributeValue">
      <summary>
        <para>When overridden in a derived class, parses the attribute 
      value into one or more <see langword="Text" />, <see langword="EntityReference" />,
      or <see langword="EndEntity" /> nodes.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if there are nodes to return.</para>
        <para>
          <see langword="false" /> if the reader is not positioned on an attribute node when the initial call is made or if all the attribute values have been read.</para>
        <para>An empty attribute, such as, <c>misc=""</c>, returns <see langword="true" /> with a single node with a value of String.Empty.</para>
      </returns>
    </member>
    <member name="P:System.Xml.XmlReader.NodeType">
      <summary>
        <para>When overridden in a derived class, gets the type of the current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlReader.Name">
      <summary>
        <para> When overridden in a derived class, gets
 the qualified name of the current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlReader.LocalName">
      <summary>
        <para> When overridden in a derived class, gets the local name of the current node.
 </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlReader.NamespaceURI">
      <summary>
        <para>When overridden in a derived class, gets the namespace URI (as defined in the W3C Namespace
 specification) of the node on which the reader is positioned. </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlReader.Prefix">
      <summary>
        <para> When overridden in a derived class, gets the namespace prefix associated with the current node.
 </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlReader.HasValue">
      <summary>
        <para>When overridden in a derived class, gets a value indicating whether the current node can have a
   <see cref="P:System.Xml.XmlReader.Value" /> .</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlReader.Value">
      <summary>
        <para>When overridden in a derived class, gets the text value of the current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlReader.Depth">
      <summary>
        <para> When overridden in a derived class, gets the depth of
 the current node in the XML document.
 </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlReader.BaseURI">
      <summary>
        <para> When overridden in a derived class, gets the base URI of the current node.
 </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlReader.IsEmptyElement">
      <summary>
        <para>When overridden in a derived class, gets a value indicating whether the current node is an
 empty element (for example, <c>&lt;MyElement/&gt;</c>
 ).</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlReader.IsDefault">
      <summary>
        <para> When overridden in a derived class, gets a value indicating whether the current node is an
 attribute that was generated from the default value defined
 in the DTD or schema.
 </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlReader.QuoteChar">
      <summary>
        <para> When overridden in a derived class, gets the quotation mark character used to enclose the value of an attribute
 node.
 </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlReader.XmlSpace">
      <summary>
        <para>When overridden in a derived class, gets the current <see langword="xml:space" /> scope.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlReader.XmlLang">
      <summary>
        <para>When overridden in a derived class, gets the current <see langword="xml:lang" /> scope.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlReader.AttributeCount">
      <summary>
        <para> When overridden in a derived class, gets the number of attributes on the current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlReader.Item(System.Int32)">
      <summary>
        <para>When overridden in a derived class, gets the value of the attribute with the specified index.</para>
      </summary>
      <param name="i">The index of the attribute.</param>
    </member>
    <member name="P:System.Xml.XmlReader.Item(System.String)">
      <summary>
        <para>When overridden in a derived class, gets the value of the attribute with the specified
 <see cref="P:System.Xml.XmlReader.Name" /> .</para>
      </summary>
      <param name="name">The qualified name of the attribute.</param>
    </member>
    <member name="P:System.Xml.XmlReader.Item(System.String,System.String)">
      <summary>
        <para>When overridden in a derived class, gets the value of the attribute with the
 specified <see cref="P:System.Xml.XmlReader.LocalName" /> and <see cref="P:System.Xml.XmlReader.NamespaceURI" /> .</para>
      </summary>
      <param name="name">The local name of the attribute.</param>
      <param name=" namespaceURI">The namespace URI of the attribute.</param>
    </member>
    <member name="P:System.Xml.XmlReader.CanResolveEntity">
      <summary>
        <para>Gets a value indicating whether this reader can parse
      and resolve entities.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlReader.EOF">
      <summary>
        <para> When overridden in a derived class, gets a
 value indicating whether the reader is positioned at the end of the
 stream.
 </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlReader.ReadState">
      <summary>
        <para> When overridden in a derived class, gets the state of the reader.
 </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlReader.HasAttributes">
      <summary>
        <para>Gets a value indicating whether the current node
      has any attributes.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlReader.NameTable">
      <summary>
        <para>When overridden in a derived class, gets the <see cref="T:System.Xml.XmlNameTable" /> associated with this
 implementation.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor">
      <summary>
        <para>Initializes a new instance of the 
 <see langword="XmlTextReader" /> .</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream)">
      <summary>
        <para>Initializes a new instance of the
   <see langword="XmlTextReader" /> class with the specified stream.</para>
      </summary>
      <param name="input">The stream containing the XML data to read.</param>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.Stream)">
      <summary>
        <para>Initializes a new instance of the 
 <see langword="XmlTextReader" /> 
 class with the specified URL and stream.</para>
      </summary>
      <param name="url">The URL to use for resolving external resources. The <see cref="P:System.Xml.XmlTextReader.BaseURI" /> is set to this value.</param>
      <param name=" input">The stream containing the XML data to read.</param>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNameTable)">
      <summary>
        <para>Initializes a new instance of the
   <see langword="XmlTextReader" /> class with the specified stream and <see cref="T:System.Xml.XmlNameTable" /> .</para>
      </summary>
      <param name="input">The stream containing the XML data to read.</param>
      <param name="nt">The <see langword="XmlNameTable" /> to use.</param>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.Stream,System.Xml.XmlNameTable)">
      <summary>
        <para>Initializes a new instance of the 
 <see langword="XmlTextReader" /> class with the specified URL, stream and <see cref="T:System.Xml.XmlNameTable" /> 
 .</para>
      </summary>
      <param name=" url">The URL to use for resolving external resources. The <see cref="P:System.Xml.XmlTextReader.BaseURI" /> is set to this value.</param>
      <param name="input">The stream containing the XML data to read.</param>
      <param name=" nt">The <see langword="XmlNameTable" /> to use.</param>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.IO.TextReader)">
      <summary>
        <para> Initializes a new instance of the 
 <see langword="XmlTextReader" /> class with the specified <see cref="T:System.IO.TextReader" /> .
 </para>
      </summary>
      <param name="input">The <see langword="TextReader" /> containing the XML data to read. </param>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.TextReader)">
      <summary>
        <para>Initializes a new instance of the
   <see langword="XmlTextReader" /> class with the specified URL and <see cref="T:System.IO.TextReader" />
   .</para>
      </summary>
      <param name="url">The URL to use for resolving external resources. The <see cref="P:System.Xml.XmlTextReader.BaseURI" /> is set to this value.</param>
      <param name=" input">The <see langword="TextReader" /> containing the XML data to read.</param>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.IO.TextReader,System.Xml.XmlNameTable)">
      <summary>
        <para> Initializes a new instance of the 
 <see langword="XmlTextReader" /> class with the specified <see cref="T:System.IO.TextReader" /> and 
 <see cref="T:System.Xml.XmlNameTable" /> 
 .
 </para>
      </summary>
      <param name="input">The <see langword="TextReader" /> containing the XML data to read. </param>
      <param name="nt">The <see langword="XmlNameTable" /> to use. </param>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.TextReader,System.Xml.XmlNameTable)">
      <summary>
        <para>Initializes a new instance of the
   <see langword="XmlTextReader" /> class with the specified URL, <see cref="T:System.IO.TextReader" /> and
   <see cref="T:System.Xml.XmlNameTable" />
   .</para>
      </summary>
      <param name="url">The URL to use for resolving external resources. The <see cref="P:System.Xml.XmlTextReader.BaseURI" /> is set to this value.</param>
      <param name=" input">The <see langword="TextReader" /> containing the XML data to read.</param>
      <param name=" nt">The <see langword="XmlNameTable" /> to use.</param>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
      <summary>
        <para>Initializes a new instance of the
   <see langword="XmlTextReader" />
   class with the specified values.</para>
      </summary>
      <param name="xmlFragment">The stream containing the XML fragment to parse.</param>
      <param name=" fragType">The <see cref="T:System.Xml.XmlNodeType" /> of the XML fragment. This also determines what the fragment can contain. (See table below.)</param>
      <param name=" context">
        <para>The <see cref="T:System.Xml.XmlParserContext" /> in which the <paramref name="xmlFragment" /> is to be parsed. This includes the <see cref="T:System.Xml.XmlNameTable" /> to use, encoding, namespace scope, the current <c>xml:lang</c>, and the <c>xml:space</c> scope.</para>
      </param>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
      <summary>
        <para>Initializes a new instance of the
   <see langword="XmlTextReader" />
   class with the specified values.</para>
      </summary>
      <param name="xmlFragment">The string containing the XML fragment to parse.</param>
      <param name=" fragType">The <see cref="T:System.Xml.XmlNodeType" /> of the XML fragment. This also determines what the fragment string can contain. (See table below.)</param>
      <param name=" context">
        <para>The <see cref="T:System.Xml.XmlParserContext" /> in which the <paramref name="xmlFragment" /> is to be parsed. This includes the <see cref="T:System.Xml.XmlNameTable" /> to use, encoding, namespace scope, the current <c>xml:lang</c>, and the <c>xml:space</c> scope.</para>
      </param>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String)">
      <summary>
        <para> Initializes a new instance of the 
   <see langword="XmlTextReader" /> class with the specified file.
      </para>
      </summary>
      <param name="url"> The URL for the file containing the XML data. </param>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNameTable)">
      <summary>
        <para> Initializes a new instance of the 
 <see langword="XmlTextReader" /> class with the specified file and <see cref="T:System.Xml.XmlNameTable" /> .
 </para>
      </summary>
      <param name="url">The URL for the file containing the XML data to read. </param>
      <param name="nt">The <see langword="XmlNameTable" /> to use. </param>
    </member>
    <member name="M:System.Xml.XmlTextReader.GetAttribute(System.Int32)">
      <summary>
        <para>Gets the value of the attribute with the specified index.</para>
      </summary>
      <param name="i">The index of the attribute. The index is zero-based. (The first attribute has index 0.)</param>
      <returns>
        <para>The value of the specified attribute.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.GetAttribute(System.String)">
      <summary>
        <para>Gets the value of the attribute with the specified name.</para>
      </summary>
      <param name="name">The qualified name of the attribute.</param>
      <returns>
        <para>The value of the specified attribute. If the attribute 
 is not found, String.Empty is returned.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.GetAttribute(System.String,System.String)">
      <summary>
        <para>Gets the value of the attribute with the specified local name and namespace URI.</para>
      </summary>
      <param name="localName">The local name of the attribute.</param>
      <param name=" namespaceURI">The namespace URI of the attribute.</param>
      <returns>
        <para>The value of the specified attribute. If the attribute 
 is not found, String.Empty is returned. This method does not move the reader.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToAttribute(System.String)">
      <summary>
        <para>Moves to the attribute with the specified name.</para>
      </summary>
      <param name="name">The qualified name of the attribute.</param>
      <returns>
        <para>
          <see langword="true" /> if the attribute is found;
 otherwise, <see langword="false" />. If <see langword="false" />,
 the reader's position does not change.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToAttribute(System.String,System.String)">
      <summary>
        <para>Moves to the attribute with the specified local name and namespace URI.</para>
      </summary>
      <param name="localName">The local name of the attribute.</param>
      <param name=" namespaceURI">The namespace URI of the attribute.</param>
      <returns>
        <para>
          <see langword="true" /> if the attribute is found; otherwise,
<see langword="false" />. If <see langword="false" />, the reader's position does
 not change.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToAttribute(System.Int32)">
      <summary>
        <para>Moves to the attribute with the specified index.</para>
      </summary>
      <param name="i">The index of the attribute.</param>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToFirstAttribute">
      <summary>
        <para>Moves to the first attribute.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if an attribute exists (the reader moves to the first attribute); otherwise, <see langword="false " />(the position of the reader does not change).</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToNextAttribute">
      <summary>
        <para>Moves to the next attribute.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if there is a next attribute;
<see langword="false" /> if there are no more attributes.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToElement">
      <summary>
        <para>Moves to the element that contains the current attribute node.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the reader is positioned on an attribute (the reader moves to the element that owns
 the attribute); <see langword="false" /> if the reader is not positioned on an attribute
 (the position of the reader does not change).</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.ResetState">
      <summary>
        <para>Resets the state of the reader to ReadState.Initial.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlTextReader.Read">
      <summary>
        <para>Reads the next
      node from the stream.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the next node was read successfully;
<see langword="false" /> if there are no more nodes to read.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.Close">
      <summary>
        <para> Changes the <see cref="P:System.Xml.XmlReader.ReadState" />
to Closed.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadInnerXml">
      <summary>
        <para>Reads all the content, including markup, as a string.</para>
      </summary>
      <returns>
        <para> All the XML content, including markup, in the current node. If the current node has no children, an empty string is returned.</para>
        <para>If the current node is neither an element nor attribute, an empty
 string is returned.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadOuterXml">
      <summary>
        <para>Reads the content, including markup, representing this node and all its children.</para>
      </summary>
      <returns>
        <para>If the reader is positioned on an element or an attribute node, this method
 returns all the XML content, including markup, of the current node and all its
 children; otherwise, it returns an empty string.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.GetRemainder">
      <summary>
        <para> Gets the remainder of the buffered XML.</para>
      </summary>
      <returns>
   A <see cref="T:System.IO.TextReader" /> containing
   the remainder of the buffered XML.
</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadChars(System.Char[],System.Int32,System.Int32)">
      <summary>
        <para>Reads the text contents of an element into a character
      buffer. This method is designed to read large streams of embedded text by
      calling it successively.</para>
      </summary>
      <param name="buffer">The array of characters that serves as the buffer to which the text contents are written.</param>
      <param name=" index">The position within <paramref name="buffer" /> where the method can begin writing text contents.</param>
      <param name=" count">The number of characters to write into <paramref name="buffer" />.</param>
      <returns>
        <para>The number of characters read. This can be 0 if the reader is not positioned on an element or if there
      is no more text content to return in the current context.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadString">
      <summary>
        <para>Reads the contents of an element or a text node as a string.</para>
      </summary>
      <returns>
        <para>The contents of the element or text node. This can be an empty string if
      the reader is positioned on something other than an element or text node, or
      if there is no more text content to return in the current context.</para>
        <para>
          <see langword="Note:" /> The text node can be either an element or
   an attribute text node.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para>Decodes Base64 and returns the decoded binary bytes.</para>
      </summary>
      <param name="array">The array of characters that serves as the buffer to which the text contents are written.</param>
      <param name="offset">
        <para>The zero-based index into the array specifying where the method can begin to write to the buffer.</para>
      </param>
      <param name="len">The number of bytes to write into the buffer.</param>
      <returns>
        <para>The number of bytes written to the buffer.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para>Decodes BinHex and returns the decoded binary
      bytes.</para>
      </summary>
      <param name="array">The byte array that serves as the buffer to which the decoded binary bytes are written.</param>
      <param name=" offset">The zero-based index into the array specifying where the method can begin to write to the buffer.</param>
      <param name=" len">The number of bytes to write into the buffer.</param>
      <returns>
        <para>The number of bytes written to your buffer.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.LookupNamespace(System.String)">
      <summary>
        <para> Resolves a namespace prefix in the current element's scope.
 </para>
      </summary>
      <param name="prefix">The prefix whose namespace URI you want to resolve. To match the default namespace, pass an empty string. This string does not have to be atomized. </param>
      <returns>
        <para> The namespace URI to which the prefix maps or <see langword="null" /> if no
 matching prefix is found.
 </para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.ResolveEntity">
      <summary>
        <para> Resolves the entity reference for EntityReference nodes.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadAttributeValue">
      <summary>
        <para>Parses the attribute value into one or more 
   <see langword="Text" />, <see langword="EntityReference" />, or 
   <see langword="EndEntity" /> nodes.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if there are nodes to return.</para>
        <para>
          <see langword="false" /> if the reader is not positioned on an attribute node when the initial call is made or if all the attribute values have been read.</para>
        <para>An empty attribute, such as, <c>misc=""</c>, returns <see langword="true" /> with a single node with a value of String.Empty.</para>
      </returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.NodeType">
      <summary>
        <para>Gets the type of the current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlTextReader.Name">
      <summary>
        <para> Gets
 the qualified name of the current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlTextReader.LocalName">
      <summary>
        <para> Gets the local name of the current node.
 </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlTextReader.NamespaceURI">
      <summary>
        <para> Gets the namespace URI (as defined in the W3C Namespace specification) of the node on which the reader is positioned.
 </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlTextReader.Prefix">
      <summary>
        <para> Gets the namespace prefix associated with the current node.
 </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlTextReader.HasValue">
      <summary>
        <para>Gets a value indicating whether the current node can have a <see cref="P:System.Xml.XmlTextReader.Value" /> .</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlTextReader.Value">
      <summary>
        <para>Gets the text value of the current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlTextReader.Depth">
      <summary>
        <para> Gets the depth of
 the current node in the XML document.
 </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlTextReader.BaseURI">
      <summary>
        <para> Gets the base URI of the current node.
 </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlTextReader.IsEmptyElement">
      <summary>
        <para>Gets a value indicating whether the current node is an 
 empty element (for example, <c>&lt;MyElement/&gt;</c>
 ).</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlTextReader.IsDefault">
      <summary>
        <para> Gets a value indicating whether the current node is an
 attribute that was generated from the default value defined
 in the DTD or schema.
 </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlTextReader.QuoteChar">
      <summary>
        <para>
       Gets the quotation mark character used to enclose the value of an attribute
       node.
    </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlTextReader.XmlSpace">
      <summary>
        <para>Gets the current <see langword="xml:space" /> scope.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlTextReader.XmlLang">
      <summary>
        <para>Gets the current <see langword="xml:lang" /> scope.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlTextReader.AttributeCount">
      <summary>
        <para>Gets the number of attributes on the current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlTextReader.Item(System.Int32)">
      <summary>
        <para>Gets the value of the attribute with the specified index.</para>
      </summary>
      <param name="i">The index of the attribute.</param>
    </member>
    <member name="P:System.Xml.XmlTextReader.Item(System.String)">
      <summary>
        <para>Gets the value of the attribute with the specified name.</para>
      </summary>
      <param name="name">The qualified name of the attribute.</param>
    </member>
    <member name="P:System.Xml.XmlTextReader.Item(System.String,System.String)">
      <summary>
        <para>Gets the value of the attribute with the specified local name and namespace URI.</para>
      </summary>
      <param name="name">The local name of the attribute.</param>
      <param name=" namespaceURI">The namespace URI of the attribute.</param>
    </member>
    <member name="P:System.Xml.XmlTextReader.EOF">
      <summary>
        <para> Gets a
 value indicating whether the reader is positioned at the end of the
 stream.
 </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlTextReader.ReadState">
      <summary>
        <para> 
      Gets the state of the reader.
      </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlTextReader.NameTable">
      <summary>
        <para>Gets the <see cref="T:System.Xml.XmlNameTable" /> associated with this
 implementation.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlTextReader.Namespaces">
      <summary>
        <para> Gets or sets a value indicating whether to do namespace support.
 </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlTextReader.Normalization">
      <summary>
        <para>Gets or sets a value indicating whether to normalize white
      space and attribute values.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlTextReader.Encoding">
      <summary>
        <para> Gets the encoding of the
 document.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlTextReader.WhitespaceHandling">
      <summary>
        <para>Gets or sets a value that specifies how white
      space is handled.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlTextReader.XmlResolver">
      <summary>
        <para> Sets the <see cref="T:System.Xml.XmlResolver" /> used for resolving DTD
   references.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlTextReader.LineNumber">
      <summary>
        <para>Gets the current line number.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlTextReader.LinePosition">
      <summary>
        <para>Gets the current line position.</para>
      </summary>
    </member>
    <member name="T:System.Xml.XmlEntityReference">
      <summary>
        <para>
       Represents an entity reference node.
    </para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlEntityReference.CloneNode(System.Boolean)">
      <summary>
        <para>Creates a duplicate of this node.</para>
      </summary>
      <param name="deep">
        <see langword="true" /> to recursively clone the subtree under the specified node; <see langword="false" /> to clone only the node itself. For <see langword="XmlEntityReference" /> nodes, this method always returns an entity reference node with no children. The replacement text is set when the node is inserted into a parent.</param>
      <returns>
        <para>The cloned node.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlEntityReference.WriteTo(System.Xml.XmlWriter)">
      <summary>
        <para>Saves the node to the specified <see cref="T:System.Xml.XmlWriter" /> .</para>
      </summary>
      <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="M:System.Xml.XmlEntityReference.WriteContentTo(System.Xml.XmlWriter)">
      <summary>
        <para>Saves all the children of the node to the specified 
   <see cref="T:System.Xml.XmlWriter" /> .</para>
      </summary>
      <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="P:System.Xml.XmlEntityReference.Name">
      <summary>
        <para>Gets the name of the node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlEntityReference.LocalName">
      <summary>
        <para> Gets the local name of the node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlEntityReference.Value">
      <summary>
        <para>Gets or sets the value of the node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlEntityReference.NodeType">
      <summary>
        <para>Gets the type of the node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlEntityReference.IsReadOnly">
      <summary>
        <para>Gets a value indicating whether the node is read-only.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlEntityReference.BaseURI">
      <summary>
        <para>Gets the base URI of the current node.</para>
      </summary>
    </member>
    <member name="T:System.Xml.XmlNodeChangedAction">
      <summary>
        <para> Specifies the type of node change. </para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlNodeChangedAction.Insert">
      <summary>
        <para> A node is being inserted in the tree.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlNodeChangedAction.Remove">
      <summary>
        <para> A node is being removed from the tree.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlNodeChangedAction.Change">
      <summary>
        <para> A node value is being changed.</para>
      </summary>
    </member>
    <member name="T:System.Xml.XmlException">
      <summary>
    Returns detailed information about the last exception.
 </summary>
    </member>
    <member name="M:System.Xml.XmlException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the
 <see langword="XmlException" /> class using the information in the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" /> objects.</para>
      </summary>
      <param name="info">The <see langword="SerializationInfo" /> object containing all the properties of an <see langword="XmlException" />. </param>
      <param name=" context">The <see langword="StreamingContext" /> object containing the context information.</param>
    </member>
    <member name="M:System.Xml.XmlException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
   Streams all the <see langword="XmlException" /> properties
   into the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> class for the given <see cref="T:System.Runtime.Serialization.StreamingContext" />.
</summary>
      <param name="info">The <see langword="SerializationInfo" /> object.</param>
      <param name=" context">The <see langword="StreamingContext" /> object.</param>
    </member>
    <member name="M:System.Xml.XmlException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see langword="XmlException" /> class.</para>
      </summary>
      <param name="message">The description of the error condition.</param>
      <param name=" innerException">The <see cref="T:System.Exception" /> that threw the <see langword="XmlException" />, if any. This value can be <see langword="null" />.</param>
    </member>
    <member name="P:System.Xml.XmlException.LineNumber">
      <summary>
    Gets the line number indicating where the
    error occurred.
 </summary>
    </member>
    <member name="P:System.Xml.XmlException.LinePosition">
      <summary>
    Gets the line position indicating where the
    error occurred.
 </summary>
    </member>
    <member name="T:System.Xml.XmlImplementation">
      <summary>
        <para>Defines the context for a set of <see cref="T:System.Xml.XmlDocument" />
objects.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlImplementation.#ctor">
      <summary>
        <para>
       Initializes a new instance of the XmlImplementation class.
    </para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlImplementation.HasFeature(System.String,System.String)">
      <summary>
        <para> Tests if the DOM implementation implements a specific feature.
 </para>
      </summary>
      <param name="strFeature">The package name of the feature to test. This name is not case-sensitive. </param>
      <param name=" strVersion">This is the version number of the package name to test. If the version is not specified (<see langword="null" />), supporting any version of the feature causes the method to return <see langword="true" /> . </param>
      <returns>
        <para>
          <see langword="true" /> if the feature is implemented in the specified version;
 otherwise, <see langword="false" />.
 </para>
        <para> The following table shows the combinations that cause 
<see langword="HasFeature" /> to return <see langword="true" /> .
 </para>
        <list type="table">
          <listheader>
            <term> strFeature</term>
            <description> strVersion</description>
          </listheader>
          <item>
            <term> XML</term>
            <description> 1.0</description>
          </item>
          <item>
            <term> XML</term>
            <description> 2.0</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.Xml.XmlImplementation.CreateDocument">
      <summary>
        <para>Creates a new <see cref="T:System.Xml.XmlDocument" /> .</para>
      </summary>
      <returns>
        <para>The new <see langword="XmlDocument" /> object.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNodeEnumerator.MoveNext">
      <summary>
        <para>Advances the enumerator to the next item in
       the collection.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the move 
    was successfull; <see langword="false" /> if the enumerator has passed the end of
    the collection.</para>
      </returns>
    </member>
    <member name="T:System.Xml.XmlNamespaceManager">
      <summary>
        <para>Resolves, adds and removes namespaces to a collection and
      provide scope management for these namespaces. This class is used by
      the <see cref="T:System.Xml.Xsl.XsltContext" />
      and <see cref="T:System.Xml.XmlReader" /> classes.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.#ctor(System.Xml.XmlNameTable)">
      <summary>
        <para>Initializes a new instance of the
   <see langword="XmlNamespaceManager" /> class with the specified <see cref="T:System.Xml.XmlNameTable" />
   .</para>
      </summary>
      <param name="nameTable">The <see langword="XmlNameTable" /> to use.</param>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.PushScope">
      <summary>
        <para>Pushes a namespace scope onto the stack.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.PopScope">
      <summary>
        <para>Pops a namespace scope off the stack.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if there are
   namespace scopes left on the stack; <see langword="false" /> if there are no more
   namespaces to pop.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.AddNamespace(System.String,System.String)">
      <summary>
        <para>Adds the given namespace to the collection.</para>
      </summary>
      <param name="prefix">The prefix to associate with the namespace being added. Use String.Empty to add a default namespace.</param>
      <param name=" uri">The namespace to add.</param>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.RemoveNamespace(System.String,System.String)">
      <summary>
        <para>Removes the given namespace for the given
      prefix.</para>
      </summary>
      <param name="prefix">The prefix for the namespace</param>
      <param name=" uri">The namespace to remove for the given prefix. The namespace removed is from the current namespace scope. Namespaces outside the current scope are ignored. Exceptions are never thrown.</param>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.GetEnumerator">
      <summary>
        <para>Provides support for the "foreach" style iteration over 
      the collection of namespaces in the <see langword="XmlNamespaceManager" />
      .</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Collections.IEnumerator" /> .</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.LookupNamespace(System.String)">
      <summary>
        <para>Gets the namespace URI for the specified
      prefix.</para>
      </summary>
      <param name="prefix">The prefix whose namespace URI you want to resolve. To match the default namespace, pass String.Empty.</param>
      <returns>
        <para>Returns the namespace URI for <paramref name="prefix" /> or <see langword="null" /> if there is no mapped namespace. The returned
   string is atomized. </para>
        <para>For more information on atomized strings, see <see cref="T:System.Xml.XmlNameTable" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.LookupPrefix(System.String)">
      <summary>
        <para>Finds the prefix declared for the given
      namespace URI.</para>
      </summary>
      <param name="uri">The namespace to resolve for the prefix.</param>
      <returns>
        <para>The matching prefix. If there is no mapped prefix,
      the method returns String.Empty. If a null value is supplied then
   <see langword="null" /> is returned.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.HasNamespace(System.String)">
      <summary>
        <para>Gets a value indicating whether the supplied prefix has
      a namespace defined for the current pushed scope.</para>
      </summary>
      <param name="prefix">The prefix of the namespace you want to find.</param>
      <returns>
        <para>
          <see langword="true" /> if there is a
   namespace defined; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="P:System.Xml.XmlNamespaceManager.NameTable">
      <summary>
        <para> Gets the <see cref="T:System.Xml.XmlNameTable" /> associated with this object.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNamespaceManager.DefaultNamespace">
      <summary>
        <para>Gets the namespace URI for the default
      namespace.</para>
      </summary>
    </member>
    <member name="T:System.Xml.XmlNodeChangedEventArgs">
      <summary>
        <para>Provides data for the <see cref="E:System.Xml.XmlDocument.NodeChanged" />, <see cref="E:System.Xml.XmlDocument.NodeChanging" />, <see cref="E:System.Xml.XmlDocument.NodeInserted" />, <see cref="E:System.Xml.XmlDocument.NodeInserting" />, <see cref="E:System.Xml.XmlDocument.NodeRemoved" /> and <see cref="E:System.Xml.XmlDocument.NodeRemoving" /> events.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNodeChangedEventArgs.Action">
      <summary>
        <para>Gets a value indicating what type of node
      change event is occurring.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNodeChangedEventArgs.Node">
      <summary>
   Gets the <see cref="T:System.Xml.XmlNode" /> that is
   being added, removed or changed.
</summary>
    </member>
    <member name="P:System.Xml.XmlNodeChangedEventArgs.OldParent">
      <summary>
   Gets the value of the <see cref="P:System.Xml.XmlNode.ParentNode" />
   before the operation began.
</summary>
    </member>
    <member name="P:System.Xml.XmlNodeChangedEventArgs.NewParent">
      <summary>
        <para>Gets the value of the <see cref="P:System.Xml.XmlNode.ParentNode" /> after the operation completes.</para>
      </summary>
    </member>
    <member name="T:System.Xml.XmlNodeChangedEventHandler">
      <summary>
        <para>Represents the method that handles
 <see cref="E:System.Xml.XmlDocument.NodeChanged" />, <see cref="E:System.Xml.XmlDocument.NodeChanging" />, <see cref="E:System.Xml.XmlDocument.NodeInserted" />, <see cref="E:System.Xml.XmlDocument.NodeInserting" />, <see cref="E:System.Xml.XmlDocument.NodeRemoved" /> and <see cref="E:System.Xml.XmlDocument.NodeRemoving" /> events.</para>
      </summary>
      <param name="sender">The source of the event.</param>
      <param name=" e">An <see cref="T:System.Xml.XmlNodeChangedEventArgs" /> containing the event data.</param>
    </member>
    <member name="T:System.Xml.XmlNodeOrder">
      <summary>
        <para>Describes the document order of a node compared to a
      second node.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlNodeOrder.Before">
      <summary>
        <para> The current node of this navigator is before the
      current node of the supplied navigator.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlNodeOrder.After">
      <summary>
        <para> The current node of this navigator is after the
      current node of the supplied navigator.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlNodeOrder.Same">
      <summary>
        <para> The two
      navigators are positioned on the same node.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlNodeOrder.Unknown">
      <summary>
        <para> The node positions
 cannot be determined in document order, relative to each other. This could occur if the
 two nodes reside in different trees.</para>
      </summary>
    </member>
    <member name="T:System.Xml.XmlNodeReader">
      <summary>
        <para>Represents a reader that provides fast, non-cached
      forward only access to XML data in an <see cref="T:System.Xml.XmlNode" /><see langword="." /></para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlNodeReader.#ctor(System.Xml.XmlNode)">
      <summary>
        <para>Creates an instance of the <see langword="XmlNodeReader" /> class using the
   specified <see cref="T:System.Xml.XmlNode" />
   .</para>
      </summary>
      <param name="node">The <see langword="XmlNode" /> you want to read.</param>
    </member>
    <member name="M:System.Xml.XmlNodeReader.GetAttribute(System.String)">
      <summary>
        <para>Gets the value of the attribute with the specified name.</para>
      </summary>
      <param name="name">The qualified name of the attribute.</param>
      <returns>
        <para>The value of the specified attribute. If the attribute 
 is not found, String.Empty is returned.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.GetAttribute(System.String,System.String)">
      <summary>
        <para>Gets the value of the attribute with the specified local name and namespace URI.</para>
      </summary>
      <param name="name">The local name of the attribute.</param>
      <param name=" namespaceURI">The namespace URI of the attribute.</param>
      <returns>
        <para>The value of the specified attribute. If the attribute 
 is not found, String.Empty is returned.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.GetAttribute(System.Int32)">
      <summary>
        <para>Gets the value of the attribute with the specified index.</para>
      </summary>
      <param name="attributeIndex">The index of the attribute. The index is zero-based. (The first attribute has index 0.)</param>
      <returns>
        <para>The value of the specified attribute.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToAttribute(System.String)">
      <summary>
        <para>Moves to the attribute with the specified name.</para>
      </summary>
      <param name="name">The qualified name of the attribute.</param>
      <returns>
        <para>
          <see langword="true" /> if the attribute is found;
 otherwise, <see langword="false" />. If <see langword="false" />,
 the reader's position does not change.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToAttribute(System.String,System.String)">
      <summary>
        <para>Moves to the attribute with the specified local name and namespace URI.</para>
      </summary>
      <param name="name">The local name of the attribute.</param>
      <param name=" namespaceURI">The namespace URI of the attribute.</param>
      <returns>
        <para>
          <see langword="true" /> if the attribute is found; otherwise,
<see langword="false" />. If <see langword="false" />, the reader's position does
 not change.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToAttribute(System.Int32)">
      <summary>
        <para>Moves to the attribute with the specified index.</para>
      </summary>
      <param name="attributeIndex">The index of the attribute.</param>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToFirstAttribute">
      <summary>
        <para>Moves to the first attribute.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if an attribute exists (the reader moves to the first attribute); otherwise, <see langword="false " />(the position of the reader does not change).</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToNextAttribute">
      <summary>
        <para>Moves to the next attribute.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if there is a next attribute;
<see langword="false" /> if there are no more attributes.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToElement">
      <summary>
        <para>Moves to the element that contains the current attribute node.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the reader is positioned on an attribute (the reader moves to the element that owns
 the attribute); <see langword="false" /> if the reader is not positioned on an attribute
 (the position of the reader does not change).</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.Read">
      <summary>
        <para>Reads the next
 node from the stream.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the next node was read successfully;
<see langword="false" /> if there are no more nodes to read. </para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.Close">
      <summary>
        <para> Changes the <see cref="P:System.Xml.XmlNodeReader.ReadState" /> to <see langword="Closed" />
.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlNodeReader.Skip">
      <summary>
        <para>Skips the children of the current node. </para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ReadString">
      <summary>
        <para>Reads the contents of an element or text node as a string.</para>
      </summary>
      <returns>
        <para>The contents of the element or text-like node (This can include CDATA, Text nodes, and so on). This can be an empty string if
      the reader is positioned on something other than an element or text node, or
      if there is no more text content to return in the current context.</para>
        <para>
          <see langword="Note:" /> The text node can be either an element or
   an attribute text node.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ReadInnerXml">
      <summary>
        <para>Reads all the content, including markup, as a string.</para>
      </summary>
      <returns>
        <para> All the XML content, including markup, in the current node. If the current node has no children, an empty string is returned.</para>
        <para>If the current node is neither an element nor attribute, an empty
 string is returned.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ReadOuterXml">
      <summary>
        <para>Reads the content, including markup, representing this node and all its children.</para>
      </summary>
      <returns>
        <para>If the reader is positioned on an element or an attribute node, this method
 returns all the XML content, including markup, of the current node and all its
 children; otherwise, it returns an empty string.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.LookupNamespace(System.String)">
      <summary>
        <para> Resolves a namespace prefix in the current element's scope.
 </para>
      </summary>
      <param name="prefix">The prefix whose namespace URI you want to resolve. To match the default namespace, pass an empty string. This string does not have to be atomized. </param>
      <returns>
        <para> The namespace URI to which the prefix maps or <see langword="null" /> if no
 matching prefix is found.
 </para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ResolveEntity">
      <summary>
        <para> Resolves the entity reference for 
   <see langword="EntityReference" /> nodes.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ReadAttributeValue">
      <summary>
        <para>Parses the attribute value into one or more 
   <see langword="Text" />, <see langword="EntityReference" />, or 
   <see langword="EndEntity" /> nodes.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if there are nodes to return.</para>
        <para>
          <see langword="false" /> if the reader is not positioned on an attribute node when the initial call is made or if all the attribute values have been read.</para>
        <para>An empty attribute, such as, <c>misc=""</c>, returns <see langword="true" /> with a single node with a value of String.Empty.</para>
      </returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.NodeType">
      <summary>
        <para>Gets the type of the current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNodeReader.Name">
      <summary>
        <para> Gets
 the qualified name of the current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNodeReader.LocalName">
      <summary>
        <para> Gets the local name of the current node.
 </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNodeReader.NamespaceURI">
      <summary>
        <para>Gets the namespace URI (as defined in the W3C Namespace
 specification) of the node on which the reader is positioned. </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNodeReader.Prefix">
      <summary>
        <para> Gets the namespace prefix associated with the current node.
 </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNodeReader.HasValue">
      <summary>
        <para>Gets a value indicating whether the current node can have a <see cref="P:System.Xml.XmlNodeReader.Value" /> .</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNodeReader.Value">
      <summary>
        <para>Gets the text value of the current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNodeReader.Depth">
      <summary>
        <para> Gets the depth of
      the current node in the XML document.
      </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNodeReader.BaseURI">
      <summary>
        <para> Gets the base URI of the current node.
 </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNodeReader.CanResolveEntity">
      <summary>
        <para>Gets a value indicating whether this reader can parse
 and resolve entities.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNodeReader.IsEmptyElement">
      <summary>
        <para>Gets a value indicating whether the current node is an
      empty element (for example, <c>&lt;MyElement/&gt;</c>
   ).</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNodeReader.IsDefault">
      <summary>
        <para> Gets a value indicating whether the current node is an
      attribute that was generated from the default value defined
      in the DTD or schema.
      </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNodeReader.QuoteChar">
      <summary>
        <para> Gets the quotation mark character used to enclose the value of an attribute
      node.
      </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNodeReader.XmlSpace">
      <summary>
        <para>Gets the current <see langword="xml:space" /> scope.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNodeReader.XmlLang">
      <summary>
        <para>Gets the current <see langword="xml:lang" /> scope.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNodeReader.AttributeCount">
      <summary>
        <para>Gets the number of attributes on the current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNodeReader.EOF">
      <summary>
        <para>Gets a
       value indicating whether the reader is positioned at the end of the
       stream.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNodeReader.ReadState">
      <summary>
        <para> 
      Gets the state of the reader.
      </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNodeReader.HasAttributes">
      <summary>
        <para>Gets a value indicating whether the current node
      has any attributes.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNodeReader.NameTable">
      <summary>
        <para>Gets the <see cref="T:System.Xml.XmlNameTable" /> associated with this
 implementation.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNodeReader.Item(System.Int32)">
      <summary>
        <para>Gets the value of the attribute with the specified index.</para>
      </summary>
      <param name="i">The index of the attribute.</param>
    </member>
    <member name="P:System.Xml.XmlNodeReader.Item(System.String)">
      <summary>
        <para>Gets the value of the attribute with the specified name.</para>
      </summary>
      <param name="name">The qualified name of the attribute.</param>
    </member>
    <member name="P:System.Xml.XmlNodeReader.Item(System.String,System.String)">
      <summary>
        <para>Gets the value of the attribute with the specified local name and namespace URI.</para>
      </summary>
      <param name="name">The local name of the attribute.</param>
      <param name=" namespaceURI">The namespace URI of the attribute.</param>
    </member>
    <member name="T:System.Xml.XmlNodeType">
      <summary>
    Specifies the type of node.
 </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.None">
      <summary>
        <para>This is returned by the <see cref="T:System.Xml.XmlReader" /> if a <see langword="Read" /> 
method has not been called.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Element">
      <summary>
        <para> An element.
      </para>
        <para> Example XML: <c>&lt;item&gt;</c></para>
An <see langword="Element" /> node can have the
following child node types: <see langword="Element" />, <see langword="Text" />,
<see langword="Comment" />, <see langword="ProcessingInstruction" />, 
<see langword="CDATA" />, and <see langword="EntityReference" />. It can be the 
child of the <see langword="Document" />, <see langword="DocumentFragment" />,
<see langword="EntityReference" />, and <see langword="Element" />
nodes.
</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Attribute">
      <summary>
        <para> An
 attribute.
 </para>
        <para> Example XML: <c>id='123'</c></para>
        <para> An <see langword="Attribute" /> node can have the
following child node types: <see langword="Text" /> and
<see langword="EntityReference" />. The <see langword="Attribute" /> node does not 
appear as the child node of any other node type. It is not considered a
child node of an <see langword="Element" />
.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Text">
      <summary>
        <para> The
      text content of a node.
      </para>
        <para> A <see langword="Text" /> node cannot have any child nodes. 
   It can appear as the child node of the <see langword="Attribute" />,
<see langword="DocumentFragment" />, <see langword="Element" />, and 
<see langword="EntityReference" /> 
nodes.
</para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.CDATA">
      <summary>
        <para>A CDATA 
      
      section.</para>
        <para>Example XML: <c>&lt;![CDATA[my 
      escaped text]]&gt;</c></para>
        <para> 
      CDATA sections are used to escape blocks of text that would otherwise
      be recognized as markup. A <see langword="CDATA" /> node cannot have any child
      nodes. It can appear as the child of the <see langword="DocumentFragment" />,
   <see langword="EntityReference" />, and <see langword="Element" /> nodes.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.EntityReference">
      <summary>
        <para>A reference to an entity.</para>
        <para>Example XML: <c>&amp;num;</c></para>
        <para> An <see langword="EntityReference" /> node can have the 
   following child node types: <see langword="Element" />,
<see langword="ProcessingInstruction" />, <see langword="Comment" />, 
<see langword="Text" />, <see langword="CDATA" />, and 
<see langword="EntityReference" />. It can appear as the child of the 
<see langword="Attribute" />, <see langword="DocumentFragment" />, 
<see langword="Element" />, and <see langword="EntityReference" /> 

nodes.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Entity">
      <summary>
        <para>An entity declaration.</para>
        <para>Example XML: <c>&lt;!ENTITY ...&gt;</c></para>
        <para>An <see langword="Entity" /> node can have child nodes 
   that represent the expanded entity (for example, <see langword="Text" /> and
<see langword="EntityReference" /> nodes). It can appear as the child of the 
<see langword="DocumentType" /> 
node.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.ProcessingInstruction">
      <summary>
        <para> A processing instruction.
      </para>
        <para> Example XML: <c>&lt;?pi test?&gt;</c></para>
        <para> A <see langword="ProcessingInstruction" /> node cannot have 
any child nodes. It can appear as the child of the <see langword="Document" />,
<see langword="DocumentFragment" />, <see langword="Element" />, and 
<see langword="EntityReference" /> 
nodes.
</para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Comment">
      <summary>
        <para> A comment.
      </para>
        <para> Example XML: <c>&lt;!-- my comment --&gt;</c></para>
        <para> A <see langword="Comment" /> node cannot have any child 
nodes. It can appear as the child of the <see langword="Document" />,
<see langword="DocumentFragment" />, <see langword="Element" />, and 
<see langword="EntityReference" /> 
nodes.
</para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Document">
      <summary>
        <para> A document object that, as the root of the document tree, provides access
 to the entire XML document.
 </para>
        <para> A <see langword="Document" /> node 
 can have the following child node types:
<see langword="XmlDeclaration" /> 
, <see langword="Element" /> (maximum of one),
<see langword="ProcessingInstruction" />, <see langword="Comment" />, and 
<see langword="DocumentType" /> 
. It cannot
appear as the child of any node types.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.DocumentType">
      <summary>
        <para> The document type declaration, indicated by the following tag.
      </para>
        <para> Example XML: <c>&lt;!DOCTYPE ...&gt;</c></para>
        <para> A <see langword="DocumentType" /> node can have the 
following child node types: <see langword="Notation" /> and
<see langword="Entity" />. It can appear as the child of the 
<see langword="Document" /> 
node.
</para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.DocumentFragment">
      <summary>
        <para> A document fragment.
      </para>
        <para> The <see langword="DocumentFragment" /> node associates a 
   node or subtree with a document without actually being contained within the
   document. A <see langword="DocumentFragment" /> node can have the following child
   node types: <see langword="Element" />, <see langword="ProcessingInstruction" />,
<see langword="Comment" />, <see langword="Text" />, <see langword="CDATA" />, and 
<see langword="EntityReference" /> 

. It
cannot appear as the child of any node types.
</para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Notation">
      <summary>
        <para> A notation in the document type declaration.
      </para>
        <para> Example XML: <c>&lt;!NOTATION ...&gt;</c></para>
        <para> A <see langword="Notation" /> node cannot have any child 
nodes. It can appear as the child of the <see langword="DocumentType" />
node.
</para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Whitespace">
      <summary>
        <para> White space between markup.
      </para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.SignificantWhitespace">
      <summary>
        <para> White space between markup in a mixed content model or white
      space within the <c>xml:space="preserve"</c> scope.
   </para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.EndElement">
      <summary>
        <para> An end element tag.</para>
        <para>Example XML: <c>&lt;/item&gt;</c></para>
        <para>Returned when <see cref="T:System.Xml.XmlReader" /> gets to the end of an element.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.EndEntity">
      <summary>
        <para>Returned when <see langword="XmlReader" /> gets to the end of the entity
   replacement as a result of a call to <see cref="M:System.Xml.XmlReader.ResolveEntity" />
   .</para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.XmlDeclaration">
      <summary>
        <para> The XML declaration.
 </para>
        <para> Example XML: <c>&lt;?xml version='1.0'?&gt;</c></para>
        <para> The <see langword="XmlDeclaration" /> 
node must be the first node in the document. It cannot have children. It is a
child of the <see langword="Document" />
node. It can have attributes that provide version
and encoding information.</para>
      </summary>
    </member>
    <member name="T:System.Xml.XmlNotation">
      <summary>
        <para> Represents a notation declaration: &lt;!NOTATION ... &gt;.
      </para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlNotation.CloneNode(System.Boolean)">
      <summary>
        <para>Creates a duplicate of this node. Notation 
      nodes cannot be cloned. Calling this method on an
   <see langword="XmlNotation" /> object throws an exception.</para>
      </summary>
      <param name="deep">
        <see langword="true" /> to recursively clone the subtree under the specified node; <see langword="false" /> to clone only the node itself.</param>
    </member>
    <member name="M:System.Xml.XmlNotation.WriteTo(System.Xml.XmlWriter)">
      <summary>
        <para>Saves the node to the specified <see cref="T:System.Xml.XmlWriter" /> .</para>
        <para>For <see langword="XmlNotation" />
nodes, this method has no
effect.</para>
      </summary>
      <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="M:System.Xml.XmlNotation.WriteContentTo(System.Xml.XmlWriter)">
      <summary>
        <para>Saves the children of the node to the specified <see cref="T:System.Xml.XmlWriter" /> .</para>
        <para>For <see langword="XmlNotation " />nodes, this method has no effect.</para>
      </summary>
      <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="P:System.Xml.XmlNotation.Name">
      <summary>
        <para> Gets the name of the current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNotation.LocalName">
      <summary>
        <para> Gets the name of the current node without the namespace prefix.
      </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNotation.NodeType">
      <summary>
        <para>Gets the type of the current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNotation.IsReadOnly">
      <summary>
        <para>Gets a value indicating whether the node is read-only.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNotation.PublicId">
      <summary>
        <para>Gets
      the value of the public identifier on the notation declaration.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNotation.SystemId">
      <summary>
        <para>Gets the value of
      the system identifier on the notation declaration.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNotation.OuterXml">
      <summary>
        <para>Gets the markup representing this node and all its
      children.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlNotation.InnerXml">
      <summary>
        <para> Gets the markup representing the children of
      this node.</para>
      </summary>
    </member>
    <member name="T:System.Xml.XmlParserContext">
      <summary>
        <para> Provides all the context information required 
      by <see cref="T:System.Xml.XmlTextReader" /> or <see cref="T:System.Xml.XmlValidatingReader" />
      to parse an XML fragment.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlParserContext.#ctor(System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager,System.String,System.Xml.XmlSpace)">
      <summary>
        <para>Initializes a new instance of the
   <see langword="XmlParserContext" /> class with the specified
      values.</para>
      </summary>
      <param name="nt">The <see cref="T:System.Xml.XmlNameTable" /> to use to atomize strings. If this is <see langword="null" />, the name table used to construct the <paramref name="nsMgr" /> is used instead. For more information on atomized strings, see <see cref="T:System.Xml.XmlNameTable" /> .</param>
      <param name="nsMgr">The <see cref="T:System.Xml.XmlNamespaceManager" /> to use for looking up namespace information. </param>
      <param name="xmlLang">The <see langword="xml:lang" /> scope.</param>
      <param name=" xmlSpace">An <see cref="T:System.Xml.XmlSpace" /> value indicating the <see langword="xml:space" /> scope. </param>
    </member>
    <member name="M:System.Xml.XmlParserContext.#ctor(System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager,System.String,System.Xml.XmlSpace,System.Text.Encoding)">
      <summary>
        <para>Initializes a new instance of the
   <see langword="XmlParserContext" /> class with the specified values.</para>
      </summary>
      <param name="nt">The <see cref="T:System.Xml.XmlNameTable" /> to use to atomize strings. If this is <see langword="null" />, the name table used to construct the <paramref name="nsMgr" /> is used instead. For more information on atomized strings, see <see cref="T:System.Xml.XmlNameTable" /> .</param>
      <param name=" nsMgr">The <see cref="T:System.Xml.XmlNamespaceManager" /> to use for looking up namespace information.</param>
      <param name="xmlLang">The <see langword="xml:lang" /> scope.</param>
      <param name=" xmlSpace">An <see cref="T:System.Xml.XmlSpace" /> value indicating the <see langword="xml:space" /> scope. </param>
      <param name=" enc">An <see cref="T:System.Text.Encoding" /> object indicating the encoding setting.</param>
    </member>
    <member name="M:System.Xml.XmlParserContext.#ctor(System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager,System.String,System.String,System.String,System.String,System.String,System.String,System.Xml.XmlSpace)">
      <summary>
        <para>Initializes a new instance of the
   <see langword="XmlParserContext" />
   class with the specified values.</para>
      </summary>
      <param name="nt">The <see cref="T:System.Xml.XmlNameTable" /> to use to atomize strings. If this is <see langword="null" />, the name table used to construct the <paramref name="nsMgr" /> is used instead. For more information on atomized strings, see<see cref="T:System.Xml.XmlNameTable" /> .</param>
      <param name="nsMgr">The <see cref="T:System.Xml.XmlNamespaceManager" /> to use for looking up namespace information. </param>
      <param name="docTypeName">The name of the document type declaration.</param>
      <param name="pubId">The public identifier.</param>
      <param name="sysId">The system identifier.</param>
      <param name="internalSubset">The internal DTD subset.</param>
      <param name="baseURI">The base URI for the XML fragment (the location from which the fragment was loaded).</param>
      <param name="xmlLang">The <see langword="xml:lang" /> scope.</param>
      <param name=" xmlSpace">An <see cref="T:System.Xml.XmlSpace" /> value indicating the <see langword="xml:space" /> scope. </param>
    </member>
    <member name="M:System.Xml.XmlParserContext.#ctor(System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager,System.String,System.String,System.String,System.String,System.String,System.String,System.Xml.XmlSpace,System.Text.Encoding)">
      <summary>
        <para>Initializes a new instance of the
   <see langword="XmlParserContext" /> class with the specified values.</para>
      </summary>
      <param name="nt">The <see cref="T:System.Xml.XmlNameTable" /> to use to atomize strings. If this is <see langword="null" />, the name table used to construct the <paramref name="nsMgr" /> is used instead. For more information on atomized strings, see <see cref="T:System.Xml.XmlNameTable" /> .</param>
      <param name=" nsMgr">The <see cref="T:System.Xml.XmlNamespaceManager" /> to use for looking up namespace information.</param>
      <param name=" docTypeName">The name of the document type declaration.</param>
      <param name=" pubId">The public identifier.</param>
      <param name="sysId">The system identifier.</param>
      <param name="internalSubset">The internal DTD subset.</param>
      <param name="baseURI">The base URI for the XML fragment (the location from which the fragment was loaded).</param>
      <param name="xmlLang">The <see langword="xml:lang" /> scope.</param>
      <param name=" xmlSpace">An <see cref="T:System.Xml.XmlSpace" /> value indicating the <see langword="xml:space" /> scope. </param>
      <param name=" enc">An <see cref="T:System.Text.Encoding" /> object indicating the encoding setting.</param>
    </member>
    <member name="P:System.Xml.XmlParserContext.NameTable">
      <summary>
        <para>Gets the <see cref="T:System.Xml.XmlNameTable" /> used to atomize strings. For more information 
   on atomized strings, see <see cref="T:System.Xml.XmlNameTable" />
   .</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlParserContext.NamespaceManager">
      <summary>
        <para>Gets or sets the <see cref="T:System.Xml.XmlNamespaceManager" />.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlParserContext.DocTypeName">
      <summary>
        <para>Gets or sets the name of the document type declaration.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlParserContext.PublicId">
      <summary>
        <para>Gets or sets the public identifier.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlParserContext.SystemId">
      <summary>
        <para>Gets or sets the system identifier.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlParserContext.BaseURI">
      <summary>
        <para>Gets or sets the base URI.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlParserContext.InternalSubset">
      <summary>
        <para>Gets or sets the internal DTD subset.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlParserContext.XmlLang">
      <summary>
        <para>Gets or sets the current <see langword="xml:lang" /> scope.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlParserContext.XmlSpace">
      <summary>
        <para>Gets or sets the current <see langword="xml:space" /> scope.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlParserContext.Encoding">
      <summary>
   Gets or sets the encoding type.
</summary>
    </member>
    <member name="T:System.Xml.XmlProcessingInstruction">
      <summary>
        <para> Represents a processing instruction, which XML defines to keep
 processor-specific information in the text of the document.
 </para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlProcessingInstruction.CloneNode(System.Boolean)">
      <summary>
        <para>Creates a duplicate of this node.</para>
      </summary>
      <param name="deep">
        <see langword="true" /> to recursively clone the subtree under the specified node; <see langword="false" /> to clone only the node itself.</param>
      <returns>
        <para>The duplicate node.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlProcessingInstruction.WriteTo(System.Xml.XmlWriter)">
      <summary>
        <para>Saves the node to the specified <see cref="T:System.Xml.XmlWriter" /> .</para>
      </summary>
      <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="M:System.Xml.XmlProcessingInstruction.WriteContentTo(System.Xml.XmlWriter)">
      <summary>
        <para>Saves all the children of the node to the specified
   <see cref="T:System.Xml.XmlWriter" /> . Because 
      ProcessingInstruction nodes do not have children, this method has no effect.</para>
      </summary>
      <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.Name">
      <summary>
        <para>Gets the qualified name of the node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.LocalName">
      <summary>
        <para> Gets the local name of the node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.Value">
      <summary>
        <para>Gets or sets the value of the node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.Target">
      <summary>
        <para> Gets the target of the processing instruction.
 </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.Data">
      <summary>
        <para> Gets or sets the content of the processing instruction,
 excluding the target.
 </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.InnerText">
      <summary>
        <para> Gets or sets the concatenated values of the node and
      all its children.
      </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.NodeType">
      <summary>
        <para>Gets the type of the current node.</para>
      </summary>
    </member>
    <member name="T:System.Xml.XmlQualifiedName">
      <summary>
        <para>Represents an XML qualified name.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlQualifiedName.Empty">
      <summary>
        <para>Provides an empty <see langword="XmlQualifiedName" />.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.#ctor">
      <summary>
        <para>Initializes a new instance of the
   <see langword="XmlQualifedName" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see langword="XmlQualifedName" /> class with the specified name.</para>
      </summary>
      <param name="name">The local name to use as the name of the <see langword="XmlQualifiedName" /> object.</param>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.#ctor(System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the
 <see langword="XmlQualifedName" /> class with the specified name and namespace.</para>
      </summary>
      <param name="name">The local name to use as the name of the <see langword="XmlQualifiedName" /> object. </param>
      <param name=" ns">The namespace for the <see langword="XmlQualifiedName" /> object.</param>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.GetHashCode">
      <summary>
        <para>Returns the hash code for the
 <see langword="XmlQualifiedName" /> .</para>
      </summary>
      <returns>
        <para>A hash code for this object.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.ToString">
      <summary>
        <para>Returns the string value of the
 <see langword="XmlQualifiedName" />.</para>
      </summary>
      <returns>
        <para>The string value of the
 <see langword="XmlQualifiedName" /> in the format of 
 <see langword="namespace:localname" /> . If the 
 object does not have a namespace defined, this method returns just the local
 name.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.Equals(System.Object)">
      <summary>
        <para>Checks if the specified
 <see langword="XmlQualifiedName" /> is the same instance object as this object.</para>
      </summary>
      <param name="other">The <see langword="XmlQualifiedName" /> to compare.</param>
      <returns>
        <para>
          <see langword="true" /> if the two are
 the same instance object; otherwise <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.op_Equality(System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)">
      <summary>
        <para>Compares two <see langword="XmlQualifiedName" /> objects.</para>
      </summary>
      <param name="a">An <see langword="XmlQualifiedName" /> to compare.</param>
      <param name=" b">An <see langword="XmlQualifiedName" /> to compare.</param>
      <returns>
        <para>
          <see langword="true" /> if the two
 objects have the same name and namespace values; otherwise
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.op_Inequality(System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)">
      <summary>
        <para>Compares two <see langword="XmlQualifiedName" /> objects.</para>
      </summary>
      <param name="a">An <see langword="XmlQualifiedName" /> to compare.</param>
      <param name=" b">An <see langword="XmlQualifiedName" /> to compare.</param>
      <returns>
        <para>
          <see langword="true" /> if the name
 and namespace values for the two objects differ; otherwise
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.ToString(System.String,System.String)">
      <summary>
        <para>Returns the string value of the
 <see langword="XmlQualifiedName" />.</para>
      </summary>
      <param name="name">The name of the object.</param>
      <param name=" ns">The namespace of the object.</param>
      <returns>
        <para>The string value of the
 <see langword="XmlQualifiedName" /> in the format of 
 <see langword="namespace:localname" /> . If the
 object does not have a namespace defined, this method returns just the local
 name.</para>
      </returns>
    </member>
    <member name="P:System.Xml.XmlQualifiedName.Namespace">
      <summary>
        <para> Gets a string representation of the namespace
      of the <see langword="XmlQualifiedName" />.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlQualifiedName.Name">
      <summary>
        <para> Gets a string representation of the qualified name
 of the <see langword="XmlQualifiedName" />.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlQualifiedName.IsEmpty">
      <summary>
   Gets a value indicating whether the
<see langword="XmlQualifedName" /> is empty.
</summary>
    </member>
    <member name="T:System.Xml.XmlResolver">
      <summary>
        <para>Resolves external XML resources named by a URI.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlResolver.GetEntity(System.Uri,System.String,System.Type)">
      <summary>
        <para>When overridden in a derived class, maps a
 URI to an object containing the actual resource.</para>
      </summary>
      <param name="absoluteUri">The URI returned from <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" /></param>
      <param name="role">The current version does not use this parameter when resolving URIs. This is provided for future extensibility purposes. For example, this can be mapped to the xlink:role and used as an implementation specific argument in other scenarios.</param>
      <param name="ofObjectToReturn">The type of object to return. The current version only returns System.IO.Stream objects.</param>
      <returns>
        <para>A <see langword="System.IO.Stream" /> object or <see langword="null" /> if a type other than stream is specified.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)">
      <summary>
        <para>When overridden in a derived class, resolves the absolute URI from the base and
 relative URIs.</para>
      </summary>
      <param name="baseUri">The base URI used to resolve the relative URI</param>
      <param name=" relativeUri">
        <para> The URI to resolve. The URI can be absolute or relative. If absolute, this value effectively replaces the <paramref name="baseUri" /> value. If relative, it combines with the <paramref name="baseUri" /> to make an absolute URI.</para>
      </param>
      <returns>
        <para>The absolute URI or
 <see langword="null" /> if the relative URI can not be resolved.</para>
      </returns>
    </member>
    <member name="P:System.Xml.XmlResolver.Credentials">
      <summary>
        <para> When overridden in a derived class, sets the credentials used to authenticate Web
 requests.</para>
      </summary>
    </member>
    <member name="T:System.Xml.XmlSignificantWhitespace">
      <summary>
        <para>Represents white space between markup in a mixed content
      mode or white space within an xml:space= 'preserve' scope. This is also referred
      to as significant white space.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlSignificantWhitespace.CloneNode(System.Boolean)">
      <summary>
        <para>Creates a duplicate of this node.</para>
      </summary>
      <param name="deep">
        <see langword="true" /> to recursively clone the subtree under the specified node; <see langword="false" /> to clone only the node itself. For significant white space nodes, the cloned node always includes the data value, regardless of the parameter setting.</param>
      <returns>
        <para>The cloned node.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlSignificantWhitespace.WriteTo(System.Xml.XmlWriter)">
      <summary>
        <para>Saves the node to the specified <see cref="T:System.Xml.XmlWriter" /> .</para>
      </summary>
      <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="M:System.Xml.XmlSignificantWhitespace.WriteContentTo(System.Xml.XmlWriter)">
      <summary>
        <para>Saves all the children of the node to the specified 
   <see cref="T:System.Xml.XmlWriter" /> .</para>
      </summary>
      <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="P:System.Xml.XmlSignificantWhitespace.Name">
      <summary>
        <para>Gets the qualified name of the node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlSignificantWhitespace.LocalName">
      <summary>
        <para> Gets the local name of the node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlSignificantWhitespace.NodeType">
      <summary>
        <para>Gets the type of the current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlSignificantWhitespace.Value">
      <summary>
        <para>Gets or sets the value of the node.</para>
      </summary>
    </member>
    <member name="T:System.Xml.XmlSpace">
      <summary>
        <para>Specifies the current <see langword="xml:space" /> scope.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlSpace.None">
      <summary>
        <para>No <see langword="xml:space" /> scope.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlSpace.Default">
      <summary>
        <para>The <see langword="xml:space" /> scope equals 
<see langword="default" /> .</para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlSpace.Preserve">
      <summary>
        <para>The <see langword="xml:space" /> scope equals 
<see langword="preserve" /> .</para>
      </summary>
    </member>
    <member name="T:System.Xml.XmlText">
      <summary>
        <para> Represents the text content of an element or attribute.
 </para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlText.CloneNode(System.Boolean)">
      <summary>
        <para>Creates a duplicate of this node.</para>
      </summary>
      <param name="deep">
        <see langword="true" /> to recursively clone the subtree under the specified node; <see langword="false" /> to clone only the node itself.</param>
      <returns>
        <para>The cloned node.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlText.SplitText(System.Int32)">
      <summary>
        <para> Splits the node into two nodes at the specified offset, keeping
      both in the tree as siblings.
      </para>
      </summary>
      <param name="offset">The offset at which to split the node. </param>
      <returns>
   The new node.
</returns>
    </member>
    <member name="M:System.Xml.XmlText.WriteTo(System.Xml.XmlWriter)">
      <summary>
        <para>Saves the node to the specified <see cref="T:System.Xml.XmlWriter" /> .</para>
      </summary>
      <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="M:System.Xml.XmlText.WriteContentTo(System.Xml.XmlWriter)">
      <summary>
        <para>Saves all the children of the node to the specified
   <see cref="T:System.Xml.XmlWriter" /> . 
   <see langword="XmlText" /> nodes do not have children, so this method has no 
      effect.</para>
      </summary>
      <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="P:System.Xml.XmlText.Name">
      <summary>
        <para>Gets the qualified name of the node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlText.LocalName">
      <summary>
        <para> Gets the local name of the node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlText.NodeType">
      <summary>
        <para>Gets the type of the current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlText.Value">
      <summary>
        <para>Gets or sets the value of the node.</para>
      </summary>
    </member>
    <member name="T:System.Xml.XmlTokenizedType">
      <summary>
 Represents the XML type for the string. This allows the
 string to be read as a particular XML type, for example a CDATA section type.
</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.CDATA">
      <summary>
   CDATA type.
</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.ID">
      <summary>
        <para> ID type.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.IDREF">
      <summary>
        <para> IDREF type.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.IDREFS">
      <summary>
   IDREFS type.
</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.ENTITY">
      <summary>
        <para> ENTITY type.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.ENTITIES">
      <summary>
        <para> ENTITIES type.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.NMTOKEN">
      <summary>
        <para> NMTOKEN type.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.NMTOKENS">
      <summary>
   NMTOKENS type.
</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.NOTATION">
      <summary>
        <para> NOTATION type.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.ENUMERATION">
      <summary>
   ENUMERATION type.
</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.QName">
      <summary>
   QName type.
</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.NCName">
      <summary>
   NCName type.
</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.None">
      <summary>
   No type.
</summary>
    </member>
    <member name="T:System.Xml.XmlUrlResolver">
      <summary>
        <para> Resolves external XML resources
      named by a URI.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlUrlResolver.#ctor">
      <summary>
        <para> Creates a new instance of the 
   <see langword="XmlUrlResolver" /> class.
      </para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlUrlResolver.GetEntity(System.Uri,System.String,System.Type)">
      <summary>
        <para>Maps a
 URI to an object containing the actual resource.</para>
      </summary>
      <param name="absoluteUri">The URI returned from <see cref="M:System.Xml.XmlUrlResolver.ResolveUri(System.Uri,System.String)" /></param>
      <param name="role">The current implementation does not use this parameter when resolving URIs. This is provided for future extensibility purposes. For example, this can be mapped to the xlink:role and used as an implementation specific argument in other scenarios.</param>
      <param name="ofObjectToReturn">The type of object to return. The current implementation only returns <see langword="System.IO.Stream" /> objects.</param>
      <returns>
        <para>A <see langword="System.IO.Stream" /> object or <see langword="null" /> if a
 type other than stream is specified.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlUrlResolver.ResolveUri(System.Uri,System.String)">
      <summary>
        <para>Resolves the absolute URI from the base and relative URIs.</para>
      </summary>
      <param name="baseUri">The base URI used to resolve the relative URI</param>
      <param name="relativeUri">
        <para> The URI to resolve. The URI can be absolute or relative. If absolute, this value effectively replaces the <paramref name="baseUri" /> value. If relative, it combines with the <paramref name="baseUri" /> to make an absolute URI.</para>
      </param>
      <returns>
        <para>The absolute URI or <see langword="null" /> if the relative URI can not be resolved.</para>
      </returns>
    </member>
    <member name="P:System.Xml.XmlUrlResolver.Credentials">
      <summary>
        <para> Sets credentials used to authenticate Web
      requests.</para>
      </summary>
    </member>
    <member name="T:System.Xml.XmlValidatingReader">
      <summary>
        <para> Represents a reader that provides DTD, XML-Data Reduced (XDR) schema, and
      XML Schema definition
      language (XSD) schema validation.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.#ctor(System.Xml.XmlReader)">
      <summary>
        <para>Initializes a new instance of the
 <see langword="XmlValidatingReader" />
 class that validates the content returned from the given <see cref="T:System.Xml.XmlReader" />
 .</para>
      </summary>
      <param name="reader">The <see langword="XmlReader" /> to read from while validating. The current implementation only supports <see cref="T:System.Xml.XmlTextReader" /> .</param>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
      <summary>
        <para>Initializes a new instance of the
   <see langword="XmlValidatingReader" /> class with the specified
      values.</para>
      </summary>
      <param name="xmlFragment">The string containing the XML fragment to parse.</param>
      <param name=" fragType">The <see cref="T:System.Xml.XmlNodeType" />of the XML fragment. This also determines what the fragment string can contain (see table below).</param>
      <param name=" context">
        <para>The <see cref="T:System.Xml.XmlParserContext" /> in which the XML fragment is to be parsed. This includes the <see cref="T:System.Xml.NameTable" /> to use, encoding, namespace scope, the current xml:lang and the xml:space scope.</para>
      </param>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
      <summary>
        <para>Initializes a new instance of the
   <see langword="XmlValidatingReader" />
   class with the specified values.</para>
      </summary>
      <param name="xmlFragment">The stream containing the XML fragment to parse.</param>
      <param name="fragType">The <see cref="T:System.Xml.XmlNodeType" />of the XML fragment. This determines what the fragment can contain (see table below).</param>
      <param name="context">
        <para>The <see cref="T:System.Xml.XmlParserContext" /> in which the XML fragment is to be parsed. This includes the <see cref="T:System.Xml.XmlNameTable" /> to use, encoding, namespace scope, the current <see langword="xml:lang" /> and the <see langword="xml:space" /> scope.</para>
      </param>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadTypedValue">
      <summary>
        <para>Gets the common language runtime type for the specified XML Schema definition language (XSD) type.</para>
      </summary>
      <returns>
        <para>The common language runtime type for the specified
      XML Schema (XSD) type.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.GetAttribute(System.Int32)">
      <summary>
        <para>Gets the value of the attribute with the specified index.</para>
      </summary>
      <param name="i">The index of the attribute. The index is zero-based. (The first attribute has index 0.)</param>
      <returns>
        <para>The value of the specified attribute.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.GetAttribute(System.String)">
      <summary>
        <para>Gets the value of the attribute with the specified name.</para>
      </summary>
      <param name="name">The qualified name of the attribute.</param>
      <returns>
        <para>The value of the specified attribute. If the attribute 
 is not found, String.Empty is returned.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.GetAttribute(System.String,System.String)">
      <summary>
        <para>Gets the value of the attribute with the specified local name and namespace URI.</para>
      </summary>
      <param name="localName">The local name of the attribute.</param>
      <param name=" namespaceURI">The namespace URI of the attribute.</param>
      <returns>
        <para>The value of the specified attribute. If the attribute 
 is not found, String.Empty is returned. This
 method does not move the reader.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToAttribute(System.String)">
      <summary>
        <para>Moves to the attribute with the specified name.</para>
      </summary>
      <param name="name">The qualified name of the attribute.</param>
      <returns>
        <para>
          <see langword="true" /> if the attribute is found;
 otherwise, <see langword="false" />. If <see langword="false" />, the position
 of the reader does not change.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToAttribute(System.String,System.String)">
      <summary>
        <para>Moves to the attribute with the specified local name and namespace URI.</para>
      </summary>
      <param name="localName">The local name of the attribute.</param>
      <param name=" namespaceURI">The namespace URI of the attribute.</param>
      <returns>
        <para>
          <see langword="true" /> if the attribute is found; otherwise,
<see langword="false" />. If <see langword="false" />, the position of the reader does
 not change.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToAttribute(System.Int32)">
      <summary>
        <para>Moves to the attribute with the specified index.</para>
      </summary>
      <param name="i">The index of the attribute.</param>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToFirstAttribute">
      <summary>
        <para> Moves to the first attribute.
 </para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if an attribute exists (the reader moves to the first attribute); otherwise, <see langword="false " />(the position of the reader does not change).</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToNextAttribute">
      <summary>
        <para> Moves to the next attribute.
 </para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if there is a next attribute;
<see langword="false" /> if there are no more attributes.
 </para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToElement">
      <summary>
        <para> Moves to the element that contains the current attribute node.
 </para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the reader is positioned on an attribute (the reader moves to the element that owns
 the attribute); <see langword="false" /> if the reader is not positioned on an attribute
 (the position of the reader does not change).</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.Read">
      <summary>
        <para>Reads the next
 node from the stream.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the next node was read successfully;
<see langword="false" /> if there are no more nodes to read.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.Close">
      <summary>
        <para> Changes the <see cref="P:System.Xml.XmlReader.ReadState" />
to Closed.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadInnerXml">
      <summary>
        <para>Reads all the content, including markup, as a string.</para>
      </summary>
      <returns>
        <para> All the XML content, including markup, in the current node. If the current node has no children, an empty string is returned.</para>
        <para>If the current node is neither an element nor attribute, an empty
 string is returned.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadOuterXml">
      <summary>
        <para>Reads the content, including markup, representing this node and all its children.</para>
      </summary>
      <returns>
        <para>If the reader is positioned on an element or an attribute node, this method
 returns all the XML content, including markup, of the current node and all its
 children; otherwise, it returns an empty string.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadString">
      <summary>
        <para>Reads the contents of an element or text node as a string.</para>
      </summary>
      <returns>
        <para>The contents of the element or text node. This can be an empty string if
 the reader is positioned on something other than an element or text node, or
 if there is no more text content to return in the current context.</para>
        <para>
          <see langword="Note:" /> The text node can be either an element or
 an attribute text node.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.LookupNamespace(System.String)">
      <summary>
        <para> Resolves a namespace prefix in the current element's scope.
 </para>
      </summary>
      <param name="prefix">The prefix whose namespace URI you want to resolve. To match the default namespace, pass an empty string. This string does not have to be atomized. </param>
      <returns>
        <para> The namespace URI to which the prefix maps or <see langword="null" /> if no
 matching prefix is found.
 </para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ResolveEntity">
      <summary>
        <para> Resolves the entity reference for
 <see langword="EntityReference" /> nodes.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadAttributeValue">
      <summary>
        <para>Parses the attribute value into one or more 
   <see langword="Text" />, <see langword="EntityReference" />, or 
   <see langword="EndEntity" /> nodes.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if there are nodes to return.</para>
        <para>
          <see langword="false" /> if the reader is not positioned on an attribute node when the initial call is made or if all the attribute values have been read.</para>
        <para>An empty attribute, such as, <c>misc=""</c>, returns <see langword="true" /> with a single node with a value of String.Empty.</para>
      </returns>
    </member>
    <member name="E:System.Xml.XmlValidatingReader.ValidationEventHandler">
      <summary>
        <para>Sets an event handler for receiving information about DTD, XML-Data Reduced (XDR) schema, and XML Schema definition language (XSD) schema
      validation errors.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.NodeType">
      <summary>
        <para> Gets the type of the current node.
 </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Name">
      <summary>
        <para> Gets
 the qualified name of the current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.LocalName">
      <summary>
        <para> Gets the local name of the current node.
 </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.NamespaceURI">
      <summary>
        <para>Gets the namespace URI (as defined in the W3C Namespace
 specification) of the node on which the reader is positioned. </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Prefix">
      <summary>
        <para> Gets the namespace prefix associated with the current node.
      </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Schemas">
      <summary>
        <para> Gets a <see cref="T:System.Xml.Schema.XmlSchemaCollection" /> to use for validation.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.SchemaType">
      <summary>
        <para>Gets a schema type object.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.HasValue">
      <summary>
        <para>Gets a value indicating whether the current node can have a <see cref="P:System.Xml.XmlValidatingReader.Value" /> .</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Value">
      <summary>
        <para>Gets the text value of the current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Depth">
      <summary>
        <para> Gets the depth of
 the current node in the XML document.
 </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.BaseURI">
      <summary>
        <para> Gets the base URI of the current node.
 </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.IsEmptyElement">
      <summary>
        <para>Gets a value indicating whether the current node is an 
 empty element (for example, <c>&lt;MyElement/&gt;</c>
 ).</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.IsDefault">
      <summary>
        <para> Gets a value indicating whether the current node is an
 attribute that was generated from the default value defined
 in the DTD or schema.
 </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.QuoteChar">
      <summary>
        <para>
       Gets the quotation mark character used to enclose the value of an attribute
       node.
    </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.XmlSpace">
      <summary>
        <para>Gets the current <see langword="xml:space" /> scope.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.XmlLang">
      <summary>
        <para>Gets the current <see langword="xml:lang" /> scope.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.AttributeCount">
      <summary>
        <para>Gets the number of attributes on the current node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Reader">
      <summary>
        <para>Gets the <see cref="T:System.Xml.XmlReader" /> used to construct this
<see langword="XmlValidatingReader" /> 
.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.ValidationType">
      <summary>
        <para>Gets a value describing what type of validation to
      perform.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Item(System.Int32)">
      <summary>
        <para>Gets the value of the attribute with the specified index.</para>
      </summary>
      <param name="i">The index of the attribute.</param>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Item(System.String)">
      <summary>
        <para>Gets the value of the attribute with the specified name.</para>
      </summary>
      <param name="name">The qualified name of the attribute.</param>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Item(System.String,System.String)">
      <summary>
        <para>Gets the value of the attribute with the specified local name and namespace URI.</para>
      </summary>
      <param name="name">The local name of the attribute.</param>
      <param name=" namespaceURI">The namespace URI of the attribute.</param>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.EOF">
      <summary>
        <para> Gets a
 value indicating whether the reader is positioned at the end of the
 stream.
 </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.ReadState">
      <summary>
        <para> 
      Gets the state of the reader.
      </para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.NameTable">
      <summary>
        <para>Gets the <see cref="T:System.Xml.XmlNameTable" /> associated with this
 implementation.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.EntityHandling">
      <summary>
        <para>Gets or sets a value that specifies how the reader handles entities.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Encoding">
      <summary>
        <para>Gets the encoding attribute for the
 document.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.XmlResolver">
      <summary>
        <para> Sets the <see cref="T:System.Xml.XmlResolver" /> used for resolving external DTD and schema location
   references. The <see langword="XmlResolver" /> is also used to
   handle any import or include elements
   found in XML Schema definition language (XSD) schemas.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.CanResolveEntity">
      <summary>
        <para>Gets a value indicating whether this reader can parse
 and resolve entities.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Namespaces">
      <summary>
        <para> Gets or sets a value indicating whether to do namespace support.
 </para>
      </summary>
    </member>
    <member name="T:System.Xml.XmlWhitespace">
      <summary>
        <para>Represents white space in element content.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XmlWhitespace.CloneNode(System.Boolean)">
      <summary>
        <para>Creates a duplicate of this node.</para>
      </summary>
      <param name="deep">
        <see langword="true" /> to recursively clone the subtree under the specified node; <see langword="false" /> to clone only the node itself. For white space nodes, the cloned node always includes the data value, regardless of the parameter setting.</param>
      <returns>
        <para>The cloned node.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XmlWhitespace.WriteTo(System.Xml.XmlWriter)">
      <summary>
        <para>Saves the node to the specified <see cref="T:System.Xml.XmlWriter" /> .</para>
      </summary>
      <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="M:System.Xml.XmlWhitespace.WriteContentTo(System.Xml.XmlWriter)">
      <summary>
        <para>Saves all the children of the node to the specified 
   <see cref="T:System.Xml.XmlWriter" /> .</para>
      </summary>
      <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
    </member>
    <member name="P:System.Xml.XmlWhitespace.Name">
      <summary>
        <para>Gets the qualified name of the node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlWhitespace.LocalName">
      <summary>
        <para> Gets the local name of the node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlWhitespace.NodeType">
      <summary>
        <para> Gets the type of the node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XmlWhitespace.Value">
      <summary>
        <para>Gets or sets the value of the node.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Formatting">
      <summary>
        <para> Specifies formatting options for the <see cref="T:System.Xml.XmlTextWriter" /> .
   </para>
      </summary>
    </member>
    <member name="F:System.Xml.Formatting.None">
      <summary>
        <para> No special formatting is applied. This is the default.
      </para>
      </summary>
    </member>
    <member name="F:System.Xml.Formatting.Indented">
      <summary>
        <para> Causes child elements to be indented
      according to the <see cref="P:System.Xml.XmlTextWriter.Indentation" /> and <see cref="P:System.Xml.XmlTextWriter.IndentChar" /> settings. This option indents element
      content only; mixed content is not affected. For the XML 1.0
      definitions of
      
      these terms, see the W3C documentation (http://www.w3.org/TR/1998/REC-xml-19980210#sec-element-content and http://www.w3.org/TR/1998/REC-xml-19980210#sec-mixed-content).</para>
      </summary>
    </member>
    <member name="T:System.Xml.WriteState">
      <summary>
        <para> Specifies the state of the <see cref="T:System.Xml.XmlWriter" /> .
   </para>
      </summary>
    </member>
    <member name="F:System.Xml.WriteState.Start">
      <summary>
        <para> A Write method has not been called.
      </para>
      </summary>
    </member>
    <member name="F:System.Xml.WriteState.Prolog">
      <summary>
        <para> The prolog is being written.
      </para>
      </summary>
    </member>
    <member name="F:System.Xml.WriteState.Element">
      <summary>
        <para> An element start tag is being written.
      </para>
      </summary>
    </member>
    <member name="F:System.Xml.WriteState.Attribute">
      <summary>
        <para> An attribute value is being written.
      </para>
      </summary>
    </member>
    <member name="F:System.Xml.WriteState.Content">
      <summary>
        <para> The element content is being written.
      </para>
      </summary>
    </member>
    <member name="F:System.Xml.WriteState.Closed">
      <summary>
        <para> The <see cref="M:System.Xml.XmlWriter.Close" /> method has been called.
   </para>
      </summary>
    </member>
    <member name="T:System.Xml.XPath.XPathExpression">
      <summary>
        <para> Encapsulates a compiled XPath expression. This class is returned as a
      result of a call to <see cref="M:System.Xml.XPath.XPathNavigator.Compile(System.String)" /> and is used by the <see cref="M:System.Xml.XPath.XPathNavigator.Select(System.Xml.XPath.XPathExpression)" />, <see cref="M:System.Xml.XPath.XPathNavigator.Evaluate(System.Xml.XPath.XPathExpression)" /> and <see cref="M:System.Xml.XPath.XPathNavigator.Matches(System.Xml.XPath.XPathExpression)" /> methods.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.AddSort(System.Object,System.Collections.IComparer)">
      <summary>
        <para> Sorts the nodes
      selected by the <see langword="XPathExpression" />,
      according to the <see cref="T:System.Collections.IComparer" />
      interface.</para>
      </summary>
      <param name="expr">
        <para>An expression representing the sort key. This can be a string or an <see langword="XPathExpression" /> object. The result of this expression is converted to a string, according to the XPath specification, for comparison. In an XSLT stylesheet, if xsl:sort is used, but no select expression is specified, then string(.) is used by default.</para>
      </param>
      <param name=" comparer">A class derived from the <see langword="IComparer" /> interface to use for the data type comparison.</param>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.AddSort(System.Object,System.Xml.XPath.XmlSortOrder,System.Xml.XPath.XmlCaseOrder,System.String,System.Xml.XPath.XmlDataType)">
      <summary>
        <para> Sorts the nodes selected by the
   <see langword="XPathExpression" /> according to the supplied parameters.</para>
      </summary>
      <param name="expr">
        <para>An expression representing the sort key. This can be a string or an <see langword="XPathExpression" /> object. The result of this expression is converted to a string, according to the XPath specification, for comparison. In an XSLT stylesheet, if <see langword="xsl:sort" /> is used, but no select expression is specified, then string(.) is used by default.</para>
      </param>
      <param name=" order">A <see cref="T:System.Xml.XPath.XmlSortOrder" /> value indicating the sort order.</param>
      <param name=" caseOrder">A <see cref="T:System.Xml.XPath.XmlCaseOrder" /> value indicating how to sort upper/lower case letters. This is language dependent, providing a <paramref name="lang" /> parameter is supplied.</param>
      <param name=" lang">
        <para>The language to use for comparison. Uses the <see cref="T:System.Globalization.CultureInfo" /> class that can be passed to the <see langword="String.Compare" /> method for the language types, for example, "us-en" for US English. If an empty string is specified, the system environment is used to determine the <see langword="CultureInfo" /> .</para>
      </param>
      <param name=" dataType">
        <see cref="T:System.Xml.XPath.XmlDataType" />indicating sort order for data type.</param>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.Clone">
      <summary>
        <para> Clones the <see langword="XPathExpression" />.</para>
      </summary>
      <returns>
        <para>A new <see langword="XPathExpression" /> object.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.SetContext(System.Xml.XmlNamespaceManager)">
      <summary>
        <para> Specifies the <see cref="T:System.Xml.XmlNamespaceManager" />
to use for resolving namespaces.</para>
      </summary>
      <param name="nsManager">The <see langword="XmlNamespaceManager" /> object used for resolving namespaces.</param>
    </member>
    <member name="P:System.Xml.XPath.XPathExpression.Expression">
      <summary>
        <para> Gets a string representation of the
   <see langword="XPathExpression" />
   .</para>
      </summary>
      <summary>
        <para> When overridden in a derived class, gets a string representation of the
   <see langword="XPathExpression" />.</para>
      </summary>
    </member>
    <member name="P:System.Xml.XPath.XPathExpression.ReturnType">
      <summary>
        <para> Gets the result type
      of the <see langword="XPathExpression" /> as defined
      by the W3C XPath specification.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Xsl.XsltContext">
      <summary>
        <para>Encapsulates the current execution context of the XSLT processor allowing XPath
      to resolve functions, parameters, and namespaces within XPath expressions.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.#ctor(System.Xml.NameTable)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Xsl.XsltContext" /> class with the specified <see cref="T:System.Xml.NameTable" /> .</para>
      </summary>
      <param name="table">The <see langword="NameTable" /> to use.</param>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Xsl.XsltContext" /> 
class.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.ResolveVariable(System.String,System.String)">
      <summary>
        <para>When overridden in a derived class, resolves variable reference and returns an <see cref="T:System.Xml.Xsl.IXsltContextVariable" />
representing the variable.</para>
      </summary>
      <param name="prefix">The prefix of the variable as it appears in the XPath expression.</param>
      <param name=" name">The name of the variable.</param>
      <returns>
        <para>An <see langword="IXsltContextVariable" /> representing
 the variable at runtime.</para>
      </returns>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.ResolveFunction(System.String,System.String,System.Xml.XPath.XPathResultType[])">
      <summary>
        <para>When overridden in a derived class, resolves a function
 reference and returns an <see cref="T:System.Xml.Xsl.IXsltContextFunction" /> representing the
 function. The <see langword="IXsltContextFunction" />
 is used at execution time to get the
 return value of the function.</para>
      </summary>
      <param name="prefix">The prefix of the function as it appears in the XPath expression.</param>
      <param name=" name">The name of the function.</param>
      <param name=" ArgTypes">An array of argument types for the function being resolved. This allows you to select between methods with the same name (for example, overloaded methods).</param>
      <returns>
        <para>An <see langword="IXsltContextFunction" /> representing
 the function.</para>
      </returns>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.PreserveWhitespace(System.Xml.XPath.XPathNavigator)">
      <summary>
        <para>When overridden in a derived class, evaluates whether to preserve
      white space nodes or strip them for the given context.</para>
      </summary>
      <param name="node">The white space node that is to be preserved or stripped in the current context.</param>
      <returns>
        <para>Returns <see langword="true" /> if 
   the white space
   is to be preserved or <see langword="false" /> if the white space is to be
   stripped.</para>
      </returns>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.CompareDocument(System.String,System.String)">
      <summary>
        <para>When overridden in a derived class, compares the base URIs of two documents based upon the
      order the documents were loaded by the XSLT processor (that is the <see cref="T:System.Xml.Xsl.XslTransform" /> class).</para>
      </summary>
      <param name="baseUri">The base URI of the first document to compare.</param>
      <param name=" nextbaseUri">The base URI of the second document to compare.</param>
      <returns>
        <para>An integer value describing the relative order of the 
      two base URIs. <see langword="-1" /> if
   <paramref name="baseUri" /> occurs before <paramref name="nextbaseUri" />, <see langword="0" /> if the
      two base URIs are identical and <see langword="1" /> if <paramref name="baseUri" /> occurs
      after <paramref name="nextbaseUri" />.</para>
      </returns>
    </member>
    <member name="P:System.Xml.Xsl.XsltContext.Whitespace">
      <summary>
        <para>When overridden in a derived class, gets a value indicating whether to include white space nodes in
      the output.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XPath.Querytype.Constant">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="F:System.Xml.XPath.Querytype.Child">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="F:System.Xml.XPath.Querytype.Attribute">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="F:System.Xml.XPath.Querytype.Descendant">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="F:System.Xml.XPath.Querytype.Ancestor">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="F:System.Xml.XPath.Querytype.Sort">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="F:System.Xml.XPath.Querytype.None">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.XPath.XPathArrayIterator.#ctor(System.Collections.ArrayList)">
    </member>
    <member name="M:System.Xml.XPath.XPathArrayIterator.#ctor(System.Xml.XPath.XPathArrayIterator)">
    </member>
    <member name="M:System.Xml.XPath.XPathArrayIterator.Clone">
    </member>
    <member name="M:System.Xml.XPath.XPathArrayIterator.MoveNext">
    </member>
    <member name="M:System.Xml.XPath.XPathArrayIterator.Reset">
    </member>
    <member name="P:System.Xml.XPath.XPathArrayIterator.Current">
    </member>
    <member name="P:System.Xml.XPath.XPathArrayIterator.CurrentPosition">
    </member>
    <member name="P:System.Xml.XPath.XPathArrayIterator.Count">
    </member>
    <member name="T:System.Xml.XPath.XPathDocument">
      <summary>
        <para>Provides a fast and performant read-only cache for XML document processing using XSLT.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XPath.XPathDocument.#ctor(System.Xml.XmlReader,System.Xml.XmlSpace)">
      <summary>
        <para>Initializes a new instance of the
   <see langword="XPathDocument" /> class. </para>
      </summary>
      <param name=" reader">An <see cref="T:System.Xml.XmlReader" /> containing the data to load.</param>
      <param name="space">An <see cref="T:System.Xml.XmlSpace" /> value indicating whether to preserve white space. Setting this to XmlSpace.Default preserves only significant white space; XmlSpace.Preserve preserves all whitespace. </param>
    </member>
    <member name="M:System.Xml.XPath.XPathDocument.#ctor(System.Xml.XmlReader)">
      <summary>
        <para>Initializes a new instance of the
   <see langword="XPathDocument" /> class.</para>
      </summary>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> containing the data to load.</param>
    </member>
    <member name="M:System.Xml.XPath.XPathDocument.#ctor(System.IO.TextReader)">
      <summary>
        <para>Initializes a new instance of the
   <see langword="XPathDocument" /> class.</para>
      </summary>
      <param name="reader">A <see cref="T:System.IO.TextReader" /> containing the data to load.</param>
    </member>
    <member name="M:System.Xml.XPath.XPathDocument.#ctor(System.IO.Stream)">
      <summary>
        <para>Initializes a new instance of the
   <see langword="XPathDocument" /> class.</para>
      </summary>
      <param name="stream">The stream containing the data to load.</param>
    </member>
    <member name="M:System.Xml.XPath.XPathDocument.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the
   <see langword="XPathDocument" /> class.</para>
      </summary>
      <param name="uri">A URI that specifies a file containing the data to load.</param>
    </member>
    <member name="M:System.Xml.XPath.XPathDocument.#ctor(System.String,System.Xml.XmlSpace)">
      <summary>
        <para>Initializes a new instance of the <see langword="XPathDocument" /> class. </para>
      </summary>
      <param name="uri">A URI that specifies a file containing the data to load.</param>
      <param name=" space">An <see cref="T:System.Xml.XmlSpace" /> value indicating whether to preserve whitespace. Setting this to XmlSpace.Default preserves only significant white space; XmlSpace.Preserve preserves all white space.</param>
    </member>
    <member name="M:System.Xml.XPath.XPathDocument.CreateNavigator">
      <summary>
        <para>Creates an <see cref="T:System.Xml.XPath.XPathNavigator" /> for navigating this document.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Xml.XPath.XPathNavigator" />
object.</para>
      </returns>
    </member>
    <member name="M:System.Xml.XPath.XPathEmptyIterator.#ctor">
    </member>
    <member name="M:System.Xml.XPath.XPathEmptyIterator.Clone">
    </member>
    <member name="M:System.Xml.XPath.XPathEmptyIterator.MoveNext">
    </member>
    <member name="M:System.Xml.XPath.XPathEmptyIterator.Reset">
    </member>
    <member name="P:System.Xml.XPath.XPathEmptyIterator.Current">
    </member>
    <member name="P:System.Xml.XPath.XPathEmptyIterator.CurrentPosition">
    </member>
    <member name="P:System.Xml.XPath.XPathEmptyIterator.Count">
    </member>
    <member name="T:System.Xml.XPath.XPathException">
      <summary>
        <para> The exception that is thrown when an error occurs when processing an
      XPath expression.
      </para>
      </summary>
    </member>
    <member name="M:System.Xml.XPath.XPathException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the
   <see langword="XPathException" /> class using the information in the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" /> objects.</para>
      </summary>
      <param name="info">The <see langword="SerializationInfo" /> object containing all the properties of an <see langword="XPathException" />.</param>
      <param name=" context">The <see langword="StreamingContext" /> object.</param>
    </member>
    <member name="M:System.Xml.XPath.XPathException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Streams all the <see langword="XPathException" /> properties
   into the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> class for the given <see cref="T:System.Runtime.Serialization.StreamingContext" />.</para>
      </summary>
      <param name="info">The <see langword="SerializationInfo" /> object.</param>
      <param name=" context">The <see langword="StreamingContext" /> object.</param>
    </member>
    <member name="M:System.Xml.XPath.XPathException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the 
   <see langword="XPathException" /> class using the message and <see cref="T:System.Exception" /> object.</para>
      </summary>
      <param name="message">The description of the error condition.</param>
      <param name="innerException">The <see langword="Exception" /> which threw the <see langword="XPathException" />, if any. This value can be <see langword="null" />.</param>
    </member>
    <member name="P:System.Xml.XPath.XPathException.Message">
      <summary>
   Gets the error message describing the
   exception.
</summary>
    </member>
    <member name="T:System.Xml.XPath.XmlSortOrder">
      <summary>
        <para>Specifies the sort order.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XPath.XmlSortOrder.Ascending">
      <summary>
        <para>Nodes are sorted in ascending order. For example, if the 
 numbers 1,2,3,4 were being sorted in an ascending order, they would appear
 as 1,2,3,4.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XPath.XmlSortOrder.Descending">
      <summary>
        <para>Nodes are sorted in descending order. For example, 
 if the numbers 1,2,3,4 were being sorted in an descending order, they would
 appear as, 4,3,2,1.</para>
      </summary>
    </member>
    <member name="T:System.Xml.XPath.XmlCaseOrder">
      <summary>
        <para> Specifies the sort
      order for upper and lower case letters.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XPath.XmlCaseOrder.None">
      <summary>
        <para> Ignore the case.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XPath.XmlCaseOrder.UpperFirst">
      <summary>
    Upper case letters are sorted before lower
    case letters.
 </summary>
    </member>
    <member name="F:System.Xml.XPath.XmlCaseOrder.LowerFirst">
      <summary>
    Lower case letters are sorted before upper
    case letters.
 </summary>
    </member>
    <member name="T:System.Xml.XPath.XmlDataType">
      <summary>
        <para>Specifies the data type used to determine sort order.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XPath.XmlDataType.Text">
      <summary>
    Values are sorted alphabetically.
 </summary>
    </member>
    <member name="F:System.Xml.XPath.XmlDataType.Number">
      <summary>
    Values are sorted numerically.
 </summary>
    </member>
    <member name="T:System.Xml.XPath.XPathResultType">
      <summary>
        <para> Specifies the return type of the XPath expression.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.Number">
      <summary>
        <para>A numeric value.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.String">
      <summary>
        <para>A string value.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.Boolean">
      <summary>
        <para>Boolean value <see langword="true" /> or <see langword="false" />.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.NodeSet">
      <summary>
   A node collection.
</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.Navigator">
      <summary>
        <para>A tree fragment.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.Any">
      <summary>
   Any of the XPath node types.
</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.Error">
      <summary>
   The expression does not evaluate to the correct XPath
   type.
</summary>
    </member>
    <member name="T:System.Xml.XPath.XPathNamespaceScope">
      <summary>
        <para>Defines the namespace scope. The enumeration can be
      passed to the <see cref="M:System.Xml.XPath.XPathNavigator.MoveToFirstNamespace" qualify="true" />
      and <see cref="M:System.Xml.XPath.XPathNavigator.MoveToNextNamespace" qualify="true" /> methods to specify the type of namespace node
      to move to.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNamespaceScope.All">
      <summary>
        <para> Returns all namespaces defined in the scope of the 
      current node. This includes the xmlns:xml namespace which is always
      declared implicitly. The order of the namespaces returned is not defined.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNamespaceScope.ExcludeXml">
      <summary>
        <para> Returns all namespaces defined in the 
      scope of the current node, excluding the xmlns:xml namespace, which
      is always declared implicitly. The order of the namespaces returned is not defined.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNamespaceScope.Local">
      <summary>
        <para> Returns all namespaces that are defined locally at 
      the current node.</para>
      </summary>
    </member>
    <member name="T:System.Xml.XPath.XPathNodeType">
      <summary>
        <para>Specifies the XPath node types that can be returned from the <see cref="T:System.Xml.XPath.XPathNavigator" />.</para>
        <para>For more information on XPath node types, see the Data Model section of the
   W3C XML Path Language (XPath) Version 1.0 Recommendation located at
   http://www.w3.org/TR/xpath#data-model.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Root">
      <summary>
        <para>The root of the node tree.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Element">
      <summary>
        <para> An element in the node tree.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Attribute">
      <summary>
   An attribute in the node tree.
</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Namespace">
      <summary>
        <para> 
      A namespace node.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Text">
      <summary>
        <para> The text content of an element.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.SignificantWhitespace">
      <summary>
        <para>A node with white space characters and xml:space set to preserve.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Whitespace">
      <summary>
        <para>A node with only white space characters and no significant white
      space.</para>
      </summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.ProcessingInstruction">
      <summary>
        <para>A processing instruction. <see langword="Important:" /> This does not include XML declarations, which are
   not visible to the <see cref="T:System.Xml.XPath.XPathNavigator" /> .</para>
      </summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Comment">
      <summary>
   A comment.
</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.All">
      <summary>
        <para>All node types.</para>
      </summary>
    </member>
    <member name="M:System.Xml.XPath.XPathSingletonIterator.#ctor(System.Xml.XPath.XPathNavigator)">
    </member>
    <member name="M:System.Xml.XPath.XPathSingletonIterator.MakeNewCopy">
    </member>
    <member name="M:System.Xml.XPath.XPathSingletonIterator.Clone">
    </member>
    <member name="M:System.Xml.XPath.XPathSingletonIterator.MoveNext">
    </member>
    <member name="M:System.Xml.XPath.XPathSingletonIterator.Reset">
    </member>
    <member name="P:System.Xml.XPath.XPathSingletonIterator.Current">
    </member>
    <member name="P:System.Xml.XPath.XPathSingletonIterator.CurrentPosition">
    </member>
    <member name="P:System.Xml.XPath.XPathSingletonIterator.Count">
    </member>
    <member name="M:System.Xml.Xsl.Debugger.IStackFrame.GetVariablesCount">
    </member>
    <member name="M:System.Xml.Xsl.Debugger.IStackFrame.GetVariable(System.Int32)">
    </member>
    <member name="M:System.Xml.Xsl.Debugger.IStackFrame.GetVariableValue(System.Int32)">
    </member>
    <member name="P:System.Xml.Xsl.Debugger.IStackFrame.Instruction">
    </member>
    <member name="P:System.Xml.Xsl.Debugger.IStackFrame.NodeSet">
    </member>
    <member name="T:System.Xml.Xsl.IXsltContextVariable">
      <summary>
        <para>Provides an interface to a given variable that is defined in the
 stylesheet during runtime execution.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Xsl.IXsltContextVariable.Evaluate(System.Xml.Xsl.XsltContext)">
      <summary>
        <para> Evaluates the variable at runtime
      and returns an object that represents the value of the variable.</para>
      </summary>
      <param name="xsltContext">An <see cref="T:System.Xml.Xsl.XsltContext" /> representing the execution context of the variable.</param>
      <returns>
        <para>An <see cref="T:System.Object" /> representing the value of the
   variable. Possible return types include number, string, Boolean, document
   fragment or node set.</para>
      </returns>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextVariable.IsLocal">
      <summary>
        <para> Gets a value indicating whether the variable is
 local.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextVariable.IsParam">
      <summary>
        <para>Gets a value indicating whether the variable is an Extensible Stylesheet Language Transformation (XSLT) parameter. This can be a parameter to
      a stylesheet or a template.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextVariable.VariableType">
      <summary>
        <para>Gets the <see cref="T:System.Xml.XPath.XPathResultType" /> representing the XPath type 
   of the variable.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Xsl.Debugger.IVariable.Instruction">
    </member>
    <member name="P:System.Xml.Xsl.Debugger.IVariable.IsLocal">
    </member>
    <member name="P:System.Xml.Xsl.Debugger.IVariable.IsParam">
    </member>
    <member name="M:System.Xml.Xsl.InputScopeManager.ResolveXmlNamespace(System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Xsl.Debugger.IXsltProcessor.GetStackFrame(System.Int32)">
    </member>
    <member name="P:System.Xml.Xsl.Debugger.IXsltProcessor.StackDepth">
    </member>
    <member name="T:System.Xml.Xsl.XsltArgumentList">
      <summary>
        <para> Contains a variable number of arguments
 which are either XSLT parameters or extension objects.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.#ctor">
      <summary>
   Implements a new instance of the
<see langword="XsltArgumentList" />.
</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.GetParam(System.String,System.String)">
      <summary>
        <para>Gets the parameter associated with the namespace qualified
      name.</para>
      </summary>
      <param name="name">The name of the parameter. <see langword="XsltArgumentList" /> does not check to ensure the name passed is a valid local name; however, the name cannot be <see langword="null" /> .</param>
      <param name=" namespaceUri">The namespace URI associated with the parameter.</param>
      <returns>
        <para>The parameter object or
   <see langword="null" /> if one was not found.</para>
      </returns>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.GetExtensionObject(System.String)">
      <summary>
        <para>Gets the object associated with the given namespace.</para>
      </summary>
      <param name="namespaceUri">The namespace URI of the object. </param>
      <returns>
        <para>The namespace URI object or <see langword="null" /> if one
   was not found.</para>
      </returns>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.AddParam(System.String,System.String,System.Object)">
      <summary>
        <para>Adds a parameter to the <see langword="XsltArgumentList" />
and associates it with the namespace qualified name.</para>
      </summary>
      <param name="name">The name to associate with the parameter.</param>
      <param name=" namespaceUri">The namespace URI to associate with the parameter. To use the default namespace, specify an empty string.</param>
      <param name=" parameter">The parameter value or object to add to the list.</param>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.AddExtensionObject(System.String,System.Object)">
      <summary>
        <para>Adds a new object to the
   <see langword="XsltArgumentList" /> and
      associates it with the namespace URI.</para>
      </summary>
      <param name="namespaceUri">The namespace URI to associate with the object. To use the default namespace, specify an empty string.</param>
      <param name=" extension">The object to add to the list.</param>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.RemoveParam(System.String,System.String)">
      <summary>
        <para>Removes the parameter from the
   <see langword="XsltArgumentList" />.</para>
      </summary>
      <param name="name">The name of the parameter to remove. <see langword="XsltArgumentList" /> does not check to ensure the name passed is a valid local name; however, the name cannot be <see langword="null" /> .</param>
      <param name=" namespaceUri">The namespace URI of the parameter to remove.</param>
      <returns>
        <para>The parameter object or <see langword="null" /> if one was
   not found.</para>
      </returns>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.RemoveExtensionObject(System.String)">
      <summary>
        <para>Removes the object with the namespace URI from the
   <see langword="XsltArgumentList" />.</para>
      </summary>
      <param name="namespaceUri">The namespace URI associated with the object to remove.</param>
      <returns>
        <para> The object with the namespace URI or
   <see langword="null" /> if one was not found.</para>
      </returns>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.Clear">
      <summary>
        <para>Removes all parameters and extension objects from the
   <see langword="XsltArgumentList" />.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltCompileContext.LookupNamespace(System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltCompileContext.ResolveVariable(System.String,System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltCompileContext.PreserveWhitespace(System.Xml.XPath.XPathNavigator)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Xsl.XsltCompileContext.DefaultNamespace">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Xsl.XsltCompileContext.Whitespace">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="T:System.Xml.Xsl.IXsltContextFunction">
      <summary>
        <para>Provides an interface to a given function defined in the 
      XSLT stylesheet during runtime execution. </para>
      </summary>
    </member>
    <member name="M:System.Xml.Xsl.IXsltContextFunction.Invoke(System.Xml.Xsl.XsltContext,System.Object[],System.Xml.XPath.XPathNavigator)">
      <summary>
        <para>Provides the method to invoke the function with the
      given arguments in the given context.</para>
      </summary>
      <param name="xsltContext"> The XSLT context for the function call.</param>
      <param name=" args">The arguments of the function call. Each argument is an element in the array.</param>
      <param name=" docContext">The context node for the function call.</param>
      <returns>
        <para>An <see cref="T:System.Object" /> representing the return value of the
   function.</para>
      </returns>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextFunction.Minargs">
      <summary>
        <para>Gets the minimum number of arguments for the function.
      This enables the user to differentiate between overloaded functions.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextFunction.Maxargs">
      <summary>
        <para>Gets the maximum number of arguments for the function. This enables the
      user to differentiate between overloaded functions.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextFunction.ReturnType">
      <summary>
        <para>Gets the <see cref="T:System.Xml.XPath.XPathResultType" /> representing the XPath type
   returned by the function.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextFunction.ArgTypes">
      <summary>
        <para>Gets the supplied XPath types for the function's argument
      list. This information can be used to discover the signature of the function
      which allows you to differentiate between overloaded functions.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Xsl.Debugger.IXsltDebugger.OnInstructionCompile(System.Xml.XPath.XPathNavigator)">
    </member>
    <member name="M:System.Xml.Xsl.Debugger.IXsltDebugger.OnInstructionExecute(System.Xml.Xsl.Debugger.IXsltProcessor)">
    </member>
    <member name="T:System.Xml.Xsl.XsltException">
      <summary>
        <para> The exception 
      that is thrown when an error occurs while processing an Extensible Stylesheet
      Language (XSL) transform.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
   Initializes a new instance of the
<see langword="XsltException" /> class using the information in the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" /> objects.
</summary>
      <param name="info">The <see langword="SerializationInfo" /> object containing all the properties of an <see langword="XsltException" />.</param>
      <param name=" context">The <see langword="StreamingContext" /> object.</param>
    </member>
    <member name="M:System.Xml.Xsl.XsltException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Streams all the <see langword="XsltException" /> properties
   into the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> class for the given <see cref="T:System.Runtime.Serialization.StreamingContext" />.</para>
      </summary>
      <param name="info">The <see langword="SerializationInfo" /> object.</param>
      <param name=" context">The <see langword="StreamingContext" /> object.</param>
    </member>
    <member name="M:System.Xml.Xsl.XsltException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see langword="XsltException" /> class.</para>
      </summary>
      <param name="message">The description of the error condition.</param>
      <param name="innerException">The <see cref="T:System.Exception" /> which threw the <see langword="XsltException" />, if any. This value can be <see langword="null" />.</param>
    </member>
    <member name="P:System.Xml.Xsl.XsltException.SourceUri">
      <summary>
   Gets the location path of the stylesheet.
</summary>
    </member>
    <member name="P:System.Xml.Xsl.XsltException.LineNumber">
      <summary>
        <para> Gets the line number indicating where
      the error occurred in the stylesheet.</para>
        <note type="note">
      This property is used by
      the <see cref="T:System.Xml.Xsl.XsltCompileException" /> class.
   </note>
      </summary>
    </member>
    <member name="P:System.Xml.Xsl.XsltException.LinePosition">
      <summary>
        <para> Gets the line position indicating
      where the error occurred in the stylesheet.</para>
        <note type="note">
      This property is used by
      the <see cref="T:System.Xml.Xsl.XsltCompileException" /> class.
   </note>
      </summary>
    </member>
    <member name="P:System.Xml.Xsl.XsltException.Message">
      <summary>
   Gets the formatted error message describing
   the current exception.
</summary>
    </member>
    <member name="T:System.Xml.Xsl.XsltCompileException">
      <summary>
        <para>The exception that is thrown by the <see cref="M:System.Xml.Xsl.XslTransform.Load(System.String)" /> method when an error is found in 
   the Extensible Stylesheet Transformation (XSLT) stylesheet.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltCompileException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see langword="XsltCompileException" /> class 
 using the information in the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" /> objects.</para>
      </summary>
      <param name="info">The <see langword="SerializationInfo" /> object containing all the properties of an <see langword="XsltCompileException" />. </param>
      <param name="context">The <see langword="StreamingContext" /> object containing the context information.</param>
    </member>
    <member name="M:System.Xml.Xsl.XsltCompileException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Streams all the <see langword="XsltCompileException" /> properties into the 
<see cref="T:System.Runtime.Serialization.SerializationInfo" /> class for the given <see cref="T:System.Runtime.Serialization.StreamingContext" />.</para>
      </summary>
      <param name="info">The <see langword="SerializationInfo" /> object.</param>
      <param name="context">The <see langword="StreamingContext" /> object.</param>
    </member>
    <member name="M:System.Xml.Xsl.XsltCompileException.#ctor(System.Exception,System.String,System.Int32,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see langword="XsltCompileException" />
class.</para>
      </summary>
      <param name="inner">The <see cref="T:System.Exception" /> that threw the <see langword="XsltCompileException" />.</param>
      <param name=" sourceUri">The location path of the stylesheet.</param>
      <param name=" lineNumber">The line number indicating where the error occurred in the stylesheet.</param>
      <param name=" linePosition">The line position indicating where the error occurred in the stylesheet.</param>
    </member>
    <member name="P:System.Xml.Xsl.XsltCompileException.Message">
      <summary>
        <para>Gets the formatted error message describing the location
      of the error. To get the actual error, you need to use the message
      on the inner exception.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Xsl.XslTransform">
      <summary>
        <para>Transforms XML data using an XSLT stylesheet.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.#ctor">
      <summary>
        <para>Initializes a new instance of the 
   <see langword="XslTransform" /> 
   class.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList)">
      <summary>
        <para>Transforms the XML data in the <see cref="T:System.Xml.XPath.IXPathNavigable" />
using the specified <paramref name="args" />
and outputs the result to an <see cref="T:System.Xml.XmlReader" />
.</para>
      </summary>
      <param name="input">An object implementing the <see langword="IXPathNavigable" /> interface. In the .NET Framework this can be either an <see cref="T:System.Xml.XmlNode" /> (typically an <see cref="T:System.Xml.XmlDocument" />), or an <see cref="T:System.Xml.XPath.XPathDocument" /> containing the data to be transformed.</param>
      <param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transform.</param>
      <returns>
        <para>An <see langword="XmlReader" /> containing the results of the transform.</para>
      </returns>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)">
      <summary>
        <para>Transforms the XML data in the <see cref="T:System.Xml.XPath.IXPathNavigable" /> using the specified <paramref name="args" />
and outputs the result to a <see cref="T:System.IO.TextWriter" />
.</para>
      </summary>
      <param name="input">An object implementing the <see langword="IXPathNavigable" /> interface. In the .NET Framework this can be either an <see cref="T:System.Xml.XmlNode" /> (typically an <see cref="T:System.Xml.XmlDocument" />), or an <see cref="T:System.Xml.XPath.XPathDocument" /> containing the data to be transformed.</param>
      <param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transform.</param>
      <param name="output">The <see langword="TextWriter" /> to which you want to output.</param>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)">
      <summary>
        <para>Transforms the XML data in the <see cref="T:System.Xml.XPath.IXPathNavigable" /> using the specified <paramref name="args" />
and outputs the result to a <see cref="T:System.IO.Stream" />
.</para>
      </summary>
      <param name="input">An object implementing the <see langword="IXPathNavigable" /> interface. In the .NET Framework this can be either an <see cref="T:System.Xml.XmlNode" /> (typically an <see cref="T:System.Xml.XmlDocument" /> ), or an <see cref="T:System.Xml.XPath.XPathDocument" /> containing the data to be transformed.</param>
      <param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transform.</param>
      <param name="output">The stream to which you want to output.</param>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)">
      <summary>
        <para>Transforms the XML data in the <see cref="T:System.Xml.XPath.IXPathNavigable" /> using the specified <paramref name="args" />
and outputs the result to an <see cref="T:System.Xml.XmlWriter" />
.</para>
      </summary>
      <param name="input">An object implementing the <see langword="IXPathNavigable" /> interface. In the .NET Framework this can be either an <see cref="T:System.Xml.XmlNode" /> (typically an <see cref="T:System.Xml.XmlDocument" />), or an <see cref="T:System.Xml.XPath.XPathDocument" /> containing the data to be transformed.</param>
      <param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transform.</param>
      <param name="output">The <see langword="XmlWriter" /> to which you want to output.</param>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.String)">
      <summary>
        <para>Loads the XSLT stylesheet specified by a URL.</para>
      </summary>
      <param name="url">The URL that specifies the XSLT stylesheet to load.</param>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.String,System.Xml.XmlResolver)">
      <summary>
        <para>Loads the XSLT stylesheet specified by a URL.</para>
      </summary>
      <param name="url">The URL that specifies the XSLT stylesheet to load.</param>
      <param name=" resolver">The <see cref="T:System.Xml.XmlResolver" /> to use to load any stylesheets referenced in <see langword="xsl:import" /> and <see langword="xsl:include" /> elements. If this is <see langword="null" /> , external resources are not resolved.</param>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader)">
      <summary>
        <para> Loads the XSLT stylesheet contained in the
   <see cref="T:System.Xml.XmlReader" />
   .</para>
      </summary>
      <param name="stylesheet">An <see langword="XmlReader" /> object that contains the XSLT stylesheet.</param>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader,System.Xml.XmlResolver)">
      <summary>
        <para> Loads the XSLT stylesheet contained in the
   <see cref="T:System.Xml.XmlReader" />
   .</para>
      </summary>
      <param name="stylesheet">An <see langword="XmlReader" /> object that contains the XSLT stylesheet.</param>
      <param name=" resolver">The <see cref="T:System.Xml.XmlResolver" /> used to load any stylesheets referenced in <see langword="xsl:import" /> and <see langword="xsl:include" /> elements. If this is <see langword="null" /> , external resources are not resolved.</param>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.XPathNavigator)">
      <summary>
        <para> Loads the XSLT stylesheet contained in the
   <see cref="T:System.Xml.XPath.XPathNavigator" /> .</para>
      </summary>
      <param name="stylesheet">An <see langword="XPathNavigator" /> object that contains the XSLT stylesheet.</param>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.XPathNavigator,System.Xml.XmlResolver)">
      <summary>
        <para> Loads the XSLT stylesheet contained in the
   <see cref="T:System.Xml.XPath.XPathNavigator" /> .</para>
      </summary>
      <param name="stylesheet">An <see langword="XPathNavigator" /> object that contains the XSLT stylesheet.</param>
      <param name=" resolver">The <see cref="T:System.Xml.XmlResolver" /> used to load any stylesheets referenced in <see langword="xsl:import" /> and <see langword="xsl:include" /> elements. If this is <see langword="null" /> , external resources are not resolved.</param>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.IXPathNavigable)">
      <summary>
        <para>Loads the XSLT stylesheet contained in the <see cref="T:System.Xml.XPath.IXPathNavigable" />.</para>
      </summary>
      <param name="stylesheet">An object implementing the <see langword="IXPathNavigable" /> interface. In the .NET Framework this can be either an <see cref="T:System.Xml.XmlNode" /> (typically an <see cref="T:System.Xml.XmlDocument" />), or an <see cref="T:System.Xml.XPath.XPathDocument" /> containing the XSLT stylesheet.</param>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.XmlResolver)">
      <summary>
        <para>Loads the XSLT stylesheet contained in the <see cref="T:System.Xml.XPath.IXPathNavigable" />.</para>
      </summary>
      <param name="stylesheet">An object implementing the <see langword="IXPathNavigable" /> interface. In the .NET Framework this can be either an <see cref="T:System.Xml.XmlNode" /> (typically an <see cref="T:System.Xml.XmlDocument" />), or an <see cref="T:System.Xml.XPath.XPathDocument" /> containing the XSLT stylesheet.</param>
      <param name=" resolver">The <see cref="T:System.Xml.XmlResolver" /> used to load any stylesheets referenced in <see langword="xsl:import" /> and <see langword="xsl:include" /> elements. If this is <see langword="null" /> , external resources are not resolved.</param>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList)">
      <summary>
        <para>Transforms the XML data in the <see cref="T:System.Xml.XPath.XPathNavigator" />
using the specified <paramref name="args" />
and outputs the result to an <see cref="T:System.Xml.XmlReader" />
.</para>
      </summary>
      <param name="input">An <see langword="XPathNavigator" /> containing the data to be transformed.</param>
      <param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transform.</param>
      <returns>
        <para>An <see langword="XmlReader" /> containing the results of the transform.</para>
      </returns>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)">
      <summary>
        <para>Transforms the XML data in the <see cref="T:System.Xml.XPath.XPathNavigator" /> using
   the specified args and outputs the result to an <see cref="T:System.Xml.XmlWriter" />
   .</para>
      </summary>
      <param name="input">An <see langword="XPathNavigator" /> containing the data to be transformed.</param>
      <param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transform.</param>
      <param name="output">The <see langword="XmlWriter" /> to which you want to output.</param>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)">
      <summary>
        <para>Transforms the XML data in the <see cref="T:System.Xml.XPath.XPathNavigator" /> using the specified <paramref name="args" />
and outputs the result to a <see cref="T:System.IO.Stream" />
.</para>
      </summary>
      <param name="input">An <see langword="XPathNavigator" /> containing the data to be transformed.</param>
      <param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transform.</param>
      <param name="output">The stream to which you want to output.</param>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)">
      <summary>
        <para>Transforms the XML data in the <see cref="T:System.Xml.XPath.XPathNavigator" /> using the specified <paramref name="args" />
and outputs the result to a <see cref="T:System.IO.TextWriter" />
.</para>
      </summary>
      <param name="input">An <see langword="XPathNavigator" /> containing the data to be transformed.</param>
      <param name="args">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transform.</param>
      <param name="output">The <see langword="TextWriter" /> to which you want to output.</param>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.String,System.String)">
      <summary>
        <para>Transforms the XML data in the input file and outputs
 the result to an output file.</para>
      </summary>
      <param name="inputfile">The URL of the source document to be transformed.</param>
      <param name=" outputfile">The URL of the output file.</param>
    </member>
    <member name="P:System.Xml.Xsl.XslTransform.XmlResolver">
      <summary>
        <para> Sets the <see cref="T:System.Xml.XmlResolver" /> used to resolve external resources when the <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList)" /> method
   is called.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaDatatype">
      <summary>
        <para> Represents the abstract class for mapping XML Schema definition language
      (XSD) and .NET Framework types.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaDatatype.ParseValue(System.String,System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager)">
      <summary>
        <para>Parses values from the 
   <see langword="XmlNameTable" /> .</para>
      </summary>
      <param name="s">string</param>
      <param name=" nameTable">
        <see langword="XmlNameTable" />
      </param>
      <param name=" nsmgr">
        <see langword="XmlNamespaceManager" />
      </param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDatatype.ValueType">
      <summary>
        <para> Gets the .NET Framework type for
      the specified XML Schema definition language (XSD) type.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDatatype.TokenizedType">
      <summary>
        <para>Gets the type for the string as specified in the World Wide Web Consortium (W3C)
      XML 1.0 specification.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.ValidationEventArgs">
      <summary>
        <para>Returns detailed information related to the
   <see langword="ValidationEventHandler" />
   .</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.ValidationEventArgs.Severity">
      <summary>
        <para>Gets the severity of the validation event.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.ValidationEventArgs.Exception">
      <summary>
   Gets the <see cref="T:System.Xml.Schema.XmlSchemaException" /> associated with the
   validation event.
</summary>
    </member>
    <member name="P:System.Xml.Schema.ValidationEventArgs.Message">
      <summary>
        <para>Gets the text description corresponding to the
      validation event.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.ValidationEventHandler">
      <summary>
        <para> Represents the method that handles the <see cref="T:System.Xml.Schema.ValidationEventArgs" />.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchema">
      <summary>
        <para>Contains the definition of a schema. All XML Schema definition language (XSD) elements are children of the
   <see langword="schema" /> element. Represents the World Wide Web Consortium (W3C)
   <see langword="schema" />
   element.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaObject">
      <summary>
        <para>Creates an empty schema.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObject.LineNumber">
      <summary>
        <para>Gets or sets the line number in the file to which the <see langword="schema" />
element refers.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObject.LinePosition">
      <summary>
        <para>Gets or sets the line position in the file to which the
   <see langword="schema" /> element refers.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObject.SourceUri">
      <summary>
        <para>Gets or sets the source location for the file
      that loaded the schema.</para>
      </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchema.Namespace">
      <summary>
        <para>Provides the namespace for validation.</para>
      </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchema.InstanceNamespace">
      <summary>
        <para>Provides the instance namespace.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.#ctor">
      <summary>
        <para>Constructs a new, empty schema.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Read(System.IO.TextReader,System.Xml.Schema.ValidationEventHandler)">
      <summary>
        <para>Reads an XSD Schema from the supplied text reader.</para>
      </summary>
      <param name="reader">The supplied TextReader.</param>
      <param name=" validationEventHandler">The validation event handler that receives information about the XML Schema syntax errors.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Read(System.IO.Stream,System.Xml.Schema.ValidationEventHandler)">
      <summary>
        <para>Reads an XML Schema fefinition language (XSD) schema
      from the supplied stream.</para>
      </summary>
      <param name="stream">The supplied data stream.</param>
      <param name=" validationEventHandler">The validation event handler that receives information about XML Schema syntax errors.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Read(System.Xml.XmlReader,System.Xml.Schema.ValidationEventHandler)">
      <summary>
        <para>Reads an XML Schema definition language (XSD) schema
      from the supplied reader.</para>
      </summary>
      <param name="reader">The supplied XmlReader.</param>
      <param name=" validationEventHandler">The validation event handler that receives information about the XML Schema syntax errors.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.IO.Stream)">
      <summary>
        <para>Writes the XML Schema to the supplied data stream.</para>
      </summary>
      <param name="stream">The supplied datat stream.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.IO.Stream,System.Xml.XmlNamespaceManager)">
      <summary>
        <para> Writes the XML Schema definition language (XSD) schema
      to the supplied <see langword="stream" /> .</para>
      </summary>
      <param name="stream">The supplied data stream.</param>
      <param name=" namespaceManager">The XmlNamespaceManager.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.IO.TextWriter)">
      <summary>
        <para>Writes the XML Schema definition language (XSD) schema
      to the supplied <see langword="TextWriter" /> .</para>
      </summary>
      <param name="writer">The supplied TextWriter.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.IO.TextWriter,System.Xml.XmlNamespaceManager)">
      <summary>
        <para>Writes the XML Schema definition language (XSD) schema
      to the supplied <see langword="TextWriter" /> .</para>
      </summary>
      <param name="writer">The supplied TextWriter.</param>
      <param name=" namespaceManager">The XmlNamespaceManager.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.Xml.XmlWriter)">
      <summary>
        <para>Writes the XML Schema Definition language (XSD) schema
      to the supplied <see langword="XmlWriter" /> .</para>
      </summary>
      <param name="writer">The supplied XmlWriter.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.Xml.XmlWriter,System.Xml.XmlNamespaceManager)">
      <summary>
        <para> Writes the XML Schema Definition language (XSD) schema
      to the supplied <see langword="XmlWriter" /> .</para>
      </summary>
      <param name="writer">The supplied XmlWriter.</param>
      <param name=" namespaceManager">The XmlNamespaceManager.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Compile(System.Xml.Schema.ValidationEventHandler)">
      <summary>
        <para> Compiles the XML Schema definition language (XSD)
      Schema Object Model (SOM) into schema information for validation. Used to check
      the syntactic and semantic structure of the programmatically-built SOM. Semantic
      validation checking is performed during compilation.</para>
      </summary>
      <param name="validationEventHandler">The validation event handler that receives information about XML schema validation errors.</param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.AttributeFormDefault">
      <summary>
        <para>Gets or sets the form for attributes declared in the target
      namespace of the schema.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.BlockDefault">
      <summary>
        <para> Gets or sets the <see langword="BlockDefault" /> attribute on element and complex type 
   elements in the <see langword="targetNamespace" />
   of the schema. The <see langword="block" /> attribute prevents a complex
   type (or element) that has the specified
   type of derivation from being used in place of the inherited complex type (or
   element). The type of derivation.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.FinalDefault">
      <summary>
        <para>Gets or sets the default value of
      the <see langword="final" />
      attribute on element and complex type elements in the target namespace
      of this schema. The <see langword="final" /> attribute prevents the specified
      type of derivation of an element
      or complex type. The type of derivation.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.ElementFormDefault">
      <summary>
        <para>Gets or sets the form for elements declared in the target
      namespace of the schema.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.TargetNamespace">
      <summary>
        <para>Gets or sets the property for the schema target namespace. The URI reference of
      the namespace of this schema.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Version">
      <summary>
        <para>Gets or sets the version of the schema.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Includes">
      <summary>
        <para> Gets the collection of
      included and imported schemas.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Items">
      <summary>
        <para> Gets the <see langword="Items" />
collection that is used to
add new element types at the <see langword="schema" />
element level.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.IsCompiled">
      <summary>
        <para> Gets information that indicates if the schema has been compiled.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Attributes">
      <summary>
        <para>Gets the <see langword="XmlSchemaObjectTable" />, for all attributes in the schema,
   which holds the post-compilation value of the <see langword="Attribute" /> property.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.AttributeGroups">
      <summary>
        <para>Gets the <see langword="XmlSchemaObjectTable" /> for all attribute groups in the
   schema, which holds the post-compilation value of
   the <see langword="AttributeGroups" /> property.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.SchemaTypes">
      <summary>
        <para>Gets the <see langword="XmlSchemaObjectTable" />for all schema types in the schema,
   which holds the post-compilation value of the <see langword="SchemaTypes" /> property.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Elements">
      <summary>
        <para>Gets the <see langword="XmlSchemaObjectTable" /> for all elements in the schema,
   which holds the post-compilation value of the <see langword="Elements" /> property.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Id">
      <summary>
        <para>Gets or sets the string id.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.UnhandledAttributes">
      <summary>
        <para>Gets and sets the qualified attributes which do not belong to the schema 
      target namespace.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Groups">
      <summary>
        <para>Gets the <see langword="XmlSchemaObjectTable" /> for all groups in the schema,
   which holds the post-compilation value of the <see langword="Groups" /> property.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Notations">
      <summary>
        <para>Gets the <see langword="XmlSchemaObjectTable" /> for all notations in the schema.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAll">
      <summary>
        <para> Permits the elements in the group to appear (or not appear) in any order
      in the containing element. Represents the World Wide Web Consortium (W3C)<see langword=" all" /> element
      (compositor).</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaGroupBase">
      <summary>
        <para> An abstract class for <see langword="XmlSchemaChoice" />, <see langword="XmlSchemaAll" />, or <see langword="XmlSchemaSequence" />
.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaParticle">
      <summary>
        <para>Base class for all particle types.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAnnotated">
      <summary>
        <para> The base class for any element that can contain 
      annotation elements.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotated.Id">
      <summary>
        <para>Gets or sets the string id.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotated.Annotation">
      <summary>
        <para> Gets or sets the <see langword="annotation" /> property.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotated.UnhandledAttributes">
      <summary>
        <para>Gets or sets the qualified attributes that do not belong to the schema
      target namespace.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaParticle.MinOccursString">
      <summary>
        <para> Gets or sets the number as a string value. The minimum number of times the particle
      can occur. </para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaParticle.MaxOccursString">
      <summary>
        <para> Gets or sets the number as a string
      value. Maximum number of times the particle can occur. </para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaParticle.MinOccurs">
      <summary>
        <para>Gets or sets the minimum number of times the particle can occur.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaParticle.MaxOccurs">
      <summary>
        <para>Gets or sets the maximum number of times the particle can occur.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaGroupBase.Items">
      <summary>
        <para>This collection is used to add new elements to the 
      compositor.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAll.Items">
      <summary>
        <para>Gets the collection of <see langword="XmlSchemaElement" /> elements contained within
   the <see langword="all" /> compositor.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAnnotation">
      <summary>
        <para>Defines an annotation. Represents the World Wide Web Consortium (W3C)
   <see langword="annotation" /> element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotation.Id">
      <summary>
        <para>Gets or sets the string id.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotation.Items">
      <summary>
        <para>Gets the <see langword="Items" /> 
collection that is used to store the <see langword="appinfo" /> and
<see langword="documentation" /> child 
elements.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotation.UnhandledAttributes">
      <summary>
        <para>Gets and sets the qualified attributes that do not belong to the schema target
      namespace.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAny">
      <summary>
        <para>Enables any element from the specified namespace or namespaces to
      appear in the containing <see langword="complexType" />element. Represents the World Wide Web Consortium (W3C)
   <see langword="any" /> element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAny.Namespace">
      <summary>
        <para>Gets or sets the namespaces containing the elements that can be used.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAny.ProcessContents">
      <summary>
        <para>Gets or sets information about how an application or XML processor should
      handle the validation of XML documents for the elements specified by the
   <see langword="any" /> element.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAnyAttribute">
      <summary>
        <para>Enables any attribute from the specified namespace or namespaces to
      appear in the containing <see langword="complexType" />
      element. Represents the World
      Wide Web Consortium
      (W3C) <see langword="anyAttribute" /> element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnyAttribute.Namespace">
      <summary>
        <para>Gets or sets the namespaces containing the attributes that can be used.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnyAttribute.ProcessContents">
      <summary>
        <para>Gets or sets information about how an application or XML processor should
      handle the validation of XML documents for the attributes specified by the
   <see langword="anyAttribute" /> element.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAppInfo">
      <summary>
        <para> Defines application specific information within an annotation. Represents the World
      Wide Web Consortium (W3C) <see langword="appinfo" /> element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAppInfo.Source">
      <summary>
        <para>Gets or sets the source of the application information.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAppInfo.Markup">
      <summary>
        <para>Gets or sets an array of <see langword="XmlNode" /> that represents the AppInfo child nodes. </para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAttribute">
      <summary>
        <para>Class for attribute types. Represents the World Wide Web Consortium (W3C) <see langword="attribute" /> element. </para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.DefaultValue">
      <summary>
        <para>Gets or sets the default value for the attribute.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.FixedValue">
      <summary>
        <para>Gets or sets the fixed value for the attribute. </para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.Form">
      <summary>
        <para>Gets or sets the form for the attribute.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.Name">
      <summary>
        <para> Gets or sets the name of the attribute.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.RefName">
      <summary>
        <para> Gets or sets the name of an attribute declared in this schema (or another schema indicated by the specified namespace).</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.SchemaTypeName">
      <summary>
        <para>Gets or sets the name of the simple type defined in this schema (or
      another schema indicated by the specified namespace). </para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.SchemaType">
      <summary>
        <para> 
      Gets or sets the attribute type to a simple type.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.Use">
      <summary>
        <para>Gets or sets information about how the attribute is used.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.QualifiedName">
      <summary>
        <para> Gets the qualified name for the attribute which holds the 
      post-compilation value of the <see langword="QualifiedName" /> property.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.AttributeType">
      <summary>
        <para>Gets the common runtime library (CLR) object based on
      the <see cref="P:System.Xml.Schema.XmlSchemaAttribute.SchemaType" /> or <see cref="P:System.Xml.Schema.XmlSchemaAttribute.SchemaTypeName" />
      of the attribute that holds the post-compilation value of the
   <see langword="AttributeType" /> property.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAttributeGroup">
      <summary>
        <para>Class for attribute groups. Groups a set of attribute declarations so that they
      can be incorporated as a group into complex type definitions. Represents the World
      Wide Web Consortium (W3C) <see langword="attributeGroup" />
      element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttributeGroup.Name">
      <summary>
        <para>Gets or sets the name of the attribute group.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttributeGroup.Attributes">
      <summary>
        <para>Gets the collection of attributes for the attribute group.
      Contains <see langword="XmlSchemaAttribute" /> and
   <see langword="XmlSchemaAttributeGroupRef" /> elements.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttributeGroup.AnyAttribute">
      <summary>
        <para>Gets or sets the <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> component of the
   attribute group. </para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAttributeGroupRef">
      <summary>
        <para>Class for the attribute group reference. Represents the World Wide Web Consortium (W3C) <see langword="attributeGroup" /> element with the <see langword="ref" />
attribute.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttributeGroupRef.RefName">
      <summary>
        <para>Gets or sets the name of the referenced 
   <see langword="attributeGroup" /> element.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaChoice">
      <summary>
        <para>Allows only one of its children to appear in an instance. Represents the World
      Wide Web Consortium (W3C) <see langword="choice" />
      (compositor) element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaChoice.Items">
      <summary>
        <para>Gets the collection of the elements contained with the 
      compositor (<see langword="choice" />
      ): <see langword="XmlSchemaElement" />, <see langword="XmlSchemaGroupRef" />,
   <see langword="XmlSchemaChoice" />, <see langword="XmlSchemaSequence" />, or
   <see langword="XmlSchemaAny" />
   .</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaCollection">
      <summary>
        <para> Contains a cache of XML Schema definition language (XSD) and XML-Data
      Reduced (XDR) schemas. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.#ctor">
      <summary>
        <para>Initializes a new instance of the
   <see langword="XmlSchemaCollection" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.#ctor(System.Xml.XmlNameTable)">
      <summary>
        <para>Initializes a new instance of the
   <see langword="XmlSchemaCollection" />
   class with the specified <see cref="T:System.Xml.XmlNameTable" /> . The <see langword="XmlNameTable" />
   is used when loading schemas.</para>
      </summary>
      <param name="nametable">The <see langword="XmlNameTable" /> to use.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.String,System.String)">
      <summary>
        <para>Adds the schema located by the given URL into the schema
      collection.</para>
      </summary>
      <param name="ns">The namespace URI associated with the schema. For XML Schema Definition language (XSD) schemas, this will typically be the <see langword="targetNamespace" /> .</param>
      <param name=" uri">The URL that specifies the schema to load.</param>
      <returns>
        <para>The <see cref="T:System.Xml.Schema.XmlSchema" /> added to the schema collection;
<see langword="null" /> if the the schema being added is an XDR schema or if there 
   are compilation errors in the schema.</para>
      </returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.String,System.Xml.XmlReader)">
      <summary>
        <para>Adds the given schema into the schema collection.</para>
      </summary>
      <param name="ns">The namespace URI associated with the schema. For XML Schema definition language (XSD) schemas, this will typically be the <see langword="targetNamespace" /> .</param>
      <param name=" reader">
        <see cref="T:System.Xml.XmlReader" /> containing the schema to add.</param>
      <returns>
        <para>The <see cref="T:System.Xml.Schema.XmlSchema" /> added to the schema collection;
<see langword="null" /> if the schema being added is an XML-Data Reduced (XDR) schema or if there 
   are
   compilation errors in the schema.</para>
      </returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.Xml.Schema.XmlSchema)">
      <summary>
        <para>Adds the <see cref="T:System.Xml.Schema.XmlSchema" /> to the collection.</para>
      </summary>
      <param name="schema">The <see langword="XmlSchema" /> to add to the collection.</param>
      <returns>
 The <see langword="XmlSchema" /> object.
</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.Xml.Schema.XmlSchemaCollection)">
      <summary>
        <para>Adds all the namespaces defined in the given collection
      (including their associated schemas) to this collection.</para>
      </summary>
      <param name="schema">The <see langword="XmlSchemaCollection" /> you want to add to this collection.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Contains(System.Xml.Schema.XmlSchema)">
      <summary>
        <para>Gets a value indicating whether the 
   <see langword="targetNamespace" /> of the
      specified <see cref="T:System.Xml.Schema.XmlSchema" /> is in the collection.</para>
      </summary>
      <param name="schema">The <see langword="XmlSchema" /> object.</param>
      <returns>
        <para>
          <see langword="true" /> if there is a 
   schema in the collection with the same <see langword="targetNamespace" />
   ; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Contains(System.String)">
      <summary>
        <para>Gets a value indicating whether a schema with the specified namespace is in the
      collection.</para>
      </summary>
      <param name="ns">The namespace URI associated with the schema. For XML Schema Definition language (XSD) schemas, this will typically be the target namespace.</param>
      <returns>
        <para>
          <see langword="true" /> if a schema 
   with the specified namespace is in the collection; otherwise,
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.GetEnumerator">
      <summary>
        <para>Provides support for the "for each" style iteration over the collection of schemas.</para>
      </summary>
      <returns>
        <para>An enumerator for iterating over all schemas in the
      current collection.</para>
      </returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.CopyTo(System.Xml.Schema.XmlSchema[],System.Int32)">
      <summary>
        <para>Copies all the <see langword="XmlSchema" /> objects from this
   collection into the given array starting at the given index.</para>
      </summary>
      <param name="array">The array to copy the objects to.</param>
      <param name=" index">The index in <paramref name="array" /> where copying will begin.</param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollection.Count">
      <summary>
        <para> Gets the number of namespaces defined in this collection.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollection.NameTable">
      <summary>
        <para>Gets the default <see langword="XmlNameTable" /> used by
   the <see langword="XmlSchemaCollection" /> when loading new schemas.</para>
      </summary>
    </member>
    <member name="E:System.Xml.Schema.XmlSchemaCollection.ValidationEventHandler">
      <summary>
        <para> Sets an event handler for receiving information about the XML-Data Reduced (XDR) and XML
      Schema definition language (XSD) schema validation errors.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollection.Item(System.String)">
      <summary>
        <para> Gets the <see cref="T:System.Xml.Schema.XmlSchema" /> associated with the given namespace URI.</para>
      </summary>
      <param name="ns">The namespace URI associated with the schema you want to return. This will typically be the <see langword="targetNamespace" /> of the schema.</param>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaCollectionEnumerator">
      <summary>
        <para>Supports a simple iteration over a collection. This class cannot be
       inherited.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollectionEnumerator.MoveNext">
      <summary>
        <para>Advances the enumerator to the
      next schema in the collection.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the move was successful; <see langword="false" /> if the enumerator has passed the end of the collection.</para>
      </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollectionEnumerator.Current">
      <summary>
        <para>Gets the current <see cref="T:System.Xml.Schema.XmlSchema" /> in the collection.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaComplexContent">
      <summary>
        <para>Class that represents the complex content model for complex
      types. Contains extensions or restrictions on a complex type that has mixed
      content or elements only. Represents the World Wide Web Consortium
      (W3C) <see langword="complexContent" />
      element.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaContentModel">
      <summary>
        <para>An abstract class for the schema content model.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaContentModel.Content">
      <summary>
        <para>Gets or sets the content of the type.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContent.IsMixed">
      <summary>
        <para> Gets or sets information that determines if the type has a mixed content model. </para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContent.Content">
      <summary>
        <para>Gets or sets the content.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaComplexContentExtension">
      <summary>
        <para> Class for complex types with a complex content model 
      derived by extension. Extends the complex type by adding attributes or elements.
      Represents the World Wide Web Consortium (W3C) <see langword="extension" />
      element for complex content.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaContent">
      <summary>
        <para>An abstract class for schema content.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentExtension.BaseTypeName">
      <summary>
        <para>Gets or sets the name of the
      complex type from which this type is derived by extension.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentExtension.Particle">
      <summary>
        <para>Gets or sets one of the <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />, <see cref="T:System.Xml.Schema.XmlSchemaChoice" />, <see cref="T:System.Xml.Schema.XmlSchemaAll" />, 
   or
<see cref="T:System.Xml.Schema.XmlSchemaSequence" /> 
classes.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentExtension.Attributes">
      <summary>
   Gets the collection of attributes for the complex
   content. Contains <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> and
<see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef" /> elements.
</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentExtension.AnyAttribute">
      <summary>
        <para>Gets or sets the <see langword="XmlSchemaAnyAttribute" /> component of the complex
   content model.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaComplexContentRestriction">
      <summary>
        <para> Class for complex types with a complex content model that
      are derived by restriction. Restricts the contents of the complex type to a
      subset of the inherited complex type. Represents the World Wide Web Consortium
      (W3C) <see langword="restriction" />
      element for complex
      content.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentRestriction.BaseTypeName">
      <summary>
        <para> Gets or sets
      the name of a complex type from which this type is derived by restriction.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentRestriction.Particle">
      <summary>
        <para>Gets or sets one of the <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />, <see cref="T:System.Xml.Schema.XmlSchemaChoice" />, <see cref="T:System.Xml.Schema.XmlSchemaAll" />, 
   or
<see cref="T:System.Xml.Schema.XmlSchemaSequence" />classes.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentRestriction.Attributes">
      <summary>
        <para>Gets the collection of attributes for the complex type. 
      Contains the <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> and
   <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef" /> 
   elements.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentRestriction.AnyAttribute">
      <summary>
        <para>Gets or sets the <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> component of the complex content
   model.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaComplexType">
      <summary>
        <para>Class for complex types. Defines a complex type that
      determines the set of attributes and content of an element. Represents the World
      Wide Web Consortium (W3C) <see langword="complexType" />
      element.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaType">
      <summary>
        <para>The base class for all simple types and complex
      types.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.Name">
      <summary>
        <para>Gets or sets the name of the type.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.Final">
      <summary>
        <para>Gets or sets the <see langword="final" /> property to indicate that no further derivations are allowed.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.QualifiedName">
      <summary>
        <para>Gets the qualified name for the type built from the <see langword="Name " />attribute of this type. This holds 
   the post-compilation value.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.FinalResolved">
      <summary>
        <para>Gets the post-compilation value of the <see langword="Final" /> property that holds the post-compilation
   value of the <see langword="Final" />
   property.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.BaseSchemaType">
      <summary>
        <para> Gets the object of the <see langword="simpleType" />
element or <see langword="complexType" /> element. This is a post-schema-validation-infoset variable.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.DerivedBy">
      <summary>
        <para> When overridden in a derived class, this property gets information that indicates how this element
      has been derived from a base type. This property holds the post-compilation
      value.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.Datatype">
      <summary>
        <para>Gets the data type that holds the post-compilation
      value.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.IsMixed">
      <summary>
        <para>Indicates that this type has a mixed content model. This
      property is only valid in a complex type.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaComplexType.#ctor">
      <summary>
        <para>Used to create a <see langword="complexType" /> element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.IsAbstract">
      <summary>
        <para>Gets or sets the information that determines if the <see langword="complexType " /> element can be used in the instance document.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.Block">
      <summary>
        <para>Gets or sets the <see langword="block" /> attribute.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.IsMixed">
      <summary>
        <para> Gets or sets information that determines if the complex type has a mixed content
      model (markup within the content).</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.ContentModel">
      <summary>
        <para>Gets or sets the content model type. </para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.Particle">
      <summary>
        <para> Gets or sets the compositor type as one of the
   <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />, <see cref="T:System.Xml.Schema.XmlSchemaChoice" />, <see cref="T:System.Xml.Schema.XmlSchemaAll" />,
      or <see cref="T:System.Xml.Schema.XmlSchemaSequence" />
      classes.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.Attributes">
      <summary>
        <para>Gets the collection of attributes for the complex type.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.AnyAttribute">
      <summary>
        <para>Gets or sets the value for the
   <see langword="XmlSchemaAnyAttribute" /> component of the complex
      type.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.ContentType">
      <summary>
        <para>Gets the content model of the complex type which holds
      the post-compilation value.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.ContentTypeParticle">
      <summary>
        <para>Gets the particle which holds the post-compilation value
      of the <see langword="ContentTypeParticle" /> property. This
   <see langword="ContentTypeParticle" /> is determined after the content models of the most derived types and the base complex type have been resolved
      according to the rules defined in the World Wide Web Consortium (W3C) XML Schema
      definition language (XSD) specification. </para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.BlockResolved">
      <summary>
        <para> Gets the value after the type has been compiled to the
      post-schema-validation infoset. This value indicates how the type is enforced when
   <see langword="xsi:type" />
   is used in
   the instance document.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.AttributeUses">
      <summary>
        <para> Gets the collection of all the attributes from this 
      complex type and its base types which holds the post-compilation value of the
   <see langword="AttributeUses" /> 
   property.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.AttributeWildcard">
      <summary>
        <para>Gets the <see langword="anyAttribute" /> element from this complex type and
   its base types which holds the post-compilation value of
   the <see langword="AttributeWildcard" />
   property.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaContentProcessing">
      <summary>
        <para>Provides information about the validation mode of
   <see langword="any" /> and <see langword="anyAttribute" /> element replacements.</para>
      </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentProcessing.None">
      <summary>
        <para>The item is not validated.</para>
      </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentProcessing.Skip">
      <summary>
        <para>The item must consist of well-formed XML and is not
      validated by the schema.</para>
        <para>The XML processor attempts to notify the client through a validation event
      handler with <see cref="P:System.Xml.Schema.ValidationEventArgs.Severity" /> =
   <see langword="XmlSeverityType.Warning" />
   that no validation took place for the given
   item. If a validation event handler has not been setup, no information
   is returned when the warning is produced. </para>
      </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentProcessing.Lax">
      <summary>
        <para>If the item has a uniquely determined declaration
      available, it must be valid with respect to that
      definition. Otherwise, the item is not validated.</para>
        <para>If the item is not validated, the XML processor attempts to notify the client through a validation event handler
      with <see cref="P:System.Xml.Schema.ValidationEventArgs.Severity" /> =
   <see langword="XmlSeverityType.Warning" />
   . If a validation
   event handler has not been setup, no information is returned when the warning is
   produced.</para>
      </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentProcessing.Strict">
      <summary>
        <para>The item must be schema-valid based on the schema
      definition obtained from the namespace-qualified item name.</para>
   If a validation error occurs, and a validation event handler is not provided,
   an exception is thrown.
</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaContentType">
      <summary>
        <para> Enumerations for the content model of the complex
      type. This represents the content in the post-schema-validation infoset.</para>
      </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentType.TextOnly">
      <summary>
        <para> Text-only content.</para>
      </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentType.Empty">
      <summary>
        <para> Empty content.</para>
      </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentType.ElementOnly">
      <summary>
        <para> Element-only content.</para>
      </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentType.Mixed">
      <summary>
        <para> Mixed content.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaDerivationMethod">
      <summary>
        <para> Provides different
      methods for preventing derivation.</para>
      </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.Empty">
      <summary>
        <para>Override default derivation method to allow any
      derivation.</para>
      </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.Substitution">
      <summary>
        <para> Refers to derivations by 
   <see langword="Substitution" /> .</para>
      </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.Extension">
      <summary>
        <para> Refers to derivations by <see langword="Extension" /> .</para>
      </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.Restriction">
      <summary>
        <para> Refers to derivations by 
   <see langword="Restriction" /> .</para>
      </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.List">
      <summary>
        <para>Refers to derivations by <see langword="List" /> .</para>
      </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.Union">
      <summary>
        <para> Refers to derivations by <see langword="Union" /> .</para>
      </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.All">
      <summary>
        <para>
          <see langword="#all" /> . Refers to all
   derivation methods.</para>
      </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.None">
      <summary>
   Accepts the default derivation method.
</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaDocumentation">
      <summary>
        <para> Class that specifies information to be read or used by humans within an annotation.
      Represents the World Wide Web Consortium (W3C) <see langword="documentation" />
      element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDocumentation.Source">
      <summary>
        <para> Gets or sets the URI source of the information.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDocumentation.Language">
      <summary>
        <para>Gets or sets the <see langword="xml:lang" /> attribute. This serves as an indicator of
   the language used in the contents.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDocumentation.Markup">
      <summary>
        <para>Gets or sets an array of <see langword="XmlNodes" /> that represents the documentation child nodes.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaElement">
      <summary>
        <para> Class for elements. Represents the World Wide Web Consortium (W3C)
   <see langword="element" /> element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.IsAbstract">
      <summary>
        <para>Gets or sets information to indicate if the element
      can be used in an instance document.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.Block">
      <summary>
        <para>Gets or sets a <see langword="Block" /> derivation.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.DefaultValue">
      <summary>
        <para>Gets or sets the default value of the element if its content
      is a simple type or content of the element is <see langword="textOnly" />.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.Final">
      <summary>
        <para>Gets or sets the <see langword="Final" /> property to indicate that no further derivations are allowed.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.FixedValue">
      <summary>
        <para>Gets or sets the fixed value.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.Form">
      <summary>
        <para>Gets or sets the form for the element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.Name">
      <summary>
        <para>Gets or sets the name of the element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.IsNillable">
      <summary>
        <para>Gets or sets information that indicates if <see langword="xsi:nil" /> can occur in the instance data.
   Indicates if an explicit nil value can be assigned to the element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.RefName">
      <summary>
        <para>Gets or sets the reference name of an element declared
      in this schema (or another schema indicated by the specified namespace).</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.SubstitutionGroup">
      <summary>
        <para> Gets or sets the name of an element that is being substituted by this
      element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.SchemaTypeName">
      <summary>
        <para>Gets or sets the name of a built-in data type defined in this schema or another schema
      indicated by the specified namespace. </para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.SchemaType">
      <summary>
        <para>Gets or sets the type of the element. This can either be a complex type
      or a simple type.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.Constraints">
      <summary>
        <para>Gets the collection of constraints on the element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.QualifiedName">
      <summary>
        <para>Gets the actual qualified name for the given element.
      This is the name that a <see langword="ref" /> attribute
      refers to. The qualified name consists of the NCName of the element. For
      example, element name = "NCName", and the prefix used to describe the
   <see langword="targetNamespace" />
   of the schema. This property holds the
   post-compilation value of the <see langword="QualifiedName" /> property.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.ElementType">
      <summary>
        <para>Gets a common language runtime (CLR) object based on
      the <see cref="T:System.Xml.Schema.XmlSchemaElement" /> or <see cref="T:System.Xml.Schema.XmlSchemaElement" />of the element
      which holds the post-compilation value of the <see langword="ElementType" /> property.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.BlockResolved">
      <summary>
        <para>Gets the post-compilation value of
      the <see langword="Block" /> property which holds the post-compilation
      value of the <see langword="Block" />
      property.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.FinalResolved">
      <summary>
        <para>Gets the post-compilation value of the
   <see langword="Final" /> property which holds the post-compilation
      value of the <see langword="Final" />
      property.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaException">
      <summary>
        <para> Returns detailed information about the schema exception.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Constructs a new <see langword="XmlSchemaException" /> object with the given
<see langword="SerializationInfo" /> and <see langword="StreamingContext" /> 
information that contains all the
properties of the <see langword="XmlSchemaException" />. </para>
      </summary>
      <param name="info">SerializationInfo</param>
      <param name="context">StreamingContext</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Streams all the <see langword="XmlSchemaException" /> properties into the
<see langword="SerializationInfo" /> class for the given 
<see langword="StreamingContext" /> 
. </para>
      </summary>
      <param name="info">The <see langword="SerializationInfo" />.</param>
      <param name=" context">The <see langword="StreamingContext" />information.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaException.#ctor(System.String,System.Exception)">
      <summary>
        <para>The formatted error message describing the error code.</para>
      </summary>
      <param name="message">The string.</param>
      <param name=" innerException">The exception.</param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaException.SourceUri">
      <summary>
        <para> Gets the location of the file used to load the schema.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaException.LineNumber">
      <summary>
    Gets the line number indicating where the
    error occurred.
 </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaException.LinePosition">
      <summary>
        <para>Gets the line position indicating where the error occurred.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaException.SourceSchemaObject">
      <summary>
        <para>The <see langword="XmlSchemaObject" />
that produced the
<see langword="XmlSchemaException" /> 
.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaExternal">
      <summary>
        <para>An abstract class. Provides information about the included schema.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaExternal.SchemaLocation">
      <summary>
        <para>Gets or sets the URI location for the schema, which tells the schema processor
      where the schema physically resides.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaExternal.Schema">
      <summary>
        <para>Gets or sets the <see langword="XmlSchema" /> for the referenced schema. </para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaExternal.Id">
      <summary>
        <para>Gets or sets the string id.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaExternal.UnhandledAttributes">
      <summary>
        <para>Gets and sets the qualified attributes which do not belong to the schema 
      target namespace.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaFacet">
      <summary>
        <para> Abstract class for all facets that are used when simple types
      are derived by restriction.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaFacet.Value">
      <summary>
        <para>Gets or sets the <see langword="value" /> attribute of the facet.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaFacet.IsFixed">
      <summary>
        <para> Gets or sets information that indicates that this facet is fixed.</para>
        <para>This property is unused by <see langword="XmlSchemaEnumerationFacet" /> and
<see langword="XmlSchemaPatternFacet" /> because these classes cannot be 
   fixed.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaNumericFacet">
      <summary>
        <para>Abstract class for defining <see langword="numeric" /> facets.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaLengthFacet">
      <summary>
        <para>Class for defining <see langword="length" /> facets. Represents the World Wide Web
   Consortium (W3C) <see langword="length" />
   facet.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMinLengthFacet">
      <summary>
        <para>Class for defining <see langword="minLength" /> facets. Represents the World Wide Web 
   Consortium (W3C) <see langword="minLength" /> facet.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMaxLengthFacet">
      <summary>
        <para>Class for defining <see langword="maxLength" /> facets. Represents the World Wide Web
   Consortium (W3C) <see langword="maxLength" /> facet.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaPatternFacet">
      <summary>
        <para>Class for defining <see langword="pattern" /> facets. Represents the World Wide Web
   Consortium (W3C) <see langword="pattern" /> facet.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaEnumerationFacet">
      <summary>
        <para>Class for defining <see langword="enumeration" /> facets. Represents the World Wide Web
   Consortium (W3C) <see langword="enumeration" /> facet.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMinExclusiveFacet">
      <summary>
        <para>Class for defining <see langword="minExclusive" /> facets. Represents the World Wide Web
   Consortium (W3C) <see langword="minExclusive" /> facet.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMinInclusiveFacet">
      <summary>
        <para>Class for defining <see langword="minInclusive" /> facets. Represents the World Wide Web
   Consortium (W3C) <see langword="minInclusive" /> facet.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMaxExclusiveFacet">
      <summary>
        <para>Class for defining <see langword="maxExclusive" /> facets. Represents the World Wide Web
   Consortium (W3C) <see langword="maxExclusive" /> facet.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMaxInclusiveFacet">
      <summary>
        <para>Class for defining <see langword="maxInclusive" /> facets. Represents the World Wide Web
   Consortium (W3C) <see langword="maxInclusive" /> facet.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaTotalDigitsFacet">
      <summary>
        <para>Class for defining <see langword="totalDigits" /> facets. Represents the World Wide Web 
   Consortium (W3C) <see langword="totalDigits" /> facet.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaFractionDigitsFacet">
      <summary>
        <para>Class for defining <see langword="fractionDigits" /> facets. Represents the World Wide
   Web Consortium (W3C) <see langword="fractionDigits" /> facet.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaWhiteSpaceFacet">
      <summary>
        <para>Class for defining <see langword="whiteSpace" /> facets. Represents the World Wide Web
   Consortium (W3C) <see langword="whiteSpace" /> facet.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaForm">
      <summary>
        <para>Indicates if attributes or elements need to
      be qualified or left unqualified.</para>
      </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaForm.None">
      <summary>
        <para>Form has not been specified. The default is 
   <see langword="Unqualified" /> .</para>
      </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaForm.Qualified">
      <summary>
        <para> Attribute or element must be qualified with the namespace prefix.</para>
      </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaForm.Unqualified">
      <summary>
        <para>Attribute or element is not required to be qualified with the namespace prefix.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaGroup">
      <summary>
        <para>Class that defines groups at the <see langword="schema" /> level that are referenced from the complex
   types. Groups a set of element declarations so that they can be incorporated as
   a group into complex type definitions. Represents the World Wide Web Consortium
   (W3C) <see langword="group" />
   element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaGroup.Name">
      <summary>
        <para>Gets or sets the name of the schema group.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaGroup.Particle">
      <summary>
        <para>Gets or sets one of the <see cref="T:System.Xml.Schema.XmlSchemaChoice" />, <see cref="T:System.Xml.Schema.XmlSchemaAll" />, or <see cref="T:System.Xml.Schema.XmlSchemaSequence" />
classes.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaGroupRef">
      <summary>
        <para>Class used within complex types that defines the
      reference to groups defined at the <see langword="schema" />
      level. Represents the World Wide Web Consortium
      (W3C) <see langword="group" /> element with <see langword="ref" />
      attribute.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaGroupRef.RefName">
      <summary>
        <para> Gets or sets the name of a group defined in this schema (or another schema
      indicated by the specified namespace).</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaGroupRef.Particle">
      <summary>
        <para> Gets one of the <see cref="T:System.Xml.Schema.XmlSchemaChoice" />, <see cref="T:System.Xml.Schema.XmlSchemaAll" />, or <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> classes which holds the post-compilation
   value of the <see langword="Particle" /> property.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaIdentityConstraint">
      <summary>
        <para> Class for the identity constraints:
   <see langword="key" />, <see langword="keyref" />, 
      and <see langword="unique" /> elements.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaIdentityConstraint.Name">
      <summary>
        <para>Gets or sets the name of the identity constraint.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaIdentityConstraint.Selector">
      <summary>
        <para>Gets or sets the XML Path Language (XPath) expression 
   <see langword="selector" /> element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaIdentityConstraint.Fields">
      <summary>
        <para>Gets the collection of fields that apply as children for the XML Path Language
      (XPath) expression selector.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaIdentityConstraint.QualifiedName">
      <summary>
        <para> Gets the qualified name of the identity constraint which 
      holds the post-compilation value of the <see langword="QualifiedName" /> property.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaXPath">
      <summary>
        <para>Class for XML Path Language (XPath) expressions. 
      Represents the World Wide Web Consortium (W3C) <see langword="selector" />
      element. The World Wide Web Consortium (W3C) <see langword="field" /> element is a
      collection of <see langword="XmlSchemaXPath" />
      classes.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaXPath.XPath">
      <summary>
        <para>Gets or sets the attribute for the XML Path Language (XPath) expression.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaUnique">
      <summary>
        <para> Identifies a unique constraint among a set of elements.
      Represents the World Wide Web Consortium (W3C) <see langword="unique" />
      element.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaKey">
      <summary>
        <para>Identifies a <see langword="key" /> constraint. Represents the World Wide
   Web Consortium (W3C) <see langword="key" /> element.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaKeyref">
      <summary>
        <para>Identifies a <see langword="keyref" /> constraint. Represents the World
   Wide Web Consortium (W3C) <see langword="keyref" /> element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaKeyref.Refer">
      <summary>
        <para>Gets or sets the name of the key that this constraint refers to in another
      simple or complex type.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaImport">
      <summary>
        <para>The class to import schema components from any schema.
      Represents the World Wide Web Consortium (W3C) <see langword="import" /> element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaImport.Namespace">
      <summary>
        <para>Gets or sets the target namespace for the imported schema as a URI reference.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaImport.Annotation">
      <summary>
        <para>Gets or sets the <see langword="annotation" /> property.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaInclude">
      <summary>
        <para> Class to include declarations and definitions from an
      external schema. Allows them to be available for processing in the containing
      schema. Represents the World Wide Web Consortium
      (W3C) <see langword="include" />
      element.
      </para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInclude.Annotation">
      <summary>
        <para>Gets or sets the <see langword="annotation" /> property.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaNotation">
      <summary>
        <para>Class represents a notation. An XML Schema definition language (XSD) notation declaration
      is a reconstruction of XML 1.0 NOTATION declarations. The purpose of notations
      is to describe the format of non-XML data within an XML document. Represents the
      World Wide Web Consortium (W3C) <see langword="notation" />
      element. </para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaNotation.Name">
      <summary>
        <para>Gets or sets the name of the notation.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaNotation.Public">
      <summary>
        <para>Gets or sets the <see langword="public" /> identifier.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaNotation.System">
      <summary>
        <para>Gets or sets the <see langword="system" /> identifier.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaObjectCollection">
      <summary>
        <para>An object collection class to handle 
   <see langword="XmlSchemaObjects" /> when
      collections are returned from method calls.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.#ctor">
      <summary>
        <para>Initializes a new instance of the
   <see langword="XmlSchemaObjectCollection" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.#ctor(System.Xml.Schema.XmlSchemaObject)">
      <summary>
        <para>Initializes a new instance of the
   <see langword="XmlSchemaObjectCollection" /> class that takes an
   <see langword="XmlSchemaObject" /> .</para>
      </summary>
      <param name="parent">The <see langword="XmlSchemaObject" /> .</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.GetEnumerator">
      <summary>
        <para>Returns an enumerator for iterating through the
   <see langword="XmlSchemaObjects" /> contained in the
   <see langword="XmlSchemaObjectCollection" /> .</para>
      </summary>
      <returns>
        <para>The iterator returns 
   <see langword="XmlSchemaObjectEnumerator" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.Add(System.Xml.Schema.XmlSchemaObject)">
      <summary>
        <para> Adds an <see langword="XmlSchemaObject" /> to the
<see langword="XmlSchemaObjectCollection" /> .</para>
      </summary>
      <param name="item">The <see langword="XmlSchemaObject" /> .</param>
      <returns>
        <para>The index at which the item has been added.</para>
      </returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.Insert(System.Int32,System.Xml.Schema.XmlSchemaObject)">
      <summary>
        <para>Inserts an <see langword="XmlSchemaObject " />to the
<see langword="XmlSchemaObjectCollection" />.</para>
      </summary>
      <param name="item">The <see langword="XmlSchemaObject" /> to insert.</param>
      <param name=" index">The zero-based index at which item should be inserted.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.IndexOf(System.Xml.Schema.XmlSchemaObject)">
      <summary>
        <para>Gets the index of the specified
   <see langword="XmlSchemaObject" /> within the collection<see langword=" " />of the
      specified item.</para>
      </summary>
      <param name="item">The <see langword="XmlSchemaObject" /> .</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.Contains(System.Xml.Schema.XmlSchemaObject)">
      <summary>
        <para>Indicates if the specified qualified name is located in the
   <see langword="XmlSchemaObjectCollection" />.</para>
      </summary>
      <param name="item">The <see langword="XmlSchemaObject" /> .</param>
      <returns>
        <para>
          <see langword="true" /> if the specified qualified name is in the
   collection. Otherwise returns <see langword="false" /> . If null is supplied,
<see langword="false" /> is returned because there is no qualified name with a null 
   name. </para>
      </returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.Remove(System.Xml.Schema.XmlSchemaObject)">
      <summary>
        <para>Removes an <see langword="XmlSchemaObject " />from the
<see langword="XmlSchemaObjectCollection" /> .</para>
      </summary>
      <param name="item">The <see langword="XmlSchemaObject" />to remove.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.CopyTo(System.Xml.Schema.XmlSchemaObject[],System.Int32)">
      <summary>
        <para>Copies all the <see langword="XmlSchemaObjects" />
from the collection into the given array starting at the given index.</para>
      </summary>
      <param name="array">
        <para>The one-dimensional array that is the destination of the elements copied from the <see langword="XmlSchemaObjectCollection" />. The array must have zero-based indexing. </para>
      </param>
      <param name=" index">
        <para>The zero-based index in the array at which copying begins. </para>
      </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.OnInsert(System.Int32,System.Object)">
      <summary>
        <para>
          <see langword="OnInsert" /> is
   invoked before the standard <see langword="Insert" /> behavior. For
   more information, see <see langword="OnInsert" /> method <see cref="T:System.Collections.CollectionBase" />
   .</para>
      </summary>
      <param name="index">The index of <see langword="XmlSchemaObject" />.</param>
      <param name=" item">The item.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.OnSet(System.Int32,System.Object,System.Object)">
      <summary>
        <para>
          <see langword="OnSet" /> is invoked
   before the standard <see langword="Set" /> behavior. For more
   information, see OnSet method for <see cref="T:System.Collections.CollectionBase" /> .</para>
      </summary>
      <param name="index">The index of <see langword="XmlSchemaObject" />.</param>
      <param name=" oldValue">The old value.</param>
      <param name=" newValue">The new value.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.OnClear">
      <summary>
        <para>
          <see langword="OnClear" /> is invoked
   before the standard <see langword="Clear" /> behavior. For
   more information, see OnClear method for <see cref="T:System.Collections.CollectionBase" /> .</para>
      </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.OnRemove(System.Int32,System.Object)">
      <summary>
        <para>
          <see langword="OnRemove" /> is
   invoked before the standard <see langword="Remove" /> behavior. For
   more information, see <see langword="OnRemove" /> method for <see cref="T:System.Collections.CollectionBase" /> .</para>
      </summary>
      <param name="index">The index of <see langword="XmlSchemaObject" />.</param>
      <param name=" item">The item.</param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectCollection.Item(System.Int32)">
      <summary>
        <para>Looks up the qualified name using the supplied
   <see langword="XmlQualifiedName" /> and returns the
   <see langword="XmlSchemaObject" />, the XML Schema definition language (XSD) element for this qualified name.</para>
      </summary>
      <param name="index">The index of the <see langword="XmlSchemaObject" />.</param>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaObjectEnumerator">
      <summary>
        <para>An enumerator class to walk the 
   <see langword="XmlSchemaObjectCollection " /> 
   collections.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectEnumerator.Reset">
      <summary>
        <para>Resets the enumerator to the start of the collection. </para>
      </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectEnumerator.MoveNext">
      <summary>
        <para>Moves to the next item in the collection.</para>
      </summary>
      <returns>
        <para>
          <see langword="false" /> at the end of the collection.</para>
      </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectEnumerator.Current">
      <summary>
        <para>Returns the <see langword="XmlSchemaObject" /> for the position of
   the current enumerator.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaObjectTable">
      <summary>
        <para>A collection class that provides read-only helpers for 
   <see langword="XmlSchemaObject " /> 
   objects. This class is used to provide the collections for
   contained elements that are within the schema as collections that are accessed
   from the <see langword="XmlSchema" /> class
   (for example, <see langword="Attributes" />, <see langword="AttributeGroups" />,
<see langword="Elements" />
, and so on).</para>
      </summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectTable.Contains(System.Xml.XmlQualifiedName)">
      <summary>
        <para>Returns <see langword="true" /> if the specified qualified name is in the collection.</para>
      </summary>
      <param name="name">The <see langword="XmlQualifiedName" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the qualified
   name is in the collection; otherwise <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectTable.GetEnumerator">
      <summary>
        <para>Returns an enumerator for
      the <see langword="XmlSchemaObject" /> contained in the collection. </para>
      </summary>
      <returns>
        <para>Returns the <see langword="XmlSchemaObject " /> objects.</para>
      </returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectTable.Count">
      <summary>
   Gets the count of the items in the table.
</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectTable.Item(System.Xml.XmlQualifiedName)">
      <summary>
        <para>Looks up the qualified name by the supplied <see langword="XmlQualifiedName" />
and returns the <see langword="XmlSchemaObject" /> which is the XML Schema definition
language (XSD) element for this qualified name. Returns a null reference if there is a qualified "no" name associated with
the given name. </para>
      </summary>
      <param name="name">The <see langword="XmlQualifiedName" />.</param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectTable.Names">
      <summary>
        <para>Returns a collection of all the named elements in the collection as
   <see langword="XmlSchemaObject" />. </para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectTable.Values">
      <summary>
        <para>Returns a collection of the values for all the elements in the
      collection as <see langword="XmlSchemaObject" />. </para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaRedefine">
      <summary>
        <para>Allows simple and complex types, groups, and attribute
      groups from external schema files to be redefined in the current schema. This
      class provides versioning for the schema elements. Represents the World Wide Web
      Consortium (W3C) <see langword="redefine" />
      element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaRedefine.Items">
      <summary>
        <para>Gets the collection of the following classes: <see cref="T:System.Xml.Schema.XmlSchemaAnnotation" />, <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroup" />, <see cref="T:System.Xml.Schema.XmlSchemaComplexType" />, <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" />, and <see cref="T:System.Xml.Schema.XmlSchemaGroup" />
.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaRedefine.AttributeGroups">
      <summary>
        <para>Gets the <see langword="XmlSchemaObjectTable" />, for all attributes in the
   schema, which holds the post-compilation value of
   the <see langword="AttributeGroups" /> property.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaRedefine.SchemaTypes">
      <summary>
        <para>Gets the <see langword="XmlSchemaObjectTable" />,<see langword=" " />for all simple and complex
   types in the schema, which holds the post-compilation value of the
<see langword="SchemaTypes" /> property.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaRedefine.Groups">
      <summary>
        <para>Gets the <see langword="XmlSchemaObjectTable" />, for all groups in the schema,
   which holds the post-compilation value of the <see langword="Groups" /> property.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSequence">
      <summary>
        <para>Requires the elements in the group to appear in the specified sequence within the
      containing element. Represents the World Wide Web Consortium (W3C)
   <see langword="sequence" />
   (compositor) element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSequence.Items">
      <summary>
        <para>The elements contained within the compositor. Collection 
      of <see cref="T:System.Xml.Schema.XmlSchemaElement" />, <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />, <see cref="T:System.Xml.Schema.XmlSchemaChoice" />, <see cref="T:System.Xml.Schema.XmlSchemaSequence" />, or <see cref="T:System.Xml.Schema.XmlSchemaAny" />
      .</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleContent">
      <summary>
        <para>Class for simple types and complex types with a simple
      content model. Represents the World Wide Web Consortium
      (W3C) <see langword="simpleContent" />
      element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContent.Content">
      <summary>
        <para> Gets one of the <see cref="T:System.Xml.Schema.XmlSchemaSimpleContentRestriction" /> or <see cref="T:System.Xml.Schema.XmlSchemaSimpleContentExtension" />
.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleContentExtension">
      <summary>
        <para> Class for simple types that are derived by extension. 
      Extends the simple type content of the element by adding attributes. Represents
      the World Wide Web Consortium (W3C) <see langword="extension" />
      element for simple content.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentExtension.BaseTypeName">
      <summary>
        <para> Gets or sets the name of a built-in data type or simple type from which this type is extended.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentExtension.Attributes">
      <summary>
        <para>Gets the collection of <see langword="XmlSchemaAttribute" /> and
<see langword="XmlSchemaAttributeGroupRef" />.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentExtension.AnyAttribute">
      <summary>
        <para>Gets or sets the <see langword="XmlSchemaAnyAttribute" /> to be used for the attribute value.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleContentRestriction">
      <summary>
        <para> Class for simple types that are derived by restriction. 
      Restricts the range of values for the element to a subset of the inherited
      simple types. Represents the World Wide Web Consortium
      (W3C) <see langword="restriction" />
      element for
      simple content.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentRestriction.BaseTypeName">
      <summary>
        <para> Gets or sets the name of the built-in data type or simple type from which this type is
      derived.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentRestriction.BaseType">
      <summary>
        <para> Gets or sets the simple type base value.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentRestriction.Facets">
      <summary>
        <para>Gets one or more of the following classes:</para>
        <para>
          <see cref="T:System.Xml.Schema.XmlSchemaLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaPatternFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaEnumerationFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxInclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxExclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinInclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinExclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaFractionDigitsFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaTotalDigitsFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaWhiteSpaceFacet" /> 
.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentRestriction.Attributes">
      <summary>
        <para>Gets the <see langword="XmlSchemaAttribute" /> and
<see langword="XmlSchemaAttributeGroupRef" /> .
   Collection of attributes for the simple type.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentRestriction.AnyAttribute">
      <summary>
        <para>Gets or sets an <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> to be used for the
   attribute value.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleType">
      <summary>
        <para>Class defines a simple type that determines the
      information and constraints for the values of attributes or elements with
      text-only content. Represents the World Wide Web Consortium
      (W3C) <see langword="simpleType" />
      element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleType.Content">
      <summary>
        <para>Gets or sets one of <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeUnion" />, <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeList" />, or <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeRestriction" />
.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleTypeContent">
      <summary>
        <para>Abstract class for simple type content classes.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleTypeList">
      <summary>
        <para>Class for the list of <see langword="simpleType" />
elements. Defines a <see langword="simpleType" /> element as a list of values of a
specified data type. Represents the World Wide Web Consortium
(W3C) <see langword="list" />
element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeList.ItemTypeName">
      <summary>
        <para> Gets or sets the name of a built-in
      data type or <see langword="simpleType" />
      element defined in this schema (or another schema
      indicated by the specified namespace).</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeList.ItemType">
      <summary>
        <para>Gets or sets the <see langword="simpleType" /> element that is derived from the type specified by
   the base value.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleTypeRestriction">
      <summary>
        <para>Class for the restriction of <see langword="simpleType" /> elements. Represents the World Wide Web 
   Consortium (W3C) <see langword="restriction" /> element for simple types.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeRestriction.BaseTypeName">
      <summary>
        <para>Gets or sets the name of the qualified base type.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeRestriction.BaseType">
      <summary>
        <para>Gets or sets information on the base type.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeRestriction.Facets">
      <summary>
        <para>Gets one or more of the following classes: <see cref="T:System.Xml.Schema.XmlSchemaLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaPatternFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaEnumerationFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxInclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxExclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinInclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinExclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaFractionDigitsFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaTotalDigitsFacet" /> , <see cref="T:System.Xml.Schema.XmlSchemaWhiteSpaceFacet" />

.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleTypeUnion">
      <summary>
        <para>Class for the union of <see langword="simpleType" />
elements. Defines a <see langword="simpleType" /> element as a list of values of a
specified data type. Represents the World Wide Web Consortium
(W3C) <see langword="union" />
element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeUnion.MemberTypesSource">
      <summary>
        <para>Gets or sets the list of members of built-in data types or
   <see langword="simpleType" />
   elements defined in this schema (or another schema indicated by the
   specified namespace). </para>
      </summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeUnion.BaseTypes">
      <summary>
        <para>Gets the collection of base types.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaUse">
      <summary>
        <para>Indicator of how the attribute is used.</para>
      </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaUse.None">
      <summary>
        <para> Attribute use not specified.</para>
      </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaUse.Optional">
      <summary>
   Attribute is optional.
</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaUse.Prohibited">
      <summary>
        <para>Attribute cannot be used.</para>
      </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaUse.Required">
      <summary>
        <para>Attribute must appear once.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSeverityType">
      <summary>
        <para>Represents the severity of the validation event.</para>
      </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSeverityType.Error">
      <summary>
        <para> Indicates a validation error occurred when validating the instance document. This applies to
      document type definitions (DTDs) and XML-Data Reduced (XDR) and XML Schema definition
      language (XSD) schemas. The World Wide Web Consortium (W3C) validity constraints
      are considered errors. If no validation event handler has been created,
      errors throw an exception.
      </para>
      </summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSeverityType.Warning">
      <summary>
        <para>Warnings indicate that a validation event occurred that is not an error but may be important
      enough to warn the user about. A warning is typically issued when there is
      no DTD, XML-Data Reduced (XDR) or XML Schema (XSD) to
      validate a particular element or attribute against. The <see cref="P:System.Xml.XmlValidatingReader.ValidationType" qualify="true" /> setting determines the
      type of the schema used. Unlike errors, warnings do not throw an exception
      if there is no validation event handler. </para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifier.MakePascal(System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifier.MakeCamel(System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifier.MakeValid(System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifiers.Clear">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifiers.MakeRightCase(System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifiers.MakeUnique(System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifiers.AddReserved(System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifiers.RemoveReserved(System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifiers.AddUnique(System.String,System.Object)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifiers.IsInUse(System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifiers.Add(System.String,System.Object)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifiers.Remove(System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.CodeIdentifiers.ToArray(System.Type)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.CodeIdentifiers.UseCamelCasing">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.IXmlSerializable.GetSchema">
      <returns>
        <para>An <see cref="T:System.Xml.Schema.XmlSchema" /> object that represents the XML schema.</para>
      </returns>
    </member>
    <member name="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)">
      <summary>
        <para>Converts an XML document into an object using the specified reader.</para>
      </summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> used to read the XML document.</param>
    </member>
    <member name="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)">
      <summary>
        <para>Converts the serializable members of an object into an XML document.</para>
      </summary>
      <param name="writer">The XmlWriter used to write the XML-document instance.</param>
    </member>
    <member name="T:System.Xml.Serialization.SoapAttributeAttribute">
      <summary>
        <para>Specifies that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> should serialize the class member as an encoded SOAP attribute.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapAttributeAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapAttributeAttribute" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapAttributeAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapAttributeAttribute" /> class using the specified value as the
   name of the XML attribute. </para>
      </summary>
      <param name="attrName">The name of the XML attribute.</param>
    </member>
    <member name="P:System.Xml.Serialization.SoapAttributeAttribute.AttributeName">
      <summary>
        <para> Gets or sets the name of the XML attribute generated
      by the <see cref="T:System.Xml.Serialization.XmlSerializer" /> .</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.SoapAttributeAttribute.Namespace">
      <summary>
        <para>Gets or sets the XML namespace of the XML attribute.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.SoapAttributeAttribute.DataType">
      <summary>
        <para> Gets or sets the XML Schema definition language (XSD) data type of the SOAP attribute
      generated by the <see cref="T:System.Xml.Serialization.XmlSerializer" />.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Serialization.SoapAttributeOverrides">
      <summary>
        <para>Allows you to override property, field, and class
      attributes when you use an <see cref="T:System.Xml.Serialization.XmlSerializer" /> to serialize
      or deserialize an object as encoded SOAP.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapAttributeOverrides.Add(System.Type,System.Xml.Serialization.SoapAttributes)">
      <summary>
        <para>Adds a <see cref="T:System.Xml.Serialization.SoapAttributes" /> to a collection of collection
   of <see cref="T:System.Xml.Serialization.SoapAttributes" /> objects. The <paramref name="type" /> parameter specifies an object to be overridden by the <see cref="T:System.Xml.Serialization.SoapAttributes" /> .</para>
      </summary>
      <param name="type">The <see cref="T:System.Type" /> of the object that will be overridden.</param>
      <param name=" attributes">A <see cref="T:System.Xml.Serialization.SoapAttributes" /> that represents the overriding attributes.</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapAttributeOverrides.Add(System.Type,System.String,System.Xml.Serialization.SoapAttributes)">
      <summary>
        <para>Adds a <see cref="T:System.Xml.Serialization.SoapAttributes" /> to the collection
   of <see cref="T:System.Xml.Serialization.SoapAttributes" /> objects contained by the <see cref="T:System.Xml.Serialization.SoapAttributeOverrides" /> . The <paramref name="type" /> parameter
   specifies the object to be overridden by the <see cref="T:System.Xml.Serialization.SoapAttributes" /> . The <paramref name="member" /> parameter
   specifies the name of a member that will be overridden.</para>
      </summary>
      <param name="type">The <see cref="T:System.Type" /> of the object to override.</param>
      <param name=" member">The name of the member to override.</param>
      <param name="attributes">A <see cref="T:System.Xml.Serialization.SoapAttributes" /> that represents the overriding attributes.</param>
    </member>
    <member name="P:System.Xml.Serialization.SoapAttributeOverrides.Item(System.Type)">
      <summary>
        <para>Gets the object associated with the specified (base class) type.</para>
      </summary>
      <param name="type">The base class class <see cref="T:System.Type" /> that is associated with the collection of attributes you want to retrieve. </param>
    </member>
    <member name="P:System.Xml.Serialization.SoapAttributeOverrides.Item(System.Type,System.String)">
      <summary>
        <para>Gets the object associated with the specified (base
      class) type. The <paramref name="member " />parameter
      specifies the base class member that is overridden.</para>
      </summary>
      <param name="type">The base class class <see cref="T:System.Type" /> that is associated with the collection of attributes you want to override. </param>
      <param name=" member">The name of the overridden member that specifies the <see cref="T:System.Xml.Serialization.SoapAttributes" /> to return.</param>
    </member>
    <member name="T:System.Xml.Serialization.SoapAttributes">
      <summary>
        <para>Represents a collection of attribute objects that control
      how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes and deserializes SOAP methods.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapAttributes.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapAttributes" /> class.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.SoapAttributes.SoapType">
      <summary>
        <para>Gets or sets an object that instructs the <see cref="T:System.Xml.Serialization.XmlSerializer" /> how to serialize an object type into encoded SOAP XML.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.SoapAttributes.SoapEnum">
      <summary>
        <para>Gets or sets an object that specifies how the <see cref="T:System.Xml.Serialization.XmlSerializer" />
serializes a SOAP enumeration.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.SoapAttributes.SoapIgnore">
      <summary>
        <para>Gets or sets a value that specifies whether the <see cref="T:System.Xml.Serialization.XmlSerializer" />
serializes a public field or property as encoded SOAP  XML.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.SoapAttributes.SoapElement">
      <summary>
        <para>Gets or sets a <see cref="T:System.Xml.Serialization.SoapElementAttribute" /> to override.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.SoapAttributes.SoapAttribute">
      <summary>
        <para>Gets or sets the <see cref="T:System.Xml.Serialization.SoapAttributeAttribute" /> to override.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.SoapAttributes.SoapDefaultValue">
      <summary>
        <para>Gets or sets the default value of an XML element or attribute.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapCodeExporter.#ctor(System.CodeDom.CodeNamespace)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapCodeExporter.#ctor(System.CodeDom.CodeNamespace,System.CodeDom.CodeCompileUnit)">
    </member>
    <member name="M:System.Xml.Serialization.SoapCodeExporter.ExportTypeMapping(System.Xml.Serialization.XmlTypeMapping)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapCodeExporter.ExportMembersMapping(System.Xml.Serialization.XmlMembersMapping)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapCodeExporter.AddMappingMetadata(System.CodeDom.CodeAttributeDeclarationCollection,System.Xml.Serialization.XmlMemberMapping,System.Boolean)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapCodeExporter.AddMappingMetadata(System.CodeDom.CodeAttributeDeclarationCollection,System.Xml.Serialization.XmlMemberMapping)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.SoapCodeExporter.IncludeMetadata">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="T:System.Xml.Serialization.SoapElementAttribute">
      <summary>
        <para> Specifies
      that the public member value be serialized by the <see cref="T:System.Xml.Serialization.XmlSerializer" />
      as an encoded SOAP XML element.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapElementAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapElementAttribute" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapElementAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapElementAttribute" /> class and specifies the
   name of the XML element.</para>
      </summary>
      <param name="elementName">The XML element name of the serialized member.</param>
    </member>
    <member name="P:System.Xml.Serialization.SoapElementAttribute.ElementName">
      <summary>
        <para>Gets or sets the name of the generated XML element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.SoapElementAttribute.DataType">
      <summary>
        <para>Gets or sets the XML Schema definition language (XSD) data type of the generated XML element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.SoapElementAttribute.IsNullable">
      <summary>
        <para>Gets or sets a value indicating whether the <see cref="T:System.Xml.Serialization.XmlSerializer" /> should serialize a member that is set
   to <see langword="null " />into the <see langword="xsi:nil " />attribute set to
<see langword="true" />.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Serialization.SoapEnumAttribute">
      <summary>
        <para>Controls how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes an enumeration member.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapEnumAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapEnumAttribute" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapEnumAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapEnumAttribute" /> class, using the
   specified element name.</para>
      </summary>
      <param name="name">The XML element name generated by the <see cref="T:System.Xml.Serialization.XmlSerializer" />.</param>
    </member>
    <member name="P:System.Xml.Serialization.SoapEnumAttribute.Name">
      <summary>
        <para>Gets or sets the value generated in an XML document when the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes an enumeration, or the
   value recognized when it deserializes the enumeration member.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Serialization.SoapIgnoreAttribute">
      <summary>
        <para>Instructs the <see cref="T:System.Xml.Serialization.XmlSerializer" /> not to serialize the public field or
   public read/write property value.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapIgnoreAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapIgnoreAttribute" /> class.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Serialization.SoapIncludeAttribute">
      <summary>
        <para>Allows the <see cref="T:System.Xml.Serialization.XmlSerializer" /> to recognize a type
   when it serializes or deserializes an object as encoded SOAP XML.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapIncludeAttribute.#ctor(System.Type)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapIncludeAttribute" /> class using the
   specified type.</para>
      </summary>
      <param name="type">The type of the object to include.</param>
    </member>
    <member name="P:System.Xml.Serialization.SoapIncludeAttribute.Type">
      <summary>
        <para> Gets or sets the type of the object that should be
      used when serializing or deserializing an object. </para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapReflectionImporter.#ctor">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapReflectionImporter.#ctor(System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapReflectionImporter.#ctor(System.Xml.Serialization.SoapAttributeOverrides)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapReflectionImporter.#ctor(System.Xml.Serialization.SoapAttributeOverrides,System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapReflectionImporter.IncludeTypes(System.Reflection.ICustomAttributeProvider)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapReflectionImporter.IncludeType(System.Type)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapReflectionImporter.ImportTypeMapping(System.Type)">
      <summary>
        <para>Returns a object used to map from a type to an XML representation using the 
      specified type.</para>
      </summary>
      <param name="type">The <see cref="T:System.Type" /> of the object to reflect.</param>
      <returns>
        <para>An XmlTypeMapping that maps the type to an XML 
      representation.</para>
      </returns>
    </member>
    <member name="M:System.Xml.Serialization.SoapReflectionImporter.ImportTypeMapping(System.Type,System.String)">
      <summary>
        <para>Returns a object used to map from a type to an XML
      representation using the specified type and namespace.</para>
      </summary>
      <param name="type">The <see cref="T:System.Type" /> of the object to reflect.</param>
      <param name=" defaultNamespace">The default XML namespace.</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapReflectionImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.XmlReflectionMember[])">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapReflectionImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.XmlReflectionMember[],System.Boolean,System.Boolean)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapReflectionImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.XmlReflectionMember[],System.Boolean,System.Boolean,System.Boolean)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapSchemaExporter.#ctor(System.Xml.Serialization.XmlSchemas)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapSchemaExporter.ExportTypeMapping(System.Xml.Serialization.XmlTypeMapping)">
    </member>
    <member name="M:System.Xml.Serialization.SoapSchemaExporter.ExportMembersMapping(System.Xml.Serialization.XmlMembersMapping)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapSchemaExporter.ExportMembersMapping(System.Xml.Serialization.XmlMembersMapping,System.Boolean)">
    </member>
    <member name="M:System.Xml.Serialization.SoapSchemaImporter.#ctor(System.Xml.Serialization.XmlSchemas)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapSchemaImporter.#ctor(System.Xml.Serialization.XmlSchemas,System.Xml.Serialization.CodeIdentifiers)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapSchemaImporter.ImportDerivedTypeMapping(System.Xml.XmlQualifiedName,System.Type,System.Boolean)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapSchemaImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.SoapSchemaMember)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapSchemaImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.SoapSchemaMember[])">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapSchemaImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.SoapSchemaMember[],System.Boolean)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapSchemaImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.SoapSchemaMember[],System.Boolean,System.Type,System.Boolean)">
    </member>
    <member name="P:System.Xml.Serialization.SoapSchemaMember.MemberType">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.SoapSchemaMember.MemberName">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="T:System.Xml.Serialization.SoapTypeAttribute">
      <summary>
        <para> Controls the schema generated by
      the <see cref="T:System.Xml.Serialization.XmlSerializer" /> when a class instance is serialized
      as SOAP encoded XML.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapTypeAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapTypeAttribute" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.SoapTypeAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapTypeAttribute" /> class,
   specifying the name of the XML type.</para>
      </summary>
      <param name="typeName">The name of the XML type that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> generates when it serializes the class instance (and recognizes when it deserializes the class instance).</param>
    </member>
    <member name="M:System.Xml.Serialization.SoapTypeAttribute.#ctor(System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.SoapTypeAttribute" /> class,
   specifying the name and XML namespace of the type.</para>
      </summary>
      <param name="typeName">The name of the XML type that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> generates when it serializes the class instance (and recognizes when it deserializes the class instance).</param>
      <param name=" ns">The XML namespace of the type.</param>
    </member>
    <member name="P:System.Xml.Serialization.SoapTypeAttribute.IncludeInSchema">
      <summary>
        <para> Gets or sets a value indicating whether to include
      the type in SOAP-encoded XML Schema documents.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.SoapTypeAttribute.TypeName">
      <summary>
        <para>Gets or sets the name of the XML type.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.SoapTypeAttribute.Namespace">
      <summary>
        <para>Gets or sets the namespace of the XML type.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlAnyAttributeAttribute">
      <summary>
        <para>Specifies that the member (a field that returns an
      array of <see cref="T:System.Xml.XmlAttribute" />
      objects)
      can contain any XML attributes.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyAttributeAttribute.#ctor">
      <summary>
        <para>Constructs a new instance of the <see cref="T:System.Xml.Serialization.XmlAnyAttributeAttribute" /> class.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlAnyElementAttribute">
      <summary>
        <para>Specifies that the member (a field that returns an array of <see cref="T:System.Xml.XmlElement" /> or
<see cref="T:System.Xml.XmlNode" /> 
objects) can contain objects that represent any XML element that has no
corresponding member in the object being serialized or deserialized.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> class; specifies the XML element name
   generated in the XML document.</para>
      </summary>
      <param name="name">The name of the XML element that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> generates.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttribute.#ctor(System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> class; specifies the XML element name
   generated in the XML document and its XML namespace.</para>
      </summary>
      <param name="name">The name of the XML element that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> generates.</param>
      <param name=" ns">The XML namespace of the XML element.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlAnyElementAttribute.Name">
      <summary>
        <para>Gets or sets the XML element name.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlAnyElementAttribute.Namespace">
      <summary>
        <para>Gets or sets the XML namespace generated in the XML document.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlAnyElementAttributes">
      <summary>
        <para>Represents a collection of <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> objects.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttributes.Add(System.Xml.Serialization.XmlAnyElementAttribute)">
      <summary>
        <para>Adds an <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" />to the collection.</para>
      </summary>
      <param name="attribute">The <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> to add.</param>
      <returns>
        <para>The index of the newly added <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttributes.Insert(System.Int32,System.Xml.Serialization.XmlAnyElementAttribute)">
      <summary>
        <para>Inserts an <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> into the collection 
   at the specified index.</para>
      </summary>
      <param name=" index">The index where the <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> will be inserted.</param>
      <param name="attribute">The <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> to insert.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttributes.IndexOf(System.Xml.Serialization.XmlAnyElementAttribute)">
      <summary>
        <para>Gets the index of the specified <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> .</para>
      </summary>
      <param name="attribute">The <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> whose index you want.</param>
      <returns>
        <para>The index of the specified <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> .</para>
      </returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttributes.Contains(System.Xml.Serialization.XmlAnyElementAttribute)">
      <summary>
        <para>Gets a value indicating whether the specified <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> exists in the collection.</para>
      </summary>
      <param name="attribute">The <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> you are interested in.</param>
      <returns>
        <para>
          <see langword="true" /> if the <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> exists in the 
   collection; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttributes.Remove(System.Xml.Serialization.XmlAnyElementAttribute)">
      <summary>
        <para>Removes the specified <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> from the collection.</para>
      </summary>
      <param name="attribute">The <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> to remove.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlAnyElementAttributes.Item(System.Int32)">
      <summary>
        <para>Gets or sets the <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> at the specified index.</para>
      </summary>
      <param name="index">The index of the <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" />.</param>
    </member>
    <member name="T:System.Xml.Serialization.XmlArrayAttribute">
      <summary>
        <para>Specifies that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> should serialize a particular class member as an array of XML elements.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlArrayAttribute" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlArrayAttribute" />
class; specifies the XML element name generated in
the XML-document instance.</para>
      </summary>
      <param name="elementName">The name of the XML element that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> generates.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayAttribute.ElementName">
      <summary>
        <para>Gets or sets the XML element name given to the serialized array.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayAttribute.Namespace">
      <summary>
        <para> Gets or set the namespace of the XML element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayAttribute.IsNullable">
      <summary>
        <para>Gets or sets a value indicating whether the <see cref="T:System.Xml.Serialization.XmlSerializer" /> should 
   serialize a member as an empty XML tag
   with the <see langword="xsi:nil " /> attribute set to <see langword="true" />.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayAttribute.Form">
      <summary>
        <para>Gets or sets a value indicating whether the XML element
      name generated by the <see cref="T:System.Xml.Serialization.XmlSerializer" /> is qualified or unqualified.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlArrayItemAttribute">
      <summary>
        <para>Specifies the derived types that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> can place in a serialized array.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> class;
   specifies
   the name of the XML element generated in the XML document.</para>
      </summary>
      <param name="elementName">The name of the XML element. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttribute.#ctor(System.Type)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> class;
   specifies the <see cref="T:System.Type" /> that can be inserted into the serialized array.</para>
      </summary>
      <param name="type">The <see cref="T:System.Type" /> of the object to serialize.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttribute.#ctor(System.String,System.Type)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> class;
   specifies the
   name of the XML element generated in the XML document, and the
<see cref="T:System.Type" /> that can 
   be inserted into the generated XML document.</para>
      </summary>
      <param name="elementName">The name of the XML element.</param>
      <param name=" type">The <see cref="T:System.Type" /> of the object to serialize. </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttribute.Type">
      <summary>
        <para> Gets or sets the type allowed in an array.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttribute.ElementName">
      <summary>
        <para> Gets or sets the name of the generated XML element. </para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttribute.Namespace">
      <summary>
        <para> Gets or sets
      the namespace of the generated XML element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttribute.NestingLevel">
      <summary>
        <para>Gets or sets the level in a hierarchy of XML elements
      that the <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> affects.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttribute.DataType">
      <summary>
        <para>Gets or sets the XML data type of the generated XML element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttribute.IsNullable">
      <summary>
        <para>Gets or sets a value indicating whether the <see cref="T:System.Xml.Serialization.XmlSerializer" /> should
   serialize a member as an empty XML tag with the <see langword="xsi:nil " />attribute set to <see langword="true" />.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttribute.Form">
      <summary>
        <para>Gets or sets a value indicating whether the name of the generated XML element is
      qualified.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlArrayItemAttributes">
      <summary>
        <para>Represents a collection of <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> objects.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttributes.Add(System.Xml.Serialization.XmlArrayItemAttribute)">
      <summary>
        <para>Adds an <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> to the collection.</para>
      </summary>
      <param name="attribute">The <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> to add to the collection.</param>
      <returns>
        <para>The index of the added item.</para>
      </returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttributes.Item(System.Int32)">
      <summary>
        <para>Gets or sets the item at the specified index.</para>
      </summary>
      <param name="index">The zero-based index of the collection member to get or set.</param>
    </member>
    <member name="T:System.Xml.Serialization.XmlAttributeAttribute">
      <summary>
        <para>Specifies that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> should serialize the class member as an XML attribute.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlAttributeAttribute" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlAttributeAttribute" />
class and specifies the name of the generated XML attribute.</para>
      </summary>
      <param name="attributeName">The name of the XML attribute that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> generates.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.AttributeName">
      <summary>
        <para>Gets or sets the name of the XML attribute.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.Namespace">
      <summary>
        <para>Gets or sets the XML namespace of the XML attribute.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.DataType">
      <summary>
        <para>Gets or sets the XSD data type of the XML attribute
      generated by the <see cref="T:System.Xml.Serialization.XmlSerializer" /> .</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.Form">
      <summary>
        <para>Gets or sets a value indicating whether the XML
      attribute name generated by the <see cref="T:System.Xml.Serialization.XmlSerializer" /> is qualified.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlAttributeOverrides">
      <summary>
        <para>Allows you to override property, field, and class attributes
      when you use the <see cref="T:System.Xml.Serialization.XmlSerializer" />
      to serialize or deserialize an object.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeOverrides.Add(System.Type,System.Xml.Serialization.XmlAttributes)">
      <summary>
        <para>Adds an <see cref="T:System.Xml.Serialization.XmlAttributes" /> object to the
   collection of <see cref="T:System.Xml.Serialization.XmlAttributes" /> objects. The <paramref name="type" /> parameter
   specifies an object to be overridden by the <see cref="T:System.Xml.Serialization.XmlAttributes" /> object.</para>
      </summary>
      <param name="type">The <see cref="T:System.Type" /> of the object that will be overridden.</param>
      <param name=" attributes">An <see cref="T:System.Xml.Serialization.XmlAttributes" /> object that represents the overriding attributes.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeOverrides.Add(System.Type,System.String,System.Xml.Serialization.XmlAttributes)">
      <summary>
        <para>Adds an <see cref="T:System.Xml.Serialization.XmlAttributes" /> object to the
   collection of <see cref="T:System.Xml.Serialization.XmlAttributes" /> objects. The <paramref name="type" /> parameter
   specifies an object to be overridden. The <paramref name="member " />parameter specifies
   the name of a member that will be overridden.</para>
      </summary>
      <param name="type">The <see cref="T:System.Type" /> of the object to override.</param>
      <param name=" member">The name of the member to override.</param>
      <param name="attributes">An <see cref="T:System.Xml.Serialization.XmlAttributes" /> object that represents the overriding attributes.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeOverrides.Item(System.Type)">
      <summary>
        <para>Gets the object associated with the specified, base-class, type.</para>
      </summary>
      <param name="type">The base-class class <see cref="T:System.Type" /> that is associated with the collection of attributes you want to retrieve. </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeOverrides.Item(System.Type,System.String)">
      <summary>
        <para>Gets the object associated with the specified (base-class) type. The
      member parameter specifies the base-class member that is overridden.</para>
      </summary>
      <param name="type">The base-class class <see cref="T:System.Type" /> that is associated with the collection of attributes you want. </param>
      <param name=" member">The name of the overridden member that specifies the <see cref="T:System.Xml.Serialization.XmlAttributes" /> to return.</param>
    </member>
    <member name="T:System.Xml.Serialization.XmlAttributes">
      <summary>
        <para>Represents a collection of attribute objects that control
      how the <see cref="T:System.Xml.Serialization.XmlSerializer" />
      serializes and deserializes an object.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributes.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlAttributes" /> class.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlElements">
      <summary>
        <para> Gets or sets a collection of objects that specify how the
   <see cref="T:System.Xml.Serialization.XmlSerializer" />
   serializes a public field or read/write property as
   an XML element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlAttribute">
      <summary>
        <para> Gets or sets an object that specifies how the
   <see cref="T:System.Xml.Serialization.XmlSerializer" /> 
   serializes a public field or public read/write property as an XML attribute.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlEnum">
      <summary>
        <para> Gets or sets an object that
      specifies how the <see cref="T:System.Xml.Serialization.XmlSerializer" />
      serializes an enumeration member.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlText">
      <summary>
        <para> Gets or sets an object that instructs the <see cref="T:System.Xml.Serialization.XmlSerializer" /> to serialize a
   public field or public read/write property as XML
   text.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlArray">
      <summary>
        <para> Gets or sets an object that specifies how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes a public field
   or read/write property that returns an array.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlArrayItems">
      <summary>
        <para> Gets or sets a collection of objects that specify
      how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes
      items inserted into an array returned by a public field or read/write property.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlDefaultValue">
      <summary>
        <para>Gets or sets the default value of an XML element or attribute.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlIgnore">
      <summary>
        <para>Gets or sets a value that specifies whether or not the
   <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes a public field or public read/write property.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlType">
      <summary>
        <para>Gets or sets an object that specifies how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes a class to which
   the <see cref="T:System.Xml.Serialization.XmlTypeAttribute" />
   has been applied.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlRoot">
      <summary>
        <para>Gets or sets an object that specifies how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes a class as an XML root element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlAnyElements">
      <summary>
        <para>Gets the collection of <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> objects to override.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlAnyAttribute">
      <summary>
        <para>Gets or sets the <see cref="T:System.Xml.Serialization.XmlAnyAttributeAttribute" /> to override.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlChoiceIdentifier">
      <summary>
        <para> Gets or sets an object that allows you
      to disambiguate between a set of choices.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute">
      <summary>
        <para>Specifies that the member can be further disambiguated
      by using an enumeration.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlChoiceIdentifierAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlChoiceIdentifierAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute" /> class.</para>
      </summary>
      <param name="name">The member name that returns the enumeration used to disambiguate a choice.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlChoiceIdentifierAttribute.MemberName">
      <summary>
        <para>Gets or sets the name of the field that returns the
      enumeration to use when disambiguating types.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlCodeExporter.#ctor(System.CodeDom.CodeNamespace)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlCodeExporter.#ctor(System.CodeDom.CodeNamespace,System.CodeDom.CodeCompileUnit)">
    </member>
    <member name="M:System.Xml.Serialization.XmlCodeExporter.ExportTypeMapping(System.Xml.Serialization.XmlTypeMapping)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlCodeExporter.ExportMembersMapping(System.Xml.Serialization.XmlMembersMapping)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlCodeExporter.AddMappingMetadata(System.CodeDom.CodeAttributeDeclarationCollection,System.Xml.Serialization.XmlTypeMapping,System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlCodeExporter.AddMappingMetadata(System.CodeDom.CodeAttributeDeclarationCollection,System.Xml.Serialization.XmlMemberMapping,System.String,System.Boolean)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlCodeExporter.AddMappingMetadata(System.CodeDom.CodeAttributeDeclarationCollection,System.Xml.Serialization.XmlMemberMapping,System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlCodeExporter.IncludeMetadata">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlElementAttribute">
      <summary>
        <para> Indicates that a public field or property represents an XML element when the
   <see cref="T:System.Xml.Serialization.XmlSerializer" />
   serializes or deserializes the containing object.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> class and
   specifies the name of the XML element.</para>
      </summary>
      <param name="elementName">The XML element name of the serialized member.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.Type)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> class
   and specifies a type for the member to which the <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> is applied,
   which is used by the <see cref="T:System.Xml.Serialization.XmlSerializer" /> when serializing or deserializing a containing object.</para>
      </summary>
      <param name="type">The <see cref="T:System.Type" /> of an object derived from the member's type.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.String,System.Type)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> ;
   specifies the name of the XML element and a derived type for the member to which
   the <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> is applied,
   which is used when the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes a containing object.</para>
      </summary>
      <param name="elementName">The XML element name of the serialized member. </param>
      <param name="type">The <see cref="T:System.Type" /> of an object derived from the member's type. </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.Type">
      <summary>
        <para>Gets or sets the object type used to represent the XML
      element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.ElementName">
      <summary>
        <para> Gets or sets the
      name of the generated XML element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.Namespace">
      <summary>
        <para> Gets or sets the namespace assigned
      to the XML element that results when the class is serialized.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.DataType">
      <summary>
        <para> Gets or sets the XML Schema definition (XSD)
      data type of the XMl element generated by the <see cref="T:System.Xml.Serialization.XmlSerializer" />.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.IsNullable">
      <summary>
        <para>Gets or sets a value indicating whether the <see cref="T:System.Xml.Serialization.XmlSerializer" /> should serialize a member that is set
   to <see langword="null " />as
   an empty tag with the <see langword="xsi:nil " />attribute set to
<see langword="true" />.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.Form">
      <summary>
        <para>Gets or sets a value indicating whether the element is qualified.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlElementAttributes">
      <summary>
        <para>Represents a collection of <see cref="T:System.Xml.Serialization.XmlElementAttribute" />,
   which the <see cref="T:System.Xml.Serialization.XmlSerializer" /> uses to
   override the default way it serializes a class.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttributes.Add(System.Xml.Serialization.XmlElementAttribute)">
      <summary>
        <para>Adds an <see cref="T:System.Xml.Serialization.XmlElementAttribute" />to the collection.</para>
      </summary>
      <param name="attribute">The <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> to add.</param>
      <returns>
        <para>The zero-based index of the newly added item.</para>
      </returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttributes.Item(System.Int32)">
      <summary>
        <para>Gets or sets an <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> from the collection.</para>
      </summary>
      <param name="index">The zero-based index of the collection member to get or set.</param>
    </member>
    <member name="T:System.Xml.Serialization.XmlEnumAttribute">
      <summary>
        <para> Controls how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes an enumeration
   member.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlEnumAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlEnumAttribute" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlEnumAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlEnumAttribute" /> class, and specifies the XML value
   that the <see cref="T:System.Xml.Serialization.XmlSerializer" />
   generates or recognizes (when it
   serializes or deserializes the enumeration, respectively).</para>
      </summary>
      <param name="name">The overriding name of the enumeration member.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlEnumAttribute.Name">
      <summary>
        <para>Gets or sets the value generated in an XML-document
      instance when the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes an enumeration, or the
      value recognized when it deserializes the enumeration member.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlIgnoreAttribute">
      <summary>
        <para> Instructs the <see cref="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)" /> method of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> not to serialize the public field or
   public read/write property value.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlIgnoreAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlIgnoreAttribute" /> class.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlIncludeAttribute">
      <summary>
        <para>Allows the <see cref="T:System.Xml.Serialization.XmlSerializer" /> to recognize a type when
   it serializes or deserializes an object.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlIncludeAttribute.#ctor(System.Type)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlIncludeAttribute" /> 
class.</para>
      </summary>
      <param name="type">The <see cref="T:System.Type" /> of the object to include.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlIncludeAttribute.Type">
      <summary>
        <para> Gets or sets the type of the object to include.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlMemberMapping.Any">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlMemberMapping.ElementName">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlMemberMapping.Namespace">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlMemberMapping.MemberName">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlMemberMapping.TypeName">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlMemberMapping.TypeNamespace">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlMemberMapping.TypeFullName">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlMembersMapping.ElementName">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlMembersMapping.Namespace">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlMembersMapping.TypeName">
    </member>
    <member name="P:System.Xml.Serialization.XmlMembersMapping.TypeNamespace">
    </member>
    <member name="P:System.Xml.Serialization.XmlMembersMapping.Item(System.Int32)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlMembersMapping.Count">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.#ctor">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.#ctor(System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.#ctor(System.Xml.Serialization.XmlAttributeOverrides)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.#ctor(System.Xml.Serialization.XmlAttributeOverrides,System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.IncludeTypes(System.Reflection.ICustomAttributeProvider)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.IncludeType(System.Type)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.ImportTypeMapping(System.Type)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.ImportTypeMapping(System.Type,System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.ImportTypeMapping(System.Type,System.Xml.Serialization.XmlRootAttribute)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.ImportTypeMapping(System.Type,System.Xml.Serialization.XmlRootAttribute,System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.XmlReflectionMember[],System.Boolean)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlReflectionMember.MemberType">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlReflectionMember.XmlAttributes">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlReflectionMember.SoapAttributes">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlReflectionMember.MemberName">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlReflectionMember.IsReturnValue">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlReflectionMember.OverrideIsNullable">
    </member>
    <member name="T:System.Xml.Serialization.XmlRootAttribute">
      <summary>
        <para> Identifies a class, structure, enumeration, or interface as the root (or top-level) element of an XML-document
      instance.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlRootAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlRootAttribute" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlRootAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlRootAttribute" /> class, and specifies the name of the
   XML root element.</para>
      </summary>
      <param name="elementName">The name of the XML root element.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlRootAttribute.ElementName">
      <summary>
        <para>Gets or sets the name of the XML element that is
      generated and recognized by the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class's
   <see cref="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)" /> and <see cref="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)" /> methods,
      respectively.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlRootAttribute.Namespace">
      <summary>
        <para> Gets or sets the namespace for the
      XML root element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlRootAttribute.DataType">
      <summary>
        <para>Gets or sets the XSD data type of the XML root element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlRootAttribute.IsNullable">
      <summary>
        <para>Gets or sets a value indicating whether the <see cref="T:System.Xml.Serialization.XmlSerializer" /> should serialize a member that is set
   to <see langword="null " />into the <see langword="xsi:nil " />attribute set to
<see langword="true" />.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlRootAttribute.Form">
      <summary>
        <para>Gets or sets a value indicating whether the name of the XML
      root element is qualified.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaExporter.#ctor(System.Xml.Serialization.XmlSchemas)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaExporter.ExportTypeMapping(System.Xml.Serialization.XmlTypeMapping)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaExporter.ExportTypeMapping(System.Xml.Serialization.XmlMembersMapping)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaExporter.ExportMembersMapping(System.Xml.Serialization.XmlMembersMapping)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaExporter.ExportAnyType(System.String)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaImporter.#ctor(System.Xml.Serialization.XmlSchemas)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaImporter.#ctor(System.Xml.Serialization.XmlSchemas,System.Xml.Serialization.CodeIdentifiers)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaImporter.ImportDerivedTypeMapping(System.Xml.XmlQualifiedName,System.Type)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaImporter.ImportDerivedTypeMapping(System.Xml.XmlQualifiedName,System.Type,System.Boolean)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaImporter.ImportTypeMapping(System.Xml.XmlQualifiedName)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaImporter.ImportMembersMapping(System.Xml.XmlQualifiedName)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaImporter.ImportAnyType(System.Xml.XmlQualifiedName,System.String)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaImporter.ImportMembersMapping(System.Xml.XmlQualifiedName[])">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaImporter.ImportMembersMapping(System.Xml.XmlQualifiedName[],System.Type,System.Boolean)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.Add(System.Xml.Schema.XmlSchema)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.Add(System.Xml.Serialization.XmlSchemas)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.Insert(System.Int32,System.Xml.Schema.XmlSchema)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.IndexOf(System.Xml.Schema.XmlSchema)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.Contains(System.Xml.Schema.XmlSchema)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.Remove(System.Xml.Schema.XmlSchema)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.CopyTo(System.Xml.Schema.XmlSchema[],System.Int32)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.OnInsert(System.Int32,System.Object)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.OnRemove(System.Int32,System.Object)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.OnClear">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.OnSet(System.Int32,System.Object,System.Object)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.Find(System.Xml.XmlQualifiedName,System.Type)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemas.IsDataSet(System.Xml.Schema.XmlSchema)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlSchemas.Item(System.Int32)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlSchemas.Item(System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.InitIDs">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.GetXsiType">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadTypedPrimitive(System.Xml.XmlQualifiedName)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.IsXmlnsAttribute(System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ParseWsdlArrayType(System.Xml.XmlAttribute)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadNull">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.GetNullAttr">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadNullableString">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadNullableQualifiedName">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadElementQualifiedName">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadXmlNode(System.Boolean)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToByteArrayBase64(System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToByteArrayBase64(System.Boolean)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToByteArrayHex(System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToByteArrayHex(System.Boolean)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.GetArrayLength(System.String,System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToDateTime(System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToDate(System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToTime(System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToChar(System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToEnum(System.String,System.Collections.Hashtable,System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToXmlName(System.String)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToXmlNCName(System.String)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToXmlNmToken(System.String)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToXmlNmTokens(System.String)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToXmlQualifiedName(System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.UnknownAttribute(System.Object,System.Xml.XmlAttribute)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.UnknownElement(System.Object,System.Xml.XmlElement)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.UnknownNode(System.Object)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.UnreferencedObject(System.String,System.Object)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CreateUnknownTypeException(System.Xml.XmlQualifiedName)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CreateReadOnlyCollectionException(System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CreateAbstractTypeException(System.String,System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CreateUnknownNodeException">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CreateUnknownConstantException(System.String,System.Type)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.EnsureArrayIndex(System.Array,System.Int32,System.Type)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ShrinkArray(System.Array,System.Int32,System.Type,System.Boolean)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadString(System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadSerializable(System.Xml.Serialization.IXmlSerializable)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadReference(System.String@)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.AddTarget(System.String,System.Object)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.AddFixup(System.Xml.Serialization.XmlSerializationReader.Fixup)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.AddFixup(System.Xml.Serialization.XmlSerializationReader.CollectionFixup)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.GetTarget(System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.Referenced(System.Object)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.FixupArrayRefs(System.Object)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.InitCallbacks">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadReferencedElements">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadReferencedElement">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadReferencedElement(System.String,System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadReferencingElement(System.String@)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadReferencingElement(System.String,System.String,System.String@)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadReferencingElement(System.String,System.String,System.Boolean,System.String@)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.AddReadCallback(System.String,System.String,System.Type,System.Xml.Serialization.XmlSerializationReadCallback)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadEndElement">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationReader.Reader">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationReader.Document">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="F:System.Xml.Serialization.XmlSerializationReader.SoapArrayInfo.qname">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="F:System.Xml.Serialization.XmlSerializationReader.SoapArrayInfo.dimensions">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="F:System.Xml.Serialization.XmlSerializationReader.SoapArrayInfo.length">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.Fixup.#ctor(System.Object,System.Xml.Serialization.XmlSerializationFixupCallback,System.Int32)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.Fixup.#ctor(System.Object,System.Xml.Serialization.XmlSerializationFixupCallback,System.String[])">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationReader.Fixup.Callback">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationReader.Fixup.Source">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationReader.Fixup.Ids">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CollectionFixup.#ctor(System.Object,System.Xml.Serialization.XmlSerializationCollectionFixupCallback,System.Object)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationReader.CollectionFixup.Callback">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationReader.CollectionFixup.Collection">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationReader.CollectionFixup.CollectionItems">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromByteArrayBase64(System.Byte[])">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromByteArrayHex(System.Byte[])">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromDateTime(System.DateTime)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromDate(System.DateTime)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromTime(System.DateTime)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromChar(System.Char)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromEnum(System.Int64,System.String[],System.Int64[])">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromXmlName(System.String)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromXmlNCName(System.String)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromXmlNmToken(System.String)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromXmlNmTokens(System.String)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteXsiType(System.String,System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteTypedPrimitive(System.String,System.String,System.Object,System.Boolean)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromXmlQualifiedName(System.Xml.XmlQualifiedName)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteStartElement(System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteStartElement(System.String,System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteStartElement(System.String,System.String,System.Boolean)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteStartElement(System.String,System.String,System.Object)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteStartElement(System.String,System.String,System.Object,System.Boolean)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullTagEncoded(System.String)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullTagEncoded(System.String,System.String)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullTagLiteral(System.String)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullTagLiteral(System.String,System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteEmptyTag(System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteEmptyTag(System.String,System.String)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteEndElement">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteEndElement(System.Object)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteSerializable(System.Xml.Serialization.IXmlSerializable,System.String,System.String,System.Boolean)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullableStringEncoded(System.String,System.String,System.String,System.Xml.XmlQualifiedName)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullableStringLiteral(System.String,System.String,System.String)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullableStringEncodedRaw(System.String,System.String,System.String,System.Xml.XmlQualifiedName)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullableStringEncodedRaw(System.String,System.String,System.Byte[],System.Xml.XmlQualifiedName)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullableStringLiteralRaw(System.String,System.String,System.String)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullableStringLiteralRaw(System.String,System.String,System.Byte[])">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullableQualifiedNameEncoded(System.String,System.String,System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullableQualifiedNameLiteral(System.String,System.String,System.Xml.XmlQualifiedName)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementEncoded(System.Xml.XmlNode,System.String,System.String,System.Boolean,System.Boolean)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementLiteral(System.Xml.XmlNode,System.String,System.String,System.Boolean,System.Boolean)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.CreateUnknownTypeException(System.Object)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.CreateUnknownTypeException(System.Type)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.CreateMismatchChoiceException(System.String,System.String,System.String)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.CreateUnknownAnyElementException(System.String,System.String)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteReferencingElement(System.String,System.String,System.Object)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteReferencingElement(System.String,System.String,System.Object,System.Boolean)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteId(System.Object)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteXmlAttribute(System.Xml.XmlNode)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteAttribute(System.String,System.String,System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteAttribute(System.String,System.String,System.Byte[])">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteAttribute(System.String,System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteAttribute(System.String,System.Byte[])">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteAttribute(System.String,System.String,System.String,System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteValue(System.String)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteValue(System.Byte[])">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteStartDocument">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementString(System.String,System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementString(System.String,System.String,System.String)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementString(System.String,System.String,System.Xml.XmlQualifiedName)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementString(System.String,System.String,System.String,System.Xml.XmlQualifiedName)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementStringRaw(System.String,System.String)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementStringRaw(System.String,System.Byte[])">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementStringRaw(System.String,System.String,System.String)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementStringRaw(System.String,System.String,System.Byte[])">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementStringRaw(System.String,System.String,System.Xml.XmlQualifiedName)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementStringRaw(System.String,System.Byte[],System.Xml.XmlQualifiedName)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementStringRaw(System.String,System.String,System.String,System.Xml.XmlQualifiedName)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementStringRaw(System.String,System.String,System.Byte[],System.Xml.XmlQualifiedName)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementQualifiedName(System.String,System.Xml.XmlQualifiedName)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementQualifiedName(System.String,System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementQualifiedName(System.String,System.String,System.Xml.XmlQualifiedName)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementQualifiedName(System.String,System.String,System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.AddWriteCallback(System.Type,System.String,System.String,System.Xml.Serialization.XmlSerializationWriteCallback)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WritePotentiallyReferencingElement(System.String,System.String,System.Object)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WritePotentiallyReferencingElement(System.String,System.String,System.Object,System.Type)">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WritePotentiallyReferencingElement(System.String,System.String,System.Object,System.Type,System.Boolean)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WritePotentiallyReferencingElement(System.String,System.String,System.Object,System.Type,System.Boolean,System.Boolean)">
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.InitCallbacks">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteReferencedElements">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.TopLevelElement">
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationWriter.Writer">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationWriter.Namespaces">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlSerializer">
      <summary>
        <para>Serializes and deserializes objects into and from
      XML documents. The <see cref="T:System.Xml.Serialization.XmlSerializer" /> enables you to control how objects are
      encoded into XML.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class that can serialize objects of
   type <see cref="T:System.Object" /> into XML
   document instances, and vice versa. Each object to be serialized can itself
   contain instances of classes, which this overload can override with other classes. This overload
   also specifies the default namespace for all the
   XML elements, and the class to use as the XML root element.</para>
      </summary>
      <param name="type">The type of the object that this <see cref="T:System.Xml.Serialization.XmlSerializer" /> can serialize. </param>
      <param name=" overrides">An <see cref="T:System.Xml.Serialization.XmlAttributeOverrides" /> .</param>
      <param name=" extraTypes">A <see cref="T:System.Type" /> array of additional object types to serialize. </param>
      <param name=" root">An <see cref="T:System.Xml.Serialization.XmlRootAttribute" /> that defines the XML root element properties.</param>
      <param name=" defaultNamespace">The default namespace of all XML elements in the XML document.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class that can serialize objects of the specified type into
   XML documents, and vice versa. Specifies the default
   namespace for all the XML elements.</para>
      </summary>
      <param name="type">The type of the object that this <see cref="T:System.Xml.Serialization.XmlSerializer" /> can serialize. </param>
      <param name="defaultNamespace">The default namespace to use for all the XML elements.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlRootAttribute)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class that can serialize objects of
   the specified type into XML documents, and vice versa. Specifies the
   class to use as the XML root element.</para>
      </summary>
      <param name="type">The type of the object that this <see cref="T:System.Xml.Serialization.XmlSerializer" /> can serialize. </param>
      <param name="root">An <see cref="T:System.Xml.Serialization.XmlRootAttribute" /> that represents the XML root element.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Type[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class that can serialize objects of
   the specified type into XML documents, and vice versa. If a property or
   field returns an array, the <paramref name="extraTypes" />
   parameter specifies objects
   that can be inserted into the array.</para>
      </summary>
      <param name="type">The type of the object that this <see cref="T:System.Xml.Serialization.XmlSerializer" /> can serialize.</param>
      <param name="extraTypes">A <see cref="T:System.Type" /> array of additional object types to serialize.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class that can serialize objects of
   the specified type into XML documents, and vice versa. Each object to be
   serialized can itself contain instances of classes, which this overload can override
   with other classes.</para>
      </summary>
      <param name="type">The type of the object to serialize.</param>
      <param name="overrides">An <see cref="T:System.Xml.Serialization.XmlAttributeOverrides" /> .</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Xml.Serialization.XmlTypeMapping)">
      <summary>
        <para>Initializes an instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class using an object
   that maps one type to another.</para>
      </summary>
      <param name="xmlTypeMapping">An <see cref="T:System.Xml.Serialization.XmlTypeMapping" /> that maps one type to another. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class that can serialize objects of
   the specified type into XML documents, and vice versa.</para>
      </summary>
      <param name="type">The type of the object that this <see cref="T:System.Xml.Serialization.XmlSerializer" /> can serialize.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)">
      <summary>
        <para>Serializes the specified <see cref="T:System.Object" /> and writes the XML document to a file using
   the specified <see cref="T:System.IO.TextWriter" />.</para>
      </summary>
      <param name="textWriter">The <see cref="T:System.IO.TextWriter" /> used to write the XML document.</param>
      <param name="o">The <see cref="T:System.Object" /> to serialize.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
      <summary>
        <para>Serializes the specified <see cref="T:System.Object" /> and writes the XML document to a file using
   the specified <see cref="T:System.IO.TextWriter" /> , referencing the specified namespaces.</para>
      </summary>
      <param name="textWriter">The <see cref="T:System.IO.TextWriter" /> used to write the XML document.</param>
      <param name="o">The <see cref="T:System.Object" /> to serialize.</param>
      <param name="namespaces">The <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> containing namespaces for the generated XML document. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.Stream,System.Object)">
      <summary>
        <para>Serializes the specified <see cref="T:System.Object" /> and writes the XML document to a file using
   the specified <see cref="T:System.IO.Stream" />.</para>
      </summary>
      <param name="stream">The <see cref="T:System.IO.Stream" /> used to write the XML document.</param>
      <param name="o">The <see cref="T:System.Object" /> to serialize.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.Stream,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
      <summary>
        <para>Serializes the specified <see cref="T:System.Object" /> and writes the XML document to a file using
   the specified <see cref="T:System.IO.Stream" />, referencing the specified namespaces.</para>
      </summary>
      <param name="stream">The <see cref="T:System.IO.Stream" /> used to write the XML document.</param>
      <param name="o">The <see cref="T:System.Object" /> to serialize.</param>
      <param name="namespaces">The <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> referenced by the object. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object)">
      <summary>
        <para>Serializes the specified <see cref="T:System.Object" /> and writes the XML document to a file using
   the specified <see cref="T:System.Xml.XmlWriter" />.</para>
      </summary>
      <param name="xmlWriter">The <see cref="T:System.xml.XmlWriter" /> used to write the XML document.</param>
      <param name="o">The <see cref="T:System.Object" /> to serialize.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
      <summary>
        <para>Serializes the specified <see cref="T:System.Object" /> and writes the XML document to a file using
   the specified <see cref="T:System.Xml.XmlWriter" /> , referencing the specified namespaces.</para>
      </summary>
      <param name="xmlWriter">The <see cref="T:System.xml.XmlWriter" /> used to write the XML document.</param>
      <param name=" o">The <see cref="T:System.Object" /> to serialize.</param>
      <param name=" namespaces">The <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> referenced by the object. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)">
      <summary>
        <para>Deserializes the XML document contained by the specified <see cref="T:System.IO.Stream" />.</para>
      </summary>
      <param name="stream">The <see cref="T:System.IO.Stream" /> containing the XML document to deserialize.</param>
      <returns>
        <para>The <see cref="T:System.Object" />
being deserialized.</para>
      </returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.TextReader)">
      <summary>
        <para>Deserializes the XML document contained by the specified <see cref="T:System.IO.TextReader" />.</para>
      </summary>
      <param name="textReader">The <see cref="T:System.IO.TextReader" /> containing the XML document to deserialize.</param>
      <returns>
        <para>The <see cref="T:System.Object" />
being deserialized.</para>
      </returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader)">
      <summary>
        <para>Deserializes the XML document contained by the specified <see cref="T:System.xml.XmlReader" />.</para>
      </summary>
      <param name="xmlReader">The <see cref="T:System.xml.XmlReader" /> containing the XML document to deserialize.</param>
      <returns>
        <para>The <see cref="T:System.Object" />
being deserialized.</para>
      </returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.CanDeserialize(System.Xml.XmlReader)">
      <summary>
        <para>Gets a value indicating whether this <see cref="T:System.Xml.Serialization.XmlSerializer" /> can deserialize a specified
   XML document.</para>
      </summary>
      <param name="xmlReader">An <see cref="T:System.Xml.XmlReader" /> that points to the document to deserialize.</param>
      <returns>
        <para>
          <see langword="true" /> if an
   this <see cref="T:System.Xml.Serialization.XmlSerializer" /> can deserialize the object which
   the <see cref="T:System.Xml.XmlReader" /> points to; otherwise,
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.FromTypes(System.Type[])">
      <summary>
        <para>Returns an array of <see cref="T:System.Xml.Serialization.XmlSerializer" /> objects created from an array of
   types.</para>
      </summary>
      <param name="types">An array of <see cref="T:System.Type" /> objects.</param>
      <returns>
        <para>An array of <see cref="T:System.Xml.Serialization.XmlSerializer" /> objects.</para>
      </returns>
    </member>
    <member name="E:System.Xml.Serialization.XmlSerializer.UnknownNode">
      <summary>
        <para>Occurs when the <see cref="T:System.Xml.Serialization.XmlSerializer" /> encounters an XML node of unknown type during deserialization.</para>
      </summary>
    </member>
    <member name="E:System.Xml.Serialization.XmlSerializer.UnknownAttribute">
      <summary>
        <para>Occurs when the <see cref="T:System.Xml.Serialization.XmlSerializer" /> encounters an XML attribute of unknown
   type during deserialization.</para>
      </summary>
    </member>
    <member name="E:System.Xml.Serialization.XmlSerializer.UnknownElement">
      <summary>
        <para>Occurs when the <see cref="T:System.Xml.Serialization.XmlSerializer" /> encounters an XML element of unknown
   type during deserialization.</para>
      </summary>
    </member>
    <member name="E:System.Xml.Serialization.XmlSerializer.UnreferencedObject">
      <summary>
        <para>Occurs during deserialization of a SOAP-encoded XML
      stream, when the <see cref="T:System.Xml.Serialization.XmlSerializer" /> encounters a recognized type that is
      not used (unreferenced).</para>
      </summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlSerializerNamespaces">
      <summary>
        <para> Contains the XML namespaces and prefixes that the
   <see cref="T:System.Xml.Serialization.XmlSerializer" /> uses to generate qualified names in an XML-document
      instance.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerNamespaces.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerNamespaces.#ctor(System.Xml.XmlQualifiedName[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> class.</para>
      </summary>
      <param name="namespaces">An array of <see cref="T:System.Xml.XmlQualifiedName" /> objects.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerNamespaces.Add(System.String,System.String)">
      <summary>
        <para> Adds a prefix-namespace pair to an <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> object.</para>
      </summary>
      <param name="prefix">The prefix associated with an XML namespace.</param>
      <param name=" ns">An XML namespace.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerNamespaces.ToArray">
      <summary>
        <para>Gets the array of prefix-namespace pairs in an <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> object.</para>
      </summary>
      <returns>
        <para>An array of <see cref="T:System.Xml.XmlQualifiedName" /> objects that are used as qualified names in an
   XML document.</para>
      </returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializerNamespaces.Count">
      <summary>
        <para>Gets the number of prefix-namespace pairs in the collection.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlTextAttribute">
      <summary>
        <para>Indicates to the <see cref="T:System.Xml.Serialization.XmlSerializer" /> that the member should be treated as
   XML text when the containing class is serialized or deserialized.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlTextAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlTextAttribute" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlTextAttribute.#ctor(System.Type)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlTextAttribute" /> class.</para>
      </summary>
      <param name="type">The <see cref="T:System.Type" /> of the member to be serialized.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlTextAttribute.Type">
      <summary>
        <para>Gets or sets the type of the member.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlTextAttribute.DataType">
      <summary>
        <para> Gets or sets the XML Schema definition language (XSD) data type of the text
      generated by the <see cref="T:System.Xml.Serialization.XmlSerializer" />.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlTypeAttribute">
      <summary>
        <para>Controls the XML schema generated when the attribute
      target is serialized by the <see cref="T:System.Xml.Serialization.XmlSerializer" /> .</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlTypeAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlTypeAttribute" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlTypeAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlTypeAttribute" /> class, specifying the
   name of the XML type.</para>
      </summary>
      <param name="typeName">The name of the XML type that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> generates when it serializes the class instance (and recognizes when it deserializes the class instance).</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlTypeAttribute.IncludeInSchema">
      <summary>
        <para> Gets or sets a value indicating whether to include
      the type in XML schema documents.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlTypeAttribute.TypeName">
      <summary>
        <para> Gets or sets the name of the XML type.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlTypeAttribute.Namespace">
      <summary>
        <para>Gets or sets the namespace of the XML type.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlTypeMapping">
      <summary>
        <para>Contains a mapping of one type to another.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlTypeMapping.ElementName">
      <summary>
        <para>Gets the XML element name of the mapped object.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlTypeMapping.Namespace">
      <summary>
        <para>Gets the XML namespace of the mapped object.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlTypeMapping.TypeName">
      <summary>
        <para>Gets the type name of the mapped object.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlTypeMapping.TypeFullName">
      <summary>
        <para>The fully qualified type name, including the namespace
      (or namespaces) and type.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlAttributeEventHandler">
      <summary>
        <para>Represents the method that will handle the <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownAttribute" /></para>
      </summary>
      <param name=" sender">The source of the event.</param>
      <param name="e">An <see cref="T:System.Xml.Serialization.XmlAttributeEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:System.Xml.Serialization.XmlAttributeEventArgs">
      <summary>
        <para>Provides data for the <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownAttribute" /> event.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeEventArgs.ObjectBeingDeserialized">
      <summary>
        <para> Gets the object being deserialized.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeEventArgs.Attr">
      <summary>
        <para>Gets an object that represents the unknown XML attribute.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeEventArgs.LineNumber">
      <summary>
        <para>Gets the line number of the unknown XML attribute.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeEventArgs.LinePosition">
      <summary>
        <para>Gets the position in the line of the unknown XML attribute.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlElementEventHandler">
      <summary>
        <para>Represents the method that will handle the <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownElement" /> event of an <see cref="T:System.Xml.Serialization.XmlSerializer" />
.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlElementEventArgs">
      <summary>
        <para>Provides data for the <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownElement" /> event.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementEventArgs.ObjectBeingDeserialized">
      <summary>
        <para>Gets the object the <see cref="T:System.Xml.Serialization.XmlSerializer" /> is deserializing.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementEventArgs.Element">
      <summary>
        <para>Gets the object that represents the unknown XML element.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementEventArgs.LineNumber">
      <summary>
        <para>Gets the line number where the unknown element was
      encountered if the XML reader is an <see cref="T:System.Xml.XmlTextReader" /> .</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementEventArgs.LinePosition">
      <summary>
        <para>Gets the place in the line where the unknown element
      occurs if the XML reader is an <see cref="T:System.Xml.XmlTextReader" /> .</para>
      </summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlNodeEventHandler">
      <summary>
        <para>Represents the method that will handle the <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownNode" /> event of an <see cref="T:System.Xml.Serialization.XmlSerializer" />
.</para>
      </summary>
      <param name="sender">The source of the event.</param>
      <param name=" e">An <see cref="T:System.Xml.Serialization.XmlNodeEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:System.Xml.Serialization.XmlNodeEventArgs">
      <summary>
        <para>Provides data for the <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownNode" /> event.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlNodeEventArgs.ObjectBeingDeserialized">
      <summary>
        <para> Gets the object being deserialized.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlNodeEventArgs.NodeType">
      <summary>
        <para>Gets the type of the XML node being deserialized.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlNodeEventArgs.Name">
      <summary>
        <para>Gets the name of the XML node being deserialized.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlNodeEventArgs.LocalName">
      <summary>
        <para>Gets the XML local name of the XML node being deserialized.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlNodeEventArgs.NamespaceURI">
      <summary>
        <para>Gets the namespace URI that is associated with the XML node being deserialized.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlNodeEventArgs.Text">
      <summary>
        <para>Gets the text of the XML node being deserialized.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlNodeEventArgs.LineNumber">
      <summary>
        <para>Gets the line number of the unknown XML node.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlNodeEventArgs.LinePosition">
      <summary>
        <para>Gets the position in the line of the unknown XML node.</para>
      </summary>
    </member>
    <member name="T:System.Xml.Serialization.UnreferencedObjectEventHandler">
      <summary>
        <para>Represents the method that will handle the <see cref="E:System.Xml.Serialization.XmlSerializer.UnreferencedObject" /> event of an <see cref="T:System.Xml.Serialization.XmlSerializer" /> .</para>
      </summary>
      <param name="sender">The source of the event.</param>
      <param name=" e">An <see cref="T:System.Xml.Serialization.UnreferencedObjectEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:System.Xml.Serialization.UnreferencedObjectEventArgs">
      <summary>
        <para>Provides data for the known, but unreferenced, object 
      found in an encoded SOAP XML stream during deserialization.</para>
      </summary>
    </member>
    <member name="M:System.Xml.Serialization.UnreferencedObjectEventArgs.#ctor(System.Object,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Xml.Serialization.UnreferencedObjectEventArgs" /> class.</para>
      </summary>
      <param name="o">The unreferenced object.</param>
      <param name=" id">A unique string used to identify the unreferenced object.</param>
      <returns>
        <para>An <see cref="T:System.Xml.Serialization.UnreferencedObjectEventArgs" /> that contains
   information about the unreferenced object.</para>
      </returns>
    </member>
    <member name="P:System.Xml.Serialization.UnreferencedObjectEventArgs.UnreferencedObject">
      <summary>
        <para>Gets the deserialized, but unreferenced, object.</para>
      </summary>
    </member>
    <member name="P:System.Xml.Serialization.UnreferencedObjectEventArgs.UnreferencedId">
      <summary>
        <para>Gets the ID of the object.</para>
      </summary>
    </member>
  </members>
</doc>