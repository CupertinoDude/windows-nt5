<doc>
	<assembly>
		<name>Microsoft.VisualBasic</name>
		<version>7.0.0.0</version>
	</assembly>
	<members>
		<member name="T:Microsoft.VisualBasic.AppWinStyle">
			<summary>The AppWinStyle enumeration contains constants used by the Shell function to control the style of an application window. These constants can be used anywhere in your code.
		</summary>
		</member>
		<member name="T:Microsoft.VisualBasic.CallType">
			<summary>The CallType enumeration defines constants used to identify the call type used by the CallByName function.
		</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.CallType.Get">
			<summary>A property value is being retrieved.</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.CallType.Method">
			<summary>A method is being invoked.</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.CallType.Set">
			<summary>A property value is being determined.</summary>
		</member>
		<member name="T:Microsoft.VisualBasic.Collection">
			<summary>The Collection class contains procedures used to perform operations on the Collection object.
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
			<param name="Item">An object of any type that specifies the member to add to the collection.
		</param>
			<param name="Key">A unique String expression that specifies a key string that can be used instead of a positional index to access a member of the collection.
		</param>
			<param name="Before">The member to be added is placed in the collection before the member identified by the Before argument.</param>
			<param name="After">The member to be added is placed in the collection after the member identified by the After argument. </param>
			<summary>Adds a member to a Collection object.
		</summary>
		</member>
		<member name="P:Microsoft.VisualBasic.Collection.Count">
			<summary>Returns an integer containing the number of objects in a collection. Read-only.
		</summary>
		</member>
		<member name="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
			<summary>Returns a specific member of a Collection object either by position or by key.
		</summary>
			<param name="Index">Numeric Expression that specifies the position of a member of the collection. Index must be a number from 1 to the value of the collection's Count property. </param>
		</member>
		<member name="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
			<summary>Returns a specific member of a Collection object either by position or by key.
		</summary>
			<param name="Index">Expression that specifies the position of a member of the collection, it must correspond to the key value specified when the member referred to was added to the collection.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Collection.Remove(System.Int32)">
			<param name="Index">Numeric expression that specifies the position of a member of the collection. Index must be a number from 1 to the value of the collection's Count property. 
		</param>
			<summary>Removes a member from a Collection object.
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.Collection.Remove(System.String)">
			<param name="Key">Key must correspond to the Key argument specified when the member referred to was added to the collection.
		</param>
			<summary>Removes a member from a Collection object.
		</summary>
		</member>
		<member name="T:Microsoft.VisualBasic.CompareMethod">
			<summary>The CompareMethod enumeration contains constants used to determine the way strings are compared when using the Instr and StrComp functions. These constants can be used anywhere in your code.
		</summary>
		</member>
		<member name="T:Microsoft.VisualBasic.Constants">
			<summary>The Constants module contains miscellaneous constants. These constants can be used anywhere in your code.
		</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.vbAbort">
			<summary> vbAbort = MsgBoxResult.Abort - Abort button was pressed.
		</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.vbAbortRetryIgnore">
			<summary>
				 vbIgnore = MsgBoxResult.Ignore - Ignore button was pressed.
			</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.vbApplicationModal">
			<summary>vbApplicationModal = MsgBoxStyle.ApplicationModal - Application modal message box (default).
		</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.VbArchive">
			<summary>VbArchive=FileAttribute.Archive - File has changed since last backup.
		</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.vbBack">
			<summary>vbBack - Chr(8) Backspace character.
		</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.VbBinaryCompare">
			<summary>VbBinaryCompare = CompareMethod.Binary - Performs a binary comparison.
		</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.vbCancel">
			<summary>vbCancel = MsgBoxResult.Cancel - Cancel button was pressed.
		</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.vbCr">
			<summary>vbCr - Chr(13) Carriage return character.
		</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.vbCritical">
			<summary>vbCritical = MsgBoxStyle.Critical - Critical message.
		</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.vbCrLf">
			<summary>vbCrLf - Chr(13) + Chr(10) Carriage return/linefeed character combination.
		</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.VbDate">
			<summary>VbDate = VariantType.Date - The variant contains a Date value
		</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.vbDefaultButton1">
			<summary>vbDefaultButton1 = MsgBoxStyle.DefaultButton1 - First button is default (default).
		</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.vbDefaultButton2">
			<summary>vbDefaultButton2 = MsgBoxStyle.DefaultButton2 - Second button is default.
		</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.vbDefaultButton3">
			<summary>vbDefaultButton3 = MsgBoxStyle.DefaultButton3 - Third button is default.
		</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.VbDirectory">
			<summary>VbDirectory = FileAttribute.Directory - Directory or folder.
		</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.vbExclamation">
			<summary>vbExclamation = MsgBoxStyle.Exclamation - Warning message.
		</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.VbFalse">
			<summary>vbFalse = Tristate.False. Tristate value of False
		</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.VbFirstFourDays">
			<summary>VbFirstFourDays = FirstWeekOfYear.FirstFourDays - The first week that has at least four days in the new year.
		</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.VbFirstFullWeek">
			<summary>VbFirstFullWeek = FirstWeekOfYear.FirstFullWeek - The first full week of the year
		</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.VbFirstJan1">
			<summary>VbFirstJan1 = FirstWeekOfYear.Jan1 - The week in which January 1 occurs (default)
		</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.vbFormFeed">
			<summary>vbFormFeed - Chr(12).
		</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.VbFriday">
			<summary>VbFriday = FirstDayOfWeek.Friday - Friday
		</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.VbGeneralDate">
			<summary>VbGeneralDate = DateFormat.GeneralDate - For real numbers, displays a date and time. If the number has no fractional part, displays only a date. If the number has no integer part, displays time only.
		</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.VbGet">
			<summary>VbGet = CallType.Get - A property value is being retrieved.
		</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.VbHidden">
			<summary>VbHidden = FileAttribute.Hidden - Hidden.
		</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.vbHide">
			<summary>vbHide = AppWinStyle.Hide - Window is hidden and focus is passed to the hidden window.
		</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.VbHiragana">
			<summary>VbHiragana = VbStrConv.Hirigana - Converts Katakana characters in the string to Hiragana characters. Applies to Japanese locale only.
		</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.vbIgnore">
			<summary>vbIgnore = MsgBoxResult.Ignore - Ignore button was pressed.</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.vbInformation">
			<summary>vbInformation = MsgBoxStyle.Information - Information message.</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.vbLf">
			<summary>vbLf - Chr(10) Linefeed character.</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.VbLongDate">
			<summary>VbLongDate = DateFormat.LongDate - Displays a date using the long-date format specified in your computer's regional settings.</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.VbLongTime">
			<summary>VbLongTime = DateFormat.LongTime - Displays a time using the long-time format specified in your computer's regional settings.</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.VbLowerCase">
			<summary>VbLowerCase = VbStrConv.LowerCase - Converts the string to lowercase characters.</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.vbMaximizedFocus">
			<summary>vbMaximizedFocus = AppWinStyle.MaximizedFocus - Window is maximized with focus.</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.VbMethod">
			<summary>VbMethod = CallType.Method - A method is being invoked.</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.vbMinimizedFocus">
			<summary>vbMinimizedFocus = AppWinStyle.MinimizedFocus - Window is displayed as an icon with focus.</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.vbMinimizedNoFocus">
			<summary>vbMinimizedNoFocus = AppWinStyle.MinimizedNoFocus - Window is displayed as an icon. The currently active window remains active.</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.VbMonday">
			<summary>VbMonday = FirstDayOfWeek.Monday - Monday</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.vbMsgBoxRight">
			<summary>vbMsgBoxRight = MsgBoxStyle.MsgBoxRight - Right-aligned text.</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.vbMsgBoxRtlReading">
			<summary>vbMsgBoxRtlReading = MsgBoxStyle.MsgBoxRtlReading - Right-to-left reading text (Hebrew and Arabic systems).</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.vbMsgBoxSetForeground">
			<summary>vbMsgBoxSetForeground = MsgBoxStyle.MsgBoxSetForeground - Foreground message box window.</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.VbNarrow">
			<summary>VbNarrow = VbStrConv.Narrow - Converts wide (double-byte) characters in the string to narrow (single-byte) characters. Applies to Asian locales.</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.vbNewLine">
			<summary>vbNewLine = Chr(13) + Chr(10) - New line character.</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.vbNo">
			<summary>vbNo = MsgBoxResult.No - No button was pressed.</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.VbNormal">
			<summary>VbNormal = FileAttribute.Normal - Normal (default for Dir and SetAttr).</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.vbNormalFocus">
			<summary>vbNormalFocus = AppWinStyle.NormalFocus - Window has focus and is restored to its original size and position.</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.vbNormalNoFocus">
			<summary>vbNormalNoFocus = AppWinStyle.NormalNoFocus - Window is restored to its most recent size and position. The currently active window remains active.</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.vbNullChar">
			<summary> vbNullChar = Chr(0) - Character having value 0.</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.vbNullString">
			<summary>vbNullString - String having value 0.  Not the same as a zero-length string (""); used for calling external procedures.</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.vbObjectError">
			<summary>vbObjectError = -2147221504 - Error number. User-defined error numbers should be greater than this value. For example: Err.Raise(Number) = ObjectError + 1000</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.vbOKCancel">
			<summary>vbCancel = MsgBoxResult.Cancel - Cancel button was pressed.</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.vbOKOnly">
			<summary>vbOKOnly = MsgBoxResultOKOnly - OK button only (default).</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.VbProperCase">
			<summary>VbProperCase = VbStrConv.ProperCase - Converts the first letter of every word in the string to uppercase.</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.vbQuestion">
			<summary>vbQuestion = MsgBoxStyle.Question - Warning query.</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.VbReadOnly">
			<summary>VbReadOnly = FileAttribute.ReadOnly - Read only.</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.vbRetry">
			<summary>vbRetry = MsgBoxResult.Retry - Retry button was pressed.</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.vbRetryCancel">
			<summary>vbCancel = MsgBoxResult.Cancel - Cancel button was pressed.</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.VbSaturday">
			<summary>VbSaturday = FirstDayOfWeek.Saturday - Saturday</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.VbSet">
			<summary>VbSet = CallType.Set - A property value is being determined.</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.VbShortDate">
			<summary>VbShortDate = DateFormat.ShortDate - Displays a date using the short-date format specified in your computer's regional settings.</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.VbShortTime">
			<summary>VbShortTime = DateFormat.ShortTime - Displays a time using the short-time format specified in your computer's regional settings.</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.VbSunday">
			<summary>VbSunday = FirstDayOfWeek.Sunday - Sunday</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.VbSystem">
			<summary>VbSystem = FileAttribute.System - System file.</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.vbTab">
			<summary>vbTab = Chr(9) - Tab character.</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.VbTextCompare">
			<summary>VbTextCompare = CompareMethod.TextCompare - Performs a textual comparison.</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.VbThursday">
			<summary>VbThursday = FirstDayOfWeek.Thursday - Thursday</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.VbTrue">
			<summary>VbTrue = Tristate.True = –1 </summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.VbTuesday">
			<summary>VbTuesday = FirstDayOfWeek.Tuesday - Tuesday</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.VbUpperCase">
			<summary>VbUpperCase = VbStrConv.UpperCase - Converts the string to uppercase characters.</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.VbUseDefault">
			<summary>VbUseDefault = TriState.UseDefault -  Default setting</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.VbUseSystem">
			<summary>VbUseSystem = FirstWeekOfYear.System - The day of the week specified in your system settings as the first day of the week</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.VbUseSystemDayOfWeek">
			<summary>VbUseSystemDayOfWeek = FirstDayOfWeek.System - The first day of the week as specified in your system settings </summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.vbVerticalTab">
			<summary>vbVerticalTab = Chr(11) Not useful in Microsoft Windows.</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.VbVolume">
			<summary>VbVolume = FileAttribute.Volume - Volume label.</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.VbWednesday">
			<summary>VbWednesday = FirstDayOfWeek.Wednesday - Wednesday</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.VbWide">
			<summary>VbWide = .VbStrConv.Wide - Converts narrow (single-byte) characters in the string to wide (double-byte) characters. Applies to Asian locales.</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.vbYes">
			<summary>vbYes = MsgBoxResult.Yes - Yes button was pressed</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.vbYesNo">
			<summary>vbNo = No - MsgBoxResult.No button was pressed.</summary>
		</member>
		<member name="F:Microsoft.VisualBasic.Constants.vbYesNoCancel">
			<summary>vbCancel = MsgBoxResult.Cancel - Cancel button was pressed.</summary>
		</member>
		<member name="T:Microsoft.VisualBasic.ControlChars">
			<summary>The ControlChars class contains constants used as control characters. These constants can be used anywhere in your code.
		</summary>
		</member>
		<member name="T:Microsoft.VisualBasic.Conversion">
			<summary>The Conversion module contains the procedures used to perform various conversion operations.
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)">
			<summary>Return the integer portion of a number.
		</summary>
			<param name="number">A number of type Decimal or any valid numeric expression. 
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)">
			<summary>Return the integer portion of a number.
		</summary>
			<param name="number">A number of type Double or any valid numeric expression. 
		</param>
			summary
		</member>
		<member name="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)">
			<summary>Return the integer portion of a number.
		</summary>
			<param name="number">A number of type Short or any valid numeric expression. 
		</param>
			summary
		</member>
		<member name="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)">
			<summary>Return the integer portion of a number.
		</summary>
			<param name="number">A number of type Integer or any valid numeric expression. 
		</param>
			summary
		</member>
		<member name="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)">
			<summary>Return the integer portion of a number.
		</summary>
			<param name="number">A number of type Long or any valid numeric expression. 
		</param>
			summary
		</member>
		<member name="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)">
			<summary>Return the integer portion of a number.
		</summary>
			<param name="number">A number of type Object or any valid numeric expression. If number contains Nothing, Nothing is returned.
		</param>
			summary
		</member>
		<member name="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)">
			<summary>Return the integer portion of a number.
		</summary>
			<param name="number">A number of type Single or any valid numeric expression. 
		</param>
			summary
		</member>
		<member name="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)">
			<summary>Returns a String representing the hexadecimal value of a number.
		</summary>
			<param name="Number">Any valid numeric expression
		</param>
			summary
		</member>
		<member name="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)">
			<summary>Returns a String representing the hexadecimal value of a number.
		</summary>
			<param name="Number">Any valid numeric expression
		</param>
			summary
		</member>
		<member name="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)">
			<summary>Returns a String representing the hexadecimal value of a number.
		</summary>
			<param name="Number">Any valid numeric expression
		</param>
			summary
		</member>
		<member name="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)">
			<summary>Returns a String representing the hexadecimal value of a number.
		</summary>
			<param name="Number">Any valid numeric expression
		</param>
			summary
		</member>
		<member name="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)">
			<summary>Returns a String representing the hexadecimal value of a number.
		</summary>
			<param name="Number">Any valid numeric expression or String expression.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)">
			<summary>Return the integer portion of a number.
		</summary>
			<param name="number">A number of type Decimal or any valid numeric expression.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Conversion.Int(System.Double)">
			<summary>Return the integer portion of a number.
		</summary>
			<param name="number">A number of type Double or any valid numeric expression.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)">
			<summary>Return the integer portion of a number.
		</summary>
			<param name="number">A number of type Short or any valid numeric expression.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)">
			<summary>Return the integer portion of a number.
		</summary>
			<param name="number">A number of type Integer or any valid numeric expression.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)">
			<summary>Return the integer portion of a number.
		</summary>
			<param name="number">A number of type Long or any valid numeric expression.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Conversion.Int(System.Object)">
			<summary>Return the integer portion of a number.
		</summary>
			<param name="number">A number of type Object or any valid numeric expression. If number contains Nothing, Nothing is returned.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Conversion.Int(System.Single)">
			<summary>Return the integer portion of a number.
		</summary>
			<param name="number">A number of type Single or any valid numeric expression.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)">
			<summary>Returns a string representing the octal value of a number.
		</summary>
			<param name="Number">Any valid numeric expression.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)">
			<summary>Returns a string representing the octal value of a number.
		</summary>
			<param name="Number">Any valid numeric expression.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)">
			<summary>Returns a string representing the octal value of a number.
		</summary>
			<param name="Number">Any valid numeric expression.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)">
			<summary>Returns a string representing the octal value of a number.
		</summary>
			<param name="Number">Any valid numeric expression.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)">
			<summary>Returns a string representing the octal value of a number.
		</summary>
			<param name="Number">Any valid numeric expression.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Conversion.Str(System.Object)">
			<summary>Returns a String representation of a number.
		</summary>
			<param name="number">An Object containing any valid numeric expression.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Conversion.Val(System.Char)">
			<summary>Returns the numbers contained in a string as a numeric value of appropriate type.
		</summary>
			<param name="Expression">Any valid String expression.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Conversion.Val(System.Object)">
			<summary>Returns the numbers contained in a string as a numeric value of appropriate type.
		</summary>
			<param name="Expression">Any valid String expression.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Conversion.Val(System.String)">
			<summary>Returns the numbers contained in a string as a numeric value of appropriate type.
		</summary>
			<param name="InputStr">Any valid String expression.
		</param>
		</member>
		<member name="T:Microsoft.VisualBasic.DateAndTime">
			<summary>The DateTime module contains the procedures and properties used in date and time operations.
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.DateAndTime.DateAdd(Microsoft.VisualBasic.DateInterval,System.Double,System.DateTime)">
			<summary>Returns a Date containing a date and time value to which a specified time interval has been added.
		</summary>
			<param name="Interval">DateInterval enumeration value representing the time interval you want to add.
		</param>
			<param name="Number">Double. Floating-point expression representing the number of intervals you want to add. Number can be positive (to get date/time values in the future) or negative (to get date/time values in the past).
		</param>
			<param name="DateValue">Date. An expression representing the date and time to which the interval is to be added. DateValue itself is not changed in the calling program.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.DateAndTime.DateAdd(System.String,System.Double,System.Object)">
			<summary>Returns a Date containing a date and time value to which a specified time interval has been added.
		</summary>
			<param name="Interval">DateInterval String expression representing the time interval you want to add.
		</param>
			<param name="Number">Double. Floating-point expression representing the number of intervals you want to add. Number can be positive (to get date/time values in the future) or negative (to get date/time values in the past).
		</param>
			<param name="DateValue">Date. An expression representing the date and time to which the interval is to be added. DateValue itself is not changed in the calling program.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.DateAndTime.DateDiff(Microsoft.VisualBasic.DateInterval,System.DateTime,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)">
			<summary>Returns a Long specifying the number of time intervals between two Date values.
		</summary>
			<param name="Interval">DateInterval enumeration value representing the time interval you want to use as the unit of difference between Date1 and Date2.
		</param>
			<param name="Date1">The value of Date1 is subtracted from the value of Date2 to produce the difference. 
		</param>
			<param name="Date2">The value of Date1 is subtracted from the value of Date2 to produce the difference. 
		</param>
			<param name="DayOfWeek">A value chosen from the FirstDayOfWeek enumeration that specifies the first day of the week. 
		</param>
			<param name="WeekOfYear">A value chosen from the FirstWeekOfYear enumeration that specifies the first week of the year. 
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.DateAndTime.DateDiff(System.String,System.Object,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)">
			<summary>Returns a Long specifying the number of time intervals between two Date values.
		</summary>
			<param name="Interval">String expression representing the time interval you want to use as the unit of difference between Date1 and Date2.</param>
			<param name="Date1">The value of Date1 is subtracted from the value of Date2 to produce the difference. 
		</param>
			<param name="Date2">The value of Date1 is subtracted from the value of Date2 to produce the difference. 
		</param>
			<param name="DayOfWeek">A value chosen from the FirstDayOfWeek enumeration that specifies the first day of the week. 
		</param>
			<param name="WeekOfYear">A value chosen from the FirstWeekOfYear enumeration that specifies the first week of the year. 
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.DateAndTime.DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)">
			<summary>Returns an Integer containing the specified component of a given Date value.
		</summary>
			<param name="Interval">DateInterval enumeration value representing the part of the date/time value you want to return.
		</param>
			<param name="DateValue">Date value that you want to evaluate.
		</param>
			<param name="FirstDayOfWeekValue">A value chosen from the FirstDayOfWeek enumeration that specifies the first day of the week.
		</param>
			<param name="FirstWeekOfYearValue">A value chosen from the FirstWeekOfYear enumeration that specifies the first week of the year.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.DateAndTime.DatePart(System.String,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)">
			<summary>Returns an Integer containing the specified component of a given Date value.
		</summary>
			<param name="Interval">String expression representing the part of the date/time value you want to return.
		</param>
			<param name="DateValue">Date value that you want to evaluate.
		</param>
			<param name="DayOfWeek">A value chosen from the FirstDayOfWeek enumeration that specifies the first day of the week.
		</param>
			<param name="WeekOfYear">A value chosen from the FirstWeekOfYear enumeration that specifies the first week of the year.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)">
			<summary>Returns a Date representing a specified year, month, and day, with the time information set to midnight (00:00:00).
		</summary>
			<param name="Year">Integer expression from 1 through 9999.
		</param>
			<param name="Month">Integer expression from 1 through 12.</param>
			<param name="Day">Integer expression from 1 through 31. 
		</param>
		</member>
		<member name="P:Microsoft.VisualBasic.DateAndTime.DateString">
			<summary>Returns or sets a String representing the current date according to your system.
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.DateAndTime.DateValue(System.String)">
			<summary>Returns a Date containing the date information represented by a string, with the time information set to midnight (00:00:00).
		</summary>
			<param name="StringDate">String expression representing a date/time value.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)">
			<summary>Returns an Integer from 1 through 31 representing the day of the month.
		</summary>
			<param name="DateValue">Date value from which you want to extract the day.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)">
			<summary>Returns an Integer from 0 through 23 representing the hour of the day.
		</summary>
			<param name="TimeValue">Date value from which you want to extract the hour.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)">
			<summary>Returns an Integer from 0 through 59 representing the minute of the hour.
		</summary>
			<param name="TimeValue">Date value from which you want to extract the minute.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)">
			<summary>Returns an Integer from 1 through 12 representing the month of the year.
		</summary>
			<param name="DateValue">Date value from which you want to extract the month.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.DateAndTime.MonthName(System.Int32,System.Boolean)">
			<summary>Returns a String value containing the name of the specified month.
		</summary>
			<param name="Month">The numeric designation of the month, from 1 through 13.
		</param>
			<param name="Abbreviate">Boolean value that indicates if the month name is to be abbreviated.
		</param>
		</member>
		<member name="P:Microsoft.VisualBasic.DateAndTime.Now">
			<summary>Returns a Date containing the current date and time according to your system.
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)">
			<summary>Returns an Integer value from 0 through 59 representing the second of the minute.
		</summary>
			<param name="TimeValue">Date value from which you want to extract the second.
		</param>
		</member>
		<member name="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay">
			<summary>Returns or sets a Date containing the current time of day according to your system.
		</summary>
		</member>
		<member name="P:Microsoft.VisualBasic.DateAndTime.Timer">
			<summary>Returns a Double value representing the number of seconds elapsed since midnight.
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)">
			<summary>Returns a Date representing a specified hour, minute, and second, with the date information set to January 1 of the year 1.
		</summary>
			<param name="Hour">Integer expression from 0 through 23.
		</param>
			<param name="Minute">Integer expression from 0 through 59.
		</param>
			<param name="Second">Integer expression from 0 through 59.
		</param>
		</member>
		<member name="P:Microsoft.VisualBasic.DateAndTime.TimeString">
			<summary>Returns or sets a String value representing the current time of day according to your system.
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)">
			<summary>Returns a Date value containing the time information represented by a string, with the date information set to January 1 of the year 1.
		</summary>
			<param name="StringTime">String expression representing a date/time value from 00:00:00 on January 1 of the year 1 through 23:59:59 on December 31, 9999.
		</param>
		</member>
		<member name="P:Microsoft.VisualBasic.DateAndTime.Today">
			<summary>Returns or sets a Date containing the current date according to your system.
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)">
			<summary>Returns an Integer containing a number representing the day of the week.
		</summary>
			<param name="DateValue">Date value for which you want to determine the day of the week.
		</param>
			<param name="DayOfWeek">A value chosen from the FirstDayOfWeek enumeration that specifies the first day of the week.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.DateAndTime.WeekdayName(System.Int32,System.Boolean,Microsoft.VisualBasic.FirstDayOfWeek)">
			<summary>Returns a String containing the name of the specified weekday.
		</summary>
			<param name="WeekDay">The numeric designation for the weekday, from 1 through 7;
		</param>
			<param name="Abbreviate">Boolean value that indicates if the weekday name is to be abbreviated.
		</param>
			<param name="FirstDayOfWeekValue">A value chosen from the FirstDayOfWeek enumeration that specifies the first day of the week.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)">
			<summary>Returns an Integer value from 1 through 9999 representing the year.
		</summary>
			<param name="DateValue">Date value from which you want to extract the year.
		</param>
		</member>
		<member name="T:Microsoft.VisualBasic.DateFormat">
			<summary>The DateFormat enumeration defines constants used to identify how the date and time are formatted.
		</summary>
		</member>
		<member name="T:Microsoft.VisualBasic.DateInterval">
			<summary>The DateInterval enumeration defines constants used to identify how the date and time are formatted.
		</summary>
		</member>
		<member name="T:Microsoft.VisualBasic.DueDate">
			<summary>The DueDate enumeration defines constants used to identify how the date and time are formatted.
		</summary>
		</member>
		<member name="T:Microsoft.VisualBasic.ErrObject">
			<summary>The ErrObject module contains properties and procedures used to identify and handle run-time errors using the Err object.
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.ErrObject.Clear">
			<summary>Clears all property settings of the Err object.
		</summary>
		</member>
		<member name="P:Microsoft.VisualBasic.ErrObject.Description">
			<summary>Returns or sets a String expression containing a descriptive string associated with an error.
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.ErrObject.GetException">
			<summary>Returns the exception representing the error that has occurred.
		</summary>
		</member>
		<member name="P:Microsoft.VisualBasic.ErrObject.HelpContext">
			<summary>Returns or sets an Integer containing the context ID for a topic in a Help file.
		</summary>
		</member>
		<member name="P:Microsoft.VisualBasic.ErrObject.HelpFile">
			<summary>Returns or sets a String expression containing the fully qualified path to a Help file.
		</summary>
		</member>
		<member name="P:Microsoft.VisualBasic.ErrObject.LastDllError">
			<summary>Returns a system error code produced by a call to a dynamic-link library (DLL).
		</summary>
		</member>
		<member name="P:Microsoft.VisualBasic.ErrObject.Number">
			<summary>Returns or sets a numeric value specifying an error.
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.ErrObject.Raise(System.Int32,System.Object,System.Object,System.Object,System.Object)">
			<param name="Number">Long integer that identifies the nature of the error.
		</param>
			<param name="Source">String expression naming the object or application that generated the error. 
		</param>
			<param name="Description">String expression describing the error. If unspecified, the value in the Number property is examined to determine a description. 
		</param>
			<param name="HelpFile">The fully qualified path to the Help file in which help on this error can be found.
		</param>
			<param name="HelpContext">The context ID identifying a topic within HelpFile that provides help for the error. 
		</param>
			<summary>Generates a run-time error; can be used instead of the Error statement.
		</summary>
		</member>
		<member name="P:Microsoft.VisualBasic.ErrObject.Source">
			<summary>Returns or sets a String expression specifying the name of the object or application that originally generated the error. Read/write.
		</summary>
		</member>
		<member name="T:Microsoft.VisualBasic.FileAttribute">
			<summary>The FileAttribute enumeration contains constants used to identify file attributes used in the Dir, GetAttr, and SetAttr functions.
		</summary>
		</member>
		<member name="T:Microsoft.VisualBasic.FileSystem">
			<summary>The FileSystem module contains the procedures used to perform file, directory or folder, and system operations.
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)">
			<param name="Path">A String expression that identifies which directory or folder becomes the new default directory or folder. 
		</param>
			<summary>Changes the current directory or folder.
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.Char)">
			<param name="Drive">Char expression that specifies an existing drive. 
		</param>
			<summary>Changes the current drive.
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.String)">
			<param name="Drive">String expression that specifies an existing drive.
		</param>
			<summary>Changes the current drive.
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.FileSystem.CurDir">
			<summary>Returns a string representing the current path.
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.FileSystem.CurDir(System.Char)">
			<summary>Returns a string representing the current path.
		</summary>
			<param name="Drive">Expression that specifies an existing drive. 
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.FileSystem.Dir">
			<summary>Returns the name of the next file, directory, or folder that matches the previously specified pattern.
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.FileSystem.Dir(System.String,Microsoft.VisualBasic.FileAttribute)">
			<summary>Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.
		</summary>
			<param name="Pathname">String expression that specifies a file name, directory or folder name, or drive volume label.
		</param>
			<param name="Attributes">Enumeration whose value specifies file attributes. If omitted, returns files that match Pathname, but have no attributes.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)">
			<summary>Returns a Boolean value True when the end of a file opened for Random or sequential Input has been reached.
		</summary>
			<param name="FileNumber">Any valid file number.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)">
			<summary>Returns an enumeration representing the file mode for files opened using the FileOpen function.
		</summary>
			<param name="FileNumber">Any valid file number.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])">
			<param name="FileNumbers">Parameter array of 0 or more channels to be closed.
		</param>
			<summary>Concludes input/output (I/O) to a file opened using the FileOpen function.
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.FileSystem.FileCopy(System.String,System.String)">
			<param name="Source">String expression that specifies the name of the file to be copied. Source may include the directory or folder, and drive, of the source file.
		</param>
			<param name="Destination">String expression that specifies the target file name. Destination may include the directory or folder, and drive, of the destination file.
		</param>
			<summary>Copies a file.
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)">
			<summary>Returns a Date value that indicates the date and time when a file was created or last modified.
		</summary>
			<param name="Pathname">String expression that specifies a file name. Pathname may include the directory or folder, and the drive.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)">
			<summary>Returns a Long value specifying the length of a file in bytes.
		</summary>
			<param name="Pathname">String expression that specifies a file. Pathname may include the directory or folder, and the drive.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.FileSystem.FreeFile">
			<summary>Returns an Integer value representing the next file number available for use by the FileOpen function.
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)">
			<summary>Returns a FileAttribute value representing the attributes of a file, directory, or folder.
		</summary>
			<param name="PathName">String expression that specifies a file, directory, or folder name. PathName may include the directory or folder, and the drive.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Boolean@)">
			<param name="FileNumber">Any valid file number.
		</param>
			<param name="Value">Variable to read into.
		</param>
			<summary>Reads data from an open sequential file and assigns the data to specified variable
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Byte@)">
			<param name="FileNumber">Any valid file number.
		</param>
			<param name="Value">Variable to read into.
		</param>
			<summary>Reads data from an open sequential file and assigns the data to specified variable
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Char@)">
			<param name="FileNumber">Any valid file number.
		</param>
			<param name="Value">Variable to read into.
		</param>
			<summary>Reads data from an open sequential file and assigns the data to specified variable
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.DateTime@)">
			<param name="FileNumber">Any valid file number.
		</param>
			<param name="Value">Variable to read into.
		</param>
			<summary>Reads data from an open sequential file and assigns the data to specified variable
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Decimal@)">
			<param name="FileNumber">Any valid file number.
		</param>
			<param name="Value">Variable to read into.
		</param>
			<summary>Reads data from an open sequential file and assigns the data to specified variable
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Double@)">
			<param name="FileNumber">Any valid file number.
		</param>
			<param name="Value">Variable to read into.
		</param>
			<summary>Reads data from an open sequential file and assigns the data to specified variable
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int16@)">
			<param name="FileNumber">Any valid file number.
		</param>
			<param name="Value">Variable to read into.
		</param>
			<summary>Reads data from an open sequential file and assigns the data to specified variable
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int32@)">
			<param name="FileNumber">Any valid file number.
		</param>
			<param name="Value">Variable to read into.
		</param>
			<summary>Reads data from an open sequential file and assigns the data to specified variable
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int64@)">
			<param name="FileNumber">Any valid file number.
		</param>
			<param name="Value">Variable to read into.
		</param>
			<summary>Reads data from an open sequential file and assigns the data to specified variable
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Object@)">
			<param name="FileNumber">Any valid file number.
		</param>
			<param name="Value">Variable to read into.
		</param>
			<summary>Reads data from an open sequential file and assigns the data to specified variable
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Single@)">
			<param name="FileNumber">Any valid file number.
		</param>
			<param name="Value">Variable to read into.
		</param>
			<summary>Reads data from an open sequential file and assigns the data to specified variable
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.String@)">
			<param name="FileNumber">Any valid file number.
		</param>
			<param name="Value">Variable to read into.
		</param>
			<summary>Reads data from an open sequential file and assigns the data to specified variable
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)">
			<summary>Returns String value containing characters from a file opened in Input or Binary mode.
		</summary>
			<param name="FileNumber">Any valid file number.
		</param>
			<param name="CharCount">Any valid numeric expression specifying the number of characters to read.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)">
			<param name="PathName">String expression that specifies one or more file names to be deleted. PathName may include the directory or folder, and the drive.
		</param>
			<summary>Deletes files from a disk.
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.FileSystem.LineInput(System.Int32)">
			<summary>Reads a single line from an open sequential file and assigns it to a String variable.
		</summary>
			<param name="FileNumber">Any valid file number.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)">
			<summary>Returns a Long value specifying the current read/write position within an open file.
		</summary>
			<param name="FileNumber">Any valid Integer file number.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32)">
			<param name="FileNumber">Any valid file number.
		</param>
			<summary>Denies access by other processes to all of a file opened using the Open function.
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64)">
			<param name="FileNumber">Any valid file number.
		</param>
			<param name="Record">Number of the record to lock.
		</param>
			<summary>Denies access by other processes to a part of a file opened using the Open function.
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64,System.Int64)">
			<param name="FileNumber">Any valid file number.
		</param>
			<param name="FromRecord">Number of the first record or byte to lock.
		</param>
			<param name="ToRecord">Number of the last record or byte to lock.
		</param>
			<summary>Denies access by other processes to a part of a file opened using the Open function.
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)">
			<summary>Returns a Long representing the size, in bytes, of a file opened using the Open statement.
		</summary>
			<param name="FileNumber">An Integer containing a valid file number.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)">
			<param name="Path">String expression that identifies the directory or folder to be created. The Path may include the drive.
		</param>
			<summary>Creates a new directory or folder.
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])">
			<param name="FileNumber">Any valid file number.
		</param>
			<param name="Output">One or more comma-delimited expressions to write to a file.
		</param>
			<summary>Writes display-formatted data to a sequential file.
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.FileSystem.Rename(System.String,System.String)">
			<param name="OldPath">String expression that specifies the existing file name and location. 
		</param>
			<param name="NewPath">String expression that specifies the new file name and location.
		</param>
			<summary>Renames a disk file, directory, or folder.
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.FileSystem.Reset">
			<summary>Closes all disk files opened using the FileOpen function.
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)">
			<param name="Path">String expression that identifies the directory or folder to be removed. 
		</param>
			<summary>Removes an existing directory or folder.
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32)">
			<summary>Returns a Long specifying the current read/write position within a file opened using the FileOpen function.
		</summary>
			<param name="FileNumber">An Integer containing a valid file number.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32,System.Int64)">
			<param name="FileNumber">An Integer containing a valid file number.
		</param>
			<param name="Position">A numeric expression specifying the new position.
		</param>
			<summary>Sets the position for the next read/write operation within a file opened using the FileOpen function.
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)">
			<param name="PathName">String expression that specifies a file name. PathName may include directory or folder, and drive.
		</param>
			<param name="Attributes">Enumeration expression, whose sum specifies file attributes.
		</param>
			<summary>Sets attribute information for a file.
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)">
			<summary>Used with the Print or PrintLine functions to position output.
		</summary>
			<param name="Count">The number of spaces to insert before displaying or printing the next expression in a list.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.FileSystem.TAB">
			<summary>Used with the Print or PrintLine functions to position output. Tab moves the insertion point to the next column
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.FileSystem.TAB(System.Int16)">
			<summary>Used with the Print or PrintLine functions to position output.
		</summary>
			<param name="Column">The column number moved to before displaying or printing the next expression in a list.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32)">
			<param name="FileNumber">Any valid file number.
		</param>
			<summary>Re-enables access by other processes to a file locked using the lock function.
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64)">
			<param name="FileNumber">Any valid file number.
		</param>
			<param name="Record">Number of the record to unlock.
		</param>
			<summary>Re-enables access by other processes to a part of a file locked using the lock function.
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64,System.Int64)">
			<param name="FileNumber">Any valid file number.
		</param>
			<param name="FromRecord">Number of the first record or byte to unlock.
		</param>
			<param name="ToRecord">Number of the last record or byte to unlock.
		</param>
			<summary>Re-enables access by other processes to a part of a file locked using the lock function.
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])">
			<param name="FileNumber">Any valid file number.
		</param>
			<param name="Output">One or more comma-delimited expressions to write to a file.
		</param>
			<summary>Writes data to a sequential file. Data written with Write is usually read from a file with Input.
		</summary>
		</member>
		<member name="T:Microsoft.VisualBasic.Financial">
			<summary>The Financial module contains procedures used to perform financial operations.
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)">
			<summary>Returns a Double specifying the depreciation of an asset for a specific time period using the double-declining balance method or some other method you specify.
		</summary>
			<param name="Cost">Double specifying initial cost of the asset.
		</param>
			<param name="Salvage">Double specifying value of the asset at the end of its useful life.
		</param>
			<param name="Life">Double specifying length of useful life of the asset.
		</param>
			<param name="Period">Double specifying period for which asset depreciation is calculated.
		</param>
			<param name="Factor">Double specifying rate at which the balance declines.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Financial.FV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)">
			<summary>Returns a Double specifying the future value of an annuity based on periodic, fixed payments and a fixed interest rate.
		</summary>
			<param name="Rate">Double specifying interest rate per period. 
		</param>
			<param name="NPer">Double specifying total number of payment periods in the annuity. 
		</param>
			<param name="Pmt">Double specifying payment to be made each period.
		</param>
			<param name="PV">Double specifying present value (or lump sum) of a series of future payments.
		</param>
			<param name="Due">Object of type Microsoft.VisualBasic.DueDate that specifies when payments are due.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Financial.IPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)">
			<summary>Returns a Double specifying the interest payment for a given period of an annuity based on periodic, fixed payments and a fixed interest rate.
		</summary>
			<param name="Rate">Double specifying interest rate per period.
		</param>
			<param name="Per">Double specifying payment period in the range 1 through NPer.
		</param>
			<param name="NPer">Double specifying total number of payment periods in the annuity.
		</param>
			<param name="PV">Double specifying present value, or value today, of a series of future payments or receipts.
		</param>
			<param name="FV">Double specifying future value or cash balance you want after you've made the final payment.
		</param>
			<param name="Due">Object of type Microsoft.VisualBasic.DueDate that specifies when payments are due.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)">
			<summary>Returns a Double specifying the internal rate of return for a series of periodic cash flows (payments and receipts).
		</summary>
			<param name="ValueArray">Array of Double specifying cash flow values. The array must contain at least one negative value (a payment) and one positive value (a receipt).
		</param>
			<param name="Guess">Object specifying value you estimate will be returned by IRR. I
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)">
			<summary>Returns a Double specifying the modified internal rate of return for a series of periodic cash flows (payments and receipts).
		</summary>
			<param name="ValueArray">Array of Double specifying cash flow values. The array must contain at least one negative value (a payment) and one positive value (a receipt).
		</param>
			<param name="FinanceRate">Double specifying interest rate paid as the cost of financing.
		</param>
			<param name="ReinvestRate">Double specifying interest rate received on gains from cash reinvestment.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Financial.NPer(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)">
			<summary>Returns a Double specifying the number of periods for an annuity based on periodic, fixed payments and a fixed interest rate.
		</summary>
			<param name="Rate">Double specifying interest rate per period.
		</param>
			<param name="Pmt">Double specifying payment to be made each period. Payments usually contain principal and interest that doesn't change over the life of the annuity.
		</param>
			<param name="PV">Double specifying present value, or value today, of a series of future payments or receipts.
		</param>
			<param name="FV">Double specifying future value or cash balance you want after you've made the final payment.
		</param>
			<param name="Due">Object of type Microsoft.VisualBasic.DueDate that specifies when payments are due.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)">
			<summary>Returns a Double specifying the net present value of an investment based on a series of periodic cash flows (payments and receipts) and a discount rate.
		</summary>
			<param name="Rate">Double specifying discount rate over the length of the period, expressed as a decimal.
		</param>
			<param name="ValueArray">Array of Double specifying cash flow values. The array must contain at least one negative value (a payment) and one positive value (a receipt).
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Financial.Pmt(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)">
			<summary>Returns a Double specifying the payment for an annuity based on periodic, fixed payments and a fixed interest rate.
		</summary>
			<param name="Rate">Double specifying interest rate per period.
		</param>
			<param name="NPer">Double specifying total number of payment periods in the annuity.
		</param>
			<param name="PV">Double specifying present value (or lump sum) that a series of payments to be paid in the future is worth now.
		</param>
			<param name="FV">Double specifying future value or cash balance you want after you've made the final payment.
		</param>
			<param name="Due">Enumeration of type Microsoft.VisualBasic.DueDate that specifies when payments are due.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Financial.PPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)">
			<summary>Returns a Double specifying the principal payment for a given period of an annuity based on periodic, fixed payments and a fixed interest rate.
		</summary>
			<param name="Rate">Double specifying interest rate per period.
		</param>
			<param name="Per">Double specifying payment period in the range 1 through NPer.
		</param>
			<param name="NPer">Double specifying total number of payment periods in the annuity.
		</param>
			<param name="PV">Double specifying present value, or value today, of a series of future payments or receipts.
		</param>
			<param name="FV">Double specifying future value or cash balance you want after you've made the final payment.
		</param>
			<param name="Due">Enumeration of type Microsoft.VisualBasic.DueDate that specifies when payments are due.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Financial.PV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)">
			<summary>Returns a Double specifying the present value of an annuity based on periodic, fixed payments to be paid in the future and a fixed interest rate.
		</summary>
			<param name="Rate">Double specifying interest rate per period.
		</param>
			<param name="NPer">Double specifying total number of payment periods in the annuity.
		</param>
			<param name="Pmt">Double specifying payment to be made each period.
		</param>
			<param name="FV">Double specifying future value or cash balance you want after you've made the final payment.</param>
			<param name="Due">Object of type Microsoft.VisualBasic.DueDate that specifies when payments are due.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Financial.Rate(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate,System.Double)">
			<summary>Returns a Double specifying the interest rate per period for an annuity.
		</summary>
			<param name="NPer">Double specifying total number of payment periods in the annuity.
		</param>
			<param name="Pmt">Double specifying payment to be made each period.
		</param>
			<param name="PV">Double specifying present value, or value today, of a series of future payments or receipts.
		</param>
			<param name="FV">Double specifying future value or cash balance you want after you make the final payment.
		</param>
			<param name="Due">Object of type Microsoft.VisualBasic.DueDate that specifies when payments are due.
		</param>
			<param name="Guess">Double specifying value you estimate will be returned by Rate.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)">
			<summary>Returns a Double specifying the straight-line depreciation of an asset for a single period.
		</summary>
			<param name="Cost">Double specifying initial cost of the asset.
		</param>
			<param name="Salvage">Double specifying value of the asset at the end of its useful life.
		</param>
			<param name="Life">Double specifying length of the useful life of the asset.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)">
			<summary>Returns a Double specifying the sum-of-years digits depreciation of an asset for a specified period.
		</summary>
			<param name="Cost">Double specifying initial cost of the asset.
		</param>
			<param name="Salvage">Double specifying value of the asset at the end of its useful life.
		</param>
			<param name="Life">Double specifying length of the useful life of the asset.
		</param>
			<param name="Period">Double specifying period for which asset depreciation is calculated.
		</param>
		</member>
		<member name="T:Microsoft.VisualBasic.FirstDayOfWeek">
			<summary>The FirstDayOfWeek enumeration contains constants used to identify specific days of the week when using the DateDiff, DatePart, and Weekday functions. These constants can be used anywhere in your code.
		</summary>
		</member>
		<member name="T:Microsoft.VisualBasic.FirstWeekOfYear">
			<summary>The FirstWeekOfYear enumeration contains constants used to identify how the first week of a year is determined when using the DateDiff and DatePart functions. These constants can be used anywhere in your code.
		</summary>
		</member>
		<member name="T:Microsoft.VisualBasic.Globals">
			<summary>The Global module contains script engine functions.
		</summary>
		</member>
		<member name="P:Microsoft.VisualBasic.Globals.ScriptEngine">
			<summary>Returns a string representing the scripting language in use.
		</summary>
		</member>
		<member name="P:Microsoft.VisualBasic.Globals.ScriptEngineBuildVersion">
			<summary>Returns the build version number of the scripting engine in use.
		</summary>
		</member>
		<member name="P:Microsoft.VisualBasic.Globals.ScriptEngineMajorVersion">
			<summary>Returns the major version number of the scripting engine in use.
		</summary>
		</member>
		<member name="P:Microsoft.VisualBasic.Globals.ScriptEngineMinorVersion">
			<summary>Returns the minor version number of the scripting engine in use.
		</summary>
		</member>
		<member name="T:Microsoft.VisualBasic.Information">
			<summary>The Information module contains the procedures used to return, test for, or verify information.
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.Information.Err">
			<summary>Returns an ErrObject containing details of the last error.
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.Information.IsArray(System.Object)">
			<summary>Returns a Boolean value indicating whether a variable contains to an array.
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.Information.IsDate(System.Object)">
			<summary>Returns a Boolean value indicating whether an expression can be converted to a date.
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)">
			<summary>Returns a Boolean value indicating whether an expression evaluates to the Null value returned from a database.
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.Information.IsError(System.Object)">
			<summary>Returns a Boolean value indicating whether an expression is an exception type.
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)">
			<summary>Returns a Boolean value indicating whether an expression has no value assigned to it.
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)">
			<summary>Returns a Boolean value indicating whether an expression can be evaluated as a number.
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.Information.IsReference(System.Object)">
			<summary>Returns a Boolean value indicating whether an expression evaluates to a reference type.
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)">
			<summary>Returns the lowest available subscript for the indicated dimension of an array.
		</summary>
			<param name="Array">The array in which you want to find the lowest possible subscript of a dimension.
		</param>
			<param name="Rank">The dimension for which the lowest possible subscript is to be returned. Use 1 for the first dimension, 2 for the second, and so on.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)">
			<summary>Returns an integer value representing the RGB color code corresponding to the specified color number.
		</summary>
			<param name="color">A whole number in the range 0–15.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)">
			<summary>Returns an integer value representing an RGB color value from a set of red, green and blue color components.
		</summary>
			<param name="red">Integer in the range 0–255, inclusive, that represents the intensity of the red component of the color.
		</param>
			<param name="green">Integer in the range 0–255, inclusive, that represents the intensity of the green component of the color.
		</param>
			<param name="blue">Integer in the range 0–255, inclusive, that represents the intensity of the blue component of the color.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Information.SystemTypeName(System.String)">
			<summary>Returns the system type name corresponding to a Visual Basic type name.
			<param name="VBName">Name of the Visual Basic Type.
		</param>
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)">
			<summary>Returns the highest available subscript for the indicated dimension of an array.
		</summary>
			<param name="Array">The array in which you want to find the highest possible subscript of a dimension.
		</param>
			<param name="Rank">The dimension for which the highest possible subscript is to be returned. Use 1 for the first dimension, 2 for the second, and so on.
		</param>
		</member>
		<member name="T:Microsoft.VisualBasic.Interaction">
			<summary>The Interaction module contains procedures used to interact with objects, applications, and systems.
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.Interaction.AppActivate(System.Int32)">
			<param name="ProcessID">specifying the Win32 Process ID number assigned to this process.
		</param>
			<summary>Activates an application window.
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.Interaction.AppActivate(System.String)">
			<param name="Title">expression specifying the title in the title bar of the application window you want to activate. You can use the task ID returned by the Shell function.
		</param>
			<summary>Activates an application window.
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.Interaction.Beep">
			<summary>Sounds a tone through the computer's speaker.
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.Interaction.CallByName(System.Object,System.String,Microsoft.VisualBasic.CallType,System.Object[])">
			<summary>Executes a method on an object, or sets or returns a property on an object.
		</summary>
			<param name="ObjectRef">Object. A pointer to the object exposing the property or method.
		</param>
			<param name="ProcName">String. A string expression containing the name of the property or method on the object.
		</param>
			<param name="UseCallType">An enumeration member of type Microsoft.VisualBasic.CallType representing the type of procedure being called. The value of CallType can be Method, Get, or Set.
		</param>
			<param name="Args">ParamArray. A parameter array containing the arguments to be passed to the property or method being called.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Interaction.Choose(System.Double,System.Object[])">
			<summary>Selects and returns a value from a list of arguments.
		</summary>
			<param name="Index">Double. Numeric expression that results in a value between 1 and the number of elements passed in the Choice argument.
		</param>
			<param name="Choice">Object parameter array. You can supply either a single variable or an expression that evaluates to the Object data type, to a list of Object variables or expressions separated by commas, or to a single-dimensional array of Object elements.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Interaction.Command">
			<summary>Returns the argument portion of the command line used to launch Visual Basic or an executable program developed with Visual Basic.
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.Interaction.CreateObject(System.String,System.String)">
			<summary>Creates and returns a reference to a COM object. CreateObject cannot be used to create instances of classes in Visual Basic unless those classes are explicitly exposed as ActiveX objects.
		</summary>
			<param name="ProgId">String. The program ID of the object to create.
		</param>
			<param name="ServerName">String. The name of the network server where the object will be created. If ServerName is an empty string (""), the local machine is used.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Interaction.DeleteSetting(System.String,System.String,System.String)">
			<param name="AppName">String expression containing the name of the application or project to which the section or key setting applies.
		</param>
			<param name="Section">String expression containing the name of the section from which the key setting is being deleted. If only AppName and Section are provided, the specified section is deleted along with all related key settings.
		</param>
			<param name="Key">String expression containing the name of the key setting being deleted.
		</param>
			<summary>Deletes a section or key setting from an application's entry in the Windows registry.
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.Interaction.Environ(System.Int32)">
			<summary>Returns the string associated with an operating system environment variable.
		</summary>
			<param name="Expression">Expression that evaluates to either a string containing the name of an environment variable, or an integer corresponding to the numeric order of an environment string in the environment-string table.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Interaction.Environ(System.String)">
			<summary>Returns the string associated with an operating system environment variable.
		</summary>
			<param name="Expression">Expression that evaluates to either a string containing the name of an environment variable, or an integer corresponding to the numeric order of an environment string in the environment-string table.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Interaction.GetAllSettings(System.String,System.String)">
			<summary>Returns a list of key settings and their respective values (originally created with SaveSetting) from an application's entry in the Windows registry.
		</summary>
			<param name="AppName">String expression containing the name of the application or project whose key settings are requested.
		</param>
			<param name="Section">String expression containing the name of the section whose key settings are requested. GetAllSettings returns an object that contains a two-dimensional array of strings. The strings contain all the key settings in the specified section plus their corresponding values.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Interaction.GetObject(System.String,System.String)">
			<summary>Returns a reference to an object provided by a COM component.
		</summary>
			<param name="pathname">String. The full path and name of the file containing the object to retrieve. If pathname is omitted, class is required.
		</param>
			<param name="class">String. A string representing the class of the object.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Interaction.GetSetting(System.String,System.String,System.String,System.String)">
			<summary>Returns a key setting value from an application's entry in the Windows registry.
		</summary>
			<param name="AppName">String expression containing the name of the application or project whose key setting is requested.
		</param>
			<param name="Section">String expression containing the name of the section in which the key setting is found.
		</param>
			<param name="Key">String expression containing the name of the key setting to return.
		</param>
			<param name="Default">Expression containing the value to return if no value is set in the Key setting. If omitted, Default is assumed to be a zero-length string ("").
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Interaction.IIf(System.Boolean,System.Object,System.Object)">
			<summary>Returns one of two objects, depending on the evaluation of an expression.
		</summary>
			<param name="Expression">Boolean. The expression you want to evaluate.
		</param>
			<param name="TruePart">Object. Returned if Expression evaluates to True.
		</param>
			<param name="FalsePart">Object. Returned if Expression evaluates to False.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Interaction.InputBox(System.String,System.String,System.String,System.Int32,System.Int32)">
			<summary>Displays a prompt in a dialog box, waits for the user to input text or click a button, and then returns a string containing the contents of the text box.
		</summary>
			<param name="Prompt">String expression displayed as the message in the dialog box. The maximum length of Prompt is approximately 1024 characters, depending on the width of the characters used. If Prompt consists of more than one line, you can separate the lines using a carriage return character (Chr(13)), a linefeed character (Chr(10)), or a carriage return–linefeed character combination between each line.
		</param>
			<param name="Title">String expression displayed in the title bar of the dialog box. If you omit Title, the application name is placed in the title bar.
		</param>
			<param name="DefaultResponse">String expression displayed in the text box as the default response if no other input is provided. If you omit DefaultResponse, the displayed text box is empty.
		</param>
			<param name="XPos">Numeric expression that specifies, in twips, the distance of the left edge of the dialog box from the left edge of the screen. If you omit XPos, the dialog box is centered horizontally.
		</param>
			<param name="YPos">Numeric expression that specifies, in twips, the distance of the upper edge of the dialog box from the top of the screen. If you omit YPos, the dialog box is positioned vertically approximately one-third of the way down the screen.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Interaction.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)">
			<summary>Displays a message in a dialog box, waits for the user to click a button, and then returns an integer indicating which button the user clicked.
		</summary>
			<param name="Prompt">String expression displayed as the message in the dialog box. The maximum length of Prompt is approximately 1024 characters, depending on the width of the characters used. If Prompt consists of more than one line, you can separate the lines using a carriage return character (Chr(13)), a linefeed character (Chr(10)), or a carriage return-linefeed character combination between each line.
		</param>
			<param name="Buttons">Numeric expression that is the sum of values specifying the number and type of buttons to display, the icon style to use, the identity of the default button, and the modality of the message box. If you omit Buttons, the default value is zero.
		</param>
			<param name="Title">String expression displayed in the title bar of the dialog box. If you omit Title, the application name is placed in the title bar.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Interaction.Partition(System.Int64,System.Int64,System.Int64,System.Int64)">
			<summary>Returns a string representing the calculated range that contains a number.
		</summary>
			<param name="Number">Long. Whole number that you want to locate within one of the calculated ranges.
		</param>
			<param name="Start">Long. Whole number that indicates the start of the set of calculated ranges. Start cannot be less than 0.
		</param>
			<param name="Stop">Long. Whole number that indicates the end of the set of calculated ranges. Stop cannot be less than or equal to Start.
		</param>
			<param name="Interval">Long. Whole number that indicates the size of each range calculated between Start and Stop. Interval cannot be less than 1.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Interaction.SaveSetting(System.String,System.String,System.String,System.String)">
			<param name="AppName">String expression containing the name of the application or project to which the setting applies.
		</param>
			<param name="Section">String expression containing the name of the section in which the key setting is being saved.
		</param>
			<param name="Key">String expression containing the name of the key setting being saved.
		</param>
			<param name="Setting">Expression containing the value to which Key is being set.
		</param>
			<summary>Saves or creates an application entry in the Windows registry.
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.Interaction.Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)">
			<summary>Runs an executable program and returns an integer containing the program's process ID if it is still running.
		</summary>
			<param name="Pathname">String. Name of the program to execute, together with any required arguments and command-line switches. Pathname can also include the drive and the directory path or folder.
		</param>
			<param name="Style">AppWinStyle. A value chosen from the AppWinStyle enumeration corresponding to the style of the window in which the program is to be run. If Style is omitted, Shell uses AppWinStyle.MinimizedFocus, which starts the program minimized and with focus.
		</param>
			<param name="Wait">A value indicating whether the Shell function should wait for completion of the program. If Wait is omitted, Shell uses False.
		</param>
			<param name="Timeout">The number of milliseconds to wait for completion if Wait is True. If Timeout is omitted, Shell uses -1, which means there is no timeout and Shell does not return until the program completes. Therefore, if you omit Timeout or set it to -1, it is possible that Shell might never return control to your program.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Interaction.Switch(System.Object[])">
			<summary>Evaluates a list of expressions and returns an Object value of an expression associated with the first expression in the list that is True.
		</summary>
			<param name="VarExpr">Object parameter array. Must have an even number of elements. You can supply a list of Object variables or expressions separated by commas, or a single-dimensional array of Object elements.
		</param>
		</member>
		<member name="T:Microsoft.VisualBasic.MsgBoxResult">
			<summary>The MsgBoxResult enumeration contains constants used to identify which button was pressed on a message box displayed using the MsgBox function. These constants can be used anywhere in your code.
		</summary>
		</member>
		<member name="T:Microsoft.VisualBasic.MsgBoxStyle">
			<summary>The MsgBoxStyle enumeration contains constants used to specify the behavior of a message box, along with symbols and buttons that appear on it, when displayed using the MsgBox function. These constants can be used anywhere in your code.
		</summary>
		</member>
		<member name="T:Microsoft.VisualBasic.OpenAccess">
			<summary>The OpenAccess enumeration defines constants used to identify file access.
		</summary>
		</member>
		<member name="T:Microsoft.VisualBasic.OpenMode">
			<summary>The OpenMode enumeration defines constants used to identify file access modes.
		</summary>
		</member>
		<member name="T:Microsoft.VisualBasic.OpenShare">
			<summary>The OpenShare enumeration defines constants used to identify file sharing.
		</summary>
		</member>
		<member name="T:Microsoft.VisualBasic.Strings">
			<summary>The Strings module contains procedures used to perform string operations.
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.Strings.Asc(System.Char)">
			<summary>Returns an Integer representing the character code corresponding to the first letter in a string.
		</summary>
			<param name="String">Any valid Char or String expression. If String is Nothing or contains no characters, an ArgumentException error occurs.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Strings.Asc(System.String)">
			<summary>Returns an Integer representing the character code corresponding to the first letter in a string.
		</summary>
			<param name="String">Any valid Char or String expression. If String is Nothing or contains no characters, an ArgumentException error occurs.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Strings.AscW(System.Char)">
			<summary>Returns an Integer representing the character code corresponding to the first letter in a string.
		</summary>
			<param name="String">Any valid Char or String expression. If String is Nothing or contains no characters, an ArgumentException error occurs.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Strings.AscW(System.String)">
			<summary>Returns an Integer representing the character code corresponding to the first letter in a string.
		</summary>
			<param name="String">Any valid Char or String expression. If String is Nothing or contains no characters, an ArgumentException error occurs.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)">
			<summary>Returns the character associated with the specified character code as a Char data type.
		</summary>
			<param name="Charcode">An integer that identifies a character.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)">
			<summary>Returns the character associated with the specified character code as a Char data type.
		</summary>
			<param name="Charcode">An integer that identifies a character.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)">
			<summary>Returns a zero-based array containing a subset of a String array based on specified filter criteria.
		</summary>
			<param name="Source">One-dimensional array of strings to be searched.
		</param>
			<param name="Match">String to search for.
		</param>
			<param name="Include">Boolean value indicating whether to return substrings that include or exclude Match. If Include is True, the Filter function returns the subset of the array that contains Match as a substring. If Include is False, the Filter function returns the subset of the array that does not contain Match as a substring.
		</param>
			<param name="Compare">Numeric value indicating the kind of string comparison to use. See Settings for values.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)">
			<summary>Returns a zero-based array containing a subset of a String array based on specified filter criteria.
		</summary>
			<param name="Source">One-dimensional array of strings to be searched.
		</param>
			<param name="Match">String to search for.
		</param>
			<param name="Include">Boolean value indicating whether to return substrings that include or exclude Match. If Include is True, the Filter function returns the subset of the array that contains Match as a substring. If Include is False, the Filter function returns the subset of the array that does not contain Match as a substring.
		</param>
			<param name="Compare">Numeric value indicating the kind of string comparison to use. See Settings for values.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
			<summary>Returns a String expression formatted according to instructions contained in a format String expression.
		</summary>
			<param name="Expression">Any valid expression.
		</param>
			<param name="Style">A valid named or user-defined format String expression.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
			<summary>Returns an expression formatted as a currency value using the currency symbol defined in the system control panel.
		</summary>
			<param name="Expression">Expression to be formatted.
		</param>
			<param name="NumDigitsAfterDecimal">Numeric value indicating how many places are displayed to the right of the decimal. Default value is –1, which indicates that the computer's regional settings are used.
		</param>
			<param name="IncludeLeadingDigit">Tristate constant that indicates whether or not a leading zero is displayed for fractional values. See Settings for values.
		</param>
			<param name="UseParensForNegativeNumbers">Tristate constant that indicates whether or not to place negative values within parentheses. See Settings for values.
		</param>
			<param name="GroupDigits">Tristate constant that indicates whether or not numbers are grouped using the group delimiter specified in the computer's regional settings. See Settings for values.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)">
			<summary>Returns an expression formatted as a date or time.
		</summary>
			<param name="Expression">Date expression to be formatted.
		</param>
			<param name="NamedFormat">Numeric value that indicates the date or time format used. If omitted, GeneralDate is used.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
			<summary>Returns an expression formatted as a number.
		</summary>
			<param name="Expression">Expression to be formatted.
		</param>
			<param name="NumDigitsAfterDecimal">Numeric value indicating how many places are displayed to the right of the decimal. The default value is –1, which indicates that the computer's regional settings are used.
		</param>
			<param name="IncludeLeadingDigit">Tristate constant that indicates whether a leading zero is displayed for fractional values. See Settings for values.
		</param>
			<param name="UseParensForNegativeNumbers">Tristate constant that indicates whether to place negative values within parentheses. See Settings for values.
		</param>
			<param name="GroupDigits">Tristate constant that indicates whether or not numbers are grouped using the group delimiter specified in the locale settings. See Settings for values.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
			<summary>Returns an expression formatted as a percentage (that is, multiplied by 100) with a trailing % character.
		</summary>
			<param name="Expression">Expression to be formatted.
		</param>
			<param name="NumDigitsAfterDecimal">Numeric value indicating how many places to the right of the decimal are displayed. Default value is –1, which indicates that the locale settings are used.
		</param>
			<param name="IncludeLeadingDigit">Tristate constant that indicates whether or not a leading zero is displayed for fractional values. See Settings for values.
		</param>
			<param name="UseParensForNegativeNumbers">Tristate constant that indicates whether or not to place negative values within parentheses. See Settings for values.
		</param>
			<param name="GroupDigits">Tristate constant that indicates whether or not numbers are grouped using the group delimiter specified in the locale settings. See Settings for values.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
			<summary>Returns an Integer specifying the start position of the first occurrence of one string within another.
		</summary>
			<param name="Start">Numeric expression that sets the starting position for each search. If omitted, search begins at the first character position. The start index is 1 based.
		</param>
			<param name="String1">String expression being searched.
		</param>
			<param name="String2">String expression sought.
		</param>
			<param name="Compare">Specifies the type of string comparison. If Compare is omitted, the Option Compare setting determines the type of comparison. Specify a valid LCID (LocaleID) to use locale-specific rules in the comparison.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
			<summary>Returns an Integer specifying the start position of the first occurrence of one string within another.
		</summary>
			<param name="String1">String expression being searched.
		</param>
			<param name="String2">String expression sought.
		</param>
			<param name="Compare">Specifies the type of string comparison. If Compare is omitted, the Option Compare setting determines the type of comparison. Specify a valid LCID (LocaleID) to use locale-specific rules in the comparison.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
			<summary>Returns the position of the first occurrence of one string within another, starting from the right side of the string.
		</summary>
			<param name="StringCheck">String expression being searched.
		</param>
			<param name="StringMatch">String expression being searched for.
		</param>
			<param name="Start">Numeric expression that sets the one-based starting position for each search, starting from the left side of the string. If Start is omitted, –1 is used, which means that the search begins at the last character position. Search then proceeds from right to left.
		</param>
			<param name="Compare">Numeric value indicating the kind of comparison to use when evaluating substrings. If omitted, a binary comparison is performed. See Settings for values.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)">
			<summary>Returns a string created by joining a number of substrings contained in an array.
		</summary>
			<param name="SourceArray">One-dimensional array containing substrings to be joined.
		</param>
			<param name="Delimiter">String used to separate the substrings in the returned string. If omitted, the space character (" ") is used. If Delimiter is a zero-length string (""), all items in the list are concatenated with no delimiters.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Strings.Join(System.String[],System.String)">
			<summary>Returns a string created by joining a number of substrings contained in an array.
		</summary>
			<param name="SourceArray">One-dimensional array containing substrings to be joined.
		</param>
			<param name="Delimiter">String used to separate the substrings in the returned string. If omitted, the space character (" ") is used. If Delimiter is a zero-length string (""), all items in the list are concatenated with no delimiters.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Strings.LCase(System.Char)">
			<summary>Returns a String or Char that has been converted to lowercase.
		</summary>
			<param name="Value">Any valid String or Char expression.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Strings.LCase(System.String)">
			<summary>Returns a String or Char that has been converted to lowercase.
		</summary>
			<param name="Value">Any valid String or Char expression.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)">
			<summary>Returns a String containing a specified number of characters from the left side of a string.
		</summary>
			<param name="Str">String expression from which the leftmost characters are returned.
		</param>
			<param name="Length">Integer expression. Numeric expression indicating how many characters to return. If 0, a zero-length string ("") is returned. If greater than or equal to the number of characters in Str, the entire string is returned.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Strings.Len(System.Boolean)">
			<summary>Returns an Integer containing either the number of characters in a string or the number of bytes required to store a variable.
		</summary>
			<param name="Expression">valid String expression or variable name. If Expression is of type Object, the Len function returns the size as it will be written to the file.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Strings.Len(System.Byte)">
			<summary>Returns an Integer containing either the number of characters in a string or the number of bytes required to store a variable.
		</summary>
			<param name="Expression">valid String expression or variable name. If Expression is of type Object, the Len function returns the size as it will be written to the file.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Strings.Len(System.Char)">
			<summary>Returns an Integer containing either the number of characters in a string or the number of bytes required to store a variable.
		</summary>
			<param name="Expression">valid String expression or variable name. If Expression is of type Object, the Len function returns the size as it will be written to the file.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Strings.Len(System.DateTime)">
			<summary>Returns an Integer containing either the number of characters in a string or the number of bytes required to store a variable.
		</summary>
			<param name="Expression">valid String expression or variable name. If Expression is of type Object, the Len function returns the size as it will be written to the file.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Strings.Len(System.Decimal)">
			<summary>Returns an Integer containing either the number of characters in a string or the number of bytes required to store a variable.
		</summary>
			<param name="Expression">valid String expression or variable name. If Expression is of type Object, the Len function returns the size as it will be written to the file.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Strings.Len(System.Double)">
			<summary>Returns an Integer containing either the number of characters in a string or the number of bytes required to store a variable.
		</summary>
			<param name="Expression">valid String expression or variable name. If Expression is of type Object, the Len function returns the size as it will be written to the file.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Strings.Len(System.Int16)">
			<summary>Returns an Integer containing either the number of characters in a string or the number of bytes required to store a variable.
		</summary>
			<param name="Expression">valid String expression or variable name. If Expression is of type Object, the Len function returns the size as it will be written to the file.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Strings.Len(System.Int32)">
			<summary>Returns an Integer containing either the number of characters in a string or the number of bytes required to store a variable.
		</summary>
			<param name="Expression">valid String expression or variable name. If Expression is of type Object, the Len function returns the size as it will be written to the file.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Strings.Len(System.Int64)">
			<summary>Returns an Integer containing either the number of characters in a string or the number of bytes required to store a variable.
		</summary>
			<param name="Expression">valid String expression or variable name. If Expression is of type Object, the Len function returns the size as it will be written to the file.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Strings.Len(System.Object)">
			<summary>Returns an Integer containing either the number of characters in a string or the number of bytes required to store a variable.
		</summary>
			<param name="Expression">valid String expression or variable name. If Expression is of type Object, the Len function returns the size as it will be written to the file.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Strings.Len(System.Single)">
			<summary>Returns an Integer containing either the number of characters in a string or the number of bytes required to store a variable.
		</summary>
			<param name="Expression">valid String expression or variable name. If Expression is of type Object, the Len function returns the size as it will be written to the file.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Strings.Len(System.String)">
			<summary>Returns an Integer containing either the number of characters in a string or the number of bytes required to store a variable.
		</summary>
			<param name="Expression">valid String expression or variable name. If Expression is of type Object, the Len function returns the size as it will be written to the file.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)">
			<summary>Returns a left-aligned string containing the specified string adjusted to the specified length. 
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.Strings.LTrim(System.String)">
			<summary>Returns a string containing a copy of a specified string with no leading spaces (LTrim), no trailing spaces (RTrim), or no leading or trailing spaces (Trim).
		</summary>
			<param name="Str">Any valid String expression.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)">
			<summary>Replaces a specified number of characters in a String variable with characters from another string.
		</summary>
			<param name="str">Name of the String variable to modify.
		</param>
			<param name="Start">Integer data type. Character position in target where the replacement of text begins. Start uses a one based index.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)">
			<summary>Replaces a specified number of characters in a String variable with characters from another string.
		</summary>
			<param name="str">Name of the String variable to modify.
		</param>
			<param name="Start">Integer data type. Character position in target where the replacement of text begins. Start uses a one based index.
		</param>
			<param name="Length">Integer data type. Number of characters to replace. If omitted, all of string is used.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)">
			<summary>Returns a string in which a specified substring has been replaced with another substring a specified number of times.
		</summary>
			<param name="Expression">String expression containing substring to replace.
		</param>
			<param name="Find">Substring being searched for.
		</param>
			<param name="Replacement">Replacement substring.
		</param>
			<param name="Start">Position within Expression where substring search is to begin. If omitted, 1 is assumed.
		</param>
			<param name="Count">Number of substring substitutions to perform. If omitted, the default value is –1, which means make all possible substitutions.
		</param>
			<param name="Compare">Numeric value indicating the kind of comparison to use when evaluating substrings. See Settings for values.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)">
			<summary>Returns a String containing a specified number of characters from the right side of a string.
		</summary>
			<param name="Str">String expression from which the rightmost characters are returned.
		</param>
			<param name="Length">Integer. Numeric expression indicating how many characters to return. If 0, a zero-length string ("") is returned. If greater than or equal to the number of characters in Str, the entire string is returned.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)">
			<summary>This example demonstrates the use of the RSet function.
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.Strings.RTrim(System.String)">
			<summary>Returns a string containing a copy of a specified string with no leading spaces (LTrim), no trailing spaces (RTrim), or no leading or trailing spaces (Trim).
		</summary>
			<param name="Str">Any valid String expression.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Strings.Space(System.Int32)">
			<summary>Returns a string consisting of the specified number of spaces.
		</summary>
			<param name="Number">Integer data type. The number of spaces you want in the string.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
			<summary>Returns a zero-based, one-dimensional array containing a specified number of substrings.
		</summary>
			<param name="Expression">String expression containing substrings and delimiters. If Expression is a zero-length string (""), the Split function returns an array with no elements and no data.
		</param>
			<param name="Delimiter">Single character used to identify substring limits. If Delimiter is omitted, the space character (" ") is assumed to be the delimiter. If Delimiter is a zero-length string, a single-element array containing the entire Expression string is returned.
		</param>
			<param name="Limit">Number of substrings to be returned; the default, –1, indicates that all substrings are returned.
		</param>
			<param name="Compare">Numeric value indicating the comparison to use when evaluating substrings. See Settings for values.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
			<summary>Returns -1, 0, or 1, based on the result of a string comparison. The strings are compared by alphanumeric sort values begining with the first character.
		</summary>
			<param name="String1">Any valid String expression.
		</param>
			<param name="String2">Any valid String expression.
		</param>
			<param name="Compare">Specifies the type of string comparison. If compare is omitted, the Option Compare setting determines the type of comparison.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)">
			<summary>Returns a String converted as specified.
		</summary>
			<param name="Str">String expression to be converted.
		</param>
			<param name="Conversion">Microsoft.VisualBasic.VbStrConv. The enumeration value specifying the type of conversion to perform.
		</param>
			<param name="LocaleID">The LocaleID value, if different from the system LocaleID value. (The system LocaleID value is the default.)
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)">
			<summary>Returns a String or Object consisting of the specified character repeated the specified number of times.
		</summary>
			<param name="Number">Integer. The length to the string to be returned.
		</param>
			<param name="Character">Any valid Char, String, or Object expression. Only the first character of the expression will be used.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)">
			<summary>Returns a String or Object consisting of the specified character repeated the specified number of times.
		</summary>
			<param name="Number">Integer. The length to the string to be returned.
		</param>
			<param name="Character">Any valid Char, String, or Object expression. Only the first character of the expression will be used.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)">
			<summary>Returns a String or Object consisting of the specified character repeated the specified number of times.
		</summary>
			<param name="Number">Integer. The length to the string to be returned.
		</param>
			<param name="Character">Any valid Char, String, or Object expression. Only the first character of the expression will be used.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Strings.StrReverse(System.String)">
			<summary>Returns a string in which the character order of a specified string is reversed.
		</summary>
			<param name="Expression">String expression whose characters are to be reversed. If Expression is a zero-length string (""), a zero-length string is returned.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Strings.Trim(System.String)">
			<summary>Returns a string containing a copy of a specified string with no leading spaces (LTrim), no trailing spaces (RTrim), or no leading or trailing spaces (Trim).
		</summary>
			<param name="Str">Any valid String expression.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Strings.UCase(System.Char)">
			<summary>Returns a String or Char containing the specified string converted to uppercase.
		</summary>
			<param name="Value">Any valid String or Char expression.
		</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Strings.UCase(System.String)">
			<summary>Returns a String or Char containing the specified string converted to uppercase.
		</summary>
			<param name="Value">Any valid String or Char expression.
		</param>
		</member>
		<member name="T:Microsoft.VisualBasic.TriState">
			<summary>The TriState enumeration defines constants used to identify one of three possible states.
		</summary>
		</member>
		<member name="T:Microsoft.VisualBasic.VariantType">
			<summary>The VariantType enumeration defines constants used to possible variant types.
		</summary>
		</member>
		<member name="T:Microsoft.VisualBasic.VBMath">
			<summary>The VbMath module contains procedures used to perform mathematical operations.
		</summary>
		</member>
		<member name="T:Microsoft.VisualBasic.VbStrConv">
			<summary>The VbStrConv enumeration contains constants used to identify the type of string conversion to be performed by the StrConv function. These constants can be used anywhere in your code.
		</summary>
		</member>
		<member name="T:Microsoft.VisualBasic.ComClassAttribute">
			<summary>The ComClassAttribute can be applied to a class to expose its functionality to COM.
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.ComClassAttribute.#ctor">
			<summary>Exposes the class to COM and automatically generates GUIDs for the classid, default interface and the events interface.
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.ComClassAttribute.#ctor(System.String)">
			<summary>Exposes the class to COM. It uses the specified ClassID and automatically generates IIDs for the default interface and the events interface.
		</summary>
			<param name="_ClassID">The UUID for the ClassID for this class</param>
		</member>
		<member name="M:Microsoft.VisualBasic.ComClassAttribute.#ctor(System.String,System.String)">
			<summary>Exposes the class to COM. It uses the specified ClassID and IID for the default interface and automatically generates an IID for the events interface.
		</summary>
			<param name="_ClassID">The GUID for the ClassID for this class</param>
			<param name="_InterfaceID">The IID for the default interface for this class</param>
		</member>
		<member name="M:Microsoft.VisualBasic.ComClassAttribute.#ctor(System.String,System.String,System.String)">
			<summary>Exposes the class to COM and uses the specified GUIDs for the ClassID, default interface and the events interface.
		</summary>
			<param name="_ClassID">The GUID for the ClassID for this class</param>
			<param name="_InterfaceID">The IID for the default interface for this class</param>
			<param name="_EventID">The IID for the events interface for this class</param>
		</member>
		<member name="M:Microsoft.VisualBasic.Conversion.ErrorToString">
			<summary>Returns the error message for the last error
		</summary>
		</member>
		<member name="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)">
			<summary>Returns the message for the specified error number
			<param name="ErrorNumber">The Error number as an integer </param>
		</summary>
		</member>

<member name="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Array@,System.Int64,System.Boolean,System.Boolean)">
			<summary>Reads data from an open disk file into a variable.</summary>
			<param name="FileNumber">Any valid file number.</param>
			<param name="Value">Array variable name into which data is read. </param>
			<param name="RecordNumber">Record number (Random mode files) or byte number (Binary mode files) at which reading begins.</param>
			<param name="ArrayIsDynamic">Specifies whether the array is to be treated as dynamic and so whether to read 
an array descriptor describing the size and bounds of the array.</param>
			<param name="StringIsFixedLength">Specifies whether any strings are to be treated as fixed length and so whether to read 
a descriptor describing the size of the string.</param>
		</member>

<member name="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Boolean@,System.Int64)">
			<summary>Reads data from an open disk file into a variable.</summary>
			<param name="FileNumber">Any valid file number.</param>
			<param name="Value">Boolean variable name into which data is read. </param>
			<param name="RecordNumber">Record number (Random mode files) or byte number (Binary mode files) at which reading begins.</param>
		</member>

<member name="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Byte@,System.Int64)">
			<summary>Reads data from an open disk file into a variable.</summary>
			<param name="FileNumber">Any valid file number.</param>
			<param name="Value">Byte variable name into which data is read. </param>
			<param name="RecordNumber">Record number (Random mode files) or byte number (Binary mode files) at which reading begins.</param>
		</member>

<member name="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Char@,System.Int64)">
			<summary>Reads data from an open disk file into a variable.</summary>
			<param name="FileNumber">Any valid file number.</param>
			<param name="Value">Character variable name into which data is read. </param>
			<param name="RecordNumber">Record number (Random mode files) or byte number (Binary mode files) at which reading begins.</param>
		</member>

<member name="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.DateTime@,System.Int64)">
			<summary>Reads data from an open disk file into a variable.</summary>
			<param name="FileNumber">Any valid file number.</param>
			<param name="Value">Date variable name into which data is read. </param>
			<param name="RecordNumber">Record number (Random mode files) or byte number (Binary mode files) at which reading begins.</param>
		</member>

<member name="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Decimal@,System.Int64)">
			<summary>Reads data from an open disk file into a variable.</summary>
			<param name="FileNumber">Any valid file number.</param>
			<param name="Value">Decimal variable name into which data is read. </param>
			<param name="RecordNumber">Record number (Random mode files) or byte number (Binary mode files) at which reading begins.</param>
		</member>

<member name="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Double@,System.Int64)">
			<summary>Reads data from an open disk file into a variable.</summary>
			<param name="FileNumber">Any valid file number.</param>
			<param name="Value">Double variable name into which data is read. </param>
			<param name="RecordNumber">Record number (Random mode files) or byte number (Binary mode files) at which reading begins.</param>
		</member>

<member name="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int16@,System.Int64)">
			<summary>Reads data from an open disk file into a variable.</summary>
			<param name="FileNumber">Any valid file number.</param>
			<param name="Value">Short variable name into which data is read. </param>
			<param name="RecordNumber">Record number (Random mode files) or byte number (Binary mode files) at which reading begins.</param>
		</member>

<member name="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int32@,System.Int64)">
			<summary>Reads data from an open disk file into a variable.</summary>
			<param name="FileNumber">Any valid file number.</param>
			<param name="Value">Integer variable name into which data is read. </param>
			<param name="RecordNumber">Record number (Random mode files) or byte number (Binary mode files) at which reading begins.</param>
		</member>

<member name="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int64@,System.Int64)">
			<summary>Reads data from an open disk file into a variable.</summary>
			<param name="FileNumber">Any valid file number.</param>
			<param name="Value">Long variable name into which data is read. </param>
			<param name="RecordNumber">Record number (Random mode files) or byte number (Binary mode files) at which reading begins.</param>
		</member>

<member name="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Single@,System.Int64)">
			<summary>Reads data from an open disk file into a variable.</summary>
			<param name="FileNumber">Any valid file number.</param>
			<param name="Value">Single variable name into which data is read. </param>
			<param name="RecordNumber">Record number (Random mode files) or byte number (Binary mode files) at which reading begins.</param>
		</member>

<member name="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.String@,System.Int64,System.Boolean)">
			<summary>Reads data from an open disk file into a variable.</summary>
			<param name="FileNumber">Any valid file number.</param>
			<param name="Value">String variable name into which data is read. </param>
			<param name="RecordNumber">Record number (Random mode files) or byte number (Binary mode files) at which reading begins.</param>
			<param name="StringIsFixedLength">Specifies whether string is to be treated as fixed length and so whether to read 
a descriptor describing the size of the string.</param>
		</member>

<member name="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.ValueType@,System.Int64)">
			<summary>Reads data from an open disk file into a variable.</summary>
			<param name="FileNumber">Any valid file number.</param>
			<param name="Value">Structure variable name into which data is read.</param>
			<param name="RecordNumber">Record number (Random mode files) or byte number (Binary mode files) at which reading begins.</param>
		</member>

<member name="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)">
			<summary>Reads data from an open disk file into an object variable as if it were a variant</summary>
			<param name="FileNumber">Any valid file number.</param>
			<param name="Value">Object variable name into which data is read.</param>
			<param name="RecordNumber">Record number (Random mode files) or byte number (Binary mode files) at which reading begins.</param>
		</member>

<member name="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)">
			<summary>Opens a file for input or output.</summary>
			<param name="FileNumber">Any valid file number. Use the FreeFile function to obtain the next 
available file number.</param>
			<param name="FileName">Expression that specifies a file name — may include directory or folder, and 
drive.</param>
			<param name="Mode">Enum specifying the file mode.</param>
			<param name="Access">Enum specifying the operations permitted on the open file.</param>
			<param name="Share">Enum specifying the operations restricted on the open file by other processes</param>
			<param name="RecordLength">For files opened for random access, this value is the record length. For 
sequential files, this value is the number of characters buffered.</param>
		</member>

<member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Array,System.Int64,System.Boolean,System.Boolean)">
			<summary>Writes data from a variable to a disk file.</summary>
			<param name="FileNumber">Any valid file number. </param>
			<param name="Value">Variable name containing data to be written to disk. </param>
			<param name="RecordNumber">Record number (Random mode files) or byte number (Binary mode files) at which writing begins. </param>
			<param name="ArrayIsDynamic">Specifies whether the array is to be treated as dynamic, and whether to write an 
array descriptor for the string describing the length.</param>
			<param name="StringIsFixedLength">Specifies whether a string is to be treated as fixedlength, and whether to write a 
descriptor for the string describing the length</param>
		</member>

<member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Boolean,System.Int64)">
			<summary>Writes data from a variable to a disk file.</summary>
			<param name="FileNumber">Any valid file number. </param>
			<param name="Value">Variable name containing data to be written to disk. </param>
			<param name="RecordNumber">Record number (Random mode files) or byte number (Binary mode files) at which writing begins. </param>
		</member>

<member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Byte,System.Int64)">
			<summary>Writes data from a variable to a disk file.</summary>
			<param name="FileNumber">Any valid file number. </param>
			<param name="Value">Variable name containing data to be written to disk. </param>
			<param name="RecordNumber">Record number (Random mode files) or byte number (Binary mode files) at which writing begins. </param>
		</member>

<member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Char,System.Int64)">
			<summary>Writes data from a variable to a disk file.</summary>
			<param name="FileNumber">Any valid file number. </param>
			<param name="Value">Variable name containing data to be written to disk. </param>
			<param name="RecordNumber">Record number (Random mode files) or byte number (Binary mode files) at which writing begins. </param>
		</member>

<member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.DateTime,System.Int64)">
			<summary>Writes data from a variable to a disk file.</summary>
			<param name="FileNumber">Any valid file number. </param>
			<param name="Value">Variable name containing data to be written to disk. </param>
			<param name="RecordNumber">Record number (Random mode files) or byte number (Binary mode files) at which writing begins. </param>
		</member>

<member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Decimal,System.Int64)">
			<summary>Writes data from a variable to a disk file.</summary>
			<param name="FileNumber">Any valid file number. </param>
			<param name="Value">Variable name containing data to be written to disk. </param>
			<param name="RecordNumber">Record number (Random mode files) or byte number (Binary mode files) at which writing begins. </param>
		</member>

<member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Double,System.Int64)">
			<summary>Writes data from a variable to a disk file.</summary>
			<param name="FileNumber">Any valid file number. </param>
			<param name="Value">Variable name containing data to be written to disk. </param>
			<param name="RecordNumber">Record number (Random mode files) or byte number (Binary mode files) at which writing begins. </param>
		</member>

<member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int16,System.Int64)">
			<summary>Writes data from a variable to a disk file.</summary>
			<param name="FileNumber">Any valid file number. </param>
			<param name="Value">Value as System.Int16</param>
			<param name="RecordNumber">Record number (Random mode files) or byte number (Binary mode files) at which writing begins. </param>
		</member>

<member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int32,System.Int64)">
			<summary>Writes data from a variable to a disk file.</summary>
			<param name="FileNumber">Any valid file number. </param>
			<param name="Value">Value as System.Int32</param>
			<param name="RecordNumber">Record number (Random mode files) or byte number (Binary mode files) at which writing begins. </param>
		</member>

<member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int64,System.Int64)">
			<summary>Writes data from a variable to a disk file.</summary>
			<param name="FileNumber">Any valid file number. </param>
			<param name="Value">Value as System.Int64</param>
			<param name="RecordNumber">Record number (Random mode files) or byte number (Binary mode files) at which writing begins. </param>
		</member>

<member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Single,System.Int64)">
			<summary>Writes data from a variable to a disk file.</summary>
			<param name="FileNumber">Any valid file number. </param>
			<param name="Value">Variable name containing data to be written to disk. </param>
			<param name="RecordNumber">Record number (Random mode files) or byte number (Binary mode files) at which writing begins. </param>
		</member>

<member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.String,System.Int64,System.Boolean)">
			<summary>Writes data from a variable to a disk file.</summary>
			<param name="FileNumber">Any valid file number. </param>
			<param name="Value">Variable name containing data to be written to disk. </param>
			<param name="RecordNumber">Record number (Random mode files) or byte number (Binary mode files) at which writing begins. </param>
			<param name="StringIsFixedLength">Specifies whether a string is to be treated as fixedlength, and whether to write a 
descriptor for the string describing the length</param>
		</member>

<member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.ValueType,System.Int64)">
			<summary>Writes data from a variable to a disk file.</summary>
			<param name="FileNumber">Any valid file number. </param>
			<param name="Value">Variable name containing data to be written to disk. </param>
			<param name="RecordNumber">Record number (Random mode files) or byte number (Binary mode files) at which writing begins. </param>
		</member>

<member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Object,System.Object,System.Object)">
			<summary>Writes data from a variable to a disk file.</summary>
			<param name="FileNumber">FileNumber as System.Object</param>
			<param name="Value">Variable name containing data to be written to disk. </param>
			<param name="RecordNumber">RecordNumber as System.Object</param>
		</member>

<member name="M:Microsoft.VisualBasic.FileSystem.FilePutObject(System.Int32,System.Object,System.Int64)">
			<summary>Writes data from a variable to a disk file to be compatible with the VB6 variant</summary>
			<param name="FileNumber">Any valid file number. </param>
			<param name="Value">Variable name containing data to be written to disk. </param>
			<param name="RecordNumber">Record number (Random mode files) or byte number (Binary mode files) at which writing begins. </param>
		</member>

<member name="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)">
			<summary>Assigns an output line width to a file opened using the FileOpen 
function.</summary>
			<param name="FileNumber">Any valid file number.</param>
			<param name="RecordWidth">Numeric expression which indicates how many 
characters appear on a line before a new line is started.</param>
		</member>

<member name="M:Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)">
			<summary>Returns the character at a specified position in a string</summary>
			<param name="str">String to use as a source</param>
			<param name="Index">1 based index of the character to return</param>
		</member>

<member name="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])">
			<summary>Writes display-formatted data to a sequential file, including a linefeed at the end.</summary>
			<param name="FileNumber">Any valid file number.</param>
			<param name="Output">One or more comma-delimited expressions to write to a file.</param>
		</member>

<member name="M:Microsoft.VisualBasic.VBMath.Randomize">
			<summary>Seeds the VB random number generator using the time as the seed</summary>
		</member>

<member name="M:Microsoft.VisualBasic.VBMath.Randomize(System.Double)">
			<summary>Seeds the VB random number generator</summary>
			<param name="Number">Number specifying the seed value</param>
		</member>

<member name="M:Microsoft.VisualBasic.VBMath.Rnd">
			<summary>Returns a Single containing a random number.</summary>
		</member>

<member name="M:Microsoft.VisualBasic.VBMath.Rnd(System.Single)">
			<summary>Returns a Single containing a random number.</summary>
			<param name="Number">Determines which item from sequence to return.</param>
		</member>

<member name="M:Microsoft.VisualBasic.Information.TypeName(System.Object)">
			<summary>Returns a String that provides data type information about a variable.</summary>
			<param name="VarName">Argument is an Object variable of any data type except a structure.</param>
		</member>

<member name="M:Microsoft.VisualBasic.Information.VarType(System.Object)">
			<summary>Returns a value indicating the subtype of a variable.</summary>
			<param name="VarName">Variable for which the type is to be returned.</param>
		</member>

<member name="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])">
			<summary>Writes data to a sequential file.</summary>
			<param name="FileNumber">Any valid file number.</param>
			<param name="Output">One or more comma-delimited expressions to write to a file.</param>
		</member>

</members>
</doc>
