<?xml version="1.0"?>
<doc>
    <assembly>
        <name>corcls</name>
    </assembly>
    <members>
        <member name="M:DefaultNamespace.BaseGenerator.AppendMethodReturnType(System.Text.StringBuilder,System.Reflection.MethodInfo,DefaultNamespace.TypeNames)">
            <!-- Badly formed XML file "doc\BaseGenerator.uex" cannot be included -->
            <devdoc>
                retrieve the return type of the method.  note that we can only do so
                on a normal method, not on a ctor.  to detect the difference, we check
                that the parameter is an instanceof MethodInfo.
            </devdoc>
        </member>
        <member name="M:DefaultNamespace.BaseGenerator.AppendMethodModifiers(System.Text.StringBuilder,System.Reflection.MethodInfo)">
            <!-- Badly formed XML file "doc\BaseGenerator.uex" cannot be included -->
            <devdoc>
                getModifiers returns a string representing the modifiers on a method.
                The method only applies to an actual method, not a constructor.  It
                determines the difference by testing instanceof MethodInfo.
            </devdoc>
        </member>
        <member name="M:DefaultNamespace.BaseGenerator.AppendClassModifiers(System.Text.StringBuilder,System.Type)">
            <!-- Badly formed XML file "doc\BaseGenerator.uex" cannot be included -->
            <devdoc>
                Get the modifiers for the class (public, final, abstract).
            </devdoc>
        </member>
        <member name="M:DefaultNamespace.BaseGenerator.AppendFieldModifiers(System.Text.StringBuilder,System.Reflection.FieldInfo)">
            <!-- Badly formed XML file "doc\BaseGenerator.uex" cannot be included -->
            <devdoc>
                retrieves the modifiers on the field (final, static).
            </devdoc>
        </member>
        <member name="M:DefaultNamespace.BaseGenerator.AppendFieldType(System.Text.StringBuilder,System.Reflection.FieldInfo,DefaultNamespace.TypeNames)">
            <!-- Badly formed XML file "doc\BaseGenerator.uex" cannot be included -->
            <devdoc>
                retrieves the type of the field, checking for an array type
            </devdoc>
        </member>
        <member name="M:DefaultNamespace.BaseGenerator.AppendFieldVisibility(System.Text.StringBuilder,System.Reflection.FieldInfo)">
            <!-- Badly formed XML file "doc\BaseGenerator.uex" cannot be included -->
            <devdoc>
                getVisibility retrieves the visibility of the field (public, etc.).
            </devdoc>
        </member>
        <member name="T:DefaultNamespace.TypeNames">
            <!-- Badly formed XML file "doc\TypeNames.uex" cannot be included -->
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:DefaultNamespace.TypeNames.AbbrPrimitives">
            <!-- Badly formed XML file "doc\TypeNames.uex" cannot be included -->
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:DefaultNamespace.TypeNames.NoAbbrPrimitives">
            <!-- Badly formed XML file "doc\TypeNames.uex" cannot be included -->
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:DefaultNamespace.TypeNames.PkgNames">
            <!-- Badly formed XML file "doc\TypeNames.uex" cannot be included -->
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:DefaultNamespace.TypeNames.NoPkgNames">
            <!-- Badly formed XML file "doc\TypeNames.uex" cannot be included -->
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:DefaultNamespace.TypeNames.AbbrPkgNames">
            <!-- Badly formed XML file "doc\TypeNames.uex" cannot be included -->
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:DefaultNamespace.TypeNames.NoAbbrPkgNames">
            <!-- Badly formed XML file "doc\TypeNames.uex" cannot be included -->
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:DefaultNamespace.TypeNames.Long">
            <!-- Badly formed XML file "doc\TypeNames.uex" cannot be included -->
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:DefaultNamespace.TypeNames.Medium">
            <!-- Badly formed XML file "doc\TypeNames.uex" cannot be included -->
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:DefaultNamespace.TypeNames.Short">
            <!-- Badly formed XML file "doc\TypeNames.uex" cannot be included -->
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="T:DefaultNamespace.corcls">
            <!-- Badly formed XML file "doc\corcls.uex" cannot be included -->
            <devdoc>
                This utility displays the field, ctor, and method membership of a COR class.
                TODO:  flip from using arrays to collections
            </devdoc>
        </member>
        <member name="F:DefaultNamespace.corcls.showHelp">
            <!-- Badly formed XML file "doc\corcls.uex" cannot be included -->
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:DefaultNamespace.corcls.dumpModules">
            <!-- Badly formed XML file "doc\corcls.uex" cannot be included -->
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:DefaultNamespace.corcls.generateWeb">
            <!-- Badly formed XML file "doc\corcls.uex" cannot be included -->
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:DefaultNamespace.corcls.showClassNameOnly">
            <!-- Badly formed XML file "doc\corcls.uex" cannot be included -->
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:DefaultNamespace.corcls.moduleName">
            <!-- Badly formed XML file "doc\corcls.uex" cannot be included -->
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="M:DefaultNamespace.corcls.FindClass(System.String,System.Reflection.Assembly)">
            <!-- Badly formed XML file "doc\corcls.uex" cannot be included -->
            <devdoc>
                findClass() will locate the classname using various search rules.
                TODO: finish search rules!
            </devdoc>
        </member>
        <member name="M:DefaultNamespace.corcls.Main(System.String[])">
            <!-- Badly formed XML file "doc\corcls.uex" cannot be included -->
            <devdoc>
                main does all the real work.  call the arg processor, show the help, and
                run thru the class list on the command line.
            </devdoc>
        </member>
        <member name="M:DefaultNamespace.corcls.showModule(System.Reflection.Assembly)">
            <!-- Badly formed XML file "doc\corcls.uex" cannot be included -->
            <devdoc>
                Shows the entire contents of the module.
            </devdoc>
        </member>
        <member name="M:DefaultNamespace.corcls.showClass(System.Type)">
            <!-- Badly formed XML file "doc\corcls.uex" cannot be included -->
            <devdoc>
                showClass() will take the given Class instance and display all the
                members.
            </devdoc>
        </member>
        <member name="M:DefaultNamespace.corcls.processArgs(System.String[])">
            <!-- Badly formed XML file "doc\corcls.uex" cannot be included -->
            <devdoc>
                Process the arguments passed to the program.  Set all the switches, and
                return the non-switch arguments (classnames) in an array of strings.
            </devdoc>
        </member>
        <member name="T:DefaultNamespace.corcls.TypeComparer">
            <!-- Badly formed XML file "doc\corcls.uex" cannot be included -->
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="F:DefaultNamespace.corcls.TypeComparer.comp">
            <!-- Badly formed XML file "doc\corcls.uex" cannot be included -->
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
        <member name="M:DefaultNamespace.corcls.TypeComparer.Compare(System.Object,System.Object)">
            <!-- Badly formed XML file "doc\corcls.uex" cannot be included -->
            <devdoc>
               <para>[To be supplied.]</para>
            </devdoc>
        </member>
    </members>
</doc>
