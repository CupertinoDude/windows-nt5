<?xml version="1.0"?>
<doc>
  <assembly>
    <name>System.Management</name>
  </assembly>
  <members>
    <member name="T:System.Management.ManagementNamedValueCollection">
      <summary>
        <para> Represents a collection of named values
                  suitable for use as context information to WMI operations. The
                  names are case-insensitive.</para>
      </summary>
    </member>
    <member name="M:System.Management.ManagementNamedValueCollection.#ctor">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Management.ManagementNamedValueCollection" /> class, which is empty. This is 
               the default constructor.</para>
      </summary>
    </member>
    <member name="M:System.Management.ManagementNamedValueCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.ManagementNamedValueCollection" /> class that is serializable 
               and uses the specified <see cref="T:System.Runtime.Serialization.SerializationInfo" />
               and <see cref="T:System.Runtime.Serialization.StreamingContext" />.</para>
      </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" /> ) for this serialization.</param>
    </member>
    <member name="M:System.Management.ManagementNamedValueCollection.Add(System.String,System.Object)">
      <summary>
        <para> Adds a single-named value to the collection.</para>
      </summary>
      <param name=" name">The name of the new value.</param>
      <param name=" value">The value to be associated with the name.</param>
    </member>
    <member name="M:System.Management.ManagementNamedValueCollection.Remove(System.String)">
      <summary>
        <para> Removes a single-named value from the collection. 
                  If the collection does not contain an element with the
                  specified name, the collection remains unchanged and no
                  exception is thrown.</para>
      </summary>
      <param name=" name">The name of the value to be removed.</param>
    </member>
    <member name="M:System.Management.ManagementNamedValueCollection.RemoveAll">
      <summary>
        <para>Removes all entries from the collection.</para>
      </summary>
    </member>
    <member name="M:System.Management.ManagementNamedValueCollection.Clone">
      <summary>
        <para>Creates a clone of the collection. Individual values 
                  are cloned. If a value does not support cloning, then a <see cref="T:System.NotSupportedException" />
                  is thrown. </para>
      </summary>
      <returns>
               The new copy of the collection.
            </returns>
    </member>
    <member name="P:System.Management.ManagementNamedValueCollection.Item(System.String)">
      <summary>
        <para>Returns the value associated with the specified name from this collection.</para>
      </summary>
      <param name=" name">The name of the value to be returned.</param>
    </member>
    <member name="T:System.Management.TextFormat">
      <summary>
        <para>Describes the possible text formats that can be used with <see cref="M:System.Management.ManagementBaseObject.GetText(System.Management.TextFormat)" />.</para>
      </summary>
    </member>
    <member name="F:System.Management.TextFormat.Mof">
      <summary>
            Managed Object Format
            </summary>
    </member>
    <member name="T:System.Management.CimType">
      <summary>
        <para>Describes the possible CIM types for properties, qualifiers, or method parameters.</para>
      </summary>
    </member>
    <member name="F:System.Management.CimType.SInt8">
      <summary>
        <para>A signed 8-bit integer.</para>
      </summary>
    </member>
    <member name="F:System.Management.CimType.UInt8">
      <summary>
        <para>An unsigned 8-bit integer.</para>
      </summary>
    </member>
    <member name="F:System.Management.CimType.SInt16">
      <summary>
        <para>A signed 16-bit integer.</para>
      </summary>
    </member>
    <member name="F:System.Management.CimType.UInt16">
      <summary>
        <para>An unsigned 16-bit integer.</para>
      </summary>
    </member>
    <member name="F:System.Management.CimType.SInt32">
      <summary>
        <para>A signed 32-bit integer.</para>
      </summary>
    </member>
    <member name="F:System.Management.CimType.UInt32">
      <summary>
        <para>An unsigned 32-bit integer.</para>
      </summary>
    </member>
    <member name="F:System.Management.CimType.SInt64">
      <summary>
        <para>A signed 64-bit integer.</para>
      </summary>
    </member>
    <member name="F:System.Management.CimType.UInt64">
      <summary>
        <para>An unsigned 64-bit integer.</para>
      </summary>
    </member>
    <member name="F:System.Management.CimType.Real32">
      <summary>
        <para>A floating-point 32-bit number.</para>
      </summary>
    </member>
    <member name="F:System.Management.CimType.Real64">
      <summary>
        <para>A floating point 64-bit number.</para>
      </summary>
    </member>
    <member name="F:System.Management.CimType.Boolean">
      <summary>
        <para> A boolean.</para>
      </summary>
    </member>
    <member name="F:System.Management.CimType.String">
      <summary>
        <para>A string.</para>
      </summary>
    </member>
    <member name="F:System.Management.CimType.DateTime">
      <summary>
        <para> A date or time value, represented in a string in DMTF 
                  date/time format: yyyymmddHHMMSS.mmmmmmsUUU</para>
        <para>where:</para>
        <para>yyyymmdd - is the date in year/month/day</para>
        <para>HHMMSS - is the time in hours/minutes/seconds</para>
        <para>mmmmmm - is the number of microseconds in 6 digits</para>
        <para>sUUU - is a sign (+ or -) and a 3-digit UTC offset</para>
      </summary>
    </member>
    <member name="F:System.Management.CimType.Reference">
      <summary>
        <para>A reference to another object. This is represented by a 
                  string containing the path to the referenced object</para>
      </summary>
    </member>
    <member name="F:System.Management.CimType.Char16">
      <summary>
        <para> A 16-bit character.</para>
      </summary>
    </member>
    <member name="F:System.Management.CimType.Object">
      <summary>
        <para>An embedded object.</para>
        <para>Note that embedded objects differ from references in that the embedded object 
                  doesn't have a path and its lifetime is identical to the lifetime of the
                  containing object.</para>
      </summary>
    </member>
    <member name="T:System.Management.ComparisonSettings">
      <summary>
        <para>Describes the object comparison modes that can be used with <see cref="M:System.Management.ManagementBaseObject.CompareTo(System.Management.ManagementBaseObject,System.Management.ComparisonSettings)" />.
               Note that these values may be combined.</para>
      </summary>
    </member>
    <member name="F:System.Management.ComparisonSettings.IncludeAll">
      <summary>
        <para>A mode that compares all elements of the compared objects.</para>
      </summary>
    </member>
    <member name="F:System.Management.ComparisonSettings.IgnoreQualifiers">
      <summary>
        <para>A mode that compares the objects, ignoring qualifiers.</para>
      </summary>
    </member>
    <member name="F:System.Management.ComparisonSettings.IgnoreObjectSource">
      <summary>
        <para> A mode that ignores the source of the objects, namely the server
                  and the namespace they came from, in comparison to other objects.</para>
      </summary>
    </member>
    <member name="F:System.Management.ComparisonSettings.IgnoreDefaultValues">
      <summary>
        <para> A mode that ignores the default values of properties.
                  This value is only meaningful when comparing classes.</para>
      </summary>
    </member>
    <member name="F:System.Management.ComparisonSettings.IgnoreClass">
      <summary>
        <para>A mode that assumes that the objects being compared are instances of 
                  the same class. Consequently, this value causes comparison
                  of instance-related information only. Use this flag to optimize
                  performance. If the objects are not of the same class, the results are undefined.</para>
      </summary>
    </member>
    <member name="F:System.Management.ComparisonSettings.IgnoreCase">
      <summary>
        <para> A mode that compares string values in a case-insensitive
                  manner. This applies to strings and to qualifier values. Property and qualifier
                  names are always compared in a case-insensitive manner whether this flag is
                  specified or not.</para>
      </summary>
    </member>
    <member name="F:System.Management.ComparisonSettings.IgnoreFlavor">
      <summary>
        <para>A mode that ignores qualifier flavors. This flag still takes
                  qualifier values into account, but ignores flavor distinctions such as
                  propagation rules and override restrictions.</para>
      </summary>
    </member>
    <member name="T:System.Management.ManagementBaseObject">
      <summary>
        <para> Contains the basic elements of a management 
                  object. It serves as a base class to more specific management object classes.</para>
      </summary>
    </member>
    <member name="M:System.Management.ManagementBaseObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.ManagementBaseObject" /> class that is serializable.</para>
      </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" /> ) for this serialization.</param>
    </member>
    <member name="M:System.Management.ManagementBaseObject.op_Explicit(System.Management.ManagementBaseObject)~System.IntPtr">
      <summary>
        <para>Provides the internal WMI object represented by a ManagementObject.</para>
      </summary>
      <param name="managementObject">The <see cref="T:System.Management.ManagementBaseObject" /> that references the requested WMI object. </param>
      <returns>
        <para>An <see cref="T:System.IntPtr" /> representing the internal WMI object.</para>
      </returns>
    </member>
    <member name="M:System.Management.ManagementBaseObject.Clone">
      <summary>
        <para>Returns a copy of the object.</para>
      </summary>
      <returns>
        <para>The new cloned object.</para>
      </returns>
    </member>
    <member name="M:System.Management.ManagementBaseObject.GetPropertyValue(System.String)">
      <summary>
        <para>Gets an equivalent accessor to a property's value.</para>
      </summary>
      <param name="propertyName">The name of the property of interest. </param>
      <returns>
        <para>The value of the specified property.</para>
      </returns>
    </member>
    <member name="M:System.Management.ManagementBaseObject.GetQualifierValue(System.String)">
      <summary>
        <para>Gets the value of the specified qualifier.</para>
      </summary>
      <param name="qualifierName">The name of the qualifier of interest. </param>
      <returns>
        <para>The value of the specified qualifier.</para>
      </returns>
    </member>
    <member name="M:System.Management.ManagementBaseObject.SetQualifierValue(System.String,System.Object)">
      <summary>
        <para>Sets the value of the named qualifier.</para>
      </summary>
      <param name="qualifierName">The name of the qualifier to set. This parameter cannot be null.</param>
      <param name="qualifierValue">The value to set.</param>
    </member>
    <member name="M:System.Management.ManagementBaseObject.GetPropertyQualifierValue(System.String,System.String)">
      <summary>
        <para>Returns the value of the specified property qualifier.</para>
      </summary>
      <param name="propertyName">The name of the property to which the qualifier belongs. </param>
      <param name="qualifierName">The name of the property qualifier of interest. </param>
      <returns>
        <para>The value of the specified qualifier.</para>
      </returns>
    </member>
    <member name="M:System.Management.ManagementBaseObject.SetPropertyQualifierValue(System.String,System.String,System.Object)">
      <summary>
        <para>Sets the value of the specified property qualifier.</para>
      </summary>
      <param name="propertyName">The name of the property to which the qualifier belongs.</param>
      <param name="qualifierName">The name of the property qualifier of interest.</param>
      <param name="qualifierValue">The new value for the qualifier.</param>
    </member>
    <member name="M:System.Management.ManagementBaseObject.GetText(System.Management.TextFormat)">
      <summary>
        <para>Returns a textual representation of the object in the specified format.</para>
      </summary>
      <param name="format">The requested textual format. </param>
      <returns>
        <para>The textual representation of the
                  object in the specified format.</para>
      </returns>
    </member>
    <member name="M:System.Management.ManagementBaseObject.Equals(System.Object)">
      <summary>
        <para>Compares two management objects.</para>
      </summary>
      <param name="obj">An object to compare with this instance.</param>
      <returns>
        <see langword="true" /> if 
            <paramref name="obj" /> is an instance of <see cref="T:System.Management.ManagementBaseObject" /> and represents 
               the same object as this instance; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:System.Management.ManagementBaseObject.GetHashCode">
      <summary>
        <para>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</para>
      </summary>
      <returns>
        <para>A hash code for the current object.</para>
      </returns>
    </member>
    <member name="M:System.Management.ManagementBaseObject.CompareTo(System.Management.ManagementBaseObject,System.Management.ComparisonSettings)">
      <summary>
        <para>Compares this object to another, based on specified options.</para>
      </summary>
      <param name="otherObject">The object to which to compare this object. </param>
      <param name="settings">Options on how to compare the objects. </param>
      <returns>
        <para>
          <see langword="true" /> if the objects compared are equal 
               according to the given options; otherwise, <see langword="false" />
               .</para>
      </returns>
    </member>
    <member name="M:System.Management.ManagementBaseObject.SetPropertyValue(System.String,System.Object)">
      <summary>
        <para>Sets the value of the named property.</para>
      </summary>
      <param name="propertyName">The name of the property to be changed.</param>
      <param name="propertyValue">The new value for this property.</param>
    </member>
    <member name="P:System.Management.ManagementBaseObject.Properties">
      <summary>
        <para>Gets or sets a collection of <see cref="T:System.Management.PropertyData" /> objects describing the properties of the
               management object.</para>
      </summary>
    </member>
    <member name="P:System.Management.ManagementBaseObject.SystemProperties">
      <summary>
        <para>Gets or sets the collection of WMI system properties of the management object (for example, the 
                  class name, server, and namespace). WMI system property names begin with
                  "__".</para>
      </summary>
    </member>
    <member name="P:System.Management.ManagementBaseObject.Qualifiers">
      <summary>
        <para>Gets or sets the collection of <see cref="T:System.Management.QualifierData" /> objects defined on the management object. 
               Each element in the collection holds information such as the qualifier name,
               value, and flavor.</para>
      </summary>
    </member>
    <member name="P:System.Management.ManagementBaseObject.ClassPath">
      <summary>
        <para>Gets or sets the path to the management object's class.</para>
      </summary>
    </member>
    <member name="P:System.Management.ManagementBaseObject.Item(System.String)">
      <summary>
        <para> Gets access to property values through [] notation.</para>
      </summary>
      <param name="propertyName">The name of the property of interest. </param>
    </member>
    <member name="T:System.Management.ManagementClass">
      <summary>
        <para> Represents a management class.</para>
      </summary>
    </member>
    <member name="T:System.Management.ManagementObject">
      <summary>
        <para> Represents a data management object.</para>
      </summary>
    </member>
    <member name="M:System.Management.ManagementObject.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.ManagementObject" /> class. This is the
               default constructor.</para>
      </summary>
    </member>
    <member name="M:System.Management.ManagementObject.#ctor(System.Management.ManagementPath)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.ManagementObject" /> class for the specified WMI 
               object path. The path is provided as a <see cref="T:System.Management.ManagementPath" />.</para>
      </summary>
      <param name="path">A <see cref="T:System.Management.ManagementPath" /> that contains a path to a WMI object.</param>
    </member>
    <member name="M:System.Management.ManagementObject.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.ManagementObject" /> class for the specified WMI object path. The path 
               is provided as a string.</para>
      </summary>
      <param name="path">A WMI path.</param>
    </member>
    <member name="M:System.Management.ManagementObject.#ctor(System.Management.ManagementPath,System.Management.ObjectGetOptions)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.ManagementObject" /> class bound to the specified 
               WMI path, including the specified additional options.</para>
      </summary>
      <param name="path">A <see cref="T:System.Management.ManagementPath" /> containing the WMI path.</param>
      <param name=" options">An <see cref="T:System.Management.ObjectGetOptions" /> containing additional options for binding to the WMI object. This parameter could be null if default options are to be used.</param>
    </member>
    <member name="M:System.Management.ManagementObject.#ctor(System.String,System.Management.ObjectGetOptions)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.ManagementObject" /> class bound to the specified WMI path, including the 
               specified additional options. In this variant, the path can be specified as a
               string.</para>
      </summary>
      <param name="path">The WMI path to the object.</param>
      <param name=" options">An <see cref="T:System.Management.ObjectGetOptions" /> representing options to get the specified WMI object.</param>
    </member>
    <member name="M:System.Management.ManagementObject.#ctor(System.Management.ManagementScope,System.Management.ManagementPath,System.Management.ObjectGetOptions)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Management.ManagementObject" /> 
            class bound to the specified WMI path that includes the specified options.</para>
      </summary>
      <param name="scope">A <see cref="T:System.Management.ManagementScope" /> representing the scope in which the WMI object resides. In this version, scopes can only be WMI namespaces.</param>
      <param name=" path">A <see cref="T:System.Management.ManagementPath" /> representing the WMI path to the manageable object.</param>
      <param name=" options">An <see cref="T:System.Management.ObjectGetOptions" /> specifying additional options for getting the object.</param>
    </member>
    <member name="M:System.Management.ManagementObject.#ctor(System.String,System.String,System.Management.ObjectGetOptions)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Management.ManagementObject" /> class
               bound to the specified WMI path, and includes the specified options. The scope and
               the path are specified as strings.</para>
      </summary>
      <param name="scopeString">The scope for the WMI object.</param>
      <param name=" pathString">The WMI object path.</param>
      <param name=" options">An <see cref="T:System.Management.ObjectGetOptions" /> representing additional options for getting the WMI object.</param>
    </member>
    <member name="M:System.Management.ManagementObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.ManagementObject" /> class that is serializable.</para>
      </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" /> ) for this serialization.</param>
    </member>
    <member name="M:System.Management.ManagementObject.Get">
      <summary>
        <para> Binds to the management object.</para>
      </summary>
    </member>
    <member name="M:System.Management.ManagementObject.Get(System.Management.ManagementOperationObserver)">
      <summary>
        <para> Binds to the management object asynchronously.</para>
      </summary>
      <param name="watcher">The object to receive the results of the operation as events.</param>
    </member>
    <member name="M:System.Management.ManagementObject.GetRelated">
      <summary>
        <para>Gets a collection of objects related to the object (associators).</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.Management.ManagementObjectCollection" /> containing the 
               related objects.</para>
      </returns>
    </member>
    <member name="M:System.Management.ManagementObject.GetRelated(System.String)">
      <summary>
        <para>Gets a collection of objects related to the object (associators).</para>
      </summary>
      <param name="relatedClass">A class of related objects. </param>
      <returns>
               A <see cref="T:System.Management.ManagementObjectCollection" /> containing the related objects.
            </returns>
    </member>
    <member name="M:System.Management.ManagementObject.GetRelated(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Management.EnumerationOptions)">
      <summary>
        <para>Gets a collection of objects related to the object (associators).</para>
      </summary>
      <param name="relatedClass">The class of the related objects. </param>
      <param name="relationshipClass">The relationship class of interest. </param>
      <param name="relationshipQualifier">The qualifier required to be present on the relationship class. </param>
      <param name="relatedQualifier">The qualifier required to be present on the related class. </param>
      <param name="relatedRole">The role that the related class is playing in the relationship. </param>
      <param name="thisRole">The role that this class is playing in the relationship. </param>
      <param name="classDefinitionsOnly">When this method returns, it contains only class definitions for the instances that match the query. </param>
      <param name="options">Extended options for how to execute the query. </param>
      <returns>
               A <see cref="T:System.Management.ManagementObjectCollection" /> containing the related objects.
            </returns>
    </member>
    <member name="M:System.Management.ManagementObject.GetRelated(System.Management.ManagementOperationObserver)">
      <summary>
        <para> Gets a collection of objects
                  related to the object (associators) asynchronously. This call returns immediately, and a
                  delegate is called when the results are available.</para>
      </summary>
      <param name="watcher">The object to use to return results. </param>
    </member>
    <member name="M:System.Management.ManagementObject.GetRelated(System.Management.ManagementOperationObserver,System.String)">
      <summary>
        <para>Gets a collection of objects related to the object (associators).</para>
      </summary>
      <param name="watcher">The object to use to return results. </param>
      <param name="relatedClass">The class of related objects. </param>
    </member>
    <member name="M:System.Management.ManagementObject.GetRelated(System.Management.ManagementOperationObserver,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Management.EnumerationOptions)">
      <summary>
        <para>Gets a collection of objects related to the object (associators).</para>
      </summary>
      <param name="watcher">The object to use to return results. </param>
      <param name="relatedClass">The class of the related objects. </param>
      <param name="relationshipClass">The relationship class of interest. </param>
      <param name="relationshipQualifier">The qualifier required to be present on the relationship class. </param>
      <param name="relatedQualifier">The qualifier required to be present on the related class. </param>
      <param name="relatedRole">The role that the related class is playing in the relationship. </param>
      <param name="thisRole">The role that this class is playing in the relationship. </param>
      <param name="classDefinitionsOnly">Return only class definitions for the instances that match the query. </param>
      <param name="options">Extended options for how to execute the query.</param>
    </member>
    <member name="M:System.Management.ManagementObject.GetRelationships">
      <summary>
        <para>Gets a collection of associations to the object.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.Management.ManagementObjectCollection" /> containing the association objects.</para>
      </returns>
    </member>
    <member name="M:System.Management.ManagementObject.GetRelationships(System.String)">
      <summary>
        <para>Gets a collection of associations to the object.</para>
      </summary>
      <param name="relationshipClass">The associations to include. </param>
      <returns>
               A <see cref="T:System.Management.ManagementObjectCollection" /> containing the association objects.
            </returns>
    </member>
    <member name="M:System.Management.ManagementObject.GetRelationships(System.String,System.String,System.String,System.Boolean,System.Management.EnumerationOptions)">
      <summary>
        <para>Gets a collection of associations to the object.</para>
      </summary>
      <param name="relationshipClass">The type of relationship of interest. </param>
      <param name="relationshipQualifier">The qualifier to be present on the relationship. </param>
      <param name="thisRole">The role of this object in the relationship. </param>
      <param name="classDefinitionsOnly">When this method returns, it contains only the class definitions for the result set. </param>
      <param name="options">The extended options for the query execution. </param>
      <returns>
               A <see cref="T:System.Management.ManagementObjectCollection" /> containing the association objects.
            </returns>
    </member>
    <member name="M:System.Management.ManagementObject.GetRelationships(System.Management.ManagementOperationObserver)">
      <summary>
        <para>Gets a collection of associations to the object.</para>
      </summary>
      <param name="watcher">The object to use to return results. </param>
    </member>
    <member name="M:System.Management.ManagementObject.GetRelationships(System.Management.ManagementOperationObserver,System.String)">
      <summary>
        <para>Gets a collection of associations to the object.</para>
      </summary>
      <param name="watcher">The object to use to return results. </param>
      <param name="relationshipClass">The associations to include. </param>
    </member>
    <member name="M:System.Management.ManagementObject.GetRelationships(System.Management.ManagementOperationObserver,System.String,System.String,System.String,System.Boolean,System.Management.EnumerationOptions)">
      <summary>
        <para>Gets a collection of associations to the object.</para>
      </summary>
      <param name="watcher">The object to use to return results. </param>
      <param name="relationshipClass">The type of relationship of interest. </param>
      <param name="relationshipQualifier">The qualifier to be present on the relationship. </param>
      <param name="thisRole">The role of this object in the relationship. </param>
      <param name="classDefinitionsOnly">When this method returns, it contains only the class definitions for the result set. </param>
      <param name="options">The extended options for the query execution. </param>
    </member>
    <member name="M:System.Management.ManagementObject.Put">
      <summary>
        <para>Commits the changes to the object.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.Management.ManagementPath" /> containing the path to the committed 
               object.</para>
      </returns>
    </member>
    <member name="M:System.Management.ManagementObject.Put(System.Management.PutOptions)">
      <summary>
        <para>Commits the changes to the object.</para>
      </summary>
      <param name="options">The options for how to commit the changes. </param>
      <returns>
               A <see cref="T:System.Management.ManagementPath" /> containing the path to the committed object.
            </returns>
    </member>
    <member name="M:System.Management.ManagementObject.Put(System.Management.ManagementOperationObserver)">
      <summary>
        <para>Commits the changes to the object, asynchronously.</para>
      </summary>
      <param name="watcher">A <see cref="T:System.Management.ManagementOperationObserver" /> used to handle the progress and results of the asynchronous operation.</param>
    </member>
    <member name="M:System.Management.ManagementObject.Put(System.Management.ManagementOperationObserver,System.Management.PutOptions)">
      <summary>
        <para>Commits the changes to the object asynchronously and
                  using the specified options.</para>
      </summary>
      <param name="watcher">A <see cref="T:System.Management.ManagementOperationObserver" /> used to handle the progress and results of the asynchronous operation.</param>
      <param name=" options">A <see cref="T:System.Management.PutOptions" /> used to specify additional options for the commit operation.</param>
    </member>
    <member name="M:System.Management.ManagementObject.CopyTo(System.Management.ManagementPath)">
      <summary>
        <para>Copies the object to a different location.</para>
      </summary>
      <param name="path">The <see cref="T:System.Management.ManagementPath" /> to which the object should be copied. </param>
      <returns>
        <para>The new path of the copied object.</para>
      </returns>
    </member>
    <member name="M:System.Management.ManagementObject.CopyTo(System.String)">
      <summary>
        <para>Copies the object to a different location.</para>
      </summary>
      <param name="path">The path to which the object should be copied. </param>
      <returns>
               The new path of the copied object.
            </returns>
    </member>
    <member name="M:System.Management.ManagementObject.CopyTo(System.String,System.Management.PutOptions)">
      <summary>
        <para>Copies the object to a different location.</para>
      </summary>
      <param name="path">The path to which the object should be copied.</param>
      <param name="options">The options for how the object should be put.</param>
      <returns>
               The new path of the copied object.
            </returns>
    </member>
    <member name="M:System.Management.ManagementObject.CopyTo(System.Management.ManagementPath,System.Management.PutOptions)">
      <summary>
        <para>Copies the object to a different location.</para>
      </summary>
      <param name="path">The <see cref="T:System.Management.ManagementPath" /> to which the object should be copied.</param>
      <param name="options">The options for how the object should be put.</param>
      <returns>
               The new path of the copied object.
            </returns>
    </member>
    <member name="M:System.Management.ManagementObject.CopyTo(System.Management.ManagementOperationObserver,System.Management.ManagementPath)">
      <summary>
        <para>Copies the object to a different location, asynchronously.</para>
      </summary>
      <param name="watcher">The object that will receive the results of the operation.</param>
      <param name="path">A <see cref="T:System.Management.ManagementPath" /> specifying the path to which the object should be copied.</param>
    </member>
    <member name="M:System.Management.ManagementObject.CopyTo(System.Management.ManagementOperationObserver,System.String)">
      <summary>
        <para>Copies the object to a different location, asynchronously.</para>
      </summary>
      <param name="watcher">The object that will receive the results of the operation.</param>
      <param name="path"> The path to which the object should be copied.</param>
    </member>
    <member name="M:System.Management.ManagementObject.CopyTo(System.Management.ManagementOperationObserver,System.String,System.Management.PutOptions)">
      <summary>
        <para>Copies the object to a different location, asynchronously.</para>
      </summary>
      <param name="watcher">The object that will receive the results of the operation.</param>
      <param name="path">The path to which the object should be copied.</param>
      <param name="options">The options for how the object should be put.</param>
    </member>
    <member name="M:System.Management.ManagementObject.CopyTo(System.Management.ManagementOperationObserver,System.Management.ManagementPath,System.Management.PutOptions)">
      <summary>
        <para>Copies the object to a different location, asynchronously.</para>
      </summary>
      <param name="watcher">The object that will receive the results of the operation.</param>
      <param name="path">The path to which the object should be copied.</param>
      <param name="options">The options for how the object should be put.</param>
    </member>
    <member name="M:System.Management.ManagementObject.Delete">
      <summary>
        <para>Deletes the object.</para>
      </summary>
    </member>
    <member name="M:System.Management.ManagementObject.Delete(System.Management.DeleteOptions)">
      <summary>
        <para>Deletes the object.</para>
      </summary>
      <param name="options">The options for how to delete the object. </param>
    </member>
    <member name="M:System.Management.ManagementObject.Delete(System.Management.ManagementOperationObserver)">
      <summary>
        <para>Deletes the object.</para>
      </summary>
      <param name="watcher">The object that will receive the results of the operation.</param>
    </member>
    <member name="M:System.Management.ManagementObject.Delete(System.Management.ManagementOperationObserver,System.Management.DeleteOptions)">
      <summary>
        <para>Deletes the object.</para>
      </summary>
      <param name="watcher">The object that will receive the results of the operation.</param>
      <param name="options">The options for how to delete the object.</param>
    </member>
    <member name="M:System.Management.ManagementObject.InvokeMethod(System.String,System.Object[])">
      <summary>
        <para> 
                  Invokes a method on the object.</para>
      </summary>
      <param name="methodName">The name of the method to execute. </param>
      <param name="args">An array containing parameter values. </param>
      <returns>
        <para>The value returned by the method.</para>
      </returns>
    </member>
    <member name="M:System.Management.ManagementObject.InvokeMethod(System.Management.ManagementOperationObserver,System.String,System.Object[])">
      <summary>
        <para>Invokes a method on the object, asynchronously.</para>
      </summary>
      <param name="watcher">The object to receive the results of the operation.</param>
      <param name="methodName">The name of the method to execute. </param>
      <param name="args">An array containing parameter values. </param>
    </member>
    <member name="M:System.Management.ManagementObject.InvokeMethod(System.String,System.Management.ManagementBaseObject,System.Management.InvokeMethodOptions)">
      <summary>
        <para>Invokes a method on the WMI object. The input and output 
                  parameters are represented as <see cref="T:System.Management.ManagementBaseObject" />
                  objects.</para>
      </summary>
      <param name="methodName">The name of the method to execute.</param>
      <param name=" inParameters">A <see cref="T:System.Management.ManagementBaseObject" /> holding the input parameters to the method.</param>
      <param name=" options">An <see cref="T:System.Management.InvokeMethodOptions" /> containing additional options for the execution of the method.</param>
      <returns>
        <para>A <see cref="T:System.Management.ManagementBaseObject" /> containing the
               output parameters and return value of the executed method.</para>
      </returns>
    </member>
    <member name="M:System.Management.ManagementObject.InvokeMethod(System.Management.ManagementOperationObserver,System.String,System.Management.ManagementBaseObject,System.Management.InvokeMethodOptions)">
      <summary>
        <para>Invokes a method on the object, asynchronously.</para>
      </summary>
      <param name="watcher">A <see cref="T:System.Management.ManagementOperationObserver" /> used to handle the asynchronous execution's progress and results.</param>
      <param name=" methodName">The name of the method to be executed.</param>
      <param name=" inParameters">
        <para>A <see cref="T:System.Management.ManagementBaseObject" /> containing the input parameters for the method.</para>
      </param>
      <param name=" options">An <see cref="T:System.Management.InvokeMethodOptions" /> containing additional options used to execute the method.</param>
    </member>
    <member name="M:System.Management.ManagementObject.GetMethodParameters(System.String)">
      <summary>
        <para>Returns a <see cref="T:System.Management.ManagementBaseObject" /> representing the list of input parameters for a method.</para>
      </summary>
      <param name="methodName">The name of the method. </param>
      <returns>
        <para>A <see cref="T:System.Management.ManagementBaseObject" /> containing the
               input parameters to the method.</para>
      </returns>
    </member>
    <member name="M:System.Management.ManagementObject.Clone">
      <summary>
        <para>Creates a copy of the object.</para>
      </summary>
      <returns>
        <para>The copied object.</para>
      </returns>
    </member>
    <member name="M:System.Management.ManagementObject.ToString">
      <summary>
        <para>Returns the full path of the object. This is an override of the
                  default object implementation.</para>
      </summary>
      <returns>
        <para> The full path of
                  the object.</para>
      </returns>
    </member>
    <member name="P:System.Management.ManagementObject.Scope">
      <summary>
        <para> Gets or sets the scope in which this object resides.</para>
      </summary>
    </member>
    <member name="P:System.Management.ManagementObject.Path">
      <summary>
        <para> Gets or sets the object's WMI path.</para>
      </summary>
    </member>
    <member name="P:System.Management.ManagementObject.Options">
      <summary>
        <para> 
                  Gets or
                  sets additional information to use when retrieving the object.</para>
      </summary>
    </member>
    <member name="P:System.Management.ManagementObject.ClassPath">
      <summary>
        <para>Gets or sets the path to the object's class.</para>
      </summary>
    </member>
    <member name="M:System.Management.ManagementClass.#ctor">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Management.ManagementClass" /> class. This is the
               default constructor.</para>
      </summary>
    </member>
    <member name="M:System.Management.ManagementClass.#ctor(System.Management.ManagementPath)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.ManagementClass" /> class initialized to the
               given path.</para>
      </summary>
      <param name="path">A <see cref="T:System.Management.ManagementPath" /> specifying which WMI class to bind to.</param>
    </member>
    <member name="M:System.Management.ManagementClass.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.ManagementClass" /> class initialized to the given path.</para>
      </summary>
      <param name="path">The path to the WMI class.</param>
    </member>
    <member name="M:System.Management.ManagementClass.#ctor(System.Management.ManagementPath,System.Management.ObjectGetOptions)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.ManagementClass" /> class initialized to the
               given WMI class path using the specified options.</para>
      </summary>
      <param name="path">A <see cref="T:System.Management.ManagementPath" /> representing the WMI class path.</param>
      <param name=" options">An <see cref="T:System.Management.ObjectGetOptions" /> representing the options to use when retrieving this class.</param>
    </member>
    <member name="M:System.Management.ManagementClass.#ctor(System.String,System.Management.ObjectGetOptions)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.ManagementClass" /> class initialized to the given WMI class path 
               using the specified options.</para>
      </summary>
      <param name="path">The path to the WMI class.</param>
      <param name=" options">An <see cref="T:System.Management.ObjectGetOptions" /> representing the options to use when retrieving the WMI class.</param>
    </member>
    <member name="M:System.Management.ManagementClass.#ctor(System.Management.ManagementScope,System.Management.ManagementPath,System.Management.ObjectGetOptions)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.ManagementClass" /> class for the specified
               WMI class in the specified scope and with the specified options.</para>
      </summary>
      <param name="scope">A <see cref="T:System.Management.ManagementScope" /> that specifies the scope (server and namespace) where the WMI class resides. </param>
      <param name=" path">A <see cref="T:System.Management.ManagementPath" /> that represents the path to the WMI class in the specified scope.</param>
      <param name=" options">An <see cref="T:System.Management.ObjectGetOptions" /> that specifies the options to use when retrieving the WMI class.</param>
    </member>
    <member name="M:System.Management.ManagementClass.#ctor(System.String,System.String,System.Management.ObjectGetOptions)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.ManagementClass" /> class for the specified WMI class, in the 
               specified scope, and with the specified options.</para>
      </summary>
      <param name="scope">The scope in which the WMI class resides.</param>
      <param name=" path">The path to the WMI class within the specified scope.</param>
      <param name=" options">The options to use when retrieving the WMI class.</param>
    </member>
    <member name="M:System.Management.ManagementClass.GetInstances">
      <summary>
        <para>Returns the collection of all instances of the class.</para>
      </summary>
      <returns>
        <para>A collection of the <see cref="T:System.Management.ManagementObject" /> objects 
               representing the instances of the class.</para>
      </returns>
    </member>
    <member name="M:System.Management.ManagementClass.GetInstances(System.Management.EnumerationOptions)">
      <summary>
        <para>Returns the collection of all instances of the class using the specified options.</para>
      </summary>
      <param name="options">The additional operation options.</param>
      <returns>
        <para>A collection of the <see cref="T:System.Management.ManagementObject" /> objects 
               representing the instances of the class, according to the specified options.</para>
      </returns>
    </member>
    <member name="M:System.Management.ManagementClass.GetInstances(System.Management.ManagementOperationObserver)">
      <summary>
        <para>Returns the collection of all instances of the class, asynchronously.</para>
      </summary>
      <param name="watcher">The object to handle the asynchronous operation's progress. </param>
    </member>
    <member name="M:System.Management.ManagementClass.GetInstances(System.Management.ManagementOperationObserver,System.Management.EnumerationOptions)">
      <summary>
        <para>Returns the collection of all instances of the class, asynchronously, using 
                  the specified options.</para>
      </summary>
      <param name="watcher">The object to handle the asynchronous operation's progress. </param>
      <param name=" options">The specified additional options for getting the instances.</param>
    </member>
    <member name="M:System.Management.ManagementClass.GetSubclasses">
      <summary>
        <para>Returns the collection of all subclasses for the class.</para>
      </summary>
      <returns>
        <para>A collection of the <see cref="T:System.Management.ManagementObject" /> objects that
               represent the subclasses of the WMI class.</para>
      </returns>
    </member>
    <member name="M:System.Management.ManagementClass.GetSubclasses(System.Management.EnumerationOptions)">
      <summary>
        <para>Retrieves the subclasses of the class using the specified
                  options.</para>
      </summary>
      <param name="options">The specified additional options for retrieving subclasses of the class.</param>
      <returns>
        <para>A collection of the <see cref="T:System.Management.ManagementObject" /> objects
               representing the subclasses of the WMI class, according to the specified
               options.</para>
      </returns>
    </member>
    <member name="M:System.Management.ManagementClass.GetSubclasses(System.Management.ManagementOperationObserver)">
      <summary>
        <para>Returns the collection of all subclasses of the class, asynchronously.</para>
      </summary>
      <param name="watcher">The object to handle the asynchronous operation's progress. </param>
    </member>
    <member name="M:System.Management.ManagementClass.GetSubclasses(System.Management.ManagementOperationObserver,System.Management.EnumerationOptions)">
      <summary>
        <para>Retrieves the subclasses of the class, asynchronously, using the specified 
                  options.</para>
      </summary>
      <param name="watcher">The object to handle the asynchronous operation's progress. </param>
      <param name="options">The specified additional options to use in subclass retrieval.</param>
    </member>
    <member name="M:System.Management.ManagementClass.Derive(System.String)">
      <summary>
        <para>Derives a new class from this class.</para>
      </summary>
      <param name="newClassName">The name of the new class to be derived.</param>
      <returns>
        <para>A new <see cref="T:System.Management.ManagementClass" /> 
            that represents a new WMI class derived from the original class.</para>
      </returns>
    </member>
    <member name="M:System.Management.ManagementClass.CreateInstance">
      <summary>
        <para>Creates a new instance of the WMI class.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.Management.ManagementObject" /> that represents a new
               instance of the WMI class.</para>
      </returns>
    </member>
    <member name="M:System.Management.ManagementClass.Clone">
      <summary>
        <para>Returns a copy of the object.</para>
      </summary>
      <returns>
        <para> The cloned 
                  object.</para>
      </returns>
    </member>
    <member name="M:System.Management.ManagementClass.GetRelatedClasses">
      <summary>
        <para> Retrieves classes related to the WMI class.</para>
      </summary>
      <returns>
        <para>A collection of the <see cref="T:System.Management.ManagementClass" /> or <see cref="T:System.Management.ManagementObject" /> 
            objects that represents WMI classes or instances related to
            the WMI class.</para>
      </returns>
    </member>
    <member name="M:System.Management.ManagementClass.GetRelatedClasses(System.String)">
      <summary>
        <para> Retrieves classes related to the WMI class.</para>
      </summary>
      <param name="relatedClass">
        <para>The class from which resulting classes have to be derived.</para>
      </param>
      <returns>
               A collection of classes related to
               this class.
            </returns>
    </member>
    <member name="M:System.Management.ManagementClass.GetRelatedClasses(System.String,System.String,System.String,System.String,System.String,System.String,System.Management.EnumerationOptions)">
      <summary>
        <para> Retrieves classes related to the WMI class based on the specified 
                  options.</para>
      </summary>
      <param name=" relatedClass">
        <para>The class from which resulting classes have to be derived.</para>
      </param>
      <param name=" relationshipClass"> The relationship type which resulting classes must have with the source class.</param>
      <param name=" relationshipQualifier">This qualifier must be present on the relationship.</param>
      <param name=" relatedQualifier">This qualifier must be present on the resulting classes.</param>
      <param name=" relatedRole">The resulting classes must have this role in the relationship.</param>
      <param name=" thisRole">The source class must have this role in the relationship.</param>
      <param name=" options">The options for retrieving the resulting classes.</param>
      <returns>
        <para>A collection of classes related to
                  this class.</para>
      </returns>
    </member>
    <member name="M:System.Management.ManagementClass.GetRelatedClasses(System.Management.ManagementOperationObserver)">
      <summary>
        <para> Retrieves classes 
                  related to the WMI class, asynchronously.</para>
      </summary>
      <param name="watcher">The object to handle the asynchronous operation's progress. </param>
    </member>
    <member name="M:System.Management.ManagementClass.GetRelatedClasses(System.Management.ManagementOperationObserver,System.String)">
      <summary>
        <para> Retrieves classes related to the WMI class, asynchronously, given the related 
                  class name.</para>
      </summary>
      <param name="watcher">The object to handle the asynchronous operation's progress. </param>
      <param name=" relatedClass">The name of the related class.</param>
    </member>
    <member name="M:System.Management.ManagementClass.GetRelatedClasses(System.Management.ManagementOperationObserver,System.String,System.String,System.String,System.String,System.String,System.String,System.Management.EnumerationOptions)">
      <summary>
        <para> Retrieves classes related to the 
                  WMI class, asynchronously, using the specified options.</para>
      </summary>
      <param name="watcher">Handler for progress and results of the asynchronous operation.</param>
      <param name=" relatedClass">
        <para>The class from which resulting classes have to be derived.</para>
      </param>
      <param name=" relationshipClass"> The relationship type which resulting classes must have with the source class.</param>
      <param name=" relationshipQualifier">This qualifier must be present on the relationship.</param>
      <param name=" relatedQualifier">This qualifier must be present on the resulting classes.</param>
      <param name=" relatedRole">The resulting classes must have this role in the relationship.</param>
      <param name=" thisRole">The source class must have this role in the relationship.</param>
      <param name=" options">The options for retrieving the resulting classes.</param>
    </member>
    <member name="M:System.Management.ManagementClass.GetRelationshipClasses">
      <summary>
        <para>Retrieves relationship classes that relate the class to others.</para>
      </summary>
      <returns>
        <para>A collection of association classes
                  that relate the class to any other class.</para>
      </returns>
    </member>
    <member name="M:System.Management.ManagementClass.GetRelationshipClasses(System.String)">
      <summary>
        <para>Retrieves relationship classes that relate the class to others, where the 
                  endpoint class is the specified class.</para>
      </summary>
      <param name="relationshipClass">The endpoint class for all relationship classes returned.</param>
      <returns>
        <para>A collection of association classes
                  that relate the class to the specified class.</para>
      </returns>
    </member>
    <member name="M:System.Management.ManagementClass.GetRelationshipClasses(System.String,System.String,System.String,System.Management.EnumerationOptions)">
      <summary>
        <para> Retrieves relationship classes that relate this class to others, according to 
                  specified options.</para>
      </summary>
      <param name="relationshipClass">
        <para> All resulting relationship classes must derive from this class.</para>
      </param>
      <param name=" relationshipQualifier">Resulting relationship classes must have this qualifier.</param>
      <param name=" thisRole">The source class must have this role in the resulting relationship classes.</param>
      <param name=" options">Specifies options for retrieving the results.</param>
      <returns>
        <para>A collection of association classes
                  that relate this class to others, according to the specified options.</para>
      </returns>
    </member>
    <member name="M:System.Management.ManagementClass.GetRelationshipClasses(System.Management.ManagementOperationObserver)">
      <summary>
        <para>Retrieves relationship classes that relate the class to others, 
                  asynchronously.</para>
      </summary>
      <param name="watcher">The object to handle the asynchronous operation's progress. </param>
    </member>
    <member name="M:System.Management.ManagementClass.GetRelationshipClasses(System.Management.ManagementOperationObserver,System.String)">
      <summary>
        <para>Retrieves relationship classes that relate the class to the specified WMI class, 
                  asynchronously.</para>
      </summary>
      <param name="watcher">The object to handle the asynchronous operation's progress. </param>
      <param name=" relationshipClass">The WMI class to which all returned relationships should point.</param>
    </member>
    <member name="M:System.Management.ManagementClass.GetRelationshipClasses(System.Management.ManagementOperationObserver,System.String,System.String,System.String,System.Management.EnumerationOptions)">
      <summary>
        <para>Retrieves relationship classes that relate the class according to the specified 
                  options, asynchronously.</para>
      </summary>
      <param name="watcher">The handler for progress and results of the asynchronous operation.</param>
      <param name="relationshipClass">
        <para>The class from which all resulting relationship classes must derive.</para>
      </param>
      <param name=" relationshipQualifier">The qualifier which the resulting relationship classes must have.</param>
      <param name=" thisRole">The role which the source class must have in the resulting relationship classes.</param>
      <param name=" options"> The options for retrieving the results.</param>
      <returns>
        <para>A collection of association classes
                  relating this class to others, according to the given options.</para>
      </returns>
    </member>
    <member name="M:System.Management.ManagementClass.GetStronglyTypedClassCode(System.Boolean,System.Boolean)">
      <summary>
        <para>Generates a strongly-typed class for a given WMI class.</para>
      </summary>
      <param name="includeSystemClassInClassDef">
        <see langword="true" /> if the class for managing system properties must be included; otherwise, <see langword="false" />.</param>
      <param name="systemPropertyClass">
        <see langword="true" /> if the generated class will manage system properties; otherwise, <see langword="false" />.</param>
      <returns>
        <para>A <see cref="T:System.CodeDom.CodeTypeDeclaration" /> instance
               representing the declaration for the strongly-typed class.</para>
      </returns>
    </member>
    <member name="M:System.Management.ManagementClass.GetStronglyTypedClassCode(System.Management.CodeLanguage,System.String,System.String)">
      <summary>
        <para>Generates a strongly-typed class for a given WMI class. This function generates code for Visual Basic, 
                  C#, or JScript, depending on the input parameters.</para>
      </summary>
      <param name="lang">The language of the code to be generated.</param>
      <param name="filePath">The path of the file where the code is to be written.</param>
      <param name="classNamespace">The .NET namespace into which the class should be generated. If this is empty, the namespace will be generated from the WMI namespace.</param>
      <returns>
        <para>
          <see langword="true" />, if the method succeeded; 
               otherwise, <see langword="false" /> .</para>
      </returns>
    </member>
    <member name="P:System.Management.ManagementClass.Path">
      <summary>
        <para>Gets or sets the path of the WMI class to 
                  which the <see cref="T:System.Management.ManagementClass" />
                  object is bound.</para>
      </summary>
    </member>
    <member name="P:System.Management.ManagementClass.Derivation">
      <summary>
        <para> Gets or sets an array containing all WMI classes in the 
                  inheritance hierarchy from this class to the top.</para>
      </summary>
    </member>
    <member name="P:System.Management.ManagementClass.Methods">
      <summary>
        <para>Gets or sets a collection of <see cref="T:System.Management.MethodData" /> objects that
               represent the methods defined in the WMI class.</para>
      </summary>
    </member>
    <member name="T:System.Management.ManagementEventArgs">
      <summary>
        <para>Represents the virtual base class to hold event data for WMI events.</para>
      </summary>
    </member>
    <member name="P:System.Management.ManagementEventArgs.Context">
      <summary>
        <para> Gets the operation context echoed back
                  from the operation that triggered the event.</para>
      </summary>
    </member>
    <member name="T:System.Management.ObjectReadyEventArgs">
      <summary>
        <para>Holds event data for the <see cref="F:System.Management.ManagementOperationObserver.ObjectReady" /> event.</para>
      </summary>
    </member>
    <member name="P:System.Management.ObjectReadyEventArgs.NewObject">
      <summary>
        <para> Gets the newly-returned object.</para>
      </summary>
    </member>
    <member name="T:System.Management.CompletedEventArgs">
      <summary>
        <para> Holds event data for the <see cref="F:System.Management.ManagementOperationObserver.Completed" /> event.</para>
      </summary>
    </member>
    <member name="P:System.Management.CompletedEventArgs.StatusObject">
      <summary>
        <para>Gets or sets additional status information
                  within a WMI object. This may be null.</para>
      </summary>
    </member>
    <member name="P:System.Management.CompletedEventArgs.Status">
      <summary>
        <para>Gets the completion status of the operation.</para>
      </summary>
    </member>
    <member name="T:System.Management.ObjectPutEventArgs">
      <summary>
        <para>Holds event data for the <see cref="F:System.Management.ManagementOperationObserver.ObjectPut" /> event.</para>
      </summary>
    </member>
    <member name="P:System.Management.ObjectPutEventArgs.Path">
      <summary>
        <para> Gets the identity of the
                  object that has been put.</para>
      </summary>
    </member>
    <member name="T:System.Management.ProgressEventArgs">
      <summary>
        <para>Holds event data for the <see cref="F:System.Management.ManagementOperationObserver.Progress" /> event.</para>
      </summary>
    </member>
    <member name="P:System.Management.ProgressEventArgs.UpperBound">
      <summary>
        <para> Gets the total
                  amount of work required to be done by the operation.</para>
      </summary>
    </member>
    <member name="P:System.Management.ProgressEventArgs.Current">
      <summary>
        <para> Gets the current amount of work 
                  done by the operation. This is always less than or equal to <see cref="P:System.Management.ProgressEventArgs.UpperBound" />.</para>
      </summary>
    </member>
    <member name="P:System.Management.ProgressEventArgs.Message">
      <summary>
        <para>Gets or sets optional additional information regarding the operation's progress.</para>
      </summary>
    </member>
    <member name="T:System.Management.EventArrivedEventArgs">
      <summary>
        <para>Holds event data for the <see cref="F:System.Management.ManagementEventWatcher.EventArrived" /> event.</para>
      </summary>
    </member>
    <member name="P:System.Management.EventArrivedEventArgs.NewEvent">
      <summary>
        <para> Gets the WMI event that was delivered.</para>
      </summary>
    </member>
    <member name="T:System.Management.StoppedEventArgs">
      <summary>
        <para>Holds event data for the <see cref="F:System.Management.ManagementEventWatcher.Stopped" /> event.</para>
      </summary>
    </member>
    <member name="P:System.Management.StoppedEventArgs.Status">
      <summary>
        <para> Gets the completion status of the operation.</para>
      </summary>
    </member>
    <member name="T:System.Management.EventArrivedEventHandler">
      <summary>
        <para>Represents the method that will handle the <see cref="F:System.Management.ManagementEventWatcher.EventArrived" /> event.</para>
      </summary>
    </member>
    <member name="T:System.Management.StoppedEventHandler">
      <summary>
        <para>Represents the method that will handle the <see cref="F:System.Management.ManagementEventWatcher.Stopped" /> event.</para>
      </summary>
    </member>
    <member name="T:System.Management.ManagementEventWatcher">
      <summary>
        <para> Subscribes to temporary event notifications
                  based on a specified event query.</para>
      </summary>
    </member>
    <member name="M:System.Management.ManagementEventWatcher.#ctor">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Management.ManagementEventWatcher" /> class. For further
               initialization, set the properties on the object. This is the default constructor.</para>
      </summary>
    </member>
    <member name="M:System.Management.ManagementEventWatcher.#ctor(System.Management.EventQuery)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.ManagementEventWatcher" /> class when given a WMI event query.</para>
      </summary>
      <param name="query">A WMI event query, which determines the events for which the watcher will listen.</param>
    </member>
    <member name="M:System.Management.ManagementEventWatcher.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.ManagementEventWatcher" /> class when given a WMI event query in the 
               form of a string.</para>
      </summary>
      <param name="query"> A WMI event query, which defines the events for which the watcher will listen.</param>
    </member>
    <member name="M:System.Management.ManagementEventWatcher.#ctor(System.Management.ManagementScope,System.Management.EventQuery)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Management.ManagementEventWatcher" /> 
            class that listens for events conforming to the given WMI event query.</para>
      </summary>
      <param name="scope"> The management scope (namespace) in which the watcher will listen for events.</param>
      <param name=" query"> The query that defines the events for which the watcher will listen.</param>
    </member>
    <member name="M:System.Management.ManagementEventWatcher.#ctor(System.String,System.String)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Management.ManagementEventWatcher" /> 
            class that listens for events conforming to the given WMI event query. For this
            variant, the query and the scope are specified as strings.</para>
      </summary>
      <param name="scope"> The management scope (namespace) in which the watcher will listen for events.</param>
      <param name=" query"> The query that defines the events for which the watcher will listen.</param>
    </member>
    <member name="M:System.Management.ManagementEventWatcher.#ctor(System.String,System.String,System.Management.EventWatcherOptions)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Management.ManagementEventWatcher" /> class that listens for 
               events conforming to the given WMI event query, according to the specified options. For
               this variant, the query and the scope are specified as strings. The options
               object can specify options such as a timeout and context information.</para>
      </summary>
      <param name="scope"> The management scope (namespace) in which the watcher will listen for events.</param>
      <param name=" query"> The query that defines the events for which the watcher will listen.</param>
      <param name="options"> Additional options used to watch for events. </param>
    </member>
    <member name="M:System.Management.ManagementEventWatcher.#ctor(System.Management.ManagementScope,System.Management.EventQuery,System.Management.EventWatcherOptions)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Management.ManagementEventWatcher" /> class 
               that listens for events conforming to the given WMI event query, according to the specified
               options. For this variant, the query and the scope are specified objects. The
               options object can specify options such as timeout and context information.</para>
      </summary>
      <param name="scope"> The management scope (namespace) in which the watcher will listen for events.</param>
      <param name=" query"> The query that defines the events for which the watcher will listen.</param>
      <param name="options"> Additional options used to watch for events. </param>
    </member>
    <member name="M:System.Management.ManagementEventWatcher.Finalize">
      <summary>
        <para>Ensures that outstanding calls are cleared. This is the destructor for the object.</para>
      </summary>
    </member>
    <member name="M:System.Management.ManagementEventWatcher.WaitForNextEvent">
      <summary>
        <para>Waits for the next event that matches the specified query to arrive, and
                  then returns it.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.Management.ManagementBaseObject" /> representing the 
               newly arrived event.</para>
      </returns>
    </member>
    <member name="M:System.Management.ManagementEventWatcher.Start">
      <summary>
        <para>Subscribes to events with the given query and delivers 
                  them, asynchronously, through the <see cref="F:System.Management.ManagementEventWatcher.EventArrived" /> event.</para>
      </summary>
    </member>
    <member name="M:System.Management.ManagementEventWatcher.Stop">
      <summary>
        <para>Cancels the subscription whether it is synchronous or asynchronous.</para>
      </summary>
    </member>
    <member name="E:System.Management.ManagementEventWatcher.EventArrived">
      <summary>
        <para> Occurs when a new event arrives.</para>
      </summary>
    </member>
    <member name="E:System.Management.ManagementEventWatcher.Stopped">
      <summary>
        <para> Occurs when a subscription is canceled.</para>
      </summary>
    </member>
    <member name="P:System.Management.ManagementEventWatcher.Scope">
      <summary>
        <para>Gets or sets the scope in which to watch for events (namespace or scope).</para>
      </summary>
    </member>
    <member name="P:System.Management.ManagementEventWatcher.Query">
      <summary>
        <para>Gets or sets the criteria to apply to events.</para>
      </summary>
    </member>
    <member name="P:System.Management.ManagementEventWatcher.Options">
      <summary>
        <para>Gets or sets the options used to watch for events.</para>
      </summary>
    </member>
    <member name="T:System.Management.ManagementStatus">
      <summary>
        <para>Represents the enumeration of all WMI error codes that are currently defined.</para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.NoError">
      <summary>
               The operation was successful.
            </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.False">
      <summary>
        <para> This value is returned when no more objects 
                  are available, the number of objects returned is less than the number requested,
                  or at the end of an enumeration. It is also returned when the method is called
                  with a value of 0 for the <paramref name="uCount" /> parameter.</para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.ResetToDefault">
      <summary>
        <para>An overridden property was deleted. This value is
                  returned to signal that the original, non-overridden value has been restored as a
                  result of the deletion.</para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.Different">
      <summary>
        <para> The compared items (such as objects and classes)
                  are not identical.</para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.Timedout">
      <summary>
        <para> A call timed out. This is not an
                  error condition; therefore, some results may have been returned.</para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.NoMoreData">
      <summary>
        <para> No more data is available from the enumeration; the 
                  user should terminate the enumeration. </para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.OperationCanceled">
      <summary>
        <para> The operation was
                  canceled.</para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.Pending">
      <summary>
        <para>A request is still in progress; however, the results are not
                  yet available.</para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.DuplicateObjects">
      <summary>
        <para> More than one copy of the same object was detected in 
                  the result set of an enumeration. </para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.PartialResults">
      <summary>
        <para>The user did not receive all of the requested objects
                  because of inaccessible resources (other than security violations).</para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.Failed">
      <summary>
        <para>The call failed.</para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.NotFound">
      <summary>
        <para> The object could not be found. </para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.AccessDenied">
      <summary>
               The current user does not have permission to perform the
               action.
            </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.ProviderFailure">
      <summary>
        <para> The provider failed after 
                  initialization. </para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.TypeMismatch">
      <summary>
               A type mismatch occurred.
            </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.OutOfMemory">
      <summary>
               There was not enough memory for the operation.
            </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.InvalidContext">
      <summary>
        <para>The context object is not valid.</para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.InvalidParameter">
      <summary>
        <para> One of the parameters to the call is not correct. 
               </para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.NotAvailable">
      <summary>
        <para> The resource, typically a remote server, is not 
                  currently available. </para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.CriticalError">
      <summary>
        <para>An internal, critical, and unexpected error occurred. 
                  Report this error to Microsoft Technical Support.</para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.InvalidStream">
      <summary>
        <para>One or more network packets were corrupted during a remote session.</para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.NotSupported">
      <summary>
        <para> The feature or operation is not supported. </para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.InvalidSuperclass">
      <summary>
               The specified superclass is not valid.
            </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.InvalidNamespace">
      <summary>
        <para> The specified namespace could not be found. </para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.InvalidObject">
      <summary>
               The specified instance is not valid.
            </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.InvalidClass">
      <summary>
               The specified class is not valid.
            </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.ProviderNotFound">
      <summary>
               A provider referenced in the schema does not have a
               corresponding registration.
            </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.InvalidProviderRegistration">
      <summary>
               A provider referenced in the schema has an incorrect or
               incomplete registration.
            </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.ProviderLoadFailure">
      <summary>
               COM cannot locate a provider referenced in the schema.
            </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.InitializationFailure">
      <summary>
             A component, such as a provider, failed to initialize for internal reasons. 
            </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.TransportFailure">
      <summary>
               A networking error that prevents normal operation has
               occurred.
            </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.InvalidOperation">
      <summary>
        <para> The requested operation is not valid. This error usually 
                  applies to invalid attempts to delete classes or properties. </para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.InvalidQuery">
      <summary>
               The query was not syntactically valid.
            </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.InvalidQueryType">
      <summary>
        <para>The requested query language is not supported.</para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.AlreadyExists">
      <summary>
        <para>In a put operation, the <see langword="wbemChangeFlagCreateOnly" />
            flag was specified, but the instance already exists.</para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.OverrideNotAllowed">
      <summary>
        <para>The add operation cannot be performed on the qualifier 
                  because the owning object does not permit overrides.</para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.PropagatedQualifier">
      <summary>
        <para> The user attempted to delete a qualifier that was not 
                  owned. The qualifier was inherited from a parent class. </para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.PropagatedProperty">
      <summary>
        <para> The user attempted to delete a property that was not 
                  owned. The property was inherited from a parent class. </para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.Unexpected">
      <summary>
               The client made an unexpected and illegal sequence of
               calls.
            </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.IllegalOperation">
      <summary>
        <para>The user requested an illegal operation, such as 
                  spawning a class from an instance.</para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.CannotBeKey">
      <summary>
        <para> There was an illegal attempt to specify a key qualifier 
                  on a property that cannot be a key. The keys are specified in the class
                  definition for an object and cannot be altered on a per-instance basis.</para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.IncompleteClass">
      <summary>
        <para>The current object is not a valid class definition.
                  Either it is incomplete, or it has not been registered with WMI using
               <see cref="M:System.Management.ManagementObject.Put" />().</para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.InvalidSyntax">
      <summary>
               Reserved for future use.
            </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.NondecoratedObject">
      <summary>
               Reserved for future use.
            </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.ReadOnly">
      <summary>
        <para>The property that you are attempting to modify is read-only.</para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.ProviderNotCapable">
      <summary>
        <para> The provider cannot perform the requested operation, such 
                  as requesting a query that is too complex, retrieving an instance, creating or
                  updating a class, deleting a class, or enumerating a class. </para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.ClassHasChildren">
      <summary>
        <para>An attempt was made to make a change that would
                  invalidate a derived class.</para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.ClassHasInstances">
      <summary>
        <para> An attempt has been made to delete or modify a class that 
                  has instances. </para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.QueryNotImplemented">
      <summary>
               Reserved for future use.
            </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.IllegalNull">
      <summary>
        <para> A value of null was specified for a property that may
                  not be null, such as one that is marked by a <see langword="Key" />, <see langword="Indexed" />, or
               <see langword="Not_Null" /> qualifier.</para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.InvalidQualifierType">
      <summary>
        <para> The value provided for a qualifier was not a 
                  legal qualifier type.</para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.InvalidPropertyType">
      <summary>
               The CIM type specified for a property is not valid.
            </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.ValueOutOfRange">
      <summary>
        <para> The request was made with an out-of-range value, or is 
                  incompatible with the type. </para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.CannotBeSingleton">
      <summary>
        <para>An illegal attempt was made to make a class singleton, 
                  such as when the class is derived from a non-singleton class.</para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.InvalidCimType">
      <summary>
               The CIM type specified is not valid.
            </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.InvalidMethod">
      <summary>
               The requested method is not available.
            </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.InvalidMethodParameters">
      <summary>
        <para> The parameters provided for the method are not valid. 
               </para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.SystemProperty">
      <summary>
               There was an attempt to get qualifiers on a system
               property.
            </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.InvalidProperty">
      <summary>
               The property type is not recognized.
            </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.CallCanceled">
      <summary>
        <para> An asynchronous process has been canceled internally or 
                  by the user. Note that because of the timing and nature of the asynchronous
                  operation, the operation may not have been truly canceled. </para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.ShuttingDown">
      <summary>
        <para>The user has requested an operation while WMI is in the 
                  process of quitting.</para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.PropagatedMethod">
      <summary>
        <para> An attempt was made to reuse an existing method name from 
                  a superclass, and the signatures did not match. </para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.UnsupportedParameter">
      <summary>
        <para> One or more parameter values, such as a query text, is 
                  too complex or unsupported. WMI is requested to retry the operation
                  with simpler parameters. </para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.MissingParameterID">
      <summary>
               A parameter was missing from the method call.
            </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.InvalidParameterID">
      <summary>
               A method parameter has an invalid <see langword="ID" /> qualifier.
            </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.NonconsecutiveParameterIDs">
      <summary>
        <para> One or more of the method parameters have <see langword="ID" /> 
            qualifiers that are out of sequence. </para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.ParameterIDOnRetval">
      <summary>
        <para> The return value for a method has an <see langword="ID" /> qualifier. 
            </para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.InvalidObjectPath">
      <summary>
               The specified object path was invalid.
            </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.OutOfDiskSpace">
      <summary>
        <para> There is not enough free disk space to continue the 
                  operation. </para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.BufferTooSmall">
      <summary>
        <para> The supplied buffer was too small to hold all the objects 
                  in the enumerator or to read a string property. </para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.UnsupportedPutExtension">
      <summary>
               The provider does not support the requested put
               operation.
            </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.UnknownObjectType">
      <summary>
        <para> An object with an incorrect type or version was 
                  encountered during marshaling. </para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.UnknownPacketType">
      <summary>
        <para> A packet with an incorrect type or version was 
                  encountered during marshaling. </para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.MarshalVersionMismatch">
      <summary>
               The packet has an unsupported version.
            </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.MarshalInvalidSignature">
      <summary>
        <para>The packet is corrupted.</para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.InvalidQualifier">
      <summary>
               An attempt has been made to mismatch qualifiers, such as
               putting [key] on an object instead of a property.
            </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.InvalidDuplicateParameter">
      <summary>
               A duplicate parameter has been declared in a CIM method.
            </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.TooMuchData">
      <summary>
        <para> Reserved for future use. </para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.ServerTooBusy">
      <summary>
        <para>The delivery of an event has failed. The provider may 
                  choose to re-raise the event.</para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.InvalidFlavor">
      <summary>
               The specified flavor was invalid.
            </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.CircularReference">
      <summary>
        <para> An attempt has been made to create a reference that is 
                  circular (for example, deriving a class from itself). </para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.UnsupportedClassUpdate">
      <summary>
               The specified class is not supported.
            </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.CannotChangeKeyInheritance">
      <summary>
        <para> An attempt was made to change a key when instances or derived 
                  classes are already using the key. </para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.CannotChangeIndexInheritance">
      <summary>
        <para> An attempt was made to change an index when instances or derived 
                  classes are already using the index. </para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.TooManyProperties">
      <summary>
        <para> An attempt was made to create more properties than the 
                  current version of the class supports. </para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.UpdateTypeMismatch">
      <summary>
        <para> A property was redefined with a conflicting type in a 
                  derived class. </para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.UpdateOverrideNotAllowed">
      <summary>
        <para> An attempt was made in a derived class to override a 
                  non-overrideable qualifier. </para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.UpdatePropagatedMethod">
      <summary>
        <para> A method was redeclared with a conflicting signature in a 
                  derived class. </para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.MethodNotImplemented">
      <summary>
               An attempt was made to execute a method not marked with
               [implemented] in any relevant class.
            </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.MethodDisabled">
      <summary>
        <para> An attempt was made to execute a method marked with 
                  [disabled]. </para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.RefresherBusy">
      <summary>
        <para> The refresher is busy with another operation. </para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.UnparsableQuery">
      <summary>
        <para> The filtering query is syntactically invalid. </para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.NotEventClass">
      <summary>
               The FROM clause of a filtering query references a class
               that is not an event class.
            </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.MissingGroupWithin">
      <summary>
               A GROUP BY clause was used without the corresponding
               GROUP WITHIN clause.
            </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.MissingAggregationList">
      <summary>
               A GROUP BY clause was used. Aggregation on all properties
               is not supported.
            </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.PropertyNotAnObject">
      <summary>
        <para> Dot notation was used on a property that is not an 
                  embedded object. </para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.AggregatingByObject">
      <summary>
               A GROUP BY clause references a property that is an
               embedded object without using dot notation.
            </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.UninterpretableProviderQuery">
      <summary>
               An event provider registration query
               (<see langword="__EventProviderRegistration" />) did not specify the classes for which
               events were provided.
            </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.BackupRestoreWinmgmtRunning">
      <summary>
        <para> An request was made to back up or restore the repository 
                  while WinMgmt.exe was using it. </para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.QueueOverflow">
      <summary>
        <para> The asynchronous delivery queue overflowed from the 
                  event consumer being too slow. </para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.PrivilegeNotHeld">
      <summary>
               The operation failed because the client did not have the
               necessary security privilege.
            </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.InvalidOperator">
      <summary>
        <para>The operator is not valid for this property type.</para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.LocalCredentials">
      <summary>
        <para> The user specified a username, password, or authority on a 
                  local connection. The user must use an empty user name and password and rely on
                  default security. </para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.CannotBeAbstract">
      <summary>
        <para> The class was made abstract when its superclass is not 
                  abstract. </para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.AmendedObject">
      <summary>
        <para> An amended object was used in a put operation without the 
                  WBEM_FLAG_USE_AMENDED_QUALIFIERS flag being specified. </para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.ClientTooSlow">
      <summary>
               The client was not retrieving objects quickly enough from
               an enumeration.
            </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.RegistrationTooBroad">
      <summary>
        <para> The provider registration overlaps with the system event 
                  domain. </para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementStatus.RegistrationTooPrecise">
      <summary>
        <para> A WITHIN clause was not used in this query. </para>
      </summary>
    </member>
    <member name="T:System.Management.ManagementException">
      <summary>
        <para> Represents management exceptions.</para>
      </summary>
    </member>
    <member name="M:System.Management.ManagementException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.ManagementException" /> class that is serializable.</para>
      </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" /> ) for this serialization.</param>
    </member>
    <member name="M:System.Management.ManagementException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Populates the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the data needed to 
               serialize the <see cref="T:System.Management.ManagementException" />
               object.</para>
      </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" /> ) for this serialization.</param>
    </member>
    <member name="P:System.Management.ManagementException.ErrorInformation">
      <summary>
        <para>Gets the extended error object provided by WMI.</para>
      </summary>
    </member>
    <member name="P:System.Management.ManagementException.ErrorCode">
      <summary>
        <para>Gets the error code reported by WMI, which caused this exception.</para>
      </summary>
    </member>
    <member name="T:System.Management.ManagementObjectCollection">
      <summary>
        <para> Represents different collections of WMI instances (namespaces,
                  scopes, and query watcher).</para>
      </summary>
    </member>
    <member name="M:System.Management.ManagementObjectCollection.Finalize">
      <summary>
        <para>Disposes of resources the object is holding. This is the destructor for the object.</para>
      </summary>
    </member>
    <member name="M:System.Management.ManagementObjectCollection.Dispose">
      <summary>
            Releases resources associated with this object. After this
            method has been called, an attempt to use this object will
            result in an ObjectDisposedException being thrown.
            </summary>
    </member>
    <member name="M:System.Management.ManagementObjectCollection.CopyTo(System.Array,System.Int32)">
      <summary>
        <para> Copies the collection to an array.</para>
      </summary>
      <param name="array">An array to copy to. </param>
      <param name="index">The index to start from. </param>
    </member>
    <member name="M:System.Management.ManagementObjectCollection.CopyTo(System.Management.ManagementBaseObject[],System.Int32)">
      <summary>
        <para>Copies the items in the collection to a <see cref="T:System.Management.ManagementBaseObject" /> 
            array.</para>
      </summary>
      <param name="objectCollection">The target array.</param>
      <param name=" index">The index to start from.</param>
    </member>
    <member name="M:System.Management.ManagementObjectCollection.GetEnumerator">
      <summary>
        <para>Returns the enumerator for the collection.</para>
      </summary>
      <returns>
               An <see cref="T:System.Collections.IEnumerator" />that can be used to iterate through the
               collection.
            </returns>
    </member>
    <member name="P:System.Management.ManagementObjectCollection.Count">
      <summary>
        <para>Represents the number of objects in the collection.</para>
      </summary>
    </member>
    <member name="P:System.Management.ManagementObjectCollection.IsSynchronized">
      <summary>
        <para>Represents whether the object is synchronized.</para>
      </summary>
    </member>
    <member name="P:System.Management.ManagementObjectCollection.SyncRoot">
      <summary>
        <para>Represents the object to be used for synchronization.</para>
      </summary>
    </member>
    <member name="M:System.Management.ManagementObjectCollection.ManagementObjectEnumerator.Finalize">
      <summary>
        <para>Disposes of resources the object is holding. This is the destructor for the object.</para>
      </summary>
    </member>
    <member name="M:System.Management.ManagementObjectCollection.ManagementObjectEnumerator.Dispose">
      <summary>
            Releases resources associated with this object. After this
            method has been called, an attempt to use this object will
            result in an ObjectDisposedException being thrown.
            </summary>
    </member>
    <member name="M:System.Management.ManagementObjectCollection.ManagementObjectEnumerator.MoveNext">
      <summary>
               Indicates whether the enumerator has moved to
               the next object in the enumeration.
            </summary>
      <returns>
        <para>
          <see langword="true" />, if the enumerator was 
               successfully advanced to the next element; <see langword="false" /> if the enumerator has
               passed the end of the collection.</para>
      </returns>
    </member>
    <member name="M:System.Management.ManagementObjectCollection.ManagementObjectEnumerator.Reset">
      <summary>
        <para>Resets the enumerator to the beginning of the collection.</para>
      </summary>
    </member>
    <member name="P:System.Management.ManagementObjectCollection.ManagementObjectEnumerator.Current">
      <summary>
        <para>Returns the current object in the
                  enumeration.</para>
      </summary>
    </member>
    <member name="M:System.Management.RelationshipCollection.Add(System.Management.ManagementPath)">
      <summary>
            Adds a relationship to the specified object
            </summary>
    </member>
    <member name="M:System.Management.RelationshipCollection.Remove(System.Management.ManagementPath)">
      <summary>
            Removes the relationship to the specified object
            </summary>
    </member>
    <member name="T:System.Management.ManagementObjectSearcher">
      <summary>
        <para> Retrieves a collection of WMI objects based
                  on a specified query.</para>
      </summary>
    </member>
    <member name="M:System.Management.ManagementObjectSearcher.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.ManagementObjectSearcher" /> class. After some properties on 
               this object are set, the object can be used to invoke a query for management information. This is the default
               constructor.</para>
      </summary>
    </member>
    <member name="M:System.Management.ManagementObjectSearcher.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.ManagementObjectSearcher" /> class used 
               to invoke the specified query for management information.</para>
      </summary>
      <param name="queryString">The WMI query to be invoked by the object.</param>
    </member>
    <member name="M:System.Management.ManagementObjectSearcher.#ctor(System.Management.ObjectQuery)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.ManagementObjectSearcher" /> class used to invoke the 
               specified query for management information.</para>
      </summary>
      <param name="query">An <see cref="T:System.Management.ObjectQuery" /> representing the query to be invoked by the searcher.</param>
    </member>
    <member name="M:System.Management.ManagementObjectSearcher.#ctor(System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.ManagementObjectSearcher" /> class used to invoke the
               specified query in the specified scope.</para>
      </summary>
      <param name="scope">The scope in which to query.</param>
      <param name=" queryString">The query to be invoked.</param>
    </member>
    <member name="M:System.Management.ManagementObjectSearcher.#ctor(System.Management.ManagementScope,System.Management.ObjectQuery)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.ManagementObjectSearcher" /> class used to invoke the 
               specified query in the specified scope.</para>
      </summary>
      <param name="scope">A <see cref="T:System.Management.ManagementScope" /> representing the scope in which to invoke the query.</param>
      <param name=" query">An <see cref="T:System.Management.ObjectQuery" /> representing the query to be invoked.</param>
    </member>
    <member name="M:System.Management.ManagementObjectSearcher.#ctor(System.String,System.String,System.Management.EnumerationOptions)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.ManagementObjectSearcher" /> class used to invoke the specified
               query, in the specified scope, and with the specified options.</para>
      </summary>
      <param name="scope">The scope in which the query should be invoked.</param>
      <param name=" queryString">The query to be invoked.</param>
      <param name=" options">An <see cref="T:System.Management.EnumerationOptions" /> specifying additional options for the query.</param>
    </member>
    <member name="M:System.Management.ManagementObjectSearcher.#ctor(System.Management.ManagementScope,System.Management.ObjectQuery,System.Management.EnumerationOptions)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.ManagementObjectSearcher" /> class to be
               used to invoke the specified query in the specified scope, with the specified
               options.</para>
      </summary>
      <param name="scope">A <see cref="T:System.Management.ManagementScope" /> specifying the scope of the query</param>
      <param name=" query">An <see cref="T:System.Management.ObjectQuery" /> specifying the query to be invoked</param>
      <param name=" options">An <see cref="T:System.Management.EnumerationOptions" /> specifying additional options to be used for the query.</param>
    </member>
    <member name="M:System.Management.ManagementObjectSearcher.Get">
      <summary>
        <para>Invokes the specified WMI query and returns the
                  resulting collection.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.Management.ManagementObjectCollection" /> containing the objects that match the
               specified query.</para>
      </returns>
    </member>
    <member name="M:System.Management.ManagementObjectSearcher.Get(System.Management.ManagementOperationObserver)">
      <summary>
        <para>Invokes the WMI query, asynchronously, and binds to a watcher to deliver the results.</para>
      </summary>
      <param name="watcher">The watcher that raises events triggered by the operation. </param>
    </member>
    <member name="P:System.Management.ManagementObjectSearcher.Scope">
      <summary>
        <para>Gets or sets the scope in which to look for objects (currently a WMI namespace).</para>
      </summary>
    </member>
    <member name="P:System.Management.ManagementObjectSearcher.Query">
      <summary>
        <para> Gets or sets the query to be invoked in the
                  searcher (that is, the criteria to be applied to the search for management objects).</para>
      </summary>
    </member>
    <member name="P:System.Management.ManagementObjectSearcher.Options">
      <summary>
        <para>Gets or sets the options for how to search for objects.</para>
      </summary>
    </member>
    <member name="T:System.Management.ObjectReadyEventHandler">
      <summary>
        <para>Represents the method that will handle the <see cref="F:System.Management.ManagementOperationObserver.ObjectReady" /> event.</para>
      </summary>
    </member>
    <member name="T:System.Management.CompletedEventHandler">
      <summary>
        <para>Represents the method that will handle the <see cref="F:System.Management.ManagementOperationObserver.Completed" /> event.</para>
      </summary>
    </member>
    <member name="T:System.Management.ProgressEventHandler">
      <summary>
        <para>Represents the method that will handle the <see cref="F:System.Management.ManagementOperationObserver.Progress" /> event.</para>
      </summary>
    </member>
    <member name="T:System.Management.ObjectPutEventHandler">
      <summary>
        <para>Represents the method that will handle the <see cref="F:System.Management.ManagementOperationObserver.ObjectPut" /> event.</para>
      </summary>
    </member>
    <member name="T:System.Management.ManagementOperationObserver">
      <summary>
        <para>Used to manage asynchronous operations and handle management information and events received asynchronously.</para>
      </summary>
    </member>
    <member name="M:System.Management.ManagementOperationObserver.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.ManagementOperationObserver" /> class. This is the default constructor.</para>
      </summary>
    </member>
    <member name="M:System.Management.ManagementOperationObserver.Cancel">
      <summary>
        <para> Cancels all outstanding operations.</para>
      </summary>
    </member>
    <member name="E:System.Management.ManagementOperationObserver.ObjectReady">
      <summary>
        <para> Occurs when a new object is available.</para>
      </summary>
    </member>
    <member name="E:System.Management.ManagementOperationObserver.Completed">
      <summary>
        <para> Occurs when an operation has completed.</para>
      </summary>
    </member>
    <member name="E:System.Management.ManagementOperationObserver.Progress">
      <summary>
        <para> Occurs to indicate the progress of an ongoing operation.</para>
      </summary>
    </member>
    <member name="E:System.Management.ManagementOperationObserver.ObjectPut">
      <summary>
        <para> Occurs when an object has been successfully committed.</para>
      </summary>
    </member>
    <member name="T:System.Management.AuthenticationLevel">
      <summary>
        <para>Describes the authentication level to be used to connect to WMI. This is used for the COM connection to WMI.</para>
      </summary>
    </member>
    <member name="F:System.Management.AuthenticationLevel.Default">
      <summary>
        <para>The default COM authentication level. WMI uses the default Windows Authentication setting.</para>
      </summary>
    </member>
    <member name="F:System.Management.AuthenticationLevel.None">
      <summary>
        <para> No COM authentication.</para>
      </summary>
    </member>
    <member name="F:System.Management.AuthenticationLevel.Connect">
      <summary>
        <para> Connect-level COM authentication.</para>
      </summary>
    </member>
    <member name="F:System.Management.AuthenticationLevel.Call">
      <summary>
        <para> Call-level COM authentication.</para>
      </summary>
    </member>
    <member name="F:System.Management.AuthenticationLevel.Packet">
      <summary>
        <para> Packet-level COM authentication.</para>
      </summary>
    </member>
    <member name="F:System.Management.AuthenticationLevel.PacketIntegrity">
      <summary>
        <para>Packet Integrity-level COM authentication.</para>
      </summary>
    </member>
    <member name="F:System.Management.AuthenticationLevel.PacketPrivacy">
      <summary>
        <para>Packet Privacy-level COM authentication.</para>
      </summary>
    </member>
    <member name="F:System.Management.AuthenticationLevel.Unchanged">
      <summary>
        <para>Authentication level should remain as it was before.</para>
      </summary>
    </member>
    <member name="T:System.Management.ImpersonationLevel">
      <summary>
        <para>Describes the impersonation level to be used to connect to WMI.</para>
      </summary>
    </member>
    <member name="F:System.Management.ImpersonationLevel.Default">
      <summary>
        <para>Default impersonation.</para>
      </summary>
    </member>
    <member name="F:System.Management.ImpersonationLevel.Anonymous">
      <summary>
        <para> Anonymous COM impersonation level that hides the 
                  identity of the caller. Calls to WMI may fail
                  with this impersonation level.</para>
      </summary>
    </member>
    <member name="F:System.Management.ImpersonationLevel.Identify">
      <summary>
        <para> Identify-level COM impersonation level that allows objects 
                  to query the credentials of the caller. Calls to
                  WMI may fail with this impersonation level.</para>
      </summary>
    </member>
    <member name="F:System.Management.ImpersonationLevel.Impersonate">
      <summary>
        <para> Impersonate-level COM impersonation level that allows 
                  objects to use the credentials of the caller. This is the recommended impersonation level for WMI calls.</para>
      </summary>
    </member>
    <member name="F:System.Management.ImpersonationLevel.Delegate">
      <summary>
        <para> Delegate-level COM impersonation level that allows objects
                  to permit other objects to use the credentials of the caller. This
                  level, which will work with WMI calls but may constitute an unnecessary
                  security risk, is supported only under Windows 2000.</para>
      </summary>
    </member>
    <member name="T:System.Management.PutType">
      <summary>
        <para>Describes the possible effects of saving an object to WMI when 
                  using <see cref="M:System.Management.ManagementObject.Put" />.</para>
      </summary>
    </member>
    <member name="F:System.Management.PutType.UpdateOnly">
      <summary>
        <para> Updates an existing object
                  only; does not create a new object.</para>
      </summary>
    </member>
    <member name="F:System.Management.PutType.CreateOnly">
      <summary>
        <para> Creates an object only;
                  does not update an existing object.</para>
      </summary>
    </member>
    <member name="F:System.Management.PutType.UpdateOrCreate">
      <summary>
        <para> Saves the object, whether
                  updating an existing object or creating a new object.</para>
      </summary>
    </member>
    <member name="T:System.Management.ManagementOptions">
      <summary>
        <para>Provides an abstract base class for all options objects.</para>
      </summary>
    </member>
    <member name="F:System.Management.ManagementOptions.InfiniteTimeout">
      <summary>
        <para> Specifies an infinite timeout.</para>
      </summary>
    </member>
    <member name="M:System.Management.ManagementOptions.Clone">
      <summary>
        <para> Returns a copy of the object.</para>
      </summary>
      <returns>
        <para>The cloned object.</para>
      </returns>
    </member>
    <member name="P:System.Management.ManagementOptions.Context">
      <summary>
        <para> Gets or sets a WMI context object. This is a
                  name-value pairs list to be passed through to a WMI provider that supports
                  context information for customized operation.</para>
      </summary>
    </member>
    <member name="P:System.Management.ManagementOptions.Timeout">
      <summary>
        <para>Gets or sets the timeout to apply to the operation. 
                  Note that for operations that return collections, this timeout applies to the
                  enumeration through the resulting collection, not the operation itself
                  (the <see cref="P:System.Management.EnumerationOptions.ReturnImmediately" />
                  property is used for the latter).</para>
               This property is used to indicate that the operation should be performed semisynchronously.
            </summary>
    </member>
    <member name="T:System.Management.EnumerationOptions">
      <summary>
        <para>Provides a base class for query and enumeration-related options
                  objects.</para>
      </summary>
    </member>
    <member name="M:System.Management.EnumerationOptions.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.EnumerationOptions" />
            class with default values (see the individual property descriptions
            for what the default values are). This is the default constructor. </para>
      </summary>
    </member>
    <member name="M:System.Management.EnumerationOptions.#ctor(System.Management.ManagementNamedValueCollection,System.TimeSpan,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.EnumerationOptions" /> class to be used for queries or enumerations, 
               allowing the user to specify values for the different options.</para>
      </summary>
      <param name="context">The options context object containing provider-specific information that can be passed through to the provider.</param>
      <param name=" timeout">The timeout value for enumerating through the results.</param>
      <param name=" blockSize">The number of items to retrieve at one time from WMI.</param>
      <param name=" rewindable">
        <see langword="true" /> to specify whether the result set is rewindable (=allows multiple traversal or one-time); otherwise, <see langword="false" />.</param>
      <param name=" returnImmediatley">
        <see langword="true" /> to specify whether the operation should return immediately (semi-sync) or block until all results are available; otherwise, <see langword="false" /> .</param>
      <param name=" useAmendedQualifiers">
        <see langword="true" /> to specify whether the returned objects should contain amended (locale-aware) qualifiers; otherwise, <see langword="false" /> .</param>
      <param name=" ensureLocatable">
        <see langword="true" /> to specify to WMI that it should ensure all returned objects have valid paths; otherwise, <see langword="false" /> .</param>
      <param name=" prototypeOnly">
        <see langword="true" /> to return a prototype of the result set instead of the actual results; otherwise, <see langword="false" /> .</param>
      <param name=" directRead">
        <see langword="true" /> to to retrieve objects of only the specified class only or from derived classes as well; otherwise, <see langword="false" /> .</param>
      <param name=" enumerateDeep">
        <see langword="true" /> to specify recursive enumeration in subclasses; otherwise, <see langword="false" /> .</param>
    </member>
    <member name="M:System.Management.EnumerationOptions.Clone">
      <summary>
        <para> Returns a copy of the object.</para>
      </summary>
      <returns>
        <para>The cloned object.</para>
      </returns>
    </member>
    <member name="P:System.Management.EnumerationOptions.ReturnImmediately">
      <summary>
        <para>Gets or sets a value indicating whether the invoked operation should be 
                  performed in a synchronous or semisynchronous fashion. If this property is set
                  to <see langword="true" />, the enumeration is invoked and the call returns immediately. The actual
                  retrieval of the results will occur when the resulting collection is walked.</para>
      </summary>
    </member>
    <member name="P:System.Management.EnumerationOptions.BlockSize">
      <summary>
        <para> Gets or sets the block size
                  for block operations. When enumerating through a collection, WMI will return results in
                  groups of the specified size.</para>
      </summary>
    </member>
    <member name="P:System.Management.EnumerationOptions.Rewindable">
      <summary>
        <para>Gets or sets a value indicating whether the collection is assumed to be 
                  rewindable. If <see langword="true" />, the objects in the
                  collection will be kept available for multiple enumerations. If
               <see langword="false" />, the collection
                  can only be enumerated one time.</para>
      </summary>
    </member>
    <member name="P:System.Management.EnumerationOptions.UseAmendedQualifiers">
      <summary>
        <para> Gets or sets a value indicating whether the objects returned from
                  WMI should contain amended information. Typically, amended information is localizable
                  information attached to the WMI object, such as object and property
                  descriptions.</para>
      </summary>
    </member>
    <member name="P:System.Management.EnumerationOptions.EnsureLocatable">
      <summary>
        <para>Gets or sets a value indicating whether to the objects returned should have
                  locatable information in them. This ensures that the system properties, such as
               <see langword="__PATH" />, <see langword="__RELPATH" />, and 
               <see langword="__SERVER" />, are non-NULL. This flag can only be used in queries,
                  and is ignored in enumerations.</para>
      </summary>
    </member>
    <member name="P:System.Management.EnumerationOptions.PrototypeOnly">
      <summary>
        <para>Gets or sets a value indicating whether the query should return a
                  prototype of the result set instead of the actual results. This flag is used for
                  prototyping.</para>
      </summary>
    </member>
    <member name="P:System.Management.EnumerationOptions.DirectRead">
      <summary>
        <para> Gets or sets a value indicating whether direct access to the WMI provider is requested for the specified
                  class, without any regard to its superclass or derived classes.</para>
      </summary>
    </member>
    <member name="P:System.Management.EnumerationOptions.EnumerateDeep">
      <summary>
        <para> Gets or sets a value indicating whether recursive enumeration is 
                  requested into all classes derived from the specified superclass. If
               <see langword="false" />, only immediate derived
                  class members are returned.</para>
      </summary>
    </member>
    <member name="T:System.Management.EventWatcherOptions">
      <summary>
        <para> Specifies options for management event watching.</para>
      </summary>
    </member>
    <member name="M:System.Management.EventWatcherOptions.#ctor">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Management.EventWatcherOptions" /> class for event watching, using default values.
               This is the default constructor.</para>
      </summary>
    </member>
    <member name="M:System.Management.EventWatcherOptions.#ctor(System.Management.ManagementNamedValueCollection,System.TimeSpan,System.Int32)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Management.EventWatcherOptions" /> class with the given
               values.</para>
      </summary>
      <param name="context">The options context object containing provider-specific information to be passed through to the provider. </param>
      <param name=" timeout">The timeout to wait for the next events.</param>
      <param name=" blockSize">The number of events to wait for in each block.</param>
    </member>
    <member name="M:System.Management.EventWatcherOptions.Clone">
      <summary>
        <para> Returns a copy of the object.</para>
      </summary>
      <returns>
               The cloned object.
            </returns>
    </member>
    <member name="P:System.Management.EventWatcherOptions.BlockSize">
      <summary>
        <para>Gets or sets the block size for block operations. When waiting for events, this
                  value specifies how many events to wait for before returning.</para>
      </summary>
    </member>
    <member name="T:System.Management.ObjectGetOptions">
      <summary>
        <para> Specifies options for getting a management object.</para>
      </summary>
    </member>
    <member name="M:System.Management.ObjectGetOptions.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.ObjectGetOptions" /> class for getting a WMI object, using
               default values. This is the default constructor.</para>
      </summary>
    </member>
    <member name="M:System.Management.ObjectGetOptions.#ctor(System.Management.ManagementNamedValueCollection)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.ObjectGetOptions" /> class for getting a WMI object, using the
               specified provider-specific context.</para>
      </summary>
      <param name="context">A provider-specific, named-value pairs context object to be passed through to the provider.</param>
    </member>
    <member name="M:System.Management.ObjectGetOptions.#ctor(System.Management.ManagementNamedValueCollection,System.TimeSpan,System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.ObjectGetOptions" /> class for getting a WMI object,
               using the given options values.</para>
      </summary>
      <param name="context">A provider-specific, named-value pairs context object to be passed through to the provider.</param>
      <param name=" timeout">The length of time to let the operation perform before it times out. The default is <see cref="F:System.Management.ManagementOptions.InfiniteTimeout" /> .</param>
      <param name=" useAmendedQualifiers">
        <see langword="true" /> if the returned objects should contain amended (locale-aware) qualifiers; otherwise, <see langword="false" />. </param>
    </member>
    <member name="M:System.Management.ObjectGetOptions.Clone">
      <summary>
        <para> Returns a copy of the object.</para>
      </summary>
      <returns>
        <para>The cloned object.</para>
      </returns>
    </member>
    <member name="P:System.Management.ObjectGetOptions.UseAmendedQualifiers">
      <summary>
        <para> Gets or sets a value indicating whether the objects returned from WMI should
                  contain amended information. Typically, amended information is localizable information
                  attached to the WMI object, such as object and property descriptions.</para>
      </summary>
    </member>
    <member name="T:System.Management.PutOptions">
      <summary>
        <para> Specifies options for committing management
                  object changes.</para>
      </summary>
    </member>
    <member name="M:System.Management.PutOptions.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.PutOptions" /> class for put operations, using default values.
               This is the default constructor.</para>
      </summary>
    </member>
    <member name="M:System.Management.PutOptions.#ctor(System.Management.ManagementNamedValueCollection)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.PutOptions" /> class for committing a WMI object, using the
               specified provider-specific context.</para>
      </summary>
      <param name="context">A provider-specific, named-value pairs context object to be passed through to the provider.</param>
    </member>
    <member name="M:System.Management.PutOptions.#ctor(System.Management.ManagementNamedValueCollection,System.TimeSpan,System.Boolean,System.Management.PutType)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.PutOptions" /> class for committing a WMI object, using
               the specified option values.</para>
      </summary>
      <param name="context">A provider-specific, named-value pairs object to be passed through to the provider. </param>
      <param name=" timeout">The length of time to let the operation perform before it times out. The default is <see cref="F:System.Management.ManagementOptions.InfiniteTimeout" /> .</param>
      <param name=" useAmendedQualifiers">
        <see langword="true" /> if the returned objects should contain amended (locale-aware) qualifiers; otherwise, <see langword="false" />. </param>
      <param name=" putType"> The type of commit to be performed (update or create).</param>
    </member>
    <member name="M:System.Management.PutOptions.Clone">
      <summary>
        <para> Returns a copy of the object.</para>
      </summary>
      <returns>
        <para>The cloned object.</para>
      </returns>
    </member>
    <member name="P:System.Management.PutOptions.UseAmendedQualifiers">
      <summary>
        <para> Gets or sets a value indicating whether the objects returned from WMI should
                  contain amended information. Typically, amended information is localizable information
                  attached to the WMI object, such as object and property descriptions.</para>
      </summary>
    </member>
    <member name="P:System.Management.PutOptions.Type">
      <summary>
        <para>Gets or sets the type of commit to be performed for the object.</para>
      </summary>
    </member>
    <member name="T:System.Management.DeleteOptions">
      <summary>
        <para> Specifies options for deleting a management
                  object.</para>
      </summary>
    </member>
    <member name="M:System.Management.DeleteOptions.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.DeleteOptions" /> class for the delete operation, using default values.
               This is the default constructor.</para>
      </summary>
    </member>
    <member name="M:System.Management.DeleteOptions.#ctor(System.Management.ManagementNamedValueCollection,System.TimeSpan)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.DeleteOptions" /> class for a delete operation, using
               the specified values.</para>
      </summary>
      <param name="context">A provider-specific, named-value pairs object to be passed through to the provider. </param>
      <param name="timeout">The length of time to let the operation perform before it times out. The default value is <see cref="F:System.Management.ManagementOptions.InfiniteTimeout" /> . Setting this parameter will invoke the operation semisynchronously.</param>
    </member>
    <member name="M:System.Management.DeleteOptions.Clone">
      <summary>
        <para> Returns a copy of the object.</para>
      </summary>
      <returns>
        <para>A cloned object.</para>
      </returns>
    </member>
    <member name="T:System.Management.InvokeMethodOptions">
      <summary>
        <para> Specifies options for invoking a management method.</para>
      </summary>
    </member>
    <member name="M:System.Management.InvokeMethodOptions.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.InvokeMethodOptions" /> class for the <see cref="M:System.Management.ManagementObject.InvokeMethod(System.String,System.Object[])" /> operation, using default values.
               This is the default constructor.</para>
      </summary>
    </member>
    <member name="M:System.Management.InvokeMethodOptions.#ctor(System.Management.ManagementNamedValueCollection,System.TimeSpan)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.InvokeMethodOptions" /> class for an invoke operation using 
               the specified values.</para>
      </summary>
      <param name=" context">A provider-specific, named-value pairs object to be passed through to the provider. </param>
      <param name="timeout">The length of time to let the operation perform before it times out. The default value is <see cref="F:System.Management.ManagementOptions.InfiniteTimeout" /> . Setting this parameter will invoke the operation semisynchronously.</param>
    </member>
    <member name="M:System.Management.InvokeMethodOptions.Clone">
      <summary>
        <para> Returns a copy of the object.</para>
      </summary>
      <returns>
        <para>The cloned object.</para>
      </returns>
    </member>
    <member name="T:System.Management.ConnectionOptions">
      <summary>
        <para> Specifies all settings required to make a WMI connection.</para>
      </summary>
    </member>
    <member name="M:System.Management.ConnectionOptions.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.ConnectionOptions" /> class for the connection operation, using default values. This is the 
               default constructor.</para>
      </summary>
    </member>
    <member name="M:System.Management.ConnectionOptions.#ctor(System.String,System.String,System.String,System.String,System.Management.ImpersonationLevel,System.Management.AuthenticationLevel,System.Boolean,System.Management.ManagementNamedValueCollection,System.TimeSpan)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Management.ConnectionOptions" /> class to be used for a WMI
               connection, using the specified values.</para>
      </summary>
      <param name="locale">The locale to be used for the connection.</param>
      <param name=" username">The user name to be used for the connection. If null, the credentials of the currently logged-on user are used.</param>
      <param name=" password">The password for the given user name. If the user name is also null, the credentials used will be those of the currently logged-on user.</param>
      <param name=" authority">
        <para>The authority to be used to authenticate the specified user.</para>
      </param>
      <param name=" impersonation">The COM impersonation level to be used for the connection.</param>
      <param name=" authentication">The COM authentication level to be used for the connection.</param>
      <param name=" enablePrivileges">
        <see langword="true" />to enable special user privileges; otherwise, <see langword="false" /> . This parameter should only be used when performing an operation that requires special Windows NT user privileges.</param>
      <param name=" context">A provider-specific, named value pairs object to be passed through to the provider.</param>
      <param name=" timeout">Reserved for future use.</param>
    </member>
    <member name="M:System.Management.ConnectionOptions.Clone">
      <summary>
        <para> Returns a copy of the object.</para>
      </summary>
      <returns>
        <para>The cloned object.</para>
      </returns>
    </member>
    <member name="P:System.Management.ConnectionOptions.Locale">
      <summary>
        <para>Gets or sets the locale to be used for the connection operation.</para>
      </summary>
    </member>
    <member name="P:System.Management.ConnectionOptions.Username">
      <summary>
        <para>Gets or sets the user name to be used for the connection operation.</para>
      </summary>
    </member>
    <member name="P:System.Management.ConnectionOptions.Password">
      <summary>
        <para>Gets or sets the password for the specified user.</para>
      </summary>
    </member>
    <member name="P:System.Management.ConnectionOptions.Authority">
      <summary>
        <para>Gets or sets the authority to be used to authenticate the specified user.</para>
      </summary>
    </member>
    <member name="P:System.Management.ConnectionOptions.Impersonation">
      <summary>
        <para>Gets or sets the COM impersonation level to be used for the connection operation.</para>
      </summary>
    </member>
    <member name="P:System.Management.ConnectionOptions.Authentication">
      <summary>
        <para>Gets or sets the COM authentication level to be used for the connection operation.</para>
      </summary>
    </member>
    <member name="P:System.Management.ConnectionOptions.EnablePrivileges">
      <summary>
        <para>Gets or sets a value indicating whether user privileges need to be enabled for 
                  the connection operation. This property should only be used when the operation
                  performed requires a certain user privilege to be enabled
                  (for example, a machine reboot).</para>
      </summary>
    </member>
    <member name="T:System.Management.ManagementPath">
      <summary>
        <para>Provides a wrapper for parsing and building paths to WMI objects.</para>
      </summary>
    </member>
    <member name="M:System.Management.ManagementPath.#ctor">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Management.ManagementPath" /> class that is empty. This is the default constructor.</para>
      </summary>
    </member>
    <member name="M:System.Management.ManagementPath.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.ManagementPath" /> class for the given path.</para>
      </summary>
      <param name="path"> The object path. </param>
    </member>
    <member name="M:System.Management.ManagementPath.ToString">
      <summary>
        <para>Returns the full object path as the string representation.</para>
      </summary>
      <returns>
               A string containing the full object
               path represented by this object. This value is equivalent to the value of the
            <see cref="P:System.Management.ManagementPath.Path" /> property.
            </returns>
    </member>
    <member name="M:System.Management.ManagementPath.Clone">
      <summary>
        <para>Returns a copy of the <see cref="T:System.Management.ManagementPath" />.</para>
      </summary>
      <returns>
               The cloned object.
            </returns>
    </member>
    <member name="M:System.Management.ManagementPath.SetAsClass">
      <summary>
        <para> Sets the path as a new class path. This means that the path must have
                  a class name but not key values.</para>
      </summary>
    </member>
    <member name="M:System.Management.ManagementPath.SetAsSingleton">
      <summary>
        <para> Sets the path as a new singleton object path. This means that it is a path to an instance but
                  there are no key values.</para>
      </summary>
    </member>
    <member name="P:System.Management.ManagementPath.DefaultPath">
      <summary>
        <para>Gets or sets the default scope path used when no scope is specified.
                  The default scope is \\.\root\cimv2, and can be changed by setting this property.</para>
      </summary>
    </member>
    <member name="P:System.Management.ManagementPath.Path">
      <summary>
        <para> Gets or sets the string representation of the full path in the object.</para>
      </summary>
    </member>
    <member name="P:System.Management.ManagementPath.RelativePath">
      <summary>
        <para> Gets or sets the relative path: class name and keys only.</para>
      </summary>
    </member>
    <member name="P:System.Management.ManagementPath.Server">
      <summary>
        <para>Gets or sets the server part of the path.</para>
      </summary>
    </member>
    <member name="P:System.Management.ManagementPath.NamespacePath">
      <summary>
        <para>Gets or sets the namespace part of the path. Note that this does not include
                  the server name, which can be retrieved separately.</para>
      </summary>
    </member>
    <member name="P:System.Management.ManagementPath.ClassName">
      <summary>
               Gets or sets the class portion of the path.
            </summary>
    </member>
    <member name="P:System.Management.ManagementPath.IsClass">
      <summary>
        <para>Gets or sets a value indicating whether this is a class path.</para>
      </summary>
    </member>
    <member name="P:System.Management.ManagementPath.IsInstance">
      <summary>
        <para>Gets or sets a value indicating whether this is an instance path.</para>
      </summary>
    </member>
    <member name="P:System.Management.ManagementPath.IsSingleton">
      <summary>
        <para>Gets or sets a value indicating whether this is a singleton instance path.</para>
      </summary>
    </member>
    <member name="M:System.Management.ManagementPathConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            Determines if this converter can convert an object in the given source type to the native type of the converter. 
            </summary>
      <param name="context">An ITypeDescriptorContext that provides a format context.</param>
      <param name="sourceType">A Type that represents the type you wish to convert from.</param>
      <returns>
        <para>true if this converter can perform the conversion; otherwise, false.</para>
      </returns>
    </member>
    <member name="M:System.Management.ManagementPathConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            Gets a value indicating whether this converter can convert an object to the given destination type using the context.
            </summary>
      <param name="context">An ITypeDescriptorContext that provides a format context.</param>
      <param name="destinationType">A Type that represents the type you wish to convert to.</param>
      <returns>
        <para>true if this converter can perform the conversion; otherwise, false.</para>
      </returns>
    </member>
    <member name="M:System.Management.ManagementPathConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
                 Converts the given object to another type.  The most common types to convert
                 are to and from a string object.  The default implementation will make a call
                 to ToString on the object if the object is valid and if the destination
                 type is string.  If this cannot convert to the desitnation type, this will
                 throw a NotSupportedException.
            </summary>
      <param name="context">An ITypeDescriptorContext that provides a format context.</param>
      <param name="culture">A CultureInfo object. If a null reference (Nothing in Visual Basic) is passed, the current culture is assumed.</param>
      <param name="value">The Object to convert.</param>
      <param name="destinationType">The Type to convert the value parameter to.</param>
      <returns>An Object that represents the converted value.</returns>
    </member>
    <member name="T:System.Management.ManagementQuery">
      <summary>
        <para> Provides an abstract base class for all management query objects.</para>
      </summary>
    </member>
    <member name="M:System.Management.ManagementQuery.ParseQuery(System.String)">
      <summary>
             Parses the query string and sets the property values accordingly.
            </summary>
      <param name="query">The query string to be parsed.</param>
    </member>
    <member name="M:System.Management.ManagementQuery.Clone">
      <summary>
        <para>Returns a copy of the object.</para>
      </summary>
      <returns>
               The cloned object.
            </returns>
    </member>
    <member name="M:System.Management.ManagementQuery.GetValueOfKeyword(System.String,System.String,System.Int32)">
      <summary>
               Finds a keyword in a query string and returns
               the value associated with the keyword.
            </summary>
      <param name="query">
        <para>A string representing the query</para>
      </param>
      <param name=" keyword">The keyword we are searching for in the query</param>
      <param name=" keywordIndex">The index to start searching at.</param>
      <returns>
               The string containing the value for the
               specified keyword in the query string.
            </returns>
    </member>
    <member name="P:System.Management.ManagementQuery.QueryString">
      <summary>
        <para>Gets or sets the query in text format.</para>
      </summary>
    </member>
    <member name="P:System.Management.ManagementQuery.QueryLanguage">
      <summary>
        <para> Gets or sets the query language used in the query
                  string, defining the format of the query string.</para>
      </summary>
    </member>
    <member name="T:System.Management.ObjectQuery">
      <summary>
        <para> Represents a management query that returns instances or classes.</para>
      </summary>
    </member>
    <member name="M:System.Management.ObjectQuery.#ctor">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Management.ObjectQuery" /> 
            class with no initialized values. This
            is the default constructor.</para>
      </summary>
    </member>
    <member name="M:System.Management.ObjectQuery.#ctor(System.String)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Management.ObjectQuery" /> 
            class
            for a specific query string.</para>
      </summary>
      <param name="query">The string representation of the query.</param>
    </member>
    <member name="M:System.Management.ObjectQuery.#ctor(System.String,System.String)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Management.ObjectQuery" /> 
            class for a specific
            query string and language.</para>
      </summary>
      <param name="language">The query language in which this query is specified.</param>
      <param name=" query">The string representation of the query.</param>
    </member>
    <member name="M:System.Management.ObjectQuery.Clone">
      <summary>
        <para>Returns a copy of the object.</para>
      </summary>
      <returns>
               The cloned object.
            </returns>
    </member>
    <member name="T:System.Management.EventQuery">
      <summary>
        <para> Represents a WMI event query.</para>
      </summary>
    </member>
    <member name="M:System.Management.EventQuery.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.EventQuery" /> 
            class. This is the
            default constructor.</para>
      </summary>
    </member>
    <member name="M:System.Management.EventQuery.#ctor(System.String)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Management.EventQuery" /> 
            class for the specified query.</para>
      </summary>
      <param name="query">A textual representation of the event query.</param>
    </member>
    <member name="M:System.Management.EventQuery.#ctor(System.String,System.String)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Management.EventQuery" /> 
            class for the specified
            language and query.</para>
      </summary>
      <param name="language">The language in which the query string is specified. </param>
      <param name=" query">The string representation of the query.</param>
    </member>
    <member name="M:System.Management.EventQuery.Clone">
      <summary>
        <para>Returns a copy of the object.</para>
      </summary>
      <returns>
               The cloned object.
            </returns>
    </member>
    <member name="T:System.Management.WqlObjectQuery">
      <summary>
        <para> Represents a WMI data query in WQL format.</para>
      </summary>
    </member>
    <member name="M:System.Management.WqlObjectQuery.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.WqlObjectQuery" /> class. This is the
               default constructor.</para>
      </summary>
    </member>
    <member name="M:System.Management.WqlObjectQuery.#ctor(System.String)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Management.WqlObjectQuery" /> class initialized to the
               specified query.</para>
      </summary>
      <param name="query">
        <para> The representation of the data query.</para>
      </param>
    </member>
    <member name="M:System.Management.WqlObjectQuery.Clone">
      <summary>
        <para>Creates a copy of the object.</para>
      </summary>
      <returns>
               The copied object.
            </returns>
    </member>
    <member name="P:System.Management.WqlObjectQuery.QueryLanguage">
      <summary>
        <para>Gets or sets the language of the query.</para>
      </summary>
    </member>
    <member name="T:System.Management.SelectQuery">
      <summary>
        <para> Represents a WQL SELECT data query.</para>
      </summary>
    </member>
    <member name="M:System.Management.SelectQuery.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.SelectQuery" /> 
            class. This is the
            default constructor.</para>
      </summary>
    </member>
    <member name="M:System.Management.SelectQuery.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.SelectQuery" /> class for the specified
               query or the specified class name.</para>
      </summary>
      <param name="queryOrClassName">The entire query or the class name to use in the query. The parser in this class attempts to parse the string as a valid WQL SELECT query. If the parser is unsuccessful, it assumes the string is a class name.</param>
    </member>
    <member name="M:System.Management.SelectQuery.#ctor(System.String,System.String)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Management.SelectQuery" /> 
            class with the specified
            class name and condition.</para>
      </summary>
      <param name="className">The name of the class to select in the query.</param>
      <param name=" condition">The condition to be applied in the query.</param>
    </member>
    <member name="M:System.Management.SelectQuery.#ctor(System.String,System.String,System.String[])">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Management.SelectQuery" /> 
            class with the specified
            class name and condition, selecting only the specified properties.</para>
      </summary>
      <param name="className">The name of the class from which to select.</param>
      <param name=" condition">The condition to be applied to instances of the selected class.</param>
      <param name=" selectedProperties">An array of property names to be returned in the query results.</param>
    </member>
    <member name="M:System.Management.SelectQuery.#ctor(System.Boolean,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.SelectQuery" /> 
            class for a schema query, optionally specifying a condition. For schema queries,
            only the <paramref name="condition" /> parameter is valid: <paramref name="className" />
            and <paramref name="selectedProperties" />
            are not supported and are ignored.</para>
      </summary>
      <param name="isSchemaQuery">
        <see langword="true" />to indicate that this is a schema query; otherwise, <see langword="false" />. A <see langword="false" /> value is invalid in this constructor.</param>
      <param name=" condition">The condition to be applied to form the result set of classes.</param>
    </member>
    <member name="M:System.Management.SelectQuery.BuildQuery">
      <summary>
             Builds the query string according to the current property values.
            </summary>
    </member>
    <member name="M:System.Management.SelectQuery.ParseQuery(System.String)">
      <summary>
             Parses the query string and sets the property values accordingly.
            </summary>
      <param name="query">The query string to be parsed.</param>
    </member>
    <member name="M:System.Management.SelectQuery.Clone">
      <summary>
        <para> Creates a copy of the object.</para>
      </summary>
      <returns>
               The copied object.
            </returns>
    </member>
    <member name="P:System.Management.SelectQuery.QueryString">
      <summary>
        <para>Gets or sets the query in the <see cref="T:System.Management.SelectQuery" />, in string form.</para>
      </summary>
    </member>
    <member name="P:System.Management.SelectQuery.IsSchemaQuery">
      <summary>
        <para>Gets or sets a value indicating whether this query is a schema query or an instances query.</para>
      </summary>
    </member>
    <member name="P:System.Management.SelectQuery.ClassName">
      <summary>
        <para>Gets or sets the class name to be selected from in the query.</para>
      </summary>
    </member>
    <member name="P:System.Management.SelectQuery.Condition">
      <summary>
        <para>Gets or sets the condition to be applied in the SELECT
                  query.</para>
      </summary>
    </member>
    <member name="P:System.Management.SelectQuery.SelectedProperties">
      <summary>
        <para> Gets or sets an array of property names to be
                  selected in the query.</para>
      </summary>
    </member>
    <member name="T:System.Management.RelatedObjectQuery">
      <summary>
        <para> Represents a WQL ASSOCIATORS OF data query. 
                  It can be used for both instances and schema queries.</para>
      </summary>
    </member>
    <member name="M:System.Management.RelatedObjectQuery.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.RelatedObjectQuery" /> class. This is the
               default constructor.</para>
      </summary>
    </member>
    <member name="M:System.Management.RelatedObjectQuery.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.RelatedObjectQuery" />class. If the specified string can be succesfully parsed as 
               a WQL query, it is considered to be the query string; otherwise, it is assumed to be the path of the source
               object for the query. In this case, the query is assumed to be an instance query. </para>
      </summary>
      <param name="queryOrSourceObject">The query string or the path of the source object.</param>
    </member>
    <member name="M:System.Management.RelatedObjectQuery.#ctor(System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.RelatedObjectQuery" /> class for the given source object and related class.
               The query is assumed to be an instance query (as opposed to a schema query).</para>
      </summary>
      <param name="sourceObject">The path of the source object for this query.</param>
      <param name="relatedClass">The related objects class.</param>
    </member>
    <member name="M:System.Management.RelatedObjectQuery.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.RelatedObjectQuery" /> class for the given set of parameters.
               The query is assumed to be an instance query (as opposed to a schema query).</para>
      </summary>
      <param name="sourceObject">The path of the source object.</param>
      <param name="relatedClass">The related objects required class.</param>
      <param name="relationshipClass">The relationship type.</param>
      <param name="relatedQualifier">The qualifier required to be present on the related objects.</param>
      <param name="relationshipQualifier">The qualifier required to be present on the relationships.</param>
      <param name="relatedRole">The role that the related objects are required to play in the relationship.</param>
      <param name="thisRole">The role that the source object is required to play in the relationship.</param>
      <param name="classDefinitionsOnly">
        <see langword="true" />to return only the class definitions of the related objects; otherwise, <see langword="false" /> .</param>
    </member>
    <member name="M:System.Management.RelatedObjectQuery.#ctor(System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.RelatedObjectQuery" /> class for a schema query using the given set 
               of parameters. This constructor is used for schema queries only: the first
               parameter must be set to <see langword="true" />
               .</para>
      </summary>
      <param name="isSchemaQuery">
        <see langword="true" />to indicate that this is a schema query; otherwise, <see langword="false" /> .</param>
      <param name="sourceObject">The path of the source class.</param>
      <param name="relatedClass">The related objects' required base class.</param>
      <param name="relationshipClass">The relationship type.</param>
      <param name="relatedQualifier">The qualifier required to be present on the related objects.</param>
      <param name="relationshipQualifier">The qualifier required to be present on the relationships.</param>
      <param name="relatedRole">The role that the related objects are required to play in the relationship.</param>
      <param name="thisRole">The role that the source class is required to play in the relationship.</param>
    </member>
    <member name="M:System.Management.RelatedObjectQuery.BuildQuery">
      <summary>
             Builds the query string according to the current property values.
            </summary>
    </member>
    <member name="M:System.Management.RelatedObjectQuery.ParseQuery(System.String)">
      <summary>
             Parses the query string and sets the property values accordingly.
            </summary>
      <param name="query">The query string to be parsed.</param>
    </member>
    <member name="M:System.Management.RelatedObjectQuery.Clone">
      <summary>
        <para>Creates a copy of the object.</para>
      </summary>
      <returns>
               The copied object.
            </returns>
    </member>
    <member name="P:System.Management.RelatedObjectQuery.IsSchemaQuery">
      <summary>
        <para>Gets or sets a value indicating whether this is a schema query or an instance query.</para>
      </summary>
    </member>
    <member name="P:System.Management.RelatedObjectQuery.SourceObject">
      <summary>
        <para> Gets or sets the source object to be used for the query. For instance
                  queries, this is typically an instance path. For schema queries, this is typically a class name.</para>
      </summary>
    </member>
    <member name="P:System.Management.RelatedObjectQuery.RelatedClass">
      <summary>
        <para>Gets or sets the class of the endpoint objects.</para>
      </summary>
    </member>
    <member name="P:System.Management.RelatedObjectQuery.RelationshipClass">
      <summary>
        <para>Gets or sets the type of relationship (association).</para>
      </summary>
    </member>
    <member name="P:System.Management.RelatedObjectQuery.RelatedQualifier">
      <summary>
        <para>Gets or sets a qualifier required to be defined on the related objects.</para>
      </summary>
    </member>
    <member name="P:System.Management.RelatedObjectQuery.RelationshipQualifier">
      <summary>
        <para>Gets or sets a qualifier required to be defined on the relationship objects.</para>
      </summary>
    </member>
    <member name="P:System.Management.RelatedObjectQuery.RelatedRole">
      <summary>
        <para>Gets or sets the role that the related objects returned should be playing in the relationship.</para>
      </summary>
    </member>
    <member name="P:System.Management.RelatedObjectQuery.ThisRole">
      <summary>
        <para>Gets or sets the role that the source object should be playing in the relationship.</para>
      </summary>
    </member>
    <member name="P:System.Management.RelatedObjectQuery.ClassDefinitionsOnly">
      <summary>
        <para>Gets or sets a value indicating that for all instances that adhere to the query, only their class definitions be returned.
                  This parameter is only valid for instance queries.</para>
      </summary>
    </member>
    <member name="T:System.Management.RelationshipQuery">
      <summary>
        <para> Represents a WQL REFERENCES OF data query.</para>
      </summary>
    </member>
    <member name="M:System.Management.RelationshipQuery.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.RelationshipQuery" /> class. This is the default constructor.</para>
      </summary>
    </member>
    <member name="M:System.Management.RelationshipQuery.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.RelationshipQuery" />class. If the specified string can be succesfully parsed as 
               a WQL query, it is considered to be the query string; otherwise, it is assumed to be the path of the source
               object for the query. In this case, the query is assumed to be an instances query. </para>
      </summary>
      <param name="queryOrSourceObject">The query string or the class name for this query.</param>
    </member>
    <member name="M:System.Management.RelationshipQuery.#ctor(System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.RelationshipQuery" /> class for the given source object and relationship class.
               The query is assumed to be an instance query (as opposed to a schema query).</para>
      </summary>
      <param name="sourceObject"> The path of the source object for this query.</param>
      <param name="relationshipClass"> The type of relationship for which to query.</param>
    </member>
    <member name="M:System.Management.RelationshipQuery.#ctor(System.String,System.String,System.String,System.String,System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.RelationshipQuery" /> class for the given set of parameters.
               The query is assumed to be an instance query (as opposed to a schema query).</para>
      </summary>
      <param name="sourceObject"> The path of the source object for this query.</param>
      <param name="relationshipClass"> The type of relationship for which to query.</param>
      <param name="relationshipQualifier"> A qualifier required to be present on the relationship object.</param>
      <param name="thisRole"> The role that the source object is required to play in the relationship.</param>
      <param name="classDefinitionsOnly">When this method returns, it contains a boolean that indicates that only class definitions for the resulting objects are returned.</param>
    </member>
    <member name="M:System.Management.RelationshipQuery.#ctor(System.Boolean,System.String,System.String,System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.RelationshipQuery" /> class for a schema query using the given set 
               of parameters. This constructor is used for schema queries only, so the first
               parameter must be <see langword="true" />
               .</para>
      </summary>
      <param name="isSchemaQuery">
        <see langword="true" />to indicate that this is a schema query; otherwise, <see langword="false" /> .</param>
      <param name="sourceObject"> The path of the source class for this query.</param>
      <param name="relationshipClass"> The type of relationship for which to query.</param>
      <param name="relationshipQualifier"> A qualifier required to be present on the relationship class.</param>
      <param name="thisRole"> The role that the source class is required to play in the relationship.</param>
    </member>
    <member name="M:System.Management.RelationshipQuery.BuildQuery">
      <summary>
             Builds the query string according to the current property values.
            </summary>
    </member>
    <member name="M:System.Management.RelationshipQuery.ParseQuery(System.String)">
      <summary>
             Parses the query string and sets the property values accordingly.
            </summary>
      <param name="query">The query string to be parsed.</param>
    </member>
    <member name="M:System.Management.RelationshipQuery.Clone">
      <summary>
        <para>Creates a copy of the object.</para>
      </summary>
      <returns>
               The copied object.
            </returns>
    </member>
    <member name="P:System.Management.RelationshipQuery.IsSchemaQuery">
      <summary>
        <para>Gets or sets a value indicating whether this query is a schema query or an instance query.</para>
      </summary>
    </member>
    <member name="P:System.Management.RelationshipQuery.SourceObject">
      <summary>
        <para>Gets or sets the source object for this query.</para>
      </summary>
    </member>
    <member name="P:System.Management.RelationshipQuery.RelationshipClass">
      <summary>
        <para>Gets or sets the class of the relationship objects wanted in the query.</para>
      </summary>
    </member>
    <member name="P:System.Management.RelationshipQuery.RelationshipQualifier">
      <summary>
        <para>Gets or sets a qualifier required on the relationship objects.</para>
      </summary>
    </member>
    <member name="P:System.Management.RelationshipQuery.ThisRole">
      <summary>
        <para>Gets or sets the role of the source object in the relationship.</para>
      </summary>
    </member>
    <member name="P:System.Management.RelationshipQuery.ClassDefinitionsOnly">
      <summary>
        <para>Gets or sets a value indicating that only the class definitions of the relevant relationship objects be returned.</para>
      </summary>
    </member>
    <member name="T:System.Management.WqlEventQuery">
      <summary>
        <para> Represents a WMI event query in WQL format.</para>
      </summary>
    </member>
    <member name="M:System.Management.WqlEventQuery.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.WqlEventQuery" /> 
            class. This is the default
            constructor.</para>
      </summary>
    </member>
    <member name="M:System.Management.WqlEventQuery.#ctor(System.String)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Management.WqlEventQuery" /> 
            class based on the given
            query string or event class name.</para>
      </summary>
      <param name="queryOrEventClassName">The string representing either the entire event query or the name of the event class to query. The object will try to parse the string as a valid event query. If unsuccessful, the parser will assume that the parameter represents an event class name.</param>
    </member>
    <member name="M:System.Management.WqlEventQuery.#ctor(System.String,System.String)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Management.WqlEventQuery" /> 
            class for the
            specified event class name, with the specified condition.</para>
      </summary>
      <param name="eventClassName">The name of the event class to query.</param>
      <param name=" condition">The condition to apply to events of the specified class.</param>
    </member>
    <member name="M:System.Management.WqlEventQuery.#ctor(System.String,System.TimeSpan)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Management.WqlEventQuery" /> 
            class for the specified
            event class, with the specified latency time.</para>
      </summary>
      <param name="eventClassName">The name of the event class to query.</param>
      <param name=" withinInterval">A timespan value specifying the latency acceptable for receiving this event. This value is used in cases where there is no explicit event provider for the query requested, and WMI is required to poll for the condition. This interval is the maximum amount of time that can pass before notification of an event must be delivered. </param>
    </member>
    <member name="M:System.Management.WqlEventQuery.#ctor(System.String,System.TimeSpan,System.String)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Management.WqlEventQuery" /> 
            class with the specified
            event class name, polling interval, and condition.</para>
      </summary>
      <param name="eventClassName">The name of the event class to query. </param>
      <param name=" withinInterval">A timespan value specifying the latency acceptable for receiving this event. This value is used in cases where there is no explicit event provider for the query requested and WMI is required to poll for the condition. This interval is the maximum amount of time that can pass before notification of an event must be delivered. </param>
      <param name=" condition">The condition to apply to events of the specified class.</param>
    </member>
    <member name="M:System.Management.WqlEventQuery.#ctor(System.String,System.String,System.TimeSpan)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Management.WqlEventQuery" /> 
            class with the specified
            event class name, condition, and grouping interval.</para>
      </summary>
      <param name="eventClassName">The name of the event class to query. </param>
      <param name="condition">The condition to apply to events of the specified class.</param>
      <param name=" groupWithinInterval">The specified interval at which WMI sends one aggregate event, rather than many events.</param>
    </member>
    <member name="M:System.Management.WqlEventQuery.#ctor(System.String,System.String,System.TimeSpan,System.String[])">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Management.WqlEventQuery" /> 
            class with the specified event class
            name, condition, grouping interval, and grouping properties.</para>
      </summary>
      <param name="eventClassName">The name of the event class to query. </param>
      <param name="condition">The condition to apply to events of the specified class.</param>
      <param name=" groupWithinInterval">The specified interval at which WMI sends one aggregate event, rather than many events. </param>
      <param name=" groupByPropertyList">The properties in the event class by which the events should be grouped.</param>
    </member>
    <member name="M:System.Management.WqlEventQuery.#ctor(System.String,System.TimeSpan,System.String,System.TimeSpan,System.String[],System.String)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Management.WqlEventQuery" /> 
            class with the specified event class
            name, condition, grouping interval, grouping properties, and specified number of events.</para>
      </summary>
      <param name="eventClassName">The name of the event class on which to be queried.</param>
      <param name="withinInterval">A timespan value specifying the latency acceptable for receiving this event. This value is used in cases where there is no explicit event provider for the query requested, and WMI is required to poll for the condition. This interval is the maximum amount of time that can pass before notification of an event must be delivered.</param>
      <param name=" condition">The condition to apply to events of the specified class.</param>
      <param name=" groupWithinInterval">The specified interval at which WMI sends one aggregate event, rather than many events. </param>
      <param name=" groupByPropertyList">The properties in the event class by which the events should be grouped.</param>
      <param name=" havingCondition">The condition to apply to the number of events.</param>
    </member>
    <member name="M:System.Management.WqlEventQuery.BuildQuery">
      <summary>
             Builds the query string according to the current property values.
            </summary>
    </member>
    <member name="M:System.Management.WqlEventQuery.ParseQuery(System.String)">
      <summary>
             Parses the query string and sets the property values accordingly.
            </summary>
      <param name="query">The query string to be parsed.</param>
    </member>
    <member name="M:System.Management.WqlEventQuery.Clone">
      <summary>
        <para>Creates a copy of the object.</para>
      </summary>
      <returns>
               The copied object.
            </returns>
    </member>
    <member name="P:System.Management.WqlEventQuery.QueryLanguage">
      <summary>
        <para>Gets or sets the language of the query.</para>
      </summary>
    </member>
    <member name="P:System.Management.WqlEventQuery.QueryString">
      <summary>
        <para>Gets or sets the string representing the query.</para>
      </summary>
    </member>
    <member name="P:System.Management.WqlEventQuery.EventClassName">
      <summary>
        <para> Gets or sets the event class to query.</para>
      </summary>
    </member>
    <member name="P:System.Management.WqlEventQuery.Condition">
      <summary>
        <para>Gets or sets the condition to be applied to events of the
                  specified class.</para>
      </summary>
    </member>
    <member name="P:System.Management.WqlEventQuery.WithinInterval">
      <summary>
        <para>Gets or sets the polling interval to be used in this query.</para>
      </summary>
    </member>
    <member name="P:System.Management.WqlEventQuery.GroupWithinInterval">
      <summary>
        <para>Gets or sets the interval to be used for grouping events of
                  the same type.</para>
      </summary>
    </member>
    <member name="P:System.Management.WqlEventQuery.GroupByPropertyList">
      <summary>
        <para>Gets or sets properties in the event to be used for
                  grouping events of the same type.</para>
      </summary>
    </member>
    <member name="P:System.Management.WqlEventQuery.HavingCondition">
      <summary>
        <para>Gets or sets the condition to be applied to the aggregation of
                  events, based on the number of events received.</para>
      </summary>
    </member>
    <member name="M:System.Management.ManagementQueryConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            Determines if this converter can convert an object in the given source type to the native type of the converter. 
            </summary>
      <param name="context">An ITypeDescriptorContext that provides a format context.</param>
      <param name="sourceType">A Type that represents the type you wish to convert from.</param>
      <returns>
        <para>true if this converter can perform the conversion; otherwise, false.</para>
      </returns>
    </member>
    <member name="M:System.Management.ManagementQueryConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            Gets a value indicating whether this converter can convert an object to the given destination type using the context.
            </summary>
      <param name="context">An ITypeDescriptorContext that provides a format context.</param>
      <param name="destinationType">A Type that represents the type you wish to convert to.</param>
      <returns>
        <para>true if this converter can perform the conversion; otherwise, false.</para>
      </returns>
    </member>
    <member name="M:System.Management.ManagementQueryConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
                 Converts the given object to another type.  The most common types to convert
                 are to and from a string object.  The default implementation will make a call
                 to ToString on the object if the object is valid and if the destination
                 type is string.  If this cannot convert to the desitnation type, this will
                 throw a NotSupportedException.
            </summary>
      <param name="context">An ITypeDescriptorContext that provides a format context.</param>
      <param name="culture">A CultureInfo object. If a null reference (Nothing in Visual Basic) is passed, the current culture is assumed.</param>
      <param name="value">The Object to convert.</param>
      <param name="destinationType">The Type to convert the value parameter to.</param>
      <returns>An Object that represents the converted value.</returns>
    </member>
    <member name="T:System.Management.ManagementScope">
      <summary>
        <para>Represents a scope for management operations. In v1.0 the scope defines the WMI namespace in which management operations are performed.</para>
      </summary>
    </member>
    <member name="M:System.Management.ManagementScope.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.ManagementScope" /> class, with default values. This is the
               default constructor.</para>
      </summary>
    </member>
    <member name="M:System.Management.ManagementScope.#ctor(System.Management.ManagementPath)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.ManagementScope" /> class representing
               the specified scope path.</para>
      </summary>
      <param name="path">A <see cref="T:System.Management.ManagementPath" /> containing the path to a server and namespace for the <see cref="T:System.Management.ManagementScope" />.</param>
    </member>
    <member name="M:System.Management.ManagementScope.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.ManagementScope" /> class representing the specified scope 
               path.</para>
      </summary>
      <param name="path">The server and namespace path for the <see cref="T:System.Management.ManagementScope" />.</param>
    </member>
    <member name="M:System.Management.ManagementScope.#ctor(System.String,System.Management.ConnectionOptions)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.ManagementScope" /> class representing the specified scope path, 
               with the specified options.</para>
      </summary>
      <param name="path">The server and namespace for the <see cref="T:System.Management.ManagementScope" />.</param>
      <param name=" options">A <see cref="T:System.Management.ConnectionOptions" /> containing options for the connection.</param>
    </member>
    <member name="M:System.Management.ManagementScope.#ctor(System.Management.ManagementPath,System.Management.ConnectionOptions)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.ManagementScope" /> class representing the specified scope path, 
               with the specified options.</para>
      </summary>
      <param name="path">A <see cref="T:System.Management.ManagementPath" /> containing the path to the server and namespace for the <see cref="T:System.Management.ManagementScope" />.</param>
      <param name=" options">The <see cref="T:System.Management.ConnectionOptions" /> containing options for the connection.</param>
    </member>
    <member name="M:System.Management.ManagementScope.Clone">
      <summary>
        <para>Returns a copy of the object.</para>
      </summary>
      <returns>
        <para>A new copy of the <see cref="T:System.Management.ManagementScope" />.</para>
      </returns>
    </member>
    <member name="M:System.Management.ManagementScope.Connect">
      <summary>
        <para>Connects this <see cref="T:System.Management.ManagementScope" /> to the actual WMI
               scope.</para>
      </summary>
    </member>
    <member name="P:System.Management.ManagementScope.IsConnected">
      <summary>
        <para> Gets or sets a value indicating whether the <see cref="T:System.Management.ManagementScope" /> is currently bound to a
               WMI server and namespace.</para>
      </summary>
    </member>
    <member name="P:System.Management.ManagementScope.Options">
      <summary>
        <para> Gets or sets options for making the WMI connection.</para>
      </summary>
    </member>
    <member name="P:System.Management.ManagementScope.Path">
      <summary>
        <para>Gets or sets the path for the <see cref="T:System.Management.ManagementScope" />.</para>
      </summary>
    </member>
    <member name="T:System.Management.PropertyData">
      <summary>
        <para> Represents information about a WMI property.</para>
      </summary>
    </member>
    <member name="P:System.Management.PropertyData.Name">
      <summary>
        <para>Gets or sets the name of the property.</para>
      </summary>
    </member>
    <member name="P:System.Management.PropertyData.Value">
      <summary>
        <para>Gets or sets the current value of the property.</para>
      </summary>
    </member>
    <member name="P:System.Management.PropertyData.Type">
      <summary>
        <para>Gets or sets the CIM type of the property.</para>
      </summary>
    </member>
    <member name="P:System.Management.PropertyData.IsLocal">
      <summary>
        <para>Gets or sets a value indicating whether the property has been defined in the current WMI class.</para>
      </summary>
    </member>
    <member name="P:System.Management.PropertyData.IsArray">
      <summary>
        <para>Gets or sets a value indicating whether the property is an array.</para>
      </summary>
    </member>
    <member name="P:System.Management.PropertyData.Origin">
      <summary>
        <para>Gets or sets the name of the WMI class in the hierarchy in which the property was introduced.</para>
      </summary>
    </member>
    <member name="P:System.Management.PropertyData.Qualifiers">
      <summary>
        <para>Gets or sets the set of qualifiers defined on the property.</para>
      </summary>
    </member>
    <member name="T:System.Management.PropertyDataCollection">
      <summary>
        <para> Represents the set of properties of a WMI object.</para>
      </summary>
    </member>
    <member name="M:System.Management.PropertyDataCollection.CopyTo(System.Array,System.Int32)">
      <summary>
        <para>Copies the <see cref="T:System.Management.PropertyDataCollection" /> into an array.</para>
      </summary>
      <param name="array">The array to which to copy the <see cref="T:System.Management.PropertyDataCollection" />. </param>
      <param name="index">The index from which to start copying. </param>
    </member>
    <member name="M:System.Management.PropertyDataCollection.CopyTo(System.Management.PropertyData[],System.Int32)">
      <summary>
        <para>Copies the <see cref="T:System.Management.PropertyDataCollection" /> to a specialized <see cref="T:System.Management.PropertyData" /> object
               array.</para>
      </summary>
      <param name="propertyArray">The destination array to contain the copied <see cref="T:System.Management.PropertyDataCollection" />.</param>
      <param name=" index">The index in the destination array from which to start copying.</param>
    </member>
    <member name="M:System.Management.PropertyDataCollection.GetEnumerator">
      <summary>
        <para>Returns the enumerator for this <see cref="T:System.Management.PropertyDataCollection" />.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Collections.IEnumerator" /> 
            that can be used to iterate through the collection.</para>
      </returns>
    </member>
    <member name="M:System.Management.PropertyDataCollection.Remove(System.String)">
      <summary>
        <para>Removes a <see cref="T:System.Management.PropertyData" /> from the <see cref="T:System.Management.PropertyDataCollection" />.</para>
      </summary>
      <param name="propertyName">The name of the property to be removed.</param>
    </member>
    <member name="M:System.Management.PropertyDataCollection.Add(System.String,System.Object)">
      <summary>
        <para>Adds a new <see cref="T:System.Management.PropertyData" /> with the specified value. The value cannot
               be null and must be convertable to a CIM type.</para>
      </summary>
      <param name="propertyName">The name of the new property.</param>
      <param name="propertyValue">The value of the property (cannot be null).</param>
    </member>
    <member name="M:System.Management.PropertyDataCollection.Add(System.String,System.Object,System.Management.CimType)">
      <summary>
        <para>Adds a new <see cref="T:System.Management.PropertyData" /> with the specified value and CIM type.</para>
      </summary>
      <param name="propertyName">The name of the property.</param>
      <param name="propertyValue">The value of the property (which can be null).</param>
      <param name="propertyType">The CIM type of the property.</param>
    </member>
    <member name="M:System.Management.PropertyDataCollection.Add(System.String,System.Management.CimType,System.Boolean)">
      <summary>
        <para>Adds a new <see cref="T:System.Management.PropertyData" /> with no assigned value.</para>
      </summary>
      <param name="propertyName">The name of the property.</param>
      <param name="propertyType">The CIM type of the property.</param>
      <param name="isArray">
        <see langword="true" /> to specify that the property is an array type; otherwise, <see langword="false" />.</param>
    </member>
    <member name="P:System.Management.PropertyDataCollection.Count">
      <summary>
        <para>Gets or sets the number of objects in the <see cref="T:System.Management.PropertyDataCollection" />.</para>
      </summary>
    </member>
    <member name="P:System.Management.PropertyDataCollection.IsSynchronized">
      <summary>
        <para>Gets or sets a value indicating whether the object is synchronized.</para>
      </summary>
    </member>
    <member name="P:System.Management.PropertyDataCollection.SyncRoot">
      <summary>
        <para>Gets or sets the object to be used for synchronization.</para>
      </summary>
    </member>
    <member name="P:System.Management.PropertyDataCollection.Item(System.String)">
      <summary>
        <para> Returns the specified property from the <see cref="T:System.Management.PropertyDataCollection" />, using [] syntax.</para>
      </summary>
      <param name="propertyName">The name of the property to retrieve.</param>
    </member>
    <member name="M:System.Management.PropertyDataCollection.PropertyDataEnumerator.MoveNext">
      <summary>
        <para> Moves to the next element in the <see cref="T:System.Management.PropertyDataCollection" /> 
            enumeration.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the enumerator was successfully advanced to the next element; 
            <see langword="false" /> if the enumerator has passed the end of the collection.</para>
      </returns>
    </member>
    <member name="M:System.Management.PropertyDataCollection.PropertyDataEnumerator.Reset">
      <summary>
        <para>Resets the enumerator to the beginning of the <see cref="T:System.Management.PropertyDataCollection" /> 
            enumeration.</para>
      </summary>
    </member>
    <member name="P:System.Management.PropertyDataCollection.PropertyDataEnumerator.Current">
      <summary>
        <para>Gets the current <see cref="T:System.Management.PropertyData" /> in the <see cref="T:System.Management.PropertyDataCollection" /> enumeration.</para>
      </summary>
    </member>
    <member name="T:System.Management.QualifierData">
      <summary>
        <para> Contains information about a WMI qualifier.</para>
      </summary>
    </member>
    <member name="P:System.Management.QualifierData.Name">
      <summary>
        <para>Represents the name of the qualifier.</para>
      </summary>
    </member>
    <member name="P:System.Management.QualifierData.Value">
      <summary>
        <para>Gets or sets the value of the qualifier.</para>
      </summary>
    </member>
    <member name="P:System.Management.QualifierData.IsAmended">
      <summary>
        <para> Gets or sets a value indicating whether the qualifier is amended.</para>
      </summary>
    </member>
    <member name="P:System.Management.QualifierData.IsLocal">
      <summary>
        <para>Gets or sets a value indicating whether the qualifier has been defined locally on 
                  this class or has been propagated from a base class.</para>
      </summary>
    </member>
    <member name="P:System.Management.QualifierData.PropagatesToInstance">
      <summary>
        <para>Gets or sets a value indicating whether the qualifier should be propagated to instances of the 
                  class.</para>
      </summary>
    </member>
    <member name="P:System.Management.QualifierData.PropagatesToSubclass">
      <summary>
        <para>Gets or sets a value indicating whether the qualifier should be propagated to 
                  subclasses of the class.</para>
      </summary>
    </member>
    <member name="P:System.Management.QualifierData.IsOverridable">
      <summary>
        <para>Gets or sets a value indicating whether the value of the qualifier can be 
                  overridden when propagated.</para>
      </summary>
    </member>
    <member name="T:System.Management.QualifierDataCollection">
      <summary>
        <para> Represents a collection of <see cref="T:System.Management.QualifierData" /> objects.</para>
      </summary>
    </member>
    <member name="M:System.Management.QualifierDataCollection.CopyTo(System.Array,System.Int32)">
      <summary>
        <para> Copies the <see cref="T:System.Management.QualifierDataCollection" /> into an array.</para>
      </summary>
      <param name="array">The array to which to copy the <see cref="T:System.Management.QualifierDataCollection" />. </param>
      <param name="index">The index from which to start copying. </param>
    </member>
    <member name="M:System.Management.QualifierDataCollection.CopyTo(System.Management.QualifierData[],System.Int32)">
      <summary>
        <para>Copies the <see cref="T:System.Management.QualifierDataCollection" /> into a specialized 
            <see cref="T:System.Management.QualifierData" /> 
            array.</para>
      </summary>
      <param name="qualifierArray">
        <para>The specialized array of <see cref="T:System.Management.QualifierData" /> objects 
            to which to copy the <see cref="T:System.Management.QualifierDataCollection" />.</para>
      </param>
      <param name=" index">The index from which to start copying.</param>
    </member>
    <member name="M:System.Management.QualifierDataCollection.GetEnumerator">
      <summary>
        <para>Returns an enumerator for the <see cref="T:System.Management.QualifierDataCollection" />. This method is strongly typed.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the 
               collection.</para>
      </returns>
    </member>
    <member name="M:System.Management.QualifierDataCollection.Remove(System.String)">
      <summary>
        <para>Removes a <see cref="T:System.Management.QualifierData" /> from the <see cref="T:System.Management.QualifierDataCollection" /> by name.</para>
      </summary>
      <param name="qualifierName">The name of the <see cref="T:System.Management.QualifierData" /> to remove. </param>
    </member>
    <member name="M:System.Management.QualifierDataCollection.Add(System.String,System.Object)">
      <summary>
        <para>Adds a <see cref="T:System.Management.QualifierData" /> to the <see cref="T:System.Management.QualifierDataCollection" />. This overload specifies the qualifier name and value.</para>
      </summary>
      <param name="qualifierName">The name of the <see cref="T:System.Management.QualifierData" /> to be added to the <see cref="T:System.Management.QualifierDataCollection" />. </param>
      <param name="qualifierValue">The value for the new qualifier. </param>
    </member>
    <member name="M:System.Management.QualifierDataCollection.Add(System.String,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
        <para>Adds a <see cref="T:System.Management.QualifierData" /> to the <see cref="T:System.Management.QualifierDataCollection" />. This overload 
               specifies all property values for a <see cref="T:System.Management.QualifierData" /> object.</para>
      </summary>
      <param name="qualifierName">The qualifier name. </param>
      <param name="qualifierValue">The qualifier value. </param>
      <param name="isAmended">
        <see langword="true" /> to specify that this qualifier is amended (flavor); otherwise, <see langword="false" />. </param>
      <param name="propagatesToInstance">
        <see langword="true" /> to propagate this qualifier to instances; otherwise, <see langword="false" />. </param>
      <param name="propagatesToSubclass">
        <see langword="true" /> to propagate this qualifier to subclasses; otherwise, <see langword="false" />. </param>
      <param name="isOverridable">
        <see langword="true" /> to specify that this qualifier's value is overridable in instances of subclasses; otherwise, <see langword="false" />. </param>
    </member>
    <member name="P:System.Management.QualifierDataCollection.Count">
      <summary>
        <para>Gets or sets the number of <see cref="T:System.Management.QualifierData" /> objects in the <see cref="T:System.Management.QualifierDataCollection" />.</para>
      </summary>
    </member>
    <member name="P:System.Management.QualifierDataCollection.IsSynchronized">
      <summary>
        <para>Gets or sets a value indicating whether the object is synchronized.</para>
      </summary>
    </member>
    <member name="P:System.Management.QualifierDataCollection.SyncRoot">
      <summary>
        <para>Gets or sets the object to be used for synchronization.</para>
      </summary>
    </member>
    <member name="P:System.Management.QualifierDataCollection.Item(System.String)">
      <summary>
        <para> Gets the specified <see cref="T:System.Management.QualifierData" /> from the <see cref="T:System.Management.QualifierDataCollection" />.</para>
      </summary>
      <param name="qualifierName">The name of the <see cref="T:System.Management.QualifierData" /> to access in the <see cref="T:System.Management.QualifierDataCollection" />. </param>
    </member>
    <member name="M:System.Management.QualifierDataCollection.QualifierDataEnumerator.MoveNext">
      <summary>
        <para> Moves to the next element in the <see cref="T:System.Management.QualifierDataCollection" /> enumeration.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the enumerator was successfully advanced to the next 
               element; <see langword="false" /> if the enumerator has passed the end of the
               collection.</para>
      </returns>
    </member>
    <member name="M:System.Management.QualifierDataCollection.QualifierDataEnumerator.Reset">
      <summary>
        <para>Resets the enumerator to the beginning of the <see cref="T:System.Management.QualifierDataCollection" /> enumeration.</para>
      </summary>
    </member>
    <member name="P:System.Management.QualifierDataCollection.QualifierDataEnumerator.Current">
      <summary>
        <para>Gets or sets the current <see cref="T:System.Management.QualifierData" /> in the <see cref="T:System.Management.QualifierDataCollection" /> enumeration.</para>
      </summary>
    </member>
    <member name="T:System.Management.MethodData">
      <summary>
        <para> Contains information about a WMI method.</para>
      </summary>
    </member>
    <member name="P:System.Management.MethodData.Name">
      <summary>
        <para>Gets or sets the name of the method.</para>
      </summary>
    </member>
    <member name="P:System.Management.MethodData.InParameters">
      <summary>
        <para> Gets or sets the input parameters to the method. Each 
                  parameter is described as a property in the object. If a parameter is both in
                  and out, it appears in both the <see cref="P:System.Management.MethodData.InParameters" /> and <see cref="P:System.Management.MethodData.OutParameters" />
                  properties.</para>
      </summary>
    </member>
    <member name="P:System.Management.MethodData.OutParameters">
      <summary>
        <para> Gets or sets the output parameters to the method. Each 
                  parameter is described as a property in the object. If a parameter is both in
                  and out, it will appear in both the <see cref="P:System.Management.MethodData.InParameters" /> and <see cref="P:System.Management.MethodData.OutParameters" />
                  properties.</para>
      </summary>
    </member>
    <member name="P:System.Management.MethodData.Origin">
      <summary>
        <para>Gets the name of the management class in which the method was first 
                  introduced in the class inheritance hierarchy.</para>
      </summary>
    </member>
    <member name="P:System.Management.MethodData.Qualifiers">
      <summary>
        <para>Gets a collection of qualifiers defined in the 
                  method. Each element is of type <see cref="T:System.Management.QualifierData" />
                  and contains information such as the qualifier name, value, and
                  flavor.</para>
      </summary>
    </member>
    <member name="T:System.Management.MethodDataCollection">
      <summary>
        <para> Represents the set of methods available in the collection.</para>
      </summary>
    </member>
    <member name="M:System.Management.MethodDataCollection.CopyTo(System.Array,System.Int32)">
      <summary>
        <para> Copies the <see cref="T:System.Management.MethodDataCollection" /> into an array.</para>
      </summary>
      <param name="array">The array to which to copy the collection. </param>
      <param name="index">The index from which to start. </param>
    </member>
    <member name="M:System.Management.MethodDataCollection.CopyTo(System.Management.MethodData[],System.Int32)">
      <summary>
        <para>Copies the <see cref="T:System.Management.MethodDataCollection" /> to a specialized <see cref="T:System.Management.MethodData" /> 
            array.</para>
      </summary>
      <param name="methodArray">The destination array to which to copy the <see cref="T:System.Management.MethodData" /> objects.</param>
      <param name=" index">The index in the destination array from which to start the copy.</param>
    </member>
    <member name="M:System.Management.MethodDataCollection.GetEnumerator">
      <summary>
        <para>Returns an enumerator for the <see cref="T:System.Management.MethodDataCollection" />.</para>
      </summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> to enumerate through the collection.</returns>
    </member>
    <member name="M:System.Management.MethodDataCollection.Remove(System.String)">
      <summary>
        <para>Removes a <see cref="T:System.Management.MethodData" /> from the <see cref="T:System.Management.MethodDataCollection" />.</para>
      </summary>
      <param name="methodName">The name of the method to remove from the collection.</param>
    </member>
    <member name="M:System.Management.MethodDataCollection.Add(System.String)">
      <summary>
        <para>Adds a <see cref="T:System.Management.MethodData" /> to the <see cref="T:System.Management.MethodDataCollection" />. This overload will
               add a new method with no parameters to the collection.</para>
      </summary>
      <param name="methodName">The name of the method to add.</param>
    </member>
    <member name="M:System.Management.MethodDataCollection.Add(System.String,System.Management.ManagementBaseObject,System.Management.ManagementBaseObject)">
      <summary>
        <para>Adds a <see cref="T:System.Management.MethodData" /> to the <see cref="T:System.Management.MethodDataCollection" />. This overload will add a new method with the 
               specified parameter objects to the collection.</para>
      </summary>
      <param name="methodName">The name of the method to add.</param>
      <param name=" inParams">The <see cref="T:System.Management.ManagementBaseObject" /> holding the input parameters to the method.</param>
      <param name=" outParams">The <see cref="T:System.Management.ManagementBaseObject" /> holding the output parameters to the method.</param>
    </member>
    <member name="P:System.Management.MethodDataCollection.Count">
      <summary>
        <para>Represents the number of objects in the <see cref="T:System.Management.MethodDataCollection" />.</para>
      </summary>
    </member>
    <member name="P:System.Management.MethodDataCollection.IsSynchronized">
      <summary>
        <para>Indicates whether the object is synchronized.</para>
      </summary>
    </member>
    <member name="P:System.Management.MethodDataCollection.SyncRoot">
      <summary>
        <para>Represents the object to be used for synchronization.</para>
      </summary>
    </member>
    <member name="P:System.Management.MethodDataCollection.Item(System.String)">
      <summary>
        <para>Returns the specified <see cref="T:System.Management.MethodData" /> from the <see cref="T:System.Management.MethodDataCollection" />.</para>
      </summary>
      <param name="methodName">The name of the method requested.</param>
    </member>
    <!-- Badly formed XML comment ignored for member "T:System.Management.MethodDataCollection.MethodDataEnumerator" -->
    <member name="M:System.Management.MethodDataCollection.MethodDataEnumerator.MoveNext">
      <summary>
        <para>Moves to the next element in the <see cref="T:System.Management.MethodDataCollection" /> enumeration.</para>
      </summary>
      <returns>
        <see langword="true" /> if the enumerator was successfully advanced to the next method; <see langword="false" /> if the enumerator has passed the end of the collection.</returns>
    </member>
    <member name="M:System.Management.MethodDataCollection.MethodDataEnumerator.Reset">
      <summary>
        <para>Resets the enumerator to the beginning of the <see cref="T:System.Management.MethodDataCollection" /> enumeration.</para>
      </summary>
    </member>
    <member name="P:System.Management.MethodDataCollection.MethodDataEnumerator.Current">
      <summary>
        <para>Returns the current <see cref="T:System.Management.MethodData" /> in the <see cref="T:System.Management.MethodDataCollection" /> 
            enumeration.</para>
      </summary>
    </member>
    <member name="T:System.Management.Instrumentation.InstrumentedAttribute">
      <summary>
        <para>Specifies that this assembly provides management instrumentation. This attribute should appear one time per assembly.</para>
      </summary>
    </member>
    <member name="M:System.Management.Instrumentation.InstrumentedAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.Instrumentation.InstrumentedAttribute" /> 
            class that is set for the root\default namespace. This is the default constructor.</para>
      </summary>
    </member>
    <member name="M:System.Management.Instrumentation.InstrumentedAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.Instrumentation.InstrumentedAttribute" /> class that is set to the specified namespace for instrumentation within this assembly.</para>
      </summary>
      <param name="namespaceName">The namespace for instrumentation instances and events.</param>
    </member>
    <member name="M:System.Management.Instrumentation.InstrumentedAttribute.#ctor(System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.Instrumentation.InstrumentedAttribute" /> class that is set to the specified namespace and security settings for instrumentation within this assembly.</para>
      </summary>
      <param name="namespaceName">The namespace for instrumentation instances and events.</param>
      <param name="securityDescriptor"> A security descriptor that allows only the specified users or groups to run applications that provide the instrumentation supported by this assembly.</param>
    </member>
    <member name="P:System.Management.Instrumentation.InstrumentedAttribute.NamespaceName">
      <summary>
        <para>Gets or sets the namespace for instrumentation instances and events in this assembly.</para>
      </summary>
    </member>
    <member name="P:System.Management.Instrumentation.InstrumentedAttribute.SecurityDescriptor">
      <summary>
        <para> Gets or sets a security descriptor that allows only the specified users or groups to run
                  applications that provide the instrumentation supported by this assembly.</para>
      </summary>
    </member>
    <member name="T:System.Management.Instrumentation.InstrumentationType">
      <summary>
        <para>Specifies the type of instrumentation provided by a class.</para>
      </summary>
    </member>
    <member name="F:System.Management.Instrumentation.InstrumentationType.Instance">
      <summary>
        <para>Specifies that the class provides instances for management instrumentation.</para>
      </summary>
    </member>
    <member name="F:System.Management.Instrumentation.InstrumentationType.Event">
      <summary>
        <para>Specifies that the class provides events for management instrumentation.</para>
      </summary>
    </member>
    <member name="F:System.Management.Instrumentation.InstrumentationType.Abstract">
      <summary>
        <para>Specifies that the class defines an abstract class for management instrumentation.</para>
      </summary>
    </member>
    <member name="T:System.Management.Instrumentation.InstrumentationClassAttribute">
      <summary>
            Specifies that a class provides event or instance instrumentation.
            </summary>
    </member>
    <member name="M:System.Management.Instrumentation.InstrumentationClassAttribute.#ctor(System.Management.Instrumentation.InstrumentationType)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.Instrumentation.InstrumentationClassAttribute" /> class that is used if this type is derived from another type that has the <see cref="T:System.Management.Instrumentation.InstrumentationClassAttribute" /> attribute, or if this is a 
               top-level instrumentation class (for example, an instance or abstract class
               without a base class, or an event derived from <see langword="__ExtrinsicEvent" />).</para>
      </summary>
      <param name="instrumentationType">The type of instrumentation provided by this class.</param>
    </member>
    <member name="M:System.Management.Instrumentation.InstrumentationClassAttribute.#ctor(System.Management.Instrumentation.InstrumentationType,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.Instrumentation.InstrumentationClassAttribute" /> class that
               has schema for an existing base class. The class must contain
               proper member definitions for the properties of the existing
               WMI base class.</para>
      </summary>
      <param name="instrumentationType">The type of instrumentation provided by this class.</param>
      <param name="managedBaseClassName">The name of the base class.</param>
    </member>
    <member name="P:System.Management.Instrumentation.InstrumentationClassAttribute.InstrumentationType">
      <summary>
        <para>Gets or sets the type of instrumentation provided by this class.</para>
      </summary>
    </member>
    <member name="P:System.Management.Instrumentation.InstrumentationClassAttribute.ManagedBaseClassName">
      <summary>
        <para>Gets or sets the name of the base class of this instrumentation class.</para>
      </summary>
    </member>
    <member name="T:System.Management.Instrumentation.ManagedNameAttribute">
      <summary>
        <para>Allows an instrumented class, or member of an instrumented class,
                  to present an alternate name through management instrumentation.</para>
      </summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagedNameAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Management.Instrumentation.ManagedNameAttribute" /> class that allows the alternate name to be specified
               for the type, field, property, method, or parameter to which this attribute is applied.</para>
      </summary>
      <param name="name">The alternate name for the type, field, property, method, or parameter to which this attribute is applied.</param>
    </member>
    <member name="T:System.Management.Instrumentation.IgnoreMemberAttribute">
      <summary>
        <para>Allows a particular member of an instrumented class to be ignored
                  by management instrumentation</para>
      </summary>
    </member>
    <member name="T:System.Management.Instrumentation.Instrumentation">
      <summary>
        <para> Provides helper functions for exposing events and data for management.
                  There is a single instance of this class per application domain.</para>
      </summary>
    </member>
    <member name="M:System.Management.Instrumentation.Instrumentation.RegisterAssembly(System.Reflection.Assembly)">
      <summary>
        <para>Registers the management instance or event classes in the specified assembly with WMI.  This ensures that the instrumentation schema is accessible to System.Management client applications.</para>
      </summary>
      <param name="assemblyToRegister">
        <para>The assembly containing instrumentation instance or event types.</para>
      </param>
    </member>
    <member name="M:System.Management.Instrumentation.Instrumentation.IsAssemblyRegistered(System.Reflection.Assembly)">
      <summary>
        <para>Determines if the instrumentation schema of the specified assembly has already been correctly registered with WMI.</para>
      </summary>
      <param name="assemblyToRegister">
        <para>The assembly containing instrumentation instance or event types.</para>
      </param>
      <returns>
        <para>true if the instrumentation schema in the specified assembly is registered with WMI; otherwise, false.</para>
      </returns>
    </member>
    <member name="M:System.Management.Instrumentation.Instrumentation.Fire(System.Object)">
      <summary>
        <para>Raises a management event.</para>
      </summary>
      <param name="eventData">The object that determines the class, properties, and values of the event.</param>
    </member>
    <member name="M:System.Management.Instrumentation.Instrumentation.Publish(System.Object)">
      <summary>
        <para>Makes an instance visible through management instrumentation.</para>
      </summary>
      <param name="instanceData">The instance that is to be visible through management instrumentation.</param>
    </member>
    <member name="M:System.Management.Instrumentation.Instrumentation.Revoke(System.Object)">
      <summary>
        <para>Makes an instance that was previously published through the <see cref="M:System.Management.Instrumentation.Instrumentation.Publish(System.Object)" />
            method no longer visible through management instrumentation.</para>
      </summary>
      <param name="instanceData">The object to remove from visibility for management instrumentation.</param>
    </member>
    <member name="M:System.Management.Instrumentation.Instrumentation.SetBatchSize(System.Type,System.Int32)">
      <summary>
            Specifies the maximum number of objects of the specified type to be provided at a time.
            </summary>
      <param name="instrumentationClass">The class for which the batch size is being set.</param>
      <param name="batchSize">The maximum number of objects to be provided at a time.</param>
    </member>
    <member name="T:System.Management.Instrumentation.IEvent">
      <summary>
        <para>Specifies a source of a management instrumentation event. 
                  Objects that implement this interface are known to be sources of management
                  instrumentation events. Classes that do not derive from <see cref="T:System.Management.Instrumentation.BaseEvent" /> should implement
                  this interface instead.</para>
      </summary>
    </member>
    <member name="M:System.Management.Instrumentation.IEvent.Fire">
      <summary>
        <para> 
                  Raises a management event.</para>
      </summary>
    </member>
    <member name="T:System.Management.Instrumentation.BaseEvent">
      <summary>
        <para>Represents classes derived 
                  from <see cref="T:System.Management.Instrumentation.BaseEvent" /> that are known to be
               management event classes. These derived classes inherit an implementation
               of <see cref="T:System.Management.Instrumentation.IEvent" /> that allows events to be
               fired through the <see cref="M:System.Management.Instrumentation.IEvent.Fire" />
               method.</para>
      </summary>
    </member>
    <member name="M:System.Management.Instrumentation.BaseEvent.Fire">
      <summary>
        <para>Raises a management event.</para>
      </summary>
    </member>
    <member name="T:System.Management.Instrumentation.IInstance">
      <summary>
        <para>Specifies a source of a management instrumentation 
                  instance. Objects that implement this interface are known to be sources of
                  management instrumentation instances. Classes that do not derive from <see cref="T:System.Management.Instrumentation.Instance" /> should implement
                  this interface instead.</para>
      </summary>
    </member>
    <member name="P:System.Management.Instrumentation.IInstance.Published">
      <summary>
               Gets or sets a value indicating whether instances of
               classes that implement this interface are visible through management
               instrumentation.
            </summary>
    </member>
    <member name="T:System.Management.Instrumentation.Instance">
      <summary>
        <para> Represents derived classes known to be management 
                  instrumentation instance classes. These derived classes inherit an
                  implementation of <see cref="T:System.Management.Instrumentation.IInstance" /> that allows instances to be
                  published through the <see cref="P:System.Management.Instrumentation.IInstance.Published" />
                  property.</para>
      </summary>
    </member>
    <member name="P:System.Management.Instrumentation.Instance.Published">
      <summary>
        <para>Gets or sets a value indicating whether instances of classes that implement this interface are visible through management instrumentation.</para>
      </summary>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementInstaller">
      <summary>
        <para>Installs instrumented assemblies. Include an instance of this installer class in the project installer for
                  an assembly that includes instrumentation.</para>
      </summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementInstaller.Install(System.Collections.IDictionary)">
      <summary>
        <para>Installs the assembly.</para>
      </summary>
      <param name="savedState">The state of the assembly.</param>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementInstaller.Commit(System.Collections.IDictionary)">
      <summary>
        <para>Commits the assembly to the operation.</para>
      </summary>
      <param name="savedState">The state of the assembly.</param>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementInstaller.Rollback(System.Collections.IDictionary)">
      <summary>
        <para>Rolls back the state of the assembly.</para>
      </summary>
      <param name="savedState">The state of the assembly.</param>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementInstaller.Uninstall(System.Collections.IDictionary)">
      <summary>
        <para>Uninstalls the assembly.</para>
      </summary>
      <param name="savedState">The state of the assembly.</param>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementInstaller.HelpText">
      <summary>
        <para>Gets or sets installer options for this class.</para>
      </summary>
    </member>
    <member name="T:System.Management.Instrumentation.DefaultManagementProjectInstaller">
      <summary>
        <para> Installs an instrumented assembly. This class is a default project installer for assemblies that contain
                  management instrumentation and do not use other installers (such as services, or message
                  queues). To use this default project installer, simply derive a class from
               <see cref="T:System.Management.Instrumentation.DefaultManagementProjectInstaller" /> inside the assembly. No methods need
                  to be overridden.</para>
      </summary>
    </member>
    <member name="M:System.Management.Instrumentation.DefaultManagementProjectInstaller.#ctor">
      <summary>
        <para>Initializes a new instance of the 
               <see cref="T:System.Management.Instrumentation.DefaultManagementProjectInstaller" /> class. This is the default constructor.</para>
      </summary>
    </member>
    <member name="T:System.Management.CodeLanguage">
      <summary>
        <para>Defines the languages supported by the code generator.</para>
      </summary>
    </member>
    <member name="F:System.Management.CodeLanguage.CSharp">
      <summary>
               A value for generating C# code.
            </summary>
    </member>
    <member name="F:System.Management.CodeLanguage.JScript">
      <summary>
        <para>A value for generating JScript code.</para>
      </summary>
    </member>
    <member name="F:System.Management.CodeLanguage.VB">
      <summary>
        <para>A value for generating Visual Basic code.</para>
      </summary>
    </member>
    <member name="M:System.Management.ManagementClassGenerator.#ctor">
      <summary>
        <para>Creates an empty generator object. This is the default constructor.</para>
      </summary>
    </member>
    <member name="M:System.Management.ManagementClassGenerator.#ctor(System.Management.ManagementClass)">
      <summary>
        <para>Creates a generator object and initializes it
                with the specified <see cref="T:System.Management.ManagementClass" />.</para>
      </summary>
      <param name="cls">
        <see cref="T:System.Management.ManagementClass" /> object for which the code is to be generated.</param>
    </member>
    <member name="M:System.Management.ManagementClassGenerator.GenerateCode(System.Boolean,System.Boolean)">
      <summary>
        <para> 
                  Returns a <see cref="T:System.CodeDom.CodeTypeDeclaration" /> for
                  this class.</para>
      </summary>
      <param name="includeSystemProperties">Indicates if a class for handling system properties should be included.</param>
      <param name="systemPropertyClass">Indicates if the generated code is for a class that handles system properties.</param>
      <returns>
        <para>Returns the <see cref="T:System.CodeDom.CodeTypeDeclaration" /> for the WMI class.</para>
      </returns>
    </member>
    <member name="M:System.Management.ManagementClassGenerator.GenerateCode(System.Management.CodeLanguage,System.String,System.String)">
      <summary>
            Generates a strongly-typed code class for the specified language provider (C#, Visual Basic or JScript)
            and writes it to the specified file.
            </summary>
      <param name="lang">The language to generate in.</param>
      <param name="FilePath">The path to the file where the generated code should be stored.</param>
      <param name="Namespace">The .NET namespace into which the class is generated.</param>
    </member>
    <member name="P:System.Management.ManagementClassGenerator.Server">
      <summary>
        <para>Indicates the name of the server from which the WMI class originates.</para>
      </summary>
    </member>
    <member name="P:System.Management.ManagementClassGenerator.WMINamespace">
      <summary>
        <para>Indicates the WMI namespace from which the WMI class originates.</para>
      </summary>
    </member>
    <member name="P:System.Management.ManagementClassGenerator.ClassName">
      <summary>
        <para>Indicates the original name of the WMI class.</para>
      </summary>
    </member>
    <member name="P:System.Management.ManagementClassGenerator.WMIPath">
      <summary>
        <para>The full path of the WMI class.</para>
      </summary>
    </member>
    <member name="P:System.Management.ManagementClassGenerator.UnsignedSupported">
      <summary>
        <para>Checks if the current language supports unsigned values.</para>
      </summary>
      <returns>
        <see langword="true" /> if the language supports unsigned values, <see langword="false" /> otherwise.</returns>
    </member>
    <member name="P:System.Management.ManagementClassGenerator.Username">
      <summary>
        <para>Specifies a user name for the WMI connection.</para>
      </summary>
    </member>
    <member name="P:System.Management.ManagementClassGenerator.Password">
      <summary>
        <para>Specifies a user password if a different user name was specified.</para>
      </summary>
    </member>
    <member name="P:System.Management.ManagementClassGenerator.Authority">
      <summary>
        <para>Specifies an authority to be used for the WMI connection.</para>
      </summary>
    </member>
    <member name="P:System.Management.ManagementClassGenerator.GeneratedFileName">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="P:System.Management.ManagementClassGenerator.GeneratedTypeName">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
  </members>
</doc>