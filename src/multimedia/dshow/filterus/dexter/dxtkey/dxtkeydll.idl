// Copyright (c) 1999  Microsoft Corporation.  All Rights Reserved.
// DxtKeyDll.idl : IDL source for DxtKeyDll.dll
//

// This file will be processed by the MIDL tool to
// produce the type library (DxtKeyDll.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";
import "dxtrans.idl";

#ifdef FILTER_DLL
[
	object,
	uuid(C5B19590-145E-11d3-9F04-006008039E37),
	dual,
	helpstring("IDxtKey Interface"),
	pointer_default(unique)
]
interface IDxtKey : IDXEffect
{
   [propget, id(1), helpstring("property KeyType")]	HRESULT KeyType([out, retval] int *);
    [propput, id(1), helpstring("property Keytype")]	HRESULT KeyType([in] int);
    [propget, id(2), helpstring("property HueOrLuminance")]   HRESULT HueOrLuminance([out, retval] int *);
    [propput, id(2), helpstring("property HueOrLuminance")]   HRESULT HueOrLuminance([in] int );
    [propget, id(3), helpstring("property RGB")]	HRESULT RGB([out, retval] DWORD *);
    [propput, id(3), helpstring("property RGB")]	HRESULT RGB([in] DWORD );
    [propget, id(4), helpstring("property Similarity")]  HRESULT Similarity([out,retval] int * );
    [propput, id(4), helpstring("property Similarity")]  HRESULT Similarity([in] int );
    [propget, id(5), helpstring("property Blend")]	HRESULT Blend([out, retval] int *);
    [propput, id(5), helpstring("property Blend")]	HRESULT Blend([in] int);
    [propget, id(6), helpstring("property Threshold")]	HRESULT Threshold([out, retval] int *);
    [propput, id(6), helpstring("property Threshold")]	HRESULT Threshold([in] int);
    [propget, id(7), helpstring("property CutOff")]	HRESULT CutOff([out, retval] int *);
    [propput, id(7), helpstring("property CutOff")]	HRESULT CutOff([in] int);
    [propget, id(8), helpstring("property Gain")]	HRESULT Gain([out, retval] int *);
    [propput, id(8), helpstring("property Gain")]	HRESULT Gain([in] int);
    [propget, id(9), helpstring("property SoftWidth")]	HRESULT SoftWidth([out, retval] int *);
    [propput, id(9), helpstring("property SoftWidth")]	HRESULT SoftWidth([in] int);
    [propget, id(10), helpstring("property SoftColor")]	HRESULT SoftColor([out, retval] DWORD *);
    [propput, id(10), helpstring("property SoftColor")]	HRESULT SoftColor([in] DWORD);
    [propget, id(11), helpstring("property Invert")]	HRESULT Invert([out, retval] BOOL *);
    [propput, id(11), helpstring("property Invert")]	HRESULT Invert([in] BOOL);
    [propget, id(12), helpstring("property Progress")]	HRESULT Progress([out, retval] BOOL *);
    [propput, id(12), helpstring("property Progress")]	HRESULT Progress([in] BOOL);
};

[
	uuid(C5B19591-145E-11d3-9F04-006008039E37),
	version(1.0),
	helpstring("DxtKeyDll 1.0 Type Library")
]
library DXTKEYDLLLib
{
    importlib("stdole2.tlb");
    [
	uuid(C5B19592-145E-11d3-9F04-006008039E37),
	helpstring("DxtKey Class")
    ]
    coclass DxtKey
    {
	[default] interface IDxtKey;
    };
    [
	uuid(4831FB30-1AC2-11d3-9F05-006008039E37),
	helpstring("DxtKeyPP Class")
    ]
    coclass DxtKeyPP
    {
	interface IUnknown;
    };
};
#endif	// FILTER_DLL
