// Created by Microsoft (R) C/C++ Compiler Version 12.00.8168.0 (59038596).
//
// d:\danim\test2\debug\danim.tli
//
// Wrapper implementations for Win32 type library danim.dll
// compiler-generated file created 01/10/99 at 13:36:48 - DO NOT EDIT!


//
// interface IDAViewSite wrapper method implementations
//

#pragma implementation_key(1)
inline HRESULT DAnim::IDAViewSite::SetStatusText ( _bstr_t StatusText ) {
    HRESULT _hr = raw_SetStatusText(StatusText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IDAView wrapper method implementations
//

#pragma implementation_key(2)
inline double DAnim::IDAView::GetSimulationTime ( ) {
    double _result;
    HRESULT _hr = get_SimulationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(3)
inline VARIANT_BOOL DAnim::IDAView::Tick ( double simTime ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_Tick(simTime, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4)
inline HRESULT DAnim::IDAView::Render ( ) {
    HRESULT _hr = raw_Render();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(5)
inline long DAnim::IDAView::AddBvrToRun ( struct IDABehavior * bvr ) {
    long _result;
    HRESULT _hr = raw_AddBvrToRun(bvr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6)
inline HRESULT DAnim::IDAView::RemoveRunningBvr ( long id ) {
    HRESULT _hr = raw_RemoveRunningBvr(id);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(7)
inline HRESULT DAnim::IDAView::StartModel ( struct IDAImage * pImage, struct IDASound * pSound, double startTime ) {
    HRESULT _hr = raw_StartModel(pImage, pSound, startTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(8)
inline HRESULT DAnim::IDAView::StopModel ( ) {
    HRESULT _hr = raw_StopModel();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(9)
inline long DAnim::IDAView::GetWindow ( ) {
    long _result;
    HRESULT _hr = get_Window(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(10)
inline void DAnim::IDAView::PutWindow ( long hwnd ) {
    HRESULT _hr = put_Window(hwnd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(11)
inline IUnknownPtr DAnim::IDAView::GetIDirectDrawSurface ( ) {
    IUnknown * _result;
    HRESULT _hr = get_IDirectDrawSurface(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(12)
inline void DAnim::IDAView::PutIDirectDrawSurface ( IUnknown * ddsurf ) {
    HRESULT _hr = put_IDirectDrawSurface(ddsurf);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(13)
inline wireHDC DAnim::IDAView::GetDC ( ) {
    wireHDC _result;
    HRESULT _hr = get_DC(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(14)
inline void DAnim::IDAView::PutDC ( wireHDC DC ) {
    HRESULT _hr = put_DC(DC);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(15)
inline VARIANT_BOOL DAnim::IDAView::GetCompositeDirectlyToTarget ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_CompositeDirectlyToTarget(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(16)
inline void DAnim::IDAView::PutCompositeDirectlyToTarget ( VARIANT_BOOL composeToTarget ) {
    HRESULT _hr = put_CompositeDirectlyToTarget(composeToTarget);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(17)
inline HRESULT DAnim::IDAView::SetViewport ( long xPos, long yPos, long w, long h ) {
    HRESULT _hr = raw_SetViewport(xPos, yPos, w, h);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(18)
inline HRESULT DAnim::IDAView::SetClipRect ( long xPos, long yPos, long w, long h ) {
    HRESULT _hr = raw_SetClipRect(xPos, yPos, w, h);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(19)
inline HRESULT DAnim::IDAView::RePaint ( long xPos, long yPos, long w, long h ) {
    HRESULT _hr = raw_RePaint(xPos, yPos, w, h);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(20)
inline HRESULT DAnim::IDAView::PaletteChanged ( VARIANT_BOOL bNew ) {
    HRESULT _hr = raw_PaletteChanged(bNew);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(21)
inline DAnim::IDAViewSitePtr DAnim::IDAView::GetSite ( ) {
    struct IDAViewSite * _result;
    HRESULT _hr = get_Site(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAViewSitePtr(_result, false);
}

#pragma implementation_key(22)
inline void DAnim::IDAView::PutSite ( struct IDAViewSite * pViewSite ) {
    HRESULT _hr = put_Site(pViewSite);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(23)
inline void DAnim::IDAView::PutClientSite ( struct IOleClientSite * pClientSite ) {
    HRESULT _hr = put_ClientSite(pClientSite);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(24)
inline DAnim::IOleClientSitePtr DAnim::IDAView::GetClientSite ( ) {
    struct IOleClientSite * _result;
    HRESULT _hr = get_ClientSite(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IOleClientSitePtr(_result, false);
}

#pragma implementation_key(25)
inline HRESULT DAnim::IDAView::OnMouseMove ( double when, long xPos, long yPos, unsigned char modifiers ) {
    HRESULT _hr = raw_OnMouseMove(when, xPos, yPos, modifiers);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(26)
inline HRESULT DAnim::IDAView::OnMouseButton ( double when, long xPos, long yPos, unsigned char button, VARIANT_BOOL bPressed, unsigned char modifiers ) {
    HRESULT _hr = raw_OnMouseButton(when, xPos, yPos, button, bPressed, modifiers);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(27)
inline HRESULT DAnim::IDAView::OnKey ( double when, long key, VARIANT_BOOL bPressed, unsigned char modifiers ) {
    HRESULT _hr = raw_OnKey(when, key, bPressed, modifiers);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(28)
inline HRESULT DAnim::IDAView::OnFocus ( VARIANT_BOOL bHasFocus ) {
    HRESULT _hr = raw_OnFocus(bHasFocus);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(29)
inline DAnim::IDAPreferencesPtr DAnim::IDAView::GetPreferences ( ) {
    struct IDAPreferences * _result;
    HRESULT _hr = get_Preferences(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAPreferencesPtr(_result, false);
}

#pragma implementation_key(30)
inline unsigned long DAnim::IDAView::QueryHitPoint ( unsigned long dwAspect, struct tagRECT * prcBounds, struct tagPOINT ptLoc, long lCloseHint ) {
    unsigned long _result;
    HRESULT _hr = raw_QueryHitPoint(dwAspect, prcBounds, ptLoc, lCloseHint, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IDABehavior wrapper method implementations
//

#pragma implementation_key(31)
inline _bstr_t DAnim::IDABehavior::GetClassName ( ) {
    BSTR _result;
    HRESULT _hr = raw_GetClassName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(32)
inline HRESULT DAnim::IDABehavior::Init ( struct IDABehavior * toBvr ) {
    HRESULT _hr = raw_Init(toBvr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(33)
inline DAnim::IDABehaviorPtr DAnim::IDABehavior::Importance ( double relativeImportance ) {
    struct IDABehavior * _result;
    HRESULT _hr = raw_Importance(relativeImportance, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDABehaviorPtr(_result, false);
}

#pragma implementation_key(34)
inline DAnim::IDABehaviorPtr DAnim::IDABehavior::RunOnce ( ) {
    struct IDABehavior * _result;
    HRESULT _hr = raw_RunOnce(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDABehaviorPtr(_result, false);
}

#pragma implementation_key(35)
inline DAnim::IDABehaviorPtr DAnim::IDABehavior::SubstituteTime ( struct IDANumber * xform ) {
    struct IDABehavior * _result;
    HRESULT _hr = raw_SubstituteTime(xform, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDABehaviorPtr(_result, false);
}

#pragma implementation_key(36)
inline HRESULT DAnim::IDABehavior::SwitchTo ( struct IDABehavior * SwitchTo ) {
    HRESULT _hr = raw_SwitchTo(SwitchTo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(37)
inline HRESULT DAnim::IDABehavior::SwitchToNumber ( double numToSwitchTo ) {
    HRESULT _hr = raw_SwitchToNumber(numToSwitchTo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(38)
inline HRESULT DAnim::IDABehavior::SwitchToString ( _bstr_t strToSwitchTo ) {
    HRESULT _hr = raw_SwitchToString(strToSwitchTo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(39)
inline DAnim::IDABehaviorPtr DAnim::IDABehavior::Hook ( struct IDABvrHook * notifier ) {
    struct IDABehavior * _result;
    HRESULT _hr = raw_Hook(notifier, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDABehaviorPtr(_result, false);
}

#pragma implementation_key(40)
inline DAnim::IDABehaviorPtr DAnim::IDABehavior::Duration ( double Duration ) {
    struct IDABehavior * _result;
    HRESULT _hr = raw_Duration(Duration, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDABehaviorPtr(_result, false);
}

#pragma implementation_key(41)
inline DAnim::IDABehaviorPtr DAnim::IDABehavior::DurationAnim ( struct IDANumber * Duration ) {
    struct IDABehavior * _result;
    HRESULT _hr = raw_DurationAnim(Duration, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDABehaviorPtr(_result, false);
}

#pragma implementation_key(42)
inline DAnim::IDABehaviorPtr DAnim::IDABehavior::Repeat ( long count ) {
    struct IDABehavior * _result;
    HRESULT _hr = raw_Repeat(count, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDABehaviorPtr(_result, false);
}

#pragma implementation_key(43)
inline DAnim::IDABehaviorPtr DAnim::IDABehavior::RepeatForever ( ) {
    struct IDABehavior * _result;
    HRESULT _hr = raw_RepeatForever(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDABehaviorPtr(_result, false);
}

#pragma implementation_key(44)
inline VARIANT_BOOL DAnim::IDABehavior::IsReady ( VARIANT_BOOL bBlock ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_IsReady(bBlock, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IDANumber wrapper method implementations
//

#pragma implementation_key(45)
inline double DAnim::IDANumber::Extract ( ) {
    double _result;
    HRESULT _hr = raw_Extract(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(46)
inline DAnim::IDANumberPtr DAnim::IDANumber::AnimateProperty ( _bstr_t propertyPath_0, _bstr_t scriptingLanguage_1, VARIANT_BOOL invokeAsMethod_2, double minUpdateInterval_3 ) {
    struct IDANumber * _result;
    HRESULT _hr = raw_AnimateProperty(propertyPath_0, scriptingLanguage_1, invokeAsMethod_2, minUpdateInterval_3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(47)
inline DAnim::IDAStringPtr DAnim::IDANumber::ToStringAnim ( struct IDANumber * precision_0 ) {
    struct IDAString * _result;
    HRESULT _hr = raw_ToStringAnim(precision_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAStringPtr(_result, false);
}

#pragma implementation_key(48)
inline DAnim::IDAStringPtr DAnim::IDANumber::ToString ( double precision_0 ) {
    struct IDAString * _result;
    HRESULT _hr = raw_ToString(precision_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAStringPtr(_result, false);
}

//
// interface IDAString wrapper method implementations
//

#pragma implementation_key(49)
inline _bstr_t DAnim::IDAString::Extract ( ) {
    BSTR _result;
    HRESULT _hr = raw_Extract(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(50)
inline DAnim::IDAStringPtr DAnim::IDAString::AnimateProperty ( _bstr_t propertyPath_0, _bstr_t scriptingLanguage_1, VARIANT_BOOL invokeAsMethod_2, double minUpdateInterval_3 ) {
    struct IDAString * _result;
    HRESULT _hr = raw_AnimateProperty(propertyPath_0, scriptingLanguage_1, invokeAsMethod_2, minUpdateInterval_3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAStringPtr(_result, false);
}

//
// interface IDABvrHook wrapper method implementations
//

#pragma implementation_key(51)
inline DAnim::IDABehaviorPtr DAnim::IDABvrHook::Notify ( long id, VARIANT_BOOL startingPerformance, double startTime, double gTime, double lTime, struct IDABehavior * sampleVal, struct IDABehavior * curRunningBvr ) {
    struct IDABehavior * _result;
    HRESULT _hr = raw_Notify(id, startingPerformance, startTime, gTime, lTime, sampleVal, curRunningBvr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDABehaviorPtr(_result, false);
}

//
// interface IDAImage wrapper method implementations
//

#pragma implementation_key(52)
inline DAnim::IDAPickableResultPtr DAnim::IDAImage::Pickable ( ) {
    struct IDAPickableResult * _result;
    HRESULT _hr = raw_Pickable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAPickableResultPtr(_result, false);
}

#pragma implementation_key(53)
inline DAnim::IDAPickableResultPtr DAnim::IDAImage::PickableOccluded ( ) {
    struct IDAPickableResult * _result;
    HRESULT _hr = raw_PickableOccluded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAPickableResultPtr(_result, false);
}

#pragma implementation_key(54)
inline DAnim::IDAImagePtr DAnim::IDAImage::ApplyBitmapEffect ( IUnknown * effectToApply_0, struct IDAEvent * firesWhenChanged_1 ) {
    struct IDAImage * _result;
    HRESULT _hr = raw_ApplyBitmapEffect(effectToApply_0, firesWhenChanged_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

#pragma implementation_key(55)
inline DAnim::IDABbox2Ptr DAnim::IDAImage::GetBoundingBox ( ) {
    struct IDABbox2 * _result;
    HRESULT _hr = get_BoundingBox(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDABbox2Ptr(_result, false);
}

#pragma implementation_key(56)
inline DAnim::IDAImagePtr DAnim::IDAImage::Crop ( struct IDAPoint2 * min_0, struct IDAPoint2 * max_1 ) {
    struct IDAImage * _result;
    HRESULT _hr = raw_Crop(min_0, max_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

#pragma implementation_key(57)
inline DAnim::IDAImagePtr DAnim::IDAImage::Transform ( struct IDATransform2 * xf_0 ) {
    struct IDAImage * _result;
    HRESULT _hr = raw_Transform(xf_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

#pragma implementation_key(58)
inline DAnim::IDAImagePtr DAnim::IDAImage::OpacityAnim ( struct IDANumber * opacity_0 ) {
    struct IDAImage * _result;
    HRESULT _hr = raw_OpacityAnim(opacity_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

#pragma implementation_key(59)
inline DAnim::IDAImagePtr DAnim::IDAImage::Opacity ( double opacity_0 ) {
    struct IDAImage * _result;
    HRESULT _hr = raw_Opacity(opacity_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

#pragma implementation_key(60)
inline DAnim::IDAImagePtr DAnim::IDAImage::Undetectable ( ) {
    struct IDAImage * _result;
    HRESULT _hr = raw_Undetectable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

#pragma implementation_key(61)
inline DAnim::IDAImagePtr DAnim::IDAImage::Tile ( ) {
    struct IDAImage * _result;
    HRESULT _hr = raw_Tile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

#pragma implementation_key(62)
inline DAnim::IDAImagePtr DAnim::IDAImage::Clip ( struct IDAMatte * m_0 ) {
    struct IDAImage * _result;
    HRESULT _hr = raw_Clip(m_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

#pragma implementation_key(63)
inline DAnim::IDAImagePtr DAnim::IDAImage::MapToUnitSquare ( ) {
    struct IDAImage * _result;
    HRESULT _hr = raw_MapToUnitSquare(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

#pragma implementation_key(64)
inline DAnim::IDAImagePtr DAnim::IDAImage::ClipPolygonImageEx ( long points_0size, struct IDAPoint2 * * points_0 ) {
    struct IDAImage * _result;
    HRESULT _hr = raw_ClipPolygonImageEx(points_0size, points_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

#pragma implementation_key(65)
inline DAnim::IDAImagePtr DAnim::IDAImage::ClipPolygonImage ( const _variant_t & points_0 ) {
    struct IDAImage * _result;
    HRESULT _hr = raw_ClipPolygonImage(points_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

//
// interface IDAPickableResult wrapper method implementations
//

#pragma implementation_key(66)
inline DAnim::IDAImagePtr DAnim::IDAPickableResult::GetImage ( ) {
    struct IDAImage * _result;
    HRESULT _hr = get_Image(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

#pragma implementation_key(67)
inline DAnim::IDAGeometryPtr DAnim::IDAPickableResult::GetGeometry ( ) {
    struct IDAGeometry * _result;
    HRESULT _hr = get_Geometry(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAGeometryPtr(_result, false);
}

#pragma implementation_key(68)
inline DAnim::IDAEventPtr DAnim::IDAPickableResult::GetPickEvent ( ) {
    struct IDAEvent * _result;
    HRESULT _hr = get_PickEvent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAEventPtr(_result, false);
}

//
// interface IDAGeometry wrapper method implementations
//

#pragma implementation_key(69)
inline DAnim::IDASoundPtr DAnim::IDAGeometry::RenderSound ( struct IDAMicrophone * mic_0 ) {
    struct IDASound * _result;
    HRESULT _hr = raw_RenderSound(mic_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDASoundPtr(_result, false);
}

#pragma implementation_key(70)
inline DAnim::IDAPickableResultPtr DAnim::IDAGeometry::Pickable ( ) {
    struct IDAPickableResult * _result;
    HRESULT _hr = raw_Pickable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAPickableResultPtr(_result, false);
}

#pragma implementation_key(71)
inline DAnim::IDAPickableResultPtr DAnim::IDAGeometry::PickableOccluded ( ) {
    struct IDAPickableResult * _result;
    HRESULT _hr = raw_PickableOccluded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAPickableResultPtr(_result, false);
}

#pragma implementation_key(72)
inline DAnim::IDAGeometryPtr DAnim::IDAGeometry::Undetectable ( ) {
    struct IDAGeometry * _result;
    HRESULT _hr = raw_Undetectable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAGeometryPtr(_result, false);
}

#pragma implementation_key(73)
inline DAnim::IDAGeometryPtr DAnim::IDAGeometry::EmissiveColor ( struct IDAColor * col_0 ) {
    struct IDAGeometry * _result;
    HRESULT _hr = raw_EmissiveColor(col_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAGeometryPtr(_result, false);
}

#pragma implementation_key(74)
inline DAnim::IDAGeometryPtr DAnim::IDAGeometry::DiffuseColor ( struct IDAColor * col_0 ) {
    struct IDAGeometry * _result;
    HRESULT _hr = raw_DiffuseColor(col_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAGeometryPtr(_result, false);
}

#pragma implementation_key(75)
inline DAnim::IDAGeometryPtr DAnim::IDAGeometry::SpecularColor ( struct IDAColor * col_0 ) {
    struct IDAGeometry * _result;
    HRESULT _hr = raw_SpecularColor(col_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAGeometryPtr(_result, false);
}

#pragma implementation_key(76)
inline DAnim::IDAGeometryPtr DAnim::IDAGeometry::SpecularExponent ( double power_0 ) {
    struct IDAGeometry * _result;
    HRESULT _hr = raw_SpecularExponent(power_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAGeometryPtr(_result, false);
}

#pragma implementation_key(77)
inline DAnim::IDAGeometryPtr DAnim::IDAGeometry::SpecularExponentAnim ( struct IDANumber * power_0 ) {
    struct IDAGeometry * _result;
    HRESULT _hr = raw_SpecularExponentAnim(power_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAGeometryPtr(_result, false);
}

#pragma implementation_key(78)
inline DAnim::IDAGeometryPtr DAnim::IDAGeometry::Texture ( struct IDAImage * texture_0 ) {
    struct IDAGeometry * _result;
    HRESULT _hr = raw_Texture(texture_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAGeometryPtr(_result, false);
}

#pragma implementation_key(79)
inline DAnim::IDAGeometryPtr DAnim::IDAGeometry::Opacity ( double level_0 ) {
    struct IDAGeometry * _result;
    HRESULT _hr = raw_Opacity(level_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAGeometryPtr(_result, false);
}

#pragma implementation_key(80)
inline DAnim::IDAGeometryPtr DAnim::IDAGeometry::OpacityAnim ( struct IDANumber * level_0 ) {
    struct IDAGeometry * _result;
    HRESULT _hr = raw_OpacityAnim(level_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAGeometryPtr(_result, false);
}

#pragma implementation_key(81)
inline DAnim::IDAGeometryPtr DAnim::IDAGeometry::Transform ( struct IDATransform3 * xf_0 ) {
    struct IDAGeometry * _result;
    HRESULT _hr = raw_Transform(xf_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAGeometryPtr(_result, false);
}

#pragma implementation_key(82)
inline DAnim::IDABbox3Ptr DAnim::IDAGeometry::GetBoundingBox ( ) {
    struct IDABbox3 * _result;
    HRESULT _hr = get_BoundingBox(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDABbox3Ptr(_result, false);
}

#pragma implementation_key(83)
inline DAnim::IDAImagePtr DAnim::IDAGeometry::Render ( struct IDACamera * cam_0 ) {
    struct IDAImage * _result;
    HRESULT _hr = raw_Render(cam_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

#pragma implementation_key(84)
inline DAnim::IDAGeometryPtr DAnim::IDAGeometry::LightColor ( struct IDAColor * color_0 ) {
    struct IDAGeometry * _result;
    HRESULT _hr = raw_LightColor(color_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAGeometryPtr(_result, false);
}

#pragma implementation_key(85)
inline DAnim::IDAGeometryPtr DAnim::IDAGeometry::LightAttenuationAnim ( struct IDANumber * constant_0, struct IDANumber * linear_1, struct IDANumber * quadratic_2 ) {
    struct IDAGeometry * _result;
    HRESULT _hr = raw_LightAttenuationAnim(constant_0, linear_1, quadratic_2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAGeometryPtr(_result, false);
}

#pragma implementation_key(86)
inline DAnim::IDAGeometryPtr DAnim::IDAGeometry::LightAttenuation ( double constant_0, double linear_1, double quadratic_2 ) {
    struct IDAGeometry * _result;
    HRESULT _hr = raw_LightAttenuation(constant_0, linear_1, quadratic_2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAGeometryPtr(_result, false);
}

//
// interface IDAMicrophone wrapper method implementations
//

#pragma implementation_key(87)
inline DAnim::IDAMicrophonePtr DAnim::IDAMicrophone::Transform ( struct IDATransform3 * xf_0 ) {
    struct IDAMicrophone * _result;
    HRESULT _hr = raw_Transform(xf_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAMicrophonePtr(_result, false);
}

//
// interface IDATransform3 wrapper method implementations
//

#pragma implementation_key(88)
inline DAnim::IDATransform3Ptr DAnim::IDATransform3::Inverse ( ) {
    struct IDATransform3 * _result;
    HRESULT _hr = raw_Inverse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform3Ptr(_result, false);
}

#pragma implementation_key(89)
inline DAnim::IDABooleanPtr DAnim::IDATransform3::GetIsSingular ( ) {
    struct IDABoolean * _result;
    HRESULT _hr = get_IsSingular(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDABooleanPtr(_result, false);
}

#pragma implementation_key(90)
inline DAnim::IDATransform2Ptr DAnim::IDATransform3::ParallelTransform2 ( ) {
    struct IDATransform2 * _result;
    HRESULT _hr = raw_ParallelTransform2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform2Ptr(_result, false);
}

//
// interface IDABoolean wrapper method implementations
//

#pragma implementation_key(91)
inline VARIANT_BOOL DAnim::IDABoolean::Extract ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_Extract(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IDATransform2 wrapper method implementations
//

#pragma implementation_key(92)
inline DAnim::IDATransform2Ptr DAnim::IDATransform2::Inverse ( ) {
    struct IDATransform2 * _result;
    HRESULT _hr = raw_Inverse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform2Ptr(_result, false);
}

#pragma implementation_key(93)
inline DAnim::IDABooleanPtr DAnim::IDATransform2::GetIsSingular ( ) {
    struct IDABoolean * _result;
    HRESULT _hr = get_IsSingular(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDABooleanPtr(_result, false);
}

//
// interface IDASound wrapper method implementations
//

#pragma implementation_key(94)
inline DAnim::IDASoundPtr DAnim::IDASound::PhaseAnim ( struct IDANumber * phaseAmt_0 ) {
    struct IDASound * _result;
    HRESULT _hr = raw_PhaseAnim(phaseAmt_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDASoundPtr(_result, false);
}

#pragma implementation_key(95)
inline DAnim::IDASoundPtr DAnim::IDASound::Phase ( double phaseAmt_0 ) {
    struct IDASound * _result;
    HRESULT _hr = raw_Phase(phaseAmt_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDASoundPtr(_result, false);
}

#pragma implementation_key(96)
inline DAnim::IDASoundPtr DAnim::IDASound::RateAnim ( struct IDANumber * pitchShift_0 ) {
    struct IDASound * _result;
    HRESULT _hr = raw_RateAnim(pitchShift_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDASoundPtr(_result, false);
}

#pragma implementation_key(97)
inline DAnim::IDASoundPtr DAnim::IDASound::Rate ( double pitchShift_0 ) {
    struct IDASound * _result;
    HRESULT _hr = raw_Rate(pitchShift_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDASoundPtr(_result, false);
}

#pragma implementation_key(98)
inline DAnim::IDASoundPtr DAnim::IDASound::PanAnim ( struct IDANumber * panAmt_0 ) {
    struct IDASound * _result;
    HRESULT _hr = raw_PanAnim(panAmt_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDASoundPtr(_result, false);
}

#pragma implementation_key(99)
inline DAnim::IDASoundPtr DAnim::IDASound::Pan ( double panAmt_0 ) {
    struct IDASound * _result;
    HRESULT _hr = raw_Pan(panAmt_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDASoundPtr(_result, false);
}

#pragma implementation_key(100)
inline DAnim::IDASoundPtr DAnim::IDASound::GainAnim ( struct IDANumber * gainAmt_0 ) {
    struct IDASound * _result;
    HRESULT _hr = raw_GainAnim(gainAmt_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDASoundPtr(_result, false);
}

#pragma implementation_key(101)
inline DAnim::IDASoundPtr DAnim::IDASound::Gain ( double gainAmt_0 ) {
    struct IDASound * _result;
    HRESULT _hr = raw_Gain(gainAmt_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDASoundPtr(_result, false);
}

#pragma implementation_key(102)
inline DAnim::IDASoundPtr DAnim::IDASound::Loop ( ) {
    struct IDASound * _result;
    HRESULT _hr = raw_Loop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDASoundPtr(_result, false);
}

//
// interface IDAColor wrapper method implementations
//

#pragma implementation_key(103)
inline DAnim::IDANumberPtr DAnim::IDAColor::GetRed ( ) {
    struct IDANumber * _result;
    HRESULT _hr = get_Red(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(104)
inline DAnim::IDANumberPtr DAnim::IDAColor::GetGreen ( ) {
    struct IDANumber * _result;
    HRESULT _hr = get_Green(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(105)
inline DAnim::IDANumberPtr DAnim::IDAColor::GetBlue ( ) {
    struct IDANumber * _result;
    HRESULT _hr = get_Blue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(106)
inline DAnim::IDANumberPtr DAnim::IDAColor::GetHue ( ) {
    struct IDANumber * _result;
    HRESULT _hr = get_Hue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(107)
inline DAnim::IDANumberPtr DAnim::IDAColor::GetSaturation ( ) {
    struct IDANumber * _result;
    HRESULT _hr = get_Saturation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(108)
inline DAnim::IDANumberPtr DAnim::IDAColor::GetLightness ( ) {
    struct IDANumber * _result;
    HRESULT _hr = get_Lightness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

//
// interface IDABbox3 wrapper method implementations
//

#pragma implementation_key(109)
inline DAnim::IDAPoint3Ptr DAnim::IDABbox3::GetMin ( ) {
    struct IDAPoint3 * _result;
    HRESULT _hr = get_Min(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAPoint3Ptr(_result, false);
}

#pragma implementation_key(110)
inline DAnim::IDAPoint3Ptr DAnim::IDABbox3::GetMax ( ) {
    struct IDAPoint3 * _result;
    HRESULT _hr = get_Max(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAPoint3Ptr(_result, false);
}

//
// interface IDAPoint3 wrapper method implementations
//

#pragma implementation_key(111)
inline DAnim::IDAPoint2Ptr DAnim::IDAPoint3::Project ( struct IDACamera * cam_0 ) {
    struct IDAPoint2 * _result;
    HRESULT _hr = raw_Project(cam_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAPoint2Ptr(_result, false);
}

#pragma implementation_key(112)
inline DAnim::IDANumberPtr DAnim::IDAPoint3::GetX ( ) {
    struct IDANumber * _result;
    HRESULT _hr = get_X(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(113)
inline DAnim::IDANumberPtr DAnim::IDAPoint3::GetY ( ) {
    struct IDANumber * _result;
    HRESULT _hr = get_Y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(114)
inline DAnim::IDANumberPtr DAnim::IDAPoint3::GetZ ( ) {
    struct IDANumber * _result;
    HRESULT _hr = get_Z(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(115)
inline DAnim::IDANumberPtr DAnim::IDAPoint3::GetSphericalCoordXYAngle ( ) {
    struct IDANumber * _result;
    HRESULT _hr = get_SphericalCoordXYAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(116)
inline DAnim::IDANumberPtr DAnim::IDAPoint3::GetSphericalCoordYZAngle ( ) {
    struct IDANumber * _result;
    HRESULT _hr = get_SphericalCoordYZAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(117)
inline DAnim::IDANumberPtr DAnim::IDAPoint3::GetSphericalCoordLength ( ) {
    struct IDANumber * _result;
    HRESULT _hr = get_SphericalCoordLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(118)
inline DAnim::IDAPoint3Ptr DAnim::IDAPoint3::Transform ( struct IDATransform3 * xf_0 ) {
    struct IDAPoint3 * _result;
    HRESULT _hr = raw_Transform(xf_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAPoint3Ptr(_result, false);
}

//
// interface IDACamera wrapper method implementations
//

#pragma implementation_key(119)
inline DAnim::IDACameraPtr DAnim::IDACamera::Transform ( struct IDATransform3 * xf_0 ) {
    struct IDACamera * _result;
    HRESULT _hr = raw_Transform(xf_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDACameraPtr(_result, false);
}

#pragma implementation_key(120)
inline DAnim::IDACameraPtr DAnim::IDACamera::Depth ( double depth_0 ) {
    struct IDACamera * _result;
    HRESULT _hr = raw_Depth(depth_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDACameraPtr(_result, false);
}

#pragma implementation_key(121)
inline DAnim::IDACameraPtr DAnim::IDACamera::DepthAnim ( struct IDANumber * depth_0 ) {
    struct IDACamera * _result;
    HRESULT _hr = raw_DepthAnim(depth_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDACameraPtr(_result, false);
}

#pragma implementation_key(122)
inline DAnim::IDACameraPtr DAnim::IDACamera::DepthResolution ( double resolution_0 ) {
    struct IDACamera * _result;
    HRESULT _hr = raw_DepthResolution(resolution_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDACameraPtr(_result, false);
}

#pragma implementation_key(123)
inline DAnim::IDACameraPtr DAnim::IDACamera::DepthResolutionAnim ( struct IDANumber * resolution_0 ) {
    struct IDACamera * _result;
    HRESULT _hr = raw_DepthResolutionAnim(resolution_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDACameraPtr(_result, false);
}

//
// interface IDAPoint2 wrapper method implementations
//

#pragma implementation_key(124)
inline DAnim::IDAPoint2Ptr DAnim::IDAPoint2::AnimateControlPosition ( _bstr_t propertyPath_0, _bstr_t scriptingLanguage_1, VARIANT_BOOL invokeAsMethod_2, double minUpdateInterval_3 ) {
    struct IDAPoint2 * _result;
    HRESULT _hr = raw_AnimateControlPosition(propertyPath_0, scriptingLanguage_1, invokeAsMethod_2, minUpdateInterval_3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAPoint2Ptr(_result, false);
}

#pragma implementation_key(125)
inline DAnim::IDAPoint2Ptr DAnim::IDAPoint2::AnimateControlPositionPixel ( _bstr_t propertyPath_0, _bstr_t scriptingLanguage_1, VARIANT_BOOL invokeAsMethod_2, double minUpdateInterval_3 ) {
    struct IDAPoint2 * _result;
    HRESULT _hr = raw_AnimateControlPositionPixel(propertyPath_0, scriptingLanguage_1, invokeAsMethod_2, minUpdateInterval_3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAPoint2Ptr(_result, false);
}

#pragma implementation_key(126)
inline DAnim::IDANumberPtr DAnim::IDAPoint2::GetX ( ) {
    struct IDANumber * _result;
    HRESULT _hr = get_X(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(127)
inline DAnim::IDANumberPtr DAnim::IDAPoint2::GetY ( ) {
    struct IDANumber * _result;
    HRESULT _hr = get_Y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(128)
inline DAnim::IDANumberPtr DAnim::IDAPoint2::GetPolarCoordAngle ( ) {
    struct IDANumber * _result;
    HRESULT _hr = get_PolarCoordAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(129)
inline DAnim::IDANumberPtr DAnim::IDAPoint2::GetPolarCoordLength ( ) {
    struct IDANumber * _result;
    HRESULT _hr = get_PolarCoordLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(130)
inline DAnim::IDAPoint2Ptr DAnim::IDAPoint2::Transform ( struct IDATransform2 * xf_0 ) {
    struct IDAPoint2 * _result;
    HRESULT _hr = raw_Transform(xf_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAPoint2Ptr(_result, false);
}

//
// interface IDAEvent wrapper method implementations
//

#pragma implementation_key(131)
inline DAnim::IDAEventPtr DAnim::IDAEvent::Notify ( struct IDAUntilNotifier * notifier_0 ) {
    struct IDAEvent * _result;
    HRESULT _hr = raw_Notify(notifier_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAEventPtr(_result, false);
}

#pragma implementation_key(132)
inline DAnim::IDAEventPtr DAnim::IDAEvent::Snapshot ( struct IDABehavior * b_0 ) {
    struct IDAEvent * _result;
    HRESULT _hr = raw_Snapshot(b_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAEventPtr(_result, false);
}

#pragma implementation_key(133)
inline DAnim::IDAEventPtr DAnim::IDAEvent::AttachData ( struct IDABehavior * data_0 ) {
    struct IDAEvent * _result;
    HRESULT _hr = raw_AttachData(data_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAEventPtr(_result, false);
}

#pragma implementation_key(134)
inline DAnim::IDAEventPtr DAnim::IDAEvent::ScriptCallback ( _bstr_t scriptlet_0, _bstr_t language_1 ) {
    struct IDAEvent * _result;
    HRESULT _hr = raw_ScriptCallback(scriptlet_0, language_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAEventPtr(_result, false);
}

//
// interface IDAUntilNotifier wrapper method implementations
//

#pragma implementation_key(135)
inline DAnim::IDABehaviorPtr DAnim::IDAUntilNotifier::Notify ( struct IDABehavior * eventData, struct IDABehavior * curRunningBvr, struct IDAView * curView ) {
    struct IDABehavior * _result;
    HRESULT _hr = raw_Notify(eventData, curRunningBvr, curView, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDABehaviorPtr(_result, false);
}

//
// interface IDABbox2 wrapper method implementations
//

#pragma implementation_key(136)
inline DAnim::IDAPoint2Ptr DAnim::IDABbox2::GetMin ( ) {
    struct IDAPoint2 * _result;
    HRESULT _hr = get_Min(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAPoint2Ptr(_result, false);
}

#pragma implementation_key(137)
inline DAnim::IDAPoint2Ptr DAnim::IDABbox2::GetMax ( ) {
    struct IDAPoint2 * _result;
    HRESULT _hr = get_Max(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAPoint2Ptr(_result, false);
}

//
// interface IDAMatte wrapper method implementations
//

#pragma implementation_key(138)
inline DAnim::IDAMattePtr DAnim::IDAMatte::Transform ( struct IDATransform2 * xf_0 ) {
    struct IDAMatte * _result;
    HRESULT _hr = raw_Transform(xf_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAMattePtr(_result, false);
}

//
// interface IDAPreferences wrapper method implementations
//

#pragma implementation_key(139)
inline HRESULT DAnim::IDAPreferences::PutPreference ( _bstr_t preferenceName, const _variant_t & value ) {
    HRESULT _hr = raw_PutPreference(preferenceName, value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(140)
inline _variant_t DAnim::IDAPreferences::GetPreference ( _bstr_t preferenceName ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetPreference(preferenceName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(141)
inline HRESULT DAnim::IDAPreferences::Propagate ( ) {
    HRESULT _hr = raw_Propagate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IDADrawingSurface wrapper method implementations
//

#pragma implementation_key(142)
inline DAnim::IDAImagePtr DAnim::IDADrawingSurface::GetImage ( ) {
    struct IDAImage * _result;
    HRESULT _hr = get_Image(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

#pragma implementation_key(143)
inline void DAnim::IDADrawingSurface::PutLineStyle ( struct IDALineStyle * _arg1 ) {
    HRESULT _hr = put_LineStyle(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(144)
inline void DAnim::IDADrawingSurface::PutBorderStyle ( struct IDALineStyle * _arg1 ) {
    HRESULT _hr = put_BorderStyle(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(145)
inline void DAnim::IDADrawingSurface::PutFontStyle ( struct IDAFontStyle * _arg1 ) {
    HRESULT _hr = put_FontStyle(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(146)
inline void DAnim::IDADrawingSurface::PutClipMatte ( struct IDAMatte * _arg1 ) {
    HRESULT _hr = put_ClipMatte(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(147)
inline void DAnim::IDADrawingSurface::PutMouseEventsEnabled ( VARIANT_BOOL _arg1 ) {
    HRESULT _hr = put_MouseEventsEnabled(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(148)
inline void DAnim::IDADrawingSurface::PutHatchFillTransparent ( VARIANT_BOOL _arg1 ) {
    HRESULT _hr = put_HatchFillTransparent(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(149)
inline DAnim::IDAImagePtr DAnim::IDADrawingSurface::GetLocalContextImage ( ) {
    struct IDAImage * _result;
    HRESULT _hr = get_LocalContextImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

#pragma implementation_key(150)
inline HRESULT DAnim::IDADrawingSurface::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(151)
inline HRESULT DAnim::IDADrawingSurface::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(152)
inline HRESULT DAnim::IDADrawingSurface::SaveGraphicsState ( ) {
    HRESULT _hr = raw_SaveGraphicsState();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(153)
inline HRESULT DAnim::IDADrawingSurface::RestoreGraphicsState ( ) {
    HRESULT _hr = raw_RestoreGraphicsState();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(154)
inline HRESULT DAnim::IDADrawingSurface::Opacity ( double opac ) {
    HRESULT _hr = raw_Opacity(opac);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(155)
inline HRESULT DAnim::IDADrawingSurface::OpacityAnim ( struct IDANumber * opac ) {
    HRESULT _hr = raw_OpacityAnim(opac);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(156)
inline HRESULT DAnim::IDADrawingSurface::Crop ( double lowerLeftX, double lowerLeftY, double upperRightX, double upperRightY ) {
    HRESULT _hr = raw_Crop(lowerLeftX, lowerLeftY, upperRightX, upperRightY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(157)
inline HRESULT DAnim::IDADrawingSurface::CropPoints ( struct IDAPoint2 * Min, struct IDAPoint2 * Max ) {
    HRESULT _hr = raw_CropPoints(Min, Max);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(158)
inline HRESULT DAnim::IDADrawingSurface::Transform ( struct IDATransform2 * xform ) {
    HRESULT _hr = raw_Transform(xform);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(159)
inline HRESULT DAnim::IDADrawingSurface::LineColor ( struct IDAColor * clr ) {
    HRESULT _hr = raw_LineColor(clr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(160)
inline HRESULT DAnim::IDADrawingSurface::LineWidth ( double w ) {
    HRESULT _hr = raw_LineWidth(w);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(161)
inline HRESULT DAnim::IDADrawingSurface::LineDashStyle ( DA_DASH_STYLE id ) {
    HRESULT _hr = raw_LineDashStyle(id);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(162)
inline HRESULT DAnim::IDADrawingSurface::LineEndStyle ( DA_END_STYLE id ) {
    HRESULT _hr = raw_LineEndStyle(id);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(163)
inline HRESULT DAnim::IDADrawingSurface::LineJoinStyle ( DA_JOIN_STYLE id ) {
    HRESULT _hr = raw_LineJoinStyle(id);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(164)
inline HRESULT DAnim::IDADrawingSurface::BorderColor ( struct IDAColor * clr ) {
    HRESULT _hr = raw_BorderColor(clr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(165)
inline HRESULT DAnim::IDADrawingSurface::BorderWidth ( double w ) {
    HRESULT _hr = raw_BorderWidth(w);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(166)
inline HRESULT DAnim::IDADrawingSurface::BorderDashStyle ( DA_DASH_STYLE id ) {
    HRESULT _hr = raw_BorderDashStyle(id);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(167)
inline HRESULT DAnim::IDADrawingSurface::BorderEndStyle ( DA_END_STYLE obsolete ) {
    HRESULT _hr = raw_BorderEndStyle(obsolete);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(168)
inline HRESULT DAnim::IDADrawingSurface::BorderJoinStyle ( DA_JOIN_STYLE id ) {
    HRESULT _hr = raw_BorderJoinStyle(id);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(169)
inline HRESULT DAnim::IDADrawingSurface::Font ( _bstr_t FontFace, long sizeInPoints, VARIANT_BOOL Bold, VARIANT_BOOL Italic, VARIANT_BOOL Underline, VARIANT_BOOL Strikethrough ) {
    HRESULT _hr = raw_Font(FontFace, sizeInPoints, Bold, Italic, Underline, Strikethrough);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(170)
inline HRESULT DAnim::IDADrawingSurface::TextureFill ( struct IDAImage * obsolete1, double obsolete2, double obsolete3 ) {
    HRESULT _hr = raw_TextureFill(obsolete1, obsolete2, obsolete3);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(171)
inline HRESULT DAnim::IDADrawingSurface::ImageFill ( struct IDAImage * obsolete1, double obsolete2, double obsolete3 ) {
    HRESULT _hr = raw_ImageFill(obsolete1, obsolete2, obsolete3);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(172)
inline HRESULT DAnim::IDADrawingSurface::FillTexture ( struct IDAImage * img ) {
    HRESULT _hr = raw_FillTexture(img);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(173)
inline HRESULT DAnim::IDADrawingSurface::FillImage ( struct IDAImage * img ) {
    HRESULT _hr = raw_FillImage(img);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(174)
inline HRESULT DAnim::IDADrawingSurface::FillStyle ( int id ) {
    HRESULT _hr = raw_FillStyle(id);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(175)
inline HRESULT DAnim::IDADrawingSurface::FillColor ( struct IDAColor * foreground ) {
    HRESULT _hr = raw_FillColor(foreground);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(176)
inline HRESULT DAnim::IDADrawingSurface::SecondaryFillColor ( struct IDAColor * val ) {
    HRESULT _hr = raw_SecondaryFillColor(val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(177)
inline HRESULT DAnim::IDADrawingSurface::GradientShape ( const _variant_t & pts ) {
    HRESULT _hr = raw_GradientShape(pts);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(178)
inline HRESULT DAnim::IDADrawingSurface::GradientExtent ( double startx, double starty, double finishx, double finishy ) {
    HRESULT _hr = raw_GradientExtent(startx, starty, finishx, finishy);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(179)
inline HRESULT DAnim::IDADrawingSurface::GradientExtentPoints ( struct IDAPoint2 * startColor, struct IDAPoint2 * stopColor ) {
    HRESULT _hr = raw_GradientExtentPoints(startColor, stopColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(180)
inline HRESULT DAnim::IDADrawingSurface::GradientRolloffPower ( double power ) {
    HRESULT _hr = raw_GradientRolloffPower(power);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(181)
inline HRESULT DAnim::IDADrawingSurface::GradientRolloffPowerAnim ( struct IDANumber * power ) {
    HRESULT _hr = raw_GradientRolloffPowerAnim(power);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(182)
inline HRESULT DAnim::IDADrawingSurface::FixedFillScale ( ) {
    HRESULT _hr = raw_FixedFillScale();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(183)
inline HRESULT DAnim::IDADrawingSurface::HorizontalFillScale ( ) {
    HRESULT _hr = raw_HorizontalFillScale();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(184)
inline HRESULT DAnim::IDADrawingSurface::VerticalFillScale ( ) {
    HRESULT _hr = raw_VerticalFillScale();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(185)
inline HRESULT DAnim::IDADrawingSurface::AutoSizeFillScale ( ) {
    HRESULT _hr = raw_AutoSizeFillScale();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(186)
inline HRESULT DAnim::IDADrawingSurface::PolylineEx ( long numPts, struct IDAPoint2 * * pts ) {
    HRESULT _hr = raw_PolylineEx(numPts, pts);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(187)
inline HRESULT DAnim::IDADrawingSurface::Polyline ( const _variant_t & v ) {
    HRESULT _hr = raw_Polyline(v);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(188)
inline HRESULT DAnim::IDADrawingSurface::PolygonEx ( long numPts, struct IDAPoint2 * * pts ) {
    HRESULT _hr = raw_PolygonEx(numPts, pts);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(189)
inline HRESULT DAnim::IDADrawingSurface::Polygon ( const _variant_t & v ) {
    HRESULT _hr = raw_Polygon(v);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(190)
inline HRESULT DAnim::IDADrawingSurface::LinePoints ( struct IDAPoint2 * p1, struct IDAPoint2 * p2 ) {
    HRESULT _hr = raw_LinePoints(p1, p2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(191)
inline HRESULT DAnim::IDADrawingSurface::Line ( double startx, double starty, double endX, double endY ) {
    HRESULT _hr = raw_Line(startx, starty, endX, endY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(192)
inline HRESULT DAnim::IDADrawingSurface::ArcRadians ( double xPos, double yPos, double startAngle, double endAngle, double arcWidth, double arcHeight ) {
    HRESULT _hr = raw_ArcRadians(xPos, yPos, startAngle, endAngle, arcWidth, arcHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(193)
inline HRESULT DAnim::IDADrawingSurface::ArcDegrees ( double xPos, double yPos, double startAngle, double endAngle, double arcWidth, double arcHeight ) {
    HRESULT _hr = raw_ArcDegrees(xPos, yPos, startAngle, endAngle, arcWidth, arcHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(194)
inline HRESULT DAnim::IDADrawingSurface::Oval ( double xPos, double yPos, double w, double h ) {
    HRESULT _hr = raw_Oval(xPos, yPos, w, h);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(195)
inline HRESULT DAnim::IDADrawingSurface::Rect ( double xPos, double yPos, double w, double h ) {
    HRESULT _hr = raw_Rect(xPos, yPos, w, h);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(196)
inline HRESULT DAnim::IDADrawingSurface::RoundRect ( double xPos, double yPos, double w, double h, double arcWidth, double arcHeight ) {
    HRESULT _hr = raw_RoundRect(xPos, yPos, w, h, arcWidth, arcHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(197)
inline HRESULT DAnim::IDADrawingSurface::PieRadians ( double xPos, double yPos, double startAngle, double endAngle, double arcWidth, double arcHeight ) {
    HRESULT _hr = raw_PieRadians(xPos, yPos, startAngle, endAngle, arcWidth, arcHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(198)
inline HRESULT DAnim::IDADrawingSurface::PieDegrees ( double xPos, double yPos, double startAngle, double endAngle, double arcWidth, double arcHeight ) {
    HRESULT _hr = raw_PieDegrees(xPos, yPos, startAngle, endAngle, arcWidth, arcHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(199)
inline HRESULT DAnim::IDADrawingSurface::Text ( _bstr_t str, double xPos, double yPos ) {
    HRESULT _hr = raw_Text(str, xPos, yPos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(200)
inline HRESULT DAnim::IDADrawingSurface::TextPoint ( _bstr_t str, struct IDAPoint2 * point ) {
    HRESULT _hr = raw_TextPoint(str, point);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(201)
inline HRESULT DAnim::IDADrawingSurface::FillPath ( struct IDAPath2 * path ) {
    HRESULT _hr = raw_FillPath(path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(202)
inline HRESULT DAnim::IDADrawingSurface::DrawPath ( struct IDAPath2 * path ) {
    HRESULT _hr = raw_DrawPath(path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(203)
inline HRESULT DAnim::IDADrawingSurface::OverlayImage ( struct IDAImage * img ) {
    HRESULT _hr = raw_OverlayImage(img);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IDALineStyle wrapper method implementations
//

#pragma implementation_key(204)
inline DAnim::IDALineStylePtr DAnim::IDALineStyle::End ( struct IDAEndStyle * obsolete_0 ) {
    struct IDALineStyle * _result;
    HRESULT _hr = raw_End(obsolete_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDALineStylePtr(_result, false);
}

#pragma implementation_key(205)
inline DAnim::IDALineStylePtr DAnim::IDALineStyle::Join ( struct IDAJoinStyle * obsolete_0 ) {
    struct IDALineStyle * _result;
    HRESULT _hr = raw_Join(obsolete_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDALineStylePtr(_result, false);
}

#pragma implementation_key(206)
inline DAnim::IDALineStylePtr DAnim::IDALineStyle::Dash ( struct IDADashStyle * obsolete_0 ) {
    struct IDALineStyle * _result;
    HRESULT _hr = raw_Dash(obsolete_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDALineStylePtr(_result, false);
}

#pragma implementation_key(207)
inline DAnim::IDALineStylePtr DAnim::IDALineStyle::WidthAnim ( struct IDANumber * sty_0 ) {
    struct IDALineStyle * _result;
    HRESULT _hr = raw_WidthAnim(sty_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDALineStylePtr(_result, false);
}

#pragma implementation_key(208)
inline DAnim::IDALineStylePtr DAnim::IDALineStyle::width ( double sty_0 ) {
    struct IDALineStyle * _result;
    HRESULT _hr = raw_width(sty_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDALineStylePtr(_result, false);
}

#pragma implementation_key(209)
inline DAnim::IDALineStylePtr DAnim::IDALineStyle::AntiAliasing ( double aaStyle_0 ) {
    struct IDALineStyle * _result;
    HRESULT _hr = raw_AntiAliasing(aaStyle_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDALineStylePtr(_result, false);
}

#pragma implementation_key(210)
inline DAnim::IDALineStylePtr DAnim::IDALineStyle::Detail ( ) {
    struct IDALineStyle * _result;
    HRESULT _hr = raw_Detail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDALineStylePtr(_result, false);
}

#pragma implementation_key(211)
inline DAnim::IDALineStylePtr DAnim::IDALineStyle::Color ( struct IDAColor * clr_0 ) {
    struct IDALineStyle * _result;
    HRESULT _hr = raw_Color(clr_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDALineStylePtr(_result, false);
}

//
// interface IDAFontStyle wrapper method implementations
//

#pragma implementation_key(212)
inline DAnim::IDAFontStylePtr DAnim::IDAFontStyle::Bold ( ) {
    struct IDAFontStyle * _result;
    HRESULT _hr = raw_Bold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAFontStylePtr(_result, false);
}

#pragma implementation_key(213)
inline DAnim::IDAFontStylePtr DAnim::IDAFontStyle::Italic ( ) {
    struct IDAFontStyle * _result;
    HRESULT _hr = raw_Italic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAFontStylePtr(_result, false);
}

#pragma implementation_key(214)
inline DAnim::IDAFontStylePtr DAnim::IDAFontStyle::Underline ( ) {
    struct IDAFontStyle * _result;
    HRESULT _hr = raw_Underline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAFontStylePtr(_result, false);
}

#pragma implementation_key(215)
inline DAnim::IDAFontStylePtr DAnim::IDAFontStyle::Strikethrough ( ) {
    struct IDAFontStyle * _result;
    HRESULT _hr = raw_Strikethrough(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAFontStylePtr(_result, false);
}

#pragma implementation_key(216)
inline DAnim::IDAFontStylePtr DAnim::IDAFontStyle::AntiAliasing ( double aaStyle_0 ) {
    struct IDAFontStyle * _result;
    HRESULT _hr = raw_AntiAliasing(aaStyle_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAFontStylePtr(_result, false);
}

#pragma implementation_key(217)
inline DAnim::IDAFontStylePtr DAnim::IDAFontStyle::Color ( struct IDAColor * col_0 ) {
    struct IDAFontStyle * _result;
    HRESULT _hr = raw_Color(col_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAFontStylePtr(_result, false);
}

#pragma implementation_key(218)
inline DAnim::IDAFontStylePtr DAnim::IDAFontStyle::FamilyAnim ( struct IDAString * face_0 ) {
    struct IDAFontStyle * _result;
    HRESULT _hr = raw_FamilyAnim(face_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAFontStylePtr(_result, false);
}

#pragma implementation_key(219)
inline DAnim::IDAFontStylePtr DAnim::IDAFontStyle::Family ( _bstr_t face_0 ) {
    struct IDAFontStyle * _result;
    HRESULT _hr = raw_Family(face_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAFontStylePtr(_result, false);
}

#pragma implementation_key(220)
inline DAnim::IDAFontStylePtr DAnim::IDAFontStyle::SizeAnim ( struct IDANumber * size_0 ) {
    struct IDAFontStyle * _result;
    HRESULT _hr = raw_SizeAnim(size_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAFontStylePtr(_result, false);
}

#pragma implementation_key(221)
inline DAnim::IDAFontStylePtr DAnim::IDAFontStyle::Size ( double size_0 ) {
    struct IDAFontStyle * _result;
    HRESULT _hr = raw_Size(size_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAFontStylePtr(_result, false);
}

#pragma implementation_key(222)
inline DAnim::IDAFontStylePtr DAnim::IDAFontStyle::Weight ( double weight_0 ) {
    struct IDAFontStyle * _result;
    HRESULT _hr = raw_Weight(weight_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAFontStylePtr(_result, false);
}

#pragma implementation_key(223)
inline DAnim::IDAFontStylePtr DAnim::IDAFontStyle::WeightAnim ( struct IDANumber * weight_0 ) {
    struct IDAFontStyle * _result;
    HRESULT _hr = raw_WeightAnim(weight_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAFontStylePtr(_result, false);
}

//
// interface IDAPath2 wrapper method implementations
//

#pragma implementation_key(224)
inline DAnim::IDAPath2Ptr DAnim::IDAPath2::Transform ( struct IDATransform2 * xf_0 ) {
    struct IDAPath2 * _result;
    HRESULT _hr = raw_Transform(xf_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAPath2Ptr(_result, false);
}

#pragma implementation_key(225)
inline DAnim::IDABbox2Ptr DAnim::IDAPath2::BoundingBox ( struct IDALineStyle * style_0 ) {
    struct IDABbox2 * _result;
    HRESULT _hr = raw_BoundingBox(style_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDABbox2Ptr(_result, false);
}

#pragma implementation_key(226)
inline DAnim::IDAImagePtr DAnim::IDAPath2::Fill ( struct IDALineStyle * border_0, struct IDAImage * fill_1 ) {
    struct IDAImage * _result;
    HRESULT _hr = raw_Fill(border_0, fill_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

#pragma implementation_key(227)
inline DAnim::IDAImagePtr DAnim::IDAPath2::Draw ( struct IDALineStyle * border_0 ) {
    struct IDAImage * _result;
    HRESULT _hr = raw_Draw(border_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

#pragma implementation_key(228)
inline DAnim::IDAPath2Ptr DAnim::IDAPath2::Close ( ) {
    struct IDAPath2 * _result;
    HRESULT _hr = raw_Close(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAPath2Ptr(_result, false);
}

//
// interface IDA2Behavior wrapper method implementations
//

#pragma implementation_key(229)
inline HRESULT DAnim::IDA2Behavior::SwitchToEx ( struct IDABehavior * newBvr, unsigned long dwFlags ) {
    HRESULT _hr = raw_SwitchToEx(newBvr, dwFlags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(230)
inline DAnim::IDABehaviorPtr DAnim::IDA2Behavior::ApplyPreference ( _bstr_t pref, const _variant_t & val ) {
    struct IDABehavior * _result;
    HRESULT _hr = raw_ApplyPreference(pref, val, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDABehaviorPtr(_result, false);
}

#pragma implementation_key(231)
inline DAnim::IDABehaviorPtr DAnim::IDA2Behavior::ExtendedAttrib ( _bstr_t arg1, const _variant_t & arg2 ) {
    struct IDABehavior * _result;
    HRESULT _hr = raw_ExtendedAttrib(arg1, arg2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDABehaviorPtr(_result, false);
}

//
// interface IDAImport wrapper method implementations
//

#pragma implementation_key(232)
inline long DAnim::IDAImport::ImportStatus ( ) {
    long _result;
    HRESULT _hr = raw_ImportStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(233)
inline HRESULT DAnim::IDAImport::ImportCancel ( ) {
    HRESULT _hr = raw_ImportCancel();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(234)
inline float DAnim::IDAImport::GetImportPriority ( ) {
    float _result;
    HRESULT _hr = get_ImportPriority(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(235)
inline void DAnim::IDAImport::PutImportPriority ( float prio ) {
    HRESULT _hr = put_ImportPriority(prio);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IDAModifiableBehavior wrapper method implementations
//

#pragma implementation_key(236)
inline DAnim::IDABehaviorPtr DAnim::IDAModifiableBehavior::GetCurrentBehavior ( ) {
    struct IDABehavior * _result;
    HRESULT _hr = get_CurrentBehavior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDABehaviorPtr(_result, false);
}

#pragma implementation_key(237)
inline void DAnim::IDAModifiableBehavior::PutCurrentBehavior ( const _variant_t & bvr ) {
    HRESULT _hr = put_CurrentBehavior(bvr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(238)
inline HRESULT DAnim::IDAModifiableBehavior::SwitchToEx ( struct IDABehavior * newBvr, unsigned long dwFlags ) {
    HRESULT _hr = raw_SwitchToEx(newBvr, dwFlags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IDAMontage wrapper method implementations
//

#pragma implementation_key(239)
inline DAnim::IDAImagePtr DAnim::IDAMontage::Render ( ) {
    struct IDAImage * _result;
    HRESULT _hr = raw_Render(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

//
// interface IDAVector2 wrapper method implementations
//

#pragma implementation_key(240)
inline DAnim::IDANumberPtr DAnim::IDAVector2::GetLength ( ) {
    struct IDANumber * _result;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(241)
inline DAnim::IDANumberPtr DAnim::IDAVector2::GetLengthSquared ( ) {
    struct IDANumber * _result;
    HRESULT _hr = get_LengthSquared(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(242)
inline DAnim::IDAVector2Ptr DAnim::IDAVector2::Normalize ( ) {
    struct IDAVector2 * _result;
    HRESULT _hr = raw_Normalize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAVector2Ptr(_result, false);
}

#pragma implementation_key(243)
inline DAnim::IDAVector2Ptr DAnim::IDAVector2::MulAnim ( struct IDANumber * scalar_0 ) {
    struct IDAVector2 * _result;
    HRESULT _hr = raw_MulAnim(scalar_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAVector2Ptr(_result, false);
}

#pragma implementation_key(244)
inline DAnim::IDAVector2Ptr DAnim::IDAVector2::Mul ( double scalar_0 ) {
    struct IDAVector2 * _result;
    HRESULT _hr = raw_Mul(scalar_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAVector2Ptr(_result, false);
}

#pragma implementation_key(245)
inline DAnim::IDAVector2Ptr DAnim::IDAVector2::DivAnim ( struct IDANumber * scalar_0 ) {
    struct IDAVector2 * _result;
    HRESULT _hr = raw_DivAnim(scalar_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAVector2Ptr(_result, false);
}

#pragma implementation_key(246)
inline DAnim::IDAVector2Ptr DAnim::IDAVector2::Div ( double scalar_0 ) {
    struct IDAVector2 * _result;
    HRESULT _hr = raw_Div(scalar_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAVector2Ptr(_result, false);
}

#pragma implementation_key(247)
inline DAnim::IDANumberPtr DAnim::IDAVector2::GetX ( ) {
    struct IDANumber * _result;
    HRESULT _hr = get_X(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(248)
inline DAnim::IDANumberPtr DAnim::IDAVector2::GetY ( ) {
    struct IDANumber * _result;
    HRESULT _hr = get_Y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(249)
inline DAnim::IDANumberPtr DAnim::IDAVector2::GetPolarCoordAngle ( ) {
    struct IDANumber * _result;
    HRESULT _hr = get_PolarCoordAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(250)
inline DAnim::IDANumberPtr DAnim::IDAVector2::GetPolarCoordLength ( ) {
    struct IDANumber * _result;
    HRESULT _hr = get_PolarCoordLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(251)
inline DAnim::IDAVector2Ptr DAnim::IDAVector2::Transform ( struct IDATransform2 * xf_0 ) {
    struct IDAVector2 * _result;
    HRESULT _hr = raw_Transform(xf_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAVector2Ptr(_result, false);
}

//
// interface IDAVector3 wrapper method implementations
//

#pragma implementation_key(252)
inline DAnim::IDANumberPtr DAnim::IDAVector3::GetLength ( ) {
    struct IDANumber * _result;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(253)
inline DAnim::IDANumberPtr DAnim::IDAVector3::GetLengthSquared ( ) {
    struct IDANumber * _result;
    HRESULT _hr = get_LengthSquared(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(254)
inline DAnim::IDAVector3Ptr DAnim::IDAVector3::Normalize ( ) {
    struct IDAVector3 * _result;
    HRESULT _hr = raw_Normalize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAVector3Ptr(_result, false);
}

#pragma implementation_key(255)
inline DAnim::IDAVector3Ptr DAnim::IDAVector3::MulAnim ( struct IDANumber * scalar_0 ) {
    struct IDAVector3 * _result;
    HRESULT _hr = raw_MulAnim(scalar_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAVector3Ptr(_result, false);
}

#pragma implementation_key(256)
inline DAnim::IDAVector3Ptr DAnim::IDAVector3::Mul ( double scalar_0 ) {
    struct IDAVector3 * _result;
    HRESULT _hr = raw_Mul(scalar_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAVector3Ptr(_result, false);
}

#pragma implementation_key(257)
inline DAnim::IDAVector3Ptr DAnim::IDAVector3::DivAnim ( struct IDANumber * scalar_0 ) {
    struct IDAVector3 * _result;
    HRESULT _hr = raw_DivAnim(scalar_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAVector3Ptr(_result, false);
}

#pragma implementation_key(258)
inline DAnim::IDAVector3Ptr DAnim::IDAVector3::Div ( double scalar_0 ) {
    struct IDAVector3 * _result;
    HRESULT _hr = raw_Div(scalar_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAVector3Ptr(_result, false);
}

#pragma implementation_key(259)
inline DAnim::IDANumberPtr DAnim::IDAVector3::GetX ( ) {
    struct IDANumber * _result;
    HRESULT _hr = get_X(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(260)
inline DAnim::IDANumberPtr DAnim::IDAVector3::GetY ( ) {
    struct IDANumber * _result;
    HRESULT _hr = get_Y(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(261)
inline DAnim::IDANumberPtr DAnim::IDAVector3::GetZ ( ) {
    struct IDANumber * _result;
    HRESULT _hr = get_Z(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(262)
inline DAnim::IDANumberPtr DAnim::IDAVector3::GetSphericalCoordXYAngle ( ) {
    struct IDANumber * _result;
    HRESULT _hr = get_SphericalCoordXYAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(263)
inline DAnim::IDANumberPtr DAnim::IDAVector3::GetSphericalCoordYZAngle ( ) {
    struct IDANumber * _result;
    HRESULT _hr = get_SphericalCoordYZAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(264)
inline DAnim::IDANumberPtr DAnim::IDAVector3::GetSphericalCoordLength ( ) {
    struct IDANumber * _result;
    HRESULT _hr = get_SphericalCoordLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(265)
inline DAnim::IDAVector3Ptr DAnim::IDAVector3::Transform ( struct IDATransform3 * xf_0 ) {
    struct IDAVector3 * _result;
    HRESULT _hr = raw_Transform(xf_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAVector3Ptr(_result, false);
}

//
// interface IDAPair wrapper method implementations
//

#pragma implementation_key(266)
inline DAnim::IDABehaviorPtr DAnim::IDAPair::GetFirst ( ) {
    struct IDABehavior * _result;
    HRESULT _hr = get_First(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDABehaviorPtr(_result, false);
}

#pragma implementation_key(267)
inline DAnim::IDABehaviorPtr DAnim::IDAPair::GetSecond ( ) {
    struct IDABehavior * _result;
    HRESULT _hr = get_Second(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDABehaviorPtr(_result, false);
}

//
// interface IDAArray wrapper method implementations
//

#pragma implementation_key(268)
inline DAnim::IDABehaviorPtr DAnim::IDAArray::NthAnim ( struct IDANumber * index_0 ) {
    struct IDABehavior * _result;
    HRESULT _hr = raw_NthAnim(index_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDABehaviorPtr(_result, false);
}

#pragma implementation_key(269)
inline DAnim::IDANumberPtr DAnim::IDAArray::Length ( ) {
    struct IDANumber * _result;
    HRESULT _hr = raw_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

//
// interface IDATuple wrapper method implementations
//

#pragma implementation_key(270)
inline DAnim::IDABehaviorPtr DAnim::IDATuple::Nth ( long index_0 ) {
    struct IDABehavior * _result;
    HRESULT _hr = raw_Nth(index_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDABehaviorPtr(_result, false);
}

#pragma implementation_key(271)
inline long DAnim::IDATuple::GetLength ( ) {
    long _result;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IDAUserData wrapper method implementations
//

#pragma implementation_key(272)
inline IUnknownPtr DAnim::IDAUserData::GetData ( ) {
    IUnknown * _result;
    HRESULT _hr = get_Data(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IDA2Geometry wrapper method implementations
//

#pragma implementation_key(273)
inline DAnim::IDAGeometryPtr DAnim::IDA2Geometry::AddPickData ( IUnknown * id_0, VARIANT_BOOL ignoresOcclusion_1 ) {
    struct IDAGeometry * _result;
    HRESULT _hr = raw_AddPickData(id_0, ignoresOcclusion_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAGeometryPtr(_result, false);
}

#pragma implementation_key(274)
inline DAnim::IDAGeometryPtr DAnim::IDA2Geometry::Shadow ( struct IDAGeometry * geoContainingLights_0, struct IDAPoint3 * planePoint_1, struct IDAVector3 * planeNormal_2 ) {
    struct IDAGeometry * _result;
    HRESULT _hr = raw_Shadow(geoContainingLights_0, planePoint_1, planeNormal_2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAGeometryPtr(_result, false);
}

#pragma implementation_key(275)
inline DAnim::IDAGeometryPtr DAnim::IDA2Geometry::LightRangeAnim ( struct IDANumber * range_0 ) {
    struct IDAGeometry * _result;
    HRESULT _hr = raw_LightRangeAnim(range_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAGeometryPtr(_result, false);
}

#pragma implementation_key(276)
inline DAnim::IDAGeometryPtr DAnim::IDA2Geometry::LightRange ( double range_0 ) {
    struct IDAGeometry * _result;
    HRESULT _hr = raw_LightRange(range_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAGeometryPtr(_result, false);
}

#pragma implementation_key(277)
inline DAnim::IDAGeometryPtr DAnim::IDA2Geometry::BlendTextureDiffuse ( struct IDABoolean * blended_0 ) {
    struct IDAGeometry * _result;
    HRESULT _hr = raw_BlendTextureDiffuse(blended_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAGeometryPtr(_result, false);
}

#pragma implementation_key(278)
inline DAnim::IDAGeometryPtr DAnim::IDA2Geometry::AmbientColor ( struct IDAColor * color_0 ) {
    struct IDAGeometry * _result;
    HRESULT _hr = raw_AmbientColor(color_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAGeometryPtr(_result, false);
}

#pragma implementation_key(279)
inline DAnim::IDAGeometryPtr DAnim::IDA2Geometry::D3DRMTexture ( IUnknown * rmTex_0 ) {
    struct IDAGeometry * _result;
    HRESULT _hr = raw_D3DRMTexture(rmTex_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAGeometryPtr(_result, false);
}

#pragma implementation_key(280)
inline DAnim::IDAGeometryPtr DAnim::IDA2Geometry::ModelClip ( struct IDAPoint3 * planePt_0, struct IDAVector3 * planeVec_1 ) {
    struct IDAGeometry * _result;
    HRESULT _hr = raw_ModelClip(planePt_0, planeVec_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAGeometryPtr(_result, false);
}

#pragma implementation_key(281)
inline DAnim::IDAGeometryPtr DAnim::IDA2Geometry::Lighting ( struct IDABoolean * lighting_0 ) {
    struct IDAGeometry * _result;
    HRESULT _hr = raw_Lighting(lighting_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAGeometryPtr(_result, false);
}

#pragma implementation_key(282)
inline DAnim::IDAGeometryPtr DAnim::IDA2Geometry::TextureImage ( struct IDAImage * texture_0 ) {
    struct IDAGeometry * _result;
    HRESULT _hr = raw_TextureImage(texture_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAGeometryPtr(_result, false);
}

//
// interface IDA2Image wrapper method implementations
//

#pragma implementation_key(283)
inline DAnim::IDAImagePtr DAnim::IDA2Image::AddPickData ( IUnknown * id_0, VARIANT_BOOL ignoresOcclusion_1 ) {
    struct IDAImage * _result;
    HRESULT _hr = raw_AddPickData(id_0, ignoresOcclusion_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

#pragma implementation_key(284)
inline DAnim::IDAImagePtr DAnim::IDA2Image::RenderResolution ( long width_0, long height_1 ) {
    struct IDAImage * _result;
    HRESULT _hr = raw_RenderResolution(width_0, height_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

#pragma implementation_key(285)
inline DAnim::IDAImagePtr DAnim::IDA2Image::ImageQuality ( unsigned long dwQualityFlags_0 ) {
    struct IDAImage * _result;
    HRESULT _hr = raw_ImageQuality(dwQualityFlags_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

#pragma implementation_key(286)
inline DAnim::IDAImagePtr DAnim::IDA2Image::ColorKey ( struct IDAColor * colorKey_0 ) {
    struct IDAImage * _result;
    HRESULT _hr = raw_ColorKey(colorKey_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

//
// interface IDA2FontStyle wrapper method implementations
//

#pragma implementation_key(287)
inline DAnim::IDAFontStylePtr DAnim::IDA2FontStyle::TransformCharacters ( struct IDATransform2 * transform_0 ) {
    struct IDAFontStyle * _result;
    HRESULT _hr = raw_TransformCharacters(transform_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAFontStylePtr(_result, false);
}

//
// interface IDA2LineStyle wrapper method implementations
//

#pragma implementation_key(288)
inline DAnim::IDALineStylePtr DAnim::IDA2LineStyle::DashStyle ( unsigned long ds_enum_0 ) {
    struct IDALineStyle * _result;
    HRESULT _hr = raw_DashStyle(ds_enum_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDALineStylePtr(_result, false);
}

#pragma implementation_key(289)
inline DAnim::IDALineStylePtr DAnim::IDA2LineStyle::MiterLimit ( double mtrlim_0 ) {
    struct IDALineStyle * _result;
    HRESULT _hr = raw_MiterLimit(mtrlim_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDALineStylePtr(_result, false);
}

#pragma implementation_key(290)
inline DAnim::IDALineStylePtr DAnim::IDA2LineStyle::MiterLimitAnim ( struct IDANumber * mtrlim_0 ) {
    struct IDALineStyle * _result;
    HRESULT _hr = raw_MiterLimitAnim(mtrlim_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDALineStylePtr(_result, false);
}

#pragma implementation_key(291)
inline DAnim::IDALineStylePtr DAnim::IDA2LineStyle::JoinStyle ( unsigned long js_enum_0 ) {
    struct IDALineStyle * _result;
    HRESULT _hr = raw_JoinStyle(js_enum_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDALineStylePtr(_result, false);
}

#pragma implementation_key(292)
inline DAnim::IDALineStylePtr DAnim::IDA2LineStyle::EndStyle ( unsigned long es_enum_0 ) {
    struct IDALineStyle * _result;
    HRESULT _hr = raw_EndStyle(es_enum_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDALineStylePtr(_result, false);
}

//
// interface IDA2Event wrapper method implementations
//

#pragma implementation_key(293)
inline DAnim::IDAEventPtr DAnim::IDA2Event::NotifyScript ( _bstr_t scriptlet_0 ) {
    struct IDAEvent * _result;
    HRESULT _hr = raw_NotifyScript(scriptlet_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAEventPtr(_result, false);
}

//
// interface IDA2Array wrapper method implementations
//

#pragma implementation_key(294)
inline long DAnim::IDA2Array::AddElement ( struct IDABehavior * b_0, unsigned long flag_1 ) {
    long _result;
    HRESULT _hr = raw_AddElement(b_0, flag_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(295)
inline HRESULT DAnim::IDA2Array::RemoveElement ( long i_0 ) {
    HRESULT _hr = raw_RemoveElement(i_0);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IDA2Color wrapper method implementations
//

#pragma implementation_key(296)
inline DAnim::IDA2ColorPtr DAnim::IDA2Color::AnimateProperty ( _bstr_t propertyPath_0, _bstr_t scriptingLanguage_1, VARIANT_BOOL invokeAsMethod_2, double minUpdateInterval_3 ) {
    struct IDA2Color * _result;
    HRESULT _hr = raw_AnimateProperty(propertyPath_0, scriptingLanguage_1, invokeAsMethod_2, minUpdateInterval_3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDA2ColorPtr(_result, false);
}

//
// interface IDA3Geometry wrapper method implementations
//

#pragma implementation_key(297)
inline DAnim::IDAGeometryPtr DAnim::IDA3Geometry::Billboard ( struct IDAVector3 * axis_0 ) {
    struct IDAGeometry * _result;
    HRESULT _hr = raw_Billboard(axis_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAGeometryPtr(_result, false);
}

//
// interface IDA3Image wrapper method implementations
//

#pragma implementation_key(298)
inline DAnim::IDAImagePtr DAnim::IDA3Image::TransformColorRGB ( struct IDATransform3 * xf_0 ) {
    struct IDAImage * _result;
    HRESULT _hr = raw_TransformColorRGB(xf_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

//
// interface IDA3Array wrapper method implementations
//

#pragma implementation_key(299)
inline HRESULT DAnim::IDA3Array::SetElement ( long index, struct IDABehavior * b, long flag ) {
    HRESULT _hr = raw_SetElement(index, b, flag);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(300)
inline DAnim::IDABehaviorPtr DAnim::IDA3Array::GetElement ( long index ) {
    struct IDABehavior * _result;
    HRESULT _hr = raw_GetElement(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDABehaviorPtr(_result, false);
}

//
// interface IDA2View wrapper method implementations
//

#pragma implementation_key(301)
inline long DAnim::IDA2View::QueryHitPointEx ( long s, unsigned long * cookies, double * points, struct tagRECT * prcBounds, struct tagPOINT ptLoc ) {
    long _result;
    HRESULT _hr = raw_QueryHitPointEx(s, cookies, points, prcBounds, ptLoc, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(302)
inline HRESULT DAnim::IDA2View::StartModelEx ( struct IDAImage * pImage, struct IDASound * pSound, double startTime, unsigned long dwFlags ) {
    HRESULT _hr = raw_StartModelEx(pImage, pSound, startTime, dwFlags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(303)
inline HRESULT DAnim::IDA2View::GetDDD3DRM ( IUnknown * * directDraw, IUnknown * * d3drm ) {
    HRESULT _hr = raw_GetDDD3DRM(directDraw, d3drm);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(304)
inline HRESULT DAnim::IDA2View::GetRMDevice ( IUnknown * * d3drmDevice, unsigned long * sequenceNumber ) {
    HRESULT _hr = raw_GetRMDevice(d3drmDevice, sequenceNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(305)
inline long DAnim::IDA2View::GetInvalidatedRects ( unsigned long Flags, long s, struct tagRECT * pRects ) {
    long _result;
    HRESULT _hr = raw_GetInvalidatedRects(Flags, s, pRects, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IDA3View wrapper method implementations
//

#pragma implementation_key(306)
inline HRESULT DAnim::IDA3View::Pause ( ) {
    HRESULT _hr = raw_Pause();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(307)
inline HRESULT DAnim::IDA3View::Resume ( ) {
    HRESULT _hr = raw_Resume();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(308)
inline HRESULT DAnim::IDA3View::OnMouseLeave ( double when ) {
    HRESULT _hr = raw_OnMouseLeave(when);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(309)
inline wireHWND DAnim::IDA3View::GetWindow2 ( ) {
    wireHWND _result;
    HRESULT _hr = get_Window2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(310)
inline void DAnim::IDA3View::PutWindow2 ( wireHWND hwnd ) {
    HRESULT _hr = put_Window2(hwnd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// dispinterface _IDAViewEvents wrapper method implementations
//

#pragma implementation_key(311)
inline HRESULT DAnim::_IDAViewEvents::Start ( ) {
    return _com_dispatch_method(this, 0x2001, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(312)
inline HRESULT DAnim::_IDAViewEvents::Stop ( ) {
    return _com_dispatch_method(this, 0x2002, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(313)
inline HRESULT DAnim::_IDAViewEvents::OnMouseMove ( double when, long xPos, long yPos, int modifiers ) {
    return _com_dispatch_method(this, 0x2003, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0005\x0003\x0003\x0003", when, xPos, yPos, modifiers);
}

#pragma implementation_key(314)
inline HRESULT DAnim::_IDAViewEvents::OnMouseButton ( double when, long xPos, long yPos, int button, VARIANT_BOOL bPressed, int modifiers ) {
    return _com_dispatch_method(this, 0x2004, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0005\x0003\x0003\x0003\x000b\x0003", when, xPos, yPos, button, bPressed, modifiers);
}

#pragma implementation_key(315)
inline HRESULT DAnim::_IDAViewEvents::OnKey ( double when, long key, VARIANT_BOOL bPressed, int modifiers ) {
    return _com_dispatch_method(this, 0x2005, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0005\x0003\x000b\x0003", when, key, bPressed, modifiers);
}

#pragma implementation_key(316)
inline HRESULT DAnim::_IDAViewEvents::OnFocus ( VARIANT_BOOL bHasFocus ) {
    return _com_dispatch_method(this, 0x2006, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x000b", bHasFocus);
}

#pragma implementation_key(317)
inline HRESULT DAnim::_IDAViewEvents::Pause ( ) {
    return _com_dispatch_method(this, 0x2007, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(318)
inline HRESULT DAnim::_IDAViewEvents::Resume ( ) {
    return _com_dispatch_method(this, 0x2008, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(319)
inline HRESULT DAnim::_IDAViewEvents::Error ( long HResult, _bstr_t ErrorString ) {
    return _com_dispatch_method(this, 0x2009, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0008", HResult, (BSTR)ErrorString);
}

//
// interface IDASite wrapper method implementations
//

#pragma implementation_key(320)
inline HRESULT DAnim::IDASite::SetStatusText ( _bstr_t StatusText ) {
    HRESULT _hr = raw_SetStatusText(StatusText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(321)
inline HRESULT DAnim::IDASite::ReportError ( HRESULT hr, _bstr_t ErrorText ) {
    HRESULT _hr = raw_ReportError(hr, ErrorText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(322)
inline HRESULT DAnim::IDASite::ReportGC ( VARIANT_BOOL bStarting ) {
    HRESULT _hr = raw_ReportGC(bStarting);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IDAImportationResult wrapper method implementations
//

#pragma implementation_key(323)
inline DAnim::IDAImagePtr DAnim::IDAImportationResult::GetImage ( ) {
    struct IDAImage * _result;
    HRESULT _hr = get_Image(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

#pragma implementation_key(324)
inline DAnim::IDASoundPtr DAnim::IDAImportationResult::GetSound ( ) {
    struct IDASound * _result;
    HRESULT _hr = get_Sound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDASoundPtr(_result, false);
}

#pragma implementation_key(325)
inline DAnim::IDAGeometryPtr DAnim::IDAImportationResult::GetGeometry ( ) {
    struct IDAGeometry * _result;
    HRESULT _hr = get_Geometry(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAGeometryPtr(_result, false);
}

#pragma implementation_key(326)
inline DAnim::IDANumberPtr DAnim::IDAImportationResult::GetDuration ( ) {
    struct IDANumber * _result;
    HRESULT _hr = get_Duration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(327)
inline DAnim::IDAEventPtr DAnim::IDAImportationResult::GetCompletionEvent ( ) {
    struct IDAEvent * _result;
    HRESULT _hr = get_CompletionEvent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAEventPtr(_result, false);
}

#pragma implementation_key(328)
inline DAnim::IDANumberPtr DAnim::IDAImportationResult::GetProgress ( ) {
    struct IDANumber * _result;
    HRESULT _hr = get_Progress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(329)
inline DAnim::IDANumberPtr DAnim::IDAImportationResult::GetSize ( ) {
    struct IDANumber * _result;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

//
// interface IDADXTransformResult wrapper method implementations
//

#pragma implementation_key(330)
inline DAnim::IDABehaviorPtr DAnim::IDADXTransformResult::GetOutputBvr ( ) {
    struct IDABehavior * _result;
    HRESULT _hr = get_OutputBvr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDABehaviorPtr(_result, false);
}

#pragma implementation_key(331)
inline IDispatchPtr DAnim::IDADXTransformResult::GetTheTransform ( ) {
    IDispatch * _result;
    HRESULT _hr = get_TheTransform(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(332)
inline HRESULT DAnim::IDADXTransformResult::PutBvrAsProperty ( _bstr_t property, struct IDABehavior * bvr ) {
    HRESULT _hr = raw_PutBvrAsProperty(property, bvr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IDAStatics wrapper method implementations
//

#pragma implementation_key(333)
inline _bstr_t DAnim::IDAStatics::GetVersionString ( ) {
    BSTR _result;
    HRESULT _hr = get_VersionString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(334)
inline DAnim::IDASitePtr DAnim::IDAStatics::GetSite ( ) {
    struct IDASite * _result;
    HRESULT _hr = get_Site(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDASitePtr(_result, false);
}

#pragma implementation_key(335)
inline void DAnim::IDAStatics::PutSite ( struct IDASite * pSite ) {
    HRESULT _hr = put_Site(pSite);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(336)
inline void DAnim::IDAStatics::PutClientSite ( struct IOleClientSite * pClientSite ) {
    HRESULT _hr = put_ClientSite(pClientSite);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(337)
inline DAnim::IOleClientSitePtr DAnim::IDAStatics::GetClientSite ( ) {
    struct IOleClientSite * _result;
    HRESULT _hr = get_ClientSite(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IOleClientSitePtr(_result, false);
}

#pragma implementation_key(338)
inline void DAnim::IDAStatics::PutPixelConstructionMode ( VARIANT_BOOL bMode ) {
    HRESULT _hr = put_PixelConstructionMode(bMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(339)
inline VARIANT_BOOL DAnim::IDAStatics::GetPixelConstructionMode ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PixelConstructionMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(340)
inline HRESULT DAnim::IDAStatics::TriggerEvent ( struct IDAEvent * event, struct IDABehavior * Data ) {
    HRESULT _hr = raw_TriggerEvent(event, Data);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(341)
inline DAnim::IDADrawingSurfacePtr DAnim::IDAStatics::NewDrawingSurface ( ) {
    struct IDADrawingSurface * _result;
    HRESULT _hr = raw_NewDrawingSurface(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDADrawingSurfacePtr(_result, false);
}

#pragma implementation_key(342)
inline DAnim::IDAImportationResultPtr DAnim::IDAStatics::ImportMovie ( _bstr_t url ) {
    struct IDAImportationResult * _result;
    HRESULT _hr = raw_ImportMovie(url, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImportationResultPtr(_result, false);
}

#pragma implementation_key(343)
inline DAnim::IDAImportationResultPtr DAnim::IDAStatics::ImportMovieAsync ( _bstr_t url, struct IDAImage * pImageStandIn, struct IDASound * pSoundStandIn ) {
    struct IDAImportationResult * _result;
    HRESULT _hr = raw_ImportMovieAsync(url, pImageStandIn, pSoundStandIn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImportationResultPtr(_result, false);
}

#pragma implementation_key(344)
inline DAnim::IDAImagePtr DAnim::IDAStatics::ImportImage ( _bstr_t url ) {
    struct IDAImage * _result;
    HRESULT _hr = raw_ImportImage(url, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

#pragma implementation_key(345)
inline DAnim::IDAImportationResultPtr DAnim::IDAStatics::ImportImageAsync ( _bstr_t url, struct IDAImage * pImageStandIn ) {
    struct IDAImportationResult * _result;
    HRESULT _hr = raw_ImportImageAsync(url, pImageStandIn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImportationResultPtr(_result, false);
}

#pragma implementation_key(346)
inline DAnim::IDAImagePtr DAnim::IDAStatics::ImportImageColorKey ( _bstr_t url, unsigned char colorKeyRed, unsigned char colorKeyGreen, unsigned char colorKeyBlue ) {
    struct IDAImage * _result;
    HRESULT _hr = raw_ImportImageColorKey(url, colorKeyRed, colorKeyGreen, colorKeyBlue, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

#pragma implementation_key(347)
inline DAnim::IDAImportationResultPtr DAnim::IDAStatics::ImportImageAsyncColorKey ( _bstr_t url, struct IDAImage * pImageStandIn, unsigned char colorKeyRed, unsigned char colorKeyGreen, unsigned char colorKeyBlue ) {
    struct IDAImportationResult * _result;
    HRESULT _hr = raw_ImportImageAsyncColorKey(url, pImageStandIn, colorKeyRed, colorKeyGreen, colorKeyBlue, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImportationResultPtr(_result, false);
}

#pragma implementation_key(348)
inline DAnim::IDAImportationResultPtr DAnim::IDAStatics::ImportSound ( _bstr_t url ) {
    struct IDAImportationResult * _result;
    HRESULT _hr = raw_ImportSound(url, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImportationResultPtr(_result, false);
}

#pragma implementation_key(349)
inline DAnim::IDAImportationResultPtr DAnim::IDAStatics::ImportSoundAsync ( _bstr_t url, struct IDASound * pSoundStandIn ) {
    struct IDAImportationResult * _result;
    HRESULT _hr = raw_ImportSoundAsync(url, pSoundStandIn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImportationResultPtr(_result, false);
}

#pragma implementation_key(350)
inline DAnim::IDAGeometryPtr DAnim::IDAStatics::ImportGeometry ( _bstr_t url ) {
    struct IDAGeometry * _result;
    HRESULT _hr = raw_ImportGeometry(url, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAGeometryPtr(_result, false);
}

#pragma implementation_key(351)
inline DAnim::IDAImportationResultPtr DAnim::IDAStatics::ImportGeometryAsync ( _bstr_t url, struct IDAGeometry * pGeoStandIn ) {
    struct IDAImportationResult * _result;
    HRESULT _hr = raw_ImportGeometryAsync(url, pGeoStandIn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImportationResultPtr(_result, false);
}

#pragma implementation_key(352)
inline DAnim::IDAImagePtr DAnim::IDAStatics::ImportDirectDrawSurface ( IUnknown * dds, struct IDAEvent * updateEvent ) {
    struct IDAImage * _result;
    HRESULT _hr = raw_ImportDirectDrawSurface(dds, updateEvent, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

#pragma implementation_key(353)
inline DAnim::IDABehaviorPtr DAnim::IDAStatics::Cond ( struct IDABoolean * c, struct IDABehavior * i, struct IDABehavior * e ) {
    struct IDABehavior * _result;
    HRESULT _hr = raw_Cond(c, i, e, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDABehaviorPtr(_result, false);
}

#pragma implementation_key(354)
inline DAnim::IDAArrayPtr DAnim::IDAStatics::DAArrayEx ( long s, struct IDABehavior * * pBvrs ) {
    struct IDAArray * _result;
    HRESULT _hr = raw_DAArrayEx(s, pBvrs, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAArrayPtr(_result, false);
}

#pragma implementation_key(355)
inline DAnim::IDAArrayPtr DAnim::IDAStatics::DAArray ( const _variant_t & bvrs ) {
    struct IDAArray * _result;
    HRESULT _hr = raw_DAArray(bvrs, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAArrayPtr(_result, false);
}

#pragma implementation_key(356)
inline DAnim::IDATuplePtr DAnim::IDAStatics::DATupleEx ( long s, struct IDABehavior * * pBvrs ) {
    struct IDATuple * _result;
    HRESULT _hr = raw_DATupleEx(s, pBvrs, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATuplePtr(_result, false);
}

#pragma implementation_key(357)
inline DAnim::IDATuplePtr DAnim::IDAStatics::DATuple ( const _variant_t & bvrs ) {
    struct IDATuple * _result;
    HRESULT _hr = raw_DATuple(bvrs, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATuplePtr(_result, false);
}

#pragma implementation_key(358)
inline DAnim::IDABehaviorPtr DAnim::IDAStatics::ModifiableBehavior ( struct IDABehavior * orig ) {
    struct IDABehavior * _result;
    HRESULT _hr = raw_ModifiableBehavior(orig, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDABehaviorPtr(_result, false);
}

#pragma implementation_key(359)
inline DAnim::IDAArrayPtr DAnim::IDAStatics::UninitializedArray ( struct IDAArray * typeTmp ) {
    struct IDAArray * _result;
    HRESULT _hr = raw_UninitializedArray(typeTmp, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAArrayPtr(_result, false);
}

#pragma implementation_key(360)
inline DAnim::IDATuplePtr DAnim::IDAStatics::UninitializedTuple ( struct IDATuple * typeTmp ) {
    struct IDATuple * _result;
    HRESULT _hr = raw_UninitializedTuple(typeTmp, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATuplePtr(_result, false);
}

#pragma implementation_key(361)
inline DAnim::IDANumberPtr DAnim::IDAStatics::NumberBSplineEx ( int degree, long numKnots, struct IDANumber * * knots, long numPts, struct IDANumber * * ctrlPts, long numWts, struct IDANumber * * weights, struct IDANumber * evaluator ) {
    struct IDANumber * _result;
    HRESULT _hr = raw_NumberBSplineEx(degree, numKnots, knots, numPts, ctrlPts, numWts, weights, evaluator, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(362)
inline DAnim::IDANumberPtr DAnim::IDAStatics::NumberBSpline ( int degree, const _variant_t & knots, const _variant_t & ctrlPts, const _variant_t & weights, struct IDANumber * evaluator ) {
    struct IDANumber * _result;
    HRESULT _hr = raw_NumberBSpline(degree, knots, ctrlPts, weights, evaluator, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(363)
inline DAnim::IDAPoint2Ptr DAnim::IDAStatics::Point2BSplineEx ( int degree, long numKnots, struct IDANumber * * knots, long numPts, struct IDAPoint2 * * ctrlPts, long numWts, struct IDANumber * * weights, struct IDANumber * evaluator ) {
    struct IDAPoint2 * _result;
    HRESULT _hr = raw_Point2BSplineEx(degree, numKnots, knots, numPts, ctrlPts, numWts, weights, evaluator, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAPoint2Ptr(_result, false);
}

#pragma implementation_key(364)
inline DAnim::IDAPoint2Ptr DAnim::IDAStatics::Point2BSpline ( int degree, const _variant_t & knots, const _variant_t & ctrlPts, const _variant_t & weights, struct IDANumber * evaluator ) {
    struct IDAPoint2 * _result;
    HRESULT _hr = raw_Point2BSpline(degree, knots, ctrlPts, weights, evaluator, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAPoint2Ptr(_result, false);
}

#pragma implementation_key(365)
inline DAnim::IDAPoint3Ptr DAnim::IDAStatics::Point3BSplineEx ( int degree, long numKnots, struct IDANumber * * knots, long numPts, struct IDAPoint3 * * ctrlPts, long numWts, struct IDANumber * * weights, struct IDANumber * evaluator ) {
    struct IDAPoint3 * _result;
    HRESULT _hr = raw_Point3BSplineEx(degree, numKnots, knots, numPts, ctrlPts, numWts, weights, evaluator, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAPoint3Ptr(_result, false);
}

#pragma implementation_key(366)
inline DAnim::IDAPoint3Ptr DAnim::IDAStatics::Point3BSpline ( int degree, const _variant_t & knots, const _variant_t & ctrlPts, const _variant_t & weights, struct IDANumber * evaluator ) {
    struct IDAPoint3 * _result;
    HRESULT _hr = raw_Point3BSpline(degree, knots, ctrlPts, weights, evaluator, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAPoint3Ptr(_result, false);
}

#pragma implementation_key(367)
inline DAnim::IDAVector2Ptr DAnim::IDAStatics::Vector2BSplineEx ( int degree, long numKnots, struct IDANumber * * knots, long numPts, struct IDAVector2 * * ctrlPts, long numWts, struct IDANumber * * weights, struct IDANumber * evaluator ) {
    struct IDAVector2 * _result;
    HRESULT _hr = raw_Vector2BSplineEx(degree, numKnots, knots, numPts, ctrlPts, numWts, weights, evaluator, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAVector2Ptr(_result, false);
}

#pragma implementation_key(368)
inline DAnim::IDAVector2Ptr DAnim::IDAStatics::Vector2BSpline ( int degree, const _variant_t & knots, const _variant_t & ctrlPts, const _variant_t & weights, struct IDANumber * evaluator ) {
    struct IDAVector2 * _result;
    HRESULT _hr = raw_Vector2BSpline(degree, knots, ctrlPts, weights, evaluator, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAVector2Ptr(_result, false);
}

#pragma implementation_key(369)
inline DAnim::IDAVector3Ptr DAnim::IDAStatics::Vector3BSplineEx ( int degree, long numKnots, struct IDANumber * * knots, long numPts, struct IDAVector3 * * ctrlPts, long numWts, struct IDANumber * * weights, struct IDANumber * evaluator ) {
    struct IDAVector3 * _result;
    HRESULT _hr = raw_Vector3BSplineEx(degree, numKnots, knots, numPts, ctrlPts, numWts, weights, evaluator, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAVector3Ptr(_result, false);
}

#pragma implementation_key(370)
inline DAnim::IDAVector3Ptr DAnim::IDAStatics::Vector3BSpline ( int degree, const _variant_t & knots, const _variant_t & ctrlPts, const _variant_t & weights, struct IDANumber * evaluator ) {
    struct IDAVector3 * _result;
    HRESULT _hr = raw_Vector3BSpline(degree, knots, ctrlPts, weights, evaluator, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAVector3Ptr(_result, false);
}

#pragma implementation_key(371)
inline DAnim::IDANumberPtr DAnim::IDAStatics::Pow ( struct IDANumber * a_0, struct IDANumber * b_1 ) {
    struct IDANumber * _result;
    HRESULT _hr = raw_Pow(a_0, b_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(372)
inline DAnim::IDANumberPtr DAnim::IDAStatics::Abs ( struct IDANumber * a_0 ) {
    struct IDANumber * _result;
    HRESULT _hr = raw_Abs(a_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(373)
inline DAnim::IDANumberPtr DAnim::IDAStatics::Sqrt ( struct IDANumber * a_0 ) {
    struct IDANumber * _result;
    HRESULT _hr = raw_Sqrt(a_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(374)
inline DAnim::IDANumberPtr DAnim::IDAStatics::Floor ( struct IDANumber * a_0 ) {
    struct IDANumber * _result;
    HRESULT _hr = raw_Floor(a_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(375)
inline DAnim::IDANumberPtr DAnim::IDAStatics::Round ( struct IDANumber * a_0 ) {
    struct IDANumber * _result;
    HRESULT _hr = raw_Round(a_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(376)
inline DAnim::IDANumberPtr DAnim::IDAStatics::Ceiling ( struct IDANumber * a_0 ) {
    struct IDANumber * _result;
    HRESULT _hr = raw_Ceiling(a_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(377)
inline DAnim::IDANumberPtr DAnim::IDAStatics::Asin ( struct IDANumber * a_0 ) {
    struct IDANumber * _result;
    HRESULT _hr = raw_Asin(a_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(378)
inline DAnim::IDANumberPtr DAnim::IDAStatics::Acos ( struct IDANumber * a_0 ) {
    struct IDANumber * _result;
    HRESULT _hr = raw_Acos(a_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(379)
inline DAnim::IDANumberPtr DAnim::IDAStatics::Atan ( struct IDANumber * a_0 ) {
    struct IDANumber * _result;
    HRESULT _hr = raw_Atan(a_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(380)
inline DAnim::IDANumberPtr DAnim::IDAStatics::Sin ( struct IDANumber * a_0 ) {
    struct IDANumber * _result;
    HRESULT _hr = raw_Sin(a_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(381)
inline DAnim::IDANumberPtr DAnim::IDAStatics::Cos ( struct IDANumber * a_0 ) {
    struct IDANumber * _result;
    HRESULT _hr = raw_Cos(a_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(382)
inline DAnim::IDANumberPtr DAnim::IDAStatics::Tan ( struct IDANumber * a_0 ) {
    struct IDANumber * _result;
    HRESULT _hr = raw_Tan(a_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(383)
inline DAnim::IDANumberPtr DAnim::IDAStatics::Exp ( struct IDANumber * a_0 ) {
    struct IDANumber * _result;
    HRESULT _hr = raw_Exp(a_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(384)
inline DAnim::IDANumberPtr DAnim::IDAStatics::Ln ( struct IDANumber * a_0 ) {
    struct IDANumber * _result;
    HRESULT _hr = raw_Ln(a_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(385)
inline DAnim::IDANumberPtr DAnim::IDAStatics::Log10 ( struct IDANumber * a_0 ) {
    struct IDANumber * _result;
    HRESULT _hr = raw_Log10(a_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(386)
inline DAnim::IDANumberPtr DAnim::IDAStatics::ToDegrees ( struct IDANumber * a_0 ) {
    struct IDANumber * _result;
    HRESULT _hr = raw_ToDegrees(a_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(387)
inline DAnim::IDANumberPtr DAnim::IDAStatics::ToRadians ( struct IDANumber * a_0 ) {
    struct IDANumber * _result;
    HRESULT _hr = raw_ToRadians(a_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(388)
inline DAnim::IDANumberPtr DAnim::IDAStatics::Mod ( struct IDANumber * a_0, struct IDANumber * b_1 ) {
    struct IDANumber * _result;
    HRESULT _hr = raw_Mod(a_0, b_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(389)
inline DAnim::IDANumberPtr DAnim::IDAStatics::Atan2 ( struct IDANumber * a_0, struct IDANumber * b_1 ) {
    struct IDANumber * _result;
    HRESULT _hr = raw_Atan2(a_0, b_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(390)
inline DAnim::IDANumberPtr DAnim::IDAStatics::Add ( struct IDANumber * a_0, struct IDANumber * b_1 ) {
    struct IDANumber * _result;
    HRESULT _hr = raw_Add(a_0, b_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(391)
inline DAnim::IDANumberPtr DAnim::IDAStatics::Sub ( struct IDANumber * a_0, struct IDANumber * b_1 ) {
    struct IDANumber * _result;
    HRESULT _hr = raw_Sub(a_0, b_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(392)
inline DAnim::IDANumberPtr DAnim::IDAStatics::Mul ( struct IDANumber * a_0, struct IDANumber * b_1 ) {
    struct IDANumber * _result;
    HRESULT _hr = raw_Mul(a_0, b_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(393)
inline DAnim::IDANumberPtr DAnim::IDAStatics::Div ( struct IDANumber * a_0, struct IDANumber * b_1 ) {
    struct IDANumber * _result;
    HRESULT _hr = raw_Div(a_0, b_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(394)
inline DAnim::IDABooleanPtr DAnim::IDAStatics::LT ( struct IDANumber * a_0, struct IDANumber * b_1 ) {
    struct IDABoolean * _result;
    HRESULT _hr = raw_LT(a_0, b_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDABooleanPtr(_result, false);
}

#pragma implementation_key(395)
inline DAnim::IDABooleanPtr DAnim::IDAStatics::LTE ( struct IDANumber * a_0, struct IDANumber * b_1 ) {
    struct IDABoolean * _result;
    HRESULT _hr = raw_LTE(a_0, b_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDABooleanPtr(_result, false);
}

#pragma implementation_key(396)
inline DAnim::IDABooleanPtr DAnim::IDAStatics::GT ( struct IDANumber * a_0, struct IDANumber * b_1 ) {
    struct IDABoolean * _result;
    HRESULT _hr = raw_GT(a_0, b_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDABooleanPtr(_result, false);
}

#pragma implementation_key(397)
inline DAnim::IDABooleanPtr DAnim::IDAStatics::GTE ( struct IDANumber * a_0, struct IDANumber * b_1 ) {
    struct IDABoolean * _result;
    HRESULT _hr = raw_GTE(a_0, b_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDABooleanPtr(_result, false);
}

#pragma implementation_key(398)
inline DAnim::IDABooleanPtr DAnim::IDAStatics::EQ ( struct IDANumber * a_0, struct IDANumber * b_1 ) {
    struct IDABoolean * _result;
    HRESULT _hr = raw_EQ(a_0, b_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDABooleanPtr(_result, false);
}

#pragma implementation_key(399)
inline DAnim::IDABooleanPtr DAnim::IDAStatics::NE ( struct IDANumber * a_0, struct IDANumber * b_1 ) {
    struct IDABoolean * _result;
    HRESULT _hr = raw_NE(a_0, b_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDABooleanPtr(_result, false);
}

#pragma implementation_key(400)
inline DAnim::IDANumberPtr DAnim::IDAStatics::Neg ( struct IDANumber * a_0 ) {
    struct IDANumber * _result;
    HRESULT _hr = raw_Neg(a_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(401)
inline DAnim::IDANumberPtr DAnim::IDAStatics::InterpolateAnim ( struct IDANumber * from_0, struct IDANumber * to_1, struct IDANumber * duration_2 ) {
    struct IDANumber * _result;
    HRESULT _hr = raw_InterpolateAnim(from_0, to_1, duration_2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(402)
inline DAnim::IDANumberPtr DAnim::IDAStatics::Interpolate ( double from_0, double to_1, double duration_2 ) {
    struct IDANumber * _result;
    HRESULT _hr = raw_Interpolate(from_0, to_1, duration_2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(403)
inline DAnim::IDANumberPtr DAnim::IDAStatics::SlowInSlowOutAnim ( struct IDANumber * from_0, struct IDANumber * to_1, struct IDANumber * duration_2, struct IDANumber * sharpness_3 ) {
    struct IDANumber * _result;
    HRESULT _hr = raw_SlowInSlowOutAnim(from_0, to_1, duration_2, sharpness_3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(404)
inline DAnim::IDANumberPtr DAnim::IDAStatics::SlowInSlowOut ( double from_0, double to_1, double duration_2, double sharpness_3 ) {
    struct IDANumber * _result;
    HRESULT _hr = raw_SlowInSlowOut(from_0, to_1, duration_2, sharpness_3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(405)
inline DAnim::IDAGeometryPtr DAnim::IDAStatics::SoundSource ( struct IDASound * snd_0 ) {
    struct IDAGeometry * _result;
    HRESULT _hr = raw_SoundSource(snd_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAGeometryPtr(_result, false);
}

#pragma implementation_key(406)
inline DAnim::IDASoundPtr DAnim::IDAStatics::Mix ( struct IDASound * left_0, struct IDASound * right_1 ) {
    struct IDASound * _result;
    HRESULT _hr = raw_Mix(left_0, right_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDASoundPtr(_result, false);
}

#pragma implementation_key(407)
inline DAnim::IDABooleanPtr DAnim::IDAStatics::And ( struct IDABoolean * a_0, struct IDABoolean * b_1 ) {
    struct IDABoolean * _result;
    HRESULT _hr = raw_And(a_0, b_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDABooleanPtr(_result, false);
}

#pragma implementation_key(408)
inline DAnim::IDABooleanPtr DAnim::IDAStatics::Or ( struct IDABoolean * a_0, struct IDABoolean * b_1 ) {
    struct IDABoolean * _result;
    HRESULT _hr = raw_Or(a_0, b_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDABooleanPtr(_result, false);
}

#pragma implementation_key(409)
inline DAnim::IDABooleanPtr DAnim::IDAStatics::Not ( struct IDABoolean * a_0 ) {
    struct IDABoolean * _result;
    HRESULT _hr = raw_Not(a_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDABooleanPtr(_result, false);
}

#pragma implementation_key(410)
inline DAnim::IDANumberPtr DAnim::IDAStatics::Integral ( struct IDANumber * b_0 ) {
    struct IDANumber * _result;
    HRESULT _hr = raw_Integral(b_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(411)
inline DAnim::IDANumberPtr DAnim::IDAStatics::Derivative ( struct IDANumber * b_0 ) {
    struct IDANumber * _result;
    HRESULT _hr = raw_Derivative(b_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(412)
inline DAnim::IDAVector2Ptr DAnim::IDAStatics::IntegralVector2 ( struct IDAVector2 * v_0 ) {
    struct IDAVector2 * _result;
    HRESULT _hr = raw_IntegralVector2(v_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAVector2Ptr(_result, false);
}

#pragma implementation_key(413)
inline DAnim::IDAVector3Ptr DAnim::IDAStatics::IntegralVector3 ( struct IDAVector3 * v_0 ) {
    struct IDAVector3 * _result;
    HRESULT _hr = raw_IntegralVector3(v_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAVector3Ptr(_result, false);
}

#pragma implementation_key(414)
inline DAnim::IDAVector2Ptr DAnim::IDAStatics::DerivativeVector2 ( struct IDAVector2 * v_0 ) {
    struct IDAVector2 * _result;
    HRESULT _hr = raw_DerivativeVector2(v_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAVector2Ptr(_result, false);
}

#pragma implementation_key(415)
inline DAnim::IDAVector3Ptr DAnim::IDAStatics::DerivativeVector3 ( struct IDAVector3 * v_0 ) {
    struct IDAVector3 * _result;
    HRESULT _hr = raw_DerivativeVector3(v_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAVector3Ptr(_result, false);
}

#pragma implementation_key(416)
inline DAnim::IDAVector2Ptr DAnim::IDAStatics::DerivativePoint2 ( struct IDAPoint2 * v_0 ) {
    struct IDAVector2 * _result;
    HRESULT _hr = raw_DerivativePoint2(v_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAVector2Ptr(_result, false);
}

#pragma implementation_key(417)
inline DAnim::IDAVector3Ptr DAnim::IDAStatics::DerivativePoint3 ( struct IDAPoint3 * v_0 ) {
    struct IDAVector3 * _result;
    HRESULT _hr = raw_DerivativePoint3(v_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAVector3Ptr(_result, false);
}

#pragma implementation_key(418)
inline DAnim::IDABooleanPtr DAnim::IDAStatics::KeyState ( struct IDANumber * n_0 ) {
    struct IDABoolean * _result;
    HRESULT _hr = raw_KeyState(n_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDABooleanPtr(_result, false);
}

#pragma implementation_key(419)
inline DAnim::IDAEventPtr DAnim::IDAStatics::KeyUp ( long arg_0 ) {
    struct IDAEvent * _result;
    HRESULT _hr = raw_KeyUp(arg_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAEventPtr(_result, false);
}

#pragma implementation_key(420)
inline DAnim::IDAEventPtr DAnim::IDAStatics::KeyDown ( long arg_0 ) {
    struct IDAEvent * _result;
    HRESULT _hr = raw_KeyDown(arg_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAEventPtr(_result, false);
}

#pragma implementation_key(421)
inline DAnim::IDANumberPtr DAnim::IDAStatics::DANumber ( double num_0 ) {
    struct IDANumber * _result;
    HRESULT _hr = raw_DANumber(num_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(422)
inline DAnim::IDAStringPtr DAnim::IDAStatics::DAString ( _bstr_t str_0 ) {
    struct IDAString * _result;
    HRESULT _hr = raw_DAString(str_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAStringPtr(_result, false);
}

#pragma implementation_key(423)
inline DAnim::IDABooleanPtr DAnim::IDAStatics::DABoolean ( VARIANT_BOOL num_0 ) {
    struct IDABoolean * _result;
    HRESULT _hr = raw_DABoolean(num_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDABooleanPtr(_result, false);
}

#pragma implementation_key(424)
inline DAnim::IDANumberPtr DAnim::IDAStatics::SeededRandom ( double arg_0 ) {
    struct IDANumber * _result;
    HRESULT _hr = raw_SeededRandom(arg_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(425)
inline DAnim::IDAPoint2Ptr DAnim::IDAStatics::GetMousePosition ( ) {
    struct IDAPoint2 * _result;
    HRESULT _hr = get_MousePosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAPoint2Ptr(_result, false);
}

#pragma implementation_key(426)
inline DAnim::IDABooleanPtr DAnim::IDAStatics::GetLeftButtonState ( ) {
    struct IDABoolean * _result;
    HRESULT _hr = get_LeftButtonState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDABooleanPtr(_result, false);
}

#pragma implementation_key(427)
inline DAnim::IDABooleanPtr DAnim::IDAStatics::GetRightButtonState ( ) {
    struct IDABoolean * _result;
    HRESULT _hr = get_RightButtonState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDABooleanPtr(_result, false);
}

#pragma implementation_key(428)
inline DAnim::IDABooleanPtr DAnim::IDAStatics::GetDATrue ( ) {
    struct IDABoolean * _result;
    HRESULT _hr = get_DATrue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDABooleanPtr(_result, false);
}

#pragma implementation_key(429)
inline DAnim::IDABooleanPtr DAnim::IDAStatics::GetDAFalse ( ) {
    struct IDABoolean * _result;
    HRESULT _hr = get_DAFalse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDABooleanPtr(_result, false);
}

#pragma implementation_key(430)
inline DAnim::IDANumberPtr DAnim::IDAStatics::GetLocalTime ( ) {
    struct IDANumber * _result;
    HRESULT _hr = get_LocalTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(431)
inline DAnim::IDANumberPtr DAnim::IDAStatics::GetGlobalTime ( ) {
    struct IDANumber * _result;
    HRESULT _hr = get_GlobalTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(432)
inline DAnim::IDANumberPtr DAnim::IDAStatics::GetPixel ( ) {
    struct IDANumber * _result;
    HRESULT _hr = get_Pixel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(433)
inline DAnim::IDAUserDataPtr DAnim::IDAStatics::UserData ( IUnknown * data_0 ) {
    struct IDAUserData * _result;
    HRESULT _hr = raw_UserData(data_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAUserDataPtr(_result, false);
}

#pragma implementation_key(434)
inline DAnim::IDABehaviorPtr DAnim::IDAStatics::UntilNotify ( struct IDABehavior * b0_0, struct IDAEvent * event_1, struct IDAUntilNotifier * notifier_2 ) {
    struct IDABehavior * _result;
    HRESULT _hr = raw_UntilNotify(b0_0, event_1, notifier_2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDABehaviorPtr(_result, false);
}

#pragma implementation_key(435)
inline DAnim::IDABehaviorPtr DAnim::IDAStatics::Until ( struct IDABehavior * b0_0, struct IDAEvent * event_1, struct IDABehavior * b1_2 ) {
    struct IDABehavior * _result;
    HRESULT _hr = raw_Until(b0_0, event_1, b1_2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDABehaviorPtr(_result, false);
}

#pragma implementation_key(436)
inline DAnim::IDABehaviorPtr DAnim::IDAStatics::UntilEx ( struct IDABehavior * b0_0, struct IDAEvent * event_1 ) {
    struct IDABehavior * _result;
    HRESULT _hr = raw_UntilEx(b0_0, event_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDABehaviorPtr(_result, false);
}

#pragma implementation_key(437)
inline DAnim::IDABehaviorPtr DAnim::IDAStatics::Sequence ( struct IDABehavior * s1_0, struct IDABehavior * s2_1 ) {
    struct IDABehavior * _result;
    HRESULT _hr = raw_Sequence(s1_0, s2_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDABehaviorPtr(_result, false);
}

#pragma implementation_key(438)
inline DAnim::IDATransform2Ptr DAnim::IDAStatics::FollowPath ( struct IDAPath2 * path_0, double duration_1 ) {
    struct IDATransform2 * _result;
    HRESULT _hr = raw_FollowPath(path_0, duration_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform2Ptr(_result, false);
}

#pragma implementation_key(439)
inline DAnim::IDATransform2Ptr DAnim::IDAStatics::FollowPathAngle ( struct IDAPath2 * path_0, double duration_1 ) {
    struct IDATransform2 * _result;
    HRESULT _hr = raw_FollowPathAngle(path_0, duration_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform2Ptr(_result, false);
}

#pragma implementation_key(440)
inline DAnim::IDATransform2Ptr DAnim::IDAStatics::FollowPathAngleUpright ( struct IDAPath2 * path_0, double duration_1 ) {
    struct IDATransform2 * _result;
    HRESULT _hr = raw_FollowPathAngleUpright(path_0, duration_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform2Ptr(_result, false);
}

#pragma implementation_key(441)
inline DAnim::IDATransform2Ptr DAnim::IDAStatics::FollowPathEval ( struct IDAPath2 * path_0, struct IDANumber * eval_1 ) {
    struct IDATransform2 * _result;
    HRESULT _hr = raw_FollowPathEval(path_0, eval_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform2Ptr(_result, false);
}

#pragma implementation_key(442)
inline DAnim::IDATransform2Ptr DAnim::IDAStatics::FollowPathAngleEval ( struct IDAPath2 * path_0, struct IDANumber * eval_1 ) {
    struct IDATransform2 * _result;
    HRESULT _hr = raw_FollowPathAngleEval(path_0, eval_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform2Ptr(_result, false);
}

#pragma implementation_key(443)
inline DAnim::IDATransform2Ptr DAnim::IDAStatics::FollowPathAngleUprightEval ( struct IDAPath2 * path_0, struct IDANumber * eval_1 ) {
    struct IDATransform2 * _result;
    HRESULT _hr = raw_FollowPathAngleUprightEval(path_0, eval_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform2Ptr(_result, false);
}

#pragma implementation_key(444)
inline DAnim::IDATransform2Ptr DAnim::IDAStatics::FollowPathAnim ( struct IDAPath2 * obsoleted1_0, struct IDANumber * obsoleted2_1 ) {
    struct IDATransform2 * _result;
    HRESULT _hr = raw_FollowPathAnim(obsoleted1_0, obsoleted2_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform2Ptr(_result, false);
}

#pragma implementation_key(445)
inline DAnim::IDATransform2Ptr DAnim::IDAStatics::FollowPathAngleAnim ( struct IDAPath2 * obsoleted1_0, struct IDANumber * obsoleted2_1 ) {
    struct IDATransform2 * _result;
    HRESULT _hr = raw_FollowPathAngleAnim(obsoleted1_0, obsoleted2_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform2Ptr(_result, false);
}

#pragma implementation_key(446)
inline DAnim::IDATransform2Ptr DAnim::IDAStatics::FollowPathAngleUprightAnim ( struct IDAPath2 * obsoleted1_0, struct IDANumber * obsoleted2_1 ) {
    struct IDATransform2 * _result;
    HRESULT _hr = raw_FollowPathAngleUprightAnim(obsoleted1_0, obsoleted2_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform2Ptr(_result, false);
}

#pragma implementation_key(447)
inline DAnim::IDAStringPtr DAnim::IDAStatics::ConcatString ( struct IDAString * s1_0, struct IDAString * s2_1 ) {
    struct IDAString * _result;
    HRESULT _hr = raw_ConcatString(s1_0, s2_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAStringPtr(_result, false);
}

#pragma implementation_key(448)
inline DAnim::IDACameraPtr DAnim::IDAStatics::PerspectiveCamera ( double focalDist_0, double nearClip_1 ) {
    struct IDACamera * _result;
    HRESULT _hr = raw_PerspectiveCamera(focalDist_0, nearClip_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDACameraPtr(_result, false);
}

#pragma implementation_key(449)
inline DAnim::IDACameraPtr DAnim::IDAStatics::PerspectiveCameraAnim ( struct IDANumber * focalDist_0, struct IDANumber * nearClip_1 ) {
    struct IDACamera * _result;
    HRESULT _hr = raw_PerspectiveCameraAnim(focalDist_0, nearClip_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDACameraPtr(_result, false);
}

#pragma implementation_key(450)
inline DAnim::IDACameraPtr DAnim::IDAStatics::ParallelCamera ( double nearClip_0 ) {
    struct IDACamera * _result;
    HRESULT _hr = raw_ParallelCamera(nearClip_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDACameraPtr(_result, false);
}

#pragma implementation_key(451)
inline DAnim::IDACameraPtr DAnim::IDAStatics::ParallelCameraAnim ( struct IDANumber * nearClip_0 ) {
    struct IDACamera * _result;
    HRESULT _hr = raw_ParallelCameraAnim(nearClip_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDACameraPtr(_result, false);
}

#pragma implementation_key(452)
inline DAnim::IDAColorPtr DAnim::IDAStatics::ColorRgbAnim ( struct IDANumber * red_0, struct IDANumber * green_1, struct IDANumber * blue_2 ) {
    struct IDAColor * _result;
    HRESULT _hr = raw_ColorRgbAnim(red_0, green_1, blue_2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAColorPtr(_result, false);
}

#pragma implementation_key(453)
inline DAnim::IDAColorPtr DAnim::IDAStatics::ColorRgb ( double red_0, double green_1, double blue_2 ) {
    struct IDAColor * _result;
    HRESULT _hr = raw_ColorRgb(red_0, green_1, blue_2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAColorPtr(_result, false);
}

#pragma implementation_key(454)
inline DAnim::IDAColorPtr DAnim::IDAStatics::ColorRgb255 ( short red_0, short green_1, short blue_2 ) {
    struct IDAColor * _result;
    HRESULT _hr = raw_ColorRgb255(red_0, green_1, blue_2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAColorPtr(_result, false);
}

#pragma implementation_key(455)
inline DAnim::IDAColorPtr DAnim::IDAStatics::ColorHsl ( double hue_0, double saturation_1, double lum_2 ) {
    struct IDAColor * _result;
    HRESULT _hr = raw_ColorHsl(hue_0, saturation_1, lum_2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAColorPtr(_result, false);
}

#pragma implementation_key(456)
inline DAnim::IDAColorPtr DAnim::IDAStatics::ColorHslAnim ( struct IDANumber * hue_0, struct IDANumber * saturation_1, struct IDANumber * lum_2 ) {
    struct IDAColor * _result;
    HRESULT _hr = raw_ColorHslAnim(hue_0, saturation_1, lum_2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAColorPtr(_result, false);
}

#pragma implementation_key(457)
inline DAnim::IDAColorPtr DAnim::IDAStatics::GetRed ( ) {
    struct IDAColor * _result;
    HRESULT _hr = get_Red(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAColorPtr(_result, false);
}

#pragma implementation_key(458)
inline DAnim::IDAColorPtr DAnim::IDAStatics::GetGreen ( ) {
    struct IDAColor * _result;
    HRESULT _hr = get_Green(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAColorPtr(_result, false);
}

#pragma implementation_key(459)
inline DAnim::IDAColorPtr DAnim::IDAStatics::GetBlue ( ) {
    struct IDAColor * _result;
    HRESULT _hr = get_Blue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAColorPtr(_result, false);
}

#pragma implementation_key(460)
inline DAnim::IDAColorPtr DAnim::IDAStatics::GetCyan ( ) {
    struct IDAColor * _result;
    HRESULT _hr = get_Cyan(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAColorPtr(_result, false);
}

#pragma implementation_key(461)
inline DAnim::IDAColorPtr DAnim::IDAStatics::GetMagenta ( ) {
    struct IDAColor * _result;
    HRESULT _hr = get_Magenta(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAColorPtr(_result, false);
}

#pragma implementation_key(462)
inline DAnim::IDAColorPtr DAnim::IDAStatics::GetYellow ( ) {
    struct IDAColor * _result;
    HRESULT _hr = get_Yellow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAColorPtr(_result, false);
}

#pragma implementation_key(463)
inline DAnim::IDAColorPtr DAnim::IDAStatics::GetBlack ( ) {
    struct IDAColor * _result;
    HRESULT _hr = get_Black(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAColorPtr(_result, false);
}

#pragma implementation_key(464)
inline DAnim::IDAColorPtr DAnim::IDAStatics::GetWhite ( ) {
    struct IDAColor * _result;
    HRESULT _hr = get_White(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAColorPtr(_result, false);
}

#pragma implementation_key(465)
inline DAnim::IDAColorPtr DAnim::IDAStatics::GetAqua ( ) {
    struct IDAColor * _result;
    HRESULT _hr = get_Aqua(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAColorPtr(_result, false);
}

#pragma implementation_key(466)
inline DAnim::IDAColorPtr DAnim::IDAStatics::GetFuchsia ( ) {
    struct IDAColor * _result;
    HRESULT _hr = get_Fuchsia(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAColorPtr(_result, false);
}

#pragma implementation_key(467)
inline DAnim::IDAColorPtr DAnim::IDAStatics::GetGray ( ) {
    struct IDAColor * _result;
    HRESULT _hr = get_Gray(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAColorPtr(_result, false);
}

#pragma implementation_key(468)
inline DAnim::IDAColorPtr DAnim::IDAStatics::GetLime ( ) {
    struct IDAColor * _result;
    HRESULT _hr = get_Lime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAColorPtr(_result, false);
}

#pragma implementation_key(469)
inline DAnim::IDAColorPtr DAnim::IDAStatics::GetMaroon ( ) {
    struct IDAColor * _result;
    HRESULT _hr = get_Maroon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAColorPtr(_result, false);
}

#pragma implementation_key(470)
inline DAnim::IDAColorPtr DAnim::IDAStatics::GetNavy ( ) {
    struct IDAColor * _result;
    HRESULT _hr = get_Navy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAColorPtr(_result, false);
}

#pragma implementation_key(471)
inline DAnim::IDAColorPtr DAnim::IDAStatics::GetOlive ( ) {
    struct IDAColor * _result;
    HRESULT _hr = get_Olive(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAColorPtr(_result, false);
}

#pragma implementation_key(472)
inline DAnim::IDAColorPtr DAnim::IDAStatics::GetPurple ( ) {
    struct IDAColor * _result;
    HRESULT _hr = get_Purple(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAColorPtr(_result, false);
}

#pragma implementation_key(473)
inline DAnim::IDAColorPtr DAnim::IDAStatics::GetSilver ( ) {
    struct IDAColor * _result;
    HRESULT _hr = get_Silver(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAColorPtr(_result, false);
}

#pragma implementation_key(474)
inline DAnim::IDAColorPtr DAnim::IDAStatics::GetTeal ( ) {
    struct IDAColor * _result;
    HRESULT _hr = get_Teal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAColorPtr(_result, false);
}

#pragma implementation_key(475)
inline DAnim::IDAEventPtr DAnim::IDAStatics::Predicate ( struct IDABoolean * b_0 ) {
    struct IDAEvent * _result;
    HRESULT _hr = raw_Predicate(b_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAEventPtr(_result, false);
}

#pragma implementation_key(476)
inline DAnim::IDAEventPtr DAnim::IDAStatics::NotEvent ( struct IDAEvent * event_0 ) {
    struct IDAEvent * _result;
    HRESULT _hr = raw_NotEvent(event_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAEventPtr(_result, false);
}

#pragma implementation_key(477)
inline DAnim::IDAEventPtr DAnim::IDAStatics::AndEvent ( struct IDAEvent * e1_0, struct IDAEvent * e2_1 ) {
    struct IDAEvent * _result;
    HRESULT _hr = raw_AndEvent(e1_0, e2_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAEventPtr(_result, false);
}

#pragma implementation_key(478)
inline DAnim::IDAEventPtr DAnim::IDAStatics::OrEvent ( struct IDAEvent * e1_0, struct IDAEvent * e2_1 ) {
    struct IDAEvent * _result;
    HRESULT _hr = raw_OrEvent(e1_0, e2_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAEventPtr(_result, false);
}

#pragma implementation_key(479)
inline DAnim::IDAEventPtr DAnim::IDAStatics::ThenEvent ( struct IDAEvent * e1_0, struct IDAEvent * e2_1 ) {
    struct IDAEvent * _result;
    HRESULT _hr = raw_ThenEvent(e1_0, e2_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAEventPtr(_result, false);
}

#pragma implementation_key(480)
inline DAnim::IDAEventPtr DAnim::IDAStatics::GetLeftButtonDown ( ) {
    struct IDAEvent * _result;
    HRESULT _hr = get_LeftButtonDown(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAEventPtr(_result, false);
}

#pragma implementation_key(481)
inline DAnim::IDAEventPtr DAnim::IDAStatics::GetLeftButtonUp ( ) {
    struct IDAEvent * _result;
    HRESULT _hr = get_LeftButtonUp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAEventPtr(_result, false);
}

#pragma implementation_key(482)
inline DAnim::IDAEventPtr DAnim::IDAStatics::GetRightButtonDown ( ) {
    struct IDAEvent * _result;
    HRESULT _hr = get_RightButtonDown(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAEventPtr(_result, false);
}

#pragma implementation_key(483)
inline DAnim::IDAEventPtr DAnim::IDAStatics::GetRightButtonUp ( ) {
    struct IDAEvent * _result;
    HRESULT _hr = get_RightButtonUp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAEventPtr(_result, false);
}

#pragma implementation_key(484)
inline DAnim::IDAEventPtr DAnim::IDAStatics::GetAlways ( ) {
    struct IDAEvent * _result;
    HRESULT _hr = get_Always(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAEventPtr(_result, false);
}

#pragma implementation_key(485)
inline DAnim::IDAEventPtr DAnim::IDAStatics::GetNever ( ) {
    struct IDAEvent * _result;
    HRESULT _hr = get_Never(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAEventPtr(_result, false);
}

#pragma implementation_key(486)
inline DAnim::IDAEventPtr DAnim::IDAStatics::TimerAnim ( struct IDANumber * n_0 ) {
    struct IDAEvent * _result;
    HRESULT _hr = raw_TimerAnim(n_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAEventPtr(_result, false);
}

#pragma implementation_key(487)
inline DAnim::IDAEventPtr DAnim::IDAStatics::Timer ( double n_0 ) {
    struct IDAEvent * _result;
    HRESULT _hr = raw_Timer(n_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAEventPtr(_result, false);
}

#pragma implementation_key(488)
inline DAnim::IDAEventPtr DAnim::IDAStatics::AppTriggeredEvent ( ) {
    struct IDAEvent * _result;
    HRESULT _hr = raw_AppTriggeredEvent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAEventPtr(_result, false);
}

#pragma implementation_key(489)
inline DAnim::IDAEventPtr DAnim::IDAStatics::ScriptCallback ( _bstr_t obsolete1_0, struct IDAEvent * obsolete2_1, _bstr_t obsolete3_2 ) {
    struct IDAEvent * _result;
    HRESULT _hr = raw_ScriptCallback(obsolete1_0, obsolete2_1, obsolete3_2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAEventPtr(_result, false);
}

#pragma implementation_key(490)
inline DAnim::IDAGeometryPtr DAnim::IDAStatics::GetEmptyGeometry ( ) {
    struct IDAGeometry * _result;
    HRESULT _hr = get_EmptyGeometry(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAGeometryPtr(_result, false);
}

#pragma implementation_key(491)
inline DAnim::IDAGeometryPtr DAnim::IDAStatics::UnionGeometry ( struct IDAGeometry * g1_0, struct IDAGeometry * g2_1 ) {
    struct IDAGeometry * _result;
    HRESULT _hr = raw_UnionGeometry(g1_0, g2_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAGeometryPtr(_result, false);
}

#pragma implementation_key(492)
inline DAnim::IDAGeometryPtr DAnim::IDAStatics::UnionGeometryArrayEx ( long imgs_0size, struct IDAGeometry * * imgs_0 ) {
    struct IDAGeometry * _result;
    HRESULT _hr = raw_UnionGeometryArrayEx(imgs_0size, imgs_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAGeometryPtr(_result, false);
}

#pragma implementation_key(493)
inline DAnim::IDAGeometryPtr DAnim::IDAStatics::UnionGeometryArray ( const _variant_t & imgs_0 ) {
    struct IDAGeometry * _result;
    HRESULT _hr = raw_UnionGeometryArray(imgs_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAGeometryPtr(_result, false);
}

#pragma implementation_key(494)
inline DAnim::IDAImagePtr DAnim::IDAStatics::GetEmptyImage ( ) {
    struct IDAImage * _result;
    HRESULT _hr = get_EmptyImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

#pragma implementation_key(495)
inline DAnim::IDAImagePtr DAnim::IDAStatics::GetDetectableEmptyImage ( ) {
    struct IDAImage * _result;
    HRESULT _hr = get_DetectableEmptyImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

#pragma implementation_key(496)
inline DAnim::IDAImagePtr DAnim::IDAStatics::SolidColorImage ( struct IDAColor * col_0 ) {
    struct IDAImage * _result;
    HRESULT _hr = raw_SolidColorImage(col_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

#pragma implementation_key(497)
inline DAnim::IDAImagePtr DAnim::IDAStatics::GradientPolygonEx ( long points_0size, struct IDAPoint2 * * points_0, long colors_1size, struct IDAColor * * colors_1 ) {
    struct IDAImage * _result;
    HRESULT _hr = raw_GradientPolygonEx(points_0size, points_0, colors_1size, colors_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

#pragma implementation_key(498)
inline DAnim::IDAImagePtr DAnim::IDAStatics::GradientPolygon ( const _variant_t & points_0, const _variant_t & colors_1 ) {
    struct IDAImage * _result;
    HRESULT _hr = raw_GradientPolygon(points_0, colors_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

#pragma implementation_key(499)
inline DAnim::IDAImagePtr DAnim::IDAStatics::RadialGradientPolygonEx ( struct IDAColor * inner_0, struct IDAColor * outer_1, long points_2size, struct IDAPoint2 * * points_2, double fallOff_3 ) {
    struct IDAImage * _result;
    HRESULT _hr = raw_RadialGradientPolygonEx(inner_0, outer_1, points_2size, points_2, fallOff_3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

#pragma implementation_key(500)
inline DAnim::IDAImagePtr DAnim::IDAStatics::RadialGradientPolygon ( struct IDAColor * inner_0, struct IDAColor * outer_1, const _variant_t & points_2, double fallOff_3 ) {
    struct IDAImage * _result;
    HRESULT _hr = raw_RadialGradientPolygon(inner_0, outer_1, points_2, fallOff_3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

#pragma implementation_key(501)
inline DAnim::IDAImagePtr DAnim::IDAStatics::RadialGradientPolygonAnimEx ( struct IDAColor * inner_0, struct IDAColor * outer_1, long points_2size, struct IDAPoint2 * * points_2, struct IDANumber * fallOff_3 ) {
    struct IDAImage * _result;
    HRESULT _hr = raw_RadialGradientPolygonAnimEx(inner_0, outer_1, points_2size, points_2, fallOff_3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

#pragma implementation_key(502)
inline DAnim::IDAImagePtr DAnim::IDAStatics::RadialGradientPolygonAnim ( struct IDAColor * inner_0, struct IDAColor * outer_1, const _variant_t & points_2, struct IDANumber * fallOff_3 ) {
    struct IDAImage * _result;
    HRESULT _hr = raw_RadialGradientPolygonAnim(inner_0, outer_1, points_2, fallOff_3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

#pragma implementation_key(503)
inline DAnim::IDAImagePtr DAnim::IDAStatics::GradientSquare ( struct IDAColor * lowerLeft_0, struct IDAColor * upperLeft_1, struct IDAColor * upperRight_2, struct IDAColor * lowerRight_3 ) {
    struct IDAImage * _result;
    HRESULT _hr = raw_GradientSquare(lowerLeft_0, upperLeft_1, upperRight_2, lowerRight_3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

#pragma implementation_key(504)
inline DAnim::IDAImagePtr DAnim::IDAStatics::RadialGradientSquare ( struct IDAColor * inner_0, struct IDAColor * outer_1, double fallOff_2 ) {
    struct IDAImage * _result;
    HRESULT _hr = raw_RadialGradientSquare(inner_0, outer_1, fallOff_2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

#pragma implementation_key(505)
inline DAnim::IDAImagePtr DAnim::IDAStatics::RadialGradientSquareAnim ( struct IDAColor * inner_0, struct IDAColor * outer_1, struct IDANumber * fallOff_2 ) {
    struct IDAImage * _result;
    HRESULT _hr = raw_RadialGradientSquareAnim(inner_0, outer_1, fallOff_2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

#pragma implementation_key(506)
inline DAnim::IDAImagePtr DAnim::IDAStatics::RadialGradientRegularPoly ( struct IDAColor * inner_0, struct IDAColor * outer_1, double numEdges_2, double fallOff_3 ) {
    struct IDAImage * _result;
    HRESULT _hr = raw_RadialGradientRegularPoly(inner_0, outer_1, numEdges_2, fallOff_3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

#pragma implementation_key(507)
inline DAnim::IDAImagePtr DAnim::IDAStatics::RadialGradientRegularPolyAnim ( struct IDAColor * inner_0, struct IDAColor * outer_1, struct IDANumber * numEdges_2, struct IDANumber * fallOff_3 ) {
    struct IDAImage * _result;
    HRESULT _hr = raw_RadialGradientRegularPolyAnim(inner_0, outer_1, numEdges_2, fallOff_3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

#pragma implementation_key(508)
inline DAnim::IDAImagePtr DAnim::IDAStatics::GradientHorizontal ( struct IDAColor * start_0, struct IDAColor * stop_1, double fallOff_2 ) {
    struct IDAImage * _result;
    HRESULT _hr = raw_GradientHorizontal(start_0, stop_1, fallOff_2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

#pragma implementation_key(509)
inline DAnim::IDAImagePtr DAnim::IDAStatics::GradientHorizontalAnim ( struct IDAColor * start_0, struct IDAColor * stop_1, struct IDANumber * fallOff_2 ) {
    struct IDAImage * _result;
    HRESULT _hr = raw_GradientHorizontalAnim(start_0, stop_1, fallOff_2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

#pragma implementation_key(510)
inline DAnim::IDAImagePtr DAnim::IDAStatics::HatchHorizontal ( struct IDAColor * lineClr_0, double spacing_1 ) {
    struct IDAImage * _result;
    HRESULT _hr = raw_HatchHorizontal(lineClr_0, spacing_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

#pragma implementation_key(511)
inline DAnim::IDAImagePtr DAnim::IDAStatics::HatchHorizontalAnim ( struct IDAColor * lineClr_0, struct IDANumber * spacing_1 ) {
    struct IDAImage * _result;
    HRESULT _hr = raw_HatchHorizontalAnim(lineClr_0, spacing_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

#pragma implementation_key(512)
inline DAnim::IDAImagePtr DAnim::IDAStatics::HatchVertical ( struct IDAColor * lineClr_0, double spacing_1 ) {
    struct IDAImage * _result;
    HRESULT _hr = raw_HatchVertical(lineClr_0, spacing_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

#pragma implementation_key(513)
inline DAnim::IDAImagePtr DAnim::IDAStatics::HatchVerticalAnim ( struct IDAColor * lineClr_0, struct IDANumber * spacing_1 ) {
    struct IDAImage * _result;
    HRESULT _hr = raw_HatchVerticalAnim(lineClr_0, spacing_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

#pragma implementation_key(514)
inline DAnim::IDAImagePtr DAnim::IDAStatics::HatchForwardDiagonal ( struct IDAColor * lineClr_0, double spacing_1 ) {
    struct IDAImage * _result;
    HRESULT _hr = raw_HatchForwardDiagonal(lineClr_0, spacing_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

#pragma implementation_key(515)
inline DAnim::IDAImagePtr DAnim::IDAStatics::HatchForwardDiagonalAnim ( struct IDAColor * lineClr_0, struct IDANumber * spacing_1 ) {
    struct IDAImage * _result;
    HRESULT _hr = raw_HatchForwardDiagonalAnim(lineClr_0, spacing_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

#pragma implementation_key(516)
inline DAnim::IDAImagePtr DAnim::IDAStatics::HatchBackwardDiagonal ( struct IDAColor * lineClr_0, double spacing_1 ) {
    struct IDAImage * _result;
    HRESULT _hr = raw_HatchBackwardDiagonal(lineClr_0, spacing_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

#pragma implementation_key(517)
inline DAnim::IDAImagePtr DAnim::IDAStatics::HatchBackwardDiagonalAnim ( struct IDAColor * lineClr_0, struct IDANumber * spacing_1 ) {
    struct IDAImage * _result;
    HRESULT _hr = raw_HatchBackwardDiagonalAnim(lineClr_0, spacing_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

#pragma implementation_key(518)
inline DAnim::IDAImagePtr DAnim::IDAStatics::HatchCross ( struct IDAColor * lineClr_0, double spacing_1 ) {
    struct IDAImage * _result;
    HRESULT _hr = raw_HatchCross(lineClr_0, spacing_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

#pragma implementation_key(519)
inline DAnim::IDAImagePtr DAnim::IDAStatics::HatchCrossAnim ( struct IDAColor * lineClr_0, struct IDANumber * spacing_1 ) {
    struct IDAImage * _result;
    HRESULT _hr = raw_HatchCrossAnim(lineClr_0, spacing_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

#pragma implementation_key(520)
inline DAnim::IDAImagePtr DAnim::IDAStatics::HatchDiagonalCross ( struct IDAColor * lineClr_0, double spacing_1 ) {
    struct IDAImage * _result;
    HRESULT _hr = raw_HatchDiagonalCross(lineClr_0, spacing_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

#pragma implementation_key(521)
inline DAnim::IDAImagePtr DAnim::IDAStatics::HatchDiagonalCrossAnim ( struct IDAColor * lineClr_0, struct IDANumber * spacing_1 ) {
    struct IDAImage * _result;
    HRESULT _hr = raw_HatchDiagonalCrossAnim(lineClr_0, spacing_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

#pragma implementation_key(522)
inline DAnim::IDAImagePtr DAnim::IDAStatics::Overlay ( struct IDAImage * top_0, struct IDAImage * bottom_1 ) {
    struct IDAImage * _result;
    HRESULT _hr = raw_Overlay(top_0, bottom_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

#pragma implementation_key(523)
inline DAnim::IDAImagePtr DAnim::IDAStatics::OverlayArrayEx ( long imgs_0size, struct IDAImage * * imgs_0 ) {
    struct IDAImage * _result;
    HRESULT _hr = raw_OverlayArrayEx(imgs_0size, imgs_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

#pragma implementation_key(524)
inline DAnim::IDAImagePtr DAnim::IDAStatics::OverlayArray ( const _variant_t & imgs_0 ) {
    struct IDAImage * _result;
    HRESULT _hr = raw_OverlayArray(imgs_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

#pragma implementation_key(525)
inline DAnim::IDAGeometryPtr DAnim::IDAStatics::GetAmbientLight ( ) {
    struct IDAGeometry * _result;
    HRESULT _hr = get_AmbientLight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAGeometryPtr(_result, false);
}

#pragma implementation_key(526)
inline DAnim::IDAGeometryPtr DAnim::IDAStatics::GetDirectionalLight ( ) {
    struct IDAGeometry * _result;
    HRESULT _hr = get_DirectionalLight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAGeometryPtr(_result, false);
}

#pragma implementation_key(527)
inline DAnim::IDAGeometryPtr DAnim::IDAStatics::GetPointLight ( ) {
    struct IDAGeometry * _result;
    HRESULT _hr = get_PointLight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAGeometryPtr(_result, false);
}

#pragma implementation_key(528)
inline DAnim::IDAGeometryPtr DAnim::IDAStatics::SpotLightAnim ( struct IDANumber * fullcone_0, struct IDANumber * cutoff_1 ) {
    struct IDAGeometry * _result;
    HRESULT _hr = raw_SpotLightAnim(fullcone_0, cutoff_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAGeometryPtr(_result, false);
}

#pragma implementation_key(529)
inline DAnim::IDAGeometryPtr DAnim::IDAStatics::SpotLight ( struct IDANumber * fullcone_0, double cutoff_1 ) {
    struct IDAGeometry * _result;
    HRESULT _hr = raw_SpotLight(fullcone_0, cutoff_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAGeometryPtr(_result, false);
}

#pragma implementation_key(530)
inline DAnim::IDALineStylePtr DAnim::IDAStatics::GetDefaultLineStyle ( ) {
    struct IDALineStyle * _result;
    HRESULT _hr = get_DefaultLineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDALineStylePtr(_result, false);
}

#pragma implementation_key(531)
inline DAnim::IDALineStylePtr DAnim::IDAStatics::GetEmptyLineStyle ( ) {
    struct IDALineStyle * _result;
    HRESULT _hr = get_EmptyLineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDALineStylePtr(_result, false);
}

#pragma implementation_key(532)
inline DAnim::IDAJoinStylePtr DAnim::IDAStatics::GetJoinStyleBevel ( ) {
    struct IDAJoinStyle * _result;
    HRESULT _hr = get_JoinStyleBevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAJoinStylePtr(_result, false);
}

#pragma implementation_key(533)
inline DAnim::IDAJoinStylePtr DAnim::IDAStatics::GetJoinStyleRound ( ) {
    struct IDAJoinStyle * _result;
    HRESULT _hr = get_JoinStyleRound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAJoinStylePtr(_result, false);
}

#pragma implementation_key(534)
inline DAnim::IDAJoinStylePtr DAnim::IDAStatics::GetJoinStyleMiter ( ) {
    struct IDAJoinStyle * _result;
    HRESULT _hr = get_JoinStyleMiter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAJoinStylePtr(_result, false);
}

#pragma implementation_key(535)
inline DAnim::IDAEndStylePtr DAnim::IDAStatics::GetEndStyleFlat ( ) {
    struct IDAEndStyle * _result;
    HRESULT _hr = get_EndStyleFlat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAEndStylePtr(_result, false);
}

#pragma implementation_key(536)
inline DAnim::IDAEndStylePtr DAnim::IDAStatics::GetEndStyleSquare ( ) {
    struct IDAEndStyle * _result;
    HRESULT _hr = get_EndStyleSquare(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAEndStylePtr(_result, false);
}

#pragma implementation_key(537)
inline DAnim::IDAEndStylePtr DAnim::IDAStatics::GetEndStyleRound ( ) {
    struct IDAEndStyle * _result;
    HRESULT _hr = get_EndStyleRound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAEndStylePtr(_result, false);
}

#pragma implementation_key(538)
inline DAnim::IDADashStylePtr DAnim::IDAStatics::GetDashStyleSolid ( ) {
    struct IDADashStyle * _result;
    HRESULT _hr = get_DashStyleSolid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDADashStylePtr(_result, false);
}

#pragma implementation_key(539)
inline DAnim::IDADashStylePtr DAnim::IDAStatics::GetDashStyleDashed ( ) {
    struct IDADashStyle * _result;
    HRESULT _hr = get_DashStyleDashed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDADashStylePtr(_result, false);
}

#pragma implementation_key(540)
inline DAnim::IDAMicrophonePtr DAnim::IDAStatics::GetDefaultMicrophone ( ) {
    struct IDAMicrophone * _result;
    HRESULT _hr = get_DefaultMicrophone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAMicrophonePtr(_result, false);
}

#pragma implementation_key(541)
inline DAnim::IDAMattePtr DAnim::IDAStatics::GetOpaqueMatte ( ) {
    struct IDAMatte * _result;
    HRESULT _hr = get_OpaqueMatte(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAMattePtr(_result, false);
}

#pragma implementation_key(542)
inline DAnim::IDAMattePtr DAnim::IDAStatics::GetClearMatte ( ) {
    struct IDAMatte * _result;
    HRESULT _hr = get_ClearMatte(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAMattePtr(_result, false);
}

#pragma implementation_key(543)
inline DAnim::IDAMattePtr DAnim::IDAStatics::UnionMatte ( struct IDAMatte * m1_0, struct IDAMatte * m2_1 ) {
    struct IDAMatte * _result;
    HRESULT _hr = raw_UnionMatte(m1_0, m2_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAMattePtr(_result, false);
}

#pragma implementation_key(544)
inline DAnim::IDAMattePtr DAnim::IDAStatics::IntersectMatte ( struct IDAMatte * m1_0, struct IDAMatte * m2_1 ) {
    struct IDAMatte * _result;
    HRESULT _hr = raw_IntersectMatte(m1_0, m2_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAMattePtr(_result, false);
}

#pragma implementation_key(545)
inline DAnim::IDAMattePtr DAnim::IDAStatics::DifferenceMatte ( struct IDAMatte * m1_0, struct IDAMatte * m2_1 ) {
    struct IDAMatte * _result;
    HRESULT _hr = raw_DifferenceMatte(m1_0, m2_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAMattePtr(_result, false);
}

#pragma implementation_key(546)
inline DAnim::IDAMattePtr DAnim::IDAStatics::FillMatte ( struct IDAPath2 * p_0 ) {
    struct IDAMatte * _result;
    HRESULT _hr = raw_FillMatte(p_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAMattePtr(_result, false);
}

#pragma implementation_key(547)
inline DAnim::IDAMattePtr DAnim::IDAStatics::TextMatte ( struct IDAString * str_0, struct IDAFontStyle * fs_1 ) {
    struct IDAMatte * _result;
    HRESULT _hr = raw_TextMatte(str_0, fs_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAMattePtr(_result, false);
}

#pragma implementation_key(548)
inline DAnim::IDAMontagePtr DAnim::IDAStatics::GetEmptyMontage ( ) {
    struct IDAMontage * _result;
    HRESULT _hr = get_EmptyMontage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAMontagePtr(_result, false);
}

#pragma implementation_key(549)
inline DAnim::IDAMontagePtr DAnim::IDAStatics::ImageMontage ( struct IDAImage * im_0, double depth_1 ) {
    struct IDAMontage * _result;
    HRESULT _hr = raw_ImageMontage(im_0, depth_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAMontagePtr(_result, false);
}

#pragma implementation_key(550)
inline DAnim::IDAMontagePtr DAnim::IDAStatics::ImageMontageAnim ( struct IDAImage * im_0, struct IDANumber * depth_1 ) {
    struct IDAMontage * _result;
    HRESULT _hr = raw_ImageMontageAnim(im_0, depth_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAMontagePtr(_result, false);
}

#pragma implementation_key(551)
inline DAnim::IDAMontagePtr DAnim::IDAStatics::UnionMontage ( struct IDAMontage * m1_0, struct IDAMontage * m2_1 ) {
    struct IDAMontage * _result;
    HRESULT _hr = raw_UnionMontage(m1_0, m2_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAMontagePtr(_result, false);
}

#pragma implementation_key(552)
inline DAnim::IDAPath2Ptr DAnim::IDAStatics::Concat ( struct IDAPath2 * p1_0, struct IDAPath2 * p2_1 ) {
    struct IDAPath2 * _result;
    HRESULT _hr = raw_Concat(p1_0, p2_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAPath2Ptr(_result, false);
}

#pragma implementation_key(553)
inline DAnim::IDAPath2Ptr DAnim::IDAStatics::ConcatArrayEx ( long paths_0size, struct IDAPath2 * * paths_0 ) {
    struct IDAPath2 * _result;
    HRESULT _hr = raw_ConcatArrayEx(paths_0size, paths_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAPath2Ptr(_result, false);
}

#pragma implementation_key(554)
inline DAnim::IDAPath2Ptr DAnim::IDAStatics::ConcatArray ( const _variant_t & paths_0 ) {
    struct IDAPath2 * _result;
    HRESULT _hr = raw_ConcatArray(paths_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAPath2Ptr(_result, false);
}

#pragma implementation_key(555)
inline DAnim::IDAPath2Ptr DAnim::IDAStatics::Line ( struct IDAPoint2 * p1_0, struct IDAPoint2 * p2_1 ) {
    struct IDAPath2 * _result;
    HRESULT _hr = raw_Line(p1_0, p2_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAPath2Ptr(_result, false);
}

#pragma implementation_key(556)
inline DAnim::IDAPath2Ptr DAnim::IDAStatics::Ray ( struct IDAPoint2 * pt_0 ) {
    struct IDAPath2 * _result;
    HRESULT _hr = raw_Ray(pt_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAPath2Ptr(_result, false);
}

#pragma implementation_key(557)
inline DAnim::IDAPath2Ptr DAnim::IDAStatics::StringPathAnim ( struct IDAString * str_0, struct IDAFontStyle * fs_1 ) {
    struct IDAPath2 * _result;
    HRESULT _hr = raw_StringPathAnim(str_0, fs_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAPath2Ptr(_result, false);
}

#pragma implementation_key(558)
inline DAnim::IDAPath2Ptr DAnim::IDAStatics::StringPath ( _bstr_t str_0, struct IDAFontStyle * fs_1 ) {
    struct IDAPath2 * _result;
    HRESULT _hr = raw_StringPath(str_0, fs_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAPath2Ptr(_result, false);
}

#pragma implementation_key(559)
inline DAnim::IDAPath2Ptr DAnim::IDAStatics::PolylineEx ( long points_0size, struct IDAPoint2 * * points_0 ) {
    struct IDAPath2 * _result;
    HRESULT _hr = raw_PolylineEx(points_0size, points_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAPath2Ptr(_result, false);
}

#pragma implementation_key(560)
inline DAnim::IDAPath2Ptr DAnim::IDAStatics::Polyline ( const _variant_t & points_0 ) {
    struct IDAPath2 * _result;
    HRESULT _hr = raw_Polyline(points_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAPath2Ptr(_result, false);
}

#pragma implementation_key(561)
inline DAnim::IDAPath2Ptr DAnim::IDAStatics::PolydrawPathEx ( long points_0size, struct IDAPoint2 * * points_0, long codes_1size, struct IDANumber * * codes_1 ) {
    struct IDAPath2 * _result;
    HRESULT _hr = raw_PolydrawPathEx(points_0size, points_0, codes_1size, codes_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAPath2Ptr(_result, false);
}

#pragma implementation_key(562)
inline DAnim::IDAPath2Ptr DAnim::IDAStatics::PolydrawPath ( const _variant_t & points_0, const _variant_t & codes_1 ) {
    struct IDAPath2 * _result;
    HRESULT _hr = raw_PolydrawPath(points_0, codes_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAPath2Ptr(_result, false);
}

#pragma implementation_key(563)
inline DAnim::IDAPath2Ptr DAnim::IDAStatics::ArcRadians ( double startAngle_0, double endAngle_1, double arcWidth_2, double arcHeight_3 ) {
    struct IDAPath2 * _result;
    HRESULT _hr = raw_ArcRadians(startAngle_0, endAngle_1, arcWidth_2, arcHeight_3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAPath2Ptr(_result, false);
}

#pragma implementation_key(564)
inline DAnim::IDAPath2Ptr DAnim::IDAStatics::ArcRadiansAnim ( struct IDANumber * startAngle_0, struct IDANumber * endAngle_1, struct IDANumber * arcWidth_2, struct IDANumber * arcHeight_3 ) {
    struct IDAPath2 * _result;
    HRESULT _hr = raw_ArcRadiansAnim(startAngle_0, endAngle_1, arcWidth_2, arcHeight_3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAPath2Ptr(_result, false);
}

#pragma implementation_key(565)
inline DAnim::IDAPath2Ptr DAnim::IDAStatics::ArcDegrees ( double startAngle_0, double endAngle_1, double arcWidth_2, double arcHeight_3 ) {
    struct IDAPath2 * _result;
    HRESULT _hr = raw_ArcDegrees(startAngle_0, endAngle_1, arcWidth_2, arcHeight_3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAPath2Ptr(_result, false);
}

#pragma implementation_key(566)
inline DAnim::IDAPath2Ptr DAnim::IDAStatics::PieRadians ( double startAngle_0, double endAngle_1, double arcWidth_2, double arcHeight_3 ) {
    struct IDAPath2 * _result;
    HRESULT _hr = raw_PieRadians(startAngle_0, endAngle_1, arcWidth_2, arcHeight_3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAPath2Ptr(_result, false);
}

#pragma implementation_key(567)
inline DAnim::IDAPath2Ptr DAnim::IDAStatics::PieRadiansAnim ( struct IDANumber * startAngle_0, struct IDANumber * endAngle_1, struct IDANumber * arcWidth_2, struct IDANumber * arcHeight_3 ) {
    struct IDAPath2 * _result;
    HRESULT _hr = raw_PieRadiansAnim(startAngle_0, endAngle_1, arcWidth_2, arcHeight_3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAPath2Ptr(_result, false);
}

#pragma implementation_key(568)
inline DAnim::IDAPath2Ptr DAnim::IDAStatics::PieDegrees ( double startAngle_0, double endAngle_1, double arcWidth_2, double arcHeight_3 ) {
    struct IDAPath2 * _result;
    HRESULT _hr = raw_PieDegrees(startAngle_0, endAngle_1, arcWidth_2, arcHeight_3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAPath2Ptr(_result, false);
}

#pragma implementation_key(569)
inline DAnim::IDAPath2Ptr DAnim::IDAStatics::Oval ( double width_0, double height_1 ) {
    struct IDAPath2 * _result;
    HRESULT _hr = raw_Oval(width_0, height_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAPath2Ptr(_result, false);
}

#pragma implementation_key(570)
inline DAnim::IDAPath2Ptr DAnim::IDAStatics::OvalAnim ( struct IDANumber * width_0, struct IDANumber * height_1 ) {
    struct IDAPath2 * _result;
    HRESULT _hr = raw_OvalAnim(width_0, height_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAPath2Ptr(_result, false);
}

#pragma implementation_key(571)
inline DAnim::IDAPath2Ptr DAnim::IDAStatics::Rect ( double width_0, double height_1 ) {
    struct IDAPath2 * _result;
    HRESULT _hr = raw_Rect(width_0, height_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAPath2Ptr(_result, false);
}

#pragma implementation_key(572)
inline DAnim::IDAPath2Ptr DAnim::IDAStatics::RectAnim ( struct IDANumber * width_0, struct IDANumber * height_1 ) {
    struct IDAPath2 * _result;
    HRESULT _hr = raw_RectAnim(width_0, height_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAPath2Ptr(_result, false);
}

#pragma implementation_key(573)
inline DAnim::IDAPath2Ptr DAnim::IDAStatics::RoundRect ( double width_0, double height_1, double cornerArcWidth_2, double cornerArcHeight_3 ) {
    struct IDAPath2 * _result;
    HRESULT _hr = raw_RoundRect(width_0, height_1, cornerArcWidth_2, cornerArcHeight_3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAPath2Ptr(_result, false);
}

#pragma implementation_key(574)
inline DAnim::IDAPath2Ptr DAnim::IDAStatics::RoundRectAnim ( struct IDANumber * width_0, struct IDANumber * height_1, struct IDANumber * cornerArcWidth_2, struct IDANumber * cornerArcHeight_3 ) {
    struct IDAPath2 * _result;
    HRESULT _hr = raw_RoundRectAnim(width_0, height_1, cornerArcWidth_2, cornerArcHeight_3, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAPath2Ptr(_result, false);
}

#pragma implementation_key(575)
inline DAnim::IDAPath2Ptr DAnim::IDAStatics::CubicBSplinePathEx ( long points_0size, struct IDAPoint2 * * points_0, long knots_1size, struct IDANumber * * knots_1 ) {
    struct IDAPath2 * _result;
    HRESULT _hr = raw_CubicBSplinePathEx(points_0size, points_0, knots_1size, knots_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAPath2Ptr(_result, false);
}

#pragma implementation_key(576)
inline DAnim::IDAPath2Ptr DAnim::IDAStatics::CubicBSplinePath ( const _variant_t & points_0, const _variant_t & knots_1 ) {
    struct IDAPath2 * _result;
    HRESULT _hr = raw_CubicBSplinePath(points_0, knots_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAPath2Ptr(_result, false);
}

#pragma implementation_key(577)
inline DAnim::IDAPath2Ptr DAnim::IDAStatics::TextPath ( struct IDAString * obsolete1_0, struct IDAFontStyle * obsolete2_1 ) {
    struct IDAPath2 * _result;
    HRESULT _hr = raw_TextPath(obsolete1_0, obsolete2_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAPath2Ptr(_result, false);
}

#pragma implementation_key(578)
inline DAnim::IDASoundPtr DAnim::IDAStatics::GetSilence ( ) {
    struct IDASound * _result;
    HRESULT _hr = get_Silence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDASoundPtr(_result, false);
}

#pragma implementation_key(579)
inline DAnim::IDASoundPtr DAnim::IDAStatics::MixArrayEx ( long snds_0size, struct IDASound * * snds_0 ) {
    struct IDASound * _result;
    HRESULT _hr = raw_MixArrayEx(snds_0size, snds_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDASoundPtr(_result, false);
}

#pragma implementation_key(580)
inline DAnim::IDASoundPtr DAnim::IDAStatics::MixArray ( const _variant_t & snds_0 ) {
    struct IDASound * _result;
    HRESULT _hr = raw_MixArray(snds_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDASoundPtr(_result, false);
}

#pragma implementation_key(581)
inline DAnim::IDASoundPtr DAnim::IDAStatics::GetSinSynth ( ) {
    struct IDASound * _result;
    HRESULT _hr = get_SinSynth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDASoundPtr(_result, false);
}

#pragma implementation_key(582)
inline DAnim::IDAFontStylePtr DAnim::IDAStatics::GetDefaultFont ( ) {
    struct IDAFontStyle * _result;
    HRESULT _hr = get_DefaultFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAFontStylePtr(_result, false);
}

#pragma implementation_key(583)
inline DAnim::IDAFontStylePtr DAnim::IDAStatics::FontAnim ( struct IDAString * str_0, struct IDANumber * size_1, struct IDAColor * col_2 ) {
    struct IDAFontStyle * _result;
    HRESULT _hr = raw_FontAnim(str_0, size_1, col_2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAFontStylePtr(_result, false);
}

#pragma implementation_key(584)
inline DAnim::IDAFontStylePtr DAnim::IDAStatics::Font ( _bstr_t str_0, double size_1, struct IDAColor * col_2 ) {
    struct IDAFontStyle * _result;
    HRESULT _hr = raw_Font(str_0, size_1, col_2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAFontStylePtr(_result, false);
}

#pragma implementation_key(585)
inline DAnim::IDAImagePtr DAnim::IDAStatics::StringImageAnim ( struct IDAString * str_0, struct IDAFontStyle * fs_1 ) {
    struct IDAImage * _result;
    HRESULT _hr = raw_StringImageAnim(str_0, fs_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

#pragma implementation_key(586)
inline DAnim::IDAImagePtr DAnim::IDAStatics::StringImage ( _bstr_t str_0, struct IDAFontStyle * fs_1 ) {
    struct IDAImage * _result;
    HRESULT _hr = raw_StringImage(str_0, fs_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

#pragma implementation_key(587)
inline DAnim::IDAImagePtr DAnim::IDAStatics::TextImageAnim ( struct IDAString * obsoleted1_0, struct IDAFontStyle * obsoleted2_1 ) {
    struct IDAImage * _result;
    HRESULT _hr = raw_TextImageAnim(obsoleted1_0, obsoleted2_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

#pragma implementation_key(588)
inline DAnim::IDAImagePtr DAnim::IDAStatics::TextImage ( _bstr_t obsoleted1_0, struct IDAFontStyle * obsoleted2_1 ) {
    struct IDAImage * _result;
    HRESULT _hr = raw_TextImage(obsoleted1_0, obsoleted2_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

#pragma implementation_key(589)
inline DAnim::IDAVector2Ptr DAnim::IDAStatics::GetXVector2 ( ) {
    struct IDAVector2 * _result;
    HRESULT _hr = get_XVector2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAVector2Ptr(_result, false);
}

#pragma implementation_key(590)
inline DAnim::IDAVector2Ptr DAnim::IDAStatics::GetYVector2 ( ) {
    struct IDAVector2 * _result;
    HRESULT _hr = get_YVector2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAVector2Ptr(_result, false);
}

#pragma implementation_key(591)
inline DAnim::IDAVector2Ptr DAnim::IDAStatics::GetZeroVector2 ( ) {
    struct IDAVector2 * _result;
    HRESULT _hr = get_ZeroVector2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAVector2Ptr(_result, false);
}

#pragma implementation_key(592)
inline DAnim::IDAPoint2Ptr DAnim::IDAStatics::GetOrigin2 ( ) {
    struct IDAPoint2 * _result;
    HRESULT _hr = get_Origin2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAPoint2Ptr(_result, false);
}

#pragma implementation_key(593)
inline DAnim::IDAVector2Ptr DAnim::IDAStatics::Vector2Anim ( struct IDANumber * x_0, struct IDANumber * y_1 ) {
    struct IDAVector2 * _result;
    HRESULT _hr = raw_Vector2Anim(x_0, y_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAVector2Ptr(_result, false);
}

#pragma implementation_key(594)
inline DAnim::IDAVector2Ptr DAnim::IDAStatics::Vector2 ( double x_0, double y_1 ) {
    struct IDAVector2 * _result;
    HRESULT _hr = raw_Vector2(x_0, y_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAVector2Ptr(_result, false);
}

#pragma implementation_key(595)
inline DAnim::IDAPoint2Ptr DAnim::IDAStatics::Point2Anim ( struct IDANumber * x_0, struct IDANumber * y_1 ) {
    struct IDAPoint2 * _result;
    HRESULT _hr = raw_Point2Anim(x_0, y_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAPoint2Ptr(_result, false);
}

#pragma implementation_key(596)
inline DAnim::IDAPoint2Ptr DAnim::IDAStatics::Point2 ( double x_0, double y_1 ) {
    struct IDAPoint2 * _result;
    HRESULT _hr = raw_Point2(x_0, y_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAPoint2Ptr(_result, false);
}

#pragma implementation_key(597)
inline DAnim::IDAVector2Ptr DAnim::IDAStatics::Vector2PolarAnim ( struct IDANumber * theta_0, struct IDANumber * radius_1 ) {
    struct IDAVector2 * _result;
    HRESULT _hr = raw_Vector2PolarAnim(theta_0, radius_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAVector2Ptr(_result, false);
}

#pragma implementation_key(598)
inline DAnim::IDAVector2Ptr DAnim::IDAStatics::Vector2Polar ( double theta_0, double radius_1 ) {
    struct IDAVector2 * _result;
    HRESULT _hr = raw_Vector2Polar(theta_0, radius_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAVector2Ptr(_result, false);
}

#pragma implementation_key(599)
inline DAnim::IDAVector2Ptr DAnim::IDAStatics::Vector2PolarDegrees ( double theta_0, double radius_1 ) {
    struct IDAVector2 * _result;
    HRESULT _hr = raw_Vector2PolarDegrees(theta_0, radius_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAVector2Ptr(_result, false);
}

#pragma implementation_key(600)
inline DAnim::IDAPoint2Ptr DAnim::IDAStatics::Point2PolarAnim ( struct IDANumber * theta_0, struct IDANumber * radius_1 ) {
    struct IDAPoint2 * _result;
    HRESULT _hr = raw_Point2PolarAnim(theta_0, radius_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAPoint2Ptr(_result, false);
}

#pragma implementation_key(601)
inline DAnim::IDAPoint2Ptr DAnim::IDAStatics::Point2Polar ( double theta_0, double radius_1 ) {
    struct IDAPoint2 * _result;
    HRESULT _hr = raw_Point2Polar(theta_0, radius_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAPoint2Ptr(_result, false);
}

#pragma implementation_key(602)
inline DAnim::IDANumberPtr DAnim::IDAStatics::DotVector2 ( struct IDAVector2 * v_0, struct IDAVector2 * u_1 ) {
    struct IDANumber * _result;
    HRESULT _hr = raw_DotVector2(v_0, u_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(603)
inline DAnim::IDAVector2Ptr DAnim::IDAStatics::NegVector2 ( struct IDAVector2 * v_0 ) {
    struct IDAVector2 * _result;
    HRESULT _hr = raw_NegVector2(v_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAVector2Ptr(_result, false);
}

#pragma implementation_key(604)
inline DAnim::IDAVector2Ptr DAnim::IDAStatics::SubVector2 ( struct IDAVector2 * v1_0, struct IDAVector2 * v2_1 ) {
    struct IDAVector2 * _result;
    HRESULT _hr = raw_SubVector2(v1_0, v2_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAVector2Ptr(_result, false);
}

#pragma implementation_key(605)
inline DAnim::IDAVector2Ptr DAnim::IDAStatics::AddVector2 ( struct IDAVector2 * v1_0, struct IDAVector2 * v2_1 ) {
    struct IDAVector2 * _result;
    HRESULT _hr = raw_AddVector2(v1_0, v2_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAVector2Ptr(_result, false);
}

#pragma implementation_key(606)
inline DAnim::IDAPoint2Ptr DAnim::IDAStatics::AddPoint2Vector ( struct IDAPoint2 * p_0, struct IDAVector2 * v_1 ) {
    struct IDAPoint2 * _result;
    HRESULT _hr = raw_AddPoint2Vector(p_0, v_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAPoint2Ptr(_result, false);
}

#pragma implementation_key(607)
inline DAnim::IDAPoint2Ptr DAnim::IDAStatics::SubPoint2Vector ( struct IDAPoint2 * p_0, struct IDAVector2 * v_1 ) {
    struct IDAPoint2 * _result;
    HRESULT _hr = raw_SubPoint2Vector(p_0, v_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAPoint2Ptr(_result, false);
}

#pragma implementation_key(608)
inline DAnim::IDAVector2Ptr DAnim::IDAStatics::SubPoint2 ( struct IDAPoint2 * p1_0, struct IDAPoint2 * p2_1 ) {
    struct IDAVector2 * _result;
    HRESULT _hr = raw_SubPoint2(p1_0, p2_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAVector2Ptr(_result, false);
}

#pragma implementation_key(609)
inline DAnim::IDANumberPtr DAnim::IDAStatics::DistancePoint2 ( struct IDAPoint2 * p_0, struct IDAPoint2 * q_1 ) {
    struct IDANumber * _result;
    HRESULT _hr = raw_DistancePoint2(p_0, q_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(610)
inline DAnim::IDANumberPtr DAnim::IDAStatics::DistanceSquaredPoint2 ( struct IDAPoint2 * p_0, struct IDAPoint2 * q_1 ) {
    struct IDANumber * _result;
    HRESULT _hr = raw_DistanceSquaredPoint2(p_0, q_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(611)
inline DAnim::IDAVector3Ptr DAnim::IDAStatics::GetXVector3 ( ) {
    struct IDAVector3 * _result;
    HRESULT _hr = get_XVector3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAVector3Ptr(_result, false);
}

#pragma implementation_key(612)
inline DAnim::IDAVector3Ptr DAnim::IDAStatics::GetYVector3 ( ) {
    struct IDAVector3 * _result;
    HRESULT _hr = get_YVector3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAVector3Ptr(_result, false);
}

#pragma implementation_key(613)
inline DAnim::IDAVector3Ptr DAnim::IDAStatics::GetZVector3 ( ) {
    struct IDAVector3 * _result;
    HRESULT _hr = get_ZVector3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAVector3Ptr(_result, false);
}

#pragma implementation_key(614)
inline DAnim::IDAVector3Ptr DAnim::IDAStatics::GetZeroVector3 ( ) {
    struct IDAVector3 * _result;
    HRESULT _hr = get_ZeroVector3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAVector3Ptr(_result, false);
}

#pragma implementation_key(615)
inline DAnim::IDAPoint3Ptr DAnim::IDAStatics::GetOrigin3 ( ) {
    struct IDAPoint3 * _result;
    HRESULT _hr = get_Origin3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAPoint3Ptr(_result, false);
}

#pragma implementation_key(616)
inline DAnim::IDAVector3Ptr DAnim::IDAStatics::Vector3Anim ( struct IDANumber * x_0, struct IDANumber * y_1, struct IDANumber * z_2 ) {
    struct IDAVector3 * _result;
    HRESULT _hr = raw_Vector3Anim(x_0, y_1, z_2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAVector3Ptr(_result, false);
}

#pragma implementation_key(617)
inline DAnim::IDAVector3Ptr DAnim::IDAStatics::Vector3 ( double x_0, double y_1, double z_2 ) {
    struct IDAVector3 * _result;
    HRESULT _hr = raw_Vector3(x_0, y_1, z_2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAVector3Ptr(_result, false);
}

#pragma implementation_key(618)
inline DAnim::IDAPoint3Ptr DAnim::IDAStatics::Point3Anim ( struct IDANumber * x_0, struct IDANumber * y_1, struct IDANumber * z_2 ) {
    struct IDAPoint3 * _result;
    HRESULT _hr = raw_Point3Anim(x_0, y_1, z_2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAPoint3Ptr(_result, false);
}

#pragma implementation_key(619)
inline DAnim::IDAPoint3Ptr DAnim::IDAStatics::Point3 ( double x_0, double y_1, double z_2 ) {
    struct IDAPoint3 * _result;
    HRESULT _hr = raw_Point3(x_0, y_1, z_2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAPoint3Ptr(_result, false);
}

#pragma implementation_key(620)
inline DAnim::IDAVector3Ptr DAnim::IDAStatics::Vector3SphericalAnim ( struct IDANumber * xyAngle_0, struct IDANumber * yzAngle_1, struct IDANumber * radius_2 ) {
    struct IDAVector3 * _result;
    HRESULT _hr = raw_Vector3SphericalAnim(xyAngle_0, yzAngle_1, radius_2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAVector3Ptr(_result, false);
}

#pragma implementation_key(621)
inline DAnim::IDAVector3Ptr DAnim::IDAStatics::Vector3Spherical ( double xyAngle_0, double yzAngle_1, double radius_2 ) {
    struct IDAVector3 * _result;
    HRESULT _hr = raw_Vector3Spherical(xyAngle_0, yzAngle_1, radius_2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAVector3Ptr(_result, false);
}

#pragma implementation_key(622)
inline DAnim::IDAPoint3Ptr DAnim::IDAStatics::Point3SphericalAnim ( struct IDANumber * zxAngle_0, struct IDANumber * xyAngle_1, struct IDANumber * radius_2 ) {
    struct IDAPoint3 * _result;
    HRESULT _hr = raw_Point3SphericalAnim(zxAngle_0, xyAngle_1, radius_2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAPoint3Ptr(_result, false);
}

#pragma implementation_key(623)
inline DAnim::IDAPoint3Ptr DAnim::IDAStatics::Point3Spherical ( double zxAngle_0, double xyAngle_1, double radius_2 ) {
    struct IDAPoint3 * _result;
    HRESULT _hr = raw_Point3Spherical(zxAngle_0, xyAngle_1, radius_2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAPoint3Ptr(_result, false);
}

#pragma implementation_key(624)
inline DAnim::IDANumberPtr DAnim::IDAStatics::DotVector3 ( struct IDAVector3 * v_0, struct IDAVector3 * u_1 ) {
    struct IDANumber * _result;
    HRESULT _hr = raw_DotVector3(v_0, u_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(625)
inline DAnim::IDAVector3Ptr DAnim::IDAStatics::CrossVector3 ( struct IDAVector3 * v_0, struct IDAVector3 * u_1 ) {
    struct IDAVector3 * _result;
    HRESULT _hr = raw_CrossVector3(v_0, u_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAVector3Ptr(_result, false);
}

#pragma implementation_key(626)
inline DAnim::IDAVector3Ptr DAnim::IDAStatics::NegVector3 ( struct IDAVector3 * v_0 ) {
    struct IDAVector3 * _result;
    HRESULT _hr = raw_NegVector3(v_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAVector3Ptr(_result, false);
}

#pragma implementation_key(627)
inline DAnim::IDAVector3Ptr DAnim::IDAStatics::SubVector3 ( struct IDAVector3 * v1_0, struct IDAVector3 * v2_1 ) {
    struct IDAVector3 * _result;
    HRESULT _hr = raw_SubVector3(v1_0, v2_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAVector3Ptr(_result, false);
}

#pragma implementation_key(628)
inline DAnim::IDAVector3Ptr DAnim::IDAStatics::AddVector3 ( struct IDAVector3 * v1_0, struct IDAVector3 * v2_1 ) {
    struct IDAVector3 * _result;
    HRESULT _hr = raw_AddVector3(v1_0, v2_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAVector3Ptr(_result, false);
}

#pragma implementation_key(629)
inline DAnim::IDAPoint3Ptr DAnim::IDAStatics::AddPoint3Vector ( struct IDAPoint3 * p_0, struct IDAVector3 * v_1 ) {
    struct IDAPoint3 * _result;
    HRESULT _hr = raw_AddPoint3Vector(p_0, v_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAPoint3Ptr(_result, false);
}

#pragma implementation_key(630)
inline DAnim::IDAPoint3Ptr DAnim::IDAStatics::SubPoint3Vector ( struct IDAPoint3 * p_0, struct IDAVector3 * v_1 ) {
    struct IDAPoint3 * _result;
    HRESULT _hr = raw_SubPoint3Vector(p_0, v_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAPoint3Ptr(_result, false);
}

#pragma implementation_key(631)
inline DAnim::IDAVector3Ptr DAnim::IDAStatics::SubPoint3 ( struct IDAPoint3 * p1_0, struct IDAPoint3 * p2_1 ) {
    struct IDAVector3 * _result;
    HRESULT _hr = raw_SubPoint3(p1_0, p2_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAVector3Ptr(_result, false);
}

#pragma implementation_key(632)
inline DAnim::IDANumberPtr DAnim::IDAStatics::DistancePoint3 ( struct IDAPoint3 * p_0, struct IDAPoint3 * q_1 ) {
    struct IDANumber * _result;
    HRESULT _hr = raw_DistancePoint3(p_0, q_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(633)
inline DAnim::IDANumberPtr DAnim::IDAStatics::DistanceSquaredPoint3 ( struct IDAPoint3 * p_0, struct IDAPoint3 * q_1 ) {
    struct IDANumber * _result;
    HRESULT _hr = raw_DistanceSquaredPoint3(p_0, q_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(634)
inline DAnim::IDATransform3Ptr DAnim::IDAStatics::GetIdentityTransform3 ( ) {
    struct IDATransform3 * _result;
    HRESULT _hr = get_IdentityTransform3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform3Ptr(_result, false);
}

#pragma implementation_key(635)
inline DAnim::IDATransform3Ptr DAnim::IDAStatics::Translate3Anim ( struct IDANumber * tx_0, struct IDANumber * ty_1, struct IDANumber * tz_2 ) {
    struct IDATransform3 * _result;
    HRESULT _hr = raw_Translate3Anim(tx_0, ty_1, tz_2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform3Ptr(_result, false);
}

#pragma implementation_key(636)
inline DAnim::IDATransform3Ptr DAnim::IDAStatics::Translate3 ( double tx_0, double ty_1, double tz_2 ) {
    struct IDATransform3 * _result;
    HRESULT _hr = raw_Translate3(tx_0, ty_1, tz_2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform3Ptr(_result, false);
}

#pragma implementation_key(637)
inline DAnim::IDATransform3Ptr DAnim::IDAStatics::Translate3Rate ( double tx_0, double ty_1, double tz_2 ) {
    struct IDATransform3 * _result;
    HRESULT _hr = raw_Translate3Rate(tx_0, ty_1, tz_2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform3Ptr(_result, false);
}

#pragma implementation_key(638)
inline DAnim::IDATransform3Ptr DAnim::IDAStatics::Translate3Vector ( struct IDAVector3 * delta_0 ) {
    struct IDATransform3 * _result;
    HRESULT _hr = raw_Translate3Vector(delta_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform3Ptr(_result, false);
}

#pragma implementation_key(639)
inline DAnim::IDATransform3Ptr DAnim::IDAStatics::Translate3Point ( struct IDAPoint3 * new_origin_0 ) {
    struct IDATransform3 * _result;
    HRESULT _hr = raw_Translate3Point(new_origin_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform3Ptr(_result, false);
}

#pragma implementation_key(640)
inline DAnim::IDATransform3Ptr DAnim::IDAStatics::Scale3Anim ( struct IDANumber * x_0, struct IDANumber * y_1, struct IDANumber * z_2 ) {
    struct IDATransform3 * _result;
    HRESULT _hr = raw_Scale3Anim(x_0, y_1, z_2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform3Ptr(_result, false);
}

#pragma implementation_key(641)
inline DAnim::IDATransform3Ptr DAnim::IDAStatics::Scale3 ( double x_0, double y_1, double z_2 ) {
    struct IDATransform3 * _result;
    HRESULT _hr = raw_Scale3(x_0, y_1, z_2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform3Ptr(_result, false);
}

#pragma implementation_key(642)
inline DAnim::IDATransform3Ptr DAnim::IDAStatics::Scale3Rate ( double x_0, double y_1, double z_2 ) {
    struct IDATransform3 * _result;
    HRESULT _hr = raw_Scale3Rate(x_0, y_1, z_2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform3Ptr(_result, false);
}

#pragma implementation_key(643)
inline DAnim::IDATransform3Ptr DAnim::IDAStatics::Scale3Vector ( struct IDAVector3 * scale_vec_0 ) {
    struct IDATransform3 * _result;
    HRESULT _hr = raw_Scale3Vector(scale_vec_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform3Ptr(_result, false);
}

#pragma implementation_key(644)
inline DAnim::IDATransform3Ptr DAnim::IDAStatics::Scale3UniformAnim ( struct IDANumber * uniform_scale_0 ) {
    struct IDATransform3 * _result;
    HRESULT _hr = raw_Scale3UniformAnim(uniform_scale_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform3Ptr(_result, false);
}

#pragma implementation_key(645)
inline DAnim::IDATransform3Ptr DAnim::IDAStatics::Scale3Uniform ( double uniform_scale_0 ) {
    struct IDATransform3 * _result;
    HRESULT _hr = raw_Scale3Uniform(uniform_scale_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform3Ptr(_result, false);
}

#pragma implementation_key(646)
inline DAnim::IDATransform3Ptr DAnim::IDAStatics::Scale3UniformRate ( double uniform_scale_0 ) {
    struct IDATransform3 * _result;
    HRESULT _hr = raw_Scale3UniformRate(uniform_scale_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform3Ptr(_result, false);
}

#pragma implementation_key(647)
inline DAnim::IDATransform3Ptr DAnim::IDAStatics::Rotate3Anim ( struct IDAVector3 * axis_0, struct IDANumber * angle_1 ) {
    struct IDATransform3 * _result;
    HRESULT _hr = raw_Rotate3Anim(axis_0, angle_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform3Ptr(_result, false);
}

#pragma implementation_key(648)
inline DAnim::IDATransform3Ptr DAnim::IDAStatics::Rotate3 ( struct IDAVector3 * axis_0, double angle_1 ) {
    struct IDATransform3 * _result;
    HRESULT _hr = raw_Rotate3(axis_0, angle_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform3Ptr(_result, false);
}

#pragma implementation_key(649)
inline DAnim::IDATransform3Ptr DAnim::IDAStatics::Rotate3Rate ( struct IDAVector3 * axis_0, double angle_1 ) {
    struct IDATransform3 * _result;
    HRESULT _hr = raw_Rotate3Rate(axis_0, angle_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform3Ptr(_result, false);
}

#pragma implementation_key(650)
inline DAnim::IDATransform3Ptr DAnim::IDAStatics::Rotate3Degrees ( struct IDAVector3 * axis_0, double angle_1 ) {
    struct IDATransform3 * _result;
    HRESULT _hr = raw_Rotate3Degrees(axis_0, angle_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform3Ptr(_result, false);
}

#pragma implementation_key(651)
inline DAnim::IDATransform3Ptr DAnim::IDAStatics::Rotate3RateDegrees ( struct IDAVector3 * axis_0, double angle_1 ) {
    struct IDATransform3 * _result;
    HRESULT _hr = raw_Rotate3RateDegrees(axis_0, angle_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform3Ptr(_result, false);
}

#pragma implementation_key(652)
inline DAnim::IDATransform3Ptr DAnim::IDAStatics::XShear3Anim ( struct IDANumber * a_0, struct IDANumber * b_1 ) {
    struct IDATransform3 * _result;
    HRESULT _hr = raw_XShear3Anim(a_0, b_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform3Ptr(_result, false);
}

#pragma implementation_key(653)
inline DAnim::IDATransform3Ptr DAnim::IDAStatics::XShear3 ( double a_0, double b_1 ) {
    struct IDATransform3 * _result;
    HRESULT _hr = raw_XShear3(a_0, b_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform3Ptr(_result, false);
}

#pragma implementation_key(654)
inline DAnim::IDATransform3Ptr DAnim::IDAStatics::XShear3Rate ( double a_0, double b_1 ) {
    struct IDATransform3 * _result;
    HRESULT _hr = raw_XShear3Rate(a_0, b_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform3Ptr(_result, false);
}

#pragma implementation_key(655)
inline DAnim::IDATransform3Ptr DAnim::IDAStatics::YShear3Anim ( struct IDANumber * c_0, struct IDANumber * d_1 ) {
    struct IDATransform3 * _result;
    HRESULT _hr = raw_YShear3Anim(c_0, d_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform3Ptr(_result, false);
}

#pragma implementation_key(656)
inline DAnim::IDATransform3Ptr DAnim::IDAStatics::YShear3 ( double c_0, double d_1 ) {
    struct IDATransform3 * _result;
    HRESULT _hr = raw_YShear3(c_0, d_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform3Ptr(_result, false);
}

#pragma implementation_key(657)
inline DAnim::IDATransform3Ptr DAnim::IDAStatics::YShear3Rate ( double c_0, double d_1 ) {
    struct IDATransform3 * _result;
    HRESULT _hr = raw_YShear3Rate(c_0, d_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform3Ptr(_result, false);
}

#pragma implementation_key(658)
inline DAnim::IDATransform3Ptr DAnim::IDAStatics::ZShear3Anim ( struct IDANumber * e_0, struct IDANumber * f_1 ) {
    struct IDATransform3 * _result;
    HRESULT _hr = raw_ZShear3Anim(e_0, f_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform3Ptr(_result, false);
}

#pragma implementation_key(659)
inline DAnim::IDATransform3Ptr DAnim::IDAStatics::ZShear3 ( double e_0, double f_1 ) {
    struct IDATransform3 * _result;
    HRESULT _hr = raw_ZShear3(e_0, f_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform3Ptr(_result, false);
}

#pragma implementation_key(660)
inline DAnim::IDATransform3Ptr DAnim::IDAStatics::ZShear3Rate ( double e_0, double f_1 ) {
    struct IDATransform3 * _result;
    HRESULT _hr = raw_ZShear3Rate(e_0, f_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform3Ptr(_result, false);
}

#pragma implementation_key(661)
inline DAnim::IDATransform3Ptr DAnim::IDAStatics::Transform4x4AnimEx ( long m_0size, struct IDANumber * * m_0 ) {
    struct IDATransform3 * _result;
    HRESULT _hr = raw_Transform4x4AnimEx(m_0size, m_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform3Ptr(_result, false);
}

#pragma implementation_key(662)
inline DAnim::IDATransform3Ptr DAnim::IDAStatics::Transform4x4Anim ( const _variant_t & m_0 ) {
    struct IDATransform3 * _result;
    HRESULT _hr = raw_Transform4x4Anim(m_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform3Ptr(_result, false);
}

#pragma implementation_key(663)
inline DAnim::IDATransform3Ptr DAnim::IDAStatics::Compose3 ( struct IDATransform3 * a_0, struct IDATransform3 * b_1 ) {
    struct IDATransform3 * _result;
    HRESULT _hr = raw_Compose3(a_0, b_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform3Ptr(_result, false);
}

#pragma implementation_key(664)
inline DAnim::IDATransform3Ptr DAnim::IDAStatics::Compose3ArrayEx ( long xfs_0size, struct IDATransform3 * * xfs_0 ) {
    struct IDATransform3 * _result;
    HRESULT _hr = raw_Compose3ArrayEx(xfs_0size, xfs_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform3Ptr(_result, false);
}

#pragma implementation_key(665)
inline DAnim::IDATransform3Ptr DAnim::IDAStatics::Compose3Array ( const _variant_t & xfs_0 ) {
    struct IDATransform3 * _result;
    HRESULT _hr = raw_Compose3Array(xfs_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform3Ptr(_result, false);
}

#pragma implementation_key(666)
inline DAnim::IDATransform3Ptr DAnim::IDAStatics::LookAtFrom ( struct IDAPoint3 * to_0, struct IDAPoint3 * from_1, struct IDAVector3 * up_2 ) {
    struct IDATransform3 * _result;
    HRESULT _hr = raw_LookAtFrom(to_0, from_1, up_2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform3Ptr(_result, false);
}

#pragma implementation_key(667)
inline DAnim::IDATransform2Ptr DAnim::IDAStatics::GetIdentityTransform2 ( ) {
    struct IDATransform2 * _result;
    HRESULT _hr = get_IdentityTransform2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform2Ptr(_result, false);
}

#pragma implementation_key(668)
inline DAnim::IDATransform2Ptr DAnim::IDAStatics::Translate2Anim ( struct IDANumber * tx_0, struct IDANumber * ty_1 ) {
    struct IDATransform2 * _result;
    HRESULT _hr = raw_Translate2Anim(tx_0, ty_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform2Ptr(_result, false);
}

#pragma implementation_key(669)
inline DAnim::IDATransform2Ptr DAnim::IDAStatics::Translate2 ( double tx_0, double ty_1 ) {
    struct IDATransform2 * _result;
    HRESULT _hr = raw_Translate2(tx_0, ty_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform2Ptr(_result, false);
}

#pragma implementation_key(670)
inline DAnim::IDATransform2Ptr DAnim::IDAStatics::Translate2Rate ( double tx_0, double ty_1 ) {
    struct IDATransform2 * _result;
    HRESULT _hr = raw_Translate2Rate(tx_0, ty_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform2Ptr(_result, false);
}

#pragma implementation_key(671)
inline DAnim::IDATransform2Ptr DAnim::IDAStatics::Translate2Vector ( struct IDAVector2 * delta_0 ) {
    struct IDATransform2 * _result;
    HRESULT _hr = raw_Translate2Vector(delta_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform2Ptr(_result, false);
}

#pragma implementation_key(672)
inline DAnim::IDATransform2Ptr DAnim::IDAStatics::Translate2Point ( struct IDAPoint2 * pos_0 ) {
    struct IDATransform2 * _result;
    HRESULT _hr = raw_Translate2Point(pos_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform2Ptr(_result, false);
}

#pragma implementation_key(673)
inline DAnim::IDATransform2Ptr DAnim::IDAStatics::Scale2Anim ( struct IDANumber * x_0, struct IDANumber * y_1 ) {
    struct IDATransform2 * _result;
    HRESULT _hr = raw_Scale2Anim(x_0, y_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform2Ptr(_result, false);
}

#pragma implementation_key(674)
inline DAnim::IDATransform2Ptr DAnim::IDAStatics::Scale2 ( double x_0, double y_1 ) {
    struct IDATransform2 * _result;
    HRESULT _hr = raw_Scale2(x_0, y_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform2Ptr(_result, false);
}

#pragma implementation_key(675)
inline DAnim::IDATransform2Ptr DAnim::IDAStatics::Scale2Rate ( double x_0, double y_1 ) {
    struct IDATransform2 * _result;
    HRESULT _hr = raw_Scale2Rate(x_0, y_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform2Ptr(_result, false);
}

#pragma implementation_key(676)
inline DAnim::IDATransform2Ptr DAnim::IDAStatics::Scale2Vector2 ( struct IDAVector2 * obsoleteMethod_0 ) {
    struct IDATransform2 * _result;
    HRESULT _hr = raw_Scale2Vector2(obsoleteMethod_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform2Ptr(_result, false);
}

#pragma implementation_key(677)
inline DAnim::IDATransform2Ptr DAnim::IDAStatics::Scale2Vector ( struct IDAVector2 * scale_vec_0 ) {
    struct IDATransform2 * _result;
    HRESULT _hr = raw_Scale2Vector(scale_vec_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform2Ptr(_result, false);
}

#pragma implementation_key(678)
inline DAnim::IDATransform2Ptr DAnim::IDAStatics::Scale2UniformAnim ( struct IDANumber * uniform_scale_0 ) {
    struct IDATransform2 * _result;
    HRESULT _hr = raw_Scale2UniformAnim(uniform_scale_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform2Ptr(_result, false);
}

#pragma implementation_key(679)
inline DAnim::IDATransform2Ptr DAnim::IDAStatics::Scale2Uniform ( double uniform_scale_0 ) {
    struct IDATransform2 * _result;
    HRESULT _hr = raw_Scale2Uniform(uniform_scale_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform2Ptr(_result, false);
}

#pragma implementation_key(680)
inline DAnim::IDATransform2Ptr DAnim::IDAStatics::Scale2UniformRate ( double uniform_scale_0 ) {
    struct IDATransform2 * _result;
    HRESULT _hr = raw_Scale2UniformRate(uniform_scale_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform2Ptr(_result, false);
}

#pragma implementation_key(681)
inline DAnim::IDATransform2Ptr DAnim::IDAStatics::Rotate2Anim ( struct IDANumber * angle_0 ) {
    struct IDATransform2 * _result;
    HRESULT _hr = raw_Rotate2Anim(angle_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform2Ptr(_result, false);
}

#pragma implementation_key(682)
inline DAnim::IDATransform2Ptr DAnim::IDAStatics::Rotate2 ( double angle_0 ) {
    struct IDATransform2 * _result;
    HRESULT _hr = raw_Rotate2(angle_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform2Ptr(_result, false);
}

#pragma implementation_key(683)
inline DAnim::IDATransform2Ptr DAnim::IDAStatics::Rotate2Rate ( double angle_0 ) {
    struct IDATransform2 * _result;
    HRESULT _hr = raw_Rotate2Rate(angle_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform2Ptr(_result, false);
}

#pragma implementation_key(684)
inline DAnim::IDATransform2Ptr DAnim::IDAStatics::Rotate2Degrees ( double angle_0 ) {
    struct IDATransform2 * _result;
    HRESULT _hr = raw_Rotate2Degrees(angle_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform2Ptr(_result, false);
}

#pragma implementation_key(685)
inline DAnim::IDATransform2Ptr DAnim::IDAStatics::Rotate2RateDegrees ( double angle_0 ) {
    struct IDATransform2 * _result;
    HRESULT _hr = raw_Rotate2RateDegrees(angle_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform2Ptr(_result, false);
}

#pragma implementation_key(686)
inline DAnim::IDATransform2Ptr DAnim::IDAStatics::XShear2Anim ( struct IDANumber * arg_0 ) {
    struct IDATransform2 * _result;
    HRESULT _hr = raw_XShear2Anim(arg_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform2Ptr(_result, false);
}

#pragma implementation_key(687)
inline DAnim::IDATransform2Ptr DAnim::IDAStatics::XShear2 ( double arg_0 ) {
    struct IDATransform2 * _result;
    HRESULT _hr = raw_XShear2(arg_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform2Ptr(_result, false);
}

#pragma implementation_key(688)
inline DAnim::IDATransform2Ptr DAnim::IDAStatics::XShear2Rate ( double arg_0 ) {
    struct IDATransform2 * _result;
    HRESULT _hr = raw_XShear2Rate(arg_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform2Ptr(_result, false);
}

#pragma implementation_key(689)
inline DAnim::IDATransform2Ptr DAnim::IDAStatics::YShear2Anim ( struct IDANumber * arg_0 ) {
    struct IDATransform2 * _result;
    HRESULT _hr = raw_YShear2Anim(arg_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform2Ptr(_result, false);
}

#pragma implementation_key(690)
inline DAnim::IDATransform2Ptr DAnim::IDAStatics::YShear2 ( double arg_0 ) {
    struct IDATransform2 * _result;
    HRESULT _hr = raw_YShear2(arg_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform2Ptr(_result, false);
}

#pragma implementation_key(691)
inline DAnim::IDATransform2Ptr DAnim::IDAStatics::YShear2Rate ( double arg_0 ) {
    struct IDATransform2 * _result;
    HRESULT _hr = raw_YShear2Rate(arg_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform2Ptr(_result, false);
}

#pragma implementation_key(692)
inline DAnim::IDATransform2Ptr DAnim::IDAStatics::Transform3x2AnimEx ( long m_0size, struct IDANumber * * m_0 ) {
    struct IDATransform2 * _result;
    HRESULT _hr = raw_Transform3x2AnimEx(m_0size, m_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform2Ptr(_result, false);
}

#pragma implementation_key(693)
inline DAnim::IDATransform2Ptr DAnim::IDAStatics::Transform3x2Anim ( const _variant_t & m_0 ) {
    struct IDATransform2 * _result;
    HRESULT _hr = raw_Transform3x2Anim(m_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform2Ptr(_result, false);
}

#pragma implementation_key(694)
inline DAnim::IDATransform2Ptr DAnim::IDAStatics::Compose2 ( struct IDATransform2 * a_0, struct IDATransform2 * b_1 ) {
    struct IDATransform2 * _result;
    HRESULT _hr = raw_Compose2(a_0, b_1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform2Ptr(_result, false);
}

#pragma implementation_key(695)
inline DAnim::IDATransform2Ptr DAnim::IDAStatics::Compose2ArrayEx ( long xfs_0size, struct IDATransform2 * * xfs_0 ) {
    struct IDATransform2 * _result;
    HRESULT _hr = raw_Compose2ArrayEx(xfs_0size, xfs_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform2Ptr(_result, false);
}

#pragma implementation_key(696)
inline DAnim::IDATransform2Ptr DAnim::IDAStatics::Compose2Array ( const _variant_t & xfs_0 ) {
    struct IDATransform2 * _result;
    HRESULT _hr = raw_Compose2Array(xfs_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATransform2Ptr(_result, false);
}

#pragma implementation_key(697)
inline DAnim::IDATuplePtr DAnim::IDAStatics::Tuple ( const _variant_t & obsolete1 ) {
    struct IDATuple * _result;
    HRESULT _hr = raw_Tuple(obsolete1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDATuplePtr(_result, false);
}

#pragma implementation_key(698)
inline DAnim::IDAArrayPtr DAnim::IDAStatics::Array ( const _variant_t & obsolete1 ) {
    struct IDAArray * _result;
    HRESULT _hr = raw_Array(obsolete1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAArrayPtr(_result, false);
}

#pragma implementation_key(699)
inline VARIANT_BOOL DAnim::IDAStatics::GetAreBlockingImportsComplete ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AreBlockingImportsComplete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IDA2Statics wrapper method implementations
//

#pragma implementation_key(700)
inline DAnim::IDAGeometryPtr DAnim::IDA2Statics::ImportDirect3DRMVisual ( IUnknown * visual ) {
    struct IDAGeometry * _result;
    HRESULT _hr = raw_ImportDirect3DRMVisual(visual, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAGeometryPtr(_result, false);
}

#pragma implementation_key(701)
inline DAnim::IDADXTransformResultPtr DAnim::IDA2Statics::ApplyDXTransformEx ( IUnknown * theXf, long numInputs, struct IDABehavior * * inputs, struct IDANumber * evaluator ) {
    struct IDADXTransformResult * _result;
    HRESULT _hr = raw_ApplyDXTransformEx(theXf, numInputs, inputs, evaluator, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDADXTransformResultPtr(_result, false);
}

#pragma implementation_key(702)
inline DAnim::IDADXTransformResultPtr DAnim::IDA2Statics::ApplyDXTransform ( const _variant_t & varXf, const _variant_t & inputs, const _variant_t & evaluator ) {
    struct IDADXTransformResult * _result;
    HRESULT _hr = raw_ApplyDXTransform(varXf, inputs, evaluator, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDADXTransformResultPtr(_result, false);
}

#pragma implementation_key(703)
inline DAnim::IDANumberPtr DAnim::IDA2Statics::ModifiableNumber ( double initVal ) {
    struct IDANumber * _result;
    HRESULT _hr = raw_ModifiableNumber(initVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(704)
inline DAnim::IDAStringPtr DAnim::IDA2Statics::ModifiableString ( _bstr_t initVal ) {
    struct IDAString * _result;
    HRESULT _hr = raw_ModifiableString(initVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAStringPtr(_result, false);
}

#pragma implementation_key(705)
inline DAnim::IDAArrayPtr DAnim::IDA2Statics::DAArrayEx2 ( long s, struct IDABehavior * * pBvrs, unsigned long dwFlags ) {
    struct IDAArray * _result;
    HRESULT _hr = raw_DAArrayEx2(s, pBvrs, dwFlags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAArrayPtr(_result, false);
}

#pragma implementation_key(706)
inline DAnim::IDAArrayPtr DAnim::IDA2Statics::DAArray2 ( const _variant_t & bvrs, unsigned long dwFlags ) {
    struct IDAArray * _result;
    HRESULT _hr = raw_DAArray2(bvrs, dwFlags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAArrayPtr(_result, false);
}

#pragma implementation_key(707)
inline DAnim::IDAGeometryPtr DAnim::IDA2Statics::ImportGeometryWrapped ( _bstr_t url, long wrapType, double originX, double originY, double originZ, double zAxisX, double zAxisY, double zAxisZ, double yAxisX, double yAxisY, double yAxisZ, double texOriginX, double texOriginY, double texScaleX, double texScaleY, unsigned long Flags ) {
    struct IDAGeometry * _result;
    HRESULT _hr = raw_ImportGeometryWrapped(url, wrapType, originX, originY, originZ, zAxisX, zAxisY, zAxisZ, yAxisX, yAxisY, yAxisZ, texOriginX, texOriginY, texScaleX, texScaleY, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAGeometryPtr(_result, false);
}

#pragma implementation_key(708)
inline DAnim::IDAImportationResultPtr DAnim::IDA2Statics::ImportGeometryWrappedAsync ( _bstr_t url, long wrapType, double originX, double originY, double originZ, double zAxisX, double zAxisY, double zAxisZ, double yAxisX, double yAxisY, double yAxisZ, double texOriginX, double texOriginY, double texScaleX, double texScaleY, unsigned long Flags, struct IDAGeometry * pGeoStandIn ) {
    struct IDAImportationResult * _result;
    HRESULT _hr = raw_ImportGeometryWrappedAsync(url, wrapType, originX, originY, originZ, zAxisX, zAxisY, zAxisZ, yAxisX, yAxisY, yAxisZ, texOriginX, texOriginY, texScaleX, texScaleY, Flags, pGeoStandIn, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImportationResultPtr(_result, false);
}

#pragma implementation_key(709)
inline DAnim::IDAGeometryPtr DAnim::IDA2Statics::ImportDirect3DRMVisualWrapped ( IUnknown * visual, long wrapType, double originX, double originY, double originZ, double zAxisX, double zAxisY, double zAxisZ, double yAxisX, double yAxisY, double yAxisZ, double texOriginX, double texOriginY, double texScaleX, double texScaleY, unsigned long Flags ) {
    struct IDAGeometry * _result;
    HRESULT _hr = raw_ImportDirect3DRMVisualWrapped(visual, wrapType, originX, originY, originZ, zAxisX, zAxisY, zAxisZ, yAxisX, yAxisY, yAxisZ, texOriginX, texOriginY, texScaleX, texScaleY, Flags, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAGeometryPtr(_result, false);
}

#pragma implementation_key(710)
inline DAnim::IDABehaviorPtr DAnim::IDA2Statics::UntilNotifyScript ( struct IDABehavior * b0_0, struct IDAEvent * event_1, _bstr_t scriptlet_2 ) {
    struct IDABehavior * _result;
    HRESULT _hr = raw_UntilNotifyScript(b0_0, event_1, scriptlet_2, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDABehaviorPtr(_result, false);
}

#pragma implementation_key(711)
inline DAnim::IDANumberPtr DAnim::IDA2Statics::GetViewFrameRate ( ) {
    struct IDANumber * _result;
    HRESULT _hr = get_ViewFrameRate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(712)
inline DAnim::IDAMontagePtr DAnim::IDA2Statics::UnionMontageArrayEx ( long mtgs_0size, struct IDAMontage * * mtgs_0 ) {
    struct IDAMontage * _result;
    HRESULT _hr = raw_UnionMontageArrayEx(mtgs_0size, mtgs_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAMontagePtr(_result, false);
}

#pragma implementation_key(713)
inline DAnim::IDAMontagePtr DAnim::IDA2Statics::UnionMontageArray ( const _variant_t & mtgs_0 ) {
    struct IDAMontage * _result;
    HRESULT _hr = raw_UnionMontageArray(mtgs_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAMontagePtr(_result, false);
}

#pragma implementation_key(714)
inline unsigned long DAnim::IDA2Statics::GetModifiableBehaviorFlags ( ) {
    unsigned long _result;
    HRESULT _hr = get_ModifiableBehaviorFlags(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(715)
inline void DAnim::IDA2Statics::PutModifiableBehaviorFlags ( unsigned long dwFlags ) {
    HRESULT _hr = put_ModifiableBehaviorFlags(dwFlags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(716)
inline DAnim::IDAColorPtr DAnim::IDA2Statics::GetEmptyColor ( ) {
    struct IDAColor * _result;
    HRESULT _hr = get_EmptyColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAColorPtr(_result, false);
}

//
// interface IDA3Statics wrapper method implementations
//

#pragma implementation_key(717)
inline DAnim::IDAImportationResultPtr DAnim::IDA3Statics::ImportSoundStream ( _bstr_t url ) {
    struct IDAImportationResult * _result;
    HRESULT _hr = raw_ImportSoundStream(url, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImportationResultPtr(_result, false);
}

#pragma implementation_key(718)
inline DAnim::IDAImportationResultPtr DAnim::IDA3Statics::ImportMovieStream ( _bstr_t url ) {
    struct IDAImportationResult * _result;
    HRESULT _hr = raw_ImportMovieStream(url, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImportationResultPtr(_result, false);
}

#pragma implementation_key(719)
inline DAnim::IDABehaviorPtr DAnim::IDA3Statics::SequenceArrayEx ( long sz, struct IDABehavior * * bvrs_0 ) {
    struct IDABehavior * _result;
    HRESULT _hr = raw_SequenceArrayEx(sz, bvrs_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDABehaviorPtr(_result, false);
}

#pragma implementation_key(720)
inline DAnim::IDABehaviorPtr DAnim::IDA3Statics::SequenceArray ( const _variant_t & bvrs_0 ) {
    struct IDABehavior * _result;
    HRESULT _hr = raw_SequenceArray(bvrs_0, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDABehaviorPtr(_result, false);
}

#pragma implementation_key(721)
inline DAnim::IDANumberPtr DAnim::IDA3Statics::GetViewTimeDelta ( ) {
    struct IDANumber * _result;
    HRESULT _hr = get_ViewTimeDelta(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDANumberPtr(_result, false);
}

#pragma implementation_key(722)
inline DAnim::IDAGeometryPtr DAnim::IDA3Statics::TriMesh ( int nTriangles, const _variant_t & positions, const _variant_t & normals, const _variant_t & UVs, const _variant_t & indices ) {
    struct IDAGeometry * _result;
    HRESULT _hr = raw_TriMesh(nTriangles, positions, normals, UVs, indices, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAGeometryPtr(_result, false);
}

#pragma implementation_key(723)
inline DAnim::IDAGeometryPtr DAnim::IDA3Statics::TriMeshEx ( int nTriangles, int nPositions, float * positions, int nNormals, float * normals, int nUVs, float * UVs, int nIndices, int * indices ) {
    struct IDAGeometry * _result;
    HRESULT _hr = raw_TriMeshEx(nTriangles, nPositions, positions, nNormals, normals, nUVs, UVs, nIndices, indices, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAGeometryPtr(_result, false);
}

#pragma implementation_key(724)
inline DAnim::IDAImagePtr DAnim::IDA3Statics::RadialGradientMulticolor ( const _variant_t & offsets, const _variant_t & colors ) {
    struct IDAImage * _result;
    HRESULT _hr = raw_RadialGradientMulticolor(offsets, colors, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

#pragma implementation_key(725)
inline DAnim::IDAImagePtr DAnim::IDA3Statics::RadialGradientMulticolorEx ( int nOffsets, struct IDANumber * * offsets, int nColors, struct IDAColor * * colors ) {
    struct IDAImage * _result;
    HRESULT _hr = raw_RadialGradientMulticolorEx(nOffsets, offsets, nColors, colors, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

#pragma implementation_key(726)
inline DAnim::IDAImagePtr DAnim::IDA3Statics::LinearGradientMulticolor ( const _variant_t & offsets, const _variant_t & colors ) {
    struct IDAImage * _result;
    HRESULT _hr = raw_LinearGradientMulticolor(offsets, colors, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

#pragma implementation_key(727)
inline DAnim::IDAImagePtr DAnim::IDA3Statics::LinearGradientMulticolorEx ( int nOffsets, struct IDANumber * * offsets, int nColors, struct IDAColor * * colors ) {
    struct IDAImage * _result;
    HRESULT _hr = raw_LinearGradientMulticolorEx(nOffsets, offsets, nColors, colors, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

//
// interface IDAViewerControl wrapper method implementations
//

#pragma implementation_key(728)
inline double DAnim::IDAViewerControl::GetUpdateInterval ( ) {
    double _result;
    HRESULT _hr = get_UpdateInterval(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(729)
inline void DAnim::IDAViewerControl::PutUpdateInterval ( double pVal ) {
    HRESULT _hr = put_UpdateInterval(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(730)
inline DAnim::IDAViewPtr DAnim::IDAViewerControl::GetView ( ) {
    struct IDAView * _result;
    HRESULT _hr = get_View(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAViewPtr(_result, false);
}

#pragma implementation_key(731)
inline void DAnim::IDAViewerControl::PutView ( struct IDAView * ppView ) {
    HRESULT _hr = put_View(ppView);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(732)
inline DAnim::IDAImagePtr DAnim::IDAViewerControl::GetImage ( ) {
    struct IDAImage * _result;
    HRESULT _hr = get_Image(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

#pragma implementation_key(733)
inline void DAnim::IDAViewerControl::PutImage ( struct IDAImage * ppImage ) {
    HRESULT _hr = put_Image(ppImage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(734)
inline DAnim::IDAImagePtr DAnim::IDAViewerControl::GetBackgroundImage ( ) {
    struct IDAImage * _result;
    HRESULT _hr = get_BackgroundImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

#pragma implementation_key(735)
inline void DAnim::IDAViewerControl::PutBackgroundImage ( struct IDAImage * ppImage ) {
    HRESULT _hr = put_BackgroundImage(ppImage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(736)
inline DAnim::IDASoundPtr DAnim::IDAViewerControl::GetSound ( ) {
    struct IDASound * _result;
    HRESULT _hr = get_Sound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDASoundPtr(_result, false);
}

#pragma implementation_key(737)
inline void DAnim::IDAViewerControl::PutSound ( struct IDASound * ppSound ) {
    HRESULT _hr = put_Sound(ppSound);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(738)
inline DAnim::IDAStaticsPtr DAnim::IDAViewerControl::GetPixelLibrary ( ) {
    struct IDAStatics * _result;
    HRESULT _hr = get_PixelLibrary(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAStaticsPtr(_result, false);
}

#pragma implementation_key(739)
inline DAnim::IDAStaticsPtr DAnim::IDAViewerControl::GetMeterLibrary ( ) {
    struct IDAStatics * _result;
    HRESULT _hr = get_MeterLibrary(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAStaticsPtr(_result, false);
}

#pragma implementation_key(740)
inline HRESULT DAnim::IDAViewerControl::AddBehaviorToRun ( struct IDABehavior * pBehavior ) {
    HRESULT _hr = raw_AddBehaviorToRun(pBehavior);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(741)
inline HRESULT DAnim::IDAViewerControl::Start ( ) {
    HRESULT _hr = raw_Start();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(742)
inline DAnim::IDAImagePtr DAnim::IDAViewerControl::GetInputImage ( ) {
    struct IDAImage * _result;
    HRESULT _hr = get_InputImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDAImagePtr(_result, false);
}

#pragma implementation_key(743)
inline VARIANT_BOOL DAnim::IDAViewerControl::GetOpaqueForHitDetect ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_OpaqueForHitDetect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(744)
inline void DAnim::IDAViewerControl::PutOpaqueForHitDetect ( VARIANT_BOOL b ) {
    HRESULT _hr = put_OpaqueForHitDetect(b);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(745)
inline DA_TIMER_SOURCE DAnim::IDAViewerControl::GetTimerSource ( ) {
    DA_TIMER_SOURCE _result;
    HRESULT _hr = get_TimerSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(746)
inline void DAnim::IDAViewerControl::PutTimerSource ( DA_TIMER_SOURCE ts ) {
    HRESULT _hr = put_TimerSource(ts);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(747)
inline HRESULT DAnim::IDAViewerControl::RegisterErrorHandler ( _bstr_t scriptlet ) {
    HRESULT _hr = raw_RegisterErrorHandler(scriptlet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IDA2ViewerControl wrapper method implementations
//

#pragma implementation_key(748)
inline HRESULT DAnim::IDA2ViewerControl::SetPreference ( _bstr_t pref, const _variant_t & val ) {
    HRESULT _hr = raw_SetPreference(pref, val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(749)
inline _variant_t DAnim::IDA2ViewerControl::GetPreference ( _bstr_t pref ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetPreference(pref, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IDA2ViewerControlWindowed wrapper method implementations
//

#pragma implementation_key(750)
inline HRESULT DAnim::IDA2ViewerControlWindowed::SetPreference ( _bstr_t pref, const _variant_t & val ) {
    HRESULT _hr = raw_SetPreference(pref, val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(751)
inline _variant_t DAnim::IDA2ViewerControlWindowed::GetPreference ( _bstr_t pref ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetPreference(pref, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IDA3ViewerControl wrapper method implementations
//

#pragma implementation_key(752)
inline HRESULT DAnim::IDA3ViewerControl::Stop ( ) {
    HRESULT _hr = raw_Stop();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(753)
inline HRESULT DAnim::IDA3ViewerControl::Pause ( ) {
    HRESULT _hr = raw_Pause();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(754)
inline HRESULT DAnim::IDA3ViewerControl::Resume ( ) {
    HRESULT _hr = raw_Resume();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(755)
inline HRESULT DAnim::IDA3ViewerControl::Tick ( ) {
    HRESULT _hr = raw_Tick();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IDA3ViewerControlWindowed wrapper method implementations
//

#pragma implementation_key(756)
inline HRESULT DAnim::IDA3ViewerControlWindowed::Stop ( ) {
    HRESULT _hr = raw_Stop();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(757)
inline HRESULT DAnim::IDA3ViewerControlWindowed::Pause ( ) {
    HRESULT _hr = raw_Pause();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(758)
inline HRESULT DAnim::IDA3ViewerControlWindowed::Resume ( ) {
    HRESULT _hr = raw_Resume();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(759)
inline HRESULT DAnim::IDA3ViewerControlWindowed::Tick ( ) {
    HRESULT _hr = raw_Tick();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// dispinterface _IDAViewerControlEvents wrapper method implementations
//

#pragma implementation_key(760)
inline HRESULT DAnim::_IDAViewerControlEvents::Start ( ) {
    return _com_dispatch_method(this, 0x1001, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(761)
inline HRESULT DAnim::_IDAViewerControlEvents::MouseUp ( long button, long KeyFlags, long X, long Y ) {
    return _com_dispatch_method(this, 0x1002, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0003\x0003", button, KeyFlags, X, Y);
}

#pragma implementation_key(762)
inline HRESULT DAnim::_IDAViewerControlEvents::MouseDown ( long button, long KeyFlags, long X, long Y ) {
    return _com_dispatch_method(this, 0x1003, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0003\x0003", button, KeyFlags, X, Y);
}

#pragma implementation_key(763)
inline HRESULT DAnim::_IDAViewerControlEvents::MouseMove ( long button, long KeyFlags, long X, long Y ) {
    return _com_dispatch_method(this, 0x1004, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0003\x0003", button, KeyFlags, X, Y);
}

#pragma implementation_key(764)
inline HRESULT DAnim::_IDAViewerControlEvents::Click ( ) {
    return _com_dispatch_method(this, 0x1005, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(765)
inline HRESULT DAnim::_IDAViewerControlEvents::KeyPress ( long KeyAscii ) {
    return _com_dispatch_method(this, 0x1006, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", KeyAscii);
}

#pragma implementation_key(766)
inline HRESULT DAnim::_IDAViewerControlEvents::KeyUp ( long KeyCode, long KeyData ) {
    return _com_dispatch_method(this, 0x1007, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003", KeyCode, KeyData);
}

#pragma implementation_key(767)
inline HRESULT DAnim::_IDAViewerControlEvents::KeyDown ( long KeyCode, long KeyData ) {
    return _com_dispatch_method(this, 0x1008, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003", KeyCode, KeyData);
}

#pragma implementation_key(768)
inline HRESULT DAnim::_IDAViewerControlEvents::Error ( long HResult, _bstr_t ErrorString ) {
    return _com_dispatch_method(this, 0x1009, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0008", HResult, (BSTR)ErrorString);
}

#pragma implementation_key(769)
inline HRESULT DAnim::_IDAViewerControlEvents::Stop ( ) {
    return _com_dispatch_method(this, 0x100a, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(770)
inline HRESULT DAnim::_IDAViewerControlEvents::Pause ( ) {
    return _com_dispatch_method(this, 0x100b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(771)
inline HRESULT DAnim::_IDAViewerControlEvents::Resume ( ) {
    return _com_dispatch_method(this, 0x100c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
