// This file will be processed by the MIDL tool to
// produce the type library (DxtCompositorDll.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";
import "dxtrans.idl";

[
    uuid(BB44391C-6ABD-422f-9E2E-385C9DFF51FC),
    version(1.0),
    helpstring("DxtCompositorDll 1.0 Type Library")
]
library DxtCompositorDLLLib
{
    importlib("stdole2.tlb");

    [
	object,
	uuid(BB44391E-6ABD-422f-9E2E-385C9DFF51FC),
	dual,
	helpstring("IDxtCompositor Interface"),
	pointer_default(unique)
    ]
    interface IDxtCompositor : IDXEffect
    {
        [propget, id(1), helpstring("property OffsetX")] HRESULT OffsetX([out, retval] long *pVal);
        [propput, id(1), helpstring("property OffsetX")] HRESULT OffsetX([in] long newVal);
        [propget, id(2), helpstring("property OffsetY")] HRESULT OffsetY([out, retval] long *pVal);
        [propput, id(2), helpstring("property OffsetY")] HRESULT OffsetY([in] long newVal);
        [propget, id(3), helpstring("property Width")] HRESULT Width([out, retval] long *pVal);
        [propput, id(3), helpstring("property Width")] HRESULT Width([in] long newVal);
        [propget, id(4), helpstring("property Height")] HRESULT Height([out, retval] long *pVal);
        [propput, id(4), helpstring("property Height")] HRESULT Height([in] long newVal);
    };

    [
	uuid(BB44391D-6ABD-422f-9E2E-385C9DFF51FC),
	helpstring("DxtCompositor Class")
    ]
    coclass DxtCompositor
    {
	[default] interface IDxtCompositor;
    };
};
