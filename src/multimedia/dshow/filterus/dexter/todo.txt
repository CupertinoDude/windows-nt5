
Here is my attempt at a schedule.  Based on milestone date, it lists the things that will be done for that date, who is working on each thing, and things are numbered sort of by priority.


- Danny



THINGS TO WORRY ABOUT STARTING NOW
1-write a sample app/real video editor



END OF MARCH
Danny
*DONE* 1- Support slo-motion and fast forward of video, not just normal speed video clips
*DONE* 2- Allow the app to specify edit points at any arbitrary time (right now if they don't specify a "round number" the project won't play, but will hang)
3- Switch needs the allocator fixed to work with Mux filters on its output and other allocator magic
4- work with ASF guys to get their MUX registered properly to work with us and ICaptureGraphBuilder both
5- ASX reading and writing (instead of XML)
*DONE* 6- Holes in the timeline don't work yet... BLACK needs to be used
*DONE* 7- Holes in audio don't work yet... SILENCE needs to be used
8- .BMP .DIB .JPG .GIF still image sources need to be supported
Eric
1- the TLDB api's dont return any error codes when you do illegal things
*DONE* 2- TLDB clips need to be given an instantiated source filter right now... all clips should just be given a filename
3- remove hard coded media type references from the timeline, and finish implementing important parts of TLDB, and document which methods are done, and which are still not done, error check, so in theory, other MTypes could work
4- Remove hard coded media type references from RenderEngine, and finish implementing important parts, and document which methods are done, and which are still not done, error check, so in theory, other MTypes could work
5- Finish the media locator to find clips that move on their drive
*DONE* 6- support transition from A to B or B to A
7- support STATIC or VARYING Execute % in DXTs, and allow custom curves, not just linear
*DONE* 8- make compositions work in the timeline
*DONE* 9- make compositions work in the render engine
*DONE* 10- support for multiple streams of multiple types TLDB... maybe by having multiple trees per TL, with one media type per tree
11- DA sources can't be seeked yet
Xuping
1- resizer needs to not data copy if size doesn't change




END OF APRIL
Eric
1- Make Chroma/Luma/other keying DXTs work and be supported (maybe earlier)
Danny
1- Quality Management - switch drops frames to keep in real time
2- ASF reading and writing will be finished (dependency here)
3- allow netshow sources, or other existing source filters besides file sources - can't be seeked efficiently?
4- allow live sources as inputs, and stuff that can't be seeked at all




END OF JUNE

GENERAL
Eric
1- Completed TLDB API
2- Completed RenderEngine API
3- The render engine cache manager needs to be implemented (MONTHS of work here)
4- cutpoints, or allow each effect be specified twice (cutpoint or fast one for preview, slow one for offline)

Xuping
1- Reading Dib Sequences (foo000.bmp through foo999.bmp being a 1000 frame movie)
2- Writing Dib Sequences too
3- implement interpolating resizer... maybe preview uses fast resizer, offline uses interpolating one?
Danny
1- reuse sources and black/silence to save opening the same file 10 times??
2- dynamic reconnecting of sources so 100 files aren't opened at once (lots of work?)
3- Adobe wants a callback to tell them what piece of the timeline is currently being rendered so they can fill in bits they don't ask us to do
4- profile where time is spent to tell app the 10 slowest DXTs, for instance, to help it get real time performance.  also be able to tell app when a source or other component is responsible?

AUDIO+
Danny
1- Support slo/fast audio speeds too
2- support at least one specific scenario for non-video/audio for ASF
Xuping
1- We need KMixer working, or to write our own mixer (let's just write our own) and get support in TLDB, RenderEngine (I'll need to help her)
2- Support for changing audio volume over time

DXT
Xuping
1- somebody needs to write 30000 SMPTE wipe and other DXTs.
Eric
1- use procedural DXTs as a source?
2-support titling properly - we need a story here... just use DA??  (or is this just an external DXTransform or source filter, perhaps?)
3-implement our end after we work with DXT to have them register more info, like SMPTE #
4-implement our end after we work with DXT to make them support standard way of changing common parameters



THINGS FOR TED TO DO
1-push for the pinnacle thing... make them base on Dexter, get it shipped on Win2000C
2-find important, specific, non-audio/video scenarios using ASF we need to support
3-work with DA to allow import audio from DA scenes, not just video (DA to be fixed for this)
4-work with DA to route video into DA to use as effect (also requires DA changes)
5-work with DA to help them use dexter to do their video editing
6-work with DA and CORE to find improvement over AMSTREAM way of getting DShow data
7-help DXT, DSound, SonicFoundry come up with an audio FX model
8-work with DXT to have them register more info, like SMPTE #
9-work with DXT to make them support standard way of changing common parameters
10-help us come up with a titling story
11-keyframing story?
12-alpha/chroma keying story?
13-Get testers to profile DXTs and complain to paul which ones are slow with animated inputs and get them fixed
14-investigate how FIELD based support would work



THINGS I'M HAPPY TO PUNT FOR NOW
1- implement the audio FX model we come up with
2- AAF reading and writing
3- don't always use RGB32 and CDaudio as the format for the swithcher?  eg. if the project final format is RGB16, we can use RGB16 as our internal format.  For compressed output, RGB32 is probably fine...  biHeight < 0?
4- smart recompression?  will we actually do this?
5- support hearing the audio while you scrub?
6- support FIELD based video (we would be the first)
7- support for live scenarios, not just live sources: changing the timeline after it's been rendered without stopping, for instance for live commercial insertion


