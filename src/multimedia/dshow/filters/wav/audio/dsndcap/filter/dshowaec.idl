//------------------------------------------------------------------------------
// File: DShowASF.idl
//
// Desc: 
//
// Copyright (c) 1992-2000, Microsoft Corporation. All rights reserved.
//------------------------------------------------------------------------------


//#include <olectl.h>
import	"unknwn.idl";
import	"objidl.idl";
import	"strmif.idl";			// for media type and time definitions

cpp_quote("#if 0")
// This is temporary hack to get around the fact thatI don't know how to persuade
// MIDL to allow forward declarations.
typedef DWORD*    DSCBUFFERDESC;
typedef DWORD*    DSBUFFERDESC;
typedef DWORD*    LPLPDIRECTSOUNDCAPTURE;
typedef DWORD*    LPLPDIRECTSOUNDCAPTUREBUFFER;
typedef DWORD*    LPLPDIRECTSOUND;
typedef DWORD*    LPLPDIRECTSOUNDBUFFER;
cpp_quote ("#endif")
cpp_quote("#include <dsound.h>")

// CLSIDs for the audio filters
// {A18FC4A7-FA91-4aed-B023-FA1A50A85162}
cpp_quote("DEFINE_GUID(CLSID_DSoundCaptureFilter, 0xa18fc4a7, 0xfa91, 0x4aed, 0xb0, 0x23, 0xfa, 0x1a, 0x50, 0xa8, 0x51, 0x62);" )

// {555669DD-DCF9-49bb-8531-A28FF9CCFCDC}
cpp_quote("DEFINE_GUID(CLSID_AudioDuplexController, 0x555669dd, 0xdcf9, 0x49bb, 0x85, 0x31, 0xa2, 0x8f, 0xf9, 0xcc, 0xfc, 0xdc);" )
//struct DECLSPEC_UUID("555669DD-DCF9-49bb-8531-A28FF9CCFCDC") CLSID_AudioDuplexController;

//struct DECLSPEC_UUID("A18FC4A7-FA91-4aed-B023-FA1A50A85162") DSOUND_CAPTURE_FILTER;
//#define CLSID_DSoundCaptureFilter (__uuidof(DSOUND_CAPTURE_FILTER))


cpp_quote( "EXTERN_GUID( IID_IAMAudioDuplexController,0x75950320, 0x8872, 0x49d3, 0xb6, 0xb9, 0xb9, 0x3f, 0xc5, 0xc3, 0x1, 0x6c );" )
cpp_quote( "EXTERN_GUID( IID_IAMAudioDeviceConfig,0x4ec0cf93, 0x3a74, 0x4c7a, 0x95, 0x33, 0x7f, 0xae, 0xa7, 0xb, 0x3d, 0x4e );" )
cpp_quote( "EXTERN_GUID( IID_IAMAudioDeviceControl,0x96e9f259, 0xdff4, 0x4718, 0x85, 0xa8, 0xf1, 0x61, 0xd2, 0x5, 0xd0, 0xd8 );" )
cpp_quote( "EXTERN_GUID( IID_IAMSilenceControl,0xa91b3c5a, 0x3822, 0x4578, 0xa4, 0xbe, 0x8a, 0x3b, 0x22, 0xaa, 0xcf, 0xab );" )

interface IAMAudioDuplexController;
interface IAMAudioDeviceConfig;
interface IAMAudioDeviceControl;
interface IAMSilenceControl;


// This interface is supported by the duplex controller. It only supports 
// dsound now.
typedef enum EFFECTS
{
    EFFECTS_AEC = 0,
    EFFECTS_AGC,
    EFFECTS_NS,
    EFFECTS_LAST

} EFFECTS;

typedef enum tagAudioDeviceProperty
{
    AudioDevice_DuplexMode,
    AudioDevice_AutomaticGainControl,
    AudioDevice_AcousticEchoCancellation

} AudioDeviceProperty;

typedef enum tagAmAudioDeviceControlFlags
{
	AmAudioDeviceControl_Flags_None		= 0,
	AmAudioDeviceControl_Flags_Auto		= 0x1,
	AmAudioDeviceControl_Flags_Manual	= 0x2
}	AmAudioDeviceControlFlags;

// the data structure to describe a audio device.
cpp_quote("typedef struct tagAudioDeviceInfo")
cpp_quote("{")
cpp_quote("    UINT    WaveID;")
cpp_quote("    GUID    DSoundGUID;")
cpp_quote("	WCHAR   szDeviceDescription[MAX_PATH];")
cpp_quote("} AudioDeviceInfo, *PAudioDeviceInfo;")


// device enumeration functions exposed by the tapi audio capture dll.
cpp_quote("typedef HRESULT (WINAPI *PFNAudioGetDeviceInfo)(")
cpp_quote("    OUT DWORD * pdwNumDevices,")
cpp_quote("    OUT AudioDeviceInfo ** ppDeviceInfo")
cpp_quote("    );")

cpp_quote("typedef HRESULT (WINAPI *PFNAudioReleaseDeviceInfo)(")
cpp_quote("    IN AudioDeviceInfo * ppDeviceInfo")
cpp_quote("    );")

// Interface to control the full-duplex audio controller
[
object,
uuid(75950320-8872-49d3-B6B9-B93FC5C3016C),
pointer_default(unique)
]
interface IAMAudioDuplexController : IUnknown
{
    HRESULT SetCaptureBufferInfo (
        [in]  GUID *          pDSoundCaptureGUID,
        [in]  DSCBUFFERDESC * pDescription
        );

    HRESULT SetRenderBufferInfo (
        [in]  GUID *          pDSoundRenderGUID,
        [in]  DSBUFFERDESC *  pDescription,
        [in]  HWND            hWindow,
        [in]  DWORD           dwCooperateLevel
        );

    HRESULT EnableEffects (
        [in]  DWORD           dwNumberEffects,
        [in]  EFFECTS *       pEffects,
        [in]  BOOL *          pfEnable
        );

    HRESULT GetCaptureDevice (
        LPLPDIRECTSOUNDCAPTURE        ppDSoundCapture,
        LPLPDIRECTSOUNDCAPTUREBUFFER  ppCaptureBuffer
        );

    HRESULT GetRenderDevice (
        LPLPDIRECTSOUND        ppDirectSound,
        LPLPDIRECTSOUNDBUFFER  ppRenderBuffer
        );

    HRESULT ReleaseCaptureDevice ();

    HRESULT ReleaseRenderDevice ();
};

// Interface to select the device type
[
object,
uuid(4EC0CF93-3A74-4c7a-9533-7FAEA70B3D4E),
pointer_default(unique)
]
interface IAMAudioDeviceConfig : IUnknown
{
    HRESULT SetDeviceID(
        [in]  REFGUID pDSoundGUID,
        [in]  UINT    uiWaveID
        );

    HRESULT SetDuplexController(
        [in]  IAMAudioDuplexController * pIAudioDuplexController
        );
};

// Interface to select the device type
[
object,
uuid(96E9F259-DFF4-4718-85A8-F161D205D0D8),
pointer_default(unique)
]
interface IAMAudioDeviceControl : IUnknown
{
    HRESULT GetRange(
        [in] AudioDeviceProperty Property, 
        [out] long *plMin, 
        [out] long *plMax, 
        [out] long *plSteppingDelta, 
        [out] long *plDefault, 
        [out] long *plFlags
        );

    HRESULT Get(
        [in] AudioDeviceProperty Property, 
        [out] long *plValue, 
        [out] long *plFlags
        );

    HRESULT Set(
        [in] AudioDeviceProperty Property, 
        [in] long lValue, 
        [in] long lFlags
        );
};

// Interface to set Silence parameters
[
object,
uuid(A91B3C5A-3822-4578-A4BE-8A3B22AACFAB),
pointer_default(unique)
]
interface IAMSilenceControl : IUnknown
{
    HRESULT SetSilenceDetection([in] BOOL fEnable) ;
    HRESULT GetSilenceDetection([out] BOOL *pfEnable) ;

    HRESULT SetSilenceCompression([in] BOOL fEnable) ;
    HRESULT GetSilenceCompression([out] BOOL *pfEnable) ;

    HRESULT GetAudioLevel(
        [out] LONG *plAudioLevel
        ) ;

    HRESULT GetAudioLevelRange(
        [out] LONG *plMin, 
        [out] LONG *plMax, 
        [out] LONG *plSteppingDelta
        ) ;

    HRESULT SetSilenceLevel(
        [in] LONG lSilenceLevel,
        [in] LONG lFlags
        ) ;

    HRESULT GetSilenceLevel(
        [out] LONG *plSilenceLevel,
        [out] LONG * pFlags
        ) ;

    HRESULT GetSilenceLevelRange(
        [out] LONG *plMin, 
        [out] LONG *plMax, 
        [out] LONG *plSteppingDelta, 
        [out] LONG *plDefault,
        [out] LONG * pFlags
        ) ;
};
