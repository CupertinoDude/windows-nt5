//==========================================================================;
//
//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
//  PURPOSE.
//
//  Copyright (c) 1992 - 1999  Microsoft Corporation.  All Rights Reserved.
//
//--------------------------------------------------------------------------;

// 
// Markers Interfaces
//

// forward declarations - these are the interfaces declared in this file

import "unknwn.idl";
import "objidl.idl";
//import "strmif.idl";

interface IMarkerSource;
interface IMarkerSink;
interface IEnumCategories;

struct MARKERINFO {
    ULONG       ulSize;
    GUID        categoryId;
    LPWSTR      descriptionString;
    ULONGLONG   timeStart;
    ULONGLONG   timeEnd;
    ULONG       streamId;
    struct MARKERINFO   *pPrevMarker;
    struct MARKERINFO   *pNextMarker;
};

struct CATEGORYINFO {
    ULONG       ulSize;
    GUID        categoryId;
    LPWSTR      categoryName;
    GUID        parentCategoryId;
    ULONGLONG   estFrequency;
};

//==========================================================================
//==========================================================================
// IMarkerSource - interface for filters which generate markers
//==========================================================================
//==========================================================================

[
object,
uuid(CC913DA4-D8E7-11D2-A4FF-00C04F79A597),
pointer_default(unique)
]

interface IMarkerSource : IUnknown {
	import "unknwn.idl";

	// EnumCategories - Returns an interface to enumerate the categories
	//                  necessary for markers generated by this filter.
	//
	// Parameters:
	//		ppEnum - address of pointer to receive IEnumCategories interface

	HRESULT EnumCategories( [out] IEnumCategories **ppEnum );

	// Advise - Informs the filter of an object which wished to be informed
	//          of new markers.
	//
	// Parameters:
	//      pSink - IMarkerSink interface to receive new markers
	//      pulCookie - pointer to receive cookie for this advise

    HRESULT Advise( [in] IMarkerSink *pSink, [out] ULONG *pulCookie );

	// Unadvise - Informs the filter to stop notifications
	//
	// Parameters:
	//      ulCookie - cookie to identify connection to be severed

    HRESULT Unadvise( [in] ULONG ulCookie );
}

//==========================================================================
//==========================================================================
//	IAnalyzerOutputPin interface - This interface will be supported by the
//  output pins of the analyzers directly upstream of the delay filter to
//  negotiate stream specific information like bitrates, presence/absence
//  of sync points etc.
//==========================================================================
//==========================================================================
[
object,
uuid(F882540E-D8E8-11d2-A4FF-00C04F79A597),
pointer_default(unique)
]

interface IMarkerSink : IUnknown {
	import "unknwn.idl";

	HRESULT	Disconnect( [in] IMarkerSource *pSource );
	HRESULT	NewMarker( [in] struct MARKERINFO *pMarker );
	HRESULT StartMarker( [in] struct MARKERINFO *pMarker );
	HRESULT EndMarker( [in] struct MARKERINFO *pMarker );
}

//==========================================================================
//==========================================================================
// IDelayStreamer - This interface will be supported by each streamer within
// the delay filter.  Outside objects can get a pointer to this by calling
// the GetStreamer method on one of the delay filter's output pins.  This
// interface allows seeking in the circular buffer, setting rates etc.
//==========================================================================
//==========================================================================
[
object,
uuid(28172230-D8E9-11D2-A4FF-00C04F79A597),
pointer_default(unique)
]

interface IEnumCategories : IUnknown {
	import "unknwn.idl";

	HRESULT Clone( [out] IEnumCategories **ppEnum );
	HRESULT	Next( [in] ULONG count, [out] struct CATEGORYINFO *pInfo, [out] ULONG *pDelivered );
	HRESULT	Reset( void );
	HRESULT	Skip( [in] ULONG count );
}

