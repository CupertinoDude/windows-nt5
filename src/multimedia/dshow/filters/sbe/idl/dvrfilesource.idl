//------------------------------------------------------------------------------
// File: DVRFileSource.idl
//
// Desc: DVR File Source interface
//
// Copyright (c) 2001, Microsoft Corporation.  All rights reserved.
//------------------------------------------------------------------------------


import "unknwn.idl";

typedef unsigned __int64 QWORD;

interface IDVRFileSource;
interface IDVRFileSource2;
interface IDVRSourceAdviseSink;
interface IDVRAsyncReader ;

[
    object,
    uuid(a42bf84c-33c1-4a55-a7ca-2c42e21160bb),
    pointer_default(unique),
    local
]
interface IDVRFileSource : IUnknown {

    // Opens a file. Calls Close() internally if a file was already open.
    // Waits for up to dwTimeOut milliseconds for the file to be created
    // (if it does not exist) and the memory mapping to be created (if
    // it does not exist).
    //
    // This operation could pend the calling thread for beyond dwTimeOut msec
    // if the file is opened successully; the thread will be pended until the
    // file being opened is ready to be read.
    //
    // An event handle may optionally be provided. If a handle is provided,
    // it is duplicated  and calls that can be cancelled (currently, only
    // GetNextSample) check whether this handle is signalled. Otherwise, a
    // handle is created and the client can call Cancel() and ResetCancel()
    // to set and reset the event. (The client can call Cancel() and ResetCancel()
    // even if it provides an event handle.)
    HRESULT Open(LPCWSTR pwszFileName,
                 HANDLE  hEvent,        // may be NULL
                 DWORD   dwTimeOut /* in milliseconds */);

    // Closes an open file. Another file may be opened after this.
    HRESULT Close();

    // Returns a non-zero value in *pbLiveFile iff the file is live,
    // i.e., the writer has the file open for writing. Returns a
    // non-zero value in pbShared iff the index and other header bytes
    // are being fetched from the shared memory section set up by the
    // writer
    HRESULT IsFileLive([out] BOOL* pbLiveFile, [out] BOOL* pbShared);

    // Returns the current size of the file excluding the index data;
    // i.e., size includes only ASF header + data. Should be called only
    // if the file is live.
    HRESULT GetFileSize([out] QWORD* pqwFileSize);

    // Returns the last written timestamp. Should be called only if
    // the file is live
    HRESULT GetLastTimeStamp([out] QWORD* pcnsLastTimeStamp);

    // Cancels all pended operations and subsequent operations that pend.
    // Currently, the only operation that may be cancelled is IStream::Read
    // and it will be cancelled only if the reader is blocked waiting on
    // the writer to write the bytes it needs (so Cancel on fully written
    // files has no effect).
    //
    // If the caller is pended in Read, the read will fail; however
    // subsequent seeks and reads will not fail just because the operation
    // was cancelled.
    HRESULT Cancel();

    // Cancels a previously issued call to Cancel
    HRESULT ResetCancel();
}

[
    object,
    uuid(42FBFC99-4CD2-413b-87BE-AB73240A0657),
    pointer_default(unique),
    local
]
interface IDVRFileSource2 : IDVRFileSource {
    //  sets an async IO writer; callee should ref the interface
    HRESULT
    SetAsyncIOReader (
        [in]    IDVRAsyncReader *   pIDVRAsyncReader
        ) ;
} ;

[
    object,
    uuid(5dc4077f-c6b3-4786-8d8c-6a0869565387),
    pointer_default(unique),
    local
]
interface IDVRSourceAdviseSink : IUnknown {

    HRESULT ReadIsGoingToPend();

};


[
    object,
    uuid(4FF0994F-4602-4c3b-83AE-2B53DC550A31),
    pointer_default(unique),
    local
]
interface IDVRAsyncReader : IUnknown {

    HRESULT
    OpenFile (
        [in]    GUID *  pguidWriterId,              //  if NULL, then there's no writer to associate with
        [in]    LPCWSTR pszFilename,                //  target file
        [in]    DWORD   dwFileSharingFlags,         //  file sharing flags
        [in]    DWORD   dwFileCreation              //  file creation
        ) ;

    HRESULT
    CloseFile (
        ) ;

    HRESULT
    ReadBytes (
        [in][out]   DWORD *     pdwLength,
        [out]       BYTE *      pbBuffer
        ) ;

    //  1. it is legal to specify a position > than current max of the file;
    //      when this happens, the position is snapped to the EOF, and the
    //      EOF at time-of-call, is returned in the pliSeekedTo member;
    //  2. if (* pliSeekTo) == 0, (* pliSeekedTo) will return the time-of-call
    //      EOF
    //  3. (* pliSeekTo) need not be sector-aligned
    HRESULT
    Seek (
        [in]    LARGE_INTEGER * pliSeekTo,
        [in]    DWORD           dwMoveMethod,   //  FILE_BEGIN, FILE_CURRENT, FILE_END
        [out]   LARGE_INTEGER * pliSeekedTo     //  can be NULL
        ) ;
} ;

// The registry keys should be opened and closed by the caller; they must
// remain open for the lifetime of the DVR sink
cpp_quote( "HRESULT STDMETHODCALLTYPE DVRCreateDVRFileSource(HKEY hDvrKey, HKEY hDvrIoKey, DWORD dwNumSids, PSID* ppSids, IDVRFileSource** ppDVRFileSource, IDVRSourceAdviseSink*  pDVRSourceAdviseSink /* OPTIONAL */ );")
