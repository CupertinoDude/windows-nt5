
/*++

    Copyright (c) 2001 Microsoft Corporation

    Module Name:

        dvrdspriv.idl

    Abstract:

        This module the dvr/ts interface definitions & CLSIDs, private

    Author:

        Matthijs Gates  (mgates)

    Revision History:

        30-Apr-2001     created

--*/

import "unknwn.idl" ;
import "dvrioidl.idl";
import "wtypes.idl" ;
import "objidl.idl";
import "strmif.idl" ;

//  private interfaces
interface   IDVRInputPins ;             //  retrieves input pin data
interface   IDVRMpeg2VideoStreamStats ; //  mpeg-2 video stream stats
interface   IDVRStreamSinkPriv ;        //  DVRStreamSource QIs IDVRStreamSink for
interface   IDVRPlayrate ;              //  trick mode playrate

cpp_quote ("// {19523A4F-66F9-4621-957E-558672100D57}")
cpp_quote ("DEFINE_GUID(CLSID_DVRStreamThrough,")
cpp_quote ("0x19523a4f, 0x66f9, 0x4621, 0x95, 0x7e, 0x55, 0x86, 0x72, 0x10, 0xd, 0x57);")

cpp_quote ("// {23A3DB10-4ECC-4f6f-8A63-EDB49ABD96EE}")
cpp_quote ("DEFINE_GUID(CLSID_DVRPlayProp,")
cpp_quote ("0x23a3db10, 0x4ecc, 0x4f6f, 0x8a, 0x63, 0xed, 0xb4, 0x9a, 0xbd, 0x96, 0xee);")

cpp_quote ("// {8CC6865F-1FA0-4f5e-B200-4E2A7D403E82}")
cpp_quote ("DEFINE_GUID(CLSID_DVRStreamSourceProp, ")
cpp_quote ("0x8cc6865f, 0x1fa0, 0x4f5e, 0xb2, 0x0, 0x4e, 0x2a, 0x7d, 0x40, 0x3e, 0x82);")

cpp_quote ("// {0197f357-3871-4ebb-b01b-3545578d6929}")
cpp_quote ("DEFINE_GUID(CLSID_DVRStreamSinkProp, ")
cpp_quote ("0x0197f357, 0x3871, 0x4ebb, 0xb0, 0x1b, 0x35, 0x45, 0x57, 0x8d, 0x69, 0x29);")

//  ============================================================================
//  INSSBuffer3 attributes

//  -----------------------------------------------
//  standard DShow attributes;
//  fixed size
//  INSSBUFFER3PROP_SBE_ATTRIB struct describes the contents

cpp_quote ("// {FD3CC02A-06DB-4cfa-801C-7212D38745E4}")
cpp_quote ("DEFINE_GUID(INSSBuffer3Prop_SBE_Attributes,")
cpp_quote ("0xfd3cc02a, 0x6db, 0x4cfa, 0x80, 0x1c, 0x72, 0x12, 0xd3, 0x87, 0x45, 0xe4);")

cpp_quote ("#define SBE_VERSION_0                   0x00000001")     // windows XP sp1
cpp_quote ("#define SBE_VERSION_1                   0x00000002")     // Future use
cpp_quote ("#define SBE_VERSION_2                   0x00000003")     // Future use
cpp_quote ("#define SBE_VERSION_3                   0x00000004")     // Future use

cpp_quote ("#define SBE_CURRENT_VERSION             SBE_VERSION_0")  // Where there is revision, change this.

cpp_quote ("#define INIT_SBE_ATTRIB_VERSION(flag)   { flag = SBE_CURRENT_VERSION; }")

cpp_quote ("#define SBE_SYNCPOINT          0x00000001")  // Dshow's
cpp_quote ("#define SBE_DISCONTINUITY      0x00000002")  // DShow's

cpp_quote ("#define SET_SBE_SYNCPOINT(flag,f)      { if (f) (flag) |= SBE_SYNCPOINT ; else (flag) &= ~SBE_SYNCPOINT ; }")
cpp_quote ("#define IS_SBE_SYNCPOINT(flag)         (((flag) & SBE_SYNCPOINT) ? TRUE : FALSE)")

cpp_quote ("#define SET_SBE_DISCONTINUITY(flag,f)  { if (f) (flag) |= SBE_DISCONTINUITY ; else (flag) &= ~SBE_DISCONTINUITY ; }")
cpp_quote ("#define IS_SBE_DISCONTINUITY(flag)     (((flag) & SBE_DISCONTINUITY) ? TRUE : FALSE)")

cpp_quote ("#define NEXT_COUNTER_VAL(counter)     ((counter) + 1)")
cpp_quote ("#define PREV_COUNTER_VAL(counter)     ((counter) - 1)")

cpp_quote ("#define MUXED_STREAM_STATS_PACKET_RATE(dwStreamStats,packets_per_sec)    \\")
cpp_quote ("            ((dwStreamStats & 0xffff0000) | (packets_per_sec & 0x0000ffff))")

cpp_quote ("#define GET_MUXED_STREAM_STATS_PACKET_RATE(dwStreamStats)     ((WORD) (dwStreamStats & 0x0000ffff))")

//  see AM_SAMPLE2_PROPERTIES for member descriptions
typedef struct {
    DWORD           dwVersion;              //  Version of the code when data was written.
    REFERENCE_TIME  rtStart ;               //  -1 if not set
    REFERENCE_TIME  rtStop ;                //  -1 if not set
    DWORD           dwTypeSpecificFlags ;
    DWORD           dwStreamId ;
    DWORD           dwFlags;                //  Extra local flags, like SBE_SYNCPOINT, SBE_DISCONTINUITY
    DWORD           dwCounter;              //  Continuity counter
    DWORD           dwMuxedStreamStats ;    //  packets/sec, etc.. (aggregate of the muxed streams)
    DWORD           dwReserved;             //  Future use
} INSSBUFFER3PROP_SBE_ATTRIB ;

//  -----------------------------------------------
//  used for dynamic format changes
//  variable size
//  buffer is of format AM_MEDIA_TYPE
//  if AM_MEDIA_TYPE.pbFormat is non-NULL is shall be ignored, and a format
//   block of size AM_MEDIA_TYPE.cbFormat shall immediately follow the contents
//   of the AM_MEDIA_TYPE structure

cpp_quote ("// {1135BEB7-3A39-478a-98D9-15C76B00EB69}")
cpp_quote ("DEFINE_GUID(INSSBuffer3Prop_DShowNewMediaType,")
cpp_quote ("0x1135beb7, 0x3a39, 0x478a, 0x98, 0xd9, 0x15, 0xc7, 0x6b, 0x0, 0xeb, 0x69);")

//  -----------------------------------------------
//  used to store mpeg-2 elementary streams in ASF files
//  accomodates out-of-order & missing presentation time stamps
//  fixed size (64 bits)
//  LONGLONG value is the property; subsequently referred to as "PTS"
//  PTS is a presentation timestamp
//  PTS is a 10 MHz clock (this is different from PES's 90 KHz counter)
//  PTS shall have the same meaning as PTS in a PES header i.e. it shall apply
//   to the next access unit; access unit to which it applies need not be
//   aligned with start of INSSBuffer3 payload
//  PTS shall not be stored in INSSBuffer3 for samples that do not have a PTS
//   associated with them

cpp_quote ("// {6CFFF05B-9140-4c0d-ABCF-AE98122B2E95}")
cpp_quote ("DEFINE_GUID(INSSBuffer3Prop_Mpeg2ElementaryStream,")
cpp_quote ("0x6cfff05b, 0x9140, 0x4c0d, 0xab, 0xcf, 0xae, 0x98, 0x12, 0x2b, 0x2e, 0x95);")

//  -----------------------------------------------
//  this data structure is used to measure perf

cpp_quote ("// {FDB34F1D-AD97-4ccd-9757-BE78BE3C2C3B}")
cpp_quote ("DEFINE_GUID(INSSBuffer3Prop_Perf,")
cpp_quote ("0xfdb34f1d, 0xad97, 0x4ccd, 0x97, 0x57, 0xbe, 0x78, 0xbe, 0x3c, 0x2c, 0x3b);")

typedef struct {
    ULONGLONG   cMuxPacketCount ;       //  absolute counter
    DWORD       cMillisAtWrite ;        //  absolute time, in ms, at time of write
    int         iStream ;               //  stream index
    BOOL        fDiscontinuity ;        //  discontinuity flag
    BOOL        fTimestamped ;          //  timestamped
    DWORD       cBytes ;                //  size of sample in bytes
    DWORD       dwReserved1 ;
    DWORD       dwReserved2 ;
} INSSBUFFER3PROP_PERF ;

//  ============================================================================
//  INSSBuffer3 attributes
//  ============================================================================


// Flags for IDVRStreamSink::CreateRecorder
cpp_quote("#define DVR_RECORDING_FLAG_MULTI_FILE_RECORDING  (1)")
cpp_quote("#define DVR_RECORDING_FLAG_PERSISTENT_RECORDING  (2)")

/*++
    ============================================================================
    ============================================================================
    IDVREnumInputPins

    private interface & data
--*/

//  supreme hack job to get around the media type validation in the WMSDK
cpp_quote ("// {93ACE2B9-00DB-4020-A799-BC7E8EC0A2FD}")
cpp_quote ("DEFINE_GUID(GENERIC_MEDIATYPE_Video,")
cpp_quote ("0x93ace2b9, 0xdb, 0x4020, 0xa7, 0x99, 0xbc, 0x7e, 0x8e, 0xc0, 0xa2, 0xfd);")

cpp_quote ("// {31178C9D-03E1-4528-B582-3DF9DB22F503}")
cpp_quote ("DEFINE_GUID(GENERIC_MEDIATYPE_Audio,")
cpp_quote ("0x31178c9d, 0x3e1, 0x4528, 0xb5, 0x82, 0x3d, 0xf9, 0xdb, 0x22, 0xf5, 0x3);")

[
    object,
    uuid(62e155b7-5455-4af5-a4be-284bc1e51972),
    pointer_default(unique)
]
interface IDVRInputPins : IUnknown
{
    HRESULT
    GetPinData (
        [in]    int                     iIndex,
        [out]   AM_MEDIA_TYPE **        ppConnectionMediaType,  //  NULL if not connected
        [out]   ALLOCATOR_PROPERTIES ** ppAllocatorProperties   //  callee allocates
        ) ;
} ;

[
    object,
    uuid(600fd4ea-cf1a-4c39-9914-5e0f0b7586c1),
    pointer_default(unique)
]
interface IDVRStreamSinkPriv : IUnknown
{
    HRESULT
    GetDVRRingBufferWriter (
       [out]    IDVRRingBufferWriter ** ppIDVRRingBufferWriter
       ) ;
} ;

cpp_quote ("#define IMPLEMENT_IDVRSTREAMSINKPRIV()  \\")
cpp_quote ("virtual STDMETHODIMP GetDVRRingBufferWriter (IDVRRingBufferWriter **) ; ")

//  ----------------------------------------------------------------------------
//  mpeg-2 video frame analysis

cpp_quote ("// {FB64825E-498C-45e8-ADD4-37E0C4FC68A6}")
cpp_quote ("DEFINE_GUID(CLSID_DVRMpeg2VideoStreamAnalysisStats,")
cpp_quote ("0xfb64825e, 0x498c, 0x45e8, 0xad, 0xd4, 0x37, 0xe0, 0xc4, 0xfc, 0x68, 0xa6);")

[
    object,
    uuid(fbe0b789-c2d8-4313-b8a1-0883b0e1a8f8),
    pointer_default(unique)
]
interface IDVRMpeg2VideoStreamStats : IUnknown
{
    HRESULT
    GetFrameCounts (
        [out]   ULONGLONG * pull_I_Frames_Observed,
        [out]   ULONGLONG * pull_P_Frames_Observed,
        [out]   ULONGLONG * pull_B_Frames_Observed,
        [out]   ULONGLONG * pull_P_Frames_Flagged,
        [out]   ULONGLONG * pull_B_Frames_Flagged
        ) ;

    HRESULT
    GetObservedGOPHeaderCount (
        [out]   ULONGLONG * pull_GOPHeaders_Observed
        ) ;

    HRESULT
    GetFrameRate (
        [out]   ULONGLONG * pullSequenceHeaders,
        [out]   double *    pdFrameRate
        ) ;

    HRESULT
    GetGOPBoundariesFlagged (
        [out]   ULONGLONG * pull_GOPBoundariesFlagged
        ) ;

    HRESULT
    Enable (
        [in, out]   BOOL *  pfEnable
        ) ;

    HRESULT
    Reset (
        ) ;
} ;

cpp_quote ("#define DECLARE_IDVRMPEG2VIDEOSTREAMSTATS() \\")
cpp_quote ("virtual STDMETHODIMP GetFrameCounts (ULONGLONG *, ULONGLONG *, ULONGLONG *, ULONGLONG *, ULONGLONG *) ; \\")
cpp_quote ("virtual STDMETHODIMP GetObservedGOPHeaderCount (ULONGLONG *) ; \\")
cpp_quote ("virtual STDMETHODIMP GetFrameRate (ULONGLONG *, double *) ; \\")
cpp_quote ("virtual STDMETHODIMP GetGOPBoundariesFlagged (ULONGLONG *) ; \\")
cpp_quote ("virtual STDMETHODIMP Enable (BOOL *) ; \\")
cpp_quote ("virtual STDMETHODIMP Reset () ;")

//  ----------------------------------------------------------------------------
//  receiver-side stats

cpp_quote ("// {EC00BA63-C73A-4679-AC8D-69366C766989}")
cpp_quote ("DEFINE_GUID(CLSID_DVRReceiverSideStats, ")
cpp_quote ("0xec00ba63, 0xc73a, 0x4679, 0xac, 0x8d, 0x69, 0x36, 0x6c, 0x76, 0x69, 0x89);")

[
    object,
    uuid(d0e0c292-1c22-48c6-8ee3-c4a84ee2202d),
    pointer_default(unique)
]
interface IDVRReceiverStats : IUnknown
{
    HRESULT
    GetStatsMaxStreams (
        [out]   int *   piMaxStreams
        ) ;

    HRESULT
    GetStreamStats (
        [in]    int                 iStreamIndex,               //  0-based
        [out]   ULONGLONG *         pullMediaSamplesIn,         //  media samples received
        [out]   ULONGLONG *         pullTotalBytes,             //  total bytes received
        [out]   ULONGLONG *         pullDiscontinuities,        //  discontinuities (flags)
        [out]   ULONGLONG *         pullSyncPoints,             //  sync points (flags)
        [out]   REFERENCE_TIME *    prtLast,                    //  last PTS
        [out]   ULONGLONG *         pullWriteFailures           //  failed writes
        ) ;

    HRESULT
    Enable (
        [in, out]   BOOL *  pfEnable
        ) ;

    HRESULT
    Reset (
        ) ;
} ;

cpp_quote ("#define DECLARE_IDVRRECEIVERSTATS() \\")
cpp_quote ("virtual STDMETHODIMP GetStatsMaxStreams (int *) ;   \\")
cpp_quote ("virtual STDMETHODIMP GetStreamStats (int, ULONGLONG *, ULONGLONG *, ULONGLONG *, ULONGLONG *, REFERENCE_TIME *, ULONGLONG *) ; \\")
cpp_quote ("virtual STDMETHODIMP Enable (BOOL *) ; \\")
cpp_quote ("virtual STDMETHODIMP Reset () ;")

[
    object,
    uuid(b0f879b6-8ef1-4bb0-ad30-31cb0cee741f),
    pointer_default(unique)
]
interface IDVRAnalysisMpeg2RecvStats : IUnknown
{
    HRESULT
    GetMpeg2VideoFrameStats (
        [out]   ULONGLONG * pull_GOP_Boundaries,
        [out]   ULONGLONG * pull_P_Frames,
        [out]   ULONGLONG * pull_B_Frames
        ) ;

    HRESULT
    GetMpeg2VideoStreamByteStats (
        [out]   ULONGLONG * pull_I_FrameBytesTotal,     //  GOP header + I-frame
        [out]   ULONGLONG * pull_P_FrameBytesTotal,     //  P-frame
        [out]   ULONGLONG * pull_B_FrameBytesTotal      //  B-frame
        ) ;

    HRESULT
    GetMpeg2VideoFrameRate (
        [out]   double *    pdFrameRate
        ) ;
} ;

cpp_quote ("#define DECLARE_IDVRANALYSISMPEG2RECVSTATS() \\")
cpp_quote ("virtual STDMETHODIMP GetMpeg2VideoFrameStats (ULONGLONG *, ULONGLONG *, ULONGLONG *) ; \\")
cpp_quote ("virtual STDMETHODIMP GetMpeg2VideoStreamByteStats (ULONGLONG *, ULONGLONG *, ULONGLONG *) ; \\")
cpp_quote ("virtual STDMETHODIMP GetMpeg2VideoFrameRate (double *) ;")

//  ----------------------------------------------------------------------------
//  sender-side stats

cpp_quote ("// {215B77BA-853F-48c4-8DC4-024E0D68A812}")
cpp_quote ("DEFINE_GUID(CLSID_DVRSenderSideStats, ")
cpp_quote ("0x215b77ba, 0x853f, 0x48c4, 0x8d, 0xc4, 0x2, 0x4e, 0xd, 0x68, 0xa8, 0x12);")

[
    object,
    uuid(D6194C9D-D3A8-4034-8268-E8BF25EAFC4E),
    pointer_default(unique)
]
interface IDVRSenderStats : IUnknown
{
    HRESULT
    GetStatsMaxStreams (
        [out]   int *   piMaxStreams
        ) ;

    HRESULT
    GetStreamStats (
        [in]    int                 iStreamIndex,               //  0-based
        [out]   ULONGLONG *         pullMediaSamplesOut,        //  media samples sent
        [out]   ULONGLONG *         pullTotalBytes,             //  total bytes sent
        [out]   ULONGLONG *         pullDiscontinuities,        //  discontinuities (flags)
        [out]   ULONGLONG *         pullSyncPoints,             //  sync points (flags)
        [out]   REFERENCE_TIME *    prtLastNormalized,          //  last normalized PTS
        [out]   REFERENCE_TIME *    prtRefClockOnLastPTS,       //  IRefClock sampled-timed at last PTS
        [out]   REFERENCE_TIME *    prtBufferingLastPTS,        //  observed downstream buffering
        [out]   ULONGLONG *         pullUnderflows,             //  stale PTSs
        [out]   LONG *              plMediaSamplesOutstanding,  //  media samples outstanding i.e. not in the available pool
        [out]   LONG *              plMediaSamplePoolSize       //  includes those outstanding
        ) ;

    HRESULT
    GetGlobalStats (
        [out]   REFERENCE_TIME *    prtNormalizer,              //  normalizing val
        [out]   REFERENCE_TIME *    prtPTSBase,                 //  timestamp baseline
        [out]   DWORD *             pdwBufferPoolAvailable,     //  currently available
        [out]   DWORD *             pdwBufferPoolCur,           //  current buffer pool size
        [out]   DWORD *             pdwBufferPoolMax,           //  max buffer pool size
        [out]   ULONGLONG *         pullReadFailures,           //  failed reads
        [out]   ULONGLONG *         pullUnderflows,             //  stale PTSs,
        [out]   REFERENCE_TIME *    prtTotalPaused
        ) ;

    HRESULT
    GetClockSlaving (
        [out]   ULONGLONG * pullInBoundsBrackets,
        [out]   ULONGLONG * pullOutOfBoundsBrackets,
        [out]   ULONGLONG * pullResets,
        [out]   BOOL *      pfSlaving,
        [out]   BOOL *      pfSettling,
        [out]   double *    pdLastBracketScale,
        [out]   double *    pdInUseScale
        ) ;

    HRESULT
    GetIRefClock (
        [out]   ULONGLONG * pullQueuedAdvises,
        [out]   ULONGLONG * pullSignaledAdvises,
        [out]   ULONGLONG * pullStaleAdvises
        ) ;

    HRESULT
    Enable (
        [in, out]   BOOL *  pfEnable
        ) ;

    HRESULT
    Reset (
        ) ;
} ;

cpp_quote ("#define DECLARE_IDVRSENDERSTATS() \\")
cpp_quote ("virtual STDMETHODIMP GetStatsMaxStreams (int *) ;   \\")
cpp_quote ("virtual STDMETHODIMP GetStreamStats (int, ULONGLONG *, ULONGLONG *, ULONGLONG *, ULONGLONG *, REFERENCE_TIME *, REFERENCE_TIME *, REFERENCE_TIME *, ULONGLONG *, LONG *, LONG *) ; \\")
cpp_quote ("virtual STDMETHODIMP GetGlobalStats (REFERENCE_TIME *, REFERENCE_TIME *, DWORD *, DWORD *, DWORD *, ULONGLONG *, ULONGLONG *, REFERENCE_TIME *) ; \\")
cpp_quote ("virtual STDMETHODIMP GetClockSlaving (ULONGLONG *, ULONGLONG *, ULONGLONG *, BOOL *, BOOL *, double *, double *) ;   \\")
cpp_quote ("virtual STDMETHODIMP GetIRefClock (ULONGLONG *, ULONGLONG *, ULONGLONG *) ; \\")
cpp_quote ("virtual STDMETHODIMP Enable (BOOL *) ; \\")
cpp_quote ("virtual STDMETHODIMP Reset () ;")

//  ----------------------------------------------------------------------------
//  PVRIO counters

cpp_quote ("// {4582746F-473B-4022-A7E9-887CBEDD8F85}")
cpp_quote ("DEFINE_GUID(CLSID_PVRIOCounters,")
cpp_quote ("0x4582746f, 0x473b, 0x4022, 0xa7, 0xe9, 0x88, 0x7c, 0xbe, 0xdd, 0x8f, 0x85);")

[
    object,
    uuid(1970A7D6-5029-4306-B4FE-AD1876CAD0FF),
    pointer_default(unique)
]
interface IPVRIOCountersReader : IUnknown
{

    /*
        ------------------------------------------------------------------------

        struct PVR_ASYNCREADER_WAIT_COUNTER {
            ULONGLONG   cQueued ;                   //  waits queued
            ULONGLONG   cSignaledSuccess ;          //  signaled success
            ULONGLONG   cSignaledFailure ;          //  signaled failures
            ULONGLONG   cBufferDequeued ;           //  buffers deqeueued
        } ;

        struct PVR_ASYNCREADER_COUNTER {
            ULONGLONG                       ullLastBufferReadout ;      //  last ::ReadBytes() stream offset
            ULONGLONG                       cReadoutWriteBufferHit ;    //  ::ReadBytes() write buffers hit
            ULONGLONG                       cReadoutCacheHit ;          //  ::ReadBytes() read cache hit
            ULONGLONG                       cReadoutCacheMiss ;         //  ::ReadBytes () read cache miss
            ULONGLONG                       cReadAheadReadCacheHit ;    //  read ahead cache hit
            ULONGLONG                       cReadAheadWriteBufferHit ;  //  read ahead write buffer hit
            ULONGLONG                       cReadAhead ;                //  read ahead counter (per read)
            ULONGLONG                       cPartiallyFilledBuffer ;    //  buffer in cache with < maxlength
            ULONGLONG                       cPartialReadAgain ;         //  partial buffer must be re-read to get more
            PVR_ASYNCREADER_WAIT_COUNTER    WaitAnyBuffer ;             //  wait for any buffer
            PVR_ASYNCREADER_WAIT_COUNTER    WaitReadCompletion ;        //  wait for specific buffer completion
            ULONGLONG                       ullLastDiskRead ;           //  last disk read
            ULONGLONG                       cIoPended ;                 //  # of IOs pended
            ULONGLONG                       cIoCompletedSuccess ;       //  pended IO return success
            ULONGLONG                       cIoCompletedError ;         //  pended IO return failure
            ULONGLONG                       cIoPendingError ;           //  pend returned neither ERROR_IO_PENDING or NOERROR
        } ;
    */
    HRESULT
    GetAsyncReaderCounters (
        [out]   ULONGLONG * pcWriteBufferHit,
        [out]   ULONGLONG * pcReadCacheHit,
        [out]   ULONGLONG * pcReadCacheMiss,
        [out]   ULONGLONG * pcReadAhead,
        [out]   ULONGLONG * pcReadAheadReadCacheHit,
        [out]   ULONGLONG * pcReadAheadWriteBufferHit,
        [out]   ULONGLONG * pcPartiallyFilledBuffer,
        [out]   ULONGLONG * pcPartialReadAgain,
        [out]   ULONGLONG * pcWaitForAny_Queued,
        [out]   ULONGLONG * pcWaitForAny_SignaledSuccess,
        [out]   ULONGLONG * pcWaitForAny_SignaledFailure,
        [out]   ULONGLONG * pcWaitForAny_BufferDequeued,
        [out]   ULONGLONG * pcWaitRead_Queued,
        [out]   ULONGLONG * pcWaitRead_SignaledSuccess,
        [out]   ULONGLONG * pcWaitRead_SignaledFailure,
        [out]   ULONGLONG * pcWaitRead_BufferDequeued,
        [out]   ULONGLONG * pullLastDiskRead,
        [out]   ULONGLONG * pullLastBufferReadout,
        [out]   ULONGLONG * pcIoPended,
        [out]   ULONGLONG * pcIoCompletedSuccess,
        [out]   ULONGLONG * pcIoCompletedError,
        [out]   ULONGLONG * pcIoPendingError
        ) ;

    /*
        ------------------------------------------------------------------------

        struct PVR_ASYNCWRITER_COUNTER {
            ULONGLONG   cFileExtensions ;       //  files are extended by quantums
            ULONGLONG   cBytesAppended ;        //  total bytes written
            ULONGLONG   cIoPended ;             //  an IO was successfully pended
            ULONGLONG   cIoPendingError ;       //  an error occured while pending an IO
            ULONGLONG   cWaitNextBuffer ;       //  writer had to wait for the next buffer to complete before proceeding
            ULONGLONG   cIoCompletedSuccess ;   //
            ULONGLONG   cIoCompletedError ;     //
        } ;
    */
    HRESULT
    GetAsyncWriterCounters (
        [out]   ULONGLONG * pcFileExtensions,
        [out]   ULONGLONG * pcBytesAppended,
        [out]   ULONGLONG * pcIoPended,
        [out]   ULONGLONG * pcIoPendingError,
        [out]   ULONGLONG * pcWaitNextBuffer,
        [out]   ULONGLONG * pcIoCompletedSuccess,
        [out]   ULONGLONG * pcIoCompletedError
        ) ;

    HRESULT
    Enable (
        [in, out]   BOOL *  pfEnable
        ) ;

    HRESULT
    Reset (
        ) ;
} ;

cpp_quote ("#define DECLARE_IPVRIOCOUNTERSREADER() \\")
cpp_quote ("virtual STDMETHODIMP GetAsyncReaderCounters (ULONGLONG *, ULONGLONG *, ULONGLONG *, ULONGLONG *, ULONGLONG *, ULONGLONG *, ULONGLONG *, ULONGLONG *, ULONGLONG *, ULONGLONG *, ULONGLONG *, ULONGLONG *, ULONGLONG *, ULONGLONG *, ULONGLONG *, ULONGLONG *, ULONGLONG *, ULONGLONG *, ULONGLONG *, ULONGLONG *, ULONGLONG *, ULONGLONG *) ;   \\")
cpp_quote ("virtual STDMETHODIMP GetAsyncWriterCounters (ULONGLONG *, ULONGLONG *, ULONGLONG *, ULONGLONG *, ULONGLONG *, ULONGLONG *, ULONGLONG *) ; \\")
cpp_quote ("virtual STDMETHODIMP Enable (BOOL *) ; \\")
cpp_quote ("virtual STDMETHODIMP Reset () ;")

/*++
    ============================================================================
    ============================================================================
    IDVRPlayrate

--*/
[
    object,
    uuid(afc7a0a6-0950-4999-ae6e-8973aadbf7de),
    pointer_default(unique)
]
interface IDVRPlayrate : IUnknown
{
    /*++
        ------------------------------------------------------------------------
        GetPlayrateRange ()

        Retrieves the allowable play range.  All speeds are permitted, bracketed
        by the returned values i.e. [* pdMaxReverseRate, * pdMaxForwardRate]
    --*/
    HRESULT
    GetPlayrateRange (
        [out]   double *    pdMaxReverseRate,
        [out]   double *    pdMaxForwardRate
        ) ;

    /*++
        ------------------------------------------------------------------------
        SetRate ()

        Sets the playback rate.  The specified value must fall within the
        allowable range retrieved via GetPlayrateRange (), and not be 0.
        [in]    desired rate
    --*/
    HRESULT
    SetPlayrate (
        [in]    double  dRate
        ) ;

    /*++
        ------------------------------------------------------------------------
        GetRate ()

        Sets the playback rate.  The specified value must fall within the
        allowable range retrieved via GetPlayrateRange (), and not be 0.
        [in]    desired rate
    --*/
    HRESULT
    GetPlayrate (
        [out]   double *    pdRate
        ) ;
} ;

//  ============================================================================
//  ============================================================================

typedef enum {
    DVRPOLICY_TBD   = 1             //  policies are enumerated here
                                    //  each policy has a parameter e.g. BOOL,
                                    //      time, etc...
} DVR_POLICY ;

/*++
    ============================================================================
    ============================================================================
    IDVRPolicy

--*/
[
    object,
    uuid(8c3df0a2-3258-41aa-932a-c41bafca49a2),
    pointer_default(unique)
]
interface IDVRPolicy : IUnknown
{
    /*++
        ------------------------------------------------------------------------
        SetPolicy ()

        DVRPolicy           policy that is being set
        cbPolicyParam       size of policy parameter
        pbPolicyParam       policy parameter e.g. BOOL
    --*/
    HRESULT
    SetPolicy (
        [in]                            DVR_POLICY  DVRPolicy,
        [in]                            int         cbPolicyParam,
        [in, size_is (cbPolicyParam)]   BYTE *      pbPolicyParam
        ) ;

    /*++
        ------------------------------------------------------------------------
        GetPolicy ()

        DVRPolicy           requested policy
        pcbPolicyParam      size of policy parameter
        pbPolicyParam       policy parameter e.g. BOOL
    --*/
    HRESULT
    GetPolicy (
        [in]                                DVR_POLICY      DVRPolicy,
        [out]                               int *           pcbPolicyParam,
        [out, size_is (,* pcbPolicyParam)]  BYTE **         ppbPolicyParam
        ) ;
} ;
