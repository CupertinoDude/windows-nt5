
/*++

    Copyright (c) 2001 Microsoft Corporation

    Module Name:

        dvranalysis.idl

    Abstract:

        This module the analysis framework interface definitions & CLSIDs

    Author:

        Matthijs Gates  (mgates)

    Revision History:

        01-Feb-2001     created

--*/

import "unknwn.idl" ;
import "wtypes.idl" ;
import "objidl.idl" ;
import "strmif.idl" ;

//  ============================================================================
//  analysis GUIDs & data

//  All analysis is tagged onto our media samples via the IDVRAnalysisAttribSet
//   and retrieved by the timeshifting infrastructure via IDVRAnalysisAttribGet.
//  Analysis consists of a GUID identifier and a blob.  The blob is defined in
//   conjunction with the GUID.  Those definitions follow.

cpp_quote ("// {237C9CC0-0857-4add-9AC1-181DD7D11560}")
cpp_quote ("DEFINE_GUID(DVRAnalysis_Global,")
cpp_quote ("0x237c9cc0, 0x857, 0x4add, 0x9a, 0xc1, 0x18, 0x1d, 0xd7, 0xd1, 0x15, 0x60);")
//      0                   1                   2                   3
//      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
//      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
//      |P|                           reserved                          |
//      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
//
//      ------------------------------------------------------------------------
//      Analysis Present (P) : 1 bit
//          1   analysis present
//          0   analysis not present
//
cpp_quote ("#define DVR_ANALYSIS_GLOBAL_PRESENT(dwFlag,f)       ((f) ? ((dwFlag) |= 0x80000000) : ((dwFlag) &= ~0x80000000))")
cpp_quote ("#define DVR_ANALYSIS_GLOBAL_IS_PRESENT(dwFlag)      ((dwFlag) & 0x80000000)")
cpp_quote ("#define DVR_ANALYSIS_GLOBAL_CLEAR(dwFlag)           ((dwFlag) = 0)")


//  ----------------------------------------------------------------------------
//  mpeg-2 frame analysis
//  ----------------------------------------------------------------------------
cpp_quote ("// {DD6432CC-E229-40db-80F6-D26328D2761F}")
cpp_quote ("DEFINE_GUID(DVRAnalysis_Mpeg2Video, ")
cpp_quote ("0xdd6432cc, 0xe229, 0x40db, 0x80, 0xf6, 0xd2, 0x63, 0x28, 0xd2, 0x76, 0x1f);")

//  this attribute applies to the first byte of the media sample payload;
//    attribute data is a DWORD (unsigned 32 bit)
//
//      0                   1                   2                   3
//      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
//      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
//      |                          reserved             |  FR   |B| CT  |
//      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
//
//      #defines follow
//      set/get macros follow
//
//      ------------------------------------------------------------------------
//      Content Type (CT) : 3 bits
//          0   unknown
//          1   I-Frame (GOP header -> end of I-frame, if there is a GOP header)
//          2   B-Frame
//          3   P-Frame
//
//          note: I-Frames & GOP Headers will not BOTH be marked; if a stream
//              contains GOP headers, the I-frames should not be marked; instead
//              the GOP header will be the replay boundary; if there are no
//              GOP headers, then the I-Frames are the replay boundary for the
//              GOP
//
//      frame-boundary #defines
cpp_quote ("#define DVR_ANALYSIS_MPEG2_VIDEO_CONTENT_UNKNOWN    0")
cpp_quote ("#define DVR_ANALYSIS_MPEG2_VIDEO_CONTENT_I_FRAME    1")
cpp_quote ("#define DVR_ANALYSIS_MPEG2_VIDEO_CONTENT_B_FRAME    2")
cpp_quote ("#define DVR_ANALYSIS_MPEG2_VIDEO_CONTENT_P_FRAME    3")
cpp_quote ("#define DVR_ANALYSIS_MPEG2_VIDEO_CONTENT_GOP_HEADER DVR_ANALYSIS_MPEG2_VIDEO_CONTENT_I_FRAME")
//      frame-boundary macros
cpp_quote ("#define DVR_ANALYSIS_MP2_SET_MP2FRAME_ATTRIB(dwFlag,frame_type) (dwFlag = (dwFlag & ~0x00000003) | (0x00000003 & (frame_type)))")
cpp_quote ("#define DVR_ANALYSIS_MP2_GET_MP2FRAME_ATTRIB(dwFlag)            (dwFlag & 0x00000003)")

//      ------------------------------------------------------------------------
//      Boundary (B) : 1 bit
//          Used in conjunction with CT can be used to detect specific frame
//            boundaries
//          0   NOT a frame-boundary
//          1   frame-boundary
cpp_quote ("#define DVR_ANALYSIS_MP2_SET_BOUNDARY(dwFlag,f)     ((f) ? ((dwFlag) |= 0x00000008) : ((dwFlag) &= ~0x00000008))")
cpp_quote ("#define DVR_ANALYSIS_MP2_IS_BOUNDARY(dwFlag)        ((dwFlag) & 0x00000008)")

//
//      ------------------------------------------------------------------------
//      Frame Rate (FR) : 4 bits
//          (see h.262, table 6-4)
//          sampled from each sequence_header and applied to subsequent media
//             samples until the next sequence_header
//
//          0000    reserved (ignore field value)
//          0001    23.976
//          0010    24
//          0011    25
//          0100    29.97
//          0101    30
//          0110    50
//          0111    59.94
//          1000    60
//
//      frame rate #defines
cpp_quote ("#define DVR_ANALYSIS_MP2_FRAME_RATE_NOT_PRESENT     0x0")
cpp_quote ("#define DVR_ANALYSIS_MP2_FRAME_RATE_23_976          0x1")
cpp_quote ("#define DVR_ANALYSIS_MP2_FRAME_RATE_24              0x2")
cpp_quote ("#define DVR_ANALYSIS_MP2_FRAME_RATE_25              0x3")
cpp_quote ("#define DVR_ANALYSIS_MP2_FRAME_RATE_29_97           0x4")
cpp_quote ("#define DVR_ANALYSIS_MP2_FRAME_RATE_30              0x5")
cpp_quote ("#define DVR_ANALYSIS_MP2_FRAME_RATE_50              0x6")
cpp_quote ("#define DVR_ANALYSIS_MP2_FRAME_RATE_59_94           0x7")
cpp_quote ("#define DVR_ANALYSIS_MP2_FRAME_RATE_60              0x8")
//      frame rate macros
cpp_quote ("#define DVR_ANALYSIS_MP2_SET_FRAME_RATE(dwFlag,frame_rate)      (dwFlag = (dwFlag & ~0x000000f0) | (0x000000f0 & (frame_rate << 4)))")
cpp_quote ("#define DVR_ANALYSIS_MP2_GET_FRAME_RATE(dwFlag)                 ((dwFlag >> 4) & 0x0000000f)")

//          clearing macros
cpp_quote ("#define DVR_ANALYSIS_MP2_SET_NONE(dwFlag)  ((dwFlag) = 0)")
cpp_quote ("//#define DVR_ANALYSIS_MP2_SET_NONE(dwFlag) \\")
cpp_quote ("//{ DVR_ANALYSIS_MP2_SET_FRAME_RATE(dwFlag,0) ; \\")
cpp_quote ("//  DVR_ANALYSIS_MP2_SET_BOUNDARY(dwFlag,FALSE) ; \\")
cpp_quote ("//  DVR_ANALYSIS_MP2_SET_MP2FRAME_ATTRIB(dwFlag, DVR_ANALYSIS_MPEG2_VIDEO_CONTENT_UNKNOWN) ; }")

cpp_quote ("#define DVR_ANALYSIS_MP2_IS_NONE(dwFlag)    ((dwFlag) == 0 ? TRUE : FALSE)")
cpp_quote ("//#define DVR_ANALYSIS_MP2_IS_NONE(dwFlag) \\")
cpp_quote ("//(DVR_ANALYSIS_MP2_GET_MP2FRAME_ATTRIB(dwFlag) == DVR_ANALYSIS_MPEG2_VIDEO_CONTENT_UNKNOWN && \\")
cpp_quote ("// !DVR_ANALYSIS_MP2_IS_BOUNDARY(dwFlag) && \\")
cpp_quote ("// DVR_ANALYSIS_MP2_GET_FRAME_RATE(dwFlag) == 0 ? \\")
cpp_quote ("//   TRUE : FALSE)")

//  ----------------------------------------------------------------------------

//  ============================================================================
//  interfaces

interface IDVRAnalyze ;
interface IDVRAnalysisBuffer ;
interface IDVRAnalysisBufferEx ;

cpp_quote ("// {163AB04A-6601-43fc-8710-96B281D0A765}")
cpp_quote ("DEFINE_GUID(CLSID_DVRAnalysisFilter,")
cpp_quote ("0x163ab04a, 0x6601, 0x43fc, 0x87, 0x10, 0x96, 0xb2, 0x81, 0xd0, 0xa7, 0x65);")

cpp_quote ("// {34E3B4A1-9F47-4e80-A0EC-FADD49B2CA29}")
cpp_quote ("DEFINE_GUID(CLSID_DVRAnalysisFilterFactory,")
cpp_quote ("0x34e3b4a1, 0x9f47, 0x4e80, 0xa0, 0xec, 0xfa, 0xdd, 0x49, 0xb2, 0xca, 0x29);")

[
    object,
    uuid(7d682d10-da8e-4865-a13c-fea0c5fc9990),
    pointer_default(unique)
]
interface IDVRAnalysisFilterHostFactory : IUnknown
{
    HRESULT
    InstantiateFilterHost (
        [in]    IUnknown *  punkAnalysisLogic,
        [in]    LPCWSTR     pszLogicName,
        [out]   IUnknown ** ppunkAnalysisHostFilter
        ) ;
} ;

cpp_quote ("#define DECLARE_IDVRANALYSISFILTERHOSTFACTORY() \\")
cpp_quote ("virtual STDMETHODIMP InstantiateFilterHost (IUnknown *, LPCWSTR, IUnknown **) ;")


//  wraps IMediaSample2
[
    object,
    uuid(7808403b-c95b-4493-918e-8d01051b28cd),
    pointer_default(unique)
]
interface IDVRAnalysisBuffer : IUnknown
{
    HRESULT
    IsDiscontinuity (
        [out]   BOOL *  pfDiscontinuity
        ) ;

    HRESULT
    GetBuffer (
        [out]   BYTE ** ppbBuffer
        ) ;

    HRESULT
    GetBufferLength (
        [in]    LONG *  plBufferLen
        ) ;

    //  overwrites if there's another attribute already flagged at the same
    //    offset, of same GUID
    HRESULT
    Mark (
        [in]    LONG            lBufferOffset,
        [in]    const GUID *    pguidAttribute,
        [in]    BYTE *          pbAttributeData,
        [in]    DWORD           dwAttributeDataLen
        ) ;
} ;

cpp_quote ("#define DECLARE_IDVRANALYSISBUFFER()    \\")
cpp_quote ("virtual STDMETHODIMP IsDiscontinuity (BOOL *) ; \\")
cpp_quote ("virtual STDMETHODIMP GetBuffer (BYTE **) ; \\")
cpp_quote ("virtual STDMETHODIMP GetBufferLength (LONG *) ; \\")
cpp_quote ("virtual STDMETHODIMP Mark (LONG, const GUID *, BYTE *, DWORD) ;")

[
    object,
    uuid(bfc89f48-481a-43a3-9270-35f788b3b1c0),
    pointer_default(unique)
]
interface IDVRAnalysisBufferPriv : IDVRAnalysisBuffer
{
    HRESULT
    GetWrappedMediaSample (
        [out]   IMediaSample ** ppIMediaSample  //  ref'd
        ) ;

    HRESULT
    GetAttribute (
        [in]        LONG    lIndex,
        [out]       LONG *  plBufferOffset,
        [out]       GUID *  pguidAttribute,
        [in, out]   BYTE *  pbAttributeData,        //  can be NULL
        [in, out]   DWORD * pdwAttributeDataLen     //  can never be NULL
        ) ;
} ;

cpp_quote ("#define DECLARE_IDVRANALYSISBUFFERPRIV()    \\")
cpp_quote ("DECLARE_IDVRANALYSISBUFFER() \\")
cpp_quote ("virtual STDMETHODIMP GetWrappedMediaSample (IMediaSample **) ; \\")
cpp_quote ("virtual STDMETHODIMP GetAttribute (LONG, LONG *, GUID *, BYTE *, DWORD *) ;")

//  implemented by the analysis logic
[
    object,
    uuid(917e8b35-0da4-4e1d-a148-b59604bc178a),
    pointer_default(unique)
]
interface IDVRAnalyze : IUnknown
{
    HRESULT
    Analyze (
        [in]    IDVRAnalysisBuffer *    pIDVRAnalysisBuffer,
        [in]    BOOL                    fDiscontinuity
        ) ;

    HRESULT
    Flush (
        ) ;
} ;

cpp_quote ("#define DECLARE_IDVRANALYZE() \\")
cpp_quote ("virtual STDMETHODIMP Analyze (IDVRAnalysisBuffer *, BOOL) ; \\")
cpp_quote ("virtual STDMETHODIMP Flush () ;")

//  implemented by the logic-hosting layer
[
    object,
    uuid(4a3a810b-bef8-4d0f-9095-a88e7b2ba924),
    pointer_default(unique)
]
interface IDVRPostAnalysisSend : IUnknown
{
    HRESULT
    CompleteAnalysis (
        [in]    IDVRAnalysisBuffer *    pIOwningAnalysisBuffer
        ) ;
} ;

cpp_quote ("#define DECLARE_IDVRPOSTANALYSISSEND()  \\")
cpp_quote ("virtual STDMETHODIMP CompleteAnalysis (IDVRAnalysisBuffer *) ;")

//  ============================================================================
//  known types of analysis

//  GOP header / I-frame
cpp_quote ("// {DC7615EA-31DD-42d4-88BF-61E80C59EEB9}")
cpp_quote ("DEFINE_GUID(DVRAnalysis_Mpeg2GOP,")
cpp_quote ("0xdc7615ea, 0x31dd, 0x42d4, 0x88, 0xbf, 0x61, 0xe8, 0xc, 0x59, 0xee, 0xb9);")

//  B-frames
cpp_quote ("// {AA5BF0C7-BDAD-41ce-A14C-5253B9C9B5AE}")
cpp_quote ("DEFINE_GUID(DVRAnalysis_Mpeg2_BFrame,")
cpp_quote ("0xaa5bf0c7, 0xbdad, 0x41ce, 0xa1, 0x4c, 0x52, 0x53, 0xb9, 0xc9, 0xb5, 0xae);")

//  P-frames
cpp_quote ("// {135FCFAB-C06C-4dba-A10B-EBC5CB1FEB69}")
cpp_quote ("DEFINE_GUID(DVRAnalysis_Mpeg2_PFrame,")
cpp_quote ("0x135fcfab, 0xc06c, 0x4dba, 0xa1, 0xb, 0xeb, 0xc5, 0xcb, 0x1f, 0xeb, 0x69);")

//  ============================================================================

typedef struct _DVR_ANALYSIS_DESC {
    GUID    guidAnalysis ;
    LPWSTR  pszDescription ;
} DVR_ANALYSIS_DESC ;

[
    object,
    uuid(7acea8ff-ff70-40da-b4c2-77f772dbf554),
    pointer_default(unique)
]
interface IDVRAnalysisLogicProp : IUnknown
{
    HRESULT
    GetDisplayName (
        [out]   LPWSTR *    ppszDisplayName
        ) ;

    HRESULT
    CheckMediaType (
        [in]    const AM_MEDIA_TYPE *   pMediaType,
        [out]   BOOL *                  pfAccept
        ) ;

    //  weak ref !!!!
    HRESULT
    SetPostAnalysisSend (
        [in]    IDVRPostAnalysisSend *
        ) ;

    HRESULT
    EnumAnalysis (
        [out]   LONG *                  plCount,
        [out]   DVR_ANALYSIS_DESC **    ppAnalysisDesc   //  callee allocates; caller deallocates
        ) ;
} ;

cpp_quote ("#define DECLARE_IDVRANALYSISLOGICPROP()   \\")
cpp_quote ("virtual STDMETHODIMP GetDisplayName (LPWSTR *) ; \\")
cpp_quote ("virtual STDMETHODIMP CheckMediaType (const AM_MEDIA_TYPE *, BOOL *) ; \\")
cpp_quote ("virtual STDMETHODIMP SetPostAnalysisSend (IDVRPostAnalysisSend *) ; \\")
cpp_quote ("virtual STDMETHODIMP EnumAnalysis (LONG *, DVR_ANALYSIS_DESC **) ;")

//  ============================================================================
//  ============================================================================
//  ============================================================================
//  private content follows

interface   IDVRAnalysisConfig ;        //  on the analysis shell's output pin

//  ----------------------------------------------------------------------------
//  analysis filter shell implements on output pins

[
    object,
    uuid(09dc9fef-97ad-4cab-8252-9683bc8778f2),
    pointer_default(unique)
]
interface IDVRAnalysisConfig : IUnknown
{
    HRESULT
    GetAnalysisLogic (
        [out]   IDVRAnalyze **  ppIDVRAnalyze
        ) ;
} ;

cpp_quote ("#define IMPLEMENT_IDVRANALYSISCONFIG()  \\")
cpp_quote ("virtual STDMETHODIMP GetAnalysisLogic (IDVRAnalyze **) ;")

