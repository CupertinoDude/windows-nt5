//------------------------------------------------------------------------------
// File: DVRFileSink.idl
//
// Desc: DVR File Sink interface
//
// Copyright (c) 2001, Microsoft Corporation.  All rights reserved.
//------------------------------------------------------------------------------


import "unknwn.idl";

interface IDVRFileSink;

[
    object,
    uuid(bca40da2-8183-4466-bb77-9a5c913ec870),
    pointer_default(unique),
    local
]
interface IDVRFileSink : IUnknown {

    // Must be called before the Open method is called on the sink.
    // If the file is temporary, the index for the complete file should
    // fit in shared memory; the size of the shared memory can be changed
    // by calling SetNumSharedDataPages.
    HRESULT MarkFileTemporary([in] BOOL bTemporary);

    // Must be called before the Open method is called on the sink.
    // Use MAXDWORD to unset the stream id. If a stream id is not set,
    // an index is not generated.
    HRESULT SetIndexStreamId([in]  DWORD  dwIndexStreamId);

    HRESULT GetIndexStreamId([out] DWORD* pdwIndexStreamId);

    // May be called only before the Open method is called on the sink.
    // If not called, the number of pages defaults to 1.
    HRESULT SetNumSharedDataPages([in] DWORD dwNumPages);

    // Returns the maximum number of index entries that can be 
    // held in dwNumPages of memory. Currently, the time between
    // index entries is always 1000 msec and cannot be changed.
    HRESULT GetMaxIndexEntries([in]  DWORD  dwNumPages,
                               [out] DWORD* pdwNumIndexEntries);

    // Returns the number of memory pages required to hold 
    // dwNumIndexEntries.
    HRESULT GetNumPages([in]  DWORD  dwNumIndexEntries,
                        [out] DWORD* pdwNumPages);

    // All HANDLEs that are returned are duplicated. If this function
    // is called, the sink leaves the view mapped and the caller must
    // unmap the view. If more than one caller calls this function, they 
    // should ensure that at most one of them unmaps the view. The
    // caller ought to treat the returned hMappedView as an opaque handle
    // and should not try to read from or write to that section of memory.
    HRESULT GetMappingHandles([out] HANDLE* phDataFile,
                              [out] HANDLE* phMemoryMappedFile,
                              [out] HANDLE* phFileMapping,
                              [out] LPVOID* phMappedView,
                              [out] HANDLE* phTempIndexFile);

}

// The registry keys should be opened and closed by the caller; they must
// remain open for the lifetime of the DVR sink
cpp_quote( "HRESULT STDMETHODCALLTYPE DVRCreateDVRFileSink(HKEY hDvrKey, HKEY hDvrIoKey, IDVRFileSink** ppDVRFileSink);")
