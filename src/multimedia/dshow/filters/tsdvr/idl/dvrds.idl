
/*++

    Copyright (c) 2001 Microsoft Corporation

    Module Name:

        dvrds.idl

    Abstract:

        This module the dvr/ts interface definitions & CLSIDs, public

    Author:

        Matthijs Gates  (mgates)

    Revision History:

        01-Feb-2001     created

--*/

import "unknwn.idl" ;
import "dvrioidl.idl";
import "wtypes.idl" ;
import "objidl.idl";
import "strmif.idl" ;

cpp_quote ("// {2DB47AE5-CF39-43c2-B4D6-0CD8D90946F4}")
cpp_quote ("DEFINE_GUID(CLSID_DVRStreamSink,")
cpp_quote ("0x2db47ae5, 0xcf39, 0x43c2, 0xb4, 0xd6, 0xc, 0xd8, 0xd9, 0x9, 0x46, 0xf4);")

cpp_quote ("// {CD20654B-0228-4b9c-8F1E-D8CE8A1C2EBC}")
cpp_quote ("DEFINE_GUID(CLSID_DVRStreamSource,")
cpp_quote ("0xcd20654b, 0x228, 0x4b9c, 0x8f, 0x1e, 0xd8, 0xce, 0x8a, 0x1c, 0x2e, 0xbc);")

cpp_quote ("// {C9F5FE02-F851-4eb5-99EE-AD602AF1E619}")
cpp_quote ("DEFINE_GUID(CLSID_DVRPlay,")
cpp_quote ("0xc9f5fe02, 0xf851, 0x4eb5, 0x99, 0xee, 0xad, 0x60, 0x2a, 0xf1, 0xe6, 0x19);")

//  ============================================================================
//  INSSBuffer3 attributes

//  -----------------------------------------------
//  standard DShow attributes;
//  fixed size
//  INSSBUFFER3PROP_DSHOWATTRIB struct describes the contents

cpp_quote ("// {0D9E44D8-C709-40d9-AA71-6C2387218B95}")
cpp_quote ("DEFINE_GUID(INSSBuffer3Prop_DShowAttributes,")
cpp_quote ("0xd9e44d8, 0xc709, 0x40d9, 0xaa, 0x71, 0x6c, 0x23, 0x87, 0x21, 0x8b, 0x95);")

//  see AM_SAMPLE2_PROPERTIES for member descriptions
typedef struct {
    REFERENCE_TIME  rtStart ;               //  -1 if not set
    REFERENCE_TIME  rtStop ;                //  -1 if not set
    DWORD           dwTypeSpecificFlags ;
    DWORD           dwStreamId ;
} INSSBUFFER3PROP_DSHOWATTRIB ;

//  -----------------------------------------------
//  used for dynamic format changes
//  variable size
//  buffer is of format AM_MEDIA_TYPE
//  if AM_MEDIA_TYPE.pbFormat is non-NULL is shall be ignored, and a format
//   block of size AM_MEDIA_TYPE.cbFormat shall immediately follow the contents
//   of the AM_MEDIA_TYPE structure

cpp_quote ("// {1135BEB7-3A39-478a-98D9-15C76B00EB69}")
cpp_quote ("DEFINE_GUID(INSSBuffer3Prop_DShowNewMediaType,")
cpp_quote ("0x1135beb7, 0x3a39, 0x478a, 0x98, 0xd9, 0x15, 0xc7, 0x6b, 0x0, 0xeb, 0x69);")

//  -----------------------------------------------
//  used to store mpeg-2 elementary streams in ASF files
//  accomodates out-of-order & missing presentation time stamps
//  fixed size (64 bits)
//  LONGLONG value is the property; subsequently referred to as "PTS"
//  PTS is a presentation timestamp
//  PTS is a 10 MHz clock (this is different from PES's 90 KHz counter)
//  PTS shall have the same meaning as PTS in a PES header i.e. it shall apply
//   to the next access unit; access unit to which it applies need not be
//   aligned with start of INSSBuffer3 payload
//  PTS shall not be stored in INSSBuffer3 for samples that do not have a PTS
//   associated with them

cpp_quote ("// {6CFFF05B-9140-4c0d-ABCF-AE98122B2E95}")
cpp_quote ("DEFINE_GUID(INSSBuffer3Prop_Mpeg2ElementaryStream,")
cpp_quote ("0x6cfff05b, 0x9140, 0x4c0d, 0xab, 0xcf, 0xae, 0x98, 0x12, 0x2b, 0x2e, 0x95);")

//  ============================================================================

//  public interfaces
interface   IDVRStreamSink ;            //  get recording objects
interface   IDVRStreamSource ;          //  associates with IDVRStreamSink
interface   IDVRRecordControl ;         //  recording control
interface   IDVRConfigure ;             //  configuration interface
interface   IDVRPolicy ;                //  DVR policies

/*++
    Filters

        1. DVRStreamThrough
        2. DVRStreamSink
        3. DVRStreamSource
        4. WMASFReader

    Filter Details

        DVRStreamThrough

            "pure" timeshifting filter;
            wedged into existing capture graphs;
            exposes input pins (inf tee);
            exposes output pins (= # of input pins);
            all input connections must be made before IDVRStreamSink interface
                is passe do DVRStreamSource filter;
            input pin connections fail after IDVRStreamSink interface
                has been passed to a source filter;
            implements IMediaSeeking on the *filter*;
            implements IDVRStreamSink;
            seeking & playback rate via IMediaSeeking calls to filter (*not*
                filter graph)

        DVRStreamSink

            rendering (right-most) filter;
            exposes input pins only (inf tee like);
            all input connections must be made before IDVRStreamSink interface
                is passe do DVRStreamSource filter;
            input pin connections fail after IDVRStreamSink interface
                has been passed to a source filter;
            exposes IDVRStreamSink;

        DVRStreamSource

            Source filter;
            exposes IDVRStreamSource;
            seeking & playback rate via pin-based IMediaSeeking;

        WMASFReader (existing - but we update)

            Source filter;
            exposes IFileSourceFilter; (existing interface)
            seeking & playback rate via pin-based IMediaSeeking;
--*/

/*++
    ============================================================================
    ============================================================================
    IDVRStreamSink

    Stream Source interface;
    Implemented on the DVRStreamThrough filter;
    implemented on the DVRStreamSink filter;
    Only way to get a recorder object's IUnknown (object will subsequently
        be associated with this Sink)
--*/
[
    object,
    uuid(afd1f242-7efd-45ee-ba4e-407a25c9a77a),
    pointer_default(unique)
]
interface IDVRStreamSink : IUnknown
{
    /*++
        ------------------------------------------------------------------------
        LockProfile ()

        locks the profile;
        no *new* input pin connections will be accepted;
        existing pins that are, or have ever been, connected can be reconnected
          if the media type is exactly the same as the first successful
          connection;
        can be called multiple times safely;
    --*/
    HRESULT
    LockProfile (
        ) ;

    /*++
        ------------------------------------------------------------------------
        CreateRecorder ()

        Returns a *new* recorder object's IUnknown;
        caller must subsequently QueryInterface() the returned pointer to get
            interface pointers to configure & control the recording;
        returned IUnknown pointer is ref'd & must be Release()'d by the caller
    --*/
    HRESULT
    CreateRecorder (
        [in]    LPCWSTR     pszFilename,
        [in]    DWORD       dwReserved,         // Must be 0
        [out]   IUnknown ** pRecordingIUnknown
        ) ;

    /*++
        ------------------------------------------------------------------------
        IsProfileLocked ()

        Returns S_OK if the profile is locked and S_FALSE if it is not.
        Returns E_FAIL on error.
    --*/
    HRESULT
    IsProfileLocked (
        ) ;
} ;

/*++
    ============================================================================
    ============================================================================
    IDVRStreamSource ()

    Stream Source reader interface;
    Implemented on the DVRStreamSource filter;
--*/
[
    object,
    uuid(1c5bd776-6ced-4f44-8164-5eab0e98db12),
    pointer_default(unique)
]
interface IDVRStreamSource : IUnknown
{
    /*++
        ------------------------------------------------------------------------
        SetStreamSink ()

        Sets the DVR Sink that streams from this Source;
        IDVRStreamSink object must be in the same process as this object;
        interface is AddRef()'d if the call succeeds;

        pIDVRStreamSink     Sink that will stream to this Source
    --*/
    HRESULT
    SetStreamSink (
        [in]    IDVRStreamSink *    pIDVRStreamSink
        ) ;
} ;

/*++
    ============================================================================
    ============================================================================
    IDVRRecordControl

    obtained by QIing IDVRStreamSink::CreateRecorder()-returned IUnknown *
--*/
[
    object,
    uuid(ba9b6c99-f3c7-4ff2-92db-cfdd4851bf31),
    pointer_default(unique)
]
interface IDVRRecordControl : IUnknown
{
    /*++
        ------------------------------------------------------------------------
        Start ()

        starts a recording;
        will save to the filename that is specified when this interface's
            IUnknown is requested (IDVRStreamSink::CreateRecorder());

        rtStart     start time relative to graph start; 0 = graph start;
                        if this time is < "now", the call fails
    --*/
    HRESULT
    Start (
        [in]    REFERENCE_TIME  rtStart
        ) ;

    /*++
        ------------------------------------------------------------------------
        Stop ()

        stops a recording;
        closes our the file that was recorded to;

        rtStop      stop time relative to graph start; 0 = graph start;
                        if this time is < "now", the call fails
    --*/
    HRESULT
    Stop (
        [in]    REFERENCE_TIME  rtStop
        ) ;

    /*++
        ------------------------------------------------------------------------
        GetRecordingStatus ()

        retrieves the status of the recording

        phResult:  The (current) status of writing or closing the recording file

        pbStarted: If supplied, set to a non-zero value if the recording has
                       been started
        pbStarted: If supplied, set to a non-zero value if the recording has
                       been stopped

    --*/
    HRESULT
    GetRecordingStatus (
        [out] HRESULT* phResult  /* optional */,
        [out] BOOL*    pbStarted /* optional */,
        [out] BOOL*    pbStopped /* optional */
        ) ;
} ;

/*++
    ============================================================================
    ============================================================================
    IDVRConfigure

--*/
[
    object,
    uuid(ce14dfae-4098-4af7-bbf7-d6511f835414),
    pointer_default(unique)
]
interface IDVRConfigure : IUnknown
{
    /*++
        ------------------------------------------------------------------------
        SetDVRDirectory ()

        Sets the directory where all content is saved, ringbuffer & DVR;
        Creates directory if necessary;
    --*/
    HRESULT
    SetDVRDirectory (
        [in]    LPCWSTR pszDirectoryName
        ) ;

    /*++
        ------------------------------------------------------------------------
        GetDVRDirectory ()

        Retrieves the directory where all content is saved, ringbuffer & DVR;
    --*/
    HRESULT
    GetDVRDirectory (
        [out]   LPWSTR *    ppszDirectoryName
        ) ;

    //  ***************************************
    //  ** add configuration methods as we go..
} ;

typedef enum {
    DVRPOLICY_TBD   = 1             //  policies are enumerated here
                                    //  each policy has a parameter e.g. BOOL,
                                    //      time, etc...
} DVR_POLICY ;

/*++
    ============================================================================
    ============================================================================
    IDVRPolicy

--*/
[
    object,
    uuid(8c3df0a2-3258-41aa-932a-c41bafca49a2),
    pointer_default(unique)
]
interface IDVRPolicy : IUnknown
{
    /*++
        ------------------------------------------------------------------------
        SetPolicy ()

        DVRPolicy           policy that is being set
        cbPolicyParam       size of policy parameter
        pbPolicyParam       policy parameter e.g. BOOL
    --*/
    HRESULT
    SetPolicy (
        [in]                            DVR_POLICY  DVRPolicy,
        [in]                            int         cbPolicyParam,
        [in, size_is (cbPolicyParam)]   BYTE *      pbPolicyParam
        ) ;

    /*++
        ------------------------------------------------------------------------
        GetPolicy ()

        DVRPolicy           requested policy
        pcbPolicyParam      size of policy parameter
        pbPolicyParam       policy parameter e.g. BOOL
    --*/
    HRESULT
    GetPolicy (
        [in]                                DVR_POLICY      DVRPolicy,
        [out]                               int *           pcbPolicyParam,
        [out, size_is (,* pcbPolicyParam)]  BYTE **         ppbPolicyParam
        ) ;
} ;
