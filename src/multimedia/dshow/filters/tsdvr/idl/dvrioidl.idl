//------------------------------------------------------------------------------
// File: dvrIOidl.idl
//
// Desc: Public interfaces for the DVR IO layer.
//
// Copyright (c) 2000 - 2001, Microsoft Corporation.  All rights reserved.
//------------------------------------------------------------------------------


import "wmsdkidl.idl"; // for QWORD, IWMProfile, etc.

// forward declarations - these are the interfaces declared in this file

// Note: The DVR COM objects can't be created with CoCreateInstance; this 
// allows us to limit the use of this API to internal clients only.

interface IDVRRingBufferWriter;
interface IDVRRecorder;
interface IDVRReader;

cpp_quote( "#ifndef MAXQWORD" )
cpp_quote( "#define MAXQWORD (~(0I64))" )
cpp_quote( "#endif" )
cpp_quote( "" )

// ============== Writer object

// The DVR Ring Buffer writer object facilitates managing a ring buffer 
// that is backed by one or more ASF files. The writer (i.e., the client 
// of this object) views the written content as a single infinite stream. 
// The ring buffer object stores a portion of this infinite stream in one 
// or more ASF files. 
//
// A sample's time in the infinite stream is referred to as its stream time. 
// The sample's time in the ASF file is referred to as its "ASF file time"; 
// this is the difference between the sample's stream time and the stream time
// of the first sample saved in the file.
//
// The writer first sets up the ASF profile object corresponding to the 
// streams to be written using the ASF API. The writer then creates the
// ring buffer writer object by calling DVRCreateRingBufferWriter and 
// supplying the ASF profile. The ring buffer writer object addref's
// the supplied profile and releases it in Close(). Other than profile 
// creation, we do not anticipate any need for the writer to directly use 
// the ASF SDK api; IDVRRingBufferWriter methods should be used instead.
//
// Internally, the IDVRRingBufferWriter object sets up an ASF writer object 
// for each ASF file in the ring buffer. Calls to IDVRRingBufferWriter::
// WriteSample are redirected to the appropriate ASF writer object. The ring 
// buffer writer object adds and removes ASF files automatically, based on 
// the number of files specified in the call to DVRCreateRingBufferWriter.
//
// However,the ring buffer writer object may not be able to determine when to 
// close ASF files. Even if it assumes that the stream times supplied to 
// IDVRRingBufferWriter::WriteSample increase monotonically within each stream,
// it could happen that samples on a stream arrive infrequently and 
// sporadically. So the ring buffer writer object would have to keep an 
// ASF file open till each stream wrote a sample with a stream time beyond 
// the extent of the file.
//
// To simplify matters, the ring buffer writer object requires the client to
// specify the "maximum stream delta time" by calling IDVRRingBufferWriter::
// SetMaxStreamDelta. The maximum stream delta time is an upper bound on how 
// much any stream can advance ahead of any other (as measured by an observer
// who is monitoring the calls to IDVRRingBufferWriter::WriteSample), and, in
// a sense, is a measure of the graph latency between the filter that generates
// the timestamps for the samples and the DVR writer filter (assuming that the
// timestamping filter uses the "current" time for the timestamps) . The ring 
// buffer writer object compares the sample times provided to WriteSample and 
// the time extent of an open ASF file. If the difference exceeds the maximum 
// stream delta time, the ASF file is closed. 
//
// SetMaxStreamDelta must be called before WriteSample is called: calls to 
// WriteSample will fail unless a prior call to a SetMaxStreamDelta has 
// succeeded. 
//
// So that we can limit the number of ASF writer objects that we have to create
// to a max of dwNumberOfFiles, we will require that:
//  Max stream delta time < (dwNumberOfFiles - 3) * cnsTimeExtentOfEachFile
// and that:
//  cnsTimeExtentOfEachFile > Time to open an ASF file (T_open) + Time to close 
//                            an ASF file (T_close)
// Note that it's actually enough to have:
//  Max stream delta time < (dwNumberOfFiles - 1) * cnsTimeExtentOfEachFile +
//                          T_open + T_close
// but our more stringent condition allows for a simpler implementation: we can
// be opening one file, closing another while having up to dwNumberOfFiles - 2
// open for writing. Also note that T_open and T_close are the times 
// corresponding to the calls IWMWRiter::BeginWriting and EndWriting.
//
// Note that if the max stream delta tiem is set to a "large" number, reads by
// a reader that tries to keep up with the writer will be jerky. This is because
// the reader will not be flagged EOF and will not be able to advance to the 
// next file in the ring buffer until the writer has advanced by the maximum
// stream delta.
//
// When an ASF file is removed from the ring buffer writer object, the 
// underlying disk file is usually deleted at the same time. However, the 
// DeleteFile will fail if a DVR reader object has the file open. In this
// case, we re-try the file deletion when the reader object closes the file.
//
// IDVRRingBufferWriter::Close() does not remove any ASF files associated with
// the ring buffer; this is done only when the ring buffer writer object is 
// destroyed. This makes it possible for a reader to open a non-live (offline?) 
// source and allows readers that have opened sources to continue after the 
// writer has stopped and terminate gracefully. More interestingly, it makes it
// possible to record retrospectively (a feature that we do not support).
//
// When the ring buffer writer object is destroyed, all associated files
// (except those created to contain program recordings) are deleted.
//
// Note that the ring buffer is created for a specific source (e.g., "Tuner1"). 
// Writers that write directly to ASF files (as opposed to sources) are not 
// supported by our API. Note also that the API (as currently spec'd) does not
// take the source's name, so it is not possible to determine the ring buffer
// writer object corresponding to a specific source (e.g., "Tuner1"). The 
// client is expected to maintain this association.
//
// The number of files supplied to DVRCreateRingBufferWriter should be 
// at least 4.(Also, files in the ring buffer that correspond to program  
// recordings do not count to the number of files that the ring buffer should
//  retain.)
//
// dwIndexStreamId is the ASF stream id of the ASF stream that should be indexed.
// Supply MAXDWORD if no ASF stream should be indexed.
//
// Registry subkeys to customize the writer's behavior are created in the 
// registry subtree rooted at hRegistryRootKey. If hRegistryRootKey is NULL, 
// the default value used is HKCU\Software\Microsoft\DVR
//
// pwszDVRDirectory specifies the directory to be used to create temporary ring
// buffer files. The value provided may be NULL; in that case the value from the 
// registry key hRegistryRootKey\IO\DVRDirectory is used. If the registry key is 
// not set, the temporary directory is used. Note that we never set the registry
// key; the app can do that (at setup)

cpp_quote( "// HRESULT STDMETHODCALLTYPE" )
cpp_quote( "// DVRCreateRingBufferWriter(IN  DWORD                  dwNumberOfFiles," )
cpp_quote( "//                           IN  QWORD                  cnsTimeExtentOfEachFile," )
cpp_quote( "//                           IN  IWMProfile*            pProfile," )
cpp_quote( "//                           IN  DWORD                  dwIndexStreamId," )
cpp_quote( "//                           IN  HKEY                   hRegistryRootKey," )
cpp_quote( "//                           IN  LPCWSTR                pwszDVRDirectory," )
cpp_quote( "//                           OUT IDVRRingBufferWriter** ppRingBufferWriter);" )
cpp_quote( "HRESULT STDMETHODCALLTYPE DVRCreateRingBufferWriter(DWORD, QWORD, IWMProfile*, DWORD, HKEY, LPCWSTR, IDVRRingBufferWriter**);" )

[
    object,
    uuid(6db42506-0422-46c6-ade5-0139874bbf4f),
    pointer_default(unique)
]
interface IDVRRingBufferWriter : IUnknown {

    // Call this method when the first sample's time is known
    // but before calling WriteSample with the first sample.
    HRESULT SetFirstSampleTime([in] QWORD cnsStreamTime);

    // Method to write a sample to the ASF file. The only 
    // difference is that the supplied time is a STREAM time.
    // The ASF write calls require a sample time, with the sample
    // time of the first sample written to the file normalized to
    // zero.

    HRESULT WriteSample( [in] WORD  wStreamNum,
                         [in] QWORD cnsStreamTime,
                         [in] DWORD dwFlags,
                         [in] INSSBuffer *pSample );

    // Sets the maximum stream delta time. The method returns 
    // E_INVALIDARG if cnsMaxStreamDelta >= (dwNumberOfFiles - 3) *
    // cnsTimeExtentOfEachFile

    HRESULT SetMaxStreamDelta([in]  QWORD  cnsMaxStreamDelta);

    // Indicates that the writer has completed writing. 
    // Note that the ring buffer may be refcounted by a reader. So
    // this method allows the ring buffer to clean up writer-specific
    // stuff without having to wait till it's destructor is called.
    // This method will be called when the object is destroyed.

    HRESULT Close(void);

    // ============== Recorder object creation

    // To record a DVR program to a file, a DVR recording object must be 
    // created. A DVR recording object is associated with a ring buffer 
    // writer object. The recorder does not write to the DVR recording object;
    // instead it writes to the ring buffer writer object and creates the 
    // recording merely by issuing StartRecord and StopRecord commands on the
    // DVR recording object.
    //
    // CreateRecorder fails if the file already exists. If the file does not 
    // exist, this call adds this file to the associated ring buffer writer 
    // object creates an ASF writer object for the file and issues the 
    // BeginWriting call on the ASF writer object before it returns. In 
    // principle, this means that the ASF file (and its header) is created 
    // synchronously and that a reader can open the file right after 
    // CreateRecorder completes. (Note that all this assumes that we do NOT
    // implement ASX files to support post-recording.)
    //
    // CreateRecorder addref's the parent ring buffer writer object. This 
    // object is released when the DVR recording object is destroyed. 

    HRESULT CreateRecorder([in]  LPCWSTR        pwszDVRFileName, 
                           [in]  DWORD          dwReserved,
                           [out] IDVRRecorder** ppDVRRecorder);

    // ==============  Reader object creation

    // This method creates a reader object asasociated with this ring buffer
    // writer object. Reader objects may be created after the ring buffer
    // writer object's Close method has been called. Aside: The reader object
    // does not addref the ring buffer writer object; it addrefs only the
    // underlying ring buffer object and releases it in its destructor.

    HRESULT CreateReader([out] IDVRReader** ppDVRReader);

    // ==============  Other

    // pwszDirectoryName is alloc'd with CoTaskMemAlloc and should be freed
    // by the caller.
    //
    // Note that file names specified to CreateRecorder and DVRCreateReader
    // are the ones actually used by those apis (i.e., file names supplied to
    // them are not massaged, caller is assumed to have called this routine 
    // first and prefixed the directory name). On the other hand, files created
    // to back the ring buffer writer object will be created in this directory.

    HRESULT GetDVRDirectory([out] LPWSTR* ppwszDirectoryName);

    // Get information about recordings that have not completed. All optional
    // arguments should be freed with CoTaskMemFree on return. Also, all 
    // interface pointers returned in *pppIDVRRecorder should be released
    // and each filename returned in *pppwszFileName should be freed
    // with CoTaskMemFree. All returned arrays will have *pdwCount; *pdwCount
    // will be set to 0 on failure

    HRESULT GetRecordings([out] DWORD*   pdwCount,
                          [out] IDVRRecorder*** pppIDVRRecorder /* OPTIONAL */,
                          [out] LPWSTR** pppwszFileName         /* OPTIONAL */,
                          [out] QWORD**  ppcnsStartTime         /* OPTIONAL */,
                          [out] QWORD**  ppcnsStopTime          /* OPTIONAL */,
                          [out] BOOL**   ppbStarted             /* OPTIONAL */
                         );

    // Gets the current stream time; will fail if the writer has been closed

    HRESULT GetStreamTime([out] QWORD*   pcnsStreamTime);
}

// ============== Recorder object

// The start and stop recording times supplied to the IDVRRecorder methods
// are stream times. We have to restrict them to be in the "future" since 
// we do not support post-recording, which means that calls to these methods
// will have to be synchronized by the caller with calls to the Write methods 
// in the associated IDVRRingBufferWriter (unless the caller specifies times 
// "well into the future").
//
// Calling IDVRRecorder::StartRecording more than once (and specifically
// calling it after IDVRRecorder::StopRecording has been called) will 
// result in failure. Thus the DVR recording object has no value after 
// calling StopRecording. 
//
// If the DVR recording object is destroyed after calling StartRecording but
// without calling StopRecording, StopRecording is called on behalf of the 
// caller in the destructor; however the stream time at which recording is 
// stopped may be arbitrary.
//
// The DVR recording object can be destroyed at any time, even before the time
// at which recording should end. For example, it is permissible to set up
// a recording from 11-20 and destroy it at time 10 (nothing is recorded to 
// the object), or at time 15 (object records the data from 11 to 15). 
//
// Calls made to StartRecording or StopRecording after the associated ring
// buffer writer object's Close method has been called will fail. This feature
// has little value since we do not support post-recordings. Note that any 
// recording that is in progress when Close is called is stopped and the 
// corresponding file is closed.
//
// If Start and Stop Recording are called on a recorder with times T1 and T2
// and then SetFirstSampleTime is called with time = T3 > T2, the recording
// file is closed when SetFirstSampleTime is called. If T1 < T3 < T2, the 
// recorder's start time is changed from T1 to T3.

// The client is permitted to create multiple recording objects concurrently;
// this allows the client to handle back to back recording requests from the 
// user more easily. However, StartRecording will fail if the start time that 
// is specified is earlier than the end time of any other recording that has 
// been set up. For example,to set up recording R1 for 11-12 and R2 for 12-1, 
// the client would have to call R1->StartRecording(11); R1->StopRecording(12); 
// and then call R2->StartRecording(12). The stop recording time of R1 is not 
// set, i.e., R1's recording continues "forever", until R1->StopRecording() 
// is called,
//
// Note also that overlapped recordings are not permitted as a consequence of 
// this restriction.
//
// The API currently does not support "inserting a recording" before another one
// or revising the times of a recording that has already been set up. However, a
// recording can be cancelled provided this is done before writing a sample
// whose stream time is larger than the start recording time. Note that an
// empty disk file (i.e. one which has no samples) for a cencelled recording 
// may have been created and it's the client's responsibility to delete it.


[
    object,
    uuid(9b22180d-33c1-449c-9a21-58384451b790),
    pointer_default(unique)
]
interface IDVRRecorder : IUnknown {

    // cnsRecordingStartStreamTime must be > than the max of all the 
    // stream times of all samples written so far and, if 
    // SetFirstSampleTime has been called, it must be larger than the
    // argument provided to that SetFirstSampleTime. It cannot be
    // QWORD_INFINITE.
    HRESULT StartRecording( [in] QWORD cnsRecordingStartStreamTime);

    // cnsRecordingStartStreamTime must be > than the max of all the 
    // stream times of all samples written so far and it must be >
    // the start recording time. It cannot be QWORD_INFINITE.
    HRESULT StopRecording( [in] QWORD cnsRecordingStopStreamTime);

    HRESULT CancelRecording();

    // Retrieves the status of the recording. If WriteSample failed
    // while writing to the recording file (in an irrecoverable 
    // way) or if closing the file fails, *phResult will contain the
    // error result. Note that CreateRecorder primes the file
    // (sets the profile, calls BeginWriting, etc.), so if it
    // succeeds, there were no errors in creating the file.
    //
    // If pbStarted is supplied, it is set to a non-zero value if 
    // this recording has been started. Similarly for pbStopped.
    HRESULT GetRecordingStatus([out] HRESULT* phResult /* optional */,
                               [out] BOOL* pbStarted /* optional */,
                               [out] BOOL* pbStopped /* optional */);

    // Returns S_OK if the recording file has been closed and 
    // S_FALSE otherwise.
    HRESULT HasFileBeenClosed();
}

// ============== Reader

// The DVR Reader object is used to read back data from either
// a source (e.g., "Tuner1") or from a recorded DVR program file.
// To read a source, the DVR reader object is created by calling 
// IDVRRingBufferWriter::CreateReader. DVR reader objects that read
// recorded DVR program files are created by calling DVRCreateReader().
//
// Internally, DVRCreateReader creates and associates a ring buffer 
// object with the reader object. This ring buffer is associated with 
// one file (if all recordings are to ASF files) or with one or more 
// files (if recordings are made to ASX files). If the reader is created 
// via IDVRRingBufferWriter::CreateReader, the ring buffer corresponding
// to the DVR ring buffer writer object is associated with the the DVR 
// reader; it is addref'd and is released only when the reader object
// is destroyed.
//
// In either case, the ring buffer associated with the DVR Reader 
// object is opaque to the client; calls to get information about
// the associated ring buffer are available only through the IDVRReader
// object.
//
// The IDVRReader object can be used to retrieve the associated ASF profile
// and to seek and read data from the underlying ASF files. The reader
// object takes care of setting up ASF reader objects; however the current
// API does not expose these reader objects. This makes it impossible to 
// add markers, etc. to the ASF files; these features will be added in 
// subsequent versions of this API on an as needed basis. (Note that markers
// cannot be created on ASF reader objects anyway; this has to be done on
// ASF editor objects. The question is do we spec exactly all the functionality
// that our client needs and route it through the DVR reader object or
// do we expose the ASF api - the editor and reader objects - to the client.)
//
// NOTE the following exception to stmt above, viz., "the current API does 
// not expose these [the ASF] reader objects": The IWMProfile object returned
// by IDVRReader::GetProfile is an ASF object and can be QI'd for other 
// interfaces. Doing this is NOT recommended. Also, the client should not 
// directly release the IWMProfile object; instead it should call 
// ReleaseProfile so that the DVR reader object can clean up internally. (The
// ASF file out of which the profile object was retrieved may have been deleted
// from the ring buffer by the writer object after GetProfile was called. In 
// this case.the disk file has to be deleted. ReleaseProfile will clean up.)
//
// Note that if the DVR reader object is associated with a live source, calls
// to GetNextSample could fail because the ASF file that the reader is reading
// from has been deleted from the ring buffer writer object. Note that these
// calls will fail even though the ASF file still exists and the ASF SDK itself
// would not fail the read; this is a deliberate design decision. In this case, 
// the client should get the current valid extent, and seek to and resume 
// reading from some time in this interval.
//
// Note also that GetNextSample could fail if the writer had created "time holes"
// within the ring buffer's time extent, i.e., a time instant that is not backed
// by any file in the ring buffer. Calling Seek() to seek to times within holes
// will fail. To allow the reader to cope with this, the reader may call
// GetFirstValidTimeAfter() to get the next time instant for which a file exists.
// In particular, note that this can happen on the very first call to 
// GetNextSample - if the call was issued before the first sample was written and 
// the writer set the first sample's time later.

// Registry subkeys to customize the reader's behavior are created in the 
// registry subtree rooted at hRegistryRootKey. If hRegistryRootKey is NULL, 
// the default value used is HKCU\Software\Microsoft\DVR
//
cpp_quote( "HRESULT STDMETHODCALLTYPE DVRCreateReader(LPCWSTR pwszFileName, HKEY hRegistryRootKey, IDVRReader** ppDVRReader);" )

[
    object,
    uuid(20e8f795-ab81-46ca-a53c-e2b3239dc17a),
    pointer_default(unique),
    local
]
interface IDVRReader : IUnknown {

    // Retrieves the WM profile for this source or ASF file.
    // Each call to this function must be matched with a call
    // to ReleaseProfile()

    HRESULT GetProfile([out] IWMProfile** ppWMProfile);
    
    HRESULT ReleaseProfile([in] IWMProfile* pWMProfile);

    // Seek; note that the STREAM time is passed in to this method
    // If a call to Seek() fails, subsequent calls to GetNextSample 
    // will fail until Seek() is successfully called. That is, any
    // call to Seek() voids the reader's "current position"

    HRESULT Seek([in] QWORD cnsSeekStreamTime);

    // Mirrors IWMSyncReader::GetNextSample. Note that all 
    // arguments returned by that function are passed back without
    // modification EXCEPT that the sample time is converted from
    // an ASF file time to a stream time. Specifically, note that
    // the discontinuity flag is NOT changed; so if the client 
    // called Seek just before calling this method, it's his
    // responsibility to notify his client of a discontinuity.

    // Note that the client must call Seek before calling GetNextSample.
    // That is, the object is not primed to read "from the start".

    // If the reader is associated with a live source, the client should
    // call GetStreamTimeExtent after the first read completes to determine
    // the true start time of the stream. This is absolutely necessary if 
    // the client had called GetNextSample before the writer wrote the first
    // sample because the writer can change the stream's starting time before
    // the first sample is written.
    
    HRESULT GetNextSample([out] INSSBuffer**    ppSample,
                          [out] QWORD*          pcnsStreamTimeOfSample,
                          [out] QWORD*          pcnsSampleDuration,
                          [out] DWORD*          pdwFlags,
                          [out] WORD*           pwStreamNum);

    // Retrieves the time extent (as stream times) of the ring
    // buffer associated with this reader. Note that the returned time 
    // extent could change over time and that the returned values 
    // may be stale even when the call returns; this could happen if
    // the reader is reading a live source or a DVR program file that
    // is "live".
    //
    // If the reader is reading a DVR program file, the start stream time
    // will be 0. 
    //

    HRESULT GetStreamTimeExtent([out] QWORD*  pcnsStartStreamTime,
                                [out] QWORD*  pcnsEndStreamTime);

    // Returns the first valid stream time after cnsStreamTime. (A stream time
    // is "valid" if it is backed by a file.) Note that the returned
    // time maybe beyond the stream time extent of the ring buffer - this can
    // happen if the writer has created a file corresponding to cnsStreamTime
    // but has written data only for times < cnsStreamTime. If this function
    // returns E_FAIL, cnsStreamTime is beyond the last time for which the 
    // writer has created a file.
    //
    // Returns E_FAIL if cnsStreamTime = QWORD_INFINITE
    HRESULT GetFirstValidTimeAfter([in]  QWORD    cnsStreamTime,  
                                   [out] QWORD*   pcnsNextValidStreamTime);

    // Returns the last valid stream time before cnsStreamTime. 
    //
    // Returns E_FAIL if cnsStreamTime = 0 and m_cnsStartTime
     HRESULT GetLastValidTimeBefore([in]  QWORD    cnsStreamTime,  
                                    [out] QWORD*   pcnsLastValidStreamTime);

    // Cancels a pending and all subsequent calls to GetNextSample in
    // which the reader blocks (waiting for the writer to catch up).
    // Has no effect if the reader is reading a fully written file or
    // is lagging behind the reader.
    HRESULT Cancel();

    // Cancels a previous call to Cancel
    HRESULT ResetCancel();

    // Returns a non-zero value iff the source is live.
    ULONG IsLive();
}

// ============ API visible to app layer - has to be exported from DLL

// @@@@ ???? Need a call to enumerate DVR files? For now, we'll assume 
// this isn't needed. If we use ASX extension, we don't need this. If we
// use ASF, do we allow any ASF file to be played back by our apps? How do
// we know it's "our DVR file"? For v1, it may be enough to put all files 
// into 1 directory and make them visible and make all other non-DVR files
// we create (e.g., for the ring buffer) hidden.



// The file name is not massaged. We need this only if we create ASX
// files. Otherwise, the caller can as well use DeleteFile. @@@@, don't need 
// this
// BOOL DeleteDVRFile(LPCWSTR pwszFileName);

