#ifndef __IHAMMER_STL_MEMLAYER_
#define __IHAMMER_STL_MEMLAYER_
/**************************************************
 *
 *  memlayer. --
 *  An allocator, HAMMOC, STL containers can use
 *  in place of the default, std::allocator.
 *  This will use IHammer's nifty memory-manager,
 *  though sacrificing file and line numbers.
 *  The allocator is only used by STL, which has
 *  been presumably well debugged for mem leaks.
 *  HAMMOC helps divorce IHammer STL usage from CRT
 *  and employ a faster private-heap scheme.
 *
 *  Author: Norm Bryar
 *
 *  History:
 *    4/97 -- created
 *
 **************************************************/

	// The IHammer memory-manager stuff
  #ifndef __MEMMAN_H__
  #include      <memlayer.h>
  #endif // __MEMMAN_H__

	// The STL allocator stuff
  #ifndef _XMEMORY_
  #include      <xmemory>
  #endif // _XMEMORY_

  template< class _Ty >
  class HAMMOC : public std::allocator<_Ty>
  {
  public:
	pointer allocate( size_type N, const void * )
    #ifdef DEBUG_OPERATOR_NEW
	{  return (_Ty *) operator new( N * sizeof(_Ty), -1, "memlayer. HAMMOC::allocate" ); }
    #else
        {  return (_Ty *) operator new( N * sizeof(_Ty) ); }
    #endif // DEBUG_OPERATOR_NEW

	char _FARQ * _Charalloc( size_type N )
	{  return (char _FARQ *) allocate(N, NULL);  }
  };


#endif // __IHAMMER_STL_MEMLAYER_
