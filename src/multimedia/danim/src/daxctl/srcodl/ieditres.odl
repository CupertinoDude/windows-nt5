/*
 * IEDITRES.ODL
 * Neutral/English Language Default Parameter Page Type Library
 *
 * "Neutral" language is considered to be English.  We register
 * this under LCID of 0 so the lcid before "library" has to match.
 *
 * Copyright (c)1993-1995 Microsoft Corporation, All Rights Reserved
 *
 */

// This file will be processed by the Make Type Library (mktyplib) tool to
// produce the type library


// LIBID_IDefParamPgs
[
uuid(38DD59C1-54C7-11d0-840C-00AA00BB8085)
    , helpstring("Default Parameter Pages Library")
	// Review(a-rogerw) Localization should this be 0x0409??
    , lcid(0x0000)
    , version(1.0)
]

library DefParamPagesTypeLibrary
{
    importlib("STDOLE2.TLB");

	/*
		This is where we define constants we need!
	*/



   [dllname("Constants")]
   module Constants
    {
		const int NO_PARAM_PAGE            = 0;
		const int LIST_PARAM_PAGE          = 1;
		const int TIMING_PARAM_PAGE        = 2;
		const int SEL_OBJECT_PARAM_PAGE    = 3;
		const int LIST_OPTPARAM_PAGE       = 4;
		const int LIST_TRIGGERS_PAGE	   = 5;

		const unsigned long lRepeatUntilStopped = -1;
		const unsigned long lIgnoreValue = -1;

		const int TriggerStartTimeChanged    = 0x0001;
		const int TriggerSamplingRateChanged = 0x0002;
		const int TriggerRepeatCountChanged  = 0x0004;
		const int TriggerDurationChanged     = 0x0008;
		const int TriggerByTimePane          = 0x1000;
		const int TriggerByCmdPane           = 0x2000;
		const int TriggerByParamPage         = 0x4000;
		const int TriggerByTimingPage        = 0x8000;

		const int NAME_SIZE					 = 63;

		// Constants used to specify flags in PopulateTreeView
		const long omtvfEmpty		= 0x0000;
		const long omtvfObjects		= 0x0001;
		const long omtvfProcedures	= 0x0002;
		const long omtvfEvents		= 0x0004;
		const long omtvfMethods		= 0x0008;
		const long omtvfFindCurrent	= 0x8000;

		// Constants used to specify node types in the tree view
		// Odd numbers are selectable, even numbers are not
		const long omtvkLabel		= 0x0001;
		const long omtvkProcedure	= 0x0002;
		const long omtvkObject		= 0x0004;
		const long omtvkMethod		= 0x0008;
		const long omtvkLeaf		= 0x0010;
		const long omtvkEvent		= 0x0020;
		const long omtvkSelectable  = 0x002a;
		const long omtvkError		= 0x8000;
    };


	// Enumeration used by PopulateTreeView to specify the sort order
	typedef enum _EOMTVSO { omtvsoNone = 0, omtvsoAscending, omtvsoDescending } EOMTV_SortOrder;



	// @struct TIMINGDATA | This structure describes timing page data. It is used to pass \
	// data too/from the timing parameter page.
	typedef struct _TIMINGDATA
	{
		unsigned long nStartTime;		// @field ULONG | nStartTime | Offset in time to start of action
		unsigned long nDuration;		// @field ULONG | nDuration | Duration of action
		unsigned long nSamplingRate;	// @field ULONG | nRepeatRate | At what frequency do we repeat?
		unsigned long nRepeatCount;	    // @field ULONG | nRepeatCount | How many times do we repeat?
		unsigned long nTieBreak;	    // @field ULONG | nTieBreak | Tie break number.
		unsigned long nDropTolerance;   // @field ULONG | nDropTolerance | Drop tolerance in millisec
	} TIMINGDATA;
	typedef TIMINGDATA* LPTIMINGDATA;



    /*
     * IID_ISpecifyParameterPages
     * 'interface' entries must have 'odl' attribute
     */
    [

    uuid(AE56BEE2-5403-11d0-840C-00AA00BB8085)
        , helpstring("Definition of interface ISpecifyParameterPages")
        , odl
    ]

    interface ISpecifyParameterPages : IUnknown
	{

        HRESULT GetPagesFromId(
                [in] long dispid,				// dispid for desired set of pages
                [out] void ** pPages	        // array of GUIDS for pages
        );
    }



    /*
     * IID_IDefParamPgs
     * 'interface' entries must have 'odl' attribute
     */
    [

    uuid(AE56BEE3-5403-11d0-840C-00AA00BB8085)
        , helpstring("Definition of interface IDefParamPgs")
        , odl
    ]

    interface IDefParamPgs : ISpecifyParameterPages
    {
        //Methods - There are no real methods for this interface at this time
    }



	/*
     * IID_IObjectProxy
     * 'interface' entries must have 'odl' attribute
     */
    [

    uuid(A4A9C2F0-BB34-11d0-AB35-00AA00BB8085)
        , helpstring("Definition of interface IObjectProxy")
        , odl
    ]

    interface IObjectProxy : IUnknown
    {
		unsigned int GetParamCount( void );
		unsigned short GetParamName( [in] unsigned int nIndex,
									 [out] char* szName,
									 [in] unsigned short wBufSize
									 );
		unsigned short GetParamType([in] unsigned int nIndex );
		boolean IsParamOptional([in] unsigned int nIndex);
		boolean GetParamValue ([in] unsigned int nIndex, [out] unsigned short *pVar );
		boolean SetParamValue ([in] unsigned int nIndex, [in] unsigned short *pVar );
		boolean SetTimingData ([in]  void* pTimingData );
		boolean GetTimingData ([out] void* pTimingData );
		int TriggerEvent  ([in]  unsigned int iEvent);
		unsigned long GetDuration(void);
    }


	/*
     * IID_IActSetProxy
     * 'interface' entries must have 'odl' attribute
     */
    [

    uuid(80D7DDC0-DDF7-11d0-AF60-00A0C959BC0A)
        , helpstring("Definition of interface IActSetProxy")
        , odl
    ]

    interface IActSetProxy : IUnknown
    {
		unsigned int GetTriggerCount( void );
		unsigned short GetTriggerObjectName( [in] unsigned int nIndex,
											 [out] char* szName,
											 [in] unsigned short wBufSize
											 );
		unsigned short GetTriggerEventName( [in] unsigned int nIndex,
											[out] char* szName,
											[in] unsigned short wBufSize
											);
		unsigned int AddTrigger([in] char* szObjectName, [in] char* szEventName );
		unsigned int DeleteTrigger([in] unsigned int nIndex);
    }


	/*
     * IID_IObjectModelTreeView
     * 'interface' entries must have 'odl' attribute
     */
    [

    uuid(6BAD1160-E272-11d0-AF63-00A0C959BC0A)
        , helpstring("Definition of interface IObjectModelTreeView")
        , odl, restricted
    ]

    interface IObjectModelTreeView : IUnknown
    {
		HRESULT PopulateTreeView ( [in] long hwndTreeView,
			[in] EOMTV_SortOrder eomtvsoSortOrder, [in] long* lSortFlags, [out] char* szObject, [out] char* szEvent );
		HRESULT FindSelection ( [in] long hwndTreeView, [out] char* szObject, [out] char* szEvent );
    }


    /*
     * IID_IActViewTimeChangedAdvise
     * 'interface' entries must have 'odl' attribute
     */
    [
    uuid(D4FB89C0-BB34-11d0-AB35-00AA00BB8085)
        , helpstring("Definition of interface IActViewTimeChangedAdvise")
        , odl
    ]
    interface IActViewTimeChangedAdvise : IUnknown
    {
        //Methods
        [helpstring("Timing info has changed")]
			void OnTimingDataChange([in] unsigned int iFlags);

	}


    //CLSID_DefParamPgs
    [
    uuid(AE56BEE4-5403-11d0-840C-00AA00BB8085)
	    , helpstring("Default Parameter Page DLL")
    ]
    coclass DefParamPgs
	{
        interface     IDefParamPgs;
    }


#ifndef PARAMPGS_IN_TYPELIB

		// CLSID_NoParamsPage
		[
		 uuid(AE56BEE5-5403-11d0-840C-00AA00BB8085)
			 , helpstring("No parameters available page")
		]

		coclass NoParamsPage
		{
			interface     IUnknown;
		}
#endif // PARAMPGS_IN_TYPELIB

	// CLSID_ParamListPage
    [
    uuid(AE56BEE6-5403-11d0-840C-00AA00BB8085)
	    , helpstring("Parameter List Page")
    ]
    coclass ParamListPage
	{
        interface     IUnknown;
    }

	// CLSID_ParamTimingPage
    [
    uuid(AE56BEE7-5403-11d0-840C-00AA00BB8085)
	    , helpstring("Parameter Timing Page")
    ]
    coclass ParamTimingPage
	{
        interface     IUnknown;
    }


	// CLSID_ParamSelObjPage
    [
    uuid(AE56BEE8-5403-11d0-840C-00AA00BB8085)
	    , helpstring("Need to select object parameter Page")
    ]
    coclass ParamSelObjPage
	{
        interface     IUnknown;
    }


	// CLSID_OptParamListPage
    [
    uuid(24B03380-9EDE-11d0-840C-00AA00BB8085)
	    , helpstring("Optional Parameter List Page")
    ]
    coclass OptParamListPage
	{
        interface     IUnknown;
    }



	// CLSID_ParamTriggerPage
    [
    uuid(C3635FE0-DE04-11d0-AAD7-00A0C94A8147)
	    , helpstring("Parameter Trigger Page")
    ]
    coclass ParamTriggerPage
	{
        interface     IUnknown;
    }



    /*
     * IID_IParamSheetFrame
     * 'interface' entries must have 'odl' attribute
     */
    [
    uuid(38DD59C2-54C7-11d0-840C-00AA00BB8085)
        , helpstring("Definition of interface IParamSheetFrame")
        , odl
    ]
    interface IParamSheetFrame : IUnknown
    {
        //Methods
        [helpstring("Activate the frame")]
            HRESULT Activate([in] long hWndOwner, [in] unsigned int x,[in] unsigned int y,[in] unsigned long lcid, [in] int fModal);

        [helpstring("Deactivate the frame")]
            HRESULT Deactivate(void);

        [helpstring("Show the frame")]
            HRESULT Show([in] unsigned int nCmdShow);

        [helpstring("Move the frame")]
            HRESULT Move([in] unsigned int x, [in] unsigned int y, [in] unsigned int cx, [in] unsigned int cy);

        [helpstring("Is the frame Dirty")]
            HRESULT IsDirty(void);

        [helpstring("Apply pages in frame")]
            HRESULT Apply(void);

        [helpstring("SetObjects in the frame")]
            HRESULT SetObjects([in] unsigned long cObjects,[in] void* * ppunk,[in] unsigned long cPages,[in] GUID * pPageClsId );

    }




    //CLSID_ParamSheetFrame
    [
    uuid(96735203-5419-11d0-840C-00AA00BB8085)
        , helpstring("Parameter Sheet Frame Type Information")
    ]
    coclass ParamSheetFrame
	{
        interface     IParamSheetFrame;
    }



	// CLSID_PlayParamPage
    [
    uuid(76404FE1-59C5-11d0-840C-00AA00BB8085)
	    , helpstring("Play Parameter Page")
    ]
    coclass PlayParamPage
	{
        interface     IUnknown;
    }



	// CLSID_SgrfxRotationParamPage
    [
    uuid(3E2AB581-624B-11d0-840C-00AA00BB8085)
	    , helpstring("Sgrfx Rotation Parameter Page")
    ]
    coclass SgrfxRotationParamPage
	{
        interface     IUnknown;
    }



	// CLSID_SgrfxScaleParamPage
    [
    uuid(3E2AB582-624B-11d0-840C-00AA00BB8085)
	    , helpstring("Sgrfx Scale Parameter Page")
    ]
    coclass SgrfxScaleParamPage
	{
        interface     IUnknown;
    }


	// CLSID_SgrfxTransformParamPage
    [
    uuid(3E2AB584-624B-11d0-840C-00AA00BB8085)
	    , helpstring("Sgrfx Transform Parameter Page")
    ]
    coclass SgrfxTransformParamPage
	{
        interface     IUnknown;
    }


	// CLSID_SgrfxShearParamPage
    [
    uuid(3E2AB585-624B-11d0-840C-00AA00BB8085)
	    , helpstring("Sgrfx Shear Parameter Page")
    ]
    coclass SgrfxShearParamPage
	{
        interface     IUnknown;
    }



	// CLSID_SgrfxSourceURLParamPage
    [
    uuid(3E2AB586-624B-11d0-840C-00AA00BB8085)
	    , helpstring("Sgrfx SourceURL Parameter Page")
    ]
    coclass SgrfxSourceURLParamPage
	{
        interface     IUnknown;
    }


	// CLSID_SgrfxTranslateParamPage
    [
    uuid(3E2AB587-624B-11d0-840C-00AA00BB8085)
	    , helpstring("Sgrfx Translate Parameter Page")
    ]
    coclass SgrfxTranslateParamPage
	{
        interface     IUnknown;
    }

	//CLSID_EventBrowsePropertyPage
    [
    uuid(0002346B-0000-0000-C000-000000000046)
        , helpstring("IHammer Event Browser Property Pages Object Type Information")
    ]
    coclass EventBrowsePropertyPage
    {
    interface     IUnknown;
    }

	//CLSID_ObjectBrowsePropertyPage
    [
    uuid(0002346B-0000-0000-C000-000000000047)
        , helpstring("IHammer Object Browser Property Pages Object Type Information")
    ]
    coclass ObjectBrowsePropertyPage
    {
    interface     IUnknown;
    }

	// CLSID_TridentOMPPage
    [
    uuid(35546EF0-637D-11d0-B5C6-00AA00A71D1A)
	    , helpstring("IE4.0 Object Model Page")
    ]
    coclass TridentOMPPage
	{
        interface     IUnknown;
    }


	// CLSID_WMFCtlSourceURLParamPage
    [
    uuid(95BA35F0-85DB-11d0-B328-00A0C90A8FF2)
	    , helpstring("WMFCtl SourceURL Parameter Page")
    ]
    coclass WMFCtlSourceURLParamPage
	{
        interface     IUnknown;
    }

	[
	uuid(4E2F2B80-9BF4-11d0-A14D-00A0C908DB96)
	]
	coclass VisualFiltersPropertyPage
	{
		interface     IUnknown;
	}


	[
	uuid(4E2F2B81-9BF4-11d0-A14D-00A0C908DB96)
	]
	coclass MotionBlurPropertyPage
	{
		interface     IUnknown;
	}


	[
	uuid(4E2F2B82-9BF4-11d0-A14D-00A0C908DB96)
	]
	coclass ChromakeyPropertyPage
	{
		interface     IUnknown;
	}


	[
	uuid(4E2F2B83-9BF4-11d0-A14D-00A0C908DB96)
	]
	coclass PhotoshopPropertyPage
	{
		interface     IUnknown;
	}


	[
	uuid(4E2F2B84-9BF4-11d0-A14D-00A0C908DB96)
	]
	coclass WavePropertyPage
	{
		interface     IUnknown;
	}


	[
	uuid(4E2F2B85-9BF4-11d0-A14D-00A0C908DB96)
	]
	coclass DropShadowPropertyPage
	{
		interface     IUnknown;
	}


	[
	uuid(4E2F2B86-9BF4-11d0-A14D-00A0C908DB96)
	]
	coclass BevelPropertyPage
	{
		interface     IUnknown;
	}


	[
	uuid(4E2F2B87-9BF4-11d0-A14D-00A0C908DB96)
	]
	coclass TexturePropertyPage
	{
		interface     IUnknown;
	}


	[
	uuid(4E2F2B88-9BF4-11d0-A14D-00A0C908DB96)
	]
	coclass GleamPropertyPage
	{
		interface     IUnknown;
	}


	[
	uuid(4E2F2B89-9BF4-11d0-A14D-00A0C908DB96)
	]
	coclass GlowPropertyPage
	{
		interface     IUnknown;
	}

	[
	uuid(4E2F2B8A-9BF4-11d0-A14D-00A0C908DB96)
	]
	coclass OpacityPropertyPage
	{
		interface     IUnknown;
	}

	[
	uuid(4E2F2B8B-9BF4-11d0-A14D-00A0C908DB96)
	]
	coclass MaskPropertyPage
	{
		interface     IUnknown;
	}

	[
	uuid(4E2F2B8C-9BF4-11d0-A14D-00A0C908DB96)
	]
	coclass ShadowPropertyPage
	{
		interface     IUnknown;
	}

	[
	uuid(4E2F2B8D-9BF4-11d0-A14D-00A0C908DB96)
	]
	coclass ScramblePropertyPage
	{
		interface     IUnknown;
	}

	[
	uuid(4E2F2B8E-9BF4-11d0-A14D-00A0C908DB96)
	]
	coclass RevealTransitionPropertyPage
	{
		interface     IUnknown;
	}

	[
	uuid(4E2F2B8F-9BF4-11d0-A14D-00A0C908DB96)
	]
	coclass AnaglyphPropertyPage
	{
		interface     IUnknown;
	}

	[
	uuid(4E2F2B90-9BF4-11d0-A14D-00A0C908DB96)
	]
	coclass EmptyPropertyPage
	{
		interface     IUnknown;
	}

	[
	uuid(4E2F2B91-9BF4-11d0-A14D-00A0C908DB96)
	]
	coclass VisualTransitionsPropertyPage
	{
		interface     IUnknown;
	}

#ifdef SAMPLE_CODE
    /*
     * IID_IMyObject
     * 'interface' entries must have 'odl' attribute
     */
    [

    uuid(AE56BEE9-5403-11d0-840C-00AA00BB8085)
        , helpstring("Definition of interface IMyObject")
        , odl
    ]

    interface IMyObject : IUnknown
    {
        //Methods - There are no real methods for this interface at this time
    }

    //CLSID_MyObject
    [
    uuid(AE56BEEA-5403-11d0-840C-00AA00BB8085)
	    , helpstring("This is a test object")
    ]
    coclass MyObject
	{
        interface     IMyObject;
    }

#endif // SAMPLE_CODE


};

