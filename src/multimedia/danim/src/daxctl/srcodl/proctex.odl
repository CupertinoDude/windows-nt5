[
uuid(2C37C621-9C6F-11d0-9BF1-00A0C9191768)
    , helpstring("Intel Procedural Effect Library")
    , lcid(0x0000)
    , version(1.0)
]
library ProcTexLibrary
{
	importlib("STDOLE2.TLB");

    #ifdef OBJECT_TAG_MODEL
	  #define    EFFECT_ATTRIBS
	  #define    TRANS_ATTRIBS
	  #define    EFFECT_DISP_COMMON		IUnknown
	  #define    TRANS_DISP_COMMON		IUnknown
	#else
	  #define    EFFECT_ATTRIBS			,oleautomation, dual
	  #define    EFFECT_DISP_COMMON		IViewEffectCommon
	  #define    TRANS_ATTRIBS			,oleautomation, dual
	  #define    TRANS_DISP_COMMON		IViewTransCommon

	  /*
	   * Every visual filter (but not transition) has Enabled
	   */
	   [ uuid(8E64AA50-DC42-11d0-9949-00A0C90A8FF2),
	     oleautomation, dual, odl ]
	   interface IViewEffectCommon : IDispatch
	   {
			//Properties
			[propget, helpstring("Enabled")]
				HRESULT Enabled([out, retval] boolean * fEnabled);
			[propput]
				HRESULT Enabled([in] int fEnabled);
	   }

	   typedef [uuid(E938E079-DC3E-11d0-9949-00A0C90A8FF2),
	            helpstring("Transition Status Codes")]
	   enum
	   {
			[helpstring("stoppped")]  TransStopped=0,
			[helpstring("applied")]   TransApplied=1,
			[helpstring("stoppped")]  TransPlaying=2
	   } TRANS_STATUS;

	   [ uuid(8E64AB61-DC42-11d0-9949-00A0C90A8FF2),
	     oleautomation, dual, odl ]
	   interface IViewTransCommon : IDispatch
	   {
			//Properties
			[propget, helpstring("Duration")]
				HRESULT Duration([out, retval] float * pfltSecs);
			[propput]
				HRESULT Duration([in] float fltSecs);

			[propget, helpstring("Percent Completion")]
				HRESULT Percent([out, retval] unsigned int * pu);
			[propput]
				HRESULT Percent([in] unsigned int u);

			[propget, helpstring("Status")]
				HRESULT Status([out, retval] TRANS_STATUS *pStat);

			//Methods
			[helpstring("Apply Transition")]
				HRESULT Apply();
			[helpstring("Play Transition")]
				HRESULT Play([in, optional] VARIANT varSecs);			
			[helpstring("Abort Transition")]
				HRESULT Stop( );
	   }

	#endif	

	//===============================================

    /*
     * IID_IDispAdditive
     * 'interface' entries must have 'odl' attribute
     */
	    [	 
	    uuid(57FF5481-DCCA-11d0-B211-00A0C9191768)
		, helpstring("Definition of interface IDispAdditive")
		EFFECT_ATTRIBS		
		, odl
	    ]
	    interface IDispAdditive : EFFECT_DISP_COMMON
	    {
		//Properties
		[propget, helpstring("Harmonics")]
		    HRESULT Harmonics([out, retval] int * res);
		[propput]
		    HRESULT Harmonics([in] int nHarmonics);
		
		[propget, helpstring("NoiseScale")]
		    HRESULT NoiseScale([out, retval] int * res);
		[propput]
		    HRESULT NoiseScale([in] int nNoiseScale);

		[propget, helpstring("NoiseOffset")]
		    HRESULT NoiseOffset([out, retval] int * res);
		[propput]
		    HRESULT NoiseOffset([in] int nNoiseOffset);

		[propget, helpstring("TimeX")]
		    HRESULT TimeX([out, retval] int * res);
		[propput]
		    HRESULT TimeX([in] int nTime);

		[propget, helpstring("TimeY")]
		    HRESULT TimeY([out, retval] int * res);
		[propput]
		    HRESULT TimeY([in] int nTime);

		[propget, helpstring("ScaleX")]
		    HRESULT ScaleX([out, retval] int * res);
		[propput]
		    HRESULT ScaleX([in] int nScale);

		[propget, helpstring("ScaleY")]
		    HRESULT ScaleY([out, retval] int * res);
		[propput]
		    HRESULT ScaleY([in] int nScale);
		
		[propget, helpstring("ScaleT")]
		    HRESULT ScaleT([out, retval] int * res);
		[propput]
		    HRESULT ScaleT([in] int nScale);

		[propget, helpstring("Alpha")]
		    HRESULT Alpha([out, retval] int * res);
		[propput]
		    HRESULT Alpha([in] int nAlpha);

		[propget, helpstring("ColorKey")]
		    HRESULT ColorKey([out, retval] int * res);
		[propput]
		    HRESULT ColorKey([in] int nColorRGBA);

		[propget, helpstring("MaskMode")]
		    HRESULT MaskMode([out, retval] int * res);
		[propput]
		    HRESULT MaskMode([in] int nMaskMode);

		[propget, helpstring("GenerateSeed")]
		    HRESULT GenerateSeed([out, retval] int * res);
		[propput]
		    HRESULT GenerateSeed([in] int nSeed);

		[propget, helpstring("BitmapSeed")]
		    HRESULT BitmapSeed([out, retval] BSTR* b);
		[propput]
		    HRESULT BitmapSeed([in] BSTR* file);
		//Methods
		
	    }

	
	    //DIID_DIDispAdditive
	    [
	    uuid(842698E1-D836-11d0-B211-00A0C9191768)
		, helpstring("Definition of dispinterface DIDispAdditive")
	    ]
	    dispinterface DIDispAdditive
	    {
		interface IDispAdditive;
	    }
	
	
	    //CLSID_Additive	//in html
	    [
	    uuid(4834C721-DCC9-11d0-B211-00A0C9191768)
		, helpstring("Procedural Texture Additive Effects Filter")
	    ]
	    coclass Additive
	    {
		dispinterface   DIDispAdditive;
		interface       IDispAdditive;
		}


	//===============================================

    /*
     * IID_IDispDistortion
     * 'interface' entries must have 'odl' attribute
     */
	    [	 
	    uuid(57FF5485-DCCA-11d0-B211-00A0C9191768)
		, helpstring("Definition of interface IDispDistortion")
		EFFECT_ATTRIBS		
		, odl
	    ]
	    interface IDispDistortion : EFFECT_DISP_COMMON
	    {
		//Properties
		[propget, helpstring("Harmonics")]
		    HRESULT Harmonics([out, retval] int * res);
		[propput]
		    HRESULT Harmonics([in] int nHarmonics);
		
		[propget, helpstring("NoiseScaleU")]
		    HRESULT NoiseScaleU([out, retval] int * res);
		[propput]
		    HRESULT NoiseScaleU([in] int nNoiseScale);

		[propget, helpstring("NoiseScaleV")]
		    HRESULT NoiseScaleV([out, retval] int * res);
		[propput]
		    HRESULT NoiseScaleV([in] int nNoiseScale);

		[propget, helpstring("NoiseOffsetU")]
		    HRESULT NoiseOffsetU([out, retval] int * res);
		[propput]
		    HRESULT NoiseOffsetU([in] int nNoiseScale);

		[propget, helpstring("NoiseOffsetV")]
		    HRESULT NoiseOffsetV([out, retval] int * res);
		[propput]
		    HRESULT NoiseOffsetV([in] int nNoiseScale);


		[propget, helpstring("TimeUX")]
		    HRESULT TimeUX([out, retval] int * res);
		[propput]
		    HRESULT TimeUX([in] int nTime);

		[propget, helpstring("TimeUY")]
		    HRESULT TimeUY([out, retval] int * res);
		[propput]
		    HRESULT TimeUY([in] int nTime);

		[propget, helpstring("TimeVX")]
		    HRESULT TimeVX([out, retval] int * res);
		[propput]
		    HRESULT TimeVX([in] int nTime);

		[propget, helpstring("TimeVY")]
		    HRESULT TimeVY([out, retval] int * res);
		[propput]
		    HRESULT TimeVY([in] int nTime);


		[propget, helpstring("ScaleUX")]
		    HRESULT ScaleUX([out, retval] int * res);
		[propput]
		    HRESULT ScaleUX([in] int nScale);

		[propget, helpstring("ScaleUY")]
		    HRESULT ScaleUY([out, retval] int * res);
		[propput]
		    HRESULT ScaleUY([in] int nScale);
		
		[propget, helpstring("ScaleUT")]
		    HRESULT ScaleUT([out, retval] int * res);
		[propput]
		    HRESULT ScaleUT([in] int nScale);

		[propget, helpstring("ScaleVX")]
		    HRESULT ScaleVX([out, retval] int * res);
		[propput]
		    HRESULT ScaleVX([in] int nScale);

		[propget, helpstring("ScaleVY")]
		    HRESULT ScaleVY([out, retval] int * res);
		[propput]
		    HRESULT ScaleVY([in] int nScale);
		
		[propget, helpstring("ScaleVT")]
		    HRESULT ScaleVT([out, retval] int * res);
		[propput]
		    HRESULT ScaleVT([in] int nScale);

		//Methods
		
	    }

	
	    //DIID_DIDispDistortion
	    [
	    uuid(57FF5488-DCCA-11d0-B211-00A0C9191768)
		, helpstring("Definition of dispinterface DIDispDistortion")
	    ]
	    dispinterface DIDispDistortion
	    {
		interface IDispDistortion;
	    }
	
	
	    //CLSID_Distortion	//in html
	    [
	    uuid(4834C722-DCC9-11d0-B211-00A0C9191768)
		, helpstring("Procedural Texture Distortion Effects Filter")
	    ]
	    coclass Distortion
	    {
		dispinterface   DIDispDistortion;
		interface       IDispDistortion;
		}



};
