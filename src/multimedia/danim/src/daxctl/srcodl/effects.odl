[
uuid(3EE8A930-4D3F-11d0-97D0-00AA00BBB6E2)
    , helpstring("Effect Library")
    , lcid(0x0000)
    , version(1.0)
]
library EffectLibrary
{
	importlib("STDOLE2.TLB");

    #ifdef OBJECT_TAG_MODEL
	  #define    EFFECT_ATTRIBS
	  #define    TRANS_ATTRIBS
	  #define    EFFECT_DISP_COMMON		IUnknown
	  #define    TRANS_DISP_COMMON		IUnknown
	#else
	  #define    EFFECT_ATTRIBS			,oleautomation, dual
	  #define    EFFECT_DISP_COMMON		IViewEffectCommon
	  #define    TRANS_ATTRIBS			,oleautomation, dual
	  #define    TRANS_DISP_COMMON		IViewTransCommon

	  #define    DISPID_TRANS_FINISH    1

	  /*
	   * Every visual filter (but not transition) has Enabled
	   */
	   [ uuid(8E64AA50-DC42-11d0-9949-00A0C90A8FF2),
	     helpstring("Event interface for Transitions"),
		 hidden ]
	   dispinterface ICSSTransitionEvents
	   {
			properties:
			methods:			
			[id(DISPID_TRANS_FINISH)]
				void OnFinish(void);
	   }


	   [ uuid(8E64AA37-DC42-11d0-9949-00A0C90A8FF2),
	     oleautomation, dual, odl ]
	   interface IViewEffectCommon : IDispatch
	   {
			//Properties
			[propget, helpstring("Enabled")]
				HRESULT Enabled([out, retval] boolean * fEnabled);
			[propput]
				HRESULT Enabled([in] int fEnabled);
	   }

	   typedef [uuid(E938E079-DC3E-11d0-9949-00A0C90A8FF2),
	            helpstring("Transition Status Codes")]
	   enum
	   {
			[helpstring("stopped")]  TransStopped=0,
			[helpstring("applied")]  TransApplied=1,
			[helpstring("playing")]  TransPlaying=2
	   } TRANS_STATUS;

	   [ uuid(8E64AB61-DC42-11d0-9949-00A0C90A8FF2),
	     oleautomation, dual, odl ]
	   interface IViewTransCommon : IDispatch
	   {
			//Properties
			[propget, helpstring("Duration")]
				HRESULT Duration([out, retval] float * pfltSecs);
			[propput]
				HRESULT Duration([in] float fltSecs);

			[propget, helpstring("Percent Completion")]
				HRESULT Percent([out, retval] unsigned int * pu);
			[propput]
				HRESULT Percent([in] unsigned int u);

			[propget, helpstring("Status")]
				HRESULT Status([out, retval] TRANS_STATUS *pStat);

			//Methods
			[helpstring("Apply Transition")]
				HRESULT Apply();
			[helpstring("Play Transition")]
				HRESULT Play([in, optional] VARIANT varSecs);			
			[helpstring("Abort Transition")]
				HRESULT Stop( );
	   }

	#endif	

	//===============================================

    /*
     * IID_IDispAlpha
     * 'interface' entries must have 'odl' attribute
     */
	    [
	    uuid(3EE8A931-4D3F-11d0-97D0-00AA00BBB6E2)
		, helpstring("Definition of interface IDispAlpha")
		EFFECT_ATTRIBS
		, odl
	    ]
	    interface IDispAlpha : EFFECT_DISP_COMMON
	    {
		//Properties
		[propget, helpstring("Style")]
		    HRESULT Style([out, retval] long * lRes);
		[propput]
		    HRESULT Style([in] long lStyle);
		[propget, helpstring("Opacity")]
		    HRESULT Opacity([out, retval] long * res);
		[propput]
		    HRESULT Opacity([in] long lOpacity);
		[propget, helpstring("FinishOpacity")]
		    HRESULT FinishOpacity([out, retval] long * res);
		[propput]
		    HRESULT FinishOpacity([in] long lFinishOpacity);
		[propget, helpstring("StartX")]
		    HRESULT StartX([out, retval] long * res);
		[propput]
		    HRESULT StartX([in] long lStartX);
		[propget, helpstring("StartY")]
		    HRESULT StartY([out, retval] long * res);
		[propput]
		    HRESULT StartY([in] long lStartY);
		[propget, helpstring("FinishX")]
		    HRESULT FinishX([out, retval] long * res);
		[propput]
		    HRESULT FinishX([in] long lFinishX);
		[propget, helpstring("FinishY")]
		    HRESULT FinishY([out, retval] long * res);
		[propput]
		    HRESULT FinishY([in] long lFinishY);
	    [propget, helpstring("Strength")]
	        HRESULT Strength([out, retval] float * res);
	    [propput]
	        HRESULT Strength([in] float fltStrength);
		//Methods
	    }
	
	    //DIID_DIDispAlpha
	    [
	    uuid(3EE8A932-4D3F-11d0-97D0-00AA00BBB6E2)
		, helpstring("Definition of dispinterface DIDispAlpha")
	    ]
	    dispinterface DIDispAlpha
	    {
		interface IDispAlpha;
	    }
	
	
	    //CLSID_Alpha
	    [
	    uuid(3EE8A933-4D3F-11d0-97D0-00AA00BBB6E2)
		, helpstring("Alpha Channel Effects Filter")
	    ]
	    coclass Alpha
	    {
		dispinterface   DIDispAlpha;
		interface       IDispAlpha;
		}


	//===============================================

    /*
     * IID_IDispChroma
     * 'interface' entries must have 'odl' attribute
     */
	    [
		uuid(7D0CD241-5910-11d0-823A-00A0C908DB96)
		, helpstring("Definition of interface IDispChroma")
		EFFECT_ATTRIBS
		, odl
	    ]
	    interface IDispChroma : EFFECT_DISP_COMMON
	    {
		//Properties
		[propget, helpstring("Color")]
		    HRESULT Color([out, retval] long * res);
		[propput]
		    HRESULT Color([in] long lAmount);
		//Methods
	    }
	
	    //DIID_DIDispChroma
	    [
		uuid(7D0CD242-5910-11d0-823A-00A0C908DB96)
		, helpstring("Definition of dispinterface DIDispChroma")
	    ]
	    dispinterface DIDispChroma
	    {
		interface IDispChroma;
	    }
	
	
	    //CLSID_Chroma
	    [
		uuid(7D0CD243-5910-11d0-823A-00A0C908DB96)
		, helpstring("ChromaKey Filter")
	    ]
	    coclass Chroma
	    {
		dispinterface   DIDispChroma;
		interface       IDispChroma;
		}

	

	//===============================================

    /*
     * IID_IDispFlipHorizontal
     * 'interface' entries must have 'odl' attribute
     */
	    [
	    uuid(F6167901-5479-11d0-8236-00A0C908DB96)
	        , helpstring("Definition of interface IDispFlipHorizontal")
			EFFECT_ATTRIBS
	        , odl
	    ]
	    interface IDispFlipHorizontal : EFFECT_DISP_COMMON
	    {
	        //Properties
	        //Methods
	    }
	
	    //DIID_DIDispFlipHorizontal
	    [
	    uuid(F6167902-5479-11d0-8236-00A0C908DB96)
	        , helpstring("Definition of dispinterface DIDispFlipHorizontal")
	    ]
	    dispinterface DIDispFlipHorizontal
	    {
	        interface IDispFlipHorizontal;
	    }
	
	
	    //CLSID_FlipHorizontal
	    [
	    uuid(F6167903-5479-11d0-8236-00A0C908DB96)
	        , helpstring("FlipHorizontal Object Type Information")
	    ]
	    coclass FlipHorizontal
	    {
	        dispinterface   DIDispFlipHorizontal;
        	interface       IDispFlipHorizontal;
    	}


	//===============================================

    /*
     * IID_IDispFlipVertical
     * 'interface' entries must have 'odl' attribute
     */
	    [
	    uuid(67741681-547D-11d0-8236-00A0C908DB96)
	        , helpstring("Definition of interface IDispFlipVertical")
			EFFECT_ATTRIBS
	        , odl
	    ]
	    interface IDispFlipVertical : EFFECT_DISP_COMMON
	    {
	        //Properties
	        //Methods
	    }
	
	    //DIID_DIDispFlipVertical
	    [
	    uuid(67741682-547D-11d0-8236-00A0C908DB96)
	        , helpstring("Definition of dispinterface DIDispFlipVertical")
	    ]
	    dispinterface DIDispFlipVertical
	    {
	        interface IDispFlipVertical;
	    }
	
	
	    //CLSID_FlipVertical
	    [
	    uuid(67741683-547D-11d0-8236-00A0C908DB96)
	        , helpstring("FlipVertical Object Type Information")
	    ]
	    coclass FlipVertical
	    {
	        dispinterface   DIDispFlipVertical;
        	interface       IDispFlipVertical;
    	}


	//===============================================

    /*
     * IID_IDispGrayScale
     * 'interface' entries must have 'odl' attribute
     */
	    [
	    uuid(73F2B3A1-5474-11d0-8236-00A0C908DB96)
	        , helpstring("Definition of interface IDispGrayScale")
			EFFECT_ATTRIBS
	        , odl
	    ]
	    interface IDispGrayScale : EFFECT_DISP_COMMON
	    {
	        //Properties
	        //Methods
	    }
	
	    //DIID_DIDispGrayScale
	    [
	    uuid(73F2B3A2-5474-11d0-8236-00A0C908DB96)
	        , helpstring("Definition of dispinterface DIDispGrayScale")
	    ]
	    dispinterface DIDispGrayScale
	    {
	        interface IDispGrayScale;
	    }
	
	
	    //CLSID_GrayScale
	    [
	    uuid(73F2B3A3-5474-11d0-8236-00A0C908DB96)
	        , helpstring("GrayScale Object Type Information")
	    ]
	    coclass GrayScale
	    {
	        dispinterface   DIDispGrayScale;
        	interface       IDispGrayScale;
    	}


	//===============================================

    /*
     * IID_IDispInvert
     * 'interface' entries must have 'odl' attribute
     */
	    [
	    uuid(254E8EA2-4924-11d0-A787-00A0C91BBEE1)
	        , helpstring("Definition of interface IDispInvert")
			EFFECT_ATTRIBS
	        , odl
	    ]
	    interface IDispInvert : EFFECT_DISP_COMMON
	    {
	        //Properties
	        //Methods
	    }
	
	
	    //DIID_DIDispInvert
	    [

	    uuid(254E8EA3-4924-11d0-A787-00A0C91BBEE1)
	        , helpstring("Definition of dispinterface DIDispInvert")
	    ]
	    dispinterface DIDispInvert
	    {
	        interface IDispInvert;
	    }
	
	    //CLSID_Invert
	    [
	    uuid(254E8EA4-4924-11d0-A787-00A0C91BBEE1)
	        , helpstring("Invert Object Type Information")
	    ]
	    coclass Invert
	    {
	        dispinterface   DIDispInvert;
        	interface       IDispInvert;
    	}


	//===============================================

    /*
     * IID_IDispLights
     * 'interface' entries must have 'odl' attribute
     */
	    [
		  uuid(F1631E41-47F8-11d0-80D4-00AA006EC537)
		, helpstring("Definition of interface IDispLights")
		EFFECT_ATTRIBS
		, odl
	    ]
	    interface IDispLights : EFFECT_DISP_COMMON
	    {
		//Properties
		//[propget, helpstring("Amount")]
		//    long LightsAmount(void);
		//[propput]
		//    void LightsAmount([in] long lAmount);

		//Methods

			HRESULT addAmbient([in] int r, [in] int g, [in] int b, [in] int strength);
			HRESULT addPoint([in] int x, [in] int y, [in] int z, [in] int r, [in] int g, [in] int b, [in] int strength);
			HRESULT addCone([in] int x, [in] int y, [in] int z, [in] int tx, [in] int ty, [in] int r, 
					[in] int g, [in] int b, [in] int strength, [in] int spread);
			HRESULT moveLight([in] int lightNum, [in] int x, [in] int y, [in] int z, [in] int fAbsolute);
			HRESULT ChangeStrength([in] int lightNum, [in] int dStrength, [in] int fAbsolute);
			HRESULT ChangeColor([in] int lightNum, [in] int R, [in] int G, [in] int B, [in] int fAbsolute);
			HRESULT Clear();
	    }
	
	    //DIID_DIDispLights
	    [
		uuid(F1631E42-47F8-11d0-80D4-00AA006EC537)
		, helpstring("Definition of dispinterface DIDispLights")
	    ]
	    dispinterface DIDispLights
	    {
		interface IDispLights;
	    }
	
	
	    //CLSID_Lights
	    [
	    uuid(F1631E43-47F8-11d0-80D4-00AA006EC537)
		, helpstring("Lights Object Type Information")
	    ]
	    coclass Lights
	    {
		dispinterface   DIDispLights;
		interface       IDispLights;
		}


	//===============================================

    /*
     * IID_IDispMotionBlurEffect
     * 'interface' entries must have 'odl' attribute
     */
	    [
	    uuid(A380D682-4A3B-11d0-A787-00A0C91BBEE1)
	        , helpstring("Definition of interface IDispMotionBlurEffect")
			EFFECT_ATTRIBS
	        , odl
	    ]
	    interface IDispMotionBlurEffect : EFFECT_DISP_COMMON
	    {
	        //Properties
	        [propget, helpstring("Strength")]
	            HRESULT Strength([out, retval] int * res);
	        [propput]
	            HRESULT Strength([in] int iStrength);
	        [propget, helpstring("Direction")]
	            HRESULT Direction([out, retval] int * res);
	        [propput]
	            HRESULT Direction([in] int iDirection);
	        [propget, helpstring("Add")]
	            HRESULT Add([out, retval] boolean * res);
	        [propput]
	            HRESULT Add([in] int iAdd);
	
	        //Methods
	    }
	
	
	    //DIID_DIDispMotionBlurEffect
	    [
	    uuid(A380D683-4A3B-11d0-A787-00A0C91BBEE1)
	        , helpstring("Definition of dispinterface DIDispMotionBlurEffect")
	    ]
	    dispinterface DIDispMotionBlurEffect
	    {
	        interface IDispMotionBlurEffect;
	    }
	
	    //CLSID_MotionBlurEffect
	    [
	    uuid(A380D684-4A3B-11d0-A787-00A0C91BBEE1)
	        , helpstring("MotionBlurEffect Object Type Information")
	    ]
	    coclass MotionBlurEffect
	    {
	        dispinterface   DIDispMotionBlurEffect;
        	interface       IDispMotionBlurEffect;
    	}


	//===============================================

    /*
     * IID_IDispRedirectEffect
     * 'interface' entries must have 'odl' attribute
     */
	    [
	    uuid(D15CFDF2-7E4F-11d2-B520-00A0C98C01C9)
	        , helpstring("Definition of interface IDispRedirectEffect")
			EFFECT_ATTRIBS
	        , odl
	    ]
	    interface IDispRedirectEffect : EFFECT_DISP_COMMON
	    {
	        //Properties
	        //Methods
			[helpstring ("ElementImage")]
			HRESULT ElementImage([out, retval] VARIANT *pvarImage);
			[helpstring ("SetDAViewHandler")]
			HRESULT SetDAViewHandler([in] IDispatch *pDispViewHandler);
			[helpstring ("HasImageBeenAllocated")]
			HRESULT HasImageBeenAllocated([out, retval] BOOL *pfAllocated);
			[helpstring ("DoRedirection")]
			HRESULT DoRedirection([in] IUnknown *pInputSurface,
								  [in] HDC hdcOutput,
								  [in] RECT *pDrawRect);
	    }
	
	
	    //DIID_DIDispRedirectEffect
	    [
	    uuid(29AB59D2-7E50-11d2-B520-00A0C98C01C9)
	        , helpstring("Definition of dispinterface DIDispRedirectEffect")
	    ]
	    dispinterface DIDispRedirectEffect
	    {
	        interface IDispRedirectEffect;
	    }
	
	    //CLSID_RedirectEffect
	    [
	    uuid(29AB59D3-7E50-11d2-B520-00A0C98C01C9)
	        , helpstring("Redirect Effect Object Type Information")
	    ]
	    coclass RedirectEffect
	    {
	        dispinterface   DIDispRedirectEffect;
        	interface       IDispRedirectEffect;
    	}


	//===============================================

    /*
     * IID_IDispPhotoshop
     * 'interface' entries must have 'odl' attribute
     */
	    [
	    uuid(E06E0601-4C3C-11d0-BDC2-00A0C908DB96)
	        , helpstring("Definition of interface IDispPhotoshop")
			EFFECT_ATTRIBS
	        , odl
	    ]
	    interface IDispPhotoshop : EFFECT_DISP_COMMON
	    {
        	[propget]
            	HRESULT PlugInName([out, retval] BSTR * bstrName);
        	[propput]
            	HRESULT PlugInName([in] BSTR bstrName);
	    }
	
	    //DIID_DIDispPhotoshop
	    [
	    uuid(E06E0602-4C3C-11d0-BDC2-00A0C908DB96)
	        , helpstring("Definition of dispinterface DIDispPhotoshop")
	    ]
	    dispinterface DIDispPhotoshop
	    {
	        interface IDispPhotoshop;
	    }
	
	
	    //CLSID_Photoshop
	    [
	    uuid(E06E0603-4C3C-11d0-BDC2-00A0C908DB96)
	        , helpstring("Photoshop Object Type Information")
	    ]
	    coclass Photoshop
	    {
	        dispinterface   DIDispPhotoshop;
        	interface       IDispPhotoshop;
    	}


	//===============================================

    /*
     * IID_IDispShadow
     * 'interface' entries must have 'odl' attribute
     */
	    [
		uuid(6165A061-5F6A-11d0-B8F1-000000000000)
		, helpstring("Definition of interface IDispShadow")
		EFFECT_ATTRIBS
		, odl
	    ]
	    interface IDispShadow : EFFECT_DISP_COMMON
	    {
		//Properties
		[propget, helpstring("Color")]
		    HRESULT Color([out, retval] long * res);
		[propput]
		    HRESULT Color([in] long lAmount);
		//Properties
		[propget, helpstring("Direction")]
		    HRESULT Direction([out, retval] long * res);
		[propput]
		    HRESULT Direction([in] long lAngle);
		//Methods
	    }
	
	    //DIID_DIDispShadow
	    [
		uuid(6165A062-5F6A-11d0-B8F1-000000000000)
		, helpstring("Definition of dispinterface DIDispShadow")
	    ]
	    dispinterface DIDispShadow
	    {
		interface IDispShadow;
	    }
	
	
	    //CLSID_Shadow
	    [
		uuid(6165A063-5F6A-11d0-B8F1-000000000000)
		, helpstring("Shadow Filter")
	    ]
	    coclass Shadow
	    {
		dispinterface   DIDispShadow;
		interface       IDispShadow;
		}

	

#if 0
	//===============================================

    /*
     * IID_IDispSplashEffect
     * 'interface' entries must have 'odl' attribute
     */
	    [
	    uuid(7FCEB200-43AD-11d0-BDC2-00A0C908DB96)
	        , helpstring("Definition of interface IDispSplashEffect")
			EFFECT_ATTRIBS
	        , odl
	    ]
	    interface IDispSplashEffect : EFFECT_DISP_COMMON
	    {
	
	        //Properties
	        [propget, helpstring("Freq")]
	            HRESULT Freq([out, retval] int * res);
	        [propput]
	            HRESULT Freq([in] int nFreq);
	        [propget, helpstring("Skip")]
	            HRESULT Skip([out, retval] int * res);
	        [propput]
	            HRESULT Skip([in] int nSkip);
	        [propget, helpstring("SkipOff")]
	            HRESULT SkipOff([out, retval] int * res);
	        [propput]
	            HRESULT SkipOff([in] int nSkipOff);
	        [propget, helpstring("Phase")]
	            HRESULT Phase([out, retval] float  * res);
	        [propput]
	            HRESULT Phase([in] float fPhase);
	        [propget, helpstring("Percent")]
	            HRESULT Percent([out, retval] float  * res);
	        [propput]
	            HRESULT Percent([in] float fPercent);
	        [propget, helpstring("CentX")]
	            HRESULT CentX([out, retval] int * res);
	        [propput]
	            HRESULT CentX([in] int nCentX);
	        [propget, helpstring("CentY")]
	            HRESULT CentY([out, retval] int * res);
	        [propput]
	            HRESULT CentY([in] int nCentY);
	        [propget, helpstring("CurveType")]
	            HRESULT CurveType([out, retval] int * res);
	        [propput]
	            HRESULT CurveType([in] int nCurveType);
	        [propget, helpstring("LightX")]
	            HRESULT LightX([out, retval] int * res);
	        [propput]
	            HRESULT LightX([in] int nLightX);

	        [propget, helpstring("LightY")]
	            HRESULT LightY([out, retval] int * res);
	        [propput]
	            HRESULT LightY([in] int nLightY);

	        [propget, helpstring("LightZ")]
	            HRESULT LightZ([out, retval] int * res);
	        [propput]
	            HRESULT LightZ([in] int nLightZ);

	        [propget, helpstring("Ambient")]
	            HRESULT Ambient([out, retval] int * res);
	        [propput]
	            HRESULT Ambient([in] int nAmbient);
	        [propget, helpstring("Ks")]
	            HRESULT Ks([out, retval] int * res);
	        [propput]
	            HRESULT Ks([in] int nKs);
	        [propget, helpstring("Rn")]
	            HRESULT Rn([out, retval] int * res);
	        [propput]
	            HRESULT Rn([in] int nRn);
	        [propget, helpstring("LightStrength")]
	            HRESULT LightStrength([out, retval] int * res);
	        [propput]
	            HRESULT LightStrength([in] int nLightStrength);
	        [propget, helpstring("LightType")]
	            HRESULT LightType([out, retval] int * res);
	        [propput]
	            HRESULT LightType([in] int nLightType);
	        [propget, helpstring("Damp")]
	            HRESULT Damp([out, retval] int * res);
	        [propput]
	            HRESULT Damp([in] int nDamp);

	        //Methods
	    }
	
	
	    //DIID_DIDispSplashEffect
	    [
	    uuid(B4CC1022-6355-11d0-80E3-00AA006EC537)
	        , helpstring("Definition of dispinterface DIDispSplashEffect")
	    ]
	    dispinterface DIDispSplashEffect
	    {
	        interface IDispSplashEffect;
	    }
	
	
	    //CLSID_SplashEffect
	    [
	    uuid(B4CC1023-6355-11d0-80E3-00AA006EC537)
	        , helpstring("SplashEffect Object Type Information")
	    ]
	    coclass SplashEffect
	    {
	        dispinterface   DIDispSplashEffect;
        	interface       IDispSplashEffect;
    	}

#endif // 0

	//===============================================

    /*
     * IID_IDispWaveEffect
     * 'interface' entries must have 'odl' attribute
     */
	    [
	    uuid(26FD1040-6EF9-11d0-BD2E-00A0C908DB96)
	        , helpstring("Definition of interface IDispWaveEffect")
			EFFECT_ATTRIBS
	        , odl
	    ]
	    interface IDispWaveEffect : EFFECT_DISP_COMMON
	    {
	        //Properties
	        [propget, helpstring("Strength")]
	            HRESULT Strength([out, retval] long * res);
	        [propput]
	            HRESULT Strength([in] long lStrength);
	        [propget, helpstring("Freq")]
	            HRESULT Freq([out, retval] long * res);
	        [propput]
	            HRESULT Freq([in] long lWaves);
	        [propget, helpstring("Phase")]
	            HRESULT Phase([out, retval] int  * res);
	        [propput]
	            HRESULT Phase([in] int iPhase);
	        [propget, helpstring("LightStrength")]
	            HRESULT LightStrength([out, retval] int  * res);
	        [propput]
	            HRESULT LightStrength([in] int iLightStrength);
	        [propget, helpstring("Add")]
	            HRESULT Add([out, retval] boolean * res);
	        [propput]
	            HRESULT Add([in] int iAdd);
	        //Methods
	    }
	
	
	    //DIID_DIDispWaveEffect
	    [
	    uuid(0002115D-0000-0000-C000-000000000046)
	        , helpstring("Definition of dispinterface DIDispWaveEffect")
	    ]
	    dispinterface DIDispWaveEffect
	    {
	        interface IDispWaveEffect;
	    }
	
	
	    //CLSID_WaveEffect
	    [
	    uuid(13B3D462-43AD-11d0-BDC2-00A0C908DB96)
	        , helpstring("WaveEffect Object Type Information")
	    ]
	    coclass WaveEffect
	    {
	        dispinterface   DIDispWaveEffect;
        	interface       IDispWaveEffect;
    	}


	//===============================================

    /*
     * IID_IDispXray
     * 'interface' entries must have 'odl' attribute
     */
	    [
	    uuid(45588FF1-51FA-11d0-8236-00A0C908DB96)
	        , helpstring("Definition of interface IDispXray")
			EFFECT_ATTRIBS
	        , odl
	    ]
	    interface IDispXray : EFFECT_DISP_COMMON
	    {
	        //Properties
	        //Methods
	    }
	
	    //DIID_DIDispXray
	    [
	    uuid(45588FF2-51FA-11d0-8236-00A0C908DB96)
	        , helpstring("Definition of dispinterface DIDispXray")
	    ]
	    dispinterface DIDispXray
	    {
	        interface IDispXray;
	    }
	
	
	    //CLSID_Xray
	    [
	    uuid(45588FF3-51FA-11d0-8236-00A0C908DB96)
	        , helpstring("Xray Object Type Information")
	    ]
	    coclass Xray
	    {
	        dispinterface   DIDispXray;
        	interface       IDispXray;
    	}


	//===============================================

    /*
     * IID_IDispDropShadow
     * 'interface' entries must have 'odl' attribute
     */
	    [
	    uuid(D68FC8F2-6B17-11d0-80E6-00AA006EC537)
	        , helpstring("Definition of interface IDispDropShadow")
			EFFECT_ATTRIBS
	        , odl
	    ]
	    interface IDispDropShadow : EFFECT_DISP_COMMON
	    {
	        //Properties
	        [propget, helpstring("Color")]
	            HRESULT Color([out, retval] unsigned long * res);
	        [propput]
	            HRESULT Color([in] unsigned long dwColor);
	        [propget, helpstring("OffX")]
	            HRESULT OffX([out, retval] int * res);
	        [propput]
	            HRESULT OffX([in] int nOffX);
	        [propget, helpstring("OffY")]
	            HRESULT OffY([out, retval] int * res);
	        [propput]
	            HRESULT OffY([in] int nOffY);
	        [propget, helpstring("Positive")]
	            HRESULT Positive([out, retval] boolean * res);
	        [propput]
	            HRESULT Positive([in] int nPositive);
	        //Methods
	    }
	
	
	    //DIID_DIDispDropShadow
	    [
	    uuid(D68FC8F3-6B17-11d0-80E6-00AA006EC537)
	        , helpstring("Definition of dispinterface DIDispDropShadow")
	    ]
	    dispinterface DIDispDropShadow
	    {
	        interface IDispDropShadow;
	    }
	
	    //CLSID_DropShadow
	    [
	    uuid(D68FC8F4-6B17-11d0-80E6-00AA006EC537)
	        , helpstring("DropShadow Object Type Information")
	    ]
	    coclass DropShadow
	    {
	        dispinterface   DIDispDropShadow;
        	interface       IDispDropShadow;
    	}

#if 0

	//===============================================

    /*
     * IID_IDispScramble
     * 'interface' entries must have 'odl' attribute
     */
	    [
	    uuid(92F85C60-7EA8-11d0-840C-00AA00BB8085)
	        , helpstring("Definition of interface IDispScramble")
			EFFECT_ATTRIBS
	        , odl
	    ]
	    interface IDispScramble : EFFECT_DISP_COMMON
	    {
			//Properties
			[propget, helpstring("Seed")]
				HRESULT Seed([out, retval] long * res);
			[propput]
				HRESULT Seed([in] long lSeedValue);
			[propget, helpstring("Percent")]
				HRESULT Percent([out, retval] long * res);
			[propput]
				HRESULT Percent([in] long lPercent);
			[propget, helpstring("HorzSegments")]
				HRESULT HorzSegments([out, retval] long * res);
			[propput]
				HRESULT HorzSegments([in] long lNumSegments);
			[propget, helpstring("VertSegments")]
				HRESULT VertSegments([out, retval] long * res);
			[propput]
				HRESULT VertSegments([in] long lNumSegments);
			//Methods
	    }
	
	    //DIID_DIDispScramble
	    [
	    uuid(92F85C61-7EA8-11d0-840C-00AA00BB8085)
	        , helpstring("Definition of dispinterface DIDispScramble")
	    ]
	    dispinterface DIDispScramble
	    {
	        interface IDispScramble;
	    }
	
	
	    //CLSID_Scramble
	    [
	    uuid(92F85C62-7EA8-11d0-840C-00AA00BB8085)
	        , helpstring("Scramble Object Type Information")
	    ]
	    coclass Scramble
	    {
	        dispinterface   DIDispScramble;
        	interface       IDispScramble;
    	}

#endif // 0
	
	//===============================================

    /*
     * IID_IDispMask
     * 'interface' entries must have 'odl' attribute
     */
	    [
	    uuid(4709E4E4-6B05-11d0-80E6-00AA006EC537)
	        , helpstring("Definition of interface IDispMask")
			EFFECT_ATTRIBS
	        , odl
	    ]
	    interface IDispMask : EFFECT_DISP_COMMON
	    {
	        //Properties
	        [propget, helpstring("Color")]
	            HRESULT Color([out, retval] unsigned long * res);
	        [propput]
	            HRESULT Color([in] unsigned long dwColor);
	        //Methods
	    }
	
	
	    //DIID_DIDispMask
	    [
	    uuid(4709E4E2-6B05-11d0-80E6-00AA006EC537)
	        , helpstring("Definition of dispinterface DIDispMask")
	    ]
	    dispinterface DIDispMask
	    {
	        interface IDispMask;
	    }
	
	    //CLSID_Mask
	    [
	    uuid(4709E4E3-6B05-11d0-80E6-00AA006EC537)
	        , helpstring("Mask Object Type Information")
	    ]
	    coclass Mask
	    {
	        dispinterface   DIDispMask;
        	interface       IDispMask;
    	}

#if 0
	//===============================================

    /*
     * IID_IDispTexture
     * 'interface' entries must have 'odl' attribute
     */
	    [
			uuid(4fec25d0-7a4d-11d0-9826-00a0c90c2a0b)
	        , helpstring("Definition of interface IDispTexture")
			EFFECT_ATTRIBS
	        , odl
	    ]
	    interface IDispTexture : EFFECT_DISP_COMMON
	    {
	        //Properties
	        [propget, helpstring("Strength")]
	            HRESULT Strength([out, retval] long * res);
	        [propput]
	            HRESULT Strength([in] long lAmount);
	        //Methods
	            void AddStrength([in] long lAmount);
	    }
	
	
	    //DIID_DIDispTexture
	    [
			uuid(4fec25d1-7a4d-11d0-9826-00a0c90c2a0b)
	        , helpstring("Definition of dispinterface DIDispTexture")
	    ]
	    dispinterface DIDispTexture
	    {
	        interface IDispTexture;
	    }
	
	    //CLSID_Texture
	    [
			uuid(4fec25d2-7a4d-11d0-9826-00a0c90c2a0b)
	        , helpstring("Texture Object Type Information")
	    ]
	    coclass Texture
	    {
	        dispinterface   DIDispTexture;
        	interface       IDispTexture;
    	}

#endif // 0

	//===============================================

    /*
     * IID_IDispGlow
     * 'interface' entries must have 'odl' attribute
     */
	    [
	    uuid(02C7E640-7E04-11d0-9D99-00A0C908DB96)
	        , helpstring("Definition of interface IDispGlow")
			EFFECT_ATTRIBS
	        , odl
	    ]
	    interface IDispGlow : EFFECT_DISP_COMMON
	    {
		//Properties
		[propget, helpstring("Color")]
		    HRESULT Color([out, retval] unsigned long * res);
		[propput]
		    HRESULT Color([in] unsigned long lColor);
		//Properties
		[propget, helpstring("Strength")]
		    HRESULT Strength([out, retval] long * res);
		[propput]
		    HRESULT Strength([in] long lStrength);
		//Methods
	    }

	
	    //DIID_DIDispGlow
	    [
	    uuid(02C7E641-7E04-11d0-9D99-00A0C908DB96)
	        , helpstring("Definition of dispinterface DIDispGlow")
	    ]
	    dispinterface DIDispGlow
	    {
	        interface IDispGlow;
	    }
	

	    //CLSID_Glow
	    [
	    uuid(02C7E642-7E04-11d0-9D99-00A0C908DB96)
	        , helpstring("Glow Object Type Information")
	    ]
	    coclass Glow
	    {
	        dispinterface   DIDispGlow;
        	interface       IDispGlow;
    	}


	//===============================================

    /*
     * IID_IDispBevel
     * 'interface' entries must have 'odl' attribute
     */
	    [
	    uuid(D2F03B00-7FB2-11d0-9D99-00A0C908DB96)
	        , helpstring("Definition of interface IDispBevel")
			EFFECT_ATTRIBS
	        , odl
	    ]
	    interface IDispBevel : EFFECT_DISP_COMMON
	    {
		//Properties
		[propget, helpstring("BkColor")]
		    HRESULT BkColor([out, retval] unsigned long * res);
		[propput]
		    HRESULT BkColor([in] unsigned long lBkColor);
		//Properties
		[propget, helpstring("BevelWidth")]
		    HRESULT BevelWidth([out, retval] long * res);
		[propput]
		    HRESULT BevelWidth([in] long lBevelWidth);
		//Methods
	    }

	
	    //DIID_DIDispBevel
	    [
	    uuid(D2F03B01-7FB2-11d0-9D99-00A0C908DB96)
	        , helpstring("Definition of dispinterface DIDispBevel")
	    ]
	    dispinterface DIDispBevel
	    {
	        interface IDispBevel;
	    }
	

	    //CLSID_Bevel
	    [
	    uuid(D2F03B02-7FB2-11d0-9D99-00A0C908DB96)
	        , helpstring("Bevel Object Type Information")
	    ]
	    coclass Bevel
	    {
	        dispinterface   DIDispBevel;
        	interface       IDispBevel;
    	}

	//===============================================

	typedef [uuid(E938E080-DC3E-11d0-9949-00A0C90A8FF2),
             helpstring("Reveal transition shapes")]
	enum
	{
		[helpstring("Box In")] 					BoxIn=0,
		[helpstring("Box Out")]					BoxOut=1,
		[helpstring("Circle In")]				CircleIn=2,
		[helpstring("Circle Out")]				CircleOut=3,
		[helpstring("Wipe Up")] 				WipeUp=4,
		[helpstring("Wipe Down")]				WipeDown=5,
		[helpstring("Wipe Right")]				WipeRight=6,
		[helpstring("Wipe Left")]				WipeLeft=7,
		[helpstring("Vertical Blinds")]			BlindsV=8,
		[helpstring("Horizontal Blinds")] 		BlindsH=9,
		[helpstring("Checker Across")]			CheckerRight=10,
		[helpstring("Checker Down")]			CheckerDown=11,
		[helpstring("Dissolve")]				Dissolve=12,
		[helpstring("Vertical Split In")]		SplitInV=13,
		[helpstring("Vertical Split Out")]		SplitOutV=14,
		[helpstring("Horizontal Split In")]		SplitInH=15,
		[helpstring("Horizontal Split Out")]	SplitOutH=16,
		[helpstring("Left Down")] 				LeftDown=17,
		[helpstring("Left Up")]					LeftUp=18,
		[helpstring("Right Down")]				RightDown=19,
		[helpstring("Right Up")]				RightUp=20,
		[helpstring("Horizontal Bars")] 		BarsH=21,
		[helpstring("Vertical Bars")]			BarsV=22,
		[helpstring("Random Shape")]			RandomShape=23
	} REVEAL_SHAPE;

    /*
     * IID_IDispRevealTransition
     * 'interface' entries must have 'odl' attribute
     */
	    [
	    uuid(EB8F50E0-85D1-11d0-9D9D-00A0C908DB96)
	        , helpstring("Definition of interface IDispRevealTransition")
			TRANS_ATTRIBS
	        , odl
	    ]
	    interface IDispRevealTransition : TRANS_DISP_COMMON
	    {
		//Properties
		[propget, helpstring("Transition")]
		    HRESULT Transition([out, retval] REVEAL_SHAPE * pshape);
		[propput]
		    HRESULT Transition([in] REVEAL_SHAPE shape);
		//Methods
	    }
	
	    //DIID_DIDispRevealTransition
	    [
	    uuid(EB8F50E1-85D1-11d0-9D9D-00A0C908DB96)
	        , helpstring("Definition of dispinterface DIDispRevealTransition")
	    ]
	    dispinterface DIDispRevealTransition
	    {
	        interface IDispRevealTransition;
	    }
	

	    //CLSID_RevealTransition
	    [
	    uuid(EB8F50E2-85D1-11d0-9D9D-00A0C908DB96)
	        , helpstring("Reveal Transition Information")
	    ]
	    coclass RevealTransition
	    {
	        dispinterface   DIDispRevealTransition;
        	interface       IDispRevealTransition;
			#ifndef OBJECT_TAG_MODEL
			[source] dispinterface ICSSTransitionEvents;
			#endif
		}

#if 0
	//===============================================
    /*
     * IID_IDispAnaglyph
     * 'interface' entries must have 'odl' attribute
     */
	    [
	    uuid(6AFCD5E0-8A76-11d0-9D9E-00A0C908DB96)
	        , helpstring("Definition of interface IDispAnaglyph")
			EFFECT_ATTRIBS
	        , odl
	    ]
	    interface IDispAnaglyph : EFFECT_DISP_COMMON
	    {
		//Properties
		[propget, helpstring("Technique")]
		    HRESULT Technique([out, retval] long * res);
		[propput]
		    HRESULT Technique([in] long lTechnique);
		//Properties
		[propget, helpstring("Offset")]
		    HRESULT Offset([out, retval] long * res);
		[propput]
		    HRESULT Offset([in] long lOffset);
		//Methods
	    }
	
	    //DIID_DIDispAnaglyph
	    [
	    uuid(6AFCD5E1-8A76-11d0-9D9E-00A0C908DB96)
	        , helpstring("Definition of dispinterface DIDispAnaglyph")
	    ]
	    dispinterface DIDispAnaglyph
	    {
	        interface IDispAnaglyph;
	    }
	

	    //CLSID_Anaglyph
	    [
	    uuid(6AFCD5E2-8A76-11d0-9D9E-00A0C908DB96)
	        , helpstring("Anaglyph Object Type Information")
	    ]
	    coclass Anaglyph
	    {
	        dispinterface   DIDispAnaglyph;
        	interface       IDispAnaglyph;
    	}
#endif // 0

		//===============================================

    /*
     * IID_IDispAlphaTransition
     * 'interface' entries must have 'odl' attribute
     */
	    [
	    uuid(AF0DF370-A631-11d0-8DD0-00AA0060DB00)
	        , helpstring("Definition of interface IDispAlphaTransition")
			TRANS_ATTRIBS
	        , odl
	    ]
	    interface IDispAlphaTransition : TRANS_DISP_COMMON
	    {
	        //Properties
	        //Methods
	    }
	
	
	    //DIID_DIDispAlphaTransition
	    [

	    uuid(AF0DF371-A631-11d0-8DD0-00AA0060DB00)
	        , helpstring("Definition of dispinterface DIDispAlphaTransition")
	    ]
	    dispinterface DIDispAlphaTransition
	    {
	        interface IDispAlphaTransition;
	    }
	
	    //CLSID_AlphaTransition
	    [
	    uuid(AF0DF372-A631-11d0-8DD0-00AA0060DB00)
	        , helpstring("Alpha Transition Type Information")
	    ]
	    coclass AlphaTransition
	    {
	        dispinterface   DIDispAlphaTransition;
        	interface       IDispAlphaTransition;
			#ifndef OBJECT_TAG_MODEL
			[source] dispinterface ICSSTransitionEvents;
			#endif
    	}

};
