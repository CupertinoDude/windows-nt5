#ifndef C_ONLY
#ifdef VB_ONLY
	#define D3DVECTOR3		D3DVECTOR
	#define D3DQUATERNION_CDESC 	D3DQUATERNION
	#define D3DMATRIX_CDESC		D3DMATRIX
#else
	#define D3DVECTOR  D3DVECTOR_CDESC
    	#define D3DVECTOR3 D3DVECTOR_CDESC
	#define D3DVECTOR2 D3DVECTOR2_CDESC
	#define D3DVECTOR4 D3DVECTOR4_CDESC
	#define D3DQUATERNION 	D3DQUATERNION_CDESC
	#define D3DMATRIX	D3DMATRIX_CDESC
#endif

	#define CALLTYPE _stdcall
 

 [helpcontext(86222)]
    	typedef struct D3DQUATERNION_CDESC {
    		FLOAT x;	
    		FLOAT y;    		
			FLOAT z;    		
			FLOAT w;    		
    	} D3DQUATERNION_CDESC;
    



//    	[helpcontext(400700)]
//    	typedef struct D3DCOLORVALUE_CDESC {
//    		FLOAT r;
//            	FLOAT g;
//    		FLOAT b;
//    		FLOAT a;
//    	} D3DCOLORVALUE_CDESC;




    [
        dllname("dx8vb.dll")
    ]
    module D3DXMATH_VECTOR2
    {
	[entry(112) ,helpcontext(86546)] FLOAT CALLTYPE D3DXVec2Length ([in]  D3DVECTOR2 *V );
	[entry(113) ,helpcontext(86547)] FLOAT CALLTYPE D3DXVec2LengthSq ([in]  D3DVECTOR2 *V );
	[entry(5) ,helpcontext(86544)] FLOAT CALLTYPE D3DXVec2Dot  ( [in] D3DVECTOR2 *V1, [in]  D3DVECTOR2 *V2 );
	[entry(6) ,helpcontext(86543)] FLOAT CALLTYPE D3DXVec2CCW  ( [in] D3DVECTOR2 *V1, [in]  D3DVECTOR2 *V2 );
	[entry(7) ,helpcontext(86539)] LONG  CALLTYPE D3DXVec2Add  ( [in,out] D3DVECTOR2 *VOut , [in] D3DVECTOR2 *V1, [in]  D3DVECTOR2 *V2 );
	[entry(8) ,helpcontext(86553)] LONG  CALLTYPE D3DXVec2Subtract ([in,out] D3DVECTOR2 *VOut , [in] D3DVECTOR2 *V1, [in]  D3DVECTOR2 *V2 );
	[entry(9) ,helpcontext(86550)] LONG  CALLTYPE D3DXVec2Minimize ([in,out] D3DVECTOR2 *VOut , [in] D3DVECTOR2 *V1, [in]  D3DVECTOR2 *V2 );
	[entry(10) ,helpcontext(86549)] LONG  CALLTYPE D3DXVec2Maximize ([in,out] D3DVECTOR2 *VOut , [in] D3DVECTOR2 *V1, [in]  D3DVECTOR2 *V2 );
	[entry(11) ,helpcontext(86552)] LONG  CALLTYPE D3DXVec2Scale ([in,out] D3DVECTOR2 *VOut , [in] D3DVECTOR2 *V1, [in]  FLOAT s );
	[entry(12) ,helpcontext(86548)] LONG  CALLTYPE D3DXVec2Lerp ([in,out] D3DVECTOR2 *VOut , [in] D3DVECTOR2 *V1, [in]  D3DVECTOR2 *V2, [in]  FLOAT s );
	[entry(13) ,helpcontext(86551)] LONG  CALLTYPE D3DXVec2Normalize ( [in,out] D3DVECTOR2 *VOut , [in] D3DVECTOR2 *V);
	[entry(14) ,helpcontext(86545)] LONG  CALLTYPE D3DXVec2Hermite ( [in,out] D3DVECTOR2 *VOut, [in] D3DVECTOR2 *V1, [in] D3DVECTOR2 *T1,
			      [in] D3DVECTOR2 *V2, [in] D3DVECTOR2 *T2, [in] FLOAT s );
	[entry(15) ,helpcontext(86540)] LONG  CALLTYPE D3DXVec2BaryCentric (  [in,out] D3DVECTOR2 *VOut, [in] D3DVECTOR2 *V1, [in] D3DVECTOR2 *V2,
			      [in] D3DVECTOR2 *V3, [in] FLOAT f, [in] FLOAT g );
	[entry(16) ,helpcontext(86554)] LONG  CALLTYPE D3DXVec2Transform (  [in,out] D3DVECTOR4 *VOut, [in] D3DVECTOR2 *V1, [in] D3DMATRIX *M);
	[entry(17) ,helpcontext(86555)] LONG  CALLTYPE D3DXVec2TransformCoord(  [in,out] D3DVECTOR2 *VOut, [in] D3DVECTOR2 *V1, [in] D3DMATRIX *M);
	[entry(18) ,helpcontext(86556)] LONG  CALLTYPE D3DXVec2TransformNormal ([in,out] D3DVECTOR2 *VOut, [in] D3DVECTOR2 *V1, [in] D3DMATRIX *M);
	[entry(125) ,helpcontext(86541)] LONG  CALLTYPE D3DXVec2CatmullRom([in,out] D3DVECTOR2 *VOut,  [in] D3DVECTOR2 *V0, [in] D3DVECTOR2 *V1, [in] D3DVECTOR2 *V2, [in] D3DVECTOR2 *V3, [in] FLOAT s);



     };


    [
        dllname("dx8vb.dll")
    ]
    module D3DXMATH_VECTOR3
    {
	[entry(19) ,helpcontext(86562)] FLOAT CALLTYPE D3DXVec3Length ([in]  D3DVECTOR3 *V );
	[entry(20) ,helpcontext(86563)] FLOAT CALLTYPE D3DXVec3LengthSq ([in]  D3DVECTOR3 *V );
	[entry(21) ,helpcontext(86560)] FLOAT CALLTYPE D3DXVec3Dot  ( [in] D3DVECTOR3 *V1, [in]  D3DVECTOR3 *V2 );
	[entry(22) ,helpcontext(86559)] LONG  CALLTYPE D3DXVec3Cross  ( [in,out] D3DVECTOR3 *VOut, [in] D3DVECTOR3 *V1, [in]  D3DVECTOR3 *V2 );
	[entry(23) ,helpcontext(86557)] LONG  CALLTYPE D3DXVec3Add  ( [in,out] D3DVECTOR3 *VOut , [in] D3DVECTOR3 *V1, [in]  D3DVECTOR3 *V2 );
	[entry(24) ,helpcontext(86570)] LONG  CALLTYPE D3DXVec3Subtract ([in,out] D3DVECTOR3 *VOut , [in] D3DVECTOR3 *V1, [in]  D3DVECTOR3 *V2 );
	[entry(25) ,helpcontext(86566)] LONG  CALLTYPE D3DXVec3Minimize ([in,out] D3DVECTOR3 *VOut , [in] D3DVECTOR3 *V1, [in]  D3DVECTOR3 *V2 );
	[entry(26) ,helpcontext(86565)] LONG  CALLTYPE D3DXVec3Maximize ([in,out] D3DVECTOR3 *VOut , [in] D3DVECTOR3 *V1, [in]  D3DVECTOR3 *V2 );
	[entry(27) ,helpcontext(86569)] LONG  CALLTYPE D3DXVec3Scale ([in,out] D3DVECTOR3 *VOut , [in] D3DVECTOR3 *V1, [in]  FLOAT s );
	[entry(28) ,helpcontext(86564)] LONG  CALLTYPE D3DXVec3Lerp ([in,out] D3DVECTOR3 *VOut , [in] D3DVECTOR3 *V1, [in]  D3DVECTOR3 *V2, [in]  FLOAT s );
	[entry(29) ,helpcontext(86567)] LONG  CALLTYPE D3DXVec3Normalize ( [in,out] D3DVECTOR3 *VOut , [in] D3DVECTOR3 *V);
	[entry(30) ,helpcontext(86561)] LONG  CALLTYPE D3DXVec3Hermite ( [in,out] D3DVECTOR3 *VOut, [in] D3DVECTOR3 *V1, [in] D3DVECTOR3 *T1,
			      [in] D3DVECTOR3 *V2, [in] D3DVECTOR3 *T2, [in] FLOAT s );
	[entry(31) ,helpcontext(86558)] LONG  CALLTYPE D3DXVec3BaryCentric (  [in,out] D3DVECTOR3 *VOut, [in] D3DVECTOR3 *V1, [in] D3DVECTOR3 *V2,
			      [in] D3DVECTOR3 *V3, [in] FLOAT f, [in] FLOAT g );
	[entry(32) ,helpcontext(86571)] LONG  CALLTYPE D3DXVec3Transform (  [in,out] D3DVECTOR4 *VOut, [in] D3DVECTOR3 *V1, [in] D3DMATRIX *M);
	[entry(33) ,helpcontext(86572)] LONG  CALLTYPE D3DXVec3TransformCoord(  [in,out] D3DVECTOR3 *VOut, [in] D3DVECTOR3 *V1, [in] D3DMATRIX *M);
	[entry(34) ,helpcontext(86573)] LONG  CALLTYPE D3DXVec3TransformNormal ([in,out] D3DVECTOR3 *VOut, [in] D3DVECTOR3 *V1, [in] D3DMATRIX *M);

	[entry(126) ,helpcontext(86542)] LONG  CALLTYPE D3DXVec3CatmullRom([in,out] D3DVECTOR3 *VOut,  [in] D3DVECTOR3 *V0, [in] D3DVECTOR3 *V1, [in] D3DVECTOR3 *V2, [in] D3DVECTOR3 *V3, [in] FLOAT s);
	[entry(128) ,helpcontext(86568)] LONG  CALLTYPE D3DXVec3Project([in,out] D3DVECTOR3 *VOut, [in] D3DVECTOR3 *V, [in] D3DVIEWPORT8_CDESC *Viewport, [in] D3DMATRIX_CDESC *Projection, [in] D3DMATRIX_CDESC *view, [in]  D3DMATRIX_CDESC *World);
	[entry(129) ,helpcontext(86574)] LONG  CALLTYPE D3DXVec3Unproject([in,out] D3DVECTOR3 *VOut, [in] D3DVECTOR3 *V, [in] D3DVIEWPORT8_CDESC *Viewport, [in] D3DMATRIX_CDESC *Projection, [in] D3DMATRIX_CDESC *view, [in]  D3DMATRIX_CDESC *World);

     };


    [
        dllname("dx8vb.dll")
    ]
    module D3DXMATH_VECTOR4
    {
	[entry(35) ,helpcontext(86581)] FLOAT CALLTYPE D3DXVec4Length ([in]  D3DVECTOR4 *V );
	[entry(36) ,helpcontext(86582)] FLOAT CALLTYPE D3DXVec4LengthSq ([in]  D3DVECTOR4 *V );
	[entry(37) ,helpcontext(86579)] FLOAT CALLTYPE D3DXVec4Dot  ( [in] D3DVECTOR4 *V1, [in]  D3DVECTOR4 *V4 );
	[entry(38) ,helpcontext(86575)] LONG  CALLTYPE D3DXVec4Add  ( [in,out] D3DVECTOR4 *VOut , [in] D3DVECTOR4 *V1, [in]  D3DVECTOR4 *V2 );
	[entry(39) ,helpcontext(86588)] LONG  CALLTYPE D3DXVec4Subtract ([in,out] D3DVECTOR4 *VOut , [in] D3DVECTOR4 *V1, [in]  D3DVECTOR4 *V2 );
	[entry(40) ,helpcontext(86585)] LONG  CALLTYPE D3DXVec4Minimize ([in,out] D3DVECTOR4 *VOut , [in] D3DVECTOR4 *V1, [in]  D3DVECTOR4 *V2 );
	[entry(41) ,helpcontext(86584)] LONG  CALLTYPE D3DXVec4Maximize ([in,out] D3DVECTOR4 *VOut , [in] D3DVECTOR4 *V1, [in]  D3DVECTOR4 *V2 );
	[entry(42) ,helpcontext(86587)] LONG  CALLTYPE D3DXVec4Scale ([in,out] D3DVECTOR4 *VOut , [in] D3DVECTOR4 *V1, [in]  FLOAT s );

	[entry(43) ,helpcontext(86583)] LONG  CALLTYPE D3DXVec4Lerp ([in,out] D3DVECTOR4 *VOut , [in] D3DVECTOR4 *V1, [in]  D3DVECTOR4 *V2, [in]  FLOAT s );
	[entry(44) ,helpcontext(86578)] LONG  CALLTYPE D3DXVec4Cross  ( [in,out] D3DVECTOR4 *VOut, [in] D3DVECTOR4 *V1, [in]  D3DVECTOR4 *V2 ,[in]  D3DVECTOR4 *V3 );

	[entry(45) ,helpcontext(86586)] LONG  CALLTYPE D3DXVec4Normalize ( [in,out] D3DVECTOR4 *VOut , [in] D3DVECTOR4 *V);
	[entry(46) ,helpcontext(86580)] LONG  CALLTYPE D3DXVec4Hermite ( [in,out] D3DVECTOR4 *VOut, [in] D3DVECTOR3 *V1, [in] D3DVECTOR4 *T1,
			      [in] D3DVECTOR3 *V2, [in] D3DVECTOR4 *T2, [in] FLOAT s );
	[entry(47) ,helpcontext(86576)] LONG  CALLTYPE D3DXVec4BaryCentric (  [in,out] D3DVECTOR4 *VOut, [in] D3DVECTOR4 *V1, [in] D3DVECTOR4 *V2,
			      [in] D3DVECTOR4 *V3, [in] FLOAT f, [in] FLOAT g );
	[entry(48) ,helpcontext(86589)] LONG  CALLTYPE D3DXVec4Transform (  [in,out] D3DVECTOR4 *VOut, [in] D3DVECTOR4 *V1, [in] D3DMATRIX *M);
	[entry(127) ,helpcontext(86577)] LONG  CALLTYPE D3DXVec4CatmullRom([in,out] D3DVECTOR4 *VOut,  [in] D3DVECTOR4 *V0, [in] D3DVECTOR4 *V1, [in] D3DVECTOR4 *V2, [in] D3DVECTOR4 *V3, [in] FLOAT s);

    };


    [
        dllname("dx8vb.dll")
    ]
    module D3DXMATH_MATRIX
    {
	[entry(49) ,helpcontext(86485)] LONG  CALLTYPE D3DXMatrixIdentity   (  [in,out] D3DMATRIX *MOut);
	[entry(50) ,helpcontext(86487)] LONG  CALLTYPE D3DXMatrixIsIdentity ([in] D3DMATRIX *M);
	[entry(51) ,helpcontext(86484)] FLOAT CALLTYPE D3DXMatrixfDeterminant ([in] D3DMATRIX *M);
	[entry(52) ,helpcontext(86490)] LONG  CALLTYPE D3DXMatrixMultiply   (  [in,out] D3DMATRIX *MOut, [in] D3DMATRIX *M1, [in] D3DMATRIX *M2);
	[entry(53) ,helpcontext(86512)] LONG  CALLTYPE D3DXMatrixTranspose  (  [in,out] D3DMATRIX *MOut, [in] D3DMATRIX *M);
	[entry(54) ,helpcontext(86486)] LONG  CALLTYPE D3DXMatrixInverse (  [in,out] D3DMATRIX *MOut, [in,out] FLOAT *Determinant, [in] D3DMATRIX *M);
	[entry(55) ,helpcontext(86508)] LONG  CALLTYPE D3DXMatrixScaling ([in,out] D3DMATRIX *MOut, [in] FLOAT x, [in] FLOAT y, [in] FLOAT z);
	[entry(56) ,helpcontext(86511)] LONG  CALLTYPE D3DXMatrixTranslation ([in,out] D3DMATRIX *MOut, [in] FLOAT x, [in] FLOAT y, [in] FLOAT z);
	[entry(57) ,helpcontext(86504)] LONG  CALLTYPE D3DXMatrixRotationX ([in,out] D3DMATRIX *MOut, [in] FLOAT angle);
	[entry(58) ,helpcontext(86505)] LONG  CALLTYPE D3DXMatrixRotationY ([in,out] D3DMATRIX *MOut, [in] FLOAT angle);
	[entry(59) ,helpcontext(86507)] LONG  CALLTYPE D3DXMatrixRotationZ ([in,out] D3DMATRIX *MOut, [in] FLOAT angle);
	[entry(60) ,helpcontext(86502)] LONG  CALLTYPE D3DXMatrixRotationAxis ([in,out] D3DMATRIX *MOut, [in] D3DVECTOR3 *VAxis, [in] FLOAT angle);
	[entry(61) ,helpcontext(86503)] LONG  CALLTYPE D3DXMatrixRotationQuaternion ([in,out] D3DMATRIX *MOut, [in] D3DQUATERNION *Q);
	[entry(62) ,helpcontext(86506)] LONG  CALLTYPE D3DXMatrixRotationYawPitchRoll ([in,out] D3DMATRIX *MOut, [in] FLOAT yaw, [in] FLOAT pitch, [in] FLOAT roll);
	[entry(63) ,helpcontext(86510)] LONG  CALLTYPE D3DXMatrixTransformation ( [in,out] D3DMATRIX *MOut,
			 [in] D3DVECTOR3 *VScaleCenter, [in] D3DQUATERNION *QScaleRotation, [in] D3DVECTOR3 *VScale,
			 [in] D3DVECTOR3 *VRotationCenter, [in] D3DQUATERNION *QRotation,
			 [in] D3DVECTOR3 *VTranslation);
	[entry(64) ,helpcontext(86483)] LONG  CALLTYPE D3DXMatrixAffineTransformation ( [in,out] D3DMATRIX *MOut,
			 [in] FLOAT Scaling,
			 [in] D3DVECTOR3 *VRotationCenter, [in] D3DQUATERNION *QRotation,
			 [in] D3DVECTOR3 *VTranslation);

	[entry(65) ,helpcontext(86488)] LONG  CALLTYPE D3DXMatrixLookAtRH ( [in,out] D3DMATRIX *MOut,			 
			 [in] D3DVECTOR3 *VEye, [in] D3DVECTOR *VAt, D3DVECTOR3 * VUp);

	[entry(66) ,helpcontext(86489)] LONG  CALLTYPE D3DXMatrixLookAtLH ( [in,out] D3DMATRIX *MOut,			 
			 [in] D3DVECTOR3 *VEye, [in] D3DVECTOR *VAt, D3DVECTOR3 * VUp);

	[entry(67) ,helpcontext(86495)] LONG  CALLTYPE D3DXMatrixPerspectiveRH ([in,out] D3DMATRIX *MOut,			 
			 [in] FLOAT w, [in] FLOAT h,[in] FLOAT zn, [in] FLOAT zf);

	[entry(68) ,helpcontext(86498)] LONG  CALLTYPE D3DXMatrixPerspectiveLH ([in,out] D3DMATRIX *MOut,			 
			 [in] FLOAT w, [in] FLOAT h,[in] FLOAT zn, [in] FLOAT zf);

	[entry(69) ,helpcontext(86497)] LONG  CALLTYPE D3DXMatrixPerspectiveFovRH ([in,out] D3DMATRIX *MOut,			 
			 [in] FLOAT fovy, [in] FLOAT aspect,[in] FLOAT zn, [in] FLOAT zf);

	[entry(70) ,helpcontext(86496)] LONG  CALLTYPE D3DXMatrixPerspectiveFovLH ([in,out] D3DMATRIX *MOut,			 
			 [in] FLOAT fovy, [in] FLOAT aspect,[in] FLOAT zn, [in] FLOAT zf);

	[entry(71) ,helpcontext(86499)] LONG  CALLTYPE D3DXMatrixPerspectiveOffCenterRH ([in,out] D3DMATRIX *MOut,			 
			 [in] FLOAT l , [ in] FLOAT r , [in] FLOAT b, [in] FLOAT t, [in] FLOAT zn, [in] FLOAT zf);

	[entry(72) ,helpcontext(86500)] LONG  CALLTYPE D3DXMatrixPerspectiveOffCenterLH ([in,out] D3DMATRIX *MOut,			 
			 [in] FLOAT l , [ in] FLOAT r , [in] FLOAT b, [in] FLOAT t, [in] FLOAT zn, [in] FLOAT zf);

	[entry(73) ,helpcontext(86491)] LONG  CALLTYPE D3DXMatrixOrthoRH ([in,out] D3DMATRIX *MOut,			 
			 [in] FLOAT w, [in] FLOAT h,[in] FLOAT zn, [in] FLOAT zf);

	[entry(74) ,helpcontext(86492)] LONG  CALLTYPE D3DXMatrixOrthoLH ([in,out] D3DMATRIX *MOut,			 
			 [in] FLOAT w, [in] FLOAT h,[in] FLOAT zn, [in] FLOAT zf);

	[entry(75) ,helpcontext(86493)] LONG  CALLTYPE D3DXMatrixOrthoOffCenterRH ([in,out] D3DMATRIX *MOut,			 
			 [in] FLOAT l , [ in] FLOAT r , [in] FLOAT b, [in] FLOAT t, [in] FLOAT zn, [in] FLOAT zf);

	[entry(76) ,helpcontext(86494)] LONG  CALLTYPE D3DXMatrixOrthoOffCenterLH ([in,out] D3DMATRIX *MOut,			 
			 [in] FLOAT l , [ in] FLOAT r , [in] FLOAT b, [in] FLOAT t, [in] FLOAT zn, [in] FLOAT zf);

	[entry(77) ,helpcontext(86509)] LONG  CALLTYPE D3DXMatrixShadow ([in,out] D3DMATRIX *MOut,			 
			 [in] D3DVECTOR4 *VLight , [in] D3DPLANE *Plane);

	[entry(78) ,helpcontext(86501)] LONG  CALLTYPE D3DXMatrixReflect ([in,out] D3DMATRIX *MOut,		  [in] D3DPLANE *Plane);

    };

    [
        dllname("dx8vb.dll")
    ]
    module D3DXMATH_QUATERNION
    {
	[entry(79) ,helpcontext(86528)] FLOAT CALLTYPE D3DXQuaternionLength ( [in] D3DQUATERNION *Q);

	[entry(80) ,helpcontext(86529)] FLOAT CALLTYPE D3DXQuaternionLengthSq ( [in] D3DQUATERNION *Q);
	[entry(81) ,helpcontext(86525)] LONG CALLTYPE D3DXQuaternionIdentity ( [in,out] D3DQUATERNION *QOut);
	[entry(82) ,helpcontext(86527)] LONG CALLTYPE D3DXQuaternionIsIdentity( [in] D3DQUATERNION *Q);
	[entry(83) ,helpcontext(86522)] LONG CALLTYPE D3DXQuaternionConjugate ( [in,out] D3DQUATERNION *QOut,[in] D3DQUATERNION *Q);

	[entry(84) ,helpcontext(86538)] LONG CALLTYPE D3DXQuaternionToAxisAngle ( [in,out] D3DQUATERNION *Q,[in,out] D3DVECTOR3 *VAxis, [in,out] FLOAT *Angle);
	[entry(85) ,helpcontext(86534)] LONG CALLTYPE D3DXQuaternionRotationMatrix ( [in,out] D3DQUATERNION *QOut,[in] D3DMATRIX *M);
	[entry(86) ,helpcontext(86533)] LONG CALLTYPE D3DXQuaternionRotationAxis ( [in,out] D3DQUATERNION *QOut, [in] D3DVECTOR3 *VAxis, [in] FLOAT Angle);
	[entry(87) ,helpcontext(86535)] LONG CALLTYPE D3DXQuaternionRotationYawPitchRoll ( [in,out] D3DQUATERNION *QOut, [in] FLOAT yaw, [in] FLOAT pitch, [in] FLOAT roll);
	[entry(88) ,helpcontext(86531)] LONG CALLTYPE D3DXQuaternionMultiply( [in,out] D3DQUATERNION *QOut, [in] D3DQUATERNION *Q1, [in] D3DQUATERNION *Q2);

	[entry(89) ,helpcontext(86532)] LONG CALLTYPE D3DXQuaternionNormalize ([in,out] D3DQUATERNION *QOut, [in] D3DQUATERNION *Q);

	[entry(90) ,helpcontext(86526)] LONG CALLTYPE D3DXQuaternionInverse ([in,out] D3DQUATERNION *QOut, [in] D3DQUATERNION *Q);

	[entry(91) ,helpcontext(86530)] LONG CALLTYPE D3DXQuaternionLn ([in,out] D3DQUATERNION *QOut, [in] D3DQUATERNION *Q);

	[entry(92) ,helpcontext(86524)] LONG CALLTYPE D3DXQuaternionExp ([in,out] D3DQUATERNION *QOut, [in] D3DQUATERNION *Q);

	[entry(93) ,helpcontext(86536)] LONG CALLTYPE D3DXQuaternionSlerp ([in,out] D3DQUATERNION *QOut, [in] D3DQUATERNION *Q1, [in] D3DQUATERNION *Q2 , [in] FLOAT t);

	[entry(94) ,helpcontext(86537)] LONG CALLTYPE D3DXQuaternionSquad ([in,out] D3DQUATERNION *QOut, [in] D3DQUATERNION *Q1, [in] D3DQUATERNION *Q2 , [in] D3DQUATERNION *Q3, [in] D3DQUATERNION *Q4 ,[in] FLOAT t);

	[entry(95) ,helpcontext(86521)] LONG CALLTYPE D3DXQuaternionBaryCentric([in,out] D3DQUATERNION *QOut, [in] D3DQUATERNION *Q1, [in] D3DQUATERNION *Q2 , [in] D3DQUATERNION *Q3, [in] FLOAT f ,[in] FLOAT g);

	[entry(134) ,helpcontext(86523)] FLOAT CALLTYPE D3DXQuaternionDot( [in] D3DQUATERNION *Q1, [in] D3DQUATERNION *Q2);
    };


    [
        dllname("dx8vb.dll")
    ]
     module D3DXMATH_PLANE
    {

	[entry(96) ,helpcontext(86513)] FLOAT CALLTYPE D3DXPlaneDot( [in] D3DPLANE *P1, [in] D3DPLANE *P2);

	[entry(97) ,helpcontext(86514)] FLOAT CALLTYPE D3DXPlaneDotCoord( [in] D3DPLANE *P1, [in] D3DVECTOR3 *V);
	[entry(98) ,helpcontext(86515)] FLOAT CALLTYPE D3DXPlaneDotNormal( [in] D3DPLANE *P1, [in] D3DVECTOR3 *V);

	[entry(99) ,helpcontext(86519)] LONG CALLTYPE D3DXPlaneNormalize ( [in,out] D3DPLANE *POut, [in] D3DPLANE *P);

	[entry(100) ,helpcontext(86518)] LONG CALLTYPE D3DXPlaneIntersectLine ( [in,out] D3DPLANE *POut, [in] D3DPLANE *P, [in] D3DVECTOR3 *V1, [in] D3DVECTOR3 *V2);


	[entry(101) ,helpcontext(86516)] LONG CALLTYPE D3DXPlaneFromPointNormal ( [in,out] D3DPLANE *POut, [in] D3DVECTOR3 *VPoint, [in] D3DVECTOR3 *VNormal);





	[entry(102) ,helpcontext(86517)] LONG CALLTYPE D3DXPlaneFromPoints ( [in,out] D3DPLANE *POut, [in] D3DVECTOR3 *V1, [in] D3DVECTOR3 *V2, [in] D3DVECTOR3 *V3);


	[entry(103) ,helpcontext(86520)] LONG CALLTYPE D3DXPlaneTransform ( [in,out] D3DPLANE *POut, [in] D3DPLANE  *P, [in] D3DMATRIX *M);

    };

    [
        dllname("dx8vb.dll")
    ]
    module D3DXMATH_COLOR
    {
	[entry(104) ,helpcontext(86480)] LONG CALLTYPE D3DXColorNegative ( [in,out] D3DCOLORVALUE *COut, [in] D3DCOLORVALUE *C);

	[entry(105) ,helpcontext(86475)] LONG CALLTYPE D3DXColorAdd ( [in,out] D3DCOLORVALUE *COut, [in] D3DCOLORVALUE *C1, [in] D3DCOLORVALUE *C2);

	[entry(106) ,helpcontext(86482)] LONG CALLTYPE D3DXColorSubtract ( [in,out] D3DCOLORVALUE *COut, [in] D3DCOLORVALUE *C1, [in] D3DCOLORVALUE *C2);

	[entry(107) ,helpcontext(86481)] LONG CALLTYPE D3DXColorScale ( [in,out] D3DCOLORVALUE *COut, [in] D3DCOLORVALUE *C1, [in] FLOAT s);

	[entry(108) ,helpcontext(86479)] LONG CALLTYPE D3DXColorModulate ( [in,out] D3DCOLORVALUE *COut, [in] D3DCOLORVALUE *C1, [in] D3DCOLORVALUE  *C2);

	[entry(109) ,helpcontext(86478)] LONG CALLTYPE D3DXColorLerp ( [in,out] D3DCOLORVALUE *COut, [in] D3DCOLORVALUE *C1, [in] D3DCOLORVALUE  *C2, [in] FLOAT s);

	[entry(110) ,helpcontext(86477)] LONG CALLTYPE D3DXColorAdjustSaturation ( [in,out] D3DCOLORVALUE *COut, [in] D3DCOLORVALUE *C1, [in] FLOAT s);

	[entry(111) ,helpcontext(86476)] LONG CALLTYPE D3DXColorAdjustContrast ( [in,out] D3DCOLORVALUE *COut, [in] D3DCOLORVALUE *C1, [in] FLOAT c);


   };

    [
        dllname("dx8vb.dll")
    ]
    module D3DCOLORAUX
    {	
	[entry(130) ,helpcontext(86197)] LONG CALLTYPE D3DColorRGBA ( [in] SHORT r, [in] SHORT g, [in] SHORT b, [in] SHORT a);

	[entry(131) ,helpcontext(86195)] LONG CALLTYPE D3DColorARGB ( [in] SHORT a, [in] SHORT r, [in] SHORT g, [in] SHORT b);

	[entry(132) ,helpcontext(86198)] LONG CALLTYPE D3DColorXRGB ( [in] SHORT r, [in] SHORT g, [in] SHORT b);

	[entry(133) ,helpcontext(86196)] LONG CALLTYPE D3DColorMake ( [in] FLOAT r, [in] FLOAT g, [in] FLOAT b, [in] FLOAT a);


    };

     
#endif
