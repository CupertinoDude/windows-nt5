;-----------------------------------------------------------------------------
;
; This file contains color blend functions.
;
; Copyright (C) Microsoft Corporation, 1997.
;
; WARNING WARNING WARNING
; This asm file generated from mas file.
; EDIT THE MAS FILE.
; I warned you.
; WARNING WARNING WARNING
;
;-----------------------------------------------------------------------------

include(`m4hdr.mh')dnl
include(`cvars.mh')dnl

.586
.model flat
.code

INCLUDE iammx.inc
INCLUDE offs_acp.inc

define(`d_ROPcnt', 0)dnl

define(`d_ColorBlend', `
;void ColorBlend_$1_$2(PD3DI_RASTCTX pCtx, PD3DI_RASTPRIM pP,
;                         PD3DI_RASTSPAN pS)
;{

    PUBLIC _MMX_ColorBlend_$1_$2
_MMX_ColorBlend_$1_$2:

dnl if (($1 == AllBlend) || ($2 == AllROP))
ifelse(eval((d_index(`$1', `AllBlend') == 0) || (d_index(`$2', `AllROP') == 0)), `1', `
    ;D3DCOLOR DestColor = pCtx->pfnBufRead(pS->pSurface);
    mov     eax, XpS(pSurface)
    mov     esi, XpCtx(pfnBufRead)
    call    esi

    ; BuffRead returns value in mm1.  Destcolor is passed as mm3
    ; so for now, have to add this instruction.  May not have to
    ; do this if I change some stuff. Also mm3 is destroyed by
    ; srcblend and destblend.  I changed one function of
    ; the srcblend to not destroy mm3. It was the only one
    ; that destoryed mm3.  It should be okay to destroy in dest
    ; blend if we are not doing ROP
    movq    mm3, mm1
ifelse(`$2', `AllROP', `
dnl update count here so that ROP label only gets incremented when
dnl a ROP routine is called.
define(`d_ROPcnt', eval(d_ROPcnt+1))dnl
    movq    mm4, mm1      ; Need to save DestColor since DestBlend
                          ; has a chance of destorying it.
')


')
dnl
ifelse(`$1', `AllBlend', `
    ;{
        ;UINT16 uSR, uSG, uSB, uSA;
        ;UINT16 uBR, uBG, uBB, uBA;
        ;pCtx->pfnSrcBlend (&uSR, &uSG, &uSB, &uSA, DestColor, pCtx);
        ; Lots of memory accesing here.  Load port will go nuts.
        movq    mm1, XpCtxSI(uBB)
        mov     esi, XpCtx(pfnSrcBlend)
        call    esi
        movq    mm5, mm1              ; Save result.
        movq    mm1, XpCtxSI(uBB)
        ;pCtx->pfnDestBlend(&uBR, &uBG, &uBB, &uBA, DestColor, pCtx);
        mov     esi, XpCtx(pfnDestBlend)
        call    esi

        ; This is an add with saturate in MMX
        ;pCtx->SI.uBB = (UINT16)min((UINT32)uSB + (UINT32)uBB, 0xffff);
        ;pCtx->SI.uBG = (UINT16)min((UINT32)uSG + (UINT32)uBG, 0xffff);
        ;pCtx->SI.uBR = (UINT16)min((UINT32)uSR + (UINT32)uBR, 0xffff);
        ;pCtx->SI.uBA = (UINT16)min((UINT32)uSA + (UINT32)uBA, 0xffff);
        paddusw mm1, mm5

ifelse(`$2', `AllROP', `',`
        movq    XpCtxSI(uBB), mm1   ; If not doing ROP, need to save.
')

', `
        movq    mm1, XpCtxSI(uBB) ; If not doing blend, then need
                                  ; to load in color for ROP.
')
dnl
dnl
ifelse(`$2', `AllROP', `
    ;{
        ; It might be faster to do this in conjunction with the write.
        ; It might be faster to do this through a function pointer too.
        ;UINT16 uBB = (UINT16)RGBA_GETBLUE(DestColor)<<8;
        ;UINT16 uBG = (UINT16)RGBA_GETGREEN(DestColor)<<8;
        ;UINT16 uBR = (UINT16)RGBA_GETRED(DestColor)<<8;
        ;UINT16 uBA = (UINT16)RGBA_GETALPHA(DestColor)<<8;
        psllw   mm4, 8

        ;switch (pCtx->pdwRenderState[D3DRENDERSTATE_ROP2]) {


        ; Load jump address early.  Normally in eax.  Should
        ; change ROP2 to be in esi so that all code is more
        ; consistant. TBD?
        mov   esi, XpCtx(pfnColorBlendEnd)

        mov   eax, XpCtx(pdwRenderState+RS_ROP2)

; This is very slow. Just doing it so that it will run
; A jump table could work here

        ;case R2_BLACK      : d_RepStr(`pCtx->SI.XX = 0; ',                  XX, uBB, uBG, uBR, uBA)break;
        cmp   eax, R2_BLACK
        jne   @f
        pcmpgtd mm1, mm1   ; Zero out mm1
        movq  XpCtxSI(uBB), mm1

        jmp   EndROP`'d_ROPcnt`'
@@:
        ;case R2_NOTMERGEPEN: d_RepStr(`pCtx->SI.XX = ~(pCtx->SI.XX | XX); ',XX, uBB, uBG, uBR, uBA)break;
        cmp   eax, R2_NOTMERGEPEN
        jne   @f

        pcmpeqd mm2, mm2
        por     mm1, mm4
        pxor    mm1, mm2
        movq    XpCtxSI(uBB), mm1

        jmp   EndROP`'d_ROPcnt`'
@@:

        ;case R2_MASKNOTPEN : d_RepStr(`pCtx->SI.XX = ~pCtx->SI.XX & XX; ',  XX, uBB, uBG, uBR, uBA)break;
        cmp   eax, R2_MASKNOTPEN
        jne   @f

        pandn   mm1, mm4
        movq    XpCtxSI(uBB), mm1

        jmp   EndROP`'d_ROPcnt`'
@@:
        ;case R2_NOTCOPYPEN : d_RepStr(`pCtx->SI.XX = ~pCtx->SI.XX; ',       XX, uBB, uBG, uBR, uBA)break;
        cmp   eax, R2_NOTCOPYPEN
        jne   @f

        pcmpeqd mm2, mm2
        pxor    mm1, mm2
        movq    XpCtxSI(uBB), mm1

        jmp   EndROP`'d_ROPcnt`'
@@:
        ;case R2_MASKPENNOT : d_RepStr(`pCtx->SI.XX = pCtx->SI.XX & ~XX; ',  XX, uBB, uBG, uBR, uBA)break;
        cmp   eax, R2_MASKPENNOT
        jne   @f

        pandn   mm4, mm1
        movq    XpCtxSI(uBB), mm4

        jmp   EndROP`'d_ROPcnt`'
@@:
        ;case R2_NOT        : d_RepStr(`pCtx->SI.XX = ~XX; ',                XX, uBB, uBG, uBR, uBA)break;
        cmp   eax, R2_NOT
        jne   @f

        pcmpeqd mm2, mm2
        pxor    mm4, mm2
        movq    XpCtxSI(uBB), mm4

        jmp   EndROP`'d_ROPcnt`'
@@:
        ;case R2_XORPEN     : d_RepStr(`pCtx->SI.XX = pCtx->SI.XX ^ XX; ',   XX, uBB, uBG, uBR, uBA)break;
        cmp   eax, R2_XORPEN
        jne   @f

        pxor  mm1, mm4
        movq  XpCtxSI(uBB), mm1

        jmp   EndROP`'d_ROPcnt`'
@@:
        ;case R2_NOTMASKPEN : d_RepStr(`pCtx->SI.XX = ~(pCtx->SI.XX & XX); ',XX, uBB, uBG, uBR, uBA)break;
        cmp   eax, R2_NOTMASKPEN
        jne   @f

        pcmpeqd mm2, mm2
        pand    mm1, mm4
        pxor    mm1, mm2
        movq    XpCtxSI(uBB), mm1

        jmp   EndROP`'d_ROPcnt`'
@@:
        ;case R2_MASKPEN    : d_RepStr(`pCtx->SI.XX = pCtx->SI.XX & XX; ',   XX, uBB, uBG, uBR, uBA)break;
        cmp   eax, R2_MASKPEN
        jne   @f

        pand    mm1, mm4
        movq    XpCtxSI(uBB), mm1

        jmp   EndROP`'d_ROPcnt`'
@@:
        ;case R2_NOTXORPEN  : d_RepStr(`pCtx->SI.XX = ~(pCtx->SI.XX ^ XX); ',XX, uBB, uBG, uBR, uBA)break;
        cmp   eax, R2_NOTXORPEN
        jne   @f

        pcmpeqd mm2, mm2
        pxor    mm1, mm4
        pxor    mm1, mm2
        movq    XpCtxSI(uBB), mm1

        jmp   EndROP`'d_ROPcnt`'
@@:
        ;case R2_NOP        : d_RepStr(`pCtx->SI.XX = XX; ',                 XX, uBB, uBG, uBR, uBA)break;
        cmp   eax, R2_NOP
        jne   @f

        movq    XpCtxSI(uBB), mm4

        jmp   EndROP`'d_ROPcnt`'
@@:
        ;case R2_MERGENOTPEN: d_RepStr(`pCtx->SI.XX = ~pCtx->SI.XX | XX; ',  XX, uBB, uBG, uBR, uBA)break;
        cmp   eax, R2_MERGENOTPEN
        jne   @f

        pcmpeqd mm2, mm2
        pxor    mm1, mm2
        por     mm1, mm4
        movq    XpCtxSI(uBB), mm1

        jmp   EndROP`'d_ROPcnt`'
@@:
        ;case R2_COPYPEN    : d_RepStr(`pCtx->SI.XX = pCtx->SI.XX; ',        XX, uBB, uBG, uBR, uBA)break;
        cmp   eax, R2_COPYPEN
        jne   @f

        movq    XpCtxSI(uBB), mm1

        jmp   EndROP`'d_ROPcnt`'
@@:
        ;case R2_MERGEPENNOT: d_RepStr(`pCtx->SI.XX = pCtx->SI.XX | ~XX; ',  XX, uBB, uBG, uBR, uBA)break;
        cmp   eax, R2_MERGEPENNOT
        jne   @f

        pcmpeqd mm2, mm2
        pxor    mm4, mm2
        por     mm1, mm4
        movq    XpCtxSI(uBB), mm1

        jmp   EndROP`'d_ROPcnt`'
@@:
        ;case R2_MERGEPEN   : d_RepStr(`pCtx->SI.XX = pCtx->SI.XX | XX; ',   XX, uBB, uBG, uBR, uBA)break;
        cmp   eax, R2_MERGEPEN
        jne   @f

        por     mm1, mm4
        movq    XpCtxSI(uBB), mm1

        jmp   EndROP`'d_ROPcnt`'
@@:
        ;case R2_WHITE      : d_RepStr(`pCtx->SI.XX = 0xffff; ',             XX, uBB, uBG, uBR, uBA)break;
        cmp   eax, R2_WHITE
        jne   @f

        pcmpeqd mm1, mm1
        movq    XpCtxSI(uBB), mm1

        ;jmp   EndROP`'d_ROPcnt`'
@@:
        ;}
EndROP`'d_ROPcnt`':
    ;}

')
dnl
    ;pCtx->pfnColorBlendEnd(pCtx, pP, pS);
    mov   esi, XpCtx(pfnColorBlendEnd)
    jmp   esi

;}')
dnl

d_RepStr(`d_RepStr(`d_ColorBlend(AA, BB)',
        `AA', `SrcOne_DestZero', `AllBlend')',
        `BB', `SrcCopy', `AllROP')

END
