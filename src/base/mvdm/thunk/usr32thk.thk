__foldwin32sstuff __foldwin32sstuff;
foldstyleinitialization = true;


enablemapdirect1632 = true;
defaultholdwin16lock = true;

#include "types.thk"

typedef HANDLE  HENHMETAFILE;
typedef HANDLE  HMETAFILE;



DWORD GetDdemlAccessHandleBuffer(VOID);


BOOL PlayEMF(HDC, HENHMETAFILE, LPSTR lpMetaFilePict32) =
BOOL PlayEnhMetaFile(HDC, HENHMETAFILE, LPSTR lpMetaFilePict32)
{
    releasewin16lock = true;
}

HENHMETAFILE SetMFBits(DWORD, LPSTR, HDC, LPSTR lpRectL) =
HENHMETAFILE SetWinMetaFileBits(DWORD, LPSTR, HDC, LPSTR lpRectL)
{
    releasewin16lock = true;
}

DWORD GetMFBits(HENHMETAFILE, DWORD, LPSTR, INT, HDC) =
DWORD GetWinMetaFileBits(HENHMETAFILE, DWORD, LPSTR, INT, HDC)
{
    releasewin16lock = true;
}

HMETAFILE SetMFBitsEx(DWORD, LPSTR) =
HMETAFILE SetMetaFileBitsEx(DWORD, LPSTR)
{
    releasewin16lock = true;
}

DWORD CompareString(DWORD dwLcid, DWORD dwFlags, LPSTR lpStr1, INT cch1, LPSTR lpStr2, INT cch2)=
DWORD CompareString32(DWORD dwLcid, DWORD dwFlags, LPSTR lpStr1, INT cch1, LPSTR lpStr2, INT cch2)
{}

WORD TranslateCharsetInfo( LPVOID lpSrc, LPCHARSETINFO lpDst, DWORD dwFlags) =
WORD TranslateCharsetInfo32( LPVOID lpSrc, LPCHARSETINFO lpDst, DWORD dwFlags)
{
lpDst = output;
lpSrc = passifhinull;
}

DWORD CharUpperBuff( LPSTR lpsz, UINT cch )=
DWORD CharUpperBuffA( LPSTR lpsz, UINT cch)
{}

DWORD CharLowerBuff( LPSTR lpsz, UINT cch )=
DWORD CharLowerBuffA( LPSTR lpsz, UINT cch)
{}

BOOL IsCharAlpha32( BYTE ch )=
BOOL IsCharAlphaA( BYTE ch )
{}

BOOL IsCharUpper32( BYTE ch )=
BOOL IsCharUpperA( BYTE ch )
{}

BOOL IsCharLower32( BYTE ch )=
BOOL IsCharLowerA( BYTE ch )
{}

BOOL IsCharAlphaNumeric32( BYTE ch )=
BOOL IsCharAlphaNumericA( BYTE ch )
{}

DWORD CharNext( LPSTR lpCh )=
DWORD CharNextA( LPSTR lpCh )
{}

DWORD CharPrev( LPSTR lpCh, LPSTR lpFirst )=
DWORD CharPrevA( LPSTR lpCh, LPSTR lpFirst )
{}

INT LCMapString(DWORD lcid, DWORD dwFlags, LPSTR lpSrc, UINT cchSrc, LPSTR lpDst, UINT cchDst )=
INT LCMapString32(DWORD lcid, DWORD dwFlags, LPSTR lpSrc, UINT cchSrc, LPSTR lpDst, UINT cchDst )
{}

BOOL IsValidLocale(DWORD lcid, DWORD dwFlags) =
BOOL IsValidLocale32(DWORD lcid, DWORD dwFlags)
{}

INT EditWordBreakProcThunk(LPSTR, INT, INT, INT, DWORD dwTarget)
{
    target = Callback20;
    releasewin16lock = true;
}



BOOL PropEnumProcThunk(HWND, LPSTR, DWORD, DWORD dwTarget)
{
    target = Callback16;
    releasewin16lock = true;
}



BOOL PropEnumProcExThunk(HWND, LPSTR, DWORD, DWORD, DWORD dwTarget)
{
    target = Callback20;
    releasewin16lock = true;
}


DWORD   GlobalAlloc32(UINT flags, DWORD cbSize) =
DWORD   GlobalAlloc(UINT flags, DWORD cbSize)
{
}


DWORD   GlobalLock32(DWORD hglob) =
DWORD   GlobalLock(DWORD hglob)
{
}


DWORD   GlobalUnlock32(DWORD hglob) =
DWORD   GlobalUnlock(DWORD hglob)
{
}


DWORD   GlobalFree32(DWORD hglob) =
DWORD   GlobalFree(DWORD hglob)
{
}

BOOL ScaleDIB(LPVOID, LPVOID, LPVOID, LPVOID) =
BOOL ScaleDIB(LPVOID, LPVOID, LPVOID, LPVOID)
{
}


DWORD ConvertOleClipData(DWORD, DWORD) =
DWORD ConvertOleClipData(DWORD, DWORD)
{
    releasewin16lock = true;
}


//
// WINABLE
// For ACTIVE ACCESSIBILITY
//
void    Call32BitEventProc(DWORD lpfnHook, DWORD hEvent, DWORD event,
    DWORD hwnd, DWORD idObject, DWORD indexElement, DWORD idEventThread,
    DWORD dwmsEventTime) =
void    Call32BitEventProc(DWORD lpfnHook, DWORD hEvent, DWORD event,
    DWORD hwnd, DWORD idObject, DWORD indexElement, DWORD idEventThread,
    DWORD dwmsEventTime)
{
    releasewin16lock = true;
}



//
// DRAG And Drop Menu 
// For OLE32.
//

BOOL User32RegisterDragDrop(HWND hwnd, DWORD) =
BOOL User32RegisterDragDrop(HWND hwnd, DWORD)
{
    releasewin16lock = true;
}

BOOL User32RevokeDragDrop(HWND hwnd, DWORD) =
BOOL User32RevokeDragDrop(HWND hwnd, DWORD)
{
    releasewin16lock = true;
}

BOOL User32LoadOLE(DWORD) =
BOOL User32LoadOLE(DWORD)
{
    releasewin16lock = true;
}

BOOL User32AlphaBlend(DWORD,HDC,int,int,int,int,HDC,int,int,int,int,DWORD) = 
BOOL User32AlphaBlend(DWORD,HDC,int,int,int,int,HDC,int,int,int,int,DWORD)
{
}


/*ifdef_FE_APIS
DWORD    IMEIndicatorNotify(DWORD, DWORD, DWORD) =
DWORD    IMEIndicatorNotify(DWORD, DWORD, DWORD)
{
   faulterrorcode = 0;
}
endif_FE_APIS*/

BOOL User32UpdatePowerTimeouts(VOID) =
BOOL User32UpdatePowerTimeouts(VOID)
{
    releasewin16lock = true;
}

BOOL User32NotifyDeviceBroadcast(DWORD, DWORD, DWORD) =
BOOL User32NotifyDeviceBroadcast(DWORD, DWORD, DWORD)
{
    releasewin16lock = true;
}

BOOL User32RemoveDeviceNotificationHandles(DWORD) =
BOOL User32RemoveDeviceNotificationHandles(DWORD)
{
    releasewin16lock = true;
}

BOOL User32GetModuleName(WORD cs, DWORD eip, LPSTR lpstr, LPWORD lpwSegNum) =
BOOL User32GetModuleName(WORD cs, DWORD eip, LPSTR lpstr, LPWORD lpwSegNum)
{
    releasewin16lock = true;
}
