/* usrtypes.thk -- USER types.
 *
 * Type declarations used by usrthk.thk and usrfthk.thk.
 *
 */

typedef struct tagMENUITEMINFO
{
    DWORD   cbSize;
    DWORD   fMask;
    UINT    fType;
    UINT    fState;
    UINT    wID;
    HMENU   hSubMenu;
    HBITMAP hbmpChecked;
    HBITMAP hbmpUnchecked;
    DWORD   dwItemData;
    LPSTR   dwTypeData;
    UINT    cch;
}   MENUITEMINFO;
typedef MENUITEMINFO  *LPMENUITEMINFO;



typedef DWORD HHOOK;

/*** HACKHACK!
 ***   This structure requires a pad word in Win32 mode, which the
 ***   16-bit code generator doesn't handle properly.
 ***   To compensate, we use different typedefs for 16-bit and 32-bit
 ***   and simulate padding by zero-extension.
 ***
 ***/
typedef struct tagACCEL16 { /* accl */
    BYTE   fVirt;
    WORD   key;
    WORD   cmd;
} ACCEL16;
typedef ACCEL16 *LPACCEL16;

typedef struct tagACCEL32 { /* accl */
    WORD   fVirt;   /* Really a byte, but need one extra byte for padding */
    WORD   key;
    WORD   cmd;
} ACCEL32;
typedef ACCEL32 *LPACCEL32;





typedef struct tagPAINTSTRUCT {
    HDC         hdc;
    BOOL        fErase;
    RECT        rcPaint;
    BOOL        fRestore;
    BOOL        fIncUpdate;
    BYTE        rgbReserved[16];
} PAINTSTRUCT;
typedef PAINTSTRUCT    *LPPAINTSTRUCT;


typedef DWORD HKL;
typedef HWND  *LPHWND;
typedef DWORD HCONVLIST;
typedef DWORD HCONV;
typedef DWORD HSZ;
typedef DWORD HDDEDATA;
typedef UINT  HMONITOR;

typedef ULONG EXECUTION_STATE;


typedef struct _SECURITY_QUALITY_OF_SERVICE {
    DWORD Length;
    DWORD ImpersonationLevel;
    DWORD ContextTrackingMode;
    DWORD EffectiveOnly;
} SECURITY_QUALITY_OF_SERVICE;


typedef struct _CONVCONTEXT16 {
    WORD        cb;             /* set to sizeof(CONVCONTEXT) */
    WORD        wFlags;         /* none currently defined. */
    WORD        wCountryID;     /* country code for topic/item strings used. */
    int         iCodePage;      /* codepage used for topic/item strings. */
    DWORD       dwLangID;       /* language ID for topic/item strings. */
    DWORD       dwSecurity;     /* Private security code. */
} CONVCONTEXT16;
typedef CONVCONTEXT16 *PCONVCONTEXT16;



typedef struct _CONVCONTEXT32 {
    DWORD        cb;             /* set to sizeof(CONVCONTEXT) */
    DWORD        wFlags;         /* none currently defined. */
    DWORD        wCountryID;     /* country code for topic/item strings used. */
    int         iCodePage;      /* codepage used for topic/item strings. */
    DWORD       dwLangID;       /* language ID for topic/item strings. */
    DWORD       dwSecurity;     /* Private security code. */
    /* SECURITY_QUALITY_OF_SERVICE qos;  client side's quality of service */
} CONVCONTEXT32;
typedef CONVCONTEXT32 *PCONVCONTEXT32;



typedef struct _CONVINFO16 {
    DWORD   cb;            /* sizeof(CONVINFO)  */
    DWORD   hUser;         /* user specified field  */
    HCONV   hConvPartner;  /* hConv on other end or 0 if non-ddemgr partner  */
    HSZ     hszSvcPartner; /* app name of partner if obtainable  */
    HSZ     hszServiceReq; /* AppName requested for connection  */
    HSZ     hszTopic;      /* Topic name for conversation  */
    HSZ     hszItem;       /* transaction item name or NULL if quiescent  */
    WORD    wFmt;          /* transaction format or NULL if quiescent  */
    WORD    wType;         /* XTYP_ for current transaction  */
    WORD    wStatus;       /* ST_ constant for current conversation  */
    WORD    wConvst;       /* XST_ constant for current transaction  */
    WORD    wLastError;    /* last transaction error.  */
    HCONVLIST hConvList;   /* parent hConvList if this conversation is in a list */
    CONVCONTEXT16 ConvCtxt;  /* conversation context */
} CONVINFO16;
typedef CONVINFO16 *PCONVINFO16;



typedef struct _CONVINFO32 {
    DWORD   cb;            /* sizeof(CONVINFO)  */
    DWORD   hUser;         /* user specified field  */
    HCONV   hConvPartner;  /* hConv on other end or 0 if non-ddemgr partner  */
    HSZ     hszSvcPartner; /* app name of partner if obtainable  */
    HSZ     hszServiceReq; /* AppName requested for connection  */
    HSZ     hszTopic;      /* Topic name for conversation  */
    HSZ     hszItem;       /* transaction item name or NULL if quiescent  */
    DWORD    wFmt;          /* transaction format or NULL if quiescent  */
    DWORD    wType;         /* XTYP_ for current transaction  */
    DWORD    wStatus;       /* ST_ constant for current conversation  */
    DWORD    wConvst;       /* XST_ constant for current transaction  */
    DWORD    wLastError;    /* last transaction error.  */
    HCONVLIST hConvList;   /* parent hConvList if this conversation is in a list */
    CONVCONTEXT32 ConvCtxt;  /* conversation context */
    /* HWND    hwnd;           window handle for this conversation */
    /* HWND    hwndPartner;    partner window handle for this conversation */
} CONVINFO32;
typedef CONVINFO32 *PCONVINFO32;



typedef struct tagFLASHWINFO
{
    UINT     cbSize;
    HWND     hwnd;
    DWORD    dwFlags;
    UINT     uCount;
    DWORD    dwTimeout;
} FLASHWINFO;
typedef FLASHWINFO *LPFLASHWINFO;

