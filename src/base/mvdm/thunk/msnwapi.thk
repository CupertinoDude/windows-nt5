 __foldwin32sstuff __foldwin32sstuff;
 foldstyleinitialization = true;

enablemapdirect3216 = true;
flatthunks = true;

/*****************************************************************/
/**               Microsoft Windows 4.00                        **/
/**           Copyright (C) Microsoft Corp., 1994-1994          **/
/*****************************************************************/
/*
 * API thunks for Netware 16bit APIs called from Win32 DLL
 */

#include "types.thk"

/*
 * Should be syncronized with dev\inc\msnwerr.h
 */
typedef long NW_STATUS;

NW_STATUS       ThkNetWGetRequesterVersion( LPBYTE majorVersion,
                                                                            LPBYTE minorVersion,
                                                                            LPBYTE revision)
{

   majorVersion=output;
   minorVersion=output;
   revision    =output;
        
}

/*
 * Global directory services context management
 *
 */

NW_STATUS       ThkNDSSetNameContext( LPSTR NameContext, BOOL fGlobal)
{

        NameContext = input;

}

NW_STATUS       ThkNDSGetNameContext( LPSTR NameContext)
{

        NameContext = output;

}

UINT ThkNetWGetNumConnEntries(VOID );

NW_STATUS
ThkNetWGetPreferredName(
        UINT    ConnectionType,
        LPSTR   pszBuf
        )
{
        pszBuf= output;
}

NW_STATUS
ThkNetWSetPreferredName(
        UINT    ConnectionType,
        LPSTR   pszBuf
        )
{
        pszBuf= input;
}

NW_STATUS
ThkNetWGetPreferredConnID(
        UINT    ConnectionType,
        UINT*   phConn
        )
{
        phConn = output;
        
}

NW_STATUS
ThkNetWAttachByName(
        UINT    ConnectionType,
        LPSTR   pszResourceName,
        UINT*   phConn
        )
{
        pszResourceName= input;
        phConn=output;
        
}

NW_STATUS
ThkNetWAttachByAddress(
        UINT    ConnectionType,
        PBYTE   pbAddress,
        UINT*   phConn
        )
{
        pbAddress= input;
        phConn=output;
        
}

NW_STATUS
ThkNetWGetConnectionLocalStatus(
                UINT                    hConn,
                LPVOID                  pConnInfo,
                LPSTR                   pszResourceName
        )
{
        pConnInfo= input;
        pszResourceName=output;
        
}

NW_STATUS
ThkNetWGetConnectionRemoteInformation(
                UINT    hConn,
                LPVOID  pConnInfo,
                LPSTR   pszResourceName
        )
{
        pConnInfo=output;
        pszResourceName=output;
}


//
// For tree - cleans up all NDS connections , for server - just this one
//

NW_STATUS
ThkNetWDetachResource(
                UINT    ConnectionType,
                UINT    hConn
        )
{
        
}


NW_STATUS
ThkNetWLicenseConnection(
                UINT *phConn
        )
{
        phConn= input;
        
}

NW_STATUS
ThkNetWUnLicenseConnection(
                UINT *phConn
        )
{
        phConn= input;
        
}

/*
 * Authetication APIs
 * ------------------
 *
 *
 */

NW_STATUS
ThkNDSIsLoggedIn(
                LPSTR   pszUserName
        )
{
        pszUserName=output;
}

NW_STATUS
ThkNDSLogin(
                LPSTR                           pszUserName,
                LPSTR                           pszPassword
        )
{
        pszUserName=output;
        pszPassword=output;
        
}

NW_STATUS
ThkNDSLogout(VOID)
{
        
}

NW_STATUS
ThkNDSAuthenticateToServer(UINT         hConn)
{
}

NW_STATUS
ThkNDSCanonicalizeName(
        UINT  flags,
        LPSTR pszName,
        LPSTR pszCanonicalName
        )
{
        pszCanonicalName=output;
}

NW_STATUS
ThkNDSAbbreviateName(
        UINT flags,
        LPSTR pszName,
        LPSTR pszCanonicalName
        )
{
        pszCanonicalName=output;
}


