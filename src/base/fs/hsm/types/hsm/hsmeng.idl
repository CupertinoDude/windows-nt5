/*++

Copyright (c) 1998 Seagate Software, Inc.  All rights reserved.

Module Name:

    HsmEng.idl

Abstract:

    IDL source for RsEng.exe

    This file defines the CHsmServer public interfaces to the HSM engine and will 
    be processed by the MIDL tool to produce the type library (HsmEng.tlb) and 
    marshalling code.

--*/


interface IHsmServer;
interface IHsmUpgradeRmsDb;
interface IHsmManagedResource;
interface IHsmManagedResourceCollection;
interface IHsmStoragePool;

import "oaidl.idl";
import "mstask.idl";                            // NT Task Scheduler interfaces
import "metaint.idl";
import "RmsInt.idl";
import "tskint.idl";


typedef [v1_enum] enum _HSM_RSLTS_LVL
{
    HSM_FILE_LVL_RSLTS,
    HSM_RES_LVL_RSLTS
} HSM_RSLTS_LVL;

typedef [v1_enum] enum _HSM_SYS_STS
{
    HSM_SYS_STS_STARTING,
    HSM_SYS_STS_ONLINE,
    HSM_SYS_STS_OFF_PEND,
    HSM_SYS_STS_OFFLINE,
    HSM_SYS_STS_MAINT,
    HSM_SYS_STS_DISABLED,
    HSM_SYS_STS_SHUT_PEND,
    HSM_SYS_STS_SHUTDOWN
} HSM_SYS_STS;

typedef [v1_enum] enum _HSM_FULL_ACT
{
    HSM_FULL_NO_MIGRATES,
    HSM_FULL_OVERFLOW
} HSM_FULL_ACT;

typedef GUID HSMID;

//The following typedefs are used internally by MIDL.
cpp_quote("#if 0")
    typedef GUID *REFGUID;
cpp_quote("#endif // 0")

cpp_quote("#if defined(__cplusplus)")

cpp_quote("#define REFHSMID             const HSMID &")

cpp_quote("#else // !__cplusplus")

cpp_quote("#define REFHSMID             const HSMID * const")

cpp_quote("#endif // !__cplusplus")


    [
        object,
        uuid(725FA402-1C39-4487-BB0D-0FBA040DE70A),
        helpstring("IHsmServer Interface"),
        pointer_default(unique)
    ]
    interface IHsmServer : IHsmSystemState
    {
        HRESULT Init( void );
        HRESULT GetID( [out] GUID  *phid );
        HRESULT GetDbPath([in, out, string] OLECHAR** pPath, [in] ULONG bufferSize);
        HRESULT GetIDbPath ([in, out, string] OLECHAR** pPath, [in] ULONG bufferSize );
        HRESULT GetDbPathAndName([in, out, string] OLECHAR** pPath, [in] ULONG bufferSize);
        HRESULT GetName ( [string, out] OLECHAR **ppName );

        HRESULT GetHsmExtVerHi ( [out] SHORT *pExtVerHi );
        HRESULT GetHsmExtVerLo ( [out] SHORT *pExtVerLo );
        HRESULT GetHsmExtRev ( [out] SHORT *pExtRev );

        HRESULT GetAutosave([out] ULONG* pMilliseconds);
        HRESULT SetAutosave([in] ULONG milliseconds);

		HRESULT GetCopyFilesLimit([out] ULONG *pLimit);
		HRESULT GetCopyFilesUserLimit([out]ULONG *pLimit);
		HRESULT SetCopyFilesUserLimit([in] ULONG limit);

        HRESULT GetManagedResources( [out] IWsbIndexedCollection  **ppCollection );
        HRESULT FindHsmStoragePoolById( [in] GUID StoragePoolId, 
                                            [out] IHsmStoragePool** ppStoragePool );
        HRESULT FindHsmStoragePoolByMediaSetId( [in] GUID RmsMediaSetId, 
                                            [out] IHsmStoragePool** ppStoragePool );
        HRESULT FindMediaIdByDescription( [in, string] OLECHAR* description, 
                                            [out] GUID* pMediaId );
        HRESULT FindStoragePoolByName([in, string] OLECHAR* name, 
                                                [out] IHsmStoragePool** ppStoragePool );
        HRESULT GetStoragePools( [out] IWsbIndexedCollection  **ppCollection );
        HRESULT GetOnlineInformation(  [out] IWsbIndexedCollection  **ppCollection );
        HRESULT GetMessages( [out] IWsbIndexedCollection  **ppCollection );
        HRESULT GetUsrToNotify(  [out] IWsbIndexedCollection  **ppCollection );
        HRESULT FindJobByName([in, string] OLECHAR* name, [out] IHsmJob** ppJob );
        HRESULT GetJobs(            [out] IWsbIndexedCollection  **ppCollection );
        HRESULT GetJobDefs(         [out] IWsbIndexedCollection  **ppCollection );
        HRESULT GetPolicies(        [out] IWsbIndexedCollection  **ppCollection );
        HRESULT GetActions(         [out] IWsbIndexedCollection  **ppCollection );
        HRESULT GetCriteria(        [out] IWsbIndexedCollection  **ppCollection );
        HRESULT GetMediaRecs(       [out] IWsbIndexedCollection  **ppCollection );
        HRESULT GetMountingMedias(  [out] IWsbIndexedCollection  **ppCollection );
        HRESULT LockMountingMedias( void );
        HRESULT UnlockMountingMedias( void );
        HRESULT GetNextMedia( [out] LONG* pNextMedia );
        HRESULT GetSegmentDb( [out] IWsbDb **ppDb );
        HRESULT BackupSegmentDb( void );
        HRESULT GetHsmFsaTskMgr( [out] IHsmFsaTskMgr   **ppHsmTskMgr );
        HRESULT SaveMetaData( void  );
        HRESULT SavePersistData( void );
        HRESULT CloseOutDb( void );
        HRESULT CancelAllJobs( void  );
        HRESULT AreJobsEnabled( void  );
        HRESULT EnableAllJobs( void  );
        HRESULT DisableAllJobs( void  );
        HRESULT RestartSuspendedJobs( void  );

        HRESULT CreateTask( [in, string] const OLECHAR * jobName, 
                            [in, string] const OLECHAR * jobParameters, 
                            [in, string] const OLECHAR * jobComments, 
                            [in] const TASK_TRIGGER_TYPE jobTriggerType, 
                            [in] const WORD jobStartHour, 
                            [in] const WORD jobStartMinute, 
                            [in] const BOOL scheduledJob );

        HRESULT CreateTaskEx( [in, string] const OLECHAR * jobName, 
                              [in, string] const OLECHAR * jobParameters, 
                              [in, string] const OLECHAR * jobComments, 
                              [in] const TASK_TRIGGER_TYPE jobTriggerType, 
                              [in] const SYSTEMTIME        runTime,
							  [in] const DWORD             runOccurrence,
                              [in] const BOOL			   scheduledJob );

        HRESULT CancelCopyMedia( void );
        HRESULT MarkMediaForRecreation( [in] REFGUID masterMediaId );
        HRESULT RecreateMaster( [in] REFGUID masterMediaId, [in] USHORT copySet );
        HRESULT SynchronizeMedia( [in] GUID poolId, [in] USHORT copySet );
        HRESULT GetHsmMediaMgr( [out] IRmsServer   **ppHsmMediaMgr );

        HRESULT ResetSegmentValidMark( void );
        HRESULT ResetMediaValidBytes( void );

        HRESULT GetSegmentPosition( [in] REFGUID bagId, 
                                    [in] LONGLONG fileStart,
                                    [in] LONGLONG fileSize, 
                                    [out] GUID* pPosMedia,
                                    [out] LONGLONG* pPosOfffset );

    };

    [
        object,
		uuid(B04E802A-8D06-46BE-8930-2AA2DA4C0DF2),
        helpstring("IHsmUpgradeRmsDb Interface"),
        pointer_default(unique)
    ]
    interface IHsmUpgradeRmsDb : IUnknown
    {
        HRESULT Init( [in] IRmsServer   *ppHsmMediaMgr );
    };

    [
        object,
        uuid(BA365110-6D66-11d0-9E2E-00A0C916F120),
        helpstring("IHsmManagedResource Interface"),
        pointer_default(unique)
    ]
    interface IHsmManagedResource : IWsbCollectable
    {
        HRESULT GetResourceId( [out] GUID *pResourceId );
        HRESULT SetResourceId( [in]  GUID resourceId );
        HRESULT InitFromFsaResource( [in]  IUnknown  *pFsa );
        HRESULT GetFsaResource(      [out] IUnknown  **ppFsa );
        HRESULT CompareToIHsmManagedResource(
                    [in] IHsmManagedResource* pHsmManagedResource, 
                    [out] short* psResult);
    };

    [
        object,
        uuid(AAA2ABF1-E5CF-11d1-9974-0060976A546D),
        helpstring("IHsmManagedResourceCollection Interface"),
        pointer_default(unique)
    ]
    interface IHsmManagedResourceCollection : IUnknown
    {
        HRESULT DeleteAllAndRelease( void );

/*++

Method Name:

       DeleteAllAndRelease

Method Description:

    Removes all items from the collection without the side effects
    of RemoveAllAndRelease.  Used for shutting down the collection
    with unmanaging the resources.

Arguments:

    None.

Return Value:

    S_OK        - The collection is empty.

--*/

    };

    [
        object,
        uuid(DD529292-3892-47A4-B016-C752A50CFC29),
        helpstring("IHsmStoragePool Interface"),
        pointer_default(unique)
    ]
    interface IHsmStoragePool : IWsbCollectable
    {
        HRESULT GetId( [out] GUID *pId );
        HRESULT SetId( [in] GUID Id );
        HRESULT GetMediaSet( [out] GUID *pMediaSetId, [out, string]  BSTR *pMediaSetName );
        HRESULT SetMediaSet( [in] GUID mediaSetId, [in, string] BSTR mediaSetName );
        HRESULT GetNumOnlineMedia( [out] ULONG *pNumOnlineMedia );
        HRESULT SetNumOnlineMedia( [in] ULONG numOnlineMedia );
        HRESULT GetNumMediaCopies( [out] USHORT *pNumMediaCopies );
        HRESULT SetNumMediaCopies( [in] USHORT numMediaCopies );
        HRESULT GetManagementPolicy( [out] GUID *pManagementPolicyId );
        HRESULT SetManagementPolicy( [in] GUID managementPolicyId );
        HRESULT InitFromRmsMediaSet( [in]  IUnknown  *pRmsMediaSet );
        HRESULT GetRmsMediaSet(  [out] IUnknown  **ppRmsMediaSet );

        HRESULT CompareToIHsmStoragePool([in] IHsmStoragePool* pHsmStoragePool, 
                                         [out] short* psResult);

        HRESULT GetMediaSetType( [out] USHORT *pMediaType);
    };


    [
        object,
        uuid(38E504D8-CBC5-4701-BAC5-D4F85B45FC79),
        helpstring("IMountingMedia Interface"),
        pointer_default(unique)
    ]
    interface IMountingMedia : IUnknown
    {
        HRESULT Init( [in] REFGUID mediaId, [in] BOOL readOnly  );
        HRESULT GetMediaId( [out] GUID *pMediaId );
        HRESULT SetMediaId( [in] REFGUID mediaId );
        HRESULT WaitForMount( [in] DWORD timeout );
        HRESULT MountDone( void );
        HRESULT SetIsReadOnly( [in] BOOL readOnly );
        HRESULT IsReadOnly( void );
    }



[
    uuid(2D1E3150-25DE-11D0-8073-00A0C905F098),
    version(1.0),
    helpstring("HsmEng 1.0 Type Library")
]
library HsmEngLib
{
    importlib("stdole2.tlb");

    [
        uuid(2D1E3156-25DE-11D0-8073-00A0C905F098),
        helpstring("HsmServer Class")
    ]
    coclass HsmServer
    {
        [default] interface IHsmServer;
        interface IWsbServer;
        interface IWsbCreateLocalObject;
        interface IWsbTrace;
    };

    [
		uuid(FA94233C-F4E2-4B96-A4FA-BC63AFB69F7D),
        helpstring("HsmUpgradeRmsDb Class")
    ]
    coclass CHsmUpgradeRmsDb
    {
        [default] interface IHsmUpgradeRmsDb;
    };

    [
        uuid(AB939AD0-6D67-11d0-9E2E-00A0C916F120),
        helpstring("HsmManagedResource Class")
    ]
    coclass  CHsmManagedResource
    {
        [default] interface IHsmManagedResource;
    };

    [
        uuid(8448DD80-7614-11d0-9E33-00A0C916F120),
        helpstring("HsmManagedResourceCollection Class")
    ]
    coclass  CHsmManagedResourceCollection
    {
        [default] interface IWsbIndexedCollection;
    };

    [
        uuid(61F0B790-82D9-11d0-9E35-00A0C916F120),
        helpstring("HsmStoragePool Class")
    ]
    coclass  CHsmStoragePool
    {
        [default] interface IHsmStoragePool;
    };

    [
        uuid(842B10E9-FAAD-4A8C-87FE-4FF9EBF45ABC),
        helpstring("MountingMedia class")
    ]
    coclass  CMountingMedia
    {
        [default] interface IMountingMedia;
    };

};

