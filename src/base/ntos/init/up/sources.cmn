!IF 0

Copyright (c) Microsoft Corporation

!ENDIF

!include $(PROJECT_ROOT)\ntos\ntoskrnl.inc
MAJORCOMP=ntos
MINORCOMP=init

TARGETNAME=init
TARGETTYPE=LIBRARY
TARGETPATH=obj

INCLUDES=..;..\..\inc;..\..\nls\$(O);$(HALKIT_INC_PATH)

!IF $(AMD64) || $(IA64)
C_DEFINES=$(C_DEFINES) -DNO_LEGACY_DRIVERS
!ENDIF

!ifndef TARGET1
TARGET1=up
!endif

!ifndef TARGET2
TARGET2=up
!endif

SOURCES=\
        ..\init.c      \
        ..\anim.c      \
        ..\port.c      \
        ..\bootvid.c   \
        ..\ntoskrnl.rc

!IF "$(NTTEST)"==""
NTTEST=ntoskrnl
!endif

LINK_LIB_IGNORE=4087,4001

!ifndef NOLIB
!if "$(NTTEST)" == "ntoskrnl"
NTTARGETFILE1=$(DDK_LIB_PATH)\ntoskrnl.lib
EXPORT_FILE=$(O)\ntoskrnl.exp
!else
NTTARGETFILE1=$(O)\$(NTTEST).lib
EXPORT_FILE=..\up\$(O)\ntoskrnl.exp
!ENDIF
!endif

C_DEFINES=$(C_DEFINES) /DKERNEL_NAME=^"$(NTTEST).exe^"

!ifdef TEST_BUILD_EXPONENT
!  if "$(TEST_BUILD_EXPONENT)" == "$(TEST_BUILD_EXPONENT:0x=)"
!    error TEST_BUILD_EXPONENT value must start with 0x
!  endif
C_DEFINES=$(C_DEFINES) -DTEST_BUILD_EXPONENT=$(TEST_BUILD_EXPONENT)
!endif

NTRES=$(O)\ntoskrnl.res
UMRES=$(O)\ntoskrnl.res

LINKLIBS = \
    $(DDK_LIB_PATH)\hal.lib \
    $(EXPORT_FILE) \
    $(PROJECT_ROOT)\boot\bootvid\daytona\$(O)\bootvid.lib \
    $(WINDOWS_LIB_PATH)\sdbapint.lib \
    $(PROJECT_ROOT)\boot\kdcom\$(O)\kdcom.lib

!IF $(IA64)
LINKER_FLAGS =$(LINKER_FLAGS) -IGNORE:4226
!ENDIF

LINKER_FLAGS =$(LINKER_FLAGS) -map -merge:PAGECONST=PAGE -merge:INITCONST=INIT -merge:INITDATA=INIT -merge:PAGELKCONST=PAGELK -merge:PAGEVRFY_CONST=PAGEVRFY

POST_BUILD_CMD=link -edit -nologo -section:.rsrc,!d $(O)\$(NTTEST).exe

!ifndef TARGETPATH2
TARGETPATH2=$(TARGETPATH)
!endif

KERNEL_LIBS = \
    $(PROJECT_ROOT)\ntos\arb\$(TARGET2)\$(O)\arb.lib \
    $(PROJECT_ROOT)\ntos\cache\$(TARGET2)\$(O)\cache.lib  \
    $(PROJECT_ROOT)\ntos\config\$(TARGET2)\$(O)\config.lib \
    $(PROJECT_ROOT)\ntos\dbgk\$(TARGET2)\$(O)\dbgk.lib   \
    $(PROJECT_ROOT)\ntos\FsRtl\$(TARGET2)\$(O)\FsRtl.lib  \
    $(PROJECT_ROOT)\ntos\FStub\$(TARGET2)\$(O)\FStub.lib  \
    $(PROJECT_ROOT)\ntos\init\$(TARGET1)\$(O)\init.lib    \
    $(PROJECT_ROOT)\ntos\io\$(TARGET2)\$(O)\io.lib     \
    $(PROJECT_ROOT)\ntos\io\iomgr\$(TARGET2)\$(O)\iomgr.lib     \
    $(PROJECT_ROOT)\ntos\io\pnpmgr\$(TARGET2)\$(O)\pnpmgr.lib     \
    $(PROJECT_ROOT)\ntos\kd64\$(TARGET1)\$(O)\kd.lib      \
    $(PROJECT_ROOT)\ntos\ke\$(TARGET1)\$(O)\ke.lib      \
    $(PROJECT_ROOT)\ntos\lpc\$(TARGET2)\$(O)\lpc.lib    \
    $(PROJECT_ROOT)\ntos\mm\$(TARGET1)\$(O)\mm.lib      \
    $(PROJECT_ROOT)\ntos\ob\$(TARGET2)\$(O)\ob.lib     \
    $(PROJECT_ROOT)\ntos\po\$(TARGET2)\$(O)\po.lib     \
    $(PROJECT_ROOT)\ntos\ps\$(TARGET2)\$(O)\ps.lib     \
    $(PROJECT_ROOT)\ntos\raw\$(TARGET2)\$(O)\raw.lib    \
    $(PROJECT_ROOT)\ntos\rtl\$(TARGET2)\$(O)\ntosrtl.lib\
    $(PROJECT_ROOT)\ntos\se\$(TARGET2)\$(O)\se.lib     \
    $(PROJECT_ROOT)\ntos\vdm\$(TARGET2)\$(O)\vdm.lib    \
    $(PROJECT_ROOT)\ntos\verifier\$(TARGET2)\$(O)\verifier.lib  \
    $(PROJECT_ROOT)\ntos\wmi\$(TARGET2)\$(O)\wmi.lib    \
    $(PROJECT_ROOT)\ntos\perf\$(TARGET2)\$(O)\perf.lib    \
    $(PROJECT_ROOT)\ntos\ex\$(TARGET2)\$(O)\ex.lib     \
    $(DS_LIB_PATH)\lsakrnlp.lib \
!if $(IA64)    
    $(PROJECT_ROOT)\crts\libw32\lib\nt\ia64\libcntpr.lib \
!else    
    $(SDK_LIB_PATH)\libcntpr.lib \
!endif    

!if !$(FREEBUILD) && $(386)
KERNEL_ALIGNMENT=0x1000
!endif
