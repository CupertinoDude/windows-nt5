#pragma namespace ("\\\\.\\Root\\WMI")
/*++

Copyright (c) 2000  Microsoft Corporation

Module Name:

   filter.mof

Abstract:

    Managed Object Format file that contains descriptions of the data blocks
    events and methods implemented by the driver

--*/



[WMI,
 guid("{887DAB33-5A16-4321-A0BE-EC0D01B12E1D}")
]
class MSSample_DiagnosticSetting
{
    [Description (
          "Sets the level of warning messages to be logged. If for "
          "example no warning information is required, the level "
          "would be set to \"No Warnings\" (value=0). Using \"Missing "
          "Resources\" (value=1) will cause warnings to be generated "
          "when required resources or hardware are not found. Setting "
          "the value to 2, \"Testing Impacts\", results in both "
          "missing resources and 'test impact' warnings (for example, "
          "multiple retries required) to be reported."), 
     Values{"No Warnings", "Missing Resources", 
            "Testing Impacts", "All Warnings"},
     Write,
     WmiDataId(1)
    ] 
    uint16 TestWarningLevel = 3;

    [Description (
	    "When this flag is true, the diagnostic test will report "
          "'soft errors'. In this context, a soft error is a message "
          "from the diagnostic reporting a known defect in the "
          "hardware or driver configuration, or execution "
          "environment.  Examples are: \"Not enough memory\", "
          "\"Driver IOCTL not implemented\", \"Video RAM compare "
          "failed during polygon fill test (A known defect in the "
          "video chipset)\", etc."),
     Write,
     WmiDataId(2)
    ] 
    boolean ReportSoftErrors = FALSE;

    [Description (
	    "When this flag is true, the diagnostic test will report "
          "'status messages'. In this context, a status message "
          "indicates that the diagnostic code is at a checkpoint. "
	    "Examples are: \"Completion of phase 1\", \"Complex "
          "pattern\", etc."),
     Write,
     WmiDataId(3)
    ] 
    boolean ReportStatusMessages = TRUE;

    [Description (
	    "When this flag is true, the test will halt after finding "
          "the first error."),
     Write,
     WmiDataId(4)
    ] 
    boolean HaltOnError = TRUE;

    [Description (
          "When this flag is true, the test software should attempt "
          "to run in an accelerated fashion either by reducing the "
          "coverage or number of tests performed."), 
     Write,
     WmiDataId(5)
    ] 
    boolean QuickMode = FALSE;

    [Units ("Percent"), MinValue (0), MaxValue (100), 
     Description(
	    "Requests the diagnostic software to reduce test coverage "
          "to the specified percentage.  For example, a hard drive "
          "scan test could be asked to run at 50%. The most "
          "effective way to accomplish this is for the test software "
          "to scan every other track, as opposed to only scanning the "
          "first half of a drive. It is assumed that the effectiveness "
          "of the test is impacted proportional to the percentage of "
          "testing requested. Permissible values for this property "
          "range from 0 to 100. "
          "This property may not be applicable to all tests.  If it "
          "can be set for a test, the value 7 (\"Supports PercentOf"
          "TestCoverage\") should be entered into the DiagnosticTest's "
          "Characteristics array."), 
     Write,
     WmiDataId(6)
    ] 
    uint8 PercentOfTestCoverage = 100;

    [WmiDataId(7),
     read]
    uint8 Reserved = 0;
};

[Dynamic, Provider("WMIProv"),
 WMI, 
 Description("Sample Diagnostic Test Settings List") : amended,
 guid("{0F48A81F-8F26-404d-AA87-0D62DDE05DA8}"),
 DisplayName("Sample Diagnostic Test Settings List") : amended
 ]
class MSSample_DiagnosticSettingList
{
    [key, read] 
     string InstanceName;
    [read] boolean Active;

    [WmiDataId(1),
     read]
    uint32 SettingCount;

    [WmiDataId(2),
     read,
     WmiSizeIs("SettingCount")]
    MSSample_DiagnosticSetting SettingList[];
};

//
// Embedded class
//
[WMI,
 guid("{91843BEA-5562-4315-AB73-0CB0688D02E5}")
]
class MSSample_DiagnosticResult
{
    [Units ("Seconds"), 
     Description (
          "Estimated number of seconds to perform the Diagnostic"
          "Test indicated by the DiagnosticCreationClassName and "
          "DiagnosticName properties.  After the test has completed, "
          "the actual elapsed time can be determined by subtracting "
          "the TestStartTime from the TestCompletionTime. A similar "
          "property is defined in the association, DiagnosticTest"
          "ForMSE. The difference between the two properties is "
          "that the value stored in the association is a generic "
          "test execution time for the Element and the Test. But, "
          "the value here (in DiagnosticResult) is the estimated "
          "time that this instance of testing would run."),
     WmiDataId(1)
    ]
    uint32 EstimatedTimeOfPerforming;

    [Description (
          "Describes how the test is progressing. For example, if "
          "the test was discontinued, the TestState will be "
          "\"Stopped\" (value=5), or if testing is currently "
          "executing, TestState will be \"In Progress\" (4)."),  
     Values{"Unknown", "Other", "Passed", "Failed", 
             "In Progress", "Stopped"},
     DefineValues{"TestStateUnknown", "TestStateOther", "TestStatePassed",
                  "TestsStateFailed", "TestStatInProgress", "TestStateStopped"},
     ValueMap{"0", "1", "2", "3", "4", "5"},
     WmiDataId(2)
    ] 
    uint16 TestState;

    [Description (
          "When \"Other\" (value=1) is entered in the TestState "
          "property, OtherState has a value that is indexed into the "
          "value map to get the text representation."),
     Values{"Hardware Paused", "Device Power Up", "Pass With Flying Colors", 
            "Offline Pending Execution"},
     ValueMap{"0", "1", "2", "3"},
     DefineValues{"OtherTestStateHardwarePaused", 
                  "OtherTestStateDevicePowerUp",
                  "OtherTestStatePassWithFlyingColors",
                  "OfflinePendingExecution"},
     WmiDataId(3)
    ]
     uint16 OtherStateDescription;

    [Units ("Percent"), MinValue (0), MaxValue (100), 
     Description (
          "The percentage of the test that has executed thus far, if the "
          "TestState property is set to \"In Progress\" or the percentage "
          "of the complete test that was executed if the TestState property "
          "is set to any of the completed states (\"Passed\", \"Failed\" or "
          "\"Stopped\"). Final results may be based on less than 100% coverage "
          "due to the parameters defined in DiagnosticSetting (such as "
          "QuickMode, PercentOfTestCoverage or HaltOnError)." ),
     WmiDataId(4)
    ]
    uint8 PercentComplete;

    [WmiDataId(5)]
    uint8 Reserved1;

    [WmiDataId(6)]
    uint8 Reserved2;

    [WmiDataId(7)]
    uint8 Reserved3;

    [
     WmiDataId(8)
    ]
    uint32 TestResultsCount;

    [Description("This is an array of values that get mapped via the value "
                 "map into strings by the provider"), 
     ArrayType ("Ordered"),
     WmiSizeIs("TestResultsCount"),
     Values{"Passes and is happy", "Passes but is sad",
            "Failed and is happy", "Failed but is sad"},
     ValueMap{"0", "1", "2", "3"},
     DefineValues{"TestResultPassHappy", "TestResultPassSad",
                  "TestResultFailHappy", "TestResultFailSad"},
     WmiDataId(9)
    ] 
    uint32 TestResults[];
};


[WMI,
 guid("{3DB46EFB-34C3-4509-AE00-98725871CB59}")
]
class MSSample_RunTestIn
{
    [WmiDataId(1)] string ExecutionID;
    [WmiDataId(2)] MSSample_DiagnosticSetting DiagSettings;
};

[WMI,
 guid("{23DCD086-2111-4bda-9E1C-E33C29A4AAD6}")
]
class MSSample_RunTestOut
{
    [WmiDataId(1)] uint32 Result;
    [WmiDataId(2)] MSSample_DiagnosticResult DiagResult;
};



[Dynamic, Provider("WMIProv"),
 WMI, 
 Description("Sample Diagnostic Test") : amended,
 guid("{B5C68C9E-39AD-4ad5-A844-AF1532F4BB9F}"),
 DisplayName("Sample Diagnostic Test") : amended
 ]
class MSSample_DiagnosticTest
{
    [key, read] 
     string InstanceName;
    [read] boolean Active;

//
// Properties
//
    [Description(
          "If this test is currently being performed, the InUse "
          "property is set to TRUE."),
     read,
     WmiDataId(1)
    ]
    boolean IsInUse;

    [
     WmiDataId(2),
     read
    ]
    uint32 ResourcesUsedCount;

    [
     WmiDataId(3),
     read
    ]
    uint32 CharacteristicsCount;

    [
     Description (
          "Provides additional information for the Characteristic when "
          "its value is set to 1 (\"Other\"). It is translated from the "
          "value map into a string by the provider"), 
       Values{"Does Not Require Reboot", "Requires Reboot"},
       ValueMap{"0", "1"},
       DefineValues{"OtherCharacteristicNoReboot", "OtherCharacteristicReboot"},
       WmiDataId(4)
    ]
    uint32 OtherCharacteristicDescription;

    [Description (
	    "The descriptions for each Characteristic are below:\n "
	    "\n"
          "* \"Is Exclusive\" (value=2) is specified for the test "
          "module only if the diagnostic cannot run more than one test "
          "at a time, regardless of how many SystemElements are "
          "supported. Typically, this occurs when hardware or software "
          "constraints prevent the test from running as multiple, "
          "concurrent instances. If the diagnostic can be run against "
          "multiple SystemElements, but only once per Element, then set "
          "the IsExclusiveForMSE boolean property on the appropriate "
          "instances of DiagnosticTestForMSE. \n"
	    "\n"
	    "* If \"Is Interactive\" (value=3) is set, then the diagnostic "
          "displays a message either before, during or after testing. \n"
	    "\n"
	    "* Set \"Is Destructive\" (value=4) if the diagnostic will "
          "destroy data, or reconfigure the Element that is being "
          "tested. \n" 
	    "\n"
	    "* \"Is Risky\" (value=5) indicates that data loss may occur "
          "if the test is interrupted. Some tests make copies of data, "
          "perform the test, and restore the data returning the tested "
          "entity to its previous configuration. If the test is "
          "interrupted, then loss of data or reconfiguration of the "
          "tested ManagedSystemElement may occur. \n"
	    "\n"
	    "* If \"Is Package\" (value=6) is set, this test is actually "
          "a set of lower level diagnostics, that are 'packaged' "
          "together. \n"
          "\n"
          "\"Supports PercentOfTestCoverage\" (value=7) indicates that "
          "a request for reduced test coverage can be specified using "
          "the PercentOfTestCoverage property of Diagnostic Setting. \n"
          "\n"
          "Also, the values \"Unknown\" (0) and \"Other\" (1) may be "
          "specified. If \"Other\" is defined, additional detail may be "
          "found in the OtherCharacteristicDescription property of this "
          "class."), 
     read,
     Values{"Unknown", "Other", "Is Exclusive", "Is Interactive", 
            "Is Destructive", "Is Risky", "Is Package", 
             "Supports PercentOfTestCoverage"},
     ValueMap{"0", "1", "2", "3", "4", "5", "6", "7"},
     DefineValues{"CharacteristicUnknown",
                  "CharacteristicOther",
                  "CharacteristicIsExclusive",
                  "CharacteristicIsInteractive",
                  "CharacteristicIsDestructive",
                  "CharacteristicIsRisky",
                  "CharacteristicIsPackage",
                  "CharacteristicSupportsPercent"},
     WmiSizeIs("CharacteristicsCount"),
     WmiDataId(5)
    ] 
    uint32 Characteristics[];

    [
     Description(
	    "The \"Expensive\" qualifier can be applied to this class and "
          "its RunTest method. If so, the ResourcesUsed property "
          "describes the resources that are capitalized, based on a "
          "default setup for the test. Multiple resources can be "
          "specified since the property is an array."),       
      read,
      Values{"CPU", "Memory", "Hard Disk", "CDROM", "Floppy", 
             "PCI Bus", "USB Bus", "1394 Bus", "SCSI Bus", "IDE Bus", 
             "Network", "ISA Bus", "EISA Bus", "VESA Bus", "PCMCIA Bus", 
             "CardBus", "Access.bus", "NuBus", "AGP", "VME Bus", 
             "Sbus IEEE 1396-1993", "MCA Bus", "GIO Bus", "XIO Bus", 
             "HIO Bus", "PMC Bus", "SIO Bus"},
      ValueMap{"0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
               "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20",
               "20", "21", "22", "23", "24", "25", "26", "27" },
      DefineValues{"ResourceUsedCPU", "ResourceUsedMemory", 
                   "ResourceUsedHardDisk", "ResourceUsedCDROM", 
                   "ResourceUsedFloppy", "ResourceUsedPCIBus", 
                   "ResourceUsedUSBBus", "ResourceUsed1394Bus", 
                   "ResourceUsedSCSIBus", "ResourceUsedIDEBus", 
		   "ResourceUsedNetwork", "ResourceUsedISABus", 
                   "ResourceUsedEISABus", "ResourceUsedVESABus", 
                   "ResourceUsedPCMCIABus", "ResourceUsedCardBus", 
                   "ResourceUsedAccessBus", "ResourceUsedNuBus", 
                   "ResourceUsedAGP", "ResourceUsedVMEBus", 
                   "ResourceUsedSbusIEEE1396_1993", "ResourceUsedMCABus", 
                   "ResourceUsedGIOBus", "ResourceUsedXIOBus", 
		   "ResourceUsedHIOBus", "ResourceUsedPMCBus", 
                   "ResourceUsedSIOBus"},
      WmiSizeIs("ResourcesUsedCount"),
      WmiDataId(6)
    ]
    uint16 ResourcesUsed[];


//
// Methods
//


    [Implemented:toSubclass toInstance,
     WmiMethodId(1)
    ] 
    void RunTest(
                 [IN] MSSample_RunTestIn RunTestIn,
                 [OUT] MSSample_RunTestOut RunTestOut
                );   

    [Implemented:toSubclass ToInstance,
     WmiMethodId(2)
    ] 
    void DiscontinueTest([OUT] uint32 Result,
                         [OUT] Boolean TestingStopped
                        );   
};


[Dynamic, Provider("WMIProv"),
 WMI, 
 Description("Sample Offline Diagnostic Test") : amended,
 guid("{C440AC3C-C739-424e-99F4-6D02DA8B8313}"),
 DisplayName("Sample Offline Diagnostic Test") : amended
 ]
class MSSample_OfflineDiagnosticTest
{
    [key, read] 
     string InstanceName;
    [read] boolean Active;

//
// Properties
//
    [Description(
          "If this test is currently being performed, the InUse "
          "property is set to TRUE."),
     read,
     WmiDataId(1)
    ]
    boolean IsInUse;

    [
     WmiDataId(2),
     read
    ]
    uint32 ResourcesUsedCount;

    [
     WmiDataId(3),
     read
    ]
    uint32 CharacteristicsCount;

    [
     Description (
          "Provides additional information for the Characteristic when "
          "its value is set to 1 (\"Other\"). It is translated from the "
          "value map into a string by the provider"), 
       Values("Offline Diagnostic"),
       ValueMap("0"),
       DefineValues{"OfflineDiagnostic"},
       WmiDataId(4)
    ]
    uint32 OtherCharacteristicDescription;

    [Description (
	    "The descriptions for each Characteristic are below:\n "
	    "\n"
          "* \"Is Exclusive\" (value=2) is specified for the test "
          "module only if the diagnostic cannot run more than one test "
          "at a time, regardless of how many SystemElements are "
          "supported. Typically, this occurs when hardware or software "
          "constraints prevent the test from running as multiple, "
          "concurrent instances. If the diagnostic can be run against "
          "multiple SystemElements, but only once per Element, then set "
          "the IsExclusiveForMSE boolean property on the appropriate "
          "instances of DiagnosticTestForMSE. \n"
	    "\n"
	    "* If \"Is Interactive\" (value=3) is set, then the diagnostic "
          "displays a message either before, during or after testing. \n"
	    "\n"
	    "* Set \"Is Destructive\" (value=4) if the diagnostic will "
          "destroy data, or reconfigure the Element that is being "
          "tested. \n" 
	    "\n"
	    "* \"Is Risky\" (value=5) indicates that data loss may occur "
          "if the test is interrupted. Some tests make copies of data, "
          "perform the test, and restore the data returning the tested "
          "entity to its previous configuration. If the test is "
          "interrupted, then loss of data or reconfiguration of the "
          "tested ManagedSystemElement may occur. \n"
	    "\n"
	    "* If \"Is Package\" (value=6) is set, this test is actually "
          "a set of lower level diagnostics, that are 'packaged' "
          "together. \n"
          "\n"
          "\"Supports PercentOfTestCoverage\" (value=7) indicates that "
          "a request for reduced test coverage can be specified using "
          "the PercentOfTestCoverage property of Diagnostic Setting. \n"
          "\n"
          "Also, the values \"Unknown\" (0) and \"Other\" (1) may be "
          "specified. If \"Other\" is defined, additional detail may be "
          "found in the OtherCharacteristicDescription property of this "
          "class."), 
     read,
     Values{"Unknown", "Other", "Is Exclusive", "Is Interactive", 
            "Is Destructive", "Is Risky", "Is Package", 
             "Supports PercentOfTestCoverage"},
     ValueMap{"0", "1", "2", "3", "4", "5", "6", "7"},
     WmiSizeIs("CharacteristicsCount"),
     WmiDataId(5)
    ] 
    uint32 Characteristics[];

    [
     Description(
	    "The \"Expensive\" qualifier can be applied to this class and "
          "its RunTest method. If so, the ResourcesUsed property "
          "describes the resources that are capitalized, based on a "
          "default setup for the test. Multiple resources can be "
          "specified since the property is an array."),       
      read,
      Values{"CPU", "Memory", "Hard Disk", "CDROM", "Floppy", 
             "PCI Bus", "USB Bus", "1394 Bus", "SCSI Bus", "IDE Bus", 
             "Network", "ISA Bus", "EISA Bus", "VESA Bus", "PCMCIA Bus", 
             "CardBus", "Access.bus", "NuBus", "AGP", "VME Bus", 
             "Sbus IEEE 1396-1993", "MCA Bus", "GIO Bus", "XIO Bus", 
             "HIO Bus", "PMC Bus", "SIO Bus"},
      ValueMap{"0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
               "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20",
               "20", "21", "22", "23", "24", "25", "26", "27" },
      DefineValues{"ResourceUsedCPU", "ResourceUsedMemory", 
                   "ResourceUsedHardDisk", "ResourceUsedCDROM", 
                   "ResourceUsedFloppy", "ResourceUsedPCIBus", 
                   "ResourceUsedUSBBus", "ResourceUsed1394Bus", 
                   "ResourceUsedSCSIBus", "ResourceUsedIDEBus", 
		   "ResourceUsedNetwork", "ResourceUsedISABus", 
                   "ResourceUsedEISABus", "ResourceUsedVESABus", 
                   "ResourceUsedPCMCIABus", "ResourceUsedCardBus", 
                   "ResourceUsedAccessBus", "ResourceUsedNuBus", 
                   "ResourceUsedAGP", "ResourceUsedVMEBus", 
                   "ResourceUsedSbusIEEE1396_1993", "ResourceUsedMCABus", 
                   "ResourceUsedGIOBus", "ResourceUsedXIOBus", 
		   "ResourceUsedHIOBus", "ResourceUsedPMCBus", 
                   "ResourceUsedSIOBus"},
      WmiSizeIs("ResourcesUsedCount"),
      WmiDataId(6)
    ]
    uint16 ResourcesUsed[];


//
// Methods
//


    [Implemented:toSubclass toInstance,
// Define HeaderName so generated header definitions don't conflict with
// other methods that have the same parameter names
     HeaderName("OfflineRunTest"),
     WmiMethodId(1)
    ] 
    void RunTest(
                 [IN] MSSample_RunTestIn RunTestIn,
                 [OUT] MSSample_RunTestOut RunTestOut
                );   

    [Implemented:toSubclass ToInstance,
// Define HeaderName so generated header definitions don't conflict with
// other methods that have the same parameter names
     HeaderName("OfflineDiscontinueTest"),
     WmiMethodId(2)
    ] 
    void DiscontinueTest([OUT] uint32 Result,
                         [OUT] Boolean TestingStopped
                        );   
};


[Dynamic, Provider("WMIProv"),
 WMI, 
 Description("Sample Diagnostic Test Settings List") : amended,
 guid("{D4A4AB8E-84DB-4049-8865-28C3E0F1A06F}"),
 DisplayName("Sample Diagnostic Test Settings List") : amended
 ]
class MSSample_OfflineResult
{
    [key, read] 
     string InstanceName;
    [read] boolean Active;

    [WmiDataId(1),
     read]
    string ExecutionID;

    [WmiDataId(2),
     read
    ]
    MSSample_DiagnosticResult TestResult;
};
