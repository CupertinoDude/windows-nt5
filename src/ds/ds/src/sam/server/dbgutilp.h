/*++

Copyright (c) 1990  Microsoft Corporation

Module Name:

    dbgutilp.h

Abstract:

    This file contains private debugging routines, macros, etc. for the SAM
    server. All debugging utilities should be added to this file, or to the
    dbgutil.c file.

    See below comments for more information on how to use these routines,
    how to add new routines, and how to add or remove them from the build.

    IF DEBUGGING CODE IS NEEDED THAT IS DEPENDENT ON BUILD TYPE, THEN THIS
    CODE SHOULD STRICTLY RELY ON THE DEFINITION OF THE PROJECT-WIDE NT DE-
    BUGGING MACRO "DBG". THIS IS AUTOMATICALLY DEFINED FOR CHECKED BUILDS,
    AND WILL ENABLE THE SamKdPrint or SampDiagPrint MACROS (via NT KdPrint),
    FOR INSTANCE.

    EXAMPLE USAGE:

    if (DBG == 1)
    {
        CHAR DebugBuffer[64] = "Some Debug Message...";
        KdPrintEx((DPFLTR_SAMSS_ID,
                   DPFLTR_INFO_LEVEL,
                   "SAMSS: %s\n",
                   DebugBuffer));

        SampDiagPrint(INFORM, ("SAMSS: Another Debug Message...\n));
    }

    or

    KdPrintEx((DPFLTR_SAMSS_ID,
               DPFLTR_INFO_LEVEL,
               "SAMSS: Some status message\n"));

    or

    SampDiagPrint(INFORM, ("SAMSS: Another Debug Message...\n));

    Note that output verbosity from SampDiagPrint can be set in the debugger
    by setting the value of SampGlobalFlag to the SAMP_DIAG_ flags defined
    below.

    IF A DEBUGGING MESSAGE IS NEEEDED REGARDLESS OF THE BUILD TYPE, THEN USE
    THE SamOutputDebugString MACRO.

    EXAMPLE USAGE:

    SamOutputDebugString("SAMSS: Mandatory Debug Message...\n");

    Note that all SAM server debug output begins with "SAMSS:" or "[SAMSS]"
    so that the SAM server debug output can be distinguished from the other
    components in the system.

Author:

    Chris Mayhall (ChrisMay)  04-Apr-1996

Environment:

    User Mode - Win32

Revision History:

    04-Apr-1996 ChrisMay
        Created.
    02-Dec-1996 ChrisMay
        Clean up, re-organized, removed obsolete routines, documented how
        to use all this stuff, added filtered KdPrint output.
    05-Dec-1996 ChrisMay
        Moved the SAM diagnostic routines from samsrvp.h to this file.
    07-Feb-1997 ChrisMay
        Added RID manager debug flag.

--*/

#ifndef _DBGUTILP_
#define _DBGUTILP_

// SAM server debugging facility consists of the following macros and compile-
// time flags:
//
// -SampDiagPrint: This macro is enabled in checked builds of the system, and
//  relies on the global variable "SampGlobalFlag" to filter the diagnostic
//  output. In non-checked builds, this code is not included in the server.
//  This macro is intended to be used for informational output that would
//  normally be too verbose by default. Be default, SampGlobalFlag is set
//  to zero, disabling any output to the debugger. See the SAMP_DIAG_ flags
//  defined below for enabling output.
//
// -SAMP_TRACE: Per-routine tracing output to the debugger when this flag is
//  set to 1. This displays the SAM server routine name on the debugger when
//  it is called. This can be enabled in checked or free builds of the ser-
//  ver.
//
// -SAMP_DUMP: A set of routines that will dump registry blobs, security
//  descriptors, ACL's, etc. when this flag is set to 1. This can be enabled
//  in checked or free builds of the server.
//
// These flags are compile-time flags, that when set to 1 include the debug
// code in the build, or when set to 0 do not include the code in the build.
//
// By default, SAMP_DUMP is set to 0 to reduce debugger output, particularly
// on a domain controller.
//
// SAMP_TRACE is set to 1 so that the routines are compiled into the code
// (during development), but note that this debug mechanism also refers to
// runtime variables (set via the debugger) to control how much output is
// sent to the debugger (see below). This allows the developer to dynamically
// filter trace output, while the server is running. No trace output will
// be generated by default, the runtime variables must be set first.
//
// The runtime variables that allow the developer to control how much infor-
// mation is sent to the debugger are "SampTraceTag" and "SampTraceFileTag",
// as defined in dbgutil.c. They can be set from a debugger, as documented
// in dbgutil.c.
//
// Debug output is filtered at two levels: A global level and a component
// specific level.
//
// Each debug output request specifies a component id and a filter level
// or mask. These variables are used to access the debug print filter
// database maintained by the system. The component id selects a 32-bit
// mask value and the level either specified a bit within that mask or is
// as mask value itself.
//
// If any of the bits specified by the level or mask are set in either the
// component mask or the global mask, then the debug output is permitted.
// Otherwise, the debug output is filtered and not printed.
//
// The component mask for filtering the debug output of this component is
// Kd_SAMSS_Mask and may be set via the registry or the kernel debugger.
//
// The global mask for filtering the debug output of all components is
// Kd_WIN2000_Mask and may be set via the registry or the kernel debugger.
//
// The registry key for setting the mask value for this component is:
//
// HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\
//     Session Manager\Debug Print Filter\SAMSS
//
// The key "Debug Print Filter" may have to be created in order to create
// the component key.
//
// A typical debug output request is:
//
//    KdPrintEx((DPFLTR_SAMSS_ID,
//               DPFLTR_INFO_LEVEL,
//               "SAMSS: Some status message\n"));
//

#define SAMP_TRACE      0
#define SAMP_DUMP       0

// These flags are used by the tracing routines to determine what is traced.
// If SampTraceTags is set to 1, then trace SAM server exported routines. If
// SampTraceTags is set to 2, then trace the routines within a specified src
// code file. if trace is 4 then trace all DS calls and their return values
// if trace is 8 output ticks

#define SAM_TRACE_EXPORTS       0x00000001
#define SAM_TRACE_FILE_BASIS    0x00000002
#define SAM_TRACE_DS            0x00000004
#define SAM_TRACE_TICKS         0x00000008


// The src code file is specified via the SampTraceFileTags variable.  The
// value of this variable is based on the TraceTable (refer to dbgutil.c for
// the entries), or if set to 0xffffffff, will trace all SAM server routines.
// As new src code files are added to the project, the list of files in the
// TraceTable should be updated as well.

#define SAM_TRACE_ALL           0xffffffff

//======================SAM SERVER DIAGNOSTIC ROUTINES========================

// The following define controls the diagnostic capabilities that are built
// into SAM. The SampDiagPrint routine should be used whenever informational
// or verbose output is required. This output is only available in checked
// builds, and is settable from the debugger (set SampGlobalFlag).

#if (DBG == 1)

#define SAMP_DIAGNOSTICS 1

#endif // DBG


#if (SAMP_DIAGNOSTICS == 1)

// Test for diagnostics enabled.

#define IF_SAMP_GLOBAL( FlagName ) \
    if (SampGlobalFlag & (SAMP_DIAG_##FlagName))

#define IF_NOT_SAMP_GLOBAL( FlagName ) \
    if ( !(SampGlobalFlag & (SAMP_DIAG_##FlagName)) )

// Diagnostics print statement

#define SampDiagPrint( FlagName, _Text_ )\
    IF_SAMP_GLOBAL( FlagName )\
        DbgPrint _Text_

#else

#define IF_SAMP_GLOBAL( FlagName ) if (FALSE)
#define IF_NOT_SAMP_GLOBAL ( FlagName ) if (TRUE)
#define SampDiagPrint( FlagName, Text ) ;

#endif // SAMP_DIAGNOSTICS


// The following flags enable or disable various diagnostic capabilities
// within SAM.  The value of SampGlobalFlag can be set to one or more of
// these flags from the debugger.
//
//      DISPLAY_CACHE - print diagnostic messages related
//          to the display cache (additions, deletions,
//          modifications, etc).
//
//      DISPLAY_LOCKOUT - print diagnostic messages related
//          to account lockout.
//
//      DISPLAY_ROLE_CHANGES - print diagnostic messages related
//          to primary/backup role changes.
//
//      DISPLAY_CACHE_ERRORS - print diagnostic messages related to
//          errors when manipulating the display cache.
//
//      DISPLAY_STORAGE_FAIL - print diagnostic messages related to
//          backing store failures.
//
//      BREAK_ON_STORAGE_FAIL - breakpoint if an attempt to write
//          to backing store fails.
//
//      CONTEXT_TRACKING - print diagnostic messages related to
//          object context usage (creation / deletion, etc.).
//
//      ACTIVATE_DEBUG_PROC - activate a process for use as a diagnostic
//          aid.  This is expected to be used only during SETUP testing.
//
//      DISPLAY_ADMIN_CHANGES - print diagnostic messages related to
//          changing user account protection to allow or dissallow
//          Account Operator access to admin or normal user accounts.
//
//      LOGON - Traces some of the important activiites that pertain
//          to the logon sequence.
//
//      NT5_ACCESS_CHECKS - Traces and prints some information regarding NT5
//          Access checks.
//
//      SD_DUMP - Dumps out the security descriptor during the check.
//
//      SD_CONVERT - Prints diagnostic messages about security coonversions.
//
//      FORCE_FULL_SD_CONVERSION - Is used to disable the standard ACL recognition
//         mecahnism for NT4 to NT5 security descriptor conversions. This can test
//         the enhanced ACL mechanism efficiently
//
//      SAMP_DIAG_BREAK_ON_CHECK -- Forces a Debug Break, Just before we call access
//         check by type result list. Useful in verifying what the function returned
//
//      PROMOTE -- prints out infomation relating to the promotion or
//                 demotion of a SAM server
//
//      RID_TRACE -- Traces information regarding Rid Allocations.
//
//
//      OBJECT_CONFLICT -- Prints information regarding SAM account Name and
//                         Sid Conflicts
//
//      INFORM - Generic informational flag, used to display verbose or
//          frequently occurring status messages that are not tied to a
//          specific sub-system or component. This is not intended to be
//          used for error reporting, rather for informational status.
//

#define SAMP_DIAG_DISPLAY_CACHE             ((ULONG) 0x00000001L)
#define SAMP_DIAG_DISPLAY_LOCKOUT           ((ULONG) 0x00000002L)
#define SAMP_DIAG_DISPLAY_ROLE_CHANGES      ((ULONG) 0x00000004L)
#define SAMP_DIAG_DISPLAY_CACHE_ERRORS      ((ULONG) 0x00000008L)
#define SAMP_DIAG_DISPLAY_STORAGE_FAIL      ((ULONG) 0x00000010L)
#define SAMP_DIAG_BREAK_ON_STORAGE_FAIL     ((ULONG) 0x00000020L)
#define SAMP_DIAG_CONTEXT_TRACKING          ((ULONG) 0x00000040L)
#define SAMP_DIAG_ACTIVATE_DEBUG_PROC       ((ULONG) 0x00000080L)
#define SAMP_DIAG_DISPLAY_ADMIN_CHANGES     ((ULONG) 0x00000100L)
#define SAMP_DIAG_LOGON                     ((ULONG) 0x00000200L)
#define SAMP_DIAG_NT5_ACCESS_CHECKS         ((ULONG) 0x00000400L)
#define SAMP_DIAG_SD_DUMP                   ((ULONG) 0x00000800L)
#define SAMP_DIAG_SD_CONVERSION             ((ULONG) 0x00001000L)
#define SAMP_DIAG_RID_MANAGER               ((ULONG) 0x00002000L)
#define SAMP_DIAG_FORCE_FULL_SD_CONVERSION  ((ULONG) 0x00004000L)
#define SAMP_DIAG_BREAK_ON_CHECK            ((ULONG) 0x00008000L)
#define SAMP_DIAG_PROMOTE                   ((ULONG) 0x00010000L)
#define SAMP_DIAG_RID_TRACE                 ((ULONG) 0x00020000L)
#define SAMP_DIAG_OBJECT_CONFLICT           ((ULONG) 0x00040000L)

#define SAMP_DIAG_INFORM                    ((ULONG) 0x80000000L)


// Choose a print type appropriate to how we are building.

#ifdef SAMP_BUILD_CONSOLE_PROGRAM

#define BldPrint printf

#else

#define BldPrint DbgPrint

#endif // SAMP_BUILD_CONSOLE_PROGRAM


#if (SAMP_DIAGNOSTICS == 1)

extern ULONG SampGlobalFlag;

#endif // SAMP_DIAGNOSTICS


// Define this symbol to get context tracking messages printed (otherwise,
// comment it out).

//#define SAMP_DBG_CONTEXT_TRACKING

#ifdef SAMP_DBG_CONTEXT_TRACKING

VOID
SampDumpContexts(
    VOID
    );

#endif

//======================SAM SERVER TRACING ROUTINES===========================

#if (SAMP_TRACE == 1)

#define SAMTRACE(a)                    SamIDebugOutput(__FILE__,a,SAM_TRACE_FILE_BASIS);\
                                            SamIDebugFileLineOutput(__FILE__, __LINE__, SAM_TRACE_FILE_BASIS);

#define SAMTRACE_EX(a)                 SamIDebugOutput(__FILE__,a,(SAM_TRACE_EXPORTS|SAM_TRACE_FILE_BASIS));\
                                            SamIDebugFileLineOutput(__FILE__, __LINE__, (SAM_TRACE_EXPORTS|SAM_TRACE_FILE_BASIS));

#define SAMTRACE_DS(a)                 SamIDebugOutput(__FILE__,a,SAM_TRACE_DS);\
                                            SamIDebugFileLineOutput(__FILE__,__LINE__,(SAM_TRACE_DS));

#define SAMTRACE_RETURN_CODE(rc)       SamIDebugOutputReturnCode(__FILE__,rc,SAM_TRACE_FILE_BASIS);\
                                            SamIDebugFileLineOutput(__FILE__, __LINE__|SAM_TRACE_FILE_BASIS);

#define SAMTRACE_RETURN_CODE_EX(rc)    SamIDebugOutputReturnCode(__FILE__,rc,SAM_TRACE_EXPORTS|SAM_TRACE_FILE_BASIS);\
                                            SamIDebugFileLineOutput(__FILE__, __LINE__, (SAM_TRACE_EXPORTS|SAM_TRACE_FILE_BASIS));

#define SAMTRACE_RETURN_CODE_DS(rc)    SamIDebugOutputReturnCode(__FILE__,rc,SAM_TRACE_DS);\
                                            SamIDebugFileLineOutput(__FILE__, __LINE__, (SAM_TRACE_DS));

#else

#define SAMTRACE(a)
#define SAMTRACE_EX(a)
#define SAMTRACE_RETURN_CODE(rc)
#define SAMTRACE_RETURN_CODE_EX(rc)
#define SAMTRACE_DS(a)
#define SAMTRACE_RETURN_CODE_DS(rc)

#endif

// Define the Trace Table structure for tracing on a file by file basis.

typedef struct {
    LPSTR FileName;
    ULONGLONG TraceBit;
} TRACE_TABLE_ENTRY;

//======================SAM SERVER DUMPING ROUTINES===========================

#if (SAMP_DUMP == 1)

#define SampDumpNtSetValueKey(a, b, c, d, e)        SamIDebugFileLineOutput(__FILE__, __LINE__,SAM_TRACE_ALL); SamIDumpNtSetValueKey(a, b, c, d, e)
#define SampDumpRtlpNtSetValueKey(a, b, c)          SamIDebugFileLineOutput(__FILE__, __LINE__,SAM_TRACE_ALL); SamIDumpRtlpNtSetValueKey(a, b, c)
#define SampDumpNtEnumerateKey(a, b, c, d, e)       SamIDebugFileLineOutput(__FILE__, __LINE__,SAM_TRACE_ALL); SamIDumpNtEnumerateKey(a, b, c, d, e)
#define SampDumpRtlpNtEnumerateSubKey(a, b, c)      SamIDebugFileLineOutput(__FILE__, __LINE__,SAM_TRACE_ALL); SamIDumpRtlpNtEnumerateSubKey(a, b, c)
#define SampDumpNtOpenKey(a, b, c)                  SamIDebugFileLineOutput(__FILE__, __LINE__,SAM_TRACE_ALL); SamIDumpNtOpenKey(a, b, c);
#define SampDumpNtQueryKey(a, b, c, d)              SamIDebugFileLineOutput(__FILE__, __LINE__,SAM_TRACE_ALL); SamIDumpNtQueryKey(a, b, c, d)
#define SampDumpNtQueryValueKey(a, b, c, d, e)      SamIDebugFileLineOutput(__FILE__, __LINE__,SAM_TRACE_ALL); SamIDumpNtQueryValueKey(a, b, c, d, e)
#define SampDumpRtlpNtQueryValueKey(a, b, c, d)     SamIDebugFileLineOutput(__FILE__, __LINE__,SAM_TRACE_ALL); SamIDumpRtlpNtQueryValueKey(a, b, c, d)
#define SampDumpRXact(a, b, c, d, e, f, g, h, i)    SamIDebugFileLineOutput(__FILE__, __LINE__,SAM_TRACE_ALL); SamIDumpRXact(a, b, c, d, e, f, g, h, i)

#else

#define SampDumpNtSetValueKey(a, b, c, d, e)
#define SampDumpRtlpNtSetValueKey(a, b, c)
#define SampDumpNtEnumerateKey(a, b, c, d, e)
#define SampDumpRtlpNtEnumerateSubKey(a, b, c)
#define SampDumpNtOpenKey(a, b, c)
#define SampDumpNtQueryKey(a, b, c, d)
#define SampDumpNtQueryValueKey(a, b, c, d, e)
#define SampDumpRtlpNtQueryValueKey(a, b, c, d)
#define SampDumpRXact(a, b, c, d, e, f, g, h, i)

#endif

// These debugging flags are used in the dumping routines to help identify
// what kind of SAM object is being dumped.

#define FIXED_LENGTH_SERVER_FLAG                 0
#define FIXED_LENGTH_DOMAIN_FLAG                 1
#define FIXED_LENGTH_ALIAS_FLAG                  2
#define FIXED_LENGTH_GROUP_FLAG                  3
#define FIXED_LENGTH_USER_FLAG                   4
#define VARIABLE_LENGTH_ATTRIBUTE_FLAG           5
#define FixedBufferAddressFlag                   6

//===============SAM SERVER PRIVATE DEBUG ROUTINE DECLARATIONS================

VOID
SamIDebugOutput(
    IN LPSTR FileName,
    IN LPSTR DebugMessage,
    IN ULONG TraceLevel
    );

VOID
SamIDebugFileLineOutput(
    IN LPSTR FileName,
    IN ULONG LineNumber,
    IN ULONG TraceLevel
    );

VOID
SamIDebugOutputReturnCode(
    IN  LPSTR   FileName,
    IN  ULONG   ReturnCode,
    IN  ULONG   TraceLevel
    );

VOID
SamIDumpNtSetValueKey(
    IN PUNICODE_STRING ValueName,
    IN ULONG TitleIndex,
    IN ULONG Type,
    IN PVOID Data,
    IN ULONG DataSize
    );

VOID
SamIDumpRtlpNtSetValueKey(
    IN ULONG Type,
    IN PVOID Data,
    IN ULONG DataSize
    );

VOID
SamIDumpNtEnumerateKey(
    IN ULONG Index,
    IN KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass,
    IN PVOID KeyValueInformation,
    IN ULONG Length,
    IN PULONG ResultLength
    );

VOID
SamIDumpRtlpNtEnumerateSubKey(
    IN PUNICODE_STRING SubKeyName,
    IN PSAM_ENUMERATE_HANDLE Index,
    IN LARGE_INTEGER LastWriteTime
    );

VOID
SamIDumpNtOpenKey(
    IN ACCESS_MASK DesiredAccess,
    IN POBJECT_ATTRIBUTES ObjectAttributes,
    IN ULONG Options
    );

VOID
SamIDumpNtQueryKey(
    IN KEY_INFORMATION_CLASS KeyInformationClass,
    IN PVOID KeyInformation,
    IN ULONG Length,
    IN PULONG ResultLength
    );

VOID
SamIDumpNtQueryValueKey(
    IN PUNICODE_STRING ValueName,
    IN KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass,
    IN PVOID KeyValueInformation,
    IN ULONG Length,
    IN PULONG ResultLength
    );

VOID
SamIDumpRtlpNtQueryValueKey(
    IN PULONG KeyValueType,
    IN PVOID KeyValue,
    IN PULONG KeyValueLength,
    IN PLARGE_INTEGER LastWriteTime
    );

VOID
SamIDumpRXact(
    IN PRTL_RXACT_CONTEXT TransactionContext,
    IN RTL_RXACT_OPERATION Operation,
    IN PUNICODE_STRING SubKeyName,
    IN HANDLE KeyHandle,
    IN PUNICODE_STRING AttributeName,
    IN ULONG RegistryKeyType,
    IN PVOID NewValue,
    IN ULONG NewValueLength,
    IN ULONG NewValueType
    );
VOID
SampDumpBinaryData(
    PBYTE   pData,
    DWORD   cbData
    );

#endif  //_DBGUTILP_
