//+-------------------------------------------------------------------------
//
//  Microsoft Windows
//
//  Copyright (C) Microsoft Corporation, 1996 - 1999
//
//  File:       jetbak.idl
//
//--------------------------------------------------------------------------

[ uuid (ecec0d70-a603-11d0-96b1-00a0c91ece30),
  version(1.0),
  pointer_default(unique)]
interface JetBack
{
import "imports.idl";

typedef [context_handle] void *CXH;

typedef [string] WCHAR * WSZ;
typedef long C;
typedef long I;


#include <options.h>



HRESULT HrRBackupPrepare([in] handle_t hBinding,
                      [in] unsigned long grbit,
                      [in] unsigned long btBackupType,
                      [in] WSZ szBackupAnnotation,
                      [in] DWORD dwClientIdentifier,
                      [out] CXH *pcxh);

HRESULT HrRBackupEnd([in, out] CXH *pcxh);

HRESULT HrRBackupGetAttachmentInformation([in] CXH cxh,
                                 [out, size_is(,*pcbSize)] CHAR **pszAttachmentInformation,
                                 [out] C *pcbSize );

HRESULT HrRBackupOpenFile( [in] CXH cxh,
                         [in] WSZ szAttachment,
                         [in] C cbReadHintSize,
                         [in, out] BOOLEAN *pfUseSockets,
                         [in] C cProtocols,
                         [in, size_is(cProtocols)] struct sockaddr sockaddrSockets[],
                         [in] BOOLEAN *pfUseSharedMemory,
                         [out] unsigned hyper *liLength);

HRESULT HrRBackupRead( [in] CXH cxh,
                    [ref, out, size_is(cbBuffer)]  char *pvBuffer,
                    [in]  C cbBuffer,
                    [out] C *pcbRead);

HRESULT HrRBackupClose( [in] CXH cxh);

HRESULT HrRBackupGetBackupLogs([in] CXH cxh,
                            [out, size_is(,*pcbSize)] char ** pszBackupLogs,
                            [out] C *pcbSize );

HRESULT HrRBackupTruncateLogs([in] CXH cxh);

HRESULT HrRBackupPing([in] handle_t hBinding);

}


[ uuid (16e0cf3a-a604-11d0-96b1-00a0c91ece30),
  version(1.0),
  pointer_default(unique)]
interface JetRest
{
import "imports.idl";

#include <options.h>

HRESULT HrRIsNTDSOnline([in] handle_t hBinding,
                    [out] BOOLEAN *pfDSOnline);

HRESULT HrRRestorePrepare([in] handle_t hBinding,
              [in] WSZ szDatabaseName,
              [out] CXH *pcxh
              );

HRESULT HrRRestore([in] CXH cxh,
                    [in, unique] WSZ szCheckpointFilePath,
                    [in, unique] WSZ szLogPath,
                    [in, size_is(crstmap)] EDB_RSTMAPW rgrstmap[*],
                    [in] C crstmap,
                    [in, unique] WSZ szBackupLogPath,
                    [in] ULONG genLow,
                    [in] ULONG genHigh,
                    [in, out] BOOLEAN *pfRecoverJetDatabase);

HRESULT HrRRestoreRegister([in] CXH cxh,
                    [in, unique] WSZ szCheckpointFilePath,
                    [in, unique] WSZ szLogPath,
                    [in, size_is(crstmap)] EDB_RSTMAPW rgrstmap[*],
                    [in] C crstmap,
                    [in, unique] WSZ szBackupLogPath,
                    [in] ULONG genLow,
                    [in] ULONG genHigh);

HRESULT HrRRestoreRegisterComplete([in] CXH cxh,
                    [in] HRESULT hrRestore );

HRESULT HrRRestoreGetDatabaseLocations([in] CXH cxh,
                                 [out, size_is(,*pcbSize)] char  **pszDatabaseLocations,
                                 [out] C *pcbSize );

HRESULT HrRRestoreEnd([in, out] CXH *pcxh
              );

HRESULT HrRRestoreSetCurrentLogNumber([in] handle_t hBinding,
                                 [in] WSZ wszAnnotation,
                                 [in] DWORD dwNewCurrentLog
                                 );

HRESULT HrRRestoreCheckLogsForBackup([in] handle_t hBinding,
                                 [in] WSZ wszAnnotation
                                 );


}

