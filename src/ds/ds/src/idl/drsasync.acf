//
// NOTE: If you modify the file you will likely also need to modify its sister
// file drs.acf.  These files can be reunified once MIDL bug 55502 is fixed.
//

[explicit_handle, strict_context_handle] interface drsuapi_pickle {

// Build encoding routines for those structures used by asynchronous (e.g.,
// mail) replication.
typedef [encode, decode] DRS_MSG_GETCHGREQ_V4;
typedef [encode, decode] DRS_MSG_GETCHGREQ_V7;
typedef [encode, decode] DRS_MSG_GETCHGREPLY_V1;
typedef [encode, decode] DRS_MSG_GETCHGREPLY_V3;
typedef [encode, decode] DRS_MSG_GETCHGREPLY_V5;
typedef [encode, decode] DRS_MSG_GETCHGREPLY_V6;

// Build encoding routines for additional structures we don't actually need to
// encode or decode but for which we'd like to be able to calculate the size of
// the corresponding marshalled data buffer.
typedef [encode] REPLENTINFLIST2;
typedef [encode] REPLVALINF2;
}


[explicit_handle, strict_context_handle] interface drsuapi {

// Do not serialize RPC calls from the same client using the same DRS context
// handle.  This allows us to concurrently process a GetNCChanges() request
// and a change notification from the same DC, for example.  (Unbind() is still
// serialized, however.)
typedef [context_handle_noserialize] DRS_HANDLE;

// On the server-side, the returned pointer references a global structure, not
// allocated by MIDL_user_allocate.
typedef [allocate(dont_free)] PDRS_EXTENSIONS;

// Notify routines are called on the server after marshalling the outbound
// parameters from the corresponding interface function and after the associated
// memory has been freed.  We typically take this opportunity to free our thread
// state and any other remaining thread-allocated memory.
[notify] IDL_DRSBind();
[notify] IDL_DRSUnbind();
[notify] IDL_DRSReplicaSync();
[async] IDL_DRSGetNCChanges(); // should be [notify, async] -- MIDL bug 455842
[notify] IDL_DRSUpdateRefs();
[notify] IDL_DRSReplicaAdd();
[notify] IDL_DRSReplicaDel();
[notify] IDL_DRSReplicaModify();
[notify] IDL_DRSVerifyNames();
[notify] IDL_DRSGetMemberships();
[notify] IDL_DRSInterDomainMove();
[notify] IDL_DRSGetNT4ChangeLog();
[notify] IDL_DRSCrackNames();
[notify] IDL_DRSWriteSPN();
[notify] IDL_DRSRemoveDsServer();
[notify] IDL_DRSRemoveDsDomain();
[notify] IDL_DRSDomainControllerInfo();
[notify] IDL_DRSAddEntry();
[notify] IDL_DRSExecuteKCC();
[notify] IDL_DRSGetReplInfo();
[notify] IDL_DRSAddSidHistory();
[notify] IDL_DRSGetMemberships2();
[notify] IDL_DRSReplicaVerifyObjects();
[notify] IDL_DRSGetObjectExistence();
}

[explicit_handle, strict_context_handle] interface dsaop {
[async] IDL_DSAExecuteScript();
[async] IDL_DSAPrepareScript();
}



