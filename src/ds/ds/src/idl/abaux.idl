//+-------------------------------------------------------------------------
//
//  Microsoft Windows
//
//  Copyright (C) Microsoft Corporation, 1992 - 1999
//
//  File:       abaux.idl
//
//--------------------------------------------------------------------------
//
//  Contents: These data structures are used by both nspi.idl and msds.idl.
//    Changing these structures affects both these interfaces.  Adding new 
//    data types should be done in the individual .idl files if the data is 
//    only used by one interface.
//
//--------------------------------------------------------------------------


[ uuid(708710A6-C6A9-CF11-8A2D-00AA004A3490),
  version(0.1), pointer_default(unique) ]

interface ABTypes
{

import "wtypes.idl";

/*************************************************\
*  Simple types not declared in wtypes.idl
\*************************************************/

typedef LONG * LPLONG;

#pragma warning (disable: 4142)
typedef [string] char  **  LPPSTR;
typedef [string] wchar_t  **    LPPWSTR;
#pragma warning (default: 4142)

/* Byte-order-independent version of GUID (world-unique identifier) */
typedef struct
{
     BYTE ab[16];
} MUID_r,  * LPMUID_r;

#define PROP_TAG(ulPropType,ulPropID)   ((((ULONG)(ulPropID))<<16)|((ULONG)(ulPropType)))
#define PROP_ID(ulPropTag)		(((ULONG)(ulPropTag))>>16)

#define RES_AND			((ULONG) 0x00000000)
#define RES_OR			((ULONG) 0x00000001)
#define RES_NOT			((ULONG) 0x00000002)
#define RES_CONTENT		((ULONG) 0x00000003)
#define RES_PROPERTY		((ULONG) 0x00000004)
#define RES_COMPAREPROPS	((ULONG) 0x00000005)
#define RES_BITMASK		((ULONG) 0x00000006)
#define RES_SIZE		((ULONG) 0x00000007)
#define RES_EXIST		((ULONG) 0x00000008)
#define RES_SUBRESTRICTION	((ULONG) 0x00000009)
#define RES_COMMENT		((ULONG) 0x0000000A)

/********************************************
/***        Property Interface
/********************************************
/* --------------- */
/* Data Structures */
/* --------------- */

/* Property Tag Array */


// This definition of a PropTagArray allocates an extra DWORD in
// the array of PropTags.  This is totally unnecessary for dealing
// with proptag arrays.  However, in its dual use as a DNT array
// for a restriction, the extra DWORD is used as the EndOfList marker,
// and should always have a 0 in it on the client.  It's value is
// uninteresting on the server, therefore, we use the count_is
// to only pass the values we're interested in.

#pragma warning (disable: 4200)
typedef struct _SPropTagArray_r
{
	ULONG	cValues;							
  [size_is(cValues + 1),length_is(cValues)]   ULONG   aulPropTag[];
} SPropTagArray_r,  * LPSPropTagArray_r;
#pragma warning (default: 4200)

typedef LPSPropTagArray_r *LPLPSPropTagArray_r;

/* -------------- */
/* Property Value */
/* -------------- */

typedef struct _SBinary_r
{
	ULONG		cb;
  [size_is(cb)]   BYTE *   lpb;
} SBinary_r, *LPSBinary_r, **LPLPSBinary_r;

typedef struct _SShortArray_r
{
	ULONG		cValues;
  [size_is(cValues)]   short int    *lpi;
} SShortArray_r;


typedef struct _SLongArray_r
{
	ULONG		cValues;
  [size_is(cValues)]   LONG         *lpl;
} SLongArray_r;

typedef struct _SLPSTRArray_r
{
	ULONG		cValues;
  [size_is(cValues)] LPPSTR        lppszA;
} SLPSTRArray_r;

typedef struct _SBinaryArray_r
{
	ULONG		cValues;
  [size_is(cValues)]   SBinary_r      *lpbin;
} SBinaryArray_r;

typedef struct _SGuidArray_r
{
	ULONG		cValues;
  [size_is(cValues)]   LPMUID_r       *lpguid;
} SGuidArray_r;

typedef struct _SWStringArray_r
{
	ULONG		cValues;
  [size_is(cValues)] LPPWSTR       lppszW;
} SWStringArray_r;

#ifndef _FILETIME_
#define _FILETIME_
typedef struct  _FILETIME_r
{
    DWORD dwLowDateTime;
    DWORD dwHighDateTime;
} FILETIME_r;
#endif

typedef struct _SDateTimeArray_r
{
	ULONG		cValues;
  [size_is(cValues)]   FILETIME_r     *lpft;
} SDateTimeArray_r;

typedef struct _SPropValue_r *LPSPropValue_r;

typedef struct _SRow_r
{
    ULONG	ulAdrEntryPad;
    ULONG	cValues;
    [size_is(cValues)] LPSPropValue_r lpProps;
} SRow_r, * LPSRow_r, ** LPLPSRow_r;

typedef struct _SRowSet_r
{
    ULONG	cRows;
    [size_is(cRows)] SRow_r aRow[];
} SRowSet_r, * LPSRowSet_r, ** LPLPSRowSet_r;


// Data types used for restrictions
typedef struct  _SRestriction_r SRestriction_r, * LPSRestriction_r;

// Note the collaps of And and Or restrictions to a single type
typedef struct _SAndOrRestriction_r
{
    ULONG	cRes;
    [size_is(cRes)] LPSRestriction_r lpRes;
} SAndRestriction_r, SOrRestriction_r;

typedef struct _SNotRestriction_r
{
    LPSRestriction_r	lpRes;
} SNotRestriction_r;

typedef struct _SContentRestriction_r
{
    ULONG		ulFuzzyLevel;
    ULONG		ulPropTag;
    LPSPropValue_r	lpProp;
} SContentRestriction_r;

typedef struct _SBitMaskRestriction_r
{
    ULONG	relBMR;
    ULONG	ulPropTag;
    ULONG	ulMask;
} SBitMaskRestriction_r;

typedef struct _SPropertyRestriction_r
{
    ULONG		relop;
    ULONG		ulPropTag;
    LPSPropValue_r	lpProp;
} SPropertyRestriction_r;

typedef struct _SComparePropsRestriction_r
{
    ULONG		relop;
    ULONG		ulPropTag1;
    ULONG		ulPropTag2;
} SComparePropsRestriction_r;

typedef struct _SSubRestriction_r
{
    ULONG		ulSubObject;
    LPSRestriction_r	lpRes;
} SSubRestriction_r;

typedef struct _SSizeRestriction_r
{
    ULONG		relop;
    ULONG		ulPropTag;
    ULONG		cb;
} SSizeRestriction_r;

typedef struct _SExistRestriction_r
{
    ULONG		ulReserved1;
    ULONG		ulPropTag;
    ULONG		ulReserved2;
} SExistRestriction_r;

typedef [switch_type(long)] union _RES_UNION_r
{
    [case RES_AND ] SAndRestriction_r			resAnd;
    [case RES_OR ]  SOrRestriction_r			resOr;
    [case RES_NOT ] SNotRestriction_r			resNot;
    [case RES_CONTENT ] SContentRestriction_r		resContent;
    [case RES_PROPERTY ] SPropertyRestriction_r		resProperty;
    [case RES_COMPAREPROPS ] SComparePropsRestriction_r	resCompareProps;
    [case RES_BITMASK ] SBitMaskRestriction_r		resBitMask;
    [case RES_SUBRESTRICTION ] SSubRestriction_r	resSubRestriction;
    [case RES_SIZE ] SSizeRestriction_r			resSize;
    [case RES_EXIST ] SExistRestriction_r		resExist;
} RES_UNION_r;

typedef struct _SRestriction_r
{
    ULONG		rt;
    [switch_is((long)rt)] RES_UNION_r res;
} **LPLPSRestriction_r;
						
typedef SBinaryArray_r ENTRYLIST_r, *LPENTRYLIST_r;

/*
 * NOTE: this is not quite mapi.  Mapi likes a union for the value,
 * LONG lID and LPWSTR lpwstrName, where ulKind switches.  However,
 * we don't support anything but the lID.
 */
typedef struct _MAPINAMEID_r
{
    LPMUID_r lpguid;
    ULONG    ulKind;
    LONG     lID;
} MAPINAMEID_r, * LPMAPINAMEID_r, **LPLPMAPINAMEID_r;

// These are not Mapi structures
typedef struct _NameIDSet_r
{
    ULONG	cNames;
    [size_is(cNames)] MAPINAMEID_r aNames[];
} NameIDSet_r, * LPNameIDSet_r, ** LPLPNameIDSet_r;

typedef struct _StringsArray
{
	ULONG      Count;
	[size_is(Count)] LPSTR  Strings[];
} StringsArray_r, *LPStringsArray_r;


typedef struct _WStringsArray
{
	ULONG      Count;
	[size_is(Count)] LPWSTR  Strings[];
} WStringsArray_r, *LPWStringsArray_r;

#define MAX_DN_LEN  400     // max Distinguished Name length

/****************************************************************************/
/**                                                                        **/
/**                    The Status Block Structure                          **/
/**                                                                        **/
/****************************************************************************/

typedef struct _STAT
{
    ULONG   hIndex;           /* handle to the current index */
    ULONG   ContainerID;      /* Extra info to differentiate subindices */
    ULONG   CurrentRec;       /* RecNum of current list position */
    LONG    Delta;            /* + or - from spec'd current position */
    ULONG   NumPos;           /* Numeric position of this record in this index */
    ULONG   TotalRecs;        /* Total number of recs in this index */
    ULONG   CodePage;         /* Client code page */
    ULONG   TemplateLocale;   /* Local identifier of client templates*/
    ULONG   SortLocale;       /* Local identifier of client sort order*/
} STAT, *PSTAT;



}
