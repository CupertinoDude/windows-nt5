[ strict_context_handle ]
interface nspi
{
typedef [allocate(all_nodes)] LPSTR;
typedef [allocate(all_nodes)] LPSPropTagArray_r;
typedef [allocate(all_nodes)] LPSBinary_r;
typedef [allocate(all_nodes)] LPSPropValue_r;
typedef [allocate(all_nodes)] LPSRestriction_r;
typedef [allocate(all_nodes)] LPStringsArray_r;
typedef [allocate(all_nodes)] LPMAPINAMEID_r;

[notify] NspiBind(hRpc,	dwFlags, pStat, pServerGuid, contextHandle);

[notify] NspiUnbind(contextHandle, dwFlags);

[notify] NspiUpdateStat(hRpc, dwFlags, pStat, plDelta);

[notify] NspiQueryRows( hRpc, dwFlags, pStat, dwEphsCount, lpdwEphs, Count, pPropTags, ppRows );

[notify] NspiSeekEntries( hRpc, dwFlags, pStat, pTarget, Restriction );

[notify] NspiGetMatches( hRpc, dwFlags, pStat, pInDNTList, ulInterfaceOptions, Filter, ulRequested, ppDNTList, pPropTags, ppRows );

[notify] NspiResortRestriction( hRpc, dwFlags, pStat, pInDNTList,ppOutDNTList);

[notify] NspiDNToEph( hRpc, dwFlags, pNames, ppEphs);

[notify] NspiGetPropList( hRpc, dwFlags, dwEph, CodePage, ppPropTags);

[notify] NspiGetProps( hRpc, dwFlags, pStat, pPropTags, ppRow);

[notify] NspiCompareDNTs( hRpc, dwFlags, pStat, DNT1, DNT2, plResult);

[notify] NspiModProps( hRpc, dwFlags, pStat, pPropTags, pRow);

[notify] NspiGetHierarchyInfo( hRpc, dwFlags, pStat, lpVersion, HierTabRows);

[notify] NspiGetTemplateInfo( hRpc, dwFlags, ulType, pDN, dwCodePage, dwLocaleID, ppData);

[notify] NspiModLinkAtt( hRpc, dwFlags, ulPropTag, dwEph, lpEntryIds);

[notify] NspiDeleteEntries( hRpc, dwFlags, dwEph, lpEntryIds);

[notify] NspiQueryColumns( hRpc, dwFlags, ulFlags, ppColumns);


[notify] NspiGetNamesFromIDs(hRpc, dwFlags, lpguid, ppPropTags, ppReturnedPropTags,ppNames);

[notify] NspiGetIDsFromNames(hRpc, dwFlags, ulFlags, cPropNames, pNames, ppPropTags);

[notify] NspiResolveNames(hRpc, dwFlags, pStat, pPropTags, paStr, ppFlags, ppRows);

[notify] NspiResolveNamesW(hRpc, dwFlags, pStat, pPropTags, paWStr, ppFlags, ppRows);

}
