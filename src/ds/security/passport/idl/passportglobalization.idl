// PassportGlobalization.idl : IDL source for PassportGlobalization.dll
//

// This file will be processed by the MIDL tool to
// produce the type library (PassportGlobalization.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";
[
	object,
	uuid(DAA1CB6A-7224-4760-843B-A5D1981CD49B),
	dual,
	helpstring("IResStringSrv Interface"),
	pointer_default(unique)
]
    interface IResStringSrv : IDispatch
    {
            // ASP uses
            [id(1), helpstring("method GetString with String ID")]
            HRESULT GetString([in] LCID lc, [in] VARIANT *pstrNames, [out, retval] VARIANT *pstrVal);
            // After replacing the resource Dll call
            [id(2), helpstring("method FlushStringCache")]
            HRESULT FlushStringCache();
            // Dynamically feed resource IDs and Names
            [id(3), helpstring("method InitStringSrv")]
            HRESULT InitStringSrv([in] BSTR bstrWebroot, [in] BSTR bstrDll, [in] BSTR bstrIDFile);
            // ISAPI will call this method
            [id(4), helpstring("method GetString with numeric ID. returns const string")]
            HRESULT GetStringForID([in] LCID lc, [in] ULONG nID, [out, retval] WCHAR **ppcszVal);
            [id(5), helpstring("method SetDebugMode. 0-nodbg,1-ignore errors,2-display ids only")]
            HRESULT SetDebugMode([in] ULONG mode);
    };
[
	object,
	uuid(873F81FC-EA81-470E-9671-FA179A972070),
	dual,
	helpstring("ILCIDInfo Interface"),
	pointer_default(unique)
]
	interface ILCIDInfo : IDispatch
	{
		[id(1), helpstring("method Load")] HRESULT Load([in] BSTR bstrPath);
		[id(2), helpstring("method PrepareReload")] HRESULT PrepareReload();
		[id(3), helpstring("method CommitReload")] HRESULT CommitReload();
		[id(4), helpstring("method MapLCID")] HRESULT MapLCID([in] long lLCID, [out, retval] long* pLCID);
		[id(5), helpstring("method MapTxtLCID")] HRESULT MapTxtLCID([in] BSTR bstrLCID, [out, retval] long* pLCID);
		[id(6), helpstring("method Codepage")] HRESULT Codepage([in] long lLCID, [out, retval] long* pRes);
		[id(7), helpstring("method DateFormat")] HRESULT DateFormat([in] long lLCID, [out, retval] long* pRes);
		[id(8), helpstring("method AddressFormat")] HRESULT AddressFormat([in] long lLCID, [out, retval] long* pRes);
		[id(9), helpstring("method NameFormat")] HRESULT NameFormat([in] long lLCID, [out, retval] long* pRes);
		[id(10), helpstring("method TextLCID")] HRESULT TextLCID([in] long lLCID, [out, retval] BSTR* pBstrOut);
		[id(11), helpstring("method Charset")] HRESULT Charset([in] long lLCID, [out, retval] BSTR* pBstrOut);
		[id(12), helpstring("method CurrencySymb")] HRESULT CurrencySymb([in] long lLCID, [out, retval] BSTR* pBstrOut);
		[id(13), helpstring("method DecimalSep")] HRESULT DecimalSep([in] long lLCID, [out, retval] BSTR* pBstrOut);
		[id(14), helpstring("method ThousandsSep")] HRESULT ThousandsSep([in] long lLCID, [out, retval] BSTR* pBstrOut);
		[id(15), helpstring("method IsFarEast")] HRESULT IsFarEast([in] long lLCID, [out, retval] long* pRes);
		[id(16), helpstring("method RightToLeft")] HRESULT RightToLeft([in] long lLCID, [out, retval] long* pRes);
		[id(17), helpstring("method TxtToNumLCID")] HRESULT TxtToNumLCID([in] BSTR bstrLCID, [out, retval] long* pLCID);
		[id(18), helpstring("method SymbolPosition")] HRESULT SymbolPosition([in] long lLCID, [out, retval] long* pRes);
		[id(19), helpstring("method KidsPP")] HRESULT KidsPP([in] long lLCID, [out, retval] long* pRes);
		[id(20), helpstring("method KidsAge")] HRESULT KidsAge([in] long lLCID, [out, retval] long* pRes);
		[id(21), helpstring("method PrefCountry")] HRESULT PrefCountry([in] long lLCID, [out, retval] BSTR* pBstrOut);

	};
[
	object,
	uuid(50DB8971-68E7-4914-9903-F9B473936A6B),
	dual,
	helpstring("IDictionary Interface"),
	pointer_default(unique)
]
	interface IDictionary : IDispatch
	{
		[id(1), helpstring("method CountryCount")] HRESULT CountryCount([out, retval] long* pCount);
		[id(2), helpstring("method GetCountryCode")] HRESULT GetCountryCode([in] long lIndex, [out, retval] BSTR* pCode);
		[id(3), helpstring("method GetCountryName")] HRESULT GetCountryName([in] BSTR bstrCCode, [out, retval] BSTR* pName);
		[id(4), helpstring("method GetRegionLabel")] HRESULT GetRegionLabel([in] BSTR bstrCCode, [out, retval] BSTR* pLabel);
		[id(5), helpstring("method GetPostalLabel")] HRESULT GetPostalLabel([in] BSTR bstrCCode, [out, retval] BSTR* pLabel);
		[id(6), helpstring("method RegionCount")] HRESULT RegionCount([in] BSTR bstrCCode, [out, retval] long* pCount);
		[id(7), helpstring("method GetRegionGeoID")] HRESULT GetRegionGeoID([in]  BSTR bstrCCode, [in] long lIndex, [out, retval] long* pGeoID);
		[id(8), helpstring("method GetRegionName")] HRESULT GetRegionName([in] BSTR bstrCCode, [in] long lGeoID, [out, retval] BSTR* pName);
		[id(9), helpstring("method PostalPrefixCount")] HRESULT PostalPrefixCount([in] BSTR bstrCCode, [in] long lGeoID, [out, retval] long* pCount);
		[id(10), helpstring("method GetPostalPrefix")] HRESULT GetPostalPrefix([in] BSTR bstrCCode, [in] long lGeoID, [in] long lIndex, [out, retval] BSTR* pPrefix);
		[id(11), helpstring("method Load")] HRESULT Load([in] BSTR bstrPath, [in] long lLCID, [in] long lCCaller);
		[id(12), helpstring("method GetLocaleName")] HRESULT GetLocaleName([in] long lLCID, [out, retval] BSTR* pName);
		[id(13), helpstring("method GetLocaleCount")] HRESULT GetLocaleCount([out, retval] long* pCount);
		[id(14), helpstring("method GetLocaleID")] HRESULT GetLocaleID([in] long lIndex, [out, retval] long* pLCID);
		[id(15), helpstring("method RegionExist")] HRESULT RegionExist([in] BSTR bstrCCode, [in] long lGeoID, [out, retval] VARIANT_BOOL* pBool);
		[id(16), helpstring("method CountryExist")] HRESULT CountryExist([in] BSTR bstrCCode, [out, retval] VARIANT_BOOL* pBool);
		[id(17), helpstring("method PostalCodeValid")] HRESULT PostalCodeValid([in] BSTR bstrCCode, [in] long lGeoID, BSTR bstrPCode, [out, retval] VARIANT_BOOL* pBool);
		[id(18), helpstring("method LocaleExist")] HRESULT LocaleExist([in] long lLCID, [out, retval] VARIANT_BOOL* pBool);

		// TimeZone Support
		// JeffStei: 03/09/01
		[id(19), helpstring("method TimezoneCount")] HRESULT TimezoneCount([in] BSTR bstrCCode, [out, retval] long* out_pCount);
		[id(20), helpstring("method GetTimezoneID")] HRESULT GetTimezoneID([in] BSTR bstrCCode, [in] long in_index, [out, retval] long* out_tzID);
		[id(21), helpstring("method GetTimezoneName")] HRESULT GetTimezoneName([in] BSTR bstrCCode, [in] long in_tzID, [out, retval] BSTR* pbstrName);
		[id(22), helpstring("method GetTimezoneDescription")] HRESULT GetTimezoneDescription([in] BSTR bstrCCode, [in] long ltzID, [out, retval] BSTR* pbstrDesc);
	};
[
	object,
	uuid(E5C42D38-CFC7-4AEd-91D1-B4DC85F9D257),
	helpstring("IDictionaryEx Interface"),
	pointer_default(unique)
]
	interface IDictionaryEx : IUnknown
	{
		[helpstring("method CountryCount")] HRESULT CountryCount([out] long* pCount);
		[helpstring("method GetLocaleCount")] HRESULT GetLocaleCount([out] long* pCount);
		[helpstring("method GetLocaleID")] HRESULT GetLocaleID([in] long lIndex, [out] long* pLCID);


		[helpstring("method GetCountryCode")] HRESULT GetCountryCode([in] long lIndex, [in, out] long* pBytes, [out, size_is(*pBytes)] LPWSTR lpszwCCode);
		[helpstring("method GetCountryName")] HRESULT GetCountryName([in] LPCWSTR lpszwCCode, [in, out] long* pBytes, [out, size_is(*pBytes)] LPWSTR lpszwName);
		[helpstring("method GetRegionLabel")] HRESULT GetRegionLabel([in] LPCWSTR lpszwCCode, [in, out] long* pBytes, [out, size_is(*pBytes)] LPWSTR lpszwLabel);
		[helpstring("method GetPostalLabel")] HRESULT GetPostalLabel([in] LPCWSTR lpszwCCode, [in, out] long* pBytes, [out, size_is(*pBytes)] LPWSTR lpszwLabel);
		[helpstring("method RegionCount")] HRESULT RegionCount([in] LPCWSTR lpszwCCode, [out] long* pCount);
		[helpstring("method GetRegionGeoID")] HRESULT GetRegionGeoID([in]  LPCWSTR lpszwCCode, [in] long lIndex, [out] long* pGeoID);
		[helpstring("method GetRegionName")] HRESULT GetRegionName([in] LPCWSTR lpszwCCode, [in] long lGeoID, [in, out] long* pBytes, [out, size_is(*pBytes)] LPWSTR lpszwName);
		[helpstring("method PostalPrefixCount")] HRESULT PostalPrefixCount([in] LPCWSTR lpszwCCode, [in] long lGeoID, [out] long* pCount);
		[helpstring("method GetPostalPrefix")] HRESULT GetPostalPrefix([in] LPCWSTR lpszwCCode, [in] long lGeoID, [in] long lIndex, [in, out] long* pBytes, [out, size_is(*pBytes)] LPWSTR lpszwPrefix);
		[helpstring("method GetLocaleName")] HRESULT GetLocaleName([in] long lLCID, [in, out] long* pBytes, [out, size_is(*pBytes)] LPWSTR lpszwName);
		[helpstring("method RegionExist")] HRESULT RegionExist([in] LPCWSTR lpszwCCode, [in] long lGeoID, [out] BOOL* pBool);
		[helpstring("method CountryExist")] HRESULT CountryExist([in] LPCWSTR lpszwCCode, [out] BOOL* pBool);
		[helpstring("method PostalCodeValid")] HRESULT PostalCodeValid([in] LPCWSTR lpszwCCode, [in] long lGeoID, LPCWSTR lpszwPCode, [out] BOOL* pBool);
		[helpstring("method LocaleExist")] HRESULT LocaleExist([in] long lLCID, [out] BOOL* pBool);
		
		// TimeZone Support
		// JeffStei: 03/05/01
		[helpstring("method TimezoneCount")] HRESULT TimezoneCount([in] LPCWSTR in_lpszwCCode, [out] long* out_pCount);
		[helpstring("method GetTimezoneID")] HRESULT GetTimezoneID([in] LPCWSTR in_lpszwCCode, [in] long in_index, [out, retval] long* out_tzID);
		[helpstring("method GetTimezoneName")] HRESULT GetTimezoneName([in] LPCWSTR lpszwCCode, [in] long in_tzID, [in, out] long* io_pBytes, [out, size_is(*io_pBytes)] LPWSTR out_lpszwName);
		[helpstring("method GetTimezoneDescription")] HRESULT GetTimezoneDescription([in] LPCWSTR lpszwCCode, [in] long ltzID, [in, out] long* io_pBytes, [out, size_is(*io_pBytes)] LPWSTR out_lpszwDescription);
	}	
[
	object,
	uuid(C95B78C2-1F20-40A8-BE54-F7CF874B8D6D),
	dual,
	helpstring("ILibrary Interface"),
	pointer_default(unique)
]
	interface ILibrary : IDispatch
	{
		[id(1), helpstring("method SetPath")] HRESULT SetPath([in] BSTR bstrPath, [in] long lCleanUnicode);
		[id(2), helpstring("method GetDictionary")] HRESULT GetDictionary([in] long lLCID, [out, retval] IDispatch** ppDictionary);
		[id(3), helpstring("method LoadDictionary")] HRESULT LoadDictionary([in] long lLCID);
		[id(4), helpstring("method PrepareReload")] HRESULT PrepareReload();
		[id(5), helpstring("method CommitReload")] HRESULT CommitReload();
	};

[
    uuid(699D88F3-6542-424A-8AD1-19106591EC54),
    version(1.0),
    helpstring("PassportGlobalization 1.0 Type Library")
]
library PassportGlobalizationLib
{
    importlib("stdole32.tlb");
    importlib("stdole2.tlb");

    [
            uuid(651E5687-425A-473F-A9B2-061BF33AB765),
            helpstring("ResStringSrv Class")
    ]
    coclass ResStringSrv
    {
            [default] interface IResStringSrv;
    };
	[
		uuid(8F03B6F8-A187-4898-8F94-279DB73D9590),
		helpstring("LCIDInfo Class")
	]
	coclass LCIDInfo
	{
		[default] interface ILCIDInfo;
	};
	[
		uuid(150191DF-77A2-4181-A3E0-9FC2889A30FB),
		helpstring("Dictionary Class")
	]
	coclass Dictionary
	{
		[default] interface IDictionary;
	};
	[
		uuid(A052A7B1-6E7D-4068-9C5B-C8C9F782B891),
		helpstring("Library Class")
	]
	coclass Library
	{
		[default] interface ILibrary;
	};
};
