
AdminManager->Application - Perform tests of 'Application' objects that are children of 'AdminManager' objects



AdminManager->Application - 'Admin Manager generic Child object test' 
AzInitialize '.\TestFile' (1) 
DupHandle 
GoSub 
    
AdminManager->Application - 'Gen object test' 
    AzApplicationCreate 'Name1' 
    AzCloseHandle 
    AzApplicationEnum (ERROR_INVALID_HANDLE) 
    AzApplicationEnum 
        1:
            DupHandle 
            AzCloseHandle 
            AzCloseHandle (ERROR_INVALID_HANDLE) 
            AzCloseHandle (ERROR_INVALID_HANDLE) 
    AzApplicationEnum 
        1:
            AzApplicationGetProperty (1) 
                'Name1'
            AzApplicationGetProperty (2) 
                ''
            AzCloseHandle 
    AzApplicationCreate 'Name2' 
    AzApplicationEnum 
        1:
            AzApplicationGetProperty (1) 
                'Name1'
            AzApplicationGetProperty (2) 
                ''
            AzCloseHandle 
        2:
            AzApplicationGetProperty (1) 
                'Name2'
            AzApplicationGetProperty (2) 
                ''
            AzCloseHandle 
    AzCloseHandle 
    
AdminManager->Application - 'Delete an object and make sure it doesn't get enumerated' 
    AzApplicationCreate 'Name3' 
    AzApplicationDelete 'Name3' 
    AzCloseHandle 
    AzApplicationEnum 
        1:
            AzApplicationGetProperty (1) 
                'Name1'
            AzApplicationGetProperty (2) 
                ''
            AzCloseHandle 
        2:
            AzApplicationGetProperty (1) 
                'Name2'
            AzApplicationGetProperty (2) 
                ''
            AzCloseHandle 
    
AdminManager->Application - 'Create an object whose name equals that of a deleted object' 
    AzApplicationCreate 'Name3' 
    AzCloseHandle 
    AzApplicationEnum 
        1:
            AzApplicationGetProperty (1) 
                'Name1'
            AzApplicationGetProperty (2) 
                ''
            AzCloseHandle 
        2:
            AzApplicationGetProperty (1) 
                'Name2'
            AzApplicationGetProperty (2) 
                ''
            AzCloseHandle 
        4:
            AzApplicationGetProperty (1) 
                'Name3'
            AzApplicationGetProperty (2) 
                ''
            AzCloseHandle 
    
AdminManager->Application - 'Delete an object that isn't on the tail end of the enum list' 
    AzApplicationDelete 'Name2' 
    AzApplicationEnum 
        1:
            AzApplicationGetProperty (1) 
                'Name1'
            AzApplicationGetProperty (2) 
                ''
            AzCloseHandle 
        4:
            AzApplicationGetProperty (1) 
                'Name3'
            AzApplicationGetProperty (2) 
                ''
            AzCloseHandle 
    
AdminManager->Application - 'Basic get/set property tests' 
    AzApplicationCreate 'Name4' 
    AzApplicationGetProperty (1) 
        'Name4'
    AzApplicationGetProperty (2) 
        ''
    AzApplicationSetProperty 'WasName4' (1) 
    AzApplicationSetProperty 'Nam4 Desc' (2) 
    AzApplicationGetProperty (1) 
        'WasName4'
    AzApplicationGetProperty (2) 
        'Nam4 Desc'
    AzApplicationEnum 
        1:
            AzApplicationGetProperty (1) 
                'Name1'
            AzApplicationGetProperty (2) 
                ''
            AzCloseHandle 
        4:
            AzApplicationGetProperty (1) 
                'Name3'
            AzApplicationGetProperty (2) 
                ''
            AzCloseHandle 
        5:
            AzApplicationGetProperty (1) 
                'WasName4'
            AzApplicationGetProperty (2) 
                'Nam4 Desc'
            AzCloseHandle 
    AzCloseHandle 
    
AdminManager->Application - 'Open test' 
    AzApplicationOpen 'Name1' 
    AzApplicationGetProperty (1) 
        'Name1'
    AzCloseHandle 
    AzApplicationOpen 'NameBad' (ERROR_NOT_FOUND) 
AzCloseHandle 



AdminManager->Application - 'Test creating two objects with the same name' 
AzInitialize '.\TestFile' (1) 
AzApplicationCreate 'Name1' 
AzApplicationCreate 'Name1' (ERROR_ALREADY_EXISTS) 
AzCloseHandle 
AzCloseHandle 

AdminManager->Group - Perform tests of 'Group' objects that are children of 'AdminManager' objects



AdminManager->Group - 'Admin Manager generic Child object test' 
AzInitialize '.\TestFile' (1) 
DupHandle 
GoSub 
    
AdminManager->Group - 'Gen object test' 
    AzGroupCreate 'Name1' 
    AzCloseHandle 
    AzGroupEnum (ERROR_INVALID_HANDLE) 
    AzGroupEnum 
        1:
            DupHandle 
            AzCloseHandle 
            AzCloseHandle (ERROR_INVALID_HANDLE) 
            AzCloseHandle (ERROR_INVALID_HANDLE) 
    AzGroupEnum 
        1:
            AzGroupGetProperty (1) 
                'Name1'
            AzGroupGetProperty (2) 
                ''
            AzCloseHandle 
    AzGroupCreate 'Name2' 
    AzGroupEnum 
        1:
            AzGroupGetProperty (1) 
                'Name1'
            AzGroupGetProperty (2) 
                ''
            AzCloseHandle 
        2:
            AzGroupGetProperty (1) 
                'Name2'
            AzGroupGetProperty (2) 
                ''
            AzCloseHandle 
    AzCloseHandle 
    
AdminManager->Group - 'Delete an object and make sure it doesn't get enumerated' 
    AzGroupCreate 'Name3' 
    AzGroupDelete 'Name3' 
    AzCloseHandle 
    AzGroupEnum 
        1:
            AzGroupGetProperty (1) 
                'Name1'
            AzGroupGetProperty (2) 
                ''
            AzCloseHandle 
        2:
            AzGroupGetProperty (1) 
                'Name2'
            AzGroupGetProperty (2) 
                ''
            AzCloseHandle 
    
AdminManager->Group - 'Create an object whose name equals that of a deleted object' 
    AzGroupCreate 'Name3' 
    AzCloseHandle 
    AzGroupEnum 
        1:
            AzGroupGetProperty (1) 
                'Name1'
            AzGroupGetProperty (2) 
                ''
            AzCloseHandle 
        2:
            AzGroupGetProperty (1) 
                'Name2'
            AzGroupGetProperty (2) 
                ''
            AzCloseHandle 
        4:
            AzGroupGetProperty (1) 
                'Name3'
            AzGroupGetProperty (2) 
                ''
            AzCloseHandle 
    
AdminManager->Group - 'Delete an object that isn't on the tail end of the enum list' 
    AzGroupDelete 'Name2' 
    AzGroupEnum 
        1:
            AzGroupGetProperty (1) 
                'Name1'
            AzGroupGetProperty (2) 
                ''
            AzCloseHandle 
        4:
            AzGroupGetProperty (1) 
                'Name3'
            AzGroupGetProperty (2) 
                ''
            AzCloseHandle 
    
AdminManager->Group - 'Basic get/set property tests' 
    AzGroupCreate 'Name4' 
    AzGroupGetProperty (1) 
        'Name4'
    AzGroupGetProperty (2) 
        ''
    AzGroupSetProperty 'WasName4' (1) 
    AzGroupSetProperty 'Nam4 Desc' (2) 
    AzGroupGetProperty (1) 
        'WasName4'
    AzGroupGetProperty (2) 
        'Nam4 Desc'
    AzGroupEnum 
        1:
            AzGroupGetProperty (1) 
                'Name1'
            AzGroupGetProperty (2) 
                ''
            AzCloseHandle 
        4:
            AzGroupGetProperty (1) 
                'Name3'
            AzGroupGetProperty (2) 
                ''
            AzCloseHandle 
        5:
            AzGroupGetProperty (1) 
                'WasName4'
            AzGroupGetProperty (2) 
                'Nam4 Desc'
            AzCloseHandle 
    AzCloseHandle 
    
AdminManager->Group - 'Open test' 
    AzGroupOpen 'Name1' 
    AzGroupGetProperty (1) 
        'Name1'
    AzCloseHandle 
    AzGroupOpen 'NameBad' (ERROR_NOT_FOUND) 
AzCloseHandle 



AdminManager->Group - 'Test creating two objects with the same name' 
AzInitialize '.\TestFile' (1) 
AzGroupCreate 'Name1' 
AzGroupCreate 'Name1' (ERROR_ALREADY_EXISTS) 
AzCloseHandle 
AzCloseHandle 



AdminManager->Group - 'Group objects that are children of an admin manager' 
AzInitialize '.\TestFile' (1) 
DupHandle 
GoSub 
    
AdminManager->Group - 'Group object specific tests' 
    AzGroupCreate 'Group A' 
    
AdminManager->Group - 'Create some groups to link the group to' 
    AzGroupCreate 'Group 1' 
    AzCloseHandle 
    AzGroupCreate 'Group 2' 
    AzCloseHandle 
    AzGroupCreate 'Group 3' 
    AzCloseHandle 
    
AdminManager->Group - 'Add membership to a group with no grouptype' 
[INVPARM] AzpGroupAddPropertyItem: invalid group type 0
    AzGroupAddProperty 'Group 1' (401) (ERROR_INVALID_PARAMETER) 
[INVPARM] AzpGroupAddPropertyItem: invalid group type 0
    AzGroupAddProperty '' (404) (ERROR_INVALID_PARAMETER) 
[INVPARM] AzpGroupGetProperty: invalid grouptype 8
    AzGroupSetProperty '8' (400) (ERROR_INVALID_PARAMETER) 
    AzGroupSetProperty '2' (400) 
    
AdminManager->Group - 'Reference ourself' 
    AzGroupGetProperty (401) 
    AzGroupGetProperty (404) 
[INVPARM] Reference to self
    AzGroupAddProperty 'Group A' (401) (ERROR_DS_LOOP_DETECT) 
    
AdminManager->Group->Group - Test linking 'Group' objects to the object named 'Group A' using propid '401'.
        
AdminManager->Group->Group - 'Create some objects to link the object to' 
        AzGroupCreate 'Object 1' 
        AzCloseHandle 
        AzGroupCreate 'Object 2' 
        AzCloseHandle 
        AzGroupCreate 'Object 3' 
        AzCloseHandle 
        
AdminManager->Group->Group - 'Reference an object that doesn't exist' 
        AzGroupGetProperty (401) 
[INVPARM] AzpGroupSetProperty: invalid propid 401
        AzGroupSetProperty (401) (ERROR_INVALID_PARAMETER) 
        AzGroupAddProperty 'random' (401) (ERROR_NOT_FOUND) 
        
AdminManager->Group->Group - 'Add and remove several objects' 
        AzGroupAddProperty 'Object 2' (401) 
        AzGroupGetProperty (401) 
            'Object 2'
        AzGroupAddProperty 'Object 3' (401) 
        AzGroupGetProperty (401) 
            'Object 2'
            'Object 3'
        AzGroupAddProperty 'Object 1' (401) 
        AzGroupGetProperty (401) 
            'Object 1'
            'Object 2'
            'Object 3'
        AzGroupRemProperty 'Object 1' (401) 
        AzGroupGetProperty (401) 
            'Object 2'
            'Object 3'
        AzGroupRemProperty 'Object 2' (401) 
        AzGroupGetProperty (401) 
            'Object 3'
        
AdminManager->Group->Group - 'Add an item that already exists' 
        AzGroupAddProperty 'Object 3' (401) (ERROR_ALREADY_EXISTS) 
        AzGroupGetProperty (401) 
            'Object 3'
        AzGroupRemProperty 'Object 3' (401) 
        AzGroupGetProperty (401) 
        
AdminManager->Group->Group - 'Try more than 4 since reference buckets come in multiples of 4' 
        AzGroupCreate 'Object 4' 
        AzCloseHandle 
        AzGroupCreate 'Object 5' 
        AzCloseHandle 
        AzGroupCreate 'Object 6' 
        AzCloseHandle 
        AzGroupAddProperty 'Object 1' (401) 
        AzGroupAddProperty 'Object 4' (401) 
        AzGroupAddProperty 'Object 2' (401) 
        AzGroupAddProperty 'Object 5' (401) 
        AzGroupAddProperty 'Object 3' (401) 
        AzGroupAddProperty 'Object 6' (401) 
        AzGroupGetProperty (401) 
            'Object 1'
            'Object 2'
            'Object 3'
            'Object 4'
            'Object 5'
            'Object 6'
        AzGroupDelete 'Object 1' (401) 
        AzGroupDelete 'Object 4' (401) 
        AzGroupDelete 'Object 2' (401) 
        AzGroupDelete 'Object 5' (401) 
        AzGroupDelete 'Object 3' (401) 
        AzGroupDelete 'Object 6' (401) 
    
AdminManager->Group->Sid - Test linking 'Sid' objects to the object named 'Group A' using propid '404'.
        
AdminManager->Group->Sid - 'Add and remove several links to sids' 
        AzGroupAddProperty '' (404) 
        AzGroupGetProperty (404) 
            'S-1-1000-2'
        AzGroupAddProperty '' (404) 
        AzGroupGetProperty (404) 
            'S-1-1000-2'
            'S-1-1000-3'
        AzGroupAddProperty '' (404) 
        AzGroupGetProperty (404) 
            'S-1-1000-1'
            'S-1-1000-2'
            'S-1-1000-3'
        AzGroupRemProperty '' (404) 
        AzGroupGetProperty (404) 
            'S-1-1000-2'
            'S-1-1000-3'
        AzGroupRemProperty '' (404) 
        AzGroupGetProperty (404) 
            'S-1-1000-3'
        
AdminManager->Group->Sid - 'Add a link that already exists' 
        AzGroupAddProperty '' (404) (ERROR_ALREADY_EXISTS) 
        AzGroupGetProperty (404) 
            'S-1-1000-3'
        AzGroupRemProperty '' (404) 
        AzGroupGetProperty (404) 
        
AdminManager->Group->Sid - 'Try more than 4 since reference buckets come in multiples of 4' 
        AzGroupAddProperty '' (404) 
        AzGroupAddProperty '' (404) 
        AzGroupAddProperty '' (404) 
        AzGroupAddProperty '' (404) 
        AzGroupAddProperty '' (404) 
        AzGroupAddProperty '' (404) 
        AzGroupGetProperty (404) 
            'S-1-1000-1'
            'S-1-1000-2'
            'S-1-1000-3'
            'S-1-1000-4'
            'S-1-1000-5'
            'S-1-1000-6'
    
AdminManager->Group - 'Same as above, but for the non-members attribute' 
    AzGroupGetProperty (402) 
    AzGroupGetProperty (405) 
[INVPARM] Reference to self
    AzGroupAddProperty 'Group A' (402) (ERROR_DS_LOOP_DETECT) 
    
AdminManager->Group->Group - Test linking 'Group' objects to the object named 'Group A' using propid '402'.
        
AdminManager->Group->Group - 'Create some objects to link the object to' 
        AzGroupCreate 'Object 1' 
        AzCloseHandle 
        AzGroupCreate 'Object 2' 
        AzCloseHandle 
        AzGroupCreate 'Object 3' 
        AzCloseHandle 
        
AdminManager->Group->Group - 'Reference an object that doesn't exist' 
        AzGroupGetProperty (402) 
[INVPARM] AzpGroupSetProperty: invalid propid 402
        AzGroupSetProperty (402) (ERROR_INVALID_PARAMETER) 
        AzGroupAddProperty 'random' (402) (ERROR_NOT_FOUND) 
        
AdminManager->Group->Group - 'Add and remove several objects' 
        AzGroupAddProperty 'Object 2' (402) 
        AzGroupGetProperty (402) 
            'Object 2'
        AzGroupAddProperty 'Object 3' (402) 
        AzGroupGetProperty (402) 
            'Object 2'
            'Object 3'
        AzGroupAddProperty 'Object 1' (402) 
        AzGroupGetProperty (402) 
            'Object 1'
            'Object 2'
            'Object 3'
        AzGroupRemProperty 'Object 1' (402) 
        AzGroupGetProperty (402) 
            'Object 2'
            'Object 3'
        AzGroupRemProperty 'Object 2' (402) 
        AzGroupGetProperty (402) 
            'Object 3'
        
AdminManager->Group->Group - 'Add an item that already exists' 
        AzGroupAddProperty 'Object 3' (402) (ERROR_ALREADY_EXISTS) 
        AzGroupGetProperty (402) 
            'Object 3'
        AzGroupRemProperty 'Object 3' (402) 
        AzGroupGetProperty (402) 
        
AdminManager->Group->Group - 'Try more than 4 since reference buckets come in multiples of 4' 
        AzGroupCreate 'Object 4' 
        AzCloseHandle 
        AzGroupCreate 'Object 5' 
        AzCloseHandle 
        AzGroupCreate 'Object 6' 
        AzCloseHandle 
        AzGroupAddProperty 'Object 1' (402) 
        AzGroupAddProperty 'Object 4' (402) 
        AzGroupAddProperty 'Object 2' (402) 
        AzGroupAddProperty 'Object 5' (402) 
        AzGroupAddProperty 'Object 3' (402) 
        AzGroupAddProperty 'Object 6' (402) 
        AzGroupGetProperty (402) 
            'Object 1'
            'Object 2'
            'Object 3'
            'Object 4'
            'Object 5'
            'Object 6'
        AzGroupDelete 'Object 1' (402) 
        AzGroupDelete 'Object 4' (402) 
        AzGroupDelete 'Object 2' (402) 
        AzGroupDelete 'Object 5' (402) 
        AzGroupDelete 'Object 3' (402) 
        AzGroupDelete 'Object 6' (402) 
    
AdminManager->Group->Sid - Test linking 'Sid' objects to the object named 'Group A' using propid '405'.
        
AdminManager->Group->Sid - 'Add and remove several links to sids' 
        AzGroupAddProperty '' (405) 
        AzGroupGetProperty (405) 
            'S-1-1000-2'
        AzGroupAddProperty '' (405) 
        AzGroupGetProperty (405) 
            'S-1-1000-2'
            'S-1-1000-3'
        AzGroupAddProperty '' (405) 
        AzGroupGetProperty (405) 
            'S-1-1000-1'
            'S-1-1000-2'
            'S-1-1000-3'
        AzGroupRemProperty '' (405) 
        AzGroupGetProperty (405) 
            'S-1-1000-2'
            'S-1-1000-3'
        AzGroupRemProperty '' (405) 
        AzGroupGetProperty (405) 
            'S-1-1000-3'
        
AdminManager->Group->Sid - 'Add a link that already exists' 
        AzGroupAddProperty '' (405) (ERROR_ALREADY_EXISTS) 
        AzGroupGetProperty (405) 
            'S-1-1000-3'
        AzGroupRemProperty '' (405) 
        AzGroupGetProperty (405) 
        
AdminManager->Group->Sid - 'Try more than 4 since reference buckets come in multiples of 4' 
        AzGroupAddProperty '' (405) 
        AzGroupAddProperty '' (405) 
        AzGroupAddProperty '' (405) 
        AzGroupAddProperty '' (405) 
        AzGroupAddProperty '' (405) 
        AzGroupAddProperty '' (405) 
        AzGroupGetProperty (405) 
            'S-1-1000-1'
            'S-1-1000-2'
            'S-1-1000-3'
            'S-1-1000-4'
            'S-1-1000-5'
            'S-1-1000-6'
    
AdminManager->Group - 'Set LdapQuery string' 
    AzGroupGetProperty (403) 
        ''
[INVPARM] AzpGroupSetProperty: can't set ldap query before group type
    AzGroupSetProperty 'TheQuery' (403) (ERROR_INVALID_PARAMETER) 
    AzGroupSetProperty '1' (400) 
    AzGroupSetProperty 'TheQuery' (403) 
    AzGroupGetProperty (403) 
        'TheQuery'
    AzGroupSetProperty '2' (400) 
[INVPARM] AzpGroupSetProperty: can't set ldap query before group type
    AzGroupSetProperty 'TheQuery' (403) (ERROR_INVALID_PARAMETER) 
    AzGroupSetProperty '' (403) 
    
AdminManager->Group - 'Test loops' 
    AzGroupCreate 'Group B' 
    AzGroupSetProperty '2' (400) 
    AzGroupAddProperty 'Group B' (401) 
    AzGroupAddProperty 'Group A' (401) (ERROR_DS_LOOP_DETECT) 
    AzGroupAddProperty 'Group B' (402) 
    AzGroupAddProperty 'Group A' (402) (ERROR_DS_LOOP_DETECT) 
    AzGroupRemProperty 'Group B' (402) 
    AzGroupRemProperty 'Group B' (401) 
    AzCloseHandle 
    AzCloseHandle 
AzCloseHandle 

Application->Operation - Perform tests of 'Operation' objects that are children of 'Application' objects



Application->Operation - 'Application generic Child object test' 
AzInitialize '.\TestFile' (1) 
AzApplicationCreate 'MyApp' 
DupHandle 
GoSub 
    
Application->Operation - 'Gen object test' 
    AzOperationCreate 'Name1' 
    AzCloseHandle 
    AzOperationEnum (ERROR_INVALID_HANDLE) 
    AzOperationEnum 
        1:
            DupHandle 
            AzCloseHandle 
            AzCloseHandle (ERROR_INVALID_HANDLE) 
            AzCloseHandle (ERROR_INVALID_HANDLE) 
    AzOperationEnum 
        1:
            AzOperationGetProperty (1) 
                'Name1'
            AzOperationGetProperty (2) 
                ''
            AzCloseHandle 
    AzOperationCreate 'Name2' 
    AzOperationEnum 
        1:
            AzOperationGetProperty (1) 
                'Name1'
            AzOperationGetProperty (2) 
                ''
            AzCloseHandle 
        2:
            AzOperationGetProperty (1) 
                'Name2'
            AzOperationGetProperty (2) 
                ''
            AzCloseHandle 
    AzCloseHandle 
    
Application->Operation - 'Delete an object and make sure it doesn't get enumerated' 
    AzOperationCreate 'Name3' 
    AzOperationDelete 'Name3' 
    AzCloseHandle 
    AzOperationEnum 
        1:
            AzOperationGetProperty (1) 
                'Name1'
            AzOperationGetProperty (2) 
                ''
            AzCloseHandle 
        2:
            AzOperationGetProperty (1) 
                'Name2'
            AzOperationGetProperty (2) 
                ''
            AzCloseHandle 
    
Application->Operation - 'Create an object whose name equals that of a deleted object' 
    AzOperationCreate 'Name3' 
    AzCloseHandle 
    AzOperationEnum 
        1:
            AzOperationGetProperty (1) 
                'Name1'
            AzOperationGetProperty (2) 
                ''
            AzCloseHandle 
        2:
            AzOperationGetProperty (1) 
                'Name2'
            AzOperationGetProperty (2) 
                ''
            AzCloseHandle 
        4:
            AzOperationGetProperty (1) 
                'Name3'
            AzOperationGetProperty (2) 
                ''
            AzCloseHandle 
    
Application->Operation - 'Delete an object that isn't on the tail end of the enum list' 
    AzOperationDelete 'Name2' 
    AzOperationEnum 
        1:
            AzOperationGetProperty (1) 
                'Name1'
            AzOperationGetProperty (2) 
                ''
            AzCloseHandle 
        4:
            AzOperationGetProperty (1) 
                'Name3'
            AzOperationGetProperty (2) 
                ''
            AzCloseHandle 
    
Application->Operation - 'Basic get/set property tests' 
    AzOperationCreate 'Name4' 
    AzOperationGetProperty (1) 
        'Name4'
    AzOperationGetProperty (2) 
        ''
    AzOperationSetProperty 'WasName4' (1) 
    AzOperationSetProperty 'Nam4 Desc' (2) 
    AzOperationGetProperty (1) 
        'WasName4'
    AzOperationGetProperty (2) 
        'Nam4 Desc'
    AzOperationEnum 
        1:
            AzOperationGetProperty (1) 
                'Name1'
            AzOperationGetProperty (2) 
                ''
            AzCloseHandle 
        4:
            AzOperationGetProperty (1) 
                'Name3'
            AzOperationGetProperty (2) 
                ''
            AzCloseHandle 
        5:
            AzOperationGetProperty (1) 
                'WasName4'
            AzOperationGetProperty (2) 
                'Nam4 Desc'
            AzCloseHandle 
    AzCloseHandle 
    
Application->Operation - 'Open test' 
    AzOperationOpen 'Name1' 
    AzOperationGetProperty (1) 
        'Name1'
    AzCloseHandle 
    AzOperationOpen 'NameBad' (ERROR_NOT_FOUND) 
AzCloseHandle 
AzCloseHandle 



Application->Operation - 'Test closing the same handle twice' 
AzInitialize '.\TestFile' (1) 
AzApplicationCreate 'MyApp' 
DupHandle 
AzCloseHandle (ERROR_SERVER_HAS_OPEN_HANDLES) 
AzCloseHandle 
AzCloseHandle 



Application->Operation - 'Test creating two objects with the same name' 
AzInitialize '.\TestFile' (1) 
AzApplicationCreate 'MyApp' 
AzApplicationCreate 'MyApp' (ERROR_ALREADY_EXISTS) 
AzOperationCreate 'Name1' 
AzOperationCreate 'Name1' (ERROR_ALREADY_EXISTS) 
AzCloseHandle 
AzCloseHandle 
AzCloseHandle 



Application->Operation - 'Operation object specific tests' 
AzInitialize '.\TestFile' (1) 
AzApplicationCreate 'MyApp' 
AzOperationCreate 'Oper 1' 
AzOperationGetProperty (200) 
    '0'
AzOperationSetProperty '8' (200) 
AzOperationGetProperty (200) 
    '8'
AzCloseHandle 
AzCloseHandle 
AzCloseHandle 

Application->Task - Perform tests of 'Task' objects that are children of 'Application' objects



Application->Task - 'Application generic Child object test' 
AzInitialize '.\TestFile' (1) 
AzApplicationCreate 'MyApp' 
DupHandle 
GoSub 
    
Application->Task - 'Gen object test' 
    AzTaskCreate 'Name1' 
    AzCloseHandle 
    AzTaskEnum (ERROR_INVALID_HANDLE) 
    AzTaskEnum 
        1:
            DupHandle 
            AzCloseHandle 
            AzCloseHandle (ERROR_INVALID_HANDLE) 
            AzCloseHandle (ERROR_INVALID_HANDLE) 
    AzTaskEnum 
        1:
            AzTaskGetProperty (1) 
                'Name1'
            AzTaskGetProperty (2) 
                ''
            AzCloseHandle 
    AzTaskCreate 'Name2' 
    AzTaskEnum 
        1:
            AzTaskGetProperty (1) 
                'Name1'
            AzTaskGetProperty (2) 
                ''
            AzCloseHandle 
        2:
            AzTaskGetProperty (1) 
                'Name2'
            AzTaskGetProperty (2) 
                ''
            AzCloseHandle 
    AzCloseHandle 
    
Application->Task - 'Delete an object and make sure it doesn't get enumerated' 
    AzTaskCreate 'Name3' 
    AzTaskDelete 'Name3' 
    AzCloseHandle 
    AzTaskEnum 
        1:
            AzTaskGetProperty (1) 
                'Name1'
            AzTaskGetProperty (2) 
                ''
            AzCloseHandle 
        2:
            AzTaskGetProperty (1) 
                'Name2'
            AzTaskGetProperty (2) 
                ''
            AzCloseHandle 
    
Application->Task - 'Create an object whose name equals that of a deleted object' 
    AzTaskCreate 'Name3' 
    AzCloseHandle 
    AzTaskEnum 
        1:
            AzTaskGetProperty (1) 
                'Name1'
            AzTaskGetProperty (2) 
                ''
            AzCloseHandle 
        2:
            AzTaskGetProperty (1) 
                'Name2'
            AzTaskGetProperty (2) 
                ''
            AzCloseHandle 
        4:
            AzTaskGetProperty (1) 
                'Name3'
            AzTaskGetProperty (2) 
                ''
            AzCloseHandle 
    
Application->Task - 'Delete an object that isn't on the tail end of the enum list' 
    AzTaskDelete 'Name2' 
    AzTaskEnum 
        1:
            AzTaskGetProperty (1) 
                'Name1'
            AzTaskGetProperty (2) 
                ''
            AzCloseHandle 
        4:
            AzTaskGetProperty (1) 
                'Name3'
            AzTaskGetProperty (2) 
                ''
            AzCloseHandle 
    
Application->Task - 'Basic get/set property tests' 
    AzTaskCreate 'Name4' 
    AzTaskGetProperty (1) 
        'Name4'
    AzTaskGetProperty (2) 
        ''
    AzTaskSetProperty 'WasName4' (1) 
    AzTaskSetProperty 'Nam4 Desc' (2) 
    AzTaskGetProperty (1) 
        'WasName4'
    AzTaskGetProperty (2) 
        'Nam4 Desc'
    AzTaskEnum 
        1:
            AzTaskGetProperty (1) 
                'Name1'
            AzTaskGetProperty (2) 
                ''
            AzCloseHandle 
        4:
            AzTaskGetProperty (1) 
                'Name3'
            AzTaskGetProperty (2) 
                ''
            AzCloseHandle 
        5:
            AzTaskGetProperty (1) 
                'WasName4'
            AzTaskGetProperty (2) 
                'Nam4 Desc'
            AzCloseHandle 
    AzCloseHandle 
    
Application->Task - 'Open test' 
    AzTaskOpen 'Name1' 
    AzTaskGetProperty (1) 
        'Name1'
    AzCloseHandle 
    AzTaskOpen 'NameBad' (ERROR_NOT_FOUND) 
AzCloseHandle 
AzCloseHandle 



Application->Task - 'Test closing the same handle twice' 
AzInitialize '.\TestFile' (1) 
AzApplicationCreate 'MyApp' 
DupHandle 
AzCloseHandle (ERROR_SERVER_HAS_OPEN_HANDLES) 
AzCloseHandle 
AzCloseHandle 



Application->Task - 'Test creating two objects with the same name' 
AzInitialize '.\TestFile' (1) 
AzApplicationCreate 'MyApp' 
AzApplicationCreate 'MyApp' (ERROR_ALREADY_EXISTS) 
AzTaskCreate 'Name1' 
AzTaskCreate 'Name1' (ERROR_ALREADY_EXISTS) 
AzCloseHandle 
AzCloseHandle 
AzCloseHandle 



Application->Task - 'Task object specific tests' 
AzInitialize '.\TestFile' (1) 
AzApplicationCreate 'MyApp' 
AzTaskCreate 'Task 1' 
AzTaskGetProperty (301) 
    ''
AzTaskSetProperty 'Rule1' (301) 
AzTaskGetProperty (301) 
    'Rule1'

Application->Task - 'Try an invalid language' 
AzTaskGetProperty (302) 
    ''
[INVPARM] AzTaskSetProperty: invalid language LANG1
AzTaskSetProperty 'LANG1' (302) (ERROR_INVALID_PARAMETER) 
AzTaskGetProperty (302) 
    ''

Application->Task - 'Try the valid languages' 
AzTaskSetProperty 'VBScript' (302) 
AzTaskGetProperty (302) 
    'VBScript'
AzTaskSetProperty 'Jscript' (302) 
AzTaskGetProperty (302) 
    'Jscript'

Application->Task->Operation - Test linking 'Operation' objects to the object named 'Task 1' using propid '300'.
    
Application->Task->Operation - 'Create some objects to link the object to' 
    AzOperationCreate 'Object 1' 
    AzCloseHandle 
    AzOperationCreate 'Object 2' 
    AzCloseHandle 
    AzOperationCreate 'Object 3' 
    AzCloseHandle 
    
Application->Task->Operation - 'Reference an object that doesn't exist' 
    AzTaskGetProperty (300) 
[INVPARM] AzTaskSetProperty: invalid prop id 300
    AzTaskSetProperty (300) (ERROR_INVALID_PARAMETER) 
    AzTaskAddProperty 'random' (300) (ERROR_NOT_FOUND) 
    
Application->Task->Operation - 'Add and remove several objects' 
    AzTaskAddProperty 'Object 2' (300) 
    AzTaskGetProperty (300) 
        'Object 2'
    AzTaskAddProperty 'Object 3' (300) 
    AzTaskGetProperty (300) 
        'Object 2'
        'Object 3'
    AzTaskAddProperty 'Object 1' (300) 
    AzTaskGetProperty (300) 
        'Object 1'
        'Object 2'
        'Object 3'
    AzTaskRemProperty 'Object 1' (300) 
    AzTaskGetProperty (300) 
        'Object 2'
        'Object 3'
    AzTaskRemProperty 'Object 2' (300) 
    AzTaskGetProperty (300) 
        'Object 3'
    
Application->Task->Operation - 'Add an item that already exists' 
    AzTaskAddProperty 'Object 3' (300) (ERROR_ALREADY_EXISTS) 
    AzTaskGetProperty (300) 
        'Object 3'
    AzTaskRemProperty 'Object 3' (300) 
    AzTaskGetProperty (300) 
    
Application->Task->Operation - 'Try more than 4 since reference buckets come in multiples of 4' 
    AzOperationCreate 'Object 4' 
    AzCloseHandle 
    AzOperationCreate 'Object 5' 
    AzCloseHandle 
    AzOperationCreate 'Object 6' 
    AzCloseHandle 
    AzTaskAddProperty 'Object 1' (300) 
    AzTaskAddProperty 'Object 4' (300) 
    AzTaskAddProperty 'Object 2' (300) 
    AzTaskAddProperty 'Object 5' (300) 
    AzTaskAddProperty 'Object 3' (300) 
    AzTaskAddProperty 'Object 6' (300) 
    AzTaskGetProperty (300) 
        'Object 1'
        'Object 2'
        'Object 3'
        'Object 4'
        'Object 5'
        'Object 6'
    AzOperationDelete 'Object 1' (300) 
    AzOperationDelete 'Object 4' (300) 
    AzOperationDelete 'Object 2' (300) 
    AzOperationDelete 'Object 5' (300) 
    AzOperationDelete 'Object 3' (300) 
    AzOperationDelete 'Object 6' (300) 
AzCloseHandle 
AzCloseHandle 
AzCloseHandle 

Application->Scope - Perform tests of 'Scope' objects that are children of 'Application' objects



Application->Scope - 'Application generic Child object test' 
AzInitialize '.\TestFile' (1) 
AzApplicationCreate 'MyApp' 
DupHandle 
GoSub 
    
Application->Scope - 'Gen object test' 
    AzScopeCreate 'Name1' 
    AzCloseHandle 
    AzScopeEnum (ERROR_INVALID_HANDLE) 
    AzScopeEnum 
        1:
            DupHandle 
            AzCloseHandle 
            AzCloseHandle (ERROR_INVALID_HANDLE) 
            AzCloseHandle (ERROR_INVALID_HANDLE) 
    AzScopeEnum 
        1:
            AzScopeGetProperty (1) 
                'Name1'
            AzScopeGetProperty (2) 
                ''
            AzCloseHandle 
    AzScopeCreate 'Name2' 
    AzScopeEnum 
        1:
            AzScopeGetProperty (1) 
                'Name1'
            AzScopeGetProperty (2) 
                ''
            AzCloseHandle 
        2:
            AzScopeGetProperty (1) 
                'Name2'
            AzScopeGetProperty (2) 
                ''
            AzCloseHandle 
    AzCloseHandle 
    
Application->Scope - 'Delete an object and make sure it doesn't get enumerated' 
    AzScopeCreate 'Name3' 
    AzScopeDelete 'Name3' 
    AzCloseHandle 
    AzScopeEnum 
        1:
            AzScopeGetProperty (1) 
                'Name1'
            AzScopeGetProperty (2) 
                ''
            AzCloseHandle 
        2:
            AzScopeGetProperty (1) 
                'Name2'
            AzScopeGetProperty (2) 
                ''
            AzCloseHandle 
    
Application->Scope - 'Create an object whose name equals that of a deleted object' 
    AzScopeCreate 'Name3' 
    AzCloseHandle 
    AzScopeEnum 
        1:
            AzScopeGetProperty (1) 
                'Name1'
            AzScopeGetProperty (2) 
                ''
            AzCloseHandle 
        2:
            AzScopeGetProperty (1) 
                'Name2'
            AzScopeGetProperty (2) 
                ''
            AzCloseHandle 
        4:
            AzScopeGetProperty (1) 
                'Name3'
            AzScopeGetProperty (2) 
                ''
            AzCloseHandle 
    
Application->Scope - 'Delete an object that isn't on the tail end of the enum list' 
    AzScopeDelete 'Name2' 
    AzScopeEnum 
        1:
            AzScopeGetProperty (1) 
                'Name1'
            AzScopeGetProperty (2) 
                ''
            AzCloseHandle 
        4:
            AzScopeGetProperty (1) 
                'Name3'
            AzScopeGetProperty (2) 
                ''
            AzCloseHandle 
    
Application->Scope - 'Basic get/set property tests' 
    AzScopeCreate 'Name4' 
    AzScopeGetProperty (1) 
        'Name4'
    AzScopeGetProperty (2) 
        ''
    AzScopeSetProperty 'WasName4' (1) 
    AzScopeSetProperty 'Nam4 Desc' (2) 
    AzScopeGetProperty (1) 
        'WasName4'
    AzScopeGetProperty (2) 
        'Nam4 Desc'
    AzScopeEnum 
        1:
            AzScopeGetProperty (1) 
                'Name1'
            AzScopeGetProperty (2) 
                ''
            AzCloseHandle 
        4:
            AzScopeGetProperty (1) 
                'Name3'
            AzScopeGetProperty (2) 
                ''
            AzCloseHandle 
        5:
            AzScopeGetProperty (1) 
                'WasName4'
            AzScopeGetProperty (2) 
                'Nam4 Desc'
            AzCloseHandle 
    AzCloseHandle 
    
Application->Scope - 'Open test' 
    AzScopeOpen 'Name1' 
    AzScopeGetProperty (1) 
        'Name1'
    AzCloseHandle 
    AzScopeOpen 'NameBad' (ERROR_NOT_FOUND) 
AzCloseHandle 
AzCloseHandle 



Application->Scope - 'Test closing the same handle twice' 
AzInitialize '.\TestFile' (1) 
AzApplicationCreate 'MyApp' 
DupHandle 
AzCloseHandle (ERROR_SERVER_HAS_OPEN_HANDLES) 
AzCloseHandle 
AzCloseHandle 



Application->Scope - 'Test creating two objects with the same name' 
AzInitialize '.\TestFile' (1) 
AzApplicationCreate 'MyApp' 
AzApplicationCreate 'MyApp' (ERROR_ALREADY_EXISTS) 
AzScopeCreate 'Name1' 
AzScopeCreate 'Name1' (ERROR_ALREADY_EXISTS) 
AzCloseHandle 
AzCloseHandle 
AzCloseHandle 

Application->Group - Perform tests of 'Group' objects that are children of 'Application' objects



Application->Group - 'Application generic Child object test' 
AzInitialize '.\TestFile' (1) 
AzApplicationCreate 'MyApp' 
DupHandle 
GoSub 
    
Application->Group - 'Gen object test' 
    AzGroupCreate 'Name1' 
    AzCloseHandle 
    AzGroupEnum (ERROR_INVALID_HANDLE) 
    AzGroupEnum 
        1:
            DupHandle 
            AzCloseHandle 
            AzCloseHandle (ERROR_INVALID_HANDLE) 
            AzCloseHandle (ERROR_INVALID_HANDLE) 
    AzGroupEnum 
        1:
            AzGroupGetProperty (1) 
                'Name1'
            AzGroupGetProperty (2) 
                ''
            AzCloseHandle 
    AzGroupCreate 'Name2' 
    AzGroupEnum 
        1:
            AzGroupGetProperty (1) 
                'Name1'
            AzGroupGetProperty (2) 
                ''
            AzCloseHandle 
        2:
            AzGroupGetProperty (1) 
                'Name2'
            AzGroupGetProperty (2) 
                ''
            AzCloseHandle 
    AzCloseHandle 
    
Application->Group - 'Delete an object and make sure it doesn't get enumerated' 
    AzGroupCreate 'Name3' 
    AzGroupDelete 'Name3' 
    AzCloseHandle 
    AzGroupEnum 
        1:
            AzGroupGetProperty (1) 
                'Name1'
            AzGroupGetProperty (2) 
                ''
            AzCloseHandle 
        2:
            AzGroupGetProperty (1) 
                'Name2'
            AzGroupGetProperty (2) 
                ''
            AzCloseHandle 
    
Application->Group - 'Create an object whose name equals that of a deleted object' 
    AzGroupCreate 'Name3' 
    AzCloseHandle 
    AzGroupEnum 
        1:
            AzGroupGetProperty (1) 
                'Name1'
            AzGroupGetProperty (2) 
                ''
            AzCloseHandle 
        2:
            AzGroupGetProperty (1) 
                'Name2'
            AzGroupGetProperty (2) 
                ''
            AzCloseHandle 
        4:
            AzGroupGetProperty (1) 
                'Name3'
            AzGroupGetProperty (2) 
                ''
            AzCloseHandle 
    
Application->Group - 'Delete an object that isn't on the tail end of the enum list' 
    AzGroupDelete 'Name2' 
    AzGroupEnum 
        1:
            AzGroupGetProperty (1) 
                'Name1'
            AzGroupGetProperty (2) 
                ''
            AzCloseHandle 
        4:
            AzGroupGetProperty (1) 
                'Name3'
            AzGroupGetProperty (2) 
                ''
            AzCloseHandle 
    
Application->Group - 'Basic get/set property tests' 
    AzGroupCreate 'Name4' 
    AzGroupGetProperty (1) 
        'Name4'
    AzGroupGetProperty (2) 
        ''
    AzGroupSetProperty 'WasName4' (1) 
    AzGroupSetProperty 'Nam4 Desc' (2) 
    AzGroupGetProperty (1) 
        'WasName4'
    AzGroupGetProperty (2) 
        'Nam4 Desc'
    AzGroupEnum 
        1:
            AzGroupGetProperty (1) 
                'Name1'
            AzGroupGetProperty (2) 
                ''
            AzCloseHandle 
        4:
            AzGroupGetProperty (1) 
                'Name3'
            AzGroupGetProperty (2) 
                ''
            AzCloseHandle 
        5:
            AzGroupGetProperty (1) 
                'WasName4'
            AzGroupGetProperty (2) 
                'Nam4 Desc'
            AzCloseHandle 
    AzCloseHandle 
    
Application->Group - 'Open test' 
    AzGroupOpen 'Name1' 
    AzGroupGetProperty (1) 
        'Name1'
    AzCloseHandle 
    AzGroupOpen 'NameBad' (ERROR_NOT_FOUND) 
AzCloseHandle 
AzCloseHandle 



Application->Group - 'Test closing the same handle twice' 
AzInitialize '.\TestFile' (1) 
AzApplicationCreate 'MyApp' 
DupHandle 
AzCloseHandle (ERROR_SERVER_HAS_OPEN_HANDLES) 
AzCloseHandle 
AzCloseHandle 



Application->Group - 'Test creating two objects with the same name' 
AzInitialize '.\TestFile' (1) 
AzApplicationCreate 'MyApp' 
AzApplicationCreate 'MyApp' (ERROR_ALREADY_EXISTS) 
AzGroupCreate 'Name1' 
AzGroupCreate 'Name1' (ERROR_ALREADY_EXISTS) 
AzCloseHandle 
AzCloseHandle 
AzCloseHandle 



Application->Group - 'Group objects that are children of an application' 
AzInitialize '.\TestFile' (1) 
AzApplicationCreate 'MyApp' 
DupHandle 
GoSub 
    
Application->Group - 'Group object specific tests' 
    AzGroupCreate 'Group A' 
    
Application->Group - 'Create some groups to link the group to' 
    AzGroupCreate 'Group 1' 
    AzCloseHandle 
    AzGroupCreate 'Group 2' 
    AzCloseHandle 
    AzGroupCreate 'Group 3' 
    AzCloseHandle 
    
Application->Group - 'Add membership to a group with no grouptype' 
[INVPARM] AzpGroupAddPropertyItem: invalid group type 0
    AzGroupAddProperty 'Group 1' (401) (ERROR_INVALID_PARAMETER) 
[INVPARM] AzpGroupAddPropertyItem: invalid group type 0
    AzGroupAddProperty '' (404) (ERROR_INVALID_PARAMETER) 
[INVPARM] AzpGroupGetProperty: invalid grouptype 8
    AzGroupSetProperty '8' (400) (ERROR_INVALID_PARAMETER) 
    AzGroupSetProperty '2' (400) 
    
Application->Group - 'Reference ourself' 
    AzGroupGetProperty (401) 
    AzGroupGetProperty (404) 
[INVPARM] Reference to self
    AzGroupAddProperty 'Group A' (401) (ERROR_DS_LOOP_DETECT) 
    
Application->Group->Group - Test linking 'Group' objects to the object named 'Group A' using propid '401'.
        
Application->Group->Group - 'Create some objects to link the object to' 
        AzGroupCreate 'Object 1' 
        AzCloseHandle 
        AzGroupCreate 'Object 2' 
        AzCloseHandle 
        AzGroupCreate 'Object 3' 
        AzCloseHandle 
        
Application->Group->Group - 'Reference an object that doesn't exist' 
        AzGroupGetProperty (401) 
[INVPARM] AzpGroupSetProperty: invalid propid 401
        AzGroupSetProperty (401) (ERROR_INVALID_PARAMETER) 
        AzGroupAddProperty 'random' (401) (ERROR_NOT_FOUND) 
        
Application->Group->Group - 'Add and remove several objects' 
        AzGroupAddProperty 'Object 2' (401) 
        AzGroupGetProperty (401) 
            'Object 2'
        AzGroupAddProperty 'Object 3' (401) 
        AzGroupGetProperty (401) 
            'Object 2'
            'Object 3'
        AzGroupAddProperty 'Object 1' (401) 
        AzGroupGetProperty (401) 
            'Object 1'
            'Object 2'
            'Object 3'
        AzGroupRemProperty 'Object 1' (401) 
        AzGroupGetProperty (401) 
            'Object 2'
            'Object 3'
        AzGroupRemProperty 'Object 2' (401) 
        AzGroupGetProperty (401) 
            'Object 3'
        
Application->Group->Group - 'Add an item that already exists' 
        AzGroupAddProperty 'Object 3' (401) (ERROR_ALREADY_EXISTS) 
        AzGroupGetProperty (401) 
            'Object 3'
        AzGroupRemProperty 'Object 3' (401) 
        AzGroupGetProperty (401) 
        
Application->Group->Group - 'Try more than 4 since reference buckets come in multiples of 4' 
        AzGroupCreate 'Object 4' 
        AzCloseHandle 
        AzGroupCreate 'Object 5' 
        AzCloseHandle 
        AzGroupCreate 'Object 6' 
        AzCloseHandle 
        AzGroupAddProperty 'Object 1' (401) 
        AzGroupAddProperty 'Object 4' (401) 
        AzGroupAddProperty 'Object 2' (401) 
        AzGroupAddProperty 'Object 5' (401) 
        AzGroupAddProperty 'Object 3' (401) 
        AzGroupAddProperty 'Object 6' (401) 
        AzGroupGetProperty (401) 
            'Object 1'
            'Object 2'
            'Object 3'
            'Object 4'
            'Object 5'
            'Object 6'
        AzGroupDelete 'Object 1' (401) 
        AzGroupDelete 'Object 4' (401) 
        AzGroupDelete 'Object 2' (401) 
        AzGroupDelete 'Object 5' (401) 
        AzGroupDelete 'Object 3' (401) 
        AzGroupDelete 'Object 6' (401) 
    
Application->Group->Sid - Test linking 'Sid' objects to the object named 'Group A' using propid '404'.
        
Application->Group->Sid - 'Add and remove several links to sids' 
        AzGroupAddProperty '' (404) 
        AzGroupGetProperty (404) 
            'S-1-1000-2'
        AzGroupAddProperty '' (404) 
        AzGroupGetProperty (404) 
            'S-1-1000-2'
            'S-1-1000-3'
        AzGroupAddProperty '' (404) 
        AzGroupGetProperty (404) 
            'S-1-1000-1'
            'S-1-1000-2'
            'S-1-1000-3'
        AzGroupRemProperty '' (404) 
        AzGroupGetProperty (404) 
            'S-1-1000-2'
            'S-1-1000-3'
        AzGroupRemProperty '' (404) 
        AzGroupGetProperty (404) 
            'S-1-1000-3'
        
Application->Group->Sid - 'Add a link that already exists' 
        AzGroupAddProperty '' (404) (ERROR_ALREADY_EXISTS) 
        AzGroupGetProperty (404) 
            'S-1-1000-3'
        AzGroupRemProperty '' (404) 
        AzGroupGetProperty (404) 
        
Application->Group->Sid - 'Try more than 4 since reference buckets come in multiples of 4' 
        AzGroupAddProperty '' (404) 
        AzGroupAddProperty '' (404) 
        AzGroupAddProperty '' (404) 
        AzGroupAddProperty '' (404) 
        AzGroupAddProperty '' (404) 
        AzGroupAddProperty '' (404) 
        AzGroupGetProperty (404) 
            'S-1-1000-1'
            'S-1-1000-2'
            'S-1-1000-3'
            'S-1-1000-4'
            'S-1-1000-5'
            'S-1-1000-6'
    
Application->Group - 'Same as above, but for the non-members attribute' 
    AzGroupGetProperty (402) 
    AzGroupGetProperty (405) 
[INVPARM] Reference to self
    AzGroupAddProperty 'Group A' (402) (ERROR_DS_LOOP_DETECT) 
    
Application->Group->Group - Test linking 'Group' objects to the object named 'Group A' using propid '402'.
        
Application->Group->Group - 'Create some objects to link the object to' 
        AzGroupCreate 'Object 1' 
        AzCloseHandle 
        AzGroupCreate 'Object 2' 
        AzCloseHandle 
        AzGroupCreate 'Object 3' 
        AzCloseHandle 
        
Application->Group->Group - 'Reference an object that doesn't exist' 
        AzGroupGetProperty (402) 
[INVPARM] AzpGroupSetProperty: invalid propid 402
        AzGroupSetProperty (402) (ERROR_INVALID_PARAMETER) 
        AzGroupAddProperty 'random' (402) (ERROR_NOT_FOUND) 
        
Application->Group->Group - 'Add and remove several objects' 
        AzGroupAddProperty 'Object 2' (402) 
        AzGroupGetProperty (402) 
            'Object 2'
        AzGroupAddProperty 'Object 3' (402) 
        AzGroupGetProperty (402) 
            'Object 2'
            'Object 3'
        AzGroupAddProperty 'Object 1' (402) 
        AzGroupGetProperty (402) 
            'Object 1'
            'Object 2'
            'Object 3'
        AzGroupRemProperty 'Object 1' (402) 
        AzGroupGetProperty (402) 
            'Object 2'
            'Object 3'
        AzGroupRemProperty 'Object 2' (402) 
        AzGroupGetProperty (402) 
            'Object 3'
        
Application->Group->Group - 'Add an item that already exists' 
        AzGroupAddProperty 'Object 3' (402) (ERROR_ALREADY_EXISTS) 
        AzGroupGetProperty (402) 
            'Object 3'
        AzGroupRemProperty 'Object 3' (402) 
        AzGroupGetProperty (402) 
        
Application->Group->Group - 'Try more than 4 since reference buckets come in multiples of 4' 
        AzGroupCreate 'Object 4' 
        AzCloseHandle 
        AzGroupCreate 'Object 5' 
        AzCloseHandle 
        AzGroupCreate 'Object 6' 
        AzCloseHandle 
        AzGroupAddProperty 'Object 1' (402) 
        AzGroupAddProperty 'Object 4' (402) 
        AzGroupAddProperty 'Object 2' (402) 
        AzGroupAddProperty 'Object 5' (402) 
        AzGroupAddProperty 'Object 3' (402) 
        AzGroupAddProperty 'Object 6' (402) 
        AzGroupGetProperty (402) 
            'Object 1'
            'Object 2'
            'Object 3'
            'Object 4'
            'Object 5'
            'Object 6'
        AzGroupDelete 'Object 1' (402) 
        AzGroupDelete 'Object 4' (402) 
        AzGroupDelete 'Object 2' (402) 
        AzGroupDelete 'Object 5' (402) 
        AzGroupDelete 'Object 3' (402) 
        AzGroupDelete 'Object 6' (402) 
    
Application->Group->Sid - Test linking 'Sid' objects to the object named 'Group A' using propid '405'.
        
Application->Group->Sid - 'Add and remove several links to sids' 
        AzGroupAddProperty '' (405) 
        AzGroupGetProperty (405) 
            'S-1-1000-2'
        AzGroupAddProperty '' (405) 
        AzGroupGetProperty (405) 
            'S-1-1000-2'
            'S-1-1000-3'
        AzGroupAddProperty '' (405) 
        AzGroupGetProperty (405) 
            'S-1-1000-1'
            'S-1-1000-2'
            'S-1-1000-3'
        AzGroupRemProperty '' (405) 
        AzGroupGetProperty (405) 
            'S-1-1000-2'
            'S-1-1000-3'
        AzGroupRemProperty '' (405) 
        AzGroupGetProperty (405) 
            'S-1-1000-3'
        
Application->Group->Sid - 'Add a link that already exists' 
        AzGroupAddProperty '' (405) (ERROR_ALREADY_EXISTS) 
        AzGroupGetProperty (405) 
            'S-1-1000-3'
        AzGroupRemProperty '' (405) 
        AzGroupGetProperty (405) 
        
Application->Group->Sid - 'Try more than 4 since reference buckets come in multiples of 4' 
        AzGroupAddProperty '' (405) 
        AzGroupAddProperty '' (405) 
        AzGroupAddProperty '' (405) 
        AzGroupAddProperty '' (405) 
        AzGroupAddProperty '' (405) 
        AzGroupAddProperty '' (405) 
        AzGroupGetProperty (405) 
            'S-1-1000-1'
            'S-1-1000-2'
            'S-1-1000-3'
            'S-1-1000-4'
            'S-1-1000-5'
            'S-1-1000-6'
    
Application->Group - 'Set LdapQuery string' 
    AzGroupGetProperty (403) 
        ''
[INVPARM] AzpGroupSetProperty: can't set ldap query before group type
    AzGroupSetProperty 'TheQuery' (403) (ERROR_INVALID_PARAMETER) 
    AzGroupSetProperty '1' (400) 
    AzGroupSetProperty 'TheQuery' (403) 
    AzGroupGetProperty (403) 
        'TheQuery'
    AzGroupSetProperty '2' (400) 
[INVPARM] AzpGroupSetProperty: can't set ldap query before group type
    AzGroupSetProperty 'TheQuery' (403) (ERROR_INVALID_PARAMETER) 
    AzGroupSetProperty '' (403) 
    
Application->Group - 'Test loops' 
    AzGroupCreate 'Group B' 
    AzGroupSetProperty '2' (400) 
    AzGroupAddProperty 'Group B' (401) 
    AzGroupAddProperty 'Group A' (401) (ERROR_DS_LOOP_DETECT) 
    AzGroupAddProperty 'Group B' (402) 
    AzGroupAddProperty 'Group A' (402) (ERROR_DS_LOOP_DETECT) 
    AzGroupRemProperty 'Group B' (402) 
    AzGroupRemProperty 'Group B' (401) 
    AzCloseHandle 
    AzCloseHandle 

Application->Group - 'Test linking to groups that are children of the same admin manager as this group.' 
AzGroupOpen 'Group A' 

Application->Group->Group - Test linking 'Group' objects to the object named 'Group A' using propid '401'.
    
Application->Group->Group - 'Create some objects to link the object to' 
    AzGroupCreate 'Object 1' 
    AzCloseHandle 
    AzGroupCreate 'Object 2' 
    AzCloseHandle 
    AzGroupCreate 'Object 3' 
    AzCloseHandle 
    
Application->Group->Group - 'Reference an object that doesn't exist' 
    AzGroupGetProperty (401) 
[INVPARM] AzpGroupSetProperty: invalid propid 401
    AzGroupSetProperty (401) (ERROR_INVALID_PARAMETER) 
    AzGroupAddProperty 'random' (401) (ERROR_NOT_FOUND) 
    
Application->Group->Group - 'Add and remove several objects' 
    AzGroupAddProperty 'Object 2' (401) 
    AzGroupGetProperty (401) 
        'Object 2'
    AzGroupAddProperty 'Object 3' (401) 
    AzGroupGetProperty (401) 
        'Object 2'
        'Object 3'
    AzGroupAddProperty 'Object 1' (401) 
    AzGroupGetProperty (401) 
        'Object 1'
        'Object 2'
        'Object 3'
    AzGroupRemProperty 'Object 1' (401) 
    AzGroupGetProperty (401) 
        'Object 2'
        'Object 3'
    AzGroupRemProperty 'Object 2' (401) 
    AzGroupGetProperty (401) 
        'Object 3'
    
Application->Group->Group - 'Add an item that already exists' 
    AzGroupAddProperty 'Object 3' (401) (ERROR_ALREADY_EXISTS) 
    AzGroupGetProperty (401) 
        'Object 3'
    AzGroupRemProperty 'Object 3' (401) 
    AzGroupGetProperty (401) 
    
Application->Group->Group - 'Try more than 4 since reference buckets come in multiples of 4' 
    AzGroupCreate 'Object 4' 
    AzCloseHandle 
    AzGroupCreate 'Object 5' 
    AzCloseHandle 
    AzGroupCreate 'Object 6' 
    AzCloseHandle 
    AzGroupAddProperty 'Object 1' (401) 
    AzGroupAddProperty 'Object 4' (401) 
    AzGroupAddProperty 'Object 2' (401) 
    AzGroupAddProperty 'Object 5' (401) 
    AzGroupAddProperty 'Object 3' (401) 
    AzGroupAddProperty 'Object 6' (401) 
    AzGroupGetProperty (401) 
        'Object 1'
        'Object 2'
        'Object 3'
        'Object 4'
        'Object 5'
        'Object 6'
    AzGroupDelete 'Object 1' (401) 
    AzGroupDelete 'Object 4' (401) 
    AzGroupDelete 'Object 2' (401) 
    AzGroupDelete 'Object 5' (401) 
    AzGroupDelete 'Object 3' (401) 
    AzGroupDelete 'Object 6' (401) 

Application->Group->Group - Test linking 'Group' objects to the object named 'Group A' using propid '402'.
    
Application->Group->Group - 'Create some objects to link the object to' 
    AzGroupCreate 'Object 1' 
    AzCloseHandle 
    AzGroupCreate 'Object 2' 
    AzCloseHandle 
    AzGroupCreate 'Object 3' 
    AzCloseHandle 
    
Application->Group->Group - 'Reference an object that doesn't exist' 
    AzGroupGetProperty (402) 
[INVPARM] AzpGroupSetProperty: invalid propid 402
    AzGroupSetProperty (402) (ERROR_INVALID_PARAMETER) 
    AzGroupAddProperty 'random' (402) (ERROR_NOT_FOUND) 
    
Application->Group->Group - 'Add and remove several objects' 
    AzGroupAddProperty 'Object 2' (402) 
    AzGroupGetProperty (402) 
        'Object 2'
    AzGroupAddProperty 'Object 3' (402) 
    AzGroupGetProperty (402) 
        'Object 2'
        'Object 3'
    AzGroupAddProperty 'Object 1' (402) 
    AzGroupGetProperty (402) 
        'Object 1'
        'Object 2'
        'Object 3'
    AzGroupRemProperty 'Object 1' (402) 
    AzGroupGetProperty (402) 
        'Object 2'
        'Object 3'
    AzGroupRemProperty 'Object 2' (402) 
    AzGroupGetProperty (402) 
        'Object 3'
    
Application->Group->Group - 'Add an item that already exists' 
    AzGroupAddProperty 'Object 3' (402) (ERROR_ALREADY_EXISTS) 
    AzGroupGetProperty (402) 
        'Object 3'
    AzGroupRemProperty 'Object 3' (402) 
    AzGroupGetProperty (402) 
    
Application->Group->Group - 'Try more than 4 since reference buckets come in multiples of 4' 
    AzGroupCreate 'Object 4' 
    AzCloseHandle 
    AzGroupCreate 'Object 5' 
    AzCloseHandle 
    AzGroupCreate 'Object 6' 
    AzCloseHandle 
    AzGroupAddProperty 'Object 1' (402) 
    AzGroupAddProperty 'Object 4' (402) 
    AzGroupAddProperty 'Object 2' (402) 
    AzGroupAddProperty 'Object 5' (402) 
    AzGroupAddProperty 'Object 3' (402) 
    AzGroupAddProperty 'Object 6' (402) 
    AzGroupGetProperty (402) 
        'Object 1'
        'Object 2'
        'Object 3'
        'Object 4'
        'Object 5'
        'Object 6'
    AzGroupDelete 'Object 1' (402) 
    AzGroupDelete 'Object 4' (402) 
    AzGroupDelete 'Object 2' (402) 
    AzGroupDelete 'Object 5' (402) 
    AzGroupDelete 'Object 3' (402) 
    AzGroupDelete 'Object 6' (402) 
AzCloseHandle 
AzCloseHandle 
AzCloseHandle 

Application->Role - Perform tests of 'Role' objects that are children of 'Application' objects



Application->Role - 'Application generic Child object test' 
AzInitialize '.\TestFile' (1) 
AzApplicationCreate 'MyApp' 
DupHandle 
GoSub 
    
Application->Role - 'Gen object test' 
    AzRoleCreate 'Name1' 
    AzCloseHandle 
    AzRoleEnum (ERROR_INVALID_HANDLE) 
    AzRoleEnum 
        1:
            DupHandle 
            AzCloseHandle 
            AzCloseHandle (ERROR_INVALID_HANDLE) 
            AzCloseHandle (ERROR_INVALID_HANDLE) 
    AzRoleEnum 
        1:
            AzRoleGetProperty (1) 
                'Name1'
            AzRoleGetProperty (2) 
                ''
            AzCloseHandle 
    AzRoleCreate 'Name2' 
    AzRoleEnum 
        1:
            AzRoleGetProperty (1) 
                'Name1'
            AzRoleGetProperty (2) 
                ''
            AzCloseHandle 
        2:
            AzRoleGetProperty (1) 
                'Name2'
            AzRoleGetProperty (2) 
                ''
            AzCloseHandle 
    AzCloseHandle 
    
Application->Role - 'Delete an object and make sure it doesn't get enumerated' 
    AzRoleCreate 'Name3' 
    AzRoleDelete 'Name3' 
    AzCloseHandle 
    AzRoleEnum 
        1:
            AzRoleGetProperty (1) 
                'Name1'
            AzRoleGetProperty (2) 
                ''
            AzCloseHandle 
        2:
            AzRoleGetProperty (1) 
                'Name2'
            AzRoleGetProperty (2) 
                ''
            AzCloseHandle 
    
Application->Role - 'Create an object whose name equals that of a deleted object' 
    AzRoleCreate 'Name3' 
    AzCloseHandle 
    AzRoleEnum 
        1:
            AzRoleGetProperty (1) 
                'Name1'
            AzRoleGetProperty (2) 
                ''
            AzCloseHandle 
        2:
            AzRoleGetProperty (1) 
                'Name2'
            AzRoleGetProperty (2) 
                ''
            AzCloseHandle 
        4:
            AzRoleGetProperty (1) 
                'Name3'
            AzRoleGetProperty (2) 
                ''
            AzCloseHandle 
    
Application->Role - 'Delete an object that isn't on the tail end of the enum list' 
    AzRoleDelete 'Name2' 
    AzRoleEnum 
        1:
            AzRoleGetProperty (1) 
                'Name1'
            AzRoleGetProperty (2) 
                ''
            AzCloseHandle 
        4:
            AzRoleGetProperty (1) 
                'Name3'
            AzRoleGetProperty (2) 
                ''
            AzCloseHandle 
    
Application->Role - 'Basic get/set property tests' 
    AzRoleCreate 'Name4' 
    AzRoleGetProperty (1) 
        'Name4'
    AzRoleGetProperty (2) 
        ''
    AzRoleSetProperty 'WasName4' (1) 
    AzRoleSetProperty 'Nam4 Desc' (2) 
    AzRoleGetProperty (1) 
        'WasName4'
    AzRoleGetProperty (2) 
        'Nam4 Desc'
    AzRoleEnum 
        1:
            AzRoleGetProperty (1) 
                'Name1'
            AzRoleGetProperty (2) 
                ''
            AzCloseHandle 
        4:
            AzRoleGetProperty (1) 
                'Name3'
            AzRoleGetProperty (2) 
                ''
            AzCloseHandle 
        5:
            AzRoleGetProperty (1) 
                'WasName4'
            AzRoleGetProperty (2) 
                'Nam4 Desc'
            AzCloseHandle 
    AzCloseHandle 
    
Application->Role - 'Open test' 
    AzRoleOpen 'Name1' 
    AzRoleGetProperty (1) 
        'Name1'
    AzCloseHandle 
    AzRoleOpen 'NameBad' (ERROR_NOT_FOUND) 
AzCloseHandle 
AzCloseHandle 



Application->Role - 'Test closing the same handle twice' 
AzInitialize '.\TestFile' (1) 
AzApplicationCreate 'MyApp' 
DupHandle 
AzCloseHandle (ERROR_SERVER_HAS_OPEN_HANDLES) 
AzCloseHandle 
AzCloseHandle 



Application->Role - 'Test creating two objects with the same name' 
AzInitialize '.\TestFile' (1) 
AzApplicationCreate 'MyApp' 
AzApplicationCreate 'MyApp' (ERROR_ALREADY_EXISTS) 
AzRoleCreate 'Name1' 
AzRoleCreate 'Name1' (ERROR_ALREADY_EXISTS) 
AzCloseHandle 
AzCloseHandle 
AzCloseHandle 



Application->Role - 'Role objects that are children of an application' 
AzInitialize '.\TestFile' (1) 
AzApplicationCreate 'MyApp' 
AzRoleCreate 'Role A' 

Application->Role - 'Test linking to groups that are children of the same admin manager as the role object.' 

Application->Role->Group - Test linking 'Group' objects to the object named 'Role A' using propid '500'.
    
Application->Role->Group - 'Create some objects to link the object to' 
    AzGroupCreate 'Object 1' 
    AzCloseHandle 
    AzGroupCreate 'Object 2' 
    AzCloseHandle 
    AzGroupCreate 'Object 3' 
    AzCloseHandle 
    
Application->Role->Group - 'Reference an object that doesn't exist' 
    AzRoleGetProperty (500) 
[INVPARM] ObCommonSetProperty: non set property routine
    AzRoleSetProperty (500) (ERROR_INVALID_PARAMETER) 
    AzRoleAddProperty 'random' (500) (ERROR_NOT_FOUND) 
    
Application->Role->Group - 'Add and remove several objects' 
    AzRoleAddProperty 'Object 2' (500) 
    AzRoleGetProperty (500) 
        'Object 2'
    AzRoleAddProperty 'Object 3' (500) 
    AzRoleGetProperty (500) 
        'Object 2'
        'Object 3'
    AzRoleAddProperty 'Object 1' (500) 
    AzRoleGetProperty (500) 
        'Object 1'
        'Object 2'
        'Object 3'
    AzRoleRemProperty 'Object 1' (500) 
    AzRoleGetProperty (500) 
        'Object 2'
        'Object 3'
    AzRoleRemProperty 'Object 2' (500) 
    AzRoleGetProperty (500) 
        'Object 3'
    
Application->Role->Group - 'Add an item that already exists' 
    AzRoleAddProperty 'Object 3' (500) (ERROR_ALREADY_EXISTS) 
    AzRoleGetProperty (500) 
        'Object 3'
    AzRoleRemProperty 'Object 3' (500) 
    AzRoleGetProperty (500) 
    
Application->Role->Group - 'Try more than 4 since reference buckets come in multiples of 4' 
    AzGroupCreate 'Object 4' 
    AzCloseHandle 
    AzGroupCreate 'Object 5' 
    AzCloseHandle 
    AzGroupCreate 'Object 6' 
    AzCloseHandle 
    AzRoleAddProperty 'Object 1' (500) 
    AzRoleAddProperty 'Object 4' (500) 
    AzRoleAddProperty 'Object 2' (500) 
    AzRoleAddProperty 'Object 5' (500) 
    AzRoleAddProperty 'Object 3' (500) 
    AzRoleAddProperty 'Object 6' (500) 
    AzRoleGetProperty (500) 
        'Object 1'
        'Object 2'
        'Object 3'
        'Object 4'
        'Object 5'
        'Object 6'
    AzGroupDelete 'Object 1' (500) 
    AzGroupDelete 'Object 4' (500) 
    AzGroupDelete 'Object 2' (500) 
    AzGroupDelete 'Object 5' (500) 
    AzGroupDelete 'Object 3' (500) 
    AzGroupDelete 'Object 6' (500) 

Application->Role - 'Test linking to groups that are children of the same application as the role object.' 

Application->Role->Group - Test linking 'Group' objects to the object named 'Role A' using propid '500'.
    
Application->Role->Group - 'Create some objects to link the object to' 
    AzGroupCreate 'Object 1' 
    AzCloseHandle 
    AzGroupCreate 'Object 2' 
    AzCloseHandle 
    AzGroupCreate 'Object 3' 
    AzCloseHandle 
    
Application->Role->Group - 'Reference an object that doesn't exist' 
    AzRoleGetProperty (500) 
[INVPARM] ObCommonSetProperty: non set property routine
    AzRoleSetProperty (500) (ERROR_INVALID_PARAMETER) 
    AzRoleAddProperty 'random' (500) (ERROR_NOT_FOUND) 
    
Application->Role->Group - 'Add and remove several objects' 
    AzRoleAddProperty 'Object 2' (500) 
    AzRoleGetProperty (500) 
        'Object 2'
    AzRoleAddProperty 'Object 3' (500) 
    AzRoleGetProperty (500) 
        'Object 2'
        'Object 3'
    AzRoleAddProperty 'Object 1' (500) 
    AzRoleGetProperty (500) 
        'Object 1'
        'Object 2'
        'Object 3'
    AzRoleRemProperty 'Object 1' (500) 
    AzRoleGetProperty (500) 
        'Object 2'
        'Object 3'
    AzRoleRemProperty 'Object 2' (500) 
    AzRoleGetProperty (500) 
        'Object 3'
    
Application->Role->Group - 'Add an item that already exists' 
    AzRoleAddProperty 'Object 3' (500) (ERROR_ALREADY_EXISTS) 
    AzRoleGetProperty (500) 
        'Object 3'
    AzRoleRemProperty 'Object 3' (500) 
    AzRoleGetProperty (500) 
    
Application->Role->Group - 'Try more than 4 since reference buckets come in multiples of 4' 
    AzGroupCreate 'Object 4' 
    AzCloseHandle 
    AzGroupCreate 'Object 5' 
    AzCloseHandle 
    AzGroupCreate 'Object 6' 
    AzCloseHandle 
    AzRoleAddProperty 'Object 1' (500) 
    AzRoleAddProperty 'Object 4' (500) 
    AzRoleAddProperty 'Object 2' (500) 
    AzRoleAddProperty 'Object 5' (500) 
    AzRoleAddProperty 'Object 3' (500) 
    AzRoleAddProperty 'Object 6' (500) 
    AzRoleGetProperty (500) 
        'Object 1'
        'Object 2'
        'Object 3'
        'Object 4'
        'Object 5'
        'Object 6'
    AzGroupDelete 'Object 1' (500) 
    AzGroupDelete 'Object 4' (500) 
    AzGroupDelete 'Object 2' (500) 
    AzGroupDelete 'Object 5' (500) 
    AzGroupDelete 'Object 3' (500) 
    AzGroupDelete 'Object 6' (500) 

Application->Role - 'Test linking to SIDs.' 

Application->Role->Sid - Test linking 'Sid' objects to the object named 'Role A' using propid '501'.
    
Application->Role->Sid - 'Add and remove several links to sids' 
    AzRoleAddProperty '' (501) 
    AzRoleGetProperty (501) 
        'S-1-1000-2'
    AzRoleAddProperty '' (501) 
    AzRoleGetProperty (501) 
        'S-1-1000-2'
        'S-1-1000-3'
    AzRoleAddProperty '' (501) 
    AzRoleGetProperty (501) 
        'S-1-1000-1'
        'S-1-1000-2'
        'S-1-1000-3'
    AzRoleRemProperty '' (501) 
    AzRoleGetProperty (501) 
        'S-1-1000-2'
        'S-1-1000-3'
    AzRoleRemProperty '' (501) 
    AzRoleGetProperty (501) 
        'S-1-1000-3'
    
Application->Role->Sid - 'Add a link that already exists' 
    AzRoleAddProperty '' (501) (ERROR_ALREADY_EXISTS) 
    AzRoleGetProperty (501) 
        'S-1-1000-3'
    AzRoleRemProperty '' (501) 
    AzRoleGetProperty (501) 
    
Application->Role->Sid - 'Try more than 4 since reference buckets come in multiples of 4' 
    AzRoleAddProperty '' (501) 
    AzRoleAddProperty '' (501) 
    AzRoleAddProperty '' (501) 
    AzRoleAddProperty '' (501) 
    AzRoleAddProperty '' (501) 
    AzRoleAddProperty '' (501) 
    AzRoleGetProperty (501) 
        'S-1-1000-1'
        'S-1-1000-2'
        'S-1-1000-3'
        'S-1-1000-4'
        'S-1-1000-5'
        'S-1-1000-6'

Application->Role->Operation - Test linking 'Operation' objects to the object named 'Role A' using propid '502'.
    
Application->Role->Operation - 'Create some objects to link the object to' 
    AzOperationCreate 'Object 1' 
    AzCloseHandle 
    AzOperationCreate 'Object 2' 
    AzCloseHandle 
    AzOperationCreate 'Object 3' 
    AzCloseHandle 
    
Application->Role->Operation - 'Reference an object that doesn't exist' 
    AzRoleGetProperty (502) 
[INVPARM] ObCommonSetProperty: non set property routine
    AzRoleSetProperty (502) (ERROR_INVALID_PARAMETER) 
    AzRoleAddProperty 'random' (502) (ERROR_NOT_FOUND) 
    
Application->Role->Operation - 'Add and remove several objects' 
    AzRoleAddProperty 'Object 2' (502) 
    AzRoleGetProperty (502) 
        'Object 2'
    AzRoleAddProperty 'Object 3' (502) 
    AzRoleGetProperty (502) 
        'Object 2'
        'Object 3'
    AzRoleAddProperty 'Object 1' (502) 
    AzRoleGetProperty (502) 
        'Object 1'
        'Object 2'
        'Object 3'
    AzRoleRemProperty 'Object 1' (502) 
    AzRoleGetProperty (502) 
        'Object 2'
        'Object 3'
    AzRoleRemProperty 'Object 2' (502) 
    AzRoleGetProperty (502) 
        'Object 3'
    
Application->Role->Operation - 'Add an item that already exists' 
    AzRoleAddProperty 'Object 3' (502) (ERROR_ALREADY_EXISTS) 
    AzRoleGetProperty (502) 
        'Object 3'
    AzRoleRemProperty 'Object 3' (502) 
    AzRoleGetProperty (502) 
    
Application->Role->Operation - 'Try more than 4 since reference buckets come in multiples of 4' 
    AzOperationCreate 'Object 4' 
    AzCloseHandle 
    AzOperationCreate 'Object 5' 
    AzCloseHandle 
    AzOperationCreate 'Object 6' 
    AzCloseHandle 
    AzRoleAddProperty 'Object 1' (502) 
    AzRoleAddProperty 'Object 4' (502) 
    AzRoleAddProperty 'Object 2' (502) 
    AzRoleAddProperty 'Object 5' (502) 
    AzRoleAddProperty 'Object 3' (502) 
    AzRoleAddProperty 'Object 6' (502) 
    AzRoleGetProperty (502) 
        'Object 1'
        'Object 2'
        'Object 3'
        'Object 4'
        'Object 5'
        'Object 6'
    AzOperationDelete 'Object 1' (502) 
    AzOperationDelete 'Object 4' (502) 
    AzOperationDelete 'Object 2' (502) 
    AzOperationDelete 'Object 5' (502) 
    AzOperationDelete 'Object 3' (502) 
    AzOperationDelete 'Object 6' (502) 

Application->Role->Scope - Test linking 'Scope' objects to the object named 'Role A' using propid '503'.
    
Application->Role->Scope - 'Create some objects to link the object to' 
    AzScopeCreate 'Object 1' 
    AzCloseHandle 
    AzScopeCreate 'Object 2' 
    AzCloseHandle 
    AzScopeCreate 'Object 3' 
    AzCloseHandle 
    
Application->Role->Scope - 'Reference an object that doesn't exist' 
    AzRoleGetProperty (503) 
[INVPARM] ObCommonSetProperty: non set property routine
    AzRoleSetProperty (503) (ERROR_INVALID_PARAMETER) 
    AzRoleAddProperty 'random' (503) (ERROR_NOT_FOUND) 
    
Application->Role->Scope - 'Add and remove several objects' 
    AzRoleAddProperty 'Object 2' (503) 
    AzRoleGetProperty (503) 
        'Object 2'
    AzRoleAddProperty 'Object 3' (503) 
    AzRoleGetProperty (503) 
        'Object 2'
        'Object 3'
    AzRoleAddProperty 'Object 1' (503) 
    AzRoleGetProperty (503) 
        'Object 1'
        'Object 2'
        'Object 3'
    AzRoleRemProperty 'Object 1' (503) 
    AzRoleGetProperty (503) 
        'Object 2'
        'Object 3'
    AzRoleRemProperty 'Object 2' (503) 
    AzRoleGetProperty (503) 
        'Object 3'
    
Application->Role->Scope - 'Add an item that already exists' 
    AzRoleAddProperty 'Object 3' (503) (ERROR_ALREADY_EXISTS) 
    AzRoleGetProperty (503) 
        'Object 3'
    AzRoleRemProperty 'Object 3' (503) 
    AzRoleGetProperty (503) 
    
Application->Role->Scope - 'Try more than 4 since reference buckets come in multiples of 4' 
    AzScopeCreate 'Object 4' 
    AzCloseHandle 
    AzScopeCreate 'Object 5' 
    AzCloseHandle 
    AzScopeCreate 'Object 6' 
    AzCloseHandle 
    AzRoleAddProperty 'Object 1' (503) 
    AzRoleAddProperty 'Object 4' (503) 
    AzRoleAddProperty 'Object 2' (503) 
    AzRoleAddProperty 'Object 5' (503) 
    AzRoleAddProperty 'Object 3' (503) 
    AzRoleAddProperty 'Object 6' (503) 
    AzRoleGetProperty (503) 
        'Object 1'
        'Object 2'
        'Object 3'
        'Object 4'
        'Object 5'
        'Object 6'
    AzScopeDelete 'Object 1' (503) 
    AzScopeDelete 'Object 4' (503) 
    AzScopeDelete 'Object 2' (503) 
    AzScopeDelete 'Object 5' (503) 
    AzScopeDelete 'Object 3' (503) 
    AzScopeDelete 'Object 6' (503) 
AzCloseHandle 
AzCloseHandle 
AzCloseHandle 

Application->JunctionPoint - Perform tests of 'JunctionPoint' objects that are children of 'Application' objects



Application->JunctionPoint - 'Application generic Child object test' 
AzInitialize '.\TestFile' (1) 
AzApplicationCreate 'MyApp' 
DupHandle 
GoSub 
    
Application->JunctionPoint - 'Gen object test' 
    AzJunctionPointCreate 'Name1' 
    AzCloseHandle 
    AzJunctionPointEnum (ERROR_INVALID_HANDLE) 
    AzJunctionPointEnum 
        1:
            DupHandle 
            AzCloseHandle 
            AzCloseHandle (ERROR_INVALID_HANDLE) 
            AzCloseHandle (ERROR_INVALID_HANDLE) 
    AzJunctionPointEnum 
        1:
            AzJunctionPointGetProperty (1) 
                'Name1'
            AzJunctionPointGetProperty (2) 
                ''
            AzCloseHandle 
    AzJunctionPointCreate 'Name2' 
    AzJunctionPointEnum 
        1:
            AzJunctionPointGetProperty (1) 
                'Name1'
            AzJunctionPointGetProperty (2) 
                ''
            AzCloseHandle 
        2:
            AzJunctionPointGetProperty (1) 
                'Name2'
            AzJunctionPointGetProperty (2) 
                ''
            AzCloseHandle 
    AzCloseHandle 
    
Application->JunctionPoint - 'Delete an object and make sure it doesn't get enumerated' 
    AzJunctionPointCreate 'Name3' 
    AzJunctionPointDelete 'Name3' 
    AzCloseHandle 
    AzJunctionPointEnum 
        1:
            AzJunctionPointGetProperty (1) 
                'Name1'
            AzJunctionPointGetProperty (2) 
                ''
            AzCloseHandle 
        2:
            AzJunctionPointGetProperty (1) 
                'Name2'
            AzJunctionPointGetProperty (2) 
                ''
            AzCloseHandle 
    
Application->JunctionPoint - 'Create an object whose name equals that of a deleted object' 
    AzJunctionPointCreate 'Name3' 
    AzCloseHandle 
    AzJunctionPointEnum 
        1:
            AzJunctionPointGetProperty (1) 
                'Name1'
            AzJunctionPointGetProperty (2) 
                ''
            AzCloseHandle 
        2:
            AzJunctionPointGetProperty (1) 
                'Name2'
            AzJunctionPointGetProperty (2) 
                ''
            AzCloseHandle 
        4:
            AzJunctionPointGetProperty (1) 
                'Name3'
            AzJunctionPointGetProperty (2) 
                ''
            AzCloseHandle 
    
Application->JunctionPoint - 'Delete an object that isn't on the tail end of the enum list' 
    AzJunctionPointDelete 'Name2' 
    AzJunctionPointEnum 
        1:
            AzJunctionPointGetProperty (1) 
                'Name1'
            AzJunctionPointGetProperty (2) 
                ''
            AzCloseHandle 
        4:
            AzJunctionPointGetProperty (1) 
                'Name3'
            AzJunctionPointGetProperty (2) 
                ''
            AzCloseHandle 
    
Application->JunctionPoint - 'Basic get/set property tests' 
    AzJunctionPointCreate 'Name4' 
    AzJunctionPointGetProperty (1) 
        'Name4'
    AzJunctionPointGetProperty (2) 
        ''
    AzJunctionPointSetProperty 'WasName4' (1) 
    AzJunctionPointSetProperty 'Nam4 Desc' (2) 
    AzJunctionPointGetProperty (1) 
        'WasName4'
    AzJunctionPointGetProperty (2) 
        'Nam4 Desc'
    AzJunctionPointEnum 
        1:
            AzJunctionPointGetProperty (1) 
                'Name1'
            AzJunctionPointGetProperty (2) 
                ''
            AzCloseHandle 
        4:
            AzJunctionPointGetProperty (1) 
                'Name3'
            AzJunctionPointGetProperty (2) 
                ''
            AzCloseHandle 
        5:
            AzJunctionPointGetProperty (1) 
                'WasName4'
            AzJunctionPointGetProperty (2) 
                'Nam4 Desc'
            AzCloseHandle 
    AzCloseHandle 
    
Application->JunctionPoint - 'Open test' 
    AzJunctionPointOpen 'Name1' 
    AzJunctionPointGetProperty (1) 
        'Name1'
    AzCloseHandle 
    AzJunctionPointOpen 'NameBad' (ERROR_NOT_FOUND) 
AzCloseHandle 
AzCloseHandle 



Application->JunctionPoint - 'Test closing the same handle twice' 
AzInitialize '.\TestFile' (1) 
AzApplicationCreate 'MyApp' 
DupHandle 
AzCloseHandle (ERROR_SERVER_HAS_OPEN_HANDLES) 
AzCloseHandle 
AzCloseHandle 



Application->JunctionPoint - 'Test creating two objects with the same name' 
AzInitialize '.\TestFile' (1) 
AzApplicationCreate 'MyApp' 
AzApplicationCreate 'MyApp' (ERROR_ALREADY_EXISTS) 
AzJunctionPointCreate 'Name1' 
AzJunctionPointCreate 'Name1' (ERROR_ALREADY_EXISTS) 
AzCloseHandle 
AzCloseHandle 
AzCloseHandle 



Application->JunctionPoint - 'JunctionPoint object specific tests' 
AzInitialize '.\TestFile' (1) 
AzApplicationCreate 'App 1' 
AzApplicationCreate 'App 3' 
AzCloseHandle 
AzApplicationCreate 'App 2' 
AzJunctionPointCreate 'JunctionPoint 1' 
AzJunctionPointGetProperty (600) 
    ''
AzJunctionPointSetProperty 'App 2' (600) 
AzJunctionPointGetProperty (600) 
    'App 2'

Application->JunctionPoint - 'Ensure setting the attribute really changes it' 
AzJunctionPointSetProperty 'App 3' (600) 
AzJunctionPointGetProperty (600) 
    'App 3'

Application->JunctionPoint - 'Ensure deleting the app deletes the reference' 
AzApplicationDelete 'App 3' 
AzJunctionPointGetProperty (600) 
    ''

Application->JunctionPoint - 'Link a junction point to its own app' 
AzJunctionPointSetProperty 'App 1' (600) (ERROR_DS_LOOP_DETECT) 

Application->JunctionPoint - 'Detect a more complex cycle' 
AzJunctionPointSetProperty 'App 2' (600) 
AzJunctionPointCreate 'JunctionPoint A' 
AzJunctionPointSetProperty 'App 1' (600) (ERROR_DS_LOOP_DETECT) 
AzJunctionPointCreate 'JunctionPoint B' 
AzJunctionPointSetProperty 'App 1' (600) (ERROR_DS_LOOP_DETECT) 
AzJunctionPointSetProperty 'App 1' (600) (ERROR_DS_LOOP_DETECT) 
AzCloseHandle 
AzCloseHandle 
AzCloseHandle 
AzCloseHandle 
AzCloseHandle 
AzCloseHandle 

Scope->Group - Perform tests of 'Group' objects that are children of 'Scope' objects



Scope->Group - 'Scope generic Child object test' 
AzInitialize '.\TestFile' (1) 
AzApplicationCreate 'MyApp' 
AzScopeCreate 'Scope 1' 
DupHandle 
GoSub 
    
Scope->Group - 'Gen object test' 
    AzGroupCreate 'Name1' 
    AzCloseHandle 
    AzGroupEnum (ERROR_INVALID_HANDLE) 
    AzGroupEnum 
        1:
            DupHandle 
            AzCloseHandle 
            AzCloseHandle (ERROR_INVALID_HANDLE) 
            AzCloseHandle (ERROR_INVALID_HANDLE) 
    AzGroupEnum 
        1:
            AzGroupGetProperty (1) 
                'Name1'
            AzGroupGetProperty (2) 
                ''
            AzCloseHandle 
    AzGroupCreate 'Name2' 
    AzGroupEnum 
        1:
            AzGroupGetProperty (1) 
                'Name1'
            AzGroupGetProperty (2) 
                ''
            AzCloseHandle 
        2:
            AzGroupGetProperty (1) 
                'Name2'
            AzGroupGetProperty (2) 
                ''
            AzCloseHandle 
    AzCloseHandle 
    
Scope->Group - 'Delete an object and make sure it doesn't get enumerated' 
    AzGroupCreate 'Name3' 
    AzGroupDelete 'Name3' 
    AzCloseHandle 
    AzGroupEnum 
        1:
            AzGroupGetProperty (1) 
                'Name1'
            AzGroupGetProperty (2) 
                ''
            AzCloseHandle 
        2:
            AzGroupGetProperty (1) 
                'Name2'
            AzGroupGetProperty (2) 
                ''
            AzCloseHandle 
    
Scope->Group - 'Create an object whose name equals that of a deleted object' 
    AzGroupCreate 'Name3' 
    AzCloseHandle 
    AzGroupEnum 
        1:
            AzGroupGetProperty (1) 
                'Name1'
            AzGroupGetProperty (2) 
                ''
            AzCloseHandle 
        2:
            AzGroupGetProperty (1) 
                'Name2'
            AzGroupGetProperty (2) 
                ''
            AzCloseHandle 
        4:
            AzGroupGetProperty (1) 
                'Name3'
            AzGroupGetProperty (2) 
                ''
            AzCloseHandle 
    
Scope->Group - 'Delete an object that isn't on the tail end of the enum list' 
    AzGroupDelete 'Name2' 
    AzGroupEnum 
        1:
            AzGroupGetProperty (1) 
                'Name1'
            AzGroupGetProperty (2) 
                ''
            AzCloseHandle 
        4:
            AzGroupGetProperty (1) 
                'Name3'
            AzGroupGetProperty (2) 
                ''
            AzCloseHandle 
    
Scope->Group - 'Basic get/set property tests' 
    AzGroupCreate 'Name4' 
    AzGroupGetProperty (1) 
        'Name4'
    AzGroupGetProperty (2) 
        ''
    AzGroupSetProperty 'WasName4' (1) 
    AzGroupSetProperty 'Nam4 Desc' (2) 
    AzGroupGetProperty (1) 
        'WasName4'
    AzGroupGetProperty (2) 
        'Nam4 Desc'
    AzGroupEnum 
        1:
            AzGroupGetProperty (1) 
                'Name1'
            AzGroupGetProperty (2) 
                ''
            AzCloseHandle 
        4:
            AzGroupGetProperty (1) 
                'Name3'
            AzGroupGetProperty (2) 
                ''
            AzCloseHandle 
        5:
            AzGroupGetProperty (1) 
                'WasName4'
            AzGroupGetProperty (2) 
                'Nam4 Desc'
            AzCloseHandle 
    AzCloseHandle 
    
Scope->Group - 'Open test' 
    AzGroupOpen 'Name1' 
    AzGroupGetProperty (1) 
        'Name1'
    AzCloseHandle 
    AzGroupOpen 'NameBad' (ERROR_NOT_FOUND) 
AzCloseHandle 
AzCloseHandle 
AzCloseHandle 



Scope->Group - 'Test creating two objects with the same name' 
AzInitialize '.\TestFile' (1) 
AzApplicationCreate 'MyApp' 
AzScopeCreate 'Scope 1' 
AzGroupCreate 'Name1' 
AzGroupCreate 'Name1' (ERROR_ALREADY_EXISTS) 
AzCloseHandle 
AzCloseHandle 
AzCloseHandle 
AzCloseHandle 



Scope->Group - 'Group objects that are children of an application' 
AzInitialize '.\TestFile' (1) 
AzApplicationCreate 'MyApp' 
AzScopeCreate 'Scope 1' 
DupHandle 
GoSub 
    
Scope->Group - 'Group object specific tests' 
    AzGroupCreate 'Group A' 
    
Scope->Group - 'Create some groups to link the group to' 
    AzGroupCreate 'Group 1' 
    AzCloseHandle 
    AzGroupCreate 'Group 2' 
    AzCloseHandle 
    AzGroupCreate 'Group 3' 
    AzCloseHandle 
    
Scope->Group - 'Add membership to a group with no grouptype' 
[INVPARM] AzpGroupAddPropertyItem: invalid group type 0
    AzGroupAddProperty 'Group 1' (401) (ERROR_INVALID_PARAMETER) 
[INVPARM] AzpGroupAddPropertyItem: invalid group type 0
    AzGroupAddProperty '' (404) (ERROR_INVALID_PARAMETER) 
[INVPARM] AzpGroupGetProperty: invalid grouptype 8
    AzGroupSetProperty '8' (400) (ERROR_INVALID_PARAMETER) 
    AzGroupSetProperty '2' (400) 
    
Scope->Group - 'Reference ourself' 
    AzGroupGetProperty (401) 
    AzGroupGetProperty (404) 
[INVPARM] Reference to self
    AzGroupAddProperty 'Group A' (401) (ERROR_DS_LOOP_DETECT) 
    
Scope->Group->Group - Test linking 'Group' objects to the object named 'Group A' using propid '401'.
        
Scope->Group->Group - 'Create some objects to link the object to' 
        AzGroupCreate 'Object 1' 
        AzCloseHandle 
        AzGroupCreate 'Object 2' 
        AzCloseHandle 
        AzGroupCreate 'Object 3' 
        AzCloseHandle 
        
Scope->Group->Group - 'Reference an object that doesn't exist' 
        AzGroupGetProperty (401) 
[INVPARM] AzpGroupSetProperty: invalid propid 401
        AzGroupSetProperty (401) (ERROR_INVALID_PARAMETER) 
        AzGroupAddProperty 'random' (401) (ERROR_NOT_FOUND) 
        
Scope->Group->Group - 'Add and remove several objects' 
        AzGroupAddProperty 'Object 2' (401) 
        AzGroupGetProperty (401) 
            'Object 2'
        AzGroupAddProperty 'Object 3' (401) 
        AzGroupGetProperty (401) 
            'Object 2'
            'Object 3'
        AzGroupAddProperty 'Object 1' (401) 
        AzGroupGetProperty (401) 
            'Object 1'
            'Object 2'
            'Object 3'
        AzGroupRemProperty 'Object 1' (401) 
        AzGroupGetProperty (401) 
            'Object 2'
            'Object 3'
        AzGroupRemProperty 'Object 2' (401) 
        AzGroupGetProperty (401) 
            'Object 3'
        
Scope->Group->Group - 'Add an item that already exists' 
        AzGroupAddProperty 'Object 3' (401) (ERROR_ALREADY_EXISTS) 
        AzGroupGetProperty (401) 
            'Object 3'
        AzGroupRemProperty 'Object 3' (401) 
        AzGroupGetProperty (401) 
        
Scope->Group->Group - 'Try more than 4 since reference buckets come in multiples of 4' 
        AzGroupCreate 'Object 4' 
        AzCloseHandle 
        AzGroupCreate 'Object 5' 
        AzCloseHandle 
        AzGroupCreate 'Object 6' 
        AzCloseHandle 
        AzGroupAddProperty 'Object 1' (401) 
        AzGroupAddProperty 'Object 4' (401) 
        AzGroupAddProperty 'Object 2' (401) 
        AzGroupAddProperty 'Object 5' (401) 
        AzGroupAddProperty 'Object 3' (401) 
        AzGroupAddProperty 'Object 6' (401) 
        AzGroupGetProperty (401) 
            'Object 1'
            'Object 2'
            'Object 3'
            'Object 4'
            'Object 5'
            'Object 6'
        AzGroupDelete 'Object 1' (401) 
        AzGroupDelete 'Object 4' (401) 
        AzGroupDelete 'Object 2' (401) 
        AzGroupDelete 'Object 5' (401) 
        AzGroupDelete 'Object 3' (401) 
        AzGroupDelete 'Object 6' (401) 
    
Scope->Group->Sid - Test linking 'Sid' objects to the object named 'Group A' using propid '404'.
        
Scope->Group->Sid - 'Add and remove several links to sids' 
        AzGroupAddProperty '' (404) 
        AzGroupGetProperty (404) 
            'S-1-1000-2'
        AzGroupAddProperty '' (404) 
        AzGroupGetProperty (404) 
            'S-1-1000-2'
            'S-1-1000-3'
        AzGroupAddProperty '' (404) 
        AzGroupGetProperty (404) 
            'S-1-1000-1'
            'S-1-1000-2'
            'S-1-1000-3'
        AzGroupRemProperty '' (404) 
        AzGroupGetProperty (404) 
            'S-1-1000-2'
            'S-1-1000-3'
        AzGroupRemProperty '' (404) 
        AzGroupGetProperty (404) 
            'S-1-1000-3'
        
Scope->Group->Sid - 'Add a link that already exists' 
        AzGroupAddProperty '' (404) (ERROR_ALREADY_EXISTS) 
        AzGroupGetProperty (404) 
            'S-1-1000-3'
        AzGroupRemProperty '' (404) 
        AzGroupGetProperty (404) 
        
Scope->Group->Sid - 'Try more than 4 since reference buckets come in multiples of 4' 
        AzGroupAddProperty '' (404) 
        AzGroupAddProperty '' (404) 
        AzGroupAddProperty '' (404) 
        AzGroupAddProperty '' (404) 
        AzGroupAddProperty '' (404) 
        AzGroupAddProperty '' (404) 
        AzGroupGetProperty (404) 
            'S-1-1000-1'
            'S-1-1000-2'
            'S-1-1000-3'
            'S-1-1000-4'
            'S-1-1000-5'
            'S-1-1000-6'
    
Scope->Group - 'Same as above, but for the non-members attribute' 
    AzGroupGetProperty (402) 
    AzGroupGetProperty (405) 
[INVPARM] Reference to self
    AzGroupAddProperty 'Group A' (402) (ERROR_DS_LOOP_DETECT) 
    
Scope->Group->Group - Test linking 'Group' objects to the object named 'Group A' using propid '402'.
        
Scope->Group->Group - 'Create some objects to link the object to' 
        AzGroupCreate 'Object 1' 
        AzCloseHandle 
        AzGroupCreate 'Object 2' 
        AzCloseHandle 
        AzGroupCreate 'Object 3' 
        AzCloseHandle 
        
Scope->Group->Group - 'Reference an object that doesn't exist' 
        AzGroupGetProperty (402) 
[INVPARM] AzpGroupSetProperty: invalid propid 402
        AzGroupSetProperty (402) (ERROR_INVALID_PARAMETER) 
        AzGroupAddProperty 'random' (402) (ERROR_NOT_FOUND) 
        
Scope->Group->Group - 'Add and remove several objects' 
        AzGroupAddProperty 'Object 2' (402) 
        AzGroupGetProperty (402) 
            'Object 2'
        AzGroupAddProperty 'Object 3' (402) 
        AzGroupGetProperty (402) 
            'Object 2'
            'Object 3'
        AzGroupAddProperty 'Object 1' (402) 
        AzGroupGetProperty (402) 
            'Object 1'
            'Object 2'
            'Object 3'
        AzGroupRemProperty 'Object 1' (402) 
        AzGroupGetProperty (402) 
            'Object 2'
            'Object 3'
        AzGroupRemProperty 'Object 2' (402) 
        AzGroupGetProperty (402) 
            'Object 3'
        
Scope->Group->Group - 'Add an item that already exists' 
        AzGroupAddProperty 'Object 3' (402) (ERROR_ALREADY_EXISTS) 
        AzGroupGetProperty (402) 
            'Object 3'
        AzGroupRemProperty 'Object 3' (402) 
        AzGroupGetProperty (402) 
        
Scope->Group->Group - 'Try more than 4 since reference buckets come in multiples of 4' 
        AzGroupCreate 'Object 4' 
        AzCloseHandle 
        AzGroupCreate 'Object 5' 
        AzCloseHandle 
        AzGroupCreate 'Object 6' 
        AzCloseHandle 
        AzGroupAddProperty 'Object 1' (402) 
        AzGroupAddProperty 'Object 4' (402) 
        AzGroupAddProperty 'Object 2' (402) 
        AzGroupAddProperty 'Object 5' (402) 
        AzGroupAddProperty 'Object 3' (402) 
        AzGroupAddProperty 'Object 6' (402) 
        AzGroupGetProperty (402) 
            'Object 1'
            'Object 2'
            'Object 3'
            'Object 4'
            'Object 5'
            'Object 6'
        AzGroupDelete 'Object 1' (402) 
        AzGroupDelete 'Object 4' (402) 
        AzGroupDelete 'Object 2' (402) 
        AzGroupDelete 'Object 5' (402) 
        AzGroupDelete 'Object 3' (402) 
        AzGroupDelete 'Object 6' (402) 
    
Scope->Group->Sid - Test linking 'Sid' objects to the object named 'Group A' using propid '405'.
        
Scope->Group->Sid - 'Add and remove several links to sids' 
        AzGroupAddProperty '' (405) 
        AzGroupGetProperty (405) 
            'S-1-1000-2'
        AzGroupAddProperty '' (405) 
        AzGroupGetProperty (405) 
            'S-1-1000-2'
            'S-1-1000-3'
        AzGroupAddProperty '' (405) 
        AzGroupGetProperty (405) 
            'S-1-1000-1'
            'S-1-1000-2'
            'S-1-1000-3'
        AzGroupRemProperty '' (405) 
        AzGroupGetProperty (405) 
            'S-1-1000-2'
            'S-1-1000-3'
        AzGroupRemProperty '' (405) 
        AzGroupGetProperty (405) 
            'S-1-1000-3'
        
Scope->Group->Sid - 'Add a link that already exists' 
        AzGroupAddProperty '' (405) (ERROR_ALREADY_EXISTS) 
        AzGroupGetProperty (405) 
            'S-1-1000-3'
        AzGroupRemProperty '' (405) 
        AzGroupGetProperty (405) 
        
Scope->Group->Sid - 'Try more than 4 since reference buckets come in multiples of 4' 
        AzGroupAddProperty '' (405) 
        AzGroupAddProperty '' (405) 
        AzGroupAddProperty '' (405) 
        AzGroupAddProperty '' (405) 
        AzGroupAddProperty '' (405) 
        AzGroupAddProperty '' (405) 
        AzGroupGetProperty (405) 
            'S-1-1000-1'
            'S-1-1000-2'
            'S-1-1000-3'
            'S-1-1000-4'
            'S-1-1000-5'
            'S-1-1000-6'
    
Scope->Group - 'Set LdapQuery string' 
    AzGroupGetProperty (403) 
        ''
[INVPARM] AzpGroupSetProperty: can't set ldap query before group type
    AzGroupSetProperty 'TheQuery' (403) (ERROR_INVALID_PARAMETER) 
    AzGroupSetProperty '1' (400) 
    AzGroupSetProperty 'TheQuery' (403) 
    AzGroupGetProperty (403) 
        'TheQuery'
    AzGroupSetProperty '2' (400) 
[INVPARM] AzpGroupSetProperty: can't set ldap query before group type
    AzGroupSetProperty 'TheQuery' (403) (ERROR_INVALID_PARAMETER) 
    AzGroupSetProperty '' (403) 
    
Scope->Group - 'Test loops' 
    AzGroupCreate 'Group B' 
    AzGroupSetProperty '2' (400) 
    AzGroupAddProperty 'Group B' (401) 
    AzGroupAddProperty 'Group A' (401) (ERROR_DS_LOOP_DETECT) 
    AzGroupAddProperty 'Group B' (402) 
    AzGroupAddProperty 'Group A' (402) (ERROR_DS_LOOP_DETECT) 
    AzGroupRemProperty 'Group B' (402) 
    AzGroupRemProperty 'Group B' (401) 
    AzCloseHandle 
    AzCloseHandle 

Scope->Group - 'Test linking to groups that are children of the same admin manager as this group.' 
AzGroupOpen 'Group A' 

Scope->Group->Group - Test linking 'Group' objects to the object named 'Group A' using propid '401'.
    
Scope->Group->Group - 'Create some objects to link the object to' 
    AzGroupCreate 'Object 1' 
    AzCloseHandle 
    AzGroupCreate 'Object 2' 
    AzCloseHandle 
    AzGroupCreate 'Object 3' 
    AzCloseHandle 
    
Scope->Group->Group - 'Reference an object that doesn't exist' 
    AzGroupGetProperty (401) 
[INVPARM] AzpGroupSetProperty: invalid propid 401
    AzGroupSetProperty (401) (ERROR_INVALID_PARAMETER) 
    AzGroupAddProperty 'random' (401) (ERROR_NOT_FOUND) 
    
Scope->Group->Group - 'Add and remove several objects' 
    AzGroupAddProperty 'Object 2' (401) 
    AzGroupGetProperty (401) 
        'Object 2'
    AzGroupAddProperty 'Object 3' (401) 
    AzGroupGetProperty (401) 
        'Object 2'
        'Object 3'
    AzGroupAddProperty 'Object 1' (401) 
    AzGroupGetProperty (401) 
        'Object 1'
        'Object 2'
        'Object 3'
    AzGroupRemProperty 'Object 1' (401) 
    AzGroupGetProperty (401) 
        'Object 2'
        'Object 3'
    AzGroupRemProperty 'Object 2' (401) 
    AzGroupGetProperty (401) 
        'Object 3'
    
Scope->Group->Group - 'Add an item that already exists' 
    AzGroupAddProperty 'Object 3' (401) (ERROR_ALREADY_EXISTS) 
    AzGroupGetProperty (401) 
        'Object 3'
    AzGroupRemProperty 'Object 3' (401) 
    AzGroupGetProperty (401) 
    
Scope->Group->Group - 'Try more than 4 since reference buckets come in multiples of 4' 
    AzGroupCreate 'Object 4' 
    AzCloseHandle 
    AzGroupCreate 'Object 5' 
    AzCloseHandle 
    AzGroupCreate 'Object 6' 
    AzCloseHandle 
    AzGroupAddProperty 'Object 1' (401) 
    AzGroupAddProperty 'Object 4' (401) 
    AzGroupAddProperty 'Object 2' (401) 
    AzGroupAddProperty 'Object 5' (401) 
    AzGroupAddProperty 'Object 3' (401) 
    AzGroupAddProperty 'Object 6' (401) 
    AzGroupGetProperty (401) 
        'Object 1'
        'Object 2'
        'Object 3'
        'Object 4'
        'Object 5'
        'Object 6'
    AzGroupDelete 'Object 1' (401) 
    AzGroupDelete 'Object 4' (401) 
    AzGroupDelete 'Object 2' (401) 
    AzGroupDelete 'Object 5' (401) 
    AzGroupDelete 'Object 3' (401) 
    AzGroupDelete 'Object 6' (401) 

Scope->Group->Group - Test linking 'Group' objects to the object named 'Group A' using propid '402'.
    
Scope->Group->Group - 'Create some objects to link the object to' 
    AzGroupCreate 'Object 1' 
    AzCloseHandle 
    AzGroupCreate 'Object 2' 
    AzCloseHandle 
    AzGroupCreate 'Object 3' 
    AzCloseHandle 
    
Scope->Group->Group - 'Reference an object that doesn't exist' 
    AzGroupGetProperty (402) 
[INVPARM] AzpGroupSetProperty: invalid propid 402
    AzGroupSetProperty (402) (ERROR_INVALID_PARAMETER) 
    AzGroupAddProperty 'random' (402) (ERROR_NOT_FOUND) 
    
Scope->Group->Group - 'Add and remove several objects' 
    AzGroupAddProperty 'Object 2' (402) 
    AzGroupGetProperty (402) 
        'Object 2'
    AzGroupAddProperty 'Object 3' (402) 
    AzGroupGetProperty (402) 
        'Object 2'
        'Object 3'
    AzGroupAddProperty 'Object 1' (402) 
    AzGroupGetProperty (402) 
        'Object 1'
        'Object 2'
        'Object 3'
    AzGroupRemProperty 'Object 1' (402) 
    AzGroupGetProperty (402) 
        'Object 2'
        'Object 3'
    AzGroupRemProperty 'Object 2' (402) 
    AzGroupGetProperty (402) 
        'Object 3'
    
Scope->Group->Group - 'Add an item that already exists' 
    AzGroupAddProperty 'Object 3' (402) (ERROR_ALREADY_EXISTS) 
    AzGroupGetProperty (402) 
        'Object 3'
    AzGroupRemProperty 'Object 3' (402) 
    AzGroupGetProperty (402) 
    
Scope->Group->Group - 'Try more than 4 since reference buckets come in multiples of 4' 
    AzGroupCreate 'Object 4' 
    AzCloseHandle 
    AzGroupCreate 'Object 5' 
    AzCloseHandle 
    AzGroupCreate 'Object 6' 
    AzCloseHandle 
    AzGroupAddProperty 'Object 1' (402) 
    AzGroupAddProperty 'Object 4' (402) 
    AzGroupAddProperty 'Object 2' (402) 
    AzGroupAddProperty 'Object 5' (402) 
    AzGroupAddProperty 'Object 3' (402) 
    AzGroupAddProperty 'Object 6' (402) 
    AzGroupGetProperty (402) 
        'Object 1'
        'Object 2'
        'Object 3'
        'Object 4'
        'Object 5'
        'Object 6'
    AzGroupDelete 'Object 1' (402) 
    AzGroupDelete 'Object 4' (402) 
    AzGroupDelete 'Object 2' (402) 
    AzGroupDelete 'Object 5' (402) 
    AzGroupDelete 'Object 3' (402) 
    AzGroupDelete 'Object 6' (402) 
AzCloseHandle 

Scope->Group - 'Test linking to groups that are children of the same application as this group.' 
AzGroupOpen 'Group A' 

Scope->Group->Group - Test linking 'Group' objects to the object named 'Group A' using propid '401'.
    
Scope->Group->Group - 'Create some objects to link the object to' 
    AzGroupCreate 'Object 1' 
    AzCloseHandle 
    AzGroupCreate 'Object 2' 
    AzCloseHandle 
    AzGroupCreate 'Object 3' 
    AzCloseHandle 
    
Scope->Group->Group - 'Reference an object that doesn't exist' 
    AzGroupGetProperty (401) 
[INVPARM] AzpGroupSetProperty: invalid propid 401
    AzGroupSetProperty (401) (ERROR_INVALID_PARAMETER) 
    AzGroupAddProperty 'random' (401) (ERROR_NOT_FOUND) 
    
Scope->Group->Group - 'Add and remove several objects' 
    AzGroupAddProperty 'Object 2' (401) 
    AzGroupGetProperty (401) 
        'Object 2'
    AzGroupAddProperty 'Object 3' (401) 
    AzGroupGetProperty (401) 
        'Object 2'
        'Object 3'
    AzGroupAddProperty 'Object 1' (401) 
    AzGroupGetProperty (401) 
        'Object 1'
        'Object 2'
        'Object 3'
    AzGroupRemProperty 'Object 1' (401) 
    AzGroupGetProperty (401) 
        'Object 2'
        'Object 3'
    AzGroupRemProperty 'Object 2' (401) 
    AzGroupGetProperty (401) 
        'Object 3'
    
Scope->Group->Group - 'Add an item that already exists' 
    AzGroupAddProperty 'Object 3' (401) (ERROR_ALREADY_EXISTS) 
    AzGroupGetProperty (401) 
        'Object 3'
    AzGroupRemProperty 'Object 3' (401) 
    AzGroupGetProperty (401) 
    
Scope->Group->Group - 'Try more than 4 since reference buckets come in multiples of 4' 
    AzGroupCreate 'Object 4' 
    AzCloseHandle 
    AzGroupCreate 'Object 5' 
    AzCloseHandle 
    AzGroupCreate 'Object 6' 
    AzCloseHandle 
    AzGroupAddProperty 'Object 1' (401) 
    AzGroupAddProperty 'Object 4' (401) 
    AzGroupAddProperty 'Object 2' (401) 
    AzGroupAddProperty 'Object 5' (401) 
    AzGroupAddProperty 'Object 3' (401) 
    AzGroupAddProperty 'Object 6' (401) 
    AzGroupGetProperty (401) 
        'Object 1'
        'Object 2'
        'Object 3'
        'Object 4'
        'Object 5'
        'Object 6'
    AzGroupDelete 'Object 1' (401) 
    AzGroupDelete 'Object 4' (401) 
    AzGroupDelete 'Object 2' (401) 
    AzGroupDelete 'Object 5' (401) 
    AzGroupDelete 'Object 3' (401) 
    AzGroupDelete 'Object 6' (401) 

Scope->Group->Group - Test linking 'Group' objects to the object named 'Group A' using propid '402'.
    
Scope->Group->Group - 'Create some objects to link the object to' 
    AzGroupCreate 'Object 1' 
    AzCloseHandle 
    AzGroupCreate 'Object 2' 
    AzCloseHandle 
    AzGroupCreate 'Object 3' 
    AzCloseHandle 
    
Scope->Group->Group - 'Reference an object that doesn't exist' 
    AzGroupGetProperty (402) 
[INVPARM] AzpGroupSetProperty: invalid propid 402
    AzGroupSetProperty (402) (ERROR_INVALID_PARAMETER) 
    AzGroupAddProperty 'random' (402) (ERROR_NOT_FOUND) 
    
Scope->Group->Group - 'Add and remove several objects' 
    AzGroupAddProperty 'Object 2' (402) 
    AzGroupGetProperty (402) 
        'Object 2'
    AzGroupAddProperty 'Object 3' (402) 
    AzGroupGetProperty (402) 
        'Object 2'
        'Object 3'
    AzGroupAddProperty 'Object 1' (402) 
    AzGroupGetProperty (402) 
        'Object 1'
        'Object 2'
        'Object 3'
    AzGroupRemProperty 'Object 1' (402) 
    AzGroupGetProperty (402) 
        'Object 2'
        'Object 3'
    AzGroupRemProperty 'Object 2' (402) 
    AzGroupGetProperty (402) 
        'Object 3'
    
Scope->Group->Group - 'Add an item that already exists' 
    AzGroupAddProperty 'Object 3' (402) (ERROR_ALREADY_EXISTS) 
    AzGroupGetProperty (402) 
        'Object 3'
    AzGroupRemProperty 'Object 3' (402) 
    AzGroupGetProperty (402) 
    
Scope->Group->Group - 'Try more than 4 since reference buckets come in multiples of 4' 
    AzGroupCreate 'Object 4' 
    AzCloseHandle 
    AzGroupCreate 'Object 5' 
    AzCloseHandle 
    AzGroupCreate 'Object 6' 
    AzCloseHandle 
    AzGroupAddProperty 'Object 1' (402) 
    AzGroupAddProperty 'Object 4' (402) 
    AzGroupAddProperty 'Object 2' (402) 
    AzGroupAddProperty 'Object 5' (402) 
    AzGroupAddProperty 'Object 3' (402) 
    AzGroupAddProperty 'Object 6' (402) 
    AzGroupGetProperty (402) 
        'Object 1'
        'Object 2'
        'Object 3'
        'Object 4'
        'Object 5'
        'Object 6'
    AzGroupDelete 'Object 1' (402) 
    AzGroupDelete 'Object 4' (402) 
    AzGroupDelete 'Object 2' (402) 
    AzGroupDelete 'Object 5' (402) 
    AzGroupDelete 'Object 3' (402) 
    AzGroupDelete 'Object 6' (402) 
AzCloseHandle 
AzCloseHandle 
AzCloseHandle 
AzCloseHandle 

Scope->Role - Perform tests of 'Role' objects that are children of 'Scope' objects



Scope->Role - 'Scope generic Child object test' 
AzInitialize '.\TestFile' (1) 
AzApplicationCreate 'MyApp' 
AzScopeCreate 'Scope 1' 
DupHandle 
GoSub 
    
Scope->Role - 'Gen object test' 
    AzRoleCreate 'Name1' 
    AzCloseHandle 
    AzRoleEnum (ERROR_INVALID_HANDLE) 
    AzRoleEnum 
        1:
            DupHandle 
            AzCloseHandle 
            AzCloseHandle (ERROR_INVALID_HANDLE) 
            AzCloseHandle (ERROR_INVALID_HANDLE) 
    AzRoleEnum 
        1:
            AzRoleGetProperty (1) 
                'Name1'
            AzRoleGetProperty (2) 
                ''
            AzCloseHandle 
    AzRoleCreate 'Name2' 
    AzRoleEnum 
        1:
            AzRoleGetProperty (1) 
                'Name1'
            AzRoleGetProperty (2) 
                ''
            AzCloseHandle 
        2:
            AzRoleGetProperty (1) 
                'Name2'
            AzRoleGetProperty (2) 
                ''
            AzCloseHandle 
    AzCloseHandle 
    
Scope->Role - 'Delete an object and make sure it doesn't get enumerated' 
    AzRoleCreate 'Name3' 
    AzRoleDelete 'Name3' 
    AzCloseHandle 
    AzRoleEnum 
        1:
            AzRoleGetProperty (1) 
                'Name1'
            AzRoleGetProperty (2) 
                ''
            AzCloseHandle 
        2:
            AzRoleGetProperty (1) 
                'Name2'
            AzRoleGetProperty (2) 
                ''
            AzCloseHandle 
    
Scope->Role - 'Create an object whose name equals that of a deleted object' 
    AzRoleCreate 'Name3' 
    AzCloseHandle 
    AzRoleEnum 
        1:
            AzRoleGetProperty (1) 
                'Name1'
            AzRoleGetProperty (2) 
                ''
            AzCloseHandle 
        2:
            AzRoleGetProperty (1) 
                'Name2'
            AzRoleGetProperty (2) 
                ''
            AzCloseHandle 
        4:
            AzRoleGetProperty (1) 
                'Name3'
            AzRoleGetProperty (2) 
                ''
            AzCloseHandle 
    
Scope->Role - 'Delete an object that isn't on the tail end of the enum list' 
    AzRoleDelete 'Name2' 
    AzRoleEnum 
        1:
            AzRoleGetProperty (1) 
                'Name1'
            AzRoleGetProperty (2) 
                ''
            AzCloseHandle 
        4:
            AzRoleGetProperty (1) 
                'Name3'
            AzRoleGetProperty (2) 
                ''
            AzCloseHandle 
    
Scope->Role - 'Basic get/set property tests' 
    AzRoleCreate 'Name4' 
    AzRoleGetProperty (1) 
        'Name4'
    AzRoleGetProperty (2) 
        ''
    AzRoleSetProperty 'WasName4' (1) 
    AzRoleSetProperty 'Nam4 Desc' (2) 
    AzRoleGetProperty (1) 
        'WasName4'
    AzRoleGetProperty (2) 
        'Nam4 Desc'
    AzRoleEnum 
        1:
            AzRoleGetProperty (1) 
                'Name1'
            AzRoleGetProperty (2) 
                ''
            AzCloseHandle 
        4:
            AzRoleGetProperty (1) 
                'Name3'
            AzRoleGetProperty (2) 
                ''
            AzCloseHandle 
        5:
            AzRoleGetProperty (1) 
                'WasName4'
            AzRoleGetProperty (2) 
                'Nam4 Desc'
            AzCloseHandle 
    AzCloseHandle 
    
Scope->Role - 'Open test' 
    AzRoleOpen 'Name1' 
    AzRoleGetProperty (1) 
        'Name1'
    AzCloseHandle 
    AzRoleOpen 'NameBad' (ERROR_NOT_FOUND) 
AzCloseHandle 
AzCloseHandle 
AzCloseHandle 



Scope->Role - 'Test creating two objects with the same name' 
AzInitialize '.\TestFile' (1) 
AzApplicationCreate 'MyApp' 
AzScopeCreate 'Scope 1' 
AzRoleCreate 'Name1' 
AzRoleCreate 'Name1' (ERROR_ALREADY_EXISTS) 
AzCloseHandle 
AzCloseHandle 
AzCloseHandle 
AzCloseHandle 



Scope->Role - 'Role objects that are children of an application' 
AzInitialize '.\TestFile' (1) 
AzApplicationCreate 'MyApp' 
AzScopeCreate 'Scope 1' 
AzRoleCreate 'Role A' 

Scope->Role - 'Test linking to groups that are children of the same scope object as the role object.' 

Scope->Role->Group - Test linking 'Group' objects to the object named 'Role A' using propid '500'.
    
Scope->Role->Group - 'Create some objects to link the object to' 
    AzGroupCreate 'Object 1' 
    AzCloseHandle 
    AzGroupCreate 'Object 2' 
    AzCloseHandle 
    AzGroupCreate 'Object 3' 
    AzCloseHandle 
    
Scope->Role->Group - 'Reference an object that doesn't exist' 
    AzRoleGetProperty (500) 
[INVPARM] ObCommonSetProperty: non set property routine
    AzRoleSetProperty (500) (ERROR_INVALID_PARAMETER) 
    AzRoleAddProperty 'random' (500) (ERROR_NOT_FOUND) 
    
Scope->Role->Group - 'Add and remove several objects' 
    AzRoleAddProperty 'Object 2' (500) 
    AzRoleGetProperty (500) 
        'Object 2'
    AzRoleAddProperty 'Object 3' (500) 
    AzRoleGetProperty (500) 
        'Object 2'
        'Object 3'
    AzRoleAddProperty 'Object 1' (500) 
    AzRoleGetProperty (500) 
        'Object 1'
        'Object 2'
        'Object 3'
    AzRoleRemProperty 'Object 1' (500) 
    AzRoleGetProperty (500) 
        'Object 2'
        'Object 3'
    AzRoleRemProperty 'Object 2' (500) 
    AzRoleGetProperty (500) 
        'Object 3'
    
Scope->Role->Group - 'Add an item that already exists' 
    AzRoleAddProperty 'Object 3' (500) (ERROR_ALREADY_EXISTS) 
    AzRoleGetProperty (500) 
        'Object 3'
    AzRoleRemProperty 'Object 3' (500) 
    AzRoleGetProperty (500) 
    
Scope->Role->Group - 'Try more than 4 since reference buckets come in multiples of 4' 
    AzGroupCreate 'Object 4' 
    AzCloseHandle 
    AzGroupCreate 'Object 5' 
    AzCloseHandle 
    AzGroupCreate 'Object 6' 
    AzCloseHandle 
    AzRoleAddProperty 'Object 1' (500) 
    AzRoleAddProperty 'Object 4' (500) 
    AzRoleAddProperty 'Object 2' (500) 
    AzRoleAddProperty 'Object 5' (500) 
    AzRoleAddProperty 'Object 3' (500) 
    AzRoleAddProperty 'Object 6' (500) 
    AzRoleGetProperty (500) 
        'Object 1'
        'Object 2'
        'Object 3'
        'Object 4'
        'Object 5'
        'Object 6'
    AzGroupDelete 'Object 1' (500) 
    AzGroupDelete 'Object 4' (500) 
    AzGroupDelete 'Object 2' (500) 
    AzGroupDelete 'Object 5' (500) 
    AzGroupDelete 'Object 3' (500) 
    AzGroupDelete 'Object 6' (500) 

Scope->Role - 'Test linking to groups that are children of the same application as the role object.' 

Scope->Role->Group - Test linking 'Group' objects to the object named 'Role A' using propid '500'.
    
Scope->Role->Group - 'Create some objects to link the object to' 
    AzGroupCreate 'Object 1' 
    AzCloseHandle 
    AzGroupCreate 'Object 2' 
    AzCloseHandle 
    AzGroupCreate 'Object 3' 
    AzCloseHandle 
    
Scope->Role->Group - 'Reference an object that doesn't exist' 
    AzRoleGetProperty (500) 
[INVPARM] ObCommonSetProperty: non set property routine
    AzRoleSetProperty (500) (ERROR_INVALID_PARAMETER) 
    AzRoleAddProperty 'random' (500) (ERROR_NOT_FOUND) 
    
Scope->Role->Group - 'Add and remove several objects' 
    AzRoleAddProperty 'Object 2' (500) 
    AzRoleGetProperty (500) 
        'Object 2'
    AzRoleAddProperty 'Object 3' (500) 
    AzRoleGetProperty (500) 
        'Object 2'
        'Object 3'
    AzRoleAddProperty 'Object 1' (500) 
    AzRoleGetProperty (500) 
        'Object 1'
        'Object 2'
        'Object 3'
    AzRoleRemProperty 'Object 1' (500) 
    AzRoleGetProperty (500) 
        'Object 2'
        'Object 3'
    AzRoleRemProperty 'Object 2' (500) 
    AzRoleGetProperty (500) 
        'Object 3'
    
Scope->Role->Group - 'Add an item that already exists' 
    AzRoleAddProperty 'Object 3' (500) (ERROR_ALREADY_EXISTS) 
    AzRoleGetProperty (500) 
        'Object 3'
    AzRoleRemProperty 'Object 3' (500) 
    AzRoleGetProperty (500) 
    
Scope->Role->Group - 'Try more than 4 since reference buckets come in multiples of 4' 
    AzGroupCreate 'Object 4' 
    AzCloseHandle 
    AzGroupCreate 'Object 5' 
    AzCloseHandle 
    AzGroupCreate 'Object 6' 
    AzCloseHandle 
    AzRoleAddProperty 'Object 1' (500) 
    AzRoleAddProperty 'Object 4' (500) 
    AzRoleAddProperty 'Object 2' (500) 
    AzRoleAddProperty 'Object 5' (500) 
    AzRoleAddProperty 'Object 3' (500) 
    AzRoleAddProperty 'Object 6' (500) 
    AzRoleGetProperty (500) 
        'Object 1'
        'Object 2'
        'Object 3'
        'Object 4'
        'Object 5'
        'Object 6'
    AzGroupDelete 'Object 1' (500) 
    AzGroupDelete 'Object 4' (500) 
    AzGroupDelete 'Object 2' (500) 
    AzGroupDelete 'Object 5' (500) 
    AzGroupDelete 'Object 3' (500) 
    AzGroupDelete 'Object 6' (500) 

Scope->Role - 'Test linking to SIDs.' 

Scope->Role->Sid - Test linking 'Sid' objects to the object named 'Role A' using propid '501'.
    
Scope->Role->Sid - 'Add and remove several links to sids' 
    AzRoleAddProperty '' (501) 
    AzRoleGetProperty (501) 
        'S-1-1000-2'
    AzRoleAddProperty '' (501) 
    AzRoleGetProperty (501) 
        'S-1-1000-2'
        'S-1-1000-3'
    AzRoleAddProperty '' (501) 
    AzRoleGetProperty (501) 
        'S-1-1000-1'
        'S-1-1000-2'
        'S-1-1000-3'
    AzRoleRemProperty '' (501) 
    AzRoleGetProperty (501) 
        'S-1-1000-2'
        'S-1-1000-3'
    AzRoleRemProperty '' (501) 
    AzRoleGetProperty (501) 
        'S-1-1000-3'
    
Scope->Role->Sid - 'Add a link that already exists' 
    AzRoleAddProperty '' (501) (ERROR_ALREADY_EXISTS) 
    AzRoleGetProperty (501) 
        'S-1-1000-3'
    AzRoleRemProperty '' (501) 
    AzRoleGetProperty (501) 
    
Scope->Role->Sid - 'Try more than 4 since reference buckets come in multiples of 4' 
    AzRoleAddProperty '' (501) 
    AzRoleAddProperty '' (501) 
    AzRoleAddProperty '' (501) 
    AzRoleAddProperty '' (501) 
    AzRoleAddProperty '' (501) 
    AzRoleAddProperty '' (501) 
    AzRoleGetProperty (501) 
        'S-1-1000-1'
        'S-1-1000-2'
        'S-1-1000-3'
        'S-1-1000-4'
        'S-1-1000-5'
        'S-1-1000-6'

Scope->Role - 'Test linking to groups that are children of the same admin manager as the role object.' 

Scope->Role->Group - Test linking 'Group' objects to the object named 'Role A' using propid '500'.
    
Scope->Role->Group - 'Create some objects to link the object to' 
    AzGroupCreate 'Object 1' 
    AzCloseHandle 
    AzGroupCreate 'Object 2' 
    AzCloseHandle 
    AzGroupCreate 'Object 3' 
    AzCloseHandle 
    
Scope->Role->Group - 'Reference an object that doesn't exist' 
    AzRoleGetProperty (500) 
[INVPARM] ObCommonSetProperty: non set property routine
    AzRoleSetProperty (500) (ERROR_INVALID_PARAMETER) 
    AzRoleAddProperty 'random' (500) (ERROR_NOT_FOUND) 
    
Scope->Role->Group - 'Add and remove several objects' 
    AzRoleAddProperty 'Object 2' (500) 
    AzRoleGetProperty (500) 
        'Object 2'
    AzRoleAddProperty 'Object 3' (500) 
    AzRoleGetProperty (500) 
        'Object 2'
        'Object 3'
    AzRoleAddProperty 'Object 1' (500) 
    AzRoleGetProperty (500) 
        'Object 1'
        'Object 2'
        'Object 3'
    AzRoleRemProperty 'Object 1' (500) 
    AzRoleGetProperty (500) 
        'Object 2'
        'Object 3'
    AzRoleRemProperty 'Object 2' (500) 
    AzRoleGetProperty (500) 
        'Object 3'
    
Scope->Role->Group - 'Add an item that already exists' 
    AzRoleAddProperty 'Object 3' (500) (ERROR_ALREADY_EXISTS) 
    AzRoleGetProperty (500) 
        'Object 3'
    AzRoleRemProperty 'Object 3' (500) 
    AzRoleGetProperty (500) 
    
Scope->Role->Group - 'Try more than 4 since reference buckets come in multiples of 4' 
    AzGroupCreate 'Object 4' 
    AzCloseHandle 
    AzGroupCreate 'Object 5' 
    AzCloseHandle 
    AzGroupCreate 'Object 6' 
    AzCloseHandle 
    AzRoleAddProperty 'Object 1' (500) 
    AzRoleAddProperty 'Object 4' (500) 
    AzRoleAddProperty 'Object 2' (500) 
    AzRoleAddProperty 'Object 5' (500) 
    AzRoleAddProperty 'Object 3' (500) 
    AzRoleAddProperty 'Object 6' (500) 
    AzRoleGetProperty (500) 
        'Object 1'
        'Object 2'
        'Object 3'
        'Object 4'
        'Object 5'
        'Object 6'
    AzGroupDelete 'Object 1' (500) 
    AzGroupDelete 'Object 4' (500) 
    AzGroupDelete 'Object 2' (500) 
    AzGroupDelete 'Object 5' (500) 
    AzGroupDelete 'Object 3' (500) 
    AzGroupDelete 'Object 6' (500) 

Scope->Role->Operation - Test linking 'Operation' objects to the object named 'Role A' using propid '502'.
    
Scope->Role->Operation - 'Create some objects to link the object to' 
    AzOperationCreate 'Object 1' 
    AzCloseHandle 
    AzOperationCreate 'Object 2' 
    AzCloseHandle 
    AzOperationCreate 'Object 3' 
    AzCloseHandle 
    
Scope->Role->Operation - 'Reference an object that doesn't exist' 
    AzRoleGetProperty (502) 
[INVPARM] ObCommonSetProperty: non set property routine
    AzRoleSetProperty (502) (ERROR_INVALID_PARAMETER) 
    AzRoleAddProperty 'random' (502) (ERROR_NOT_FOUND) 
    
Scope->Role->Operation - 'Add and remove several objects' 
    AzRoleAddProperty 'Object 2' (502) 
    AzRoleGetProperty (502) 
        'Object 2'
    AzRoleAddProperty 'Object 3' (502) 
    AzRoleGetProperty (502) 
        'Object 2'
        'Object 3'
    AzRoleAddProperty 'Object 1' (502) 
    AzRoleGetProperty (502) 
        'Object 1'
        'Object 2'
        'Object 3'
    AzRoleRemProperty 'Object 1' (502) 
    AzRoleGetProperty (502) 
        'Object 2'
        'Object 3'
    AzRoleRemProperty 'Object 2' (502) 
    AzRoleGetProperty (502) 
        'Object 3'
    
Scope->Role->Operation - 'Add an item that already exists' 
    AzRoleAddProperty 'Object 3' (502) (ERROR_ALREADY_EXISTS) 
    AzRoleGetProperty (502) 
        'Object 3'
    AzRoleRemProperty 'Object 3' (502) 
    AzRoleGetProperty (502) 
    
Scope->Role->Operation - 'Try more than 4 since reference buckets come in multiples of 4' 
    AzOperationCreate 'Object 4' 
    AzCloseHandle 
    AzOperationCreate 'Object 5' 
    AzCloseHandle 
    AzOperationCreate 'Object 6' 
    AzCloseHandle 
    AzRoleAddProperty 'Object 1' (502) 
    AzRoleAddProperty 'Object 4' (502) 
    AzRoleAddProperty 'Object 2' (502) 
    AzRoleAddProperty 'Object 5' (502) 
    AzRoleAddProperty 'Object 3' (502) 
    AzRoleAddProperty 'Object 6' (502) 
    AzRoleGetProperty (502) 
        'Object 1'
        'Object 2'
        'Object 3'
        'Object 4'
        'Object 5'
        'Object 6'
    AzOperationDelete 'Object 1' (502) 
    AzOperationDelete 'Object 4' (502) 
    AzOperationDelete 'Object 2' (502) 
    AzOperationDelete 'Object 5' (502) 
    AzOperationDelete 'Object 3' (502) 
    AzOperationDelete 'Object 6' (502) 

Scope->Role->Scope - Test linking 'Scope' objects to the object named 'Role A' using propid '503'.
    
Scope->Role->Scope - 'Create some objects to link the object to' 
    AzScopeCreate 'Object 1' 
    AzCloseHandle 
    AzScopeCreate 'Object 2' 
    AzCloseHandle 
    AzScopeCreate 'Object 3' 
    AzCloseHandle 
    
Scope->Role->Scope - 'Reference an object that doesn't exist' 
    AzRoleGetProperty (503) 
[INVPARM] ObCommonSetProperty: non set property routine
    AzRoleSetProperty (503) (ERROR_INVALID_PARAMETER) 
    AzRoleAddProperty 'random' (503) (ERROR_NOT_FOUND) 
    
Scope->Role->Scope - 'Add and remove several objects' 
    AzRoleAddProperty 'Object 2' (503) 
    AzRoleGetProperty (503) 
        'Object 2'
    AzRoleAddProperty 'Object 3' (503) 
    AzRoleGetProperty (503) 
        'Object 2'
        'Object 3'
    AzRoleAddProperty 'Object 1' (503) 
    AzRoleGetProperty (503) 
        'Object 1'
        'Object 2'
        'Object 3'
    AzRoleRemProperty 'Object 1' (503) 
    AzRoleGetProperty (503) 
        'Object 2'
        'Object 3'
    AzRoleRemProperty 'Object 2' (503) 
    AzRoleGetProperty (503) 
        'Object 3'
    
Scope->Role->Scope - 'Add an item that already exists' 
    AzRoleAddProperty 'Object 3' (503) (ERROR_ALREADY_EXISTS) 
    AzRoleGetProperty (503) 
        'Object 3'
    AzRoleRemProperty 'Object 3' (503) 
    AzRoleGetProperty (503) 
    
Scope->Role->Scope - 'Try more than 4 since reference buckets come in multiples of 4' 
    AzScopeCreate 'Object 4' 
    AzCloseHandle 
    AzScopeCreate 'Object 5' 
    AzCloseHandle 
    AzScopeCreate 'Object 6' 
    AzCloseHandle 
    AzRoleAddProperty 'Object 1' (503) 
    AzRoleAddProperty 'Object 4' (503) 
    AzRoleAddProperty 'Object 2' (503) 
    AzRoleAddProperty 'Object 5' (503) 
    AzRoleAddProperty 'Object 3' (503) 
    AzRoleAddProperty 'Object 6' (503) 
    AzRoleGetProperty (503) 
        'Object 1'
        'Object 2'
        'Object 3'
        'Object 4'
        'Object 5'
        'Object 6'
    AzScopeDelete 'Object 1' (503) 
    AzScopeDelete 'Object 4' (503) 
    AzScopeDelete 'Object 2' (503) 
    AzScopeDelete 'Object 5' (503) 
    AzScopeDelete 'Object 3' (503) 
    AzScopeDelete 'Object 6' (503) 
AzCloseHandle 
AzCloseHandle 
AzCloseHandle 
AzCloseHandle 



NameShare - 'Certain objects can't share names' 
AzInitialize '.\TestFile' (1) 
AzApplicationCreate 'MyApp' 

NameShare - 'Create some tasks and ops as a starting point' 
AzTaskCreate 'Task 1' 
AzCloseHandle 
AzOperationCreate 'Op 1' 
AzCloseHandle 

NameShare - 'Task and operations can't share names' 
AzTaskCreate 'Op 1' (ERROR_ALREADY_EXISTS) 
AzOperationCreate 'Task 1' (ERROR_ALREADY_EXISTS) 

NameShare - 'Create some groups as a starting point' 
AzGroupCreate 'Group Adm' 
AzCloseHandle 
AzGroupCreate 'Group App' 
AzCloseHandle 

NameShare - 'Create an app group that conflicts with an adm group, etc' 
AzGroupCreate 'Group Adm' (ERROR_ALREADY_EXISTS) 
AzGroupCreate 'Group App' (ERROR_ALREADY_EXISTS) 

NameShare - 'Create a scope group' 
AzScopeCreate 'Scope 1' 
AzGroupCreate 'Group Scp' 
AzCloseHandle 

NameShare - 'Create a scope group that conflicts with an adm group, etc' 
AzGroupCreate 'Group Adm' (ERROR_ALREADY_EXISTS) 
AzGroupCreate 'Group App' (ERROR_ALREADY_EXISTS) 

NameShare - 'Create an app/adm group that conflicts with a scope group' 
AzGroupCreate 'Group Scp' (ERROR_ALREADY_EXISTS) 
AzGroupCreate 'Group Scp' (ERROR_ALREADY_EXISTS) 
AzCloseHandle 
AzCloseHandle 
AzCloseHandle 



Persist - 'Ensure objects persist across a close' 
AzInitialize '.\TestFile' (1) 
AzApplicationCreate 'MyApp' 
AzTaskCreate 'Task 1' 
AzOperationCreate 'Op 1' 
AzCloseHandle 
AzCloseHandle 
AzCloseHandle 
AzCloseHandle 

Persist - 'See if they're still there' 
AzInitialize '.\TestFile' 
AzApplicationEnum 
    1:
        AzApplicationGetProperty (1) 
            'MyApp'
        AzCloseHandle 
AzApplicationOpen 'MyApp' 
AzTaskEnum 
    1:
        AzTaskGetProperty (1) 
            'Task 1'
        AzCloseHandle 
AzTaskOpen 'Task 1' 
AzOperationEnum 
    1:
        AzOperationGetProperty (1) 
            'Op 1'
        AzCloseHandle 
AzOperationOpen 'Op 1' 
AzCloseHandle 
AzCloseHandle 
AzCloseHandle 
AzCloseHandle 


Tests completed successfully!
