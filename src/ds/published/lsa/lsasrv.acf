/*++

Copyright (c) 1991  Microsoft Corporation

Module Name:

    Lsasrv.acf

Abstract:

    Security Account Manager SERVER rpc stub attribute configuration file.

    This file contains the attribute configuration information necessary
    for generating the server stubs for remotable LSA functions.  The
    definitions in this file qualify the information in Lsarpc.idl.

      !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
      !!                                                                 !!
      !!  This .acf file is USED ONLY WHEN GENERATING LSA SERVER STUBS.  !!
      !!                                                                 !!
      !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


    Use Lsacli.acf when generating client stubs.




    The server likes to have all passed data in a single block of
    allocated memory.  This allows it to free the returned information
    with a single call, rather than walking down some random tree of
    allocated blocks.



Author:

    Scott Birrell         (ScottBi)   September 5, 1991

Environment:

    User Mode

Revision History:

--*/

// BUGBUG : implicit handle to get around a midl bug
[strict_context_handle,implicit_handle(handle_t IgnoreThisHandle)]

interface lsarpc

{


//
// define complex [in] parameters to be [allocate(all_nodes)]...
//

typedef [allocate(all_nodes)]   PLSAPR_CR_CIPHER_VALUE;
typedef [allocate(all_nodes)]   PENCRYPTED_CREDENTIALW;
typedef [allocate(all_nodes)]   PCREDENTIAL_TARGET_INFORMATIONW;

[notify] LsarClose();
[notify] LsarDelete();
[notify] LsarEnumeratePrivileges();
[notify] LsarQuerySecurityObject();
[notify] LsarSetSecurityObject();
[notify] LsarChangePassword();
[notify] LsarOpenPolicy();
[notify] LsarQueryInformationPolicy();
[notify] LsarSetInformationPolicy();
[notify] LsarClearAuditLog();
[notify] LsarCreateAccount();
[notify] LsarEnumerateAccounts();
[notify] LsarCreateTrustedDomain();
[notify] LsarEnumerateTrustedDomains();
[notify] LsarLookupNames();
[notify] LsarLookupSids();
[notify] LsarCreateSecret();
[notify] LsarOpenAccount();
[notify] LsarEnumeratePrivilegesAccount();
[notify] LsarAddPrivilegesToAccount();
[notify] LsarRemovePrivilegesFromAccount();
[notify] LsarGetQuotasForAccount();
[notify] LsarSetQuotasForAccount();
[notify] LsarGetSystemAccessAccount();
[notify] LsarSetSystemAccessAccount();
[notify] LsarOpenTrustedDomain();
[notify] LsarQueryInfoTrustedDomain();
[notify] LsarSetInformationTrustedDomain();
[notify] LsarOpenSecret();
[notify] LsarSetSecret();
[notify] LsarQuerySecret();
[notify] LsarLookupPrivilegeValue();
[notify] LsarLookupPrivilegeName();
[notify] LsarLookupPrivilegeDisplayName();
[notify] LsarDeleteObject();
[notify] LsarEnumerateAccountsWithUserRight();
[notify] LsarEnumerateAccountRights();
[notify] LsarAddAccountRights();
[notify] LsarRemoveAccountRights();
[notify] LsarQueryTrustedDomainInfo();
[notify] LsarSetTrustedDomainInfo();
[notify] LsarDeleteTrustedDomain();
[notify] LsarStorePrivateData();
[notify] LsarRetrievePrivateData();
[notify] LsarOpenPolicy2();
[notify] LsarGetUserName();
[notify] LsarQueryInformationPolicy2();
[notify] LsarSetInformationPolicy2();
[notify] LsarQueryTrustedDomainInfoByName();
[notify] LsarSetTrustedDomainInfoByName();
[notify] LsarEnumerateTrustedDomainsEx();
[notify] LsarCreateTrustedDomainEx();
[notify] LsarQueryDomainInformationPolicy();
[notify] LsarSetDomainInformationPolicy();
[notify] LsarOpenTrustedDomainByName();
[notify] LsarSetPolicyReplicationHandle();
}
