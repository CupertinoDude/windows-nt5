!IF 0

Copyright (c) 1989  Microsoft Corporation

Module Name:

    sources.

Abstract:

    This file specifies the target component being built and the list of
    sources files needed to build that component.  Also specifies optional
    compiler switches and libraries that are unique for the component being
    built.


Author:

    Mark Lucovsky (markl) 18-Sep-1990

NOTE:   Commented description of this file is in \nt\bak\bin\sources.tpl

!ENDIF

TARGETPATH=obj
TARGETNAME=
TARGETTYPE=LIBRARY

#
# These are files built from other headers, then published.
#

NTTARGETFILE0=$(O)\ntsecapi.h \
              $(O)\subauth.h \
              $(O)\ntsecpkg.h \
              $(O)\aclapi.h \
              $(O)\aclapip.h \
              $(O)\sddl.h \
              $(O)\sddlp.h \
              $(O)\winsafer.h \
              $(O)\winsaferp.h \
              $(O)\wincrypt.h

#
# We publish in two places.
#       WINDOWS_INC is public\internal\windows\inc, and is are available to anyone else
#              in the NT project, but not released to customers
#       PROJECT_INC is public\internal\ds\inc, and is are available to anyone else
#              in the NT project, but not released to customers
#       SDK_INC is public\sdk\inc, and not automatically released to customers, it is
#              the prime spot for SDK header files.
#
#
# The following two macros are the lists of headers to be published to the root
# project.  Keep the list of files sorted so we can keep track of which files are in,
# and which files are not.
#

PUBLISH_IN_PROJECT_INC=\
    {adsi.w=$(PROJECT_INC_PATH)\adsi.h}\
    {aes.w=$(PROJECT_INC_PATH)\crypto\aes.h} \
    {alloca.w=$(PROJECT_INC_PATH)\alloca.h} \
    {apperr.w=$(PROJECT_INC_PATH)\apperr.h}\
    {apperr2.w=$(PROJECT_INC_PATH)\apperr2.h}\
    {authzi.w=$(PROJECT_INC_PATH)\authzi.h}\
    {benaloh.w=$(PROJECT_INC_PATH)\crypto\benaloh.h} \
    {bignum.w=$(PROJECT_INC_PATH)\crypto\bignum.h} \
    {brcommon.w=$(PROJECT_INC_PATH)\brcommon.h}\
    {confname.w=$(PROJECT_INC_PATH)\confname.h}\
    {credp.w=$(PROJECT_INC_PATH)\credp.h}\
    {crypstub.w=$(PROJECT_INC_PATH)\crypstub.h}\
    {crypt.w=$(PROJECT_INC_PATH)\crypt.h}\
    {cryptui.w=$(PROJECT_INC_PATH)\cryptui.h}\
    {dblint.w=$(PROJECT_INC_PATH)\crypto\dblint.h} \
    {des.w=$(PROJECT_INC_PATH)\crypto\des.h} \
    {des3.w=$(PROJECT_INC_PATH)\crypto\des3.h} \
    {descrypt.w=$(PROJECT_INC_PATH)\crypto\descrypt.h} \
    {dns.w=$(PROJECT_INC_PATH)\dns.h} \
    {dnsapi.w=$(PROJECT_INC_PATH)\dnsapi.h} \
    {dnslib.w=$(PROJECT_INC_PATH)\dnslib.h} \
    {dnsrpc.w=$(PROJECT_INC_PATH)\dnsrpc.h} \
    {dosprint.w=$(PROJECT_INC_PATH)\dosprint.h} \
    {dsgetdcp.w=$(PROJECT_INC_PATH)\dsgetdcp.h} \
    {dsmnname.w=$(PROJECT_INC_PATH)\dsmnname.h}\
    {dspropp.w=$(PROJECT_INC_PATH)\dspropp.h} \
    {engine.w=$(PROJECT_INC_PATH)\crypto\engine.h} \
    {fpnwname.w=$(PROJECT_INC_PATH)\fpnwname.h}\
    {ftnfoctx.w=$(PROJECT_INC_PATH)\ftnfoctx.h}\
    {ginaipc.w=$(PROJECT_INC_PATH)\ginaipc.h} \
    {hmac.w=$(PROJECT_INC_PATH)\crypto\hmac.h} \
    {jet.w=$(PROJECT_INC_PATH)\jet.h} \
    {jet500.w=$(PROJECT_INC_PATH)\jet500.h} \
    {keylimit.w=$(PROJECT_INC_PATH)\keylimit.h} \
    {keymgr.w=$(PROJECT_INC_PATH)\keymgr.h} \
    {llsapi.w=$(PROJECT_INC_PATH)\llsapi.h}\
    {loghours.w=$(PROJECT_INC_PATH)\loghours.h}\
    {logonmsv.w=$(PROJECT_INC_PATH)\logonmsv.h} \
    {lsaimp.w=$(PROJECT_INC_PATH)\lsaimp.h} \
    {lsaicli.w=$(PROJECT_INC_PATH)\lsaicli.h} \
    {lsaisrv.w=$(PROJECT_INC_PATH)\lsaisrv.h} \
    {martaexp.w=$(PROJECT_INC_PATH)\martaexp.h} \
    {md2.w=$(PROJECT_INC_PATH)\crypto\md2.h} \
    {md4.w=$(PROJECT_INC_PATH)\crypto\md4.h} \
    {md5.w=$(PROJECT_INC_PATH)\crypto\md5.h} \
    {modes.w=$(PROJECT_INC_PATH)\crypto\modes.h} \
    {msginaexports.w=$(PROJECT_INC_PATH)\msginaexports.h} \
    {netdebug.w=$(PROJECT_INC_PATH)\netdebug.h}\
    {netlib.w=$(PROJECT_INC_PATH)\netlib.h}\
    {netlibnt.w=$(PROJECT_INC_PATH)\netlibnt.h}\
    {netlogon.w=$(PROJECT_INC_PATH)\netlogon.h}\
    {nlmon.w=$(PROJECT_INC_PATH)\nlmon.h}\
    {ntdsadef.w=$(PROJECT_INC_PATH)\ntdsadef.h}\
    {ntdsapip.w=$(PROJECT_INC_PATH)\ntdsapip.h}\
    {ntsamp.w=$(PROJECT_INC_PATH)\ntsamp.h}\
    {nwapi.w=$(PROJECT_INC_PATH)\nwapi.h}\
    {nwapi32.w=$(PROJECT_INC_PATH)\nwapi32.h} \
    {nwcons.w=$(PROJECT_INC_PATH)\nwcons.h}\
    {nwrnames.w=$(PROJECT_INC_PATH)\nwrnames.h}\
    {nwsap.w=$(PROJECT_INC_PATH)\nwsap.h} \
    {nwsnames.w=$(PROJECT_INC_PATH)\nwsnames.h}\
    {passrec.w=$(PROJECT_INC_PATH)\passrec.h} \
    {permit.w=$(PROJECT_INC_PATH)\permit.h} \
    {randlib.w=$(PROJECT_INC_PATH)\crypto\randlib.h} \
    {recovery.w=$(PROJECT_INC_PATH)\recovery.h} \
    {rc2.w=$(PROJECT_INC_PATH)\crypto\rc2.h} \
    {rc4.w=$(PROJECT_INC_PATH)\crypto\rc4.h} \
    {rnraddrs.w=$(PROJECT_INC_PATH)\rnraddrs.h} \
    {rsa.w=$(PROJECT_INC_PATH)\crypto\rsa.h} \
    {rsa_fast.w=$(PROJECT_INC_PATH)\crypto\rsa_fast.h} \
    {rsa_math.w=$(PROJECT_INC_PATH)\crypto\rsa_math.h} \
    {rsa_sys.w=$(PROJECT_INC_PATH)\crypto\rsa_sys.h} \
    {rxprint.w=$(PROJECT_INC_PATH)\rxprint.h} \
    {rxserver.w=$(PROJECT_INC_PATH)\rxserver.h}\
    {samisrv.w=$(PROJECT_INC_PATH)\samisrv.h}\
    {scesetup.w=$(PROJECT_INC_PATH)\scesetup.h} \
    {scioctl.w=$(PROJECT_INC_PATH)\scioctl.h} \
    {sclogon.w=$(PROJECT_INC_PATH)\sclogon.h} \
    {scredir.idl=$(PROJECT_INC_PATH)\scredir.idl} \
    {secedit.w=$(PROJECT_INC_PATH)\secedit.h} \
    {secint.w=$(PROJECT_INC_PATH)\secint.h} \
    {secobj.w=$(PROJECT_INC_PATH)\secobj.h} \
    {sha.w=$(PROJECT_INC_PATH)\crypto\sha.h} \
    {shacomm.w=$(PROJECT_INC_PATH)\crypto\shacomm.h} \
    {ssi.w=$(PROJECT_INC_PATH)\ssi.h}\
    {swincryp.w=$(PROJECT_INC_PATH)\crypto\swincryp.h} \
    {tripldes.w=$(PROJECT_INC_PATH)\crypto\tripldes.h} \
    {tstring.w=$(PROJECT_INC_PATH)\tstring.h}\
    {uascache.w=$(PROJECT_INC_PATH)\uascache.h}\
    {uint4.w=$(PROJECT_INC_PATH)\crypto\uint4.h} \
    {w32timep.w=$(PROJECT_INC_PATH)\w32timep.h} \
    {winsaferrh.w=$(PROJECT_INC_PATH)\winsafer.rh} \
    {winsaferrc.w=$(PROJECT_INC_PATH)\winsafer.rc} \
    {wintrustp.w=$(PROJECT_INC_PATH)\crypto\wintrustp.h} \
    {xom.w=$(PROJECT_INC_PATH)\xom.h} \
    {wlballoonrc.w=$(PROJECT_INC_PATH)\wlballoon.rc} \
    {wlballoonrh.w=$(PROJECT_INC_PATH)\wlballoon.rh} \
    {$(O)\sddlp.h=$(PROJECT_INC_PATH)\sddlp.h}

PUBLISH_IN_SDK_INC=\
    {activeds.w=$(SDK_INC_PATH)\activeds.h} \
    {adsdb.w=$(SDK_INC_PATH)\adsdb.h} \
    {adserr.w=$(SDK_INC_PATH)\adserr.h} \
    {adshlp.w=$(SDK_INC_PATH)\adshlp.h} \
    {adsiid.w=$(SDK_INC_PATH)\adsiid.h} \
    {adsnms.w=$(SDK_INC_PATH)\adsnms.h} \
    {adssts.w=$(SDK_INC_PATH)\adssts.h} \
    {adtgen.w=$(SDK_INC_PATH)\adtgen.h}\
    {appmgmt.w=$(SDK_INC_PATH)\appmgmt.h}\
    {authz.w=$(SDK_INC_PATH)\authz.h}\
    {autoenr.w=$(SDK_INC_PATH)\autoenr.h}\
    {certmap.w=$(SDK_INC_PATH)\certmap.h} \
    {cryptuiapi.w=$(SDK_INC_PATH)\cryptuiapi.h}\
    {cspdk.w=$(SDK_INC_PATH)\cspdk.h}\
    {dsgetdc.w=$(SDK_INC_PATH)\dsgetdc.h} \
    {dsrole.w=$(SDK_INC_PATH)\dsrole.h} \
    {dsrolep.w=$(DS_INC_PATH)\dsrolep.h}\
    {ismapi.w=$(SDK_INC_PATH)\ismapi.h}\
    {kerbcon.w=$(SDK_INC_PATH)\kerbcon.h} \
    {kerberos.w=$(SDK_INC_PATH)\kerberos.h} \
    {lm.w=$(SDK_INC_PATH)\lm.h} \
    {lmaccess.w=$(SDK_INC_PATH)\lmaccess.h} \
    {lmalert.w=$(SDK_INC_PATH)\lmalert.h} \
    {lmapibuf.w=$(SDK_INC_PATH)\lmapibuf.h} \
    {lmat.w=$(SDK_INC_PATH)\lmat.h} \
    {lmaudit.w=$(SDK_INC_PATH)\lmaudit.h} \
    {lmbrowsr.w=$(SDK_INC_PATH)\lmbrowsr.h} \
    {lmchdev.w=$(SDK_INC_PATH)\lmchdev.h} \
    {lmconfig.w=$(SDK_INC_PATH)\lmconfig.h} \
    {lmcons.w=$(SDK_INC_PATH)\lmcons.h} \
    {lmdfs.w=$(SDK_INC_PATH)\lmdfs.h} \
    {lmerr.w=$(SDK_INC_PATH)\lmerr.h} \
    {lmerrlog.w=$(SDK_INC_PATH)\lmerrlog.h} \
    {lmjoin.w=$(SDK_INC_PATH)\lmjoin.h} \
    {lmmsg.w=$(SDK_INC_PATH)\lmmsg.h} \
    {lmremutl.w=$(SDK_INC_PATH)\lmremutl.h} \
    {lmrepl.w=$(SDK_INC_PATH)\lmrepl.h} \
    {lmrpl.w=$(SDK_INC_PATH)\lmrpl.h} \
    {lmserver.w=$(SDK_INC_PATH)\lmserver.h} \
    {lmshare.w=$(SDK_INC_PATH)\lmshare.h} \
    {lmsname.w=$(SDK_INC_PATH)\lmsname.h} \
    {lmstats.w=$(SDK_INC_PATH)\lmstats.h} \
    {lmsvc.w=$(SDK_INC_PATH)\lmsvc.h} \
    {lmuse.w=$(SDK_INC_PATH)\lmuse.h} \
    {lmuseflg.w=$(SDK_INC_PATH)\lmuseflg.h} \
    {lmwksta.w=$(SDK_INC_PATH)\lmwksta.h} \
    {mscat.w=$(SDK_INC_PATH)\mscat.h}\
    {mschapp.w=$(SDK_INC_PATH)\mschapp.h}\
    {mssign32.w=$(SDK_INC_PATH)\mssign32.h}\
    {mssip.w=$(SDK_INC_PATH)\mssip.h}\
    {ntddksec.w=$(SDK_INC_PATH)\ntddksec.h}\
    {ntdsapi.w=$(SDK_INC_PATH)\ntdsapi.h}\
    {ntdsbcli.w=$(SDK_INC_PATH)\ntdsbcli.h}\
    {ntldap.w=$(SDK_INC_PATH)\ntldap.h}\
    {ntlmsp.w=$(SDK_INC_PATH)\ntlmsp.h}\
    {ntlsa.w=$(SDK_INC_PATH)\ntlsa.h} \
    {ntrmlsa.w=$(DS_INC_PATH)\ntrmlsa.h} \
    {ntmsv1_0.w=$(SDK_INC_PATH)\ntmsv1_0.h} \
    {ntsam.w=$(SDK_INC_PATH)\ntsam.h} \
    {ntseapi.w=$(SDK_INC_PATH)\ntseapi.h} \
    {rkeysvcc.w=$(SDK_INC_PATH)\rkeysvcc.h} \
    {scesvc.w=$(SDK_INC_PATH)\scesvc.h} \
    {schannel.w=$(SDK_INC_PATH)\schannel.h} \
    {schnlsp.w=$(SDK_INC_PATH)\schnlsp.h} \
    {secext.w=$(SDK_INC_PATH)\secext.h} \
    {secpkg.w=$(SDK_INC_PATH)\secpkg.h} \
    {sipbase.w=$(SDK_INC_PATH)\sipbase.h}\
    {softpub.w=$(SDK_INC_PATH)\softpub.h}\
    {sspi.w=$(SDK_INC_PATH)\sspi.h} \
    {timeprov.w=$(SDK_INC_PATH)\timeprov.h}\
    {wdigest.w=$(SDK_INC_PATH)\wdigest.h} \
    {wincred.w=$(SDK_INC_PATH)\wincred.h}\
    {wincrui.w=$(SDK_INC_PATH)\wincrui.h}\
    {windns.w=$(SDK_INC_PATH)\windns.h}\
    {winldap.w=$(SDK_INC_PATH)\winldap.h}\
    {winsafer.w=$(SDK_INC_PATH)\winsafer.h} \
    {wintrust.w=$(SDK_INC_PATH)\wintrust.h}\
    {winwlx.w=$(SDK_INC_PATH)\winwlx.h}\
    {$(O)\aclapi.h=$(SDK_INC_PATH)\aclapi.h} \
    {$(O)\sddl.h=$(SDK_INC_PATH)\sddl.h} \
    {$(O)\winsafer.h=$(SDK_INC_PATH)\winsafer.h} \
    {$(O)\ntsecapi.h=$(SDK_INC_PATH)\ntsecapi.h}\
    {$(O)\ntsecpkg.h=$(SDK_INC_PATH)\ntsecpkg.h}\
    {$(O)\subauth.h=$(SDK_INC_PATH)\subauth.h}\
    {$(O)\wincrypt.h=$(SDK_INC_PATH)\wincrypt.h}

PUBLISH_IN_WINDOWS_INC=\
    {$(O)\aclapip.h=$(WINDOWS_INC_PATH)\aclapip.h} \
    {$(O)\winsaferp.h=$(DS_INC_PATH)\winsaferp.h}

PUBLISH_IN_DDK_INC=\
    {upssvc.h=$(DDK_INC_PATH)\upssvc.h}

SOURCES=

PASS0_PUBLISH=\
        $(PUBLISH_IN_PROJECT_INC) \
        $(PUBLISH_IN_SDK_INC)     \
        $(PUBLISH_IN_WINDOWS_INC)     \
        $(PUBLISH_IN_DDK_INC)
