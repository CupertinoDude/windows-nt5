TODO NOW:
	-- Implement incoming close
	-- Implement PnP and Reconfig
	-- arp13 -a should display local unique ID
	-- Submit OIDs to get real adapter info, especially unique ID
	-- Bump up line speed to 100Mbits/sec
	-- Write cmd scripts to test:
			-- net start/stop
			-- ipconfig /release /renew
			-- arp13 -add/-delete
			-- ping
	-- Get the above all running concurrently
	-- Implement stats, pkt stats first.
	-- Make sure RmSuspendTask is called with lock held if required.
	-- From arpSlowIpTransmit:
		Currently, it's possible that the RemoteIp's unload task will not wait for
		send pkts to be cleared up IF it checks BEFORE the task before is started.
		This hole needs to be fixed.
	-- Change ARP1394_IP_PHYSADDR_LEN to 8
	
Stage ONE 	--- register static arp entries, finish ArpIpQueryInfo ---

	2. Implement arpAddStaticArpEntries (with info from an internal array).
		-X- make sure that they will get deleted on exit.
	3. Implement  ArpIpQueryInfo completely:
		-X- simple stuff (UINT)
		-X- Arp table entries
		-X- stats
	4. Implement ArpIpGetEList (Incl Win9x)
		-X-
	5. Test (with driver verifier)
		-X- boots
		-X- net start, net stop works.
		--- uncheck IP works
		-X- disconnect adapter works
		-X- shutdown windows works
		-X- arp -a lists static arp entries

Stage TWO	--- mock up of fast send path ---
	1.	Implement encapsulation header buffer pool (see 3/05/1999 notes above)
		-X- initialize pool (including initializing all buffers)
		-X-	deinitialize pool
		-X-	allocate buffer
		-X- deallocate buffer
		-X- usermode tests pass
	2. Write fast-send-path code (see 3/05/1999 notes.txt entry ) WITHOUT queuing.
		-X- backfill case: sends
		-X- backfill case: send completion
		-X- use header buffer case: sends
		-X- use header buffer case: send completion
	3. Implement RCE management
		-X-	New RCEs
		-X- Invalidating RCEs
	4. Test (without driver verifier)
		-X- boots
		-X- net stop/start works
		-X- ttcp -u works (verify we're actully mock-sending thep packets).
		-X- net stop/start works with ttcp -u -t running
		-X- disconnect adapter works with ttcp -u -t running
		--- uncheck IP works with ttcp -u -t running
		--- batch file doing continuous net stop/start works with ttcp -u -t running

Stage THREE	Simple send-VC management (still doing mock sends, no ageing) ---
		-X- Define Send-VC structure
		-X- Write task to resolve h/w address (trivially succeed) and make call and
			get connected.
		-X- Write task to shutdown ARPCB_DEST (including cleaning up queued pkts on
			this destination and dropping call an deallocating VC.
		-X- Write slow-send-path code
		Test (with driver verifier)
			-X- boots
			-X- net stop/start works
			-X- ttcp -u works
			-X- net stop/start works with ttcp -u -t running
			-X- disconnect adapter works with ttcp -u -t running
			--- uncheck IP works with ttcp -u -t running
			--- shutdown windows works with ttcp -u -t running
		-X- Write code to complete make calls  and mock-sends asynchronously
			(with some delay)
		Test (with driver verifier)
			-X- boots
			-X- net stop/start works
			-X- ttcp -u works
			-X- net stop/start works with ttcp -u -t running
			-X- disconnect adapter works with ttcp -u -t running
			--- uncheck IP works with ttcp -u -t running
			--- shutdown windows works with ttcp -u -t running
			--- batch file doing continuous net stop/start works with
				ttcp -u -t running
		-X- Write code to setup and teardown the single receive FIFO
		-X- Write code to handle received packets.
		--- Implement arpGetAdapterInfo properly
	    --- Use lookaside lists for management of:
			--- tasks
			--- associations
			--- obj log entries
			--- Test (same as #5)

Stage FOUR	--- True sends, (still no VC ageing) ---
		-X- Replace mock sends by true sends down to nic1394 (keep mock send code
			around)
		Test (with driver verifier)
			-X- boots
			-X- net stop/start works
			-X- ttcp -u works
			--- net stop/start works with ttcp -u -t running
			--- disconnect adapter works with ttcp -u -t running
			--- uncheck IP works with ttcp -u -t running
			--- batch file doing continuous net stop/start works with
				ttcp -u -t running

Stage FIVE	Receive path
	1. Implement receive path (simple)
		-X- Receive VC management
		-X- Receive pkt path
	2. Test
		-X- Ping works!
		--- net stop/start etc while ping -t in progress

Stage SIX IOCTL support to add static arp entries
	1. Implement
	2. Test

Stage SEVEN	--- VC Ageing
	1. Implement timers
		--- 
	2. Implement VC Ageing
	3. Test (with mock sends)
	4. Test (with true sends)

Stage EIGHT	--- Functionality testing ---
	--- ping, ttcp

Stage NINE --- Basic Channel Functionality ---
	--- Broadcast channel VC management
	--- Resolve bcast/mcast addresses to broadcast dest entry
	Test
		--- Mcast works

Stage ELEVEN 	--- Basic ARP Resolution ----
	1. Implement pkt pools
	2. Implement creating/parsing of the arp pkt format.
	3. Test
		--- send/recv dummy arp pkts
	4. Implement arp request handling
	5. Implement arp response handling
	Test

Stage TWELVE 	--- Arp entry ageing timeouts ---
	--- Implement ARP entry ageing timeouts
	Test

Stage THIRTEEN	--- Get DHCP to work ---


Stage FOURTEEN --- Interop Testing ---

Stage FIFTEEN	--- Win98 Port ---

Stage SIXTEEN	--- MCAP functionality ---

Stage SIXTEEN	--- More Interop testing ---


------------------------------------------------
