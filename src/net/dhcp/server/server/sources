TARGETNAME=dhcpssvc
TARGETPATH=obj
TARGETTYPE=DYNLINK

DLLENTRY=DhcpDllInitialize

!IFNDEF DISABLE_NET_UNICODE
UNICODE=1
NET_C_DEFINES=-DUNICODE
!ENDIF

!IFDEF  CALLTREE
LINKER_FLAGS=/calltree
!ENDIF

!IFNDEF ICECAP_LIB
ICECAP_LIB=C:\ICECAP\lib
!ENDIF

!IFDEF USE_ICECAP
# hack.. dont know what to use for CFLAGS.. so just using C_DEFINES!
C_DEFINES= $(C_DEFINES) -Gh -Zi -MD
!ENDIF

C_DEFINES= $(C_DEFINES) -DINC_OLE2

#
# Dont follow the DNS Draft : Chose domain name based on IP Address
# rather than what is there in the DNS Option.
#
C_DEFINES= $(C_DEFINES) -DCFLAG_FOLLOW_DNSDRAFT_EXACTLY=1

#
# Do not allow negative caching of rogue detection authorization status
#
C_DEFINES= $(C_DEFINES) -DCFLAG_ALLOW_NEGATIVE_CACHING=0

#
# If requested lease time is lower than our default, give requested lease time
#

C_DEFINES= $(C_DEFINES) -DCFLAG_GIVE_REQUESTED_LEASE=1

#
# Should we use a separate thread for handling ICMP replies?
#
C_DEFINES= $(C_DEFINES) -DCFLAG_USE_PING_REPLY_THREAD=0

#
# Rogue detection shouldn't disable upgraded server when it sees a NT5 DS ? set this!
#
C_DEFINES= $(C_DEFINES) -DCFLAG_FLEXI_UPG=1

#
# Set this flag if reservations should be allowed only in active ranges..
#
C_DEFINES= $(C_DEFINES) -DCFLAG_RESERVED_IN_RANGE_ONLY=0

# dont do any DS stuff **********************************
C_DEFINES=$(C_DEFINES) -DCFLAG_DONT_DO_DSWORK=1
# *******************************************************

!IFDEF HEAPCHK
C_DEFINES= $(C_DEFINES) /Oy-
NTNOFPO=1
!ENDIF

C_DEFINES= -DINCL_32= $(C_DEFINES) -DNT -DWIN32 -D__JET97 -D_DYN_LOAD_JET -DESE_NT

C_DEFINES= $(C_DEFINES) -DRPC_NO_WINDOWS_H

!IF 0
__DHCP_BACKDOOR_ENABLED__ is a flag that when defined, would allow dhcpssvc.dll to be loaded
by any program. It disables dhcp server from contacting the service controller. (To do this,
dhcpssvc.dll should be loaded, then the DhcpBackDoor function should be called. Then to start
the server, ServiceEntry has to be called.)
!ENDIF

!IFDEF DHCP_DEBUG_HEAP
C_DEFINES= -D__DHCP_USE_DEBUG_HEAP__ $(C_DEFINES)

!ENDIF


C_DEFINES= $(C_DEFINES) -DDHCPAPI_NO_PROTOTYPES

!IFDEF DBG_FAKE_DSOK
C_DEFINES= $(C_DEFINES) -DDBG_FAKE_DSOK=1
!ENDIF

C_DEFINES= $(C_DEFINES) -D_PNP_POWER_

IDL_TYPE=RPC
PRECOMPILED_INCLUDE=dhcppch.h
MIDL_FLAGS=$(MIDL_FLAGS) -oldnames -client none
USE_MSVCRT=1

LINKLIBS=\
    ..\..\lib\$(O)\dhcplib.lib

TARGETLIBS=\
!IFDEF USE_ICECAP
    $(ICECAP_LIB)\icap.lib \
!ENDIF
    $(PROJECT_PRIVATE_LIB_PATH)\netman.lib \
    $(PROJECT_PRIVATE_LIB_PATH)\dhcpupg.lib \
    $(SDK_LIB_PATH)\netlib.lib \
    $(SDK_LIB_PATH)\advapi32.lib \
    $(SDK_LIB_PATH)\dnsapi.lib \
    $(SDK_LIB_PATH)\esent.lib \
    $(SDK_LIB_PATH)\iphlpapi.lib \
    $(SDK_LIB_PATH)\kernel32.lib \
    $(SDK_LIB_PATH)\netapi32.lib \
    $(SDK_LIB_PATH)\rpcndr.lib \
    $(SDK_LIB_PATH)\rpcrt4.lib \
    $(SDK_LIB_PATH)\rpcutil.lib \
    $(SDK_LIB_PATH)\user32.lib \
    $(SDK_LIB_PATH)\ws2_32.lib \
!IFDEF DHCP_DEBUG_HEAP
    $(SDK_LIB_PATH)\msvcrtd.lib \
!ENDIF
    ..\dhcpds\$(O)\dsauth.lib \
    ..\mm\$(O)\dhcpmm.lib \
    ..\mmreg\$(O)\dhcpmmreg.lib

INCLUDES=..;..\msgs\$(O);..\idl;..\dhcpds;..\..\inc;..\..\..\inc;$(BASE_INC_PATH);$(DS_INC_PATH)

SOURCES= \
    dhcp_srv.idl \
    dhcp2_srv.idl \
    access.c    \
    auditlog.c  \
    binl.c      \
    bootphlp.c  \
    callout.c   \
    cltapi.c    \
    convguid.c  \
    database.c  \
    dbconfig.c  \
    debug.c     \
    dhcprpc.c   \
    dhcprpc2.c  \
    dhcpreg.c   \
    dhcpsrv.rc  \
    dnsdb.c     \
    dsreg.c     \
    endpoint.c  \
    iptbl.c     \
    lock.c      \
    main.c      \
    mdhcpdb.c   \
    mdhcpmsc.c  \
    mdhcpsrv.c  \
    mdhcsapi.c  \
    mib.c       \
    mmapi.c     \
    network.c   \
    oldstub.c   \
    pendingc.c  \
    perf.c      \
    ping.c      \
    rogue.c     \
    rpcapi1.c   \
    rpcapi2.c   \
    rpcapi3.c   \
    scan.c      \
    scavengr.c  \
    secretk.c   \
    stoc.c      \
    subntapi.c  \
    thread.c    \
    util.c      \
    servtest.c

UMTEST=dhcpinst*roguet
UMAPPL=dhcptest
UMTYPE=console
UMRES=$(@R).RES
UMLIBS=$(TARGETLIBS) $(O)\dhcpssvc.lib

NTTARGETFILE1=$(O)\dhcptest.res $(O)\roguet.res

MISCFILES=..\DHCP_Server_component_{DFACB6D4-9BEE-409A-AD30-0720FB9DD2FA}.sld
