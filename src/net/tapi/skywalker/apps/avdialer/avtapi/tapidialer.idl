/////////////////////////////////////////////////////////////////////////////////////////
//
// Copyright (c) 1997 Active Voice Corporation. All Rights Reserved. 
//
// Active Agent(r) and Unified Communications(tm) are trademarks of Active Voice Corporation.
//
// Other brand and product names used herein are trademarks of their respective owners.
//
// The entire program and user interface including the structure, sequence, selection, 
// and arrangement of the dialog, the exclusively "yes" and "no" choices represented 
// by "1" and "2," and each dialog message are protected by copyrights registered in 
// the United States and by international treaties.
//
// Protected by one or more of the following United States patents: 5,070,526, 5,488,650, 
// 5,434,906, 5,581,604, 5,533,102, 5,568,540, 5,625,676, 5,651,054.
//
// Active Voice Corporation
// Seattle, Washington
// USA
//
/////////////////////////////////////////////////////////////////////////////////////////

// TapiDialer.idl : IDL source for TapiDialer.dll
//

// This file will be processed by the MIDL tool to
// produce the type library (TapiDialer.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";
import "tapi3if.idl";
import "rend.idl";
import "confpriv.idl";

interface IAVTapi;
interface IAVTapiCall;
interface IConfRoom;
interface IConfRoomTreeView;
interface IConfExplorer;
interface IConfExplorerTreeView;
interface IConfExplorerDetailsView;
interface IEnumSiteServer;
interface IVideoFeed;
interface IPersonExplorer;
interface IPersonExplorerTreeView;
interface IPersonExplorerDetailsView;
interface IParticipant;
interface ISiteUser;

cpp_quote("#include \"tapi3.h\"")
cpp_quote("")
cpp_quote("// Dialog return codes")
cpp_quote("#define IDEXPLORE				4567")
cpp_quote("#define IDW_CONFROOM				150")
cpp_quote("#define IDW_CONFROOM_TREEVIEW	152")
cpp_quote("")
cpp_quote("")
cpp_quote("// Client EXE resource IDs")
cpp_quote("// Video window stock bitmaps" )
cpp_quote("#define IDB_STOCK_VIDEO_SMALL	169")
cpp_quote("#define IDB_STOCK_VIDEO_LARGE	170")
cpp_quote("#define IDB_VIDEO_AUDIO_ONLY2    198")
cpp_quote("")
cpp_quote("// Image lists")
cpp_quote("#define IDB_CONFROOM_TREE		105")
cpp_quote("")
cpp_quote("// Animations")
cpp_quote("#define IDA_RINGING				310")
cpp_quote("#define IDA_CONNECTING			311")
cpp_quote("#define IDA_CONNECTED			313")
cpp_quote("")
cpp_quote("#define MAGIC_NUMBER_USERUSER	566983249")
cpp_quote("")
cpp_quote("/////////////////////////////////////////////////////////")
cpp_quote("// Call Caps")
cpp_quote("#define CALL_CAPS_HALFDUPLEX_AUDIO	0x0001")
cpp_quote("#define CALL_CAPS_FULLDUPLEX_AUDIO	0x0002")
cpp_quote("// RENDER means recieve from remote machine and display")
cpp_quote("#define CALL_CAPS_VIDEO_RENDER		0x0004")
cpp_quote("#define CALL_CAPS_VIDEO_CAPTURE		0x0008")
cpp_quote("")
cpp_quote("")
cpp_quote("// List control minimum column widths")
cpp_quote("#define MIN_COL_WIDTH				20")



typedef struct tag_AVCreateCall
{
	BOOL		bShowDialog;				// IN should we show the dialog?
	BOOL		bAddToSpeeddial;			// OUT Does the user want to add the item to the speed dial
	BOOL		bTranslated;				// OUT Was the number translated by tapi

	BSTR		bstrName;					// IN/OUT Name of person we're calling
	BSTR		bstrAddress;				// IN/OUT Address of person we're calling
	LPWSTR		lpszDisplayableAddress;		// IN Address to display

	long		lRet;						// OUT
	long		lAddressType;				// OUT

} AVCreateCall;

typedef enum tagAVCallType_t
{
	AV_VOICE_CALL,
	AV_DATA_CALL,
	AV_CALLTYPE_MAX,
} AVCallType;
	
typedef enum tagAVParticipantEvent_t
{
	AV_PARTICIPANT_UPDATE,
	AV_PARTICIPANT_JOIN,
	AV_PARTICIPANT_STREAMING_START,
	AV_PARTICIPANT_STREAMING_STOP,
	AV_PARTICIPANT_LEAVE,
} AV_PARTICIPANT_EVENT;

typedef enum tagCallManagerMedia_t
{
   CM_MEDIA_CHAT=0,
   CM_MEDIA_INTERNET,
   CM_MEDIA_POTS,
   CM_MEDIA_RCI,
   CM_MEDIA_MCCONF,
   CM_MEDIA_INTERNETDATA,
} CallManagerMedia;

typedef enum tagCallManagerActions_t
{
   CM_ACTIONS_TAKECALL=0,        //Must be zero based due to ActionStringResourceArray
   CM_ACTIONS_TAKEMESSAGE,
   CM_ACTIONS_REQUESTHOLD,
   CM_ACTIONS_HOLD,
   CM_ACTIONS_TRANSFER,
   CM_ACTIONS_WHOISIT,
   CM_ACTIONS_CALLBACK,
   CM_ACTIONS_MONITOR,
   CM_ACTIONS_DISCONNECT, 
   CM_ACTIONS_CLOSE,
   CM_ACTIONS_LEAVEDESKTOPPAGE,
   CM_ACTIONS_LEAVEEMAIL,        //Must relect last value in callcontrolwnd ON_COMMAND_RANGE
   CM_ACTIONS_ENTERCONFROOM,
   CM_ACTIONS_REJECTCALL,
   CM_ACTIONS_PARK,
   CM_ACTIONS_NOTIFY_STREAMSTART,
   CM_ACTIONS_NOTIFY_STREAMSTOP,
   CM_ACTIONS_NOTIFY_PREVIEW_START,
   CM_ACTIONS_NOTIFY_PREVIEW_STOP,
 } CallManagerActions;

typedef enum tagCallManagerStates_t
{
   CM_STATES_CURRENT=-1,
   CM_STATES_UNKNOWN=0,
   CM_STATES_RINGING,
   CM_STATES_HOLDING,
   CM_STATES_REQUESTHOLD,
   CM_STATES_BUSY,
   CM_STATES_TRANSFERRING,
   CM_STATES_LEAVINGMESSAGE,
   CM_STATES_DISCONNECTED,
   CM_STATES_CONNECTED,
   CM_STATES_UNAVAILABLE,
   CM_STATES_DIALING,
   CM_STATES_OFFERING,
   CM_STATES_CONNECTING,
} CallManagerStates;

typedef enum tagCallClientActions_t
{
	CC_ACTIONS_SHOWCONFEXPLORER,
	CC_ACTIONS_SHOWADDRESSBOOK,
	CC_ACTIONS_SHOWCONFSERVICES,
	CC_ACTIONS_SHOWCONFROOM,
	CC_ACTIONS_SHOWPREVIEW,
	CC_ACTIONS_HIDEPREVIEW,
	CC_ACTIONS_JOIN_CONFERENCE,
	CC_ACTIONS_LEAVE_CONFERENCE,
} CallClientActions;

typedef enum tagCallLogType_t
{
	CL_UNKNOWN,
	CL_CALL_INCOMING,
	CL_CALL_OUTGOING,
	CL_CALL_CONFERENCE,
	CL_DONT_LOG,
} CallLogType;

typedef enum tagPhonePadKey_t
{
	PP_DTMF_1,        
	PP_DTMF_2,        
	PP_DTMF_3,        
	PP_DTMF_4,        
	PP_DTMF_5,        
	PP_DTMF_6,        
	PP_DTMF_7,        
	PP_DTMF_8,        
	PP_DTMF_9,
	PP_DTMF_0,
	PP_DTMF_STAR,        
	PP_DTMF_POUND,        
} PhonePadKey;

typedef enum tagServerState_t
{
	SERVER_OK,
	SERVER_UNKNOWN,
	SERVER_NOT_RESPONDING,
	SERVER_QUERYING,
	SERVER_INVALID,
} ServerState;

typedef enum tagDialerMediaType_t
{
	DIALER_MEDIATYPE_UNKNOWN,
	DIALER_MEDIATYPE_POTS,
	DIALER_MEDIATYPE_INTERNET,
	DIALER_MEDIATYPE_CONFERENCE,
} DialerMediaType;

typedef enum tagDialerLocationType_t
{
	DIALER_LOCATIONTYPE_UNKNOWN,
	DIALER_LOCATIONTYPE_BUSINESS,
	DIALER_LOCATIONTYPE_HOME,
	DIALER_LOCATIONTYPE_FAX,
	DIALER_LOCATIONTYPE_MOBILE,
	DIALER_LOCATIONTYPE_PAGER,
} DialerLocationType;

typedef enum tagMyUpdateType_t
{
	UPDATE_ADD,
	UPDATE_REMOVE,
	UPDATE_MODIFY,
} MyUpdateType;

typedef struct tagMyUserUserInfo
{
	LONG	lSchema;
	LONG	lVersion;
	WCHAR	szWelcome[500];
	WCHAR	szUrl[255];
} MyUserUserInfo;

typedef enum tagAVTerminalDirection
{
    AVTERM_CAPTURE = 0,
    AVTERM_RENDER = 1,
} AVTerminalDirection;

	[

		uuid(FB2FF4EA-337E-11D1-9B37-00C04FB9514E),

		helpstring("IAVTapi Interface"),
		pointer_default(unique)
	]
	interface IAVTapi : IUnknown
	{
		[helpstring("method Init")] HRESULT Init(BSTR *pbstrOperation, BSTR *pbstrDetails, long *phr);
		[helpstring("method Term")] HRESULT Term();
		[helpstring("method CreateCall")] HRESULT CreateCall(AVCreateCall *pInfo);
		[propget, helpstring("property ConfExplorer")] HRESULT ConfExplorer([out, retval] IConfExplorer **ppVal);
		[helpstring("method fire_ClearCurrentActions")] HRESULT fire_ClearCurrentActions(long lCallID);
		[helpstring("method fire_SetCallerID")] HRESULT fire_SetCallerID(long lCallID, BSTR bstrCallerID);
		[helpstring("method fire_NewCall")] HRESULT fire_NewCall(ITAddress *pITAddress, DWORD dwAddressType, long lCallID, IDispatch *pDisp, AVCallType nType, IAVTapiCall **ppAVCall);
		[helpstring("method fire_AddCurrentAction")] HRESULT fire_AddCurrentAction(long lCallID, CallManagerActions cma, BSTR bstrText);
		[helpstring("method fire_SetCallState")] HRESULT fire_SetCallState(long lCallID, ITCallStateEvent *pEvent, IAVTapiCall *pAVCall);
		[helpstring("method fire_CloseCallControl")] HRESULT fire_CloseCallControl(long lCallID);
		[helpstring("method ActionSelected")] HRESULT ActionSelected(long lCallID, CallManagerActions cma);
		[helpstring("method ShowMedia")] HRESULT ShowMedia(long lCallID, HWND hWndParent, BOOL bVisible);
		[helpstring("method fire_ErrorNotify")] HRESULT fire_ErrorNotify(long *pErrorInfo);
		[helpstring("method fire_SetCallState_CMS")] HRESULT fire_SetCallState_CMS(long lCallID, CallManagerStates cms, BSTR bstrText);
		[propget, helpstring("property ConfRoom")] HRESULT ConfRoom([out, retval] IConfRoom **ppVal);
		[helpstring("method fire_ActionSelected")] HRESULT fire_ActionSelected(CallClientActions cca);
		[propget, helpstring("property hWndParent")] HRESULT hWndParent([out, retval] HWND *pVal);
		[propput, helpstring("property hWndParent")] HRESULT hWndParent([in] HWND newVal);
		[helpstring("method ShowOptions")] HRESULT ShowOptions();
		[helpstring("method ShowPreviewVideo")] HRESULT ShowMediaPreview(long lCallID, HWND hWndParent, BOOL bVisible);
		[helpstring("method JoinConference")] HRESULT JoinConference(long *pnRet, BOOL bShowDialog, long *pConfDetails);
		[propget, helpstring("property dwCallCaps")] HRESULT dwCallCaps(long lCallID, [out, retval] DWORD *pVal);
		[helpstring("method PopulateAddressDialog")] HRESULT PopulateAddressDialog(DWORD *pdwPreferred, HWND hWndPots, HWND hWndIP, HWND hWndConf);
		[helpstring("method PopulateTerminalsDialog")] HRESULT PopulateTerminalsDialog(DWORD dwAddressType, HWND *phWnd);
		[helpstring("method UnpopulateAddressDialog")] HRESULT UnpopulateAddressDialog(DWORD dwPreferred, HWND hWndPOTS, HWND hWndIP, HWND hWndConf);
		[helpstring("method UnpopulateTerminalsDialog")] HRESULT UnpopulateTerminalsDialog(DWORD dwAddressType, HWND *phWnd);
		[propget, helpstring("property dwPreferredMedia")] HRESULT dwPreferredMedia([out, retval] DWORD *pVal);
		[propput, helpstring("property dwPreferredMedia")] HRESULT dwPreferredMedia([in] DWORD newVal);
		[helpstring("method DigitPress")] HRESULT DigitPress(long lCallID, PhonePadKey nKey);
		[helpstring("method FindAVTapiCallFromCallHub")] HRESULT FindAVTapiCallFromCallHub(ITCallHub *pCallHub, IAVTapiCall **ppCall);
		[helpstring("method fire_LogCall")] HRESULT fire_LogCall(long lCallID, CallLogType nType, DATE dateStart, DATE dateEnd, BSTR bstrAddr, BSTR bstrName);
		[propget, helpstring("property nNumCalls")] HRESULT nNumCalls([out, retval] long *pVal);
		[helpstring("method fire_NewCallWindow")] HRESULT fire_NewCallWindow(long* plCallID, CallManagerMedia cmm, BSTR bstrAddressName, AVCallType nType);
		[helpstring("method FindAVTapiCallFromParticipant")] HRESULT FindAVTapiCallFromParticipant(ITParticipant *pParticipant, IAVTapiCall **ppAVCall);
		[helpstring("method CanCreateVideoWindows")] HRESULT CanCreateVideoWindows(DWORD dwAddressType);
		[helpstring("method RefreshDS")] HRESULT RefreshDS();
		[helpstring("method CreateCallEx")] HRESULT CreateCallEx(BSTR bstrName, BSTR bstrAddress, BSTR bstrUser1, BSTR bstrUser2, DWORD dwAddressType);
		[propget, helpstring("property Call")] HRESULT Call([in] long lCallID, [out, retval] IAVTapiCall **ppCall);
		[helpstring("method RegisterUser")] HRESULT RegisterUser(VARIANT_BOOL bCreate, BSTR bstrServer);
		[helpstring("method FindAVTapiCallFromCallInfo")] HRESULT FindAVTapiCallFromCallInfo(ITCallInfo *pCallInfo, IAVTapiCall **ppCall);
		[helpstring("method fire_NotifyUserUserInfo")] HRESULT fire_NotifyUserUserInfo(long lCallID, ULONG_PTR hMem);
		[helpstring("method SendUserUserInfo")] HRESULT SendUserUserInfo(long lCallID, BYTE *pBuf, DWORD dwSizeBuf);
		[helpstring("method CreateDataCall")] HRESULT CreateDataCall(long lCallID, BSTR bstrName, BSTR bstrAddress, BYTE *pBuf, DWORD dwSizeBuf);
		[helpstring("method CreateNewCall")] HRESULT CreateNewCall(ITAddress *pITAddress, IAVTapiCall **ppAVCall);
		[helpstring("method FindAVTapiCallFromCallID")] HRESULT FindAVTapiCallFromCallID(long lCallID, IAVTapiCall **ppAVCall);
		[propget, helpstring("property bstrDefaultServer")] HRESULT bstrDefaultServer([out, retval] BSTR *pVal);
		[propput, helpstring("property bstrDefaultServer")] HRESULT bstrDefaultServer([in] BSTR newVal);
		[propget, helpstring("property bAutoCloseCalls")] HRESULT bAutoCloseCalls([out, retval] VARIANT_BOOL *pVal);
		[propput, helpstring("property bAutoCloseCalls")] HRESULT bAutoCloseCalls([in] VARIANT_BOOL newVal);
	};

    [
        uuid(F12D527C-D9A8-412e-BA6A-4536B10DD571),
        helpstring("IAVTapi2 Interface"),
        pointer_default(unique)
    ]
    interface IAVTapi2 : IAVTapi
    {
		[helpstring("method USBIsPresent")] 
        HRESULT USBIsPresent(
            [out, retval] BOOL* pVal
            );

        HRESULT USBTakeCallEnabled( 
            [out] BOOL* pEnabled
            );

		HRESULT USBGetDefaultUse(
		    [out] BOOL* pUse
			);

		[helpstring("method DoneRegistration")] 
        HRESULT DoneRegistration();

        HRESULT USBSetHandling(
            [in]    BOOL    bUSeUSB
            );

        HRESULT USBGetTerminalName(
            [in]    AVTerminalDirection Direction,
            [out]   BSTR*               pbstrName
            );

        HRESULT USBSetVolume(
            [in]    AVTerminalDirection Direction,
            [in]    long                nVolume
            );

        HRESULT USBGetVolume(
            [in]    AVTerminalDirection Direction,
            [in]    long*               pVolume
            );

    };

	[

		uuid(90381ECB-3603-11D1-9B39-00C04FB9514E),

		helpstring("IConfExplorer Interface"),
		pointer_default(unique)
	]
	interface IConfExplorer : IUnknown
	{
		[helpstring("method Show")] HRESULT Show(HWND hWndList, HWND hWndDetails);
		[helpstring("method UnShow")] HRESULT UnShow();
		[helpstring("method Join")] HRESULT Join(long *pConfDetailsArg);
		[helpstring("method Create")] HRESULT Create(BSTR bstrName);
		[helpstring("method Delete")] HRESULT Delete(BSTR bstrName);
		[helpstring("method Edit")] HRESULT Edit(BSTR bstrName);
		[helpstring("method Refresh")] HRESULT Refresh();
		[propget, helpstring("property DetailsView")] HRESULT DetailsView([out, retval] IConfExplorerDetailsView * *pVal);
		[propget, helpstring("property TreeView")] HRESULT TreeView([out, retval] IConfExplorerTreeView * *pVal);
		[propget, helpstring("property ConfDirectory")] HRESULT ConfDirectory([in] BSTR *pbstrServer, [out, retval] IDispatch * *pVal);
		[propget, helpstring("property DirectoryObject")] HRESULT DirectoryObject(BSTR bstrServer, BSTR bstrConf, [out, retval] IUnknown* *pVal);
		[propget, helpstring("property ITRendezvous")] HRESULT ITRendezvous([out, retval] IUnknown **ppVal);
		[helpstring("method EnumSiteServer")] HRESULT EnumSiteServer(BSTR bstrName, IEnumSiteServer **ppEnum);
		[helpstring("method AddSpeedDial")] HRESULT AddSpeedDial(BSTR bstrName);
		[helpstring("method IsDefaultServer")] HRESULT IsDefaultServer(BSTR bstrServer);
	};
	[
	
		uuid(90381ECC-3603-11D1-9B39-00C04FB9514E),
	
		helpstring("IConfExplorerTreeView Interface"),
		pointer_default(unique)
	]
	interface IConfExplorerTreeView : IUnknown
	{
		[propget, helpstring("property hWnd")] HRESULT hWnd([out, retval] HWND *pVal);
		[propput, helpstring("property hWnd")] HRESULT hWnd([in] HWND newVal);
		[helpstring("method Select")] HRESULT Select(BSTR bstrName);
		[helpstring("method SelectItem")] HRESULT SelectItem(short nSel);
		[helpstring("method Refresh")] HRESULT Refresh();
		[helpstring("method AddServer")] HRESULT AddServer(BSTR bstrName);
		[helpstring("method RemoveServer")] HRESULT RemoveServer(BSTR Location, BSTR bstrName);
		[propget, helpstring("property ConfExplorer")] HRESULT ConfExplorer([out, retval] IConfExplorer* *pVal);
		[propput, helpstring("property ConfExplorer")] HRESULT ConfExplorer([in] IConfExplorer* newVal);
		[helpstring("method GetSelection")] HRESULT GetSelection(BSTR *pbstrLocation, BSTR *pbstrServer);
		[helpstring("method FindOrAddItem")] HRESULT FindOrAddItem(BSTR bstrLocation, BSTR bstrServer, BOOL bAdd, BOOL bLocationOnly, long **pphItem);
		[helpstring("method CanRemoveServer")] HRESULT CanRemoveServer();
		[helpstring("method SetConfServerForEnum")] HRESULT SetConfServerForEnum(BSTR bstrServer, long *pList, long *pListPersons, DWORD dwTicks, BOOL bUpdate);
		[helpstring("method GetConfServerForEnum")] HRESULT GetConfServerForEnum(BSTR *pbstrServer);
		[helpstring("method ForceConfServerForEnum")] HRESULT ForceConfServerForEnum(BSTR bstrServer);
		[propget, helpstring("property dwRefreshInterval")] HRESULT dwRefreshInterval([out, retval] DWORD *pVal);
		[propput, helpstring("property dwRefreshInterval")] HRESULT dwRefreshInterval([in] DWORD newVal);
		[helpstring("method BuildJoinConfList")] HRESULT BuildJoinConfList(long *pList, VARIANT_BOOL bAllConfs);
		[propget, helpstring("property nServerState")] HRESULT nServerState([out, retval] ServerState *pVal);
		[helpstring("method RemoveConference")] HRESULT RemoveConference(BSTR bstrServer, BSTR bstrName);
		[helpstring("method AddLocation")] HRESULT AddLocation(BSTR bstrLocation);
		[helpstring("method BuildJoinConfListText")] HRESULT BuildJoinConfListText(long *pList, BSTR bstrText);
		[helpstring("method RenameServer")] HRESULT RenameServer();
		[helpstring("method AddConference")] HRESULT AddConference(BSTR bstrServer, ITDirectoryObject *pDirObj);
		[helpstring("method EnumSiteServer")] HRESULT EnumSiteServer(BSTR bstrName, IEnumSiteServer **ppEnum);
		[helpstring("method AddPerson")] HRESULT AddPerson(BSTR bstrServer, ITDirectoryObject *pDirObj);
	};
	[
		
		uuid(90381EC6-3603-11D1-9B39-00C04FB9514E),
	
		helpstring("IConfExplorerDetailsView Interface"),
		pointer_default(unique)
	]
	interface IConfExplorerDetailsView : IUnknown
	{
		[propget, helpstring("property hWnd")] HRESULT hWnd([out, retval] HWND *pVal);
		[propput, helpstring("property hWnd")] HRESULT hWnd([in] HWND newVal);
		[helpstring("method Refresh")] HRESULT Refresh();
		[propget, helpstring("property ConfExplorer")] HRESULT ConfExplorer([out, retval] IConfExplorer * *pVal);
		[propput, helpstring("property ConfExplorer")] HRESULT ConfExplorer([in] IConfExplorer * newVal);
		[propget, helpstring("property Selection")] HRESULT Selection(DATE *pdateStart, DATE *pdateEnd, [out, retval] BSTR *pVal);
		[helpstring("method OnColumnClicked")] HRESULT OnColumnClicked(long nColumn);
		[helpstring("method UpdateConfList")] HRESULT UpdateConfList(long *pList);
		[propget, helpstring("property bSortAscending")] HRESULT bSortAscending([out, retval] VARIANT_BOOL *pVal);
		[propget, helpstring("property nSortColumn")] HRESULT nSortColumn([out, retval] long *pVal);
		[propput, helpstring("property nSortColumn")] HRESULT nSortColumn([in] long newVal);
		[helpstring("method IsConferenceSelected")] HRESULT IsConferenceSelected();
		[propget, helpstring("property SelectedConfDetails")] HRESULT SelectedConfDetails([out, retval] long **ppVal);
	};
	[
	
		uuid(8AF7D5C5-4421-11D1-B621-00C04FA3C554),
	
		helpstring("IAVTapiNotification Interface"),
		pointer_default(unique)
	]
	interface IAVTapiNotification : IUnknown
	{
		[helpstring("method NewCall")] HRESULT NewCall(long *plCallID, CallManagerMedia cmm, BSTR bstrMediaName);
		[helpstring("method ClearCurrentActions")] HRESULT ClearCurrentActions(long lCallerID);
		[helpstring("method SetCallerID")] HRESULT SetCallerID(long lCallID, BSTR bstrCallerID);
		[helpstring("method AddCurrentAction")] HRESULT AddCurrentAction(long lCallID, CallManagerActions cma, BSTR bstrText);
		[helpstring("method SetCallState")] HRESULT SetCallState(long lCallID, CallManagerStates cms, BSTR bstrText);
		[helpstring("method ErrorNotify")] HRESULT ErrorNotify(BSTR bstrOperation, BSTR bstrDetails, long hrError);
		[helpstring("method CloseCallControl")] HRESULT CloseCallControl(long lCallID);
		[helpstring("method ActionSelected")] HRESULT ActionSelected(CallClientActions cca);
		[helpstring("method LogCall")] HRESULT LogCall(long lCallID, CallLogType nType, DATE dateStart, DATE dateEnd, BSTR bstrAddr, BSTR bstrName);
		[helpstring("method NotifyUserUserInfo")] HRESULT NotifyUserUserInfo(long lCallID, ULONG_PTR hMem);
	};
	[
	
		uuid(8AF7D5C7-4421-11D1-B621-00C04FA3C554),
	
		helpstring("IAVTapiCall Interface"),
		pointer_default(unique)
	]
	interface IAVTapiCall : IUnknown
	{
		[propget, helpstring("property lCallID")] HRESULT lCallID([out, retval] long *pVal);
		[propput, helpstring("property lCallID")] HRESULT lCallID([in] long newVal);
		[propget, helpstring("property callState")] HRESULT callState([out, retval] CALL_STATE *pVal);
		[propput, helpstring("property callState")] HRESULT callState([in] CALL_STATE newVal);
		[propget, helpstring("property ITBasicCallControl")] HRESULT ITBasicCallControl([out, retval] ITBasicCallControl * *pVal);
		[propput, helpstring("property ITBasicCallControl")] HRESULT ITBasicCallControl([in] ITBasicCallControl * newVal);
		[propget, helpstring("property ITAddress")] HRESULT ITAddress([out, retval] ITAddress **pVal);
		[propget, helpstring("property bKillMe")] HRESULT bKillMe([out, retval] BOOL *pVal);
		[propput, helpstring("property bKillMe")] HRESULT bKillMe([in] BOOL newVal);
		[propget, helpstring("property IBasicVideo")] HRESULT IBasicVideo([out, retval] IDispatch **pVal);
		[propget, helpstring("property nCallType")] HRESULT nCallLogType([out, retval] CallLogType *pVal);
		[propput, helpstring("property nCallType")] HRESULT nCallLogType([in] CallLogType newVal);
		[propget, helpstring("property IVideoWindow")] HRESULT IVideoWindow(short nInd, [out, retval] IDispatch **pVal);
		[helpstring("method AddTerminal")] HRESULT AddTerminal(ITTerminal *pITTerminal);
		[helpstring("method RemoveTerminal")] HRESULT RemoveTerminal(ITTerminal *pITTerminal);
		[helpstring("method CheckKillMe")] HRESULT CheckKillMe();
		[propget, helpstring("property dwAddressType")] HRESULT dwAddressType([out, retval] DWORD *pVal);
		[propput, helpstring("property dwAddressType")] HRESULT dwAddressType([in] DWORD newVal);
		[helpstring("method NotifyConfRoomState")] HRESULT NotifyConfRoomState(long *pErrorInfo);
		[propget, helpstring("property bstrOriginalAddress")] HRESULT bstrOriginalAddress([out, retval] BSTR *pVal);
		[propput, helpstring("property bstrOriginalAddress")] HRESULT bstrOriginalAddress([in] BSTR newVal);
		[helpstring("method PostMessage")] HRESULT PostMessage(long msg, WPARAM wParam);
		[propget, helpstring("property dwThreadID")] HRESULT dwThreadID([out, retval] DWORD *pVal);
		[propput, helpstring("property dwThreadID")] HRESULT dwThreadID([in] DWORD newVal);
		[helpstring("method Disconnect")] HRESULT Disconnect([in] VARIANT_BOOL bKill);
		[propget, helpstring("property ITBasicAudioTerminal")] HRESULT ITBasicAudioTerminal([out, retval] ITBasicAudioTerminal* *pVal);
		[propget, helpstring("property dwCaps")] HRESULT dwCaps([out, retval] DWORD *pVal);
		[propget, helpstring("property bstrCallerID")] HRESULT bstrCallerID([out, retval] BSTR *pVal);
		[propget, helpstring("property bstrName")] HRESULT bstrName([out, retval] BSTR *pVal);
		[propput, helpstring("property bstrName")] HRESULT bstrName([in] BSTR newVal);
		[propget, helpstring("property ITCallHub")] HRESULT ITCallHub([out, retval] ITCallHub * *pVal);
		[helpstring("method PopulateTreeView")] HRESULT PopulateTreeView(IConfRoomTreeView *pTreeView);
		[helpstring("method AddParticipant")] HRESULT AddParticipant(ITParticipant *pParticipant);
		[helpstring("method RemoveParticipant")] HRESULT RemoveParticipant(ITParticipant *pParticipant);
		[helpstring("method IsSameCallHub")] HRESULT IsSameCallHub(ITCallHub *pCallHub);
		[helpstring("method EnumParticipants")] HRESULT EnumParticipants();
		[helpstring("method GetDisplayNameForParticipant")] HRESULT GetDisplayNameForParticipant(ITParticipant *pParticipant, BSTR *pbstrName );
		[helpstring("method Log")] HRESULT Log(CallLogType nType);
		[helpstring("method IsMyParticipant")] HRESULT IsMyParticipant(ITParticipant *pParticipant);
		[helpstring("method UpdateCallerIDFromParticipant")] HRESULT UpdateCallerIDFromParticipant();
		[propget, helpstring("property bstrUser")] HRESULT bstrUser([in] short nIndex, [out, retval] BSTR *pVal);
		[propput, helpstring("property bstrUser")] HRESULT bstrUser([in] short nIndex, [in] BSTR newVal);
		[helpstring("method ResolveAddress")] HRESULT ResolveAddress();
		[helpstring("method ForceCallerIDUpdate")] HRESULT ForceCallerIDUpdate();
		[helpstring("method NotifyStreamEvent")] HRESULT NotifyStreamEvent(CALL_MEDIA_EVENT cme);
		[helpstring("method GetVideoFeedCount")] HRESULT GetVideoFeedCount(short *pnCount);
		[helpstring("method TerminalArrival")] HRESULT TerminalArrival([in] ITTerminal *pTerminal);
		[helpstring("method TerminalRemoval")] HRESULT TerminalRemoval([in] ITTerminal *pTerminal);
		[propget, helpstring("property bstrDisplayableAddress")] HRESULT bstrDisplayableAddress([out, retval] BSTR *pVal);
		[propput, helpstring("property bstrDisplayableAddress")] HRESULT bstrDisplayableAddress([in] BSTR newVal);
		[propget, helpstring("property bResolved")] HRESULT bResolved([out, retval] VARIANT_BOOL *pVal);
		[propput, helpstring("property bResolved")] HRESULT bResolved([in] VARIANT_BOOL newVal);
		[helpstring("method NotifyParticipantChangeConfRoom")] HRESULT NotifyParticipantChangeConfRoom(ITParticipant *pParticipant, AV_PARTICIPANT_EVENT nEvent);
		[propget, helpstring("property ITCallInfo")] HRESULT ITCallInfo([out, retval] ITCallInfo * *pVal);
		[helpstring("method IsPreviewStreaming")] HRESULT IsPreviewStreaming();
		[helpstring("method GetCallerIDInfo")] HRESULT GetCallerIDInfo(ITCallInfo *pCallInfo);
		[helpstring("method HandleUserUserInfo")] HRESULT HandleUserUserInfo();
		[propget, helpstring("property ITParticipantControl")] HRESULT ITParticipantControl([out, retval] ITParticipantControl **ppVal);
		[propget, helpstring("property ITerminalPreview")] HRESULT ITTerminalPreview([out, retval] ITTerminal * *pVal);
		[propput, helpstring("property ITerminalPreview")] HRESULT ITTerminalPreview([in] ITTerminal * newVal);
		[propget, helpstring("property IVideoWindowPreview")] HRESULT IVideoWindowPreview([out, retval] IDispatch * *pVal);
		[propput, helpstring("property StreamActive")] HRESULT StreamActive([in] VARIANT_BOOL bActive);
		[helpstring("method IsRcvVideoStreaming")] HRESULT IsRcvVideoStreaming();
		[propget, helpstring("property RcvVideoStreaming")] HRESULT RcvVideoStreaming([out, retval] VARIANT_BOOL *pVal);
		[propput, helpstring("property RcvVideoStreaming")] HRESULT RcvVideoStreaming([in] VARIANT_BOOL newVal);
		[helpstring("method OnStreamingChanged")] HRESULT OnStreamingChanged(IVideoFeed *pFeed, VARIANT_BOOL bStreaming);
		[propget, helpstring("property nCallType")] HRESULT nCallType([out, retval] AVCallType *pVal);
		[propput, helpstring("property nCallType")] HRESULT nCallType([in] AVCallType newVal);
		[helpstring("method UpdateParticipant")] HRESULT UpdateParticipant(ITParticipant *pITParticipant);
		[helpstring("method FindParticipant")] HRESULT FindParticipant(ITParticipant *pParticipant, IParticipant **ppFound);
	};
	[

		uuid(8AD4E88F-4660-11D1-B623-00C04FA3C554),

		helpstring("ITapiNotification Interface"),
		pointer_default(unique)
	]
	interface ITapiNotification : IUnknown
	{
		[helpstring("method Init")] HRESULT Init(ITTAPI *pITTapi, long *pErrorInfo);
		[helpstring("method Shutdown")] HRESULT Shutdown();
		[helpstring("method ListenOnAllAddresses")] HRESULT ListenOnAllAddresses(long *pErrorInfo);
	};
	[

		uuid(CC9D6B1F-4A3F-11D1-B626-00C04FA3C554),

		helpstring("IConfRoom Interface"),
		pointer_default(unique)
	]
	interface IConfRoom : IUnknown
	{
		[helpstring("method IsConfRoomInUse")] HRESULT IsConfRoomInUse();
		[helpstring("method Show")] HRESULT Show(HWND hWndTree, HWND hWndClient);
		[helpstring("method EnterConfRoom")] HRESULT EnterConfRoom(IAVTapiCall *pAVCall);
		[helpstring("method UnShow")] HRESULT UnShow();
		[propget, helpstring("property TreeView")] HRESULT TreeView([out, retval] IConfRoomTreeView * *pVal);
		[helpstring("method Disconnect")] HRESULT Disconnect();
		[helpstring("method NotifyStateChange")] HRESULT NotifyStateChange(IAVTapiCall *pAVCall);
		[helpstring("method CanDisconnect")] HRESULT CanDisconnect();
		[propget, helpstring("property MemberVideoSize")] HRESULT MemberVideoSize([out, retval] short *pVal);
		[propput, helpstring("property MemberVideoSize")] HRESULT MemberVideoSize([in] short newVal);
		[propget, helpstring("property nNumTerms")] HRESULT nNumTerms([out, retval] short *pVal);
		[helpstring("method SelectTalker")] HRESULT SelectTalker(ITParticipant *pParticipant, VARIANT_BOOL bUpdateTree);
		[propget, helpstring("property bstrConfName")] HRESULT bstrConfName([out, retval] BSTR *pVal);
		[propget, helpstring("property hWndConfRoom")] HRESULT hWndConfRoom([out, retval] HWND *pVal);
		[propget, helpstring("property bShowNames")] HRESULT bShowNames([out, retval] VARIANT_BOOL *pVal);
		[propput, helpstring("property bShowNames")] HRESULT bShowNames([in] VARIANT_BOOL newVal);
		[propget, helpstring("property IAVTapiCall")] HRESULT IAVTapiCall([out, retval] IAVTapiCall * *ppVal);
		[propget, helpstring("property nShowNamesNumLines")] HRESULT nShowNamesNumLines([out, retval] short *pVal);
		[propput, helpstring("property nShowNamesNumLines")] HRESULT nShowNamesNumLines([in] short newVal);
		[propget, helpstring("property bConfirmDisconnect")] HRESULT bConfirmDisconnect([out, retval] VARIANT_BOOL *pVal);
		[helpstring("method NotifyParticipantChange")] HRESULT NotifyParticipantChange(IAVTapiCall *pAVCall, ITParticipant *pParticipant, AV_PARTICIPANT_EVENT nEvent);
		[propput, helpstring("property bConfirmDisconnect")] HRESULT bConfirmDisconnect([in] VARIANT_BOOL newVal);
		[propget, helpstring("property TalkerParticipant")] HRESULT TalkerParticipant([out, retval] ITParticipant **ppVal);
		[propget, helpstring("property nMaxTerms")] HRESULT nMaxTerms([out, retval] short *pVal);
		[propput, helpstring("property nMaxTerms")] HRESULT nMaxTerms([in] short newVal);
		[propget, helpstring("property lNumParticipants")] HRESULT lNumParticipants([out, retval] long *pVal);
		[propget, helpstring("property ConfDetails")] HRESULT ConfDetails([out, retval] long * *pVal);
		[propput, helpstring("property ConfDetails")] HRESULT ConfDetails([in] long * newVal);
		[propget, helpstring("property bstrConfDetails")] HRESULT bstrConfDetails([out, retval] BSTR *pVal);
		[helpstring("method Layout")] HRESULT Layout(VARIANT_BOOL bTalker, VARIANT_BOOL bMembers);
		[helpstring("method SelectTalkerVideo")] HRESULT SelectTalkerVideo(IDispatch *pDisp, VARIANT_BOOL bUpdate);
		[propget, helpstring("property hWndMembers")] HRESULT hWndMembers([out, retval] HWND *pVal);
		[propget, helpstring("property hWndTalker")] HRESULT hWndTalker([out, retval] HWND *pVal);
		[propget, helpstring("property TalkerVideo")] HRESULT TalkerVideo([out, retval] IDispatch * *pVal);
		[propget, helpstring("property bPreviewStreaming")] HRESULT bPreviewStreaming([out, retval] VARIANT_BOOL *pVal);
		[helpstring("method FindVideoFeedFromParticipant")] HRESULT FindVideoFeedFromParticipant(ITParticipant *pParticipant, IVideoFeed **ppFeed);
		[helpstring("method SetQOSOnParticipants")] HRESULT SetQOSOnParticipants();
		[helpstring("method FindVideoFeedFromSubStream")] HRESULT FindVideoFeedFromSubStream(ITSubStream *pSubStream, IVideoFeed **ppFeed);
		[helpstring("method GetFirstVideoWindowThatsStreaming")] HRESULT GetFirstVideoWindowThatsStreaming(IDispatch **ppVideo);
		[helpstring("method IsConfRoomConnected")] HRESULT IsConfRoomConnected();
		[helpstring("method Cancel")] HRESULT Cancel();
		[propput, helpstring("property CallState")] HRESULT CallState([in] CALL_STATE newVal);
		[propget, helpstring("property szTalker")] HRESULT szTalker([out, retval] SIZE *pVal);
		[propget, helpstring("property TalkerScale")] HRESULT TalkerScale([out, retval] short *pVal);
		[propput, helpstring("property TalkerScale")] HRESULT TalkerScale([in] short newVal);
	};
	[
	
		uuid(CC9D6B21-4A3F-11D1-B626-00C04FA3C554),
	
		helpstring("IConfRoomTreeView Interface"),
		pointer_default(unique)
	]
	interface IConfRoomTreeView : IUnknown
	{
		[propget, helpstring("property hWnd")] HRESULT hWnd([out, retval] HWND *pVal);
		[propput, helpstring("property hWnd")] HRESULT hWnd([in] HWND newVal);
		[propget, helpstring("property ConfRoom")] HRESULT ConfRoom([out, retval] IConfRoom * *pVal);
		[propput, helpstring("property ConfRoom")] HRESULT ConfRoom([in] IConfRoom * newVal);
		[helpstring("method UpdateData")] HRESULT UpdateData(BOOL bSaveAndValidate);
		[helpstring("method SelectParticipant")] HRESULT SelectParticipant(ITParticipant *pParticipant, VARIANT_BOOL bMeParticipant);
		[helpstring("method UpdateRootItem")] HRESULT UpdateRootItem();
	};
	[
	
		uuid(C35F615F-8A24-11D1-B673-00C04FA3C554),
	
		helpstring("IVideoFeed Interface"),
		pointer_default(unique)
	]
	interface IVideoFeed : IUnknown
	{
		[propget, helpstring("property bstrName")] HRESULT bstrName([out, retval] BSTR *pVal);
		[propget, helpstring("property rc")] HRESULT rc([out, retval] RECT *pVal);
		[propput, helpstring("property rc")] HRESULT rc([in] RECT newVal);
		[helpstring("method Paint")] HRESULT Paint(ULONG_PTR hDC, HWND hWndSource);
		[propget, helpstring("property IVideoWindow")] HRESULT IVideoWindow([out, retval] IUnknown * *pVal);
		[propput, helpstring("property IVideoWindow")] HRESULT IVideoWindow([in] IUnknown * newVal);
		[propget, helpstring("property ITParticipant")] HRESULT ITParticipant([out, retval] ITParticipant **ppVal);
		[propput, helpstring("property ITParticipant")] HRESULT ITParticipant([in] ITParticipant *pVal);
		[propget, helpstring("property bPreview")] HRESULT bPreview([out, retval] VARIANT_BOOL *pVal);
		[propput, helpstring("property bPreview")] HRESULT bPreview([in] VARIANT_BOOL newVal);
		[propget, helpstring("property bRequestQOS")] HRESULT bRequestQOS([out, retval] VARIANT_BOOL *pVal);
		[propput, helpstring("property bRequestQOS")] HRESULT bRequestQOS([in] VARIANT_BOOL newVal);
		[helpstring("method UpdateName")] HRESULT UpdateName();
		[helpstring("method IsVideoStreaming")] HRESULT IsVideoStreaming(VARIANT_BOOL bIncludePreview);
		[helpstring("method GetNameFromVideo")] HRESULT GetNameFromVideo(IUnknown *pVideo, BSTR *pbstrName, BSTR *pbstrInfo, VARIANT_BOOL bAllowNull, VARIANT_BOOL bPreview);
		[helpstring("method MapToParticipant")] HRESULT MapToParticipant(ITParticipant *pParticipant);
		[propget, helpstring("property ITSubStream")] HRESULT ITSubStream([out, retval] ITSubStream * *pVal);
	};
	[
	
		uuid(239A3C5B-8D41-11D1-B675-00C04FA3C554),
	
		helpstring("IGeneralNotification Interface"),
		pointer_default(unique)
	]
	interface IGeneralNotification : IUnknown
	{
		[helpstring("method IsReminderSet")] HRESULT IsReminderSet(BSTR bstrServer, BSTR bstrName);
		[helpstring("method ResolveAddress")] HRESULT ResolveAddress(BSTR bstrAddress, BSTR *pbstrName, BSTR *pbstrUser1, BSTR *pbstrUser2);
		[helpstring("method ClearUserList")] HRESULT ClearUserList();
		[helpstring("method AddUser")] HRESULT AddUser(BSTR bstrName, BSTR bstrAddress, BSTR bstrPhoneNumber);
		[helpstring("method ResolveAddressEx")] HRESULT ResolveAddressEx(BSTR bstrAddress, long lAddressType, DialerMediaType nMedia, DialerLocationType nLocation, BSTR *pbstrName, BSTR *pbstrAddress, BSTR *pbstrUser1, BSTR *pbstrUser2);
		[helpstring("method AddSiteServer")] HRESULT AddSiteServer(BSTR bstrServer);
		[helpstring("method RemoveSiteServer")] HRESULT RemoveSiteServer(BSTR bstrName);
		[helpstring("method NotifySiteServerStateChange")] HRESULT NotifySiteServerStateChange(BSTR bstrName, ServerState nState);
		[helpstring("method AddSpeedDial")] HRESULT AddSpeedDial(BSTR bstrName, BSTR bstrAddress, CallManagerMedia cmm);
		[helpstring("method UpdateConfRootItem")] HRESULT UpdateConfRootItem(BSTR bstrNewText);
		[helpstring("method UpdateConfParticipant")] HRESULT UpdateConfParticipant(MyUpdateType nType, IParticipant *pParticipant, BSTR bstrText);
		[helpstring("method DeleteAllConfParticipants")] HRESULT DeleteAllConfParticipants();
		[helpstring("method SelectConfParticipant")] HRESULT SelectConfParticipant(IParticipant *pParticipant);
	};
	[
	
		uuid(239A3C5D-8D41-11D1-B675-00C04FA3C554),
	
		helpstring("IAVGeneralNotification Interface"),
		pointer_default(unique)
	]
	interface IAVGeneralNotification : IUnknown
	{
		[helpstring("method fire_IsReminderSet")] HRESULT fire_IsReminderSet(BSTR bstrServer, BSTR bstrName);
		[helpstring("method Init")] HRESULT Init();
		[helpstring("method fire_ResolveAddress")] HRESULT fire_ResolveAddress(BSTR bstrAddress, BSTR *pbstrName, BSTR *pbstrUser1, BSTR *pbstrUser2);
		[helpstring("method Term")] HRESULT Term();
		[helpstring("method fire_ClearUserList")] HRESULT fire_ClearUserList();
		[helpstring("method fire_AddUser")] HRESULT fire_AddUser(BSTR bstrName, BSTR bstrAddress, BSTR bstrPhoneNumber);
		[helpstring("method fire_ResolveAddressEx")] HRESULT fire_ResolveAddressEx(BSTR bstrAddress, long lAddressType, DialerMediaType nMedia, DialerLocationType nLoctaion, BSTR *pbstrName, BSTR *pbstrAddress, BSTR *pbstrUser1, BSTR *pbstrUser2);
		[helpstring("method fire_RemoveSiteServer")] HRESULT fire_RemoveSiteServer(BSTR bstrName);
		[helpstring("method fire_AddSiteServer")] HRESULT fire_AddSiteServer(BSTR bstrName);
		[helpstring("method fire_NotifySiteServerStateChange")] HRESULT fire_NotifySiteServerStateChange(BSTR bstrName, ServerState nState);
		[helpstring("method fire_AddSpeedDial")] HRESULT fire_AddSpeedDial(BSTR bstrName, BSTR bstrAddress, CallManagerMedia cmm);
		[helpstring("method fire_UpdateConfParticipant")] HRESULT fire_UpdateConfParticipant(MyUpdateType nType, IParticipant *pParticipant, BSTR bstrText);
		[helpstring("method fire_UpdateConfRootItem")] HRESULT fire_UpdateConfRootItem(BSTR bstrNewText);
		[helpstring("method fire_DeleteAllConfParticipants")] HRESULT fire_DeleteAllConfParticipants();
		[helpstring("method fire_SelectConfParticipant")] HRESULT fire_SelectConfParticipant(IParticipant *pParticipant);
	};
	[
	
		uuid(239A3C5F-8D41-11D1-B675-00C04FA3C554),
	
		helpstring("IPersonExplorer Interface"),
		pointer_default(unique)
	]
	interface IPersonExplorer : IUnknown
	{
		[helpstring("method Show")] HRESULT Show(HWND hWndTree, HWND hWndDetails);
		[helpstring("method UnShow")] HRESULT UnShow();
		[propget, helpstring("property DetailsView")] HRESULT DetailsView([out, retval] IPersonExplorerDetailsView * *ppVal);
		[propget, helpstring("property TreeView")] HRESULT TreeView([out, retval] IPersonExplorerTreeView * *ppVal);
	};
	[
	
		uuid(55AB415D-99B3-11D1-B67B-00C04FA3C554),
	
		helpstring("IPersonExplorerTreeView Interface"),
		pointer_default(unique)
	]
	interface IPersonExplorerTreeView : IUnknown
	{
	};
	[
	
		uuid(55AB4160-99B3-11D1-B67B-00C04FA3C554),
	
		helpstring("IPersonExplorerDetailsView Interface"),
		pointer_default(unique)
	]
	interface IPersonExplorerDetailsView : IUnknown
	{
	};
	[
	
		uuid(7009012B-F11E-11D1-B55E-00C04FB91A25),
	
		helpstring("IParticipant Interface"),
		pointer_default(unique)
	]
	interface IParticipant : IUnknown
	{
		[propget, helpstring("property ITParticipant")] HRESULT ITParticipant([out, retval] ITParticipant * *pVal);
		[propput, helpstring("property ITParticipant")] HRESULT ITParticipant([in] ITParticipant * newVal);
		[propget, helpstring("property bstrDisplayName")] HRESULT bstrDisplayName(long nStyle, [out, retval] BSTR *pVal);
		[propget, helpstring("property bStreamingVideo")] HRESULT bStreamingVideo([out, retval] VARIANT_BOOL *pVal);
	};
	[
	
		uuid(589AF613-6AAE-11D2-B742-00C04FA3C554),
	
		helpstring("IEnumSiteServer Interface"),
		pointer_default(unique)
	]
	interface IEnumSiteServer : IUnknown
	{
		[helpstring("method Next")] HRESULT Next(ISiteUser **ppUser);
		[helpstring("method Reset")] HRESULT Reset();
		[helpstring("method BuildList")] HRESULT BuildList(long *pPersonDetailList);
	};
	[
	
		uuid(589AF615-6AAE-11D2-B742-00C04FA3C554),
	
		helpstring("ISiteUser Interface"),
		pointer_default(unique)
	]
	interface ISiteUser : IUnknown
	{
		[propget, helpstring("property bstrName")] HRESULT bstrName([out, retval] BSTR *pVal);
		[propput, helpstring("property bstrName")] HRESULT bstrName([in] BSTR newVal);
		[propget, helpstring("property bstrAddress")] HRESULT bstrAddress([out, retval] BSTR *pVal);
		[propput, helpstring("property bstrAddress")] HRESULT bstrAddress([in] BSTR newVal);
		[propget, helpstring("property bstrComputer")] HRESULT bstrComputer([out, retval] BSTR *pVal);
		[propput, helpstring("property bstrComputer")] HRESULT bstrComputer([in] BSTR newVal);
	};
[
	uuid(FB2FF4DD-337E-11D1-9B37-00C04FB9514E),
	version(1.0),
	helpstring("TapiDialer 1.0 Type Library")
]
library TAPIDIALERLib
{
	importlib("stdole32.tlb");

	[
		uuid(FB2FF4EB-337E-11D1-9B37-00C04FB9514E),
		helpstring("AVTapi Class")
	]
	coclass AVTapi
	{
		[default] interface IAVTapi;
	};
	[
		uuid(90381EC3-3603-11D1-9B39-00C04FB9514E),
		helpstring("ConfExplorer Class")
	]
	coclass ConfExplorer
	{
		[default] interface IConfExplorer;
	};
	[
		uuid(90381EC5-3603-11D1-9B39-00C04FB9514E),
		helpstring("ConfExplorerTreeView Class")
	]
	coclass ConfExplorerTreeView
	{
		[default] interface IConfExplorerTreeView;
	};
	[
		uuid(90381EC7-3603-11D1-9B39-00C04FB9514E),
		helpstring("ConfExplorerDetailsView Class")
	]
	coclass ConfExplorerDetailsView
	{
		[default] interface IConfExplorerDetailsView;
	};
	[
		uuid(8AF7D5C6-4421-11D1-B621-00C04FA3C554),
		helpstring("AVTapiNotification Class")
	]
	coclass AVTapiNotification
	{
		[default] interface IAVTapiNotification;
	};
	[
		uuid(8AF7D5C8-4421-11D1-B621-00C04FA3C554),
		helpstring("AVTapiCall Class")
	]
	coclass AVTapiCall
	{
		[default] interface IAVTapiCall;
	};
	[
		uuid(8AD4E890-4660-11D1-B623-00C04FA3C554),
		helpstring("TapiNotification Class")
	]
	coclass TapiNotification
	{
		[default] interface ITapiNotification;
	};
	[
		uuid(CC9D6B20-4A3F-11D1-B626-00C04FA3C554),
		helpstring("ConfRoom Class")
	]
	coclass ConfRoom
	{
		[default] interface IConfRoom;
	};
	[
		uuid(CC9D6B22-4A3F-11D1-B626-00C04FA3C554),
		helpstring("ConfRoomTreeView Class")
	]
	coclass ConfRoomTreeView
	{
		[default] interface IConfRoomTreeView;
	};
	

	[
		uuid(47F410B9-5FA5-11D1-B647-00C04FA3C554),
		helpstring("PageAddress Class")
	]
	coclass PageAddress
	{
		interface IUnknown;
	};
	

	[
		uuid(5B175DF9-6A86-11D1-B651-00C04FA3C554),
		helpstring("PageTerminals Class")
	]
	coclass PageTerminals
	{
		interface IUnknown;
	};
	[
		uuid(C35F6160-8A24-11D1-B673-00C04FA3C554),
		helpstring("VideoFeed Class")
	]
	coclass VideoFeed
	{
		[default] interface IVideoFeed;
	};
	[
		uuid(239A3C5C-8D41-11D1-B675-00C04FA3C554),
		helpstring("GeneralNotification Class")
	]
	coclass GeneralNotification
	{
		[default] interface IGeneralNotification;
	};
	[
		uuid(239A3C5E-8D41-11D1-B675-00C04FA3C554),
		helpstring("AVGeneralNotification Class")
	]
	coclass AVGeneralNotification
	{
		[default] interface IAVGeneralNotification;
	};
	[
		uuid(239A3C60-8D41-11D1-B675-00C04FA3C554),
		helpstring("PersonExplorer Class")
	]
	coclass PersonExplorer
	{
		[default] interface IPersonExplorer;
	};
	[
		uuid(55AB415E-99B3-11D1-B67B-00C04FA3C554),
		helpstring("PersonExplorerTreeView Class")
	]
	coclass PersonExplorerTreeView
	{
		[default] interface IPersonExplorerTreeView;
	};
	[
		uuid(55AB4161-99B3-11D1-B67B-00C04FA3C554),
		helpstring("PersonExplorerDetailsView Class")
	]
	coclass PersonExplorerDetailsView
	{
		[default] interface IPersonExplorerDetailsView;
	};
	[
		uuid(7009012C-F11E-11D1-B55E-00C04FB91A25),
		helpstring("Participant Class")
	]
	coclass Participant
	{
		[default] interface IParticipant;
	};
	

	[
		uuid(71010169-0F7A-11D2-9D09-00C04FB9514E),
		helpstring("PageConf Class")
	]
	coclass PageConf
	{
		interface IUnknown;
	};
	

	[
		uuid(16C655C6-1D15-11D2-B2D4-00C04FB6FA27),
		helpstring("PageGeneral Class")
	]
	coclass PageGeneral
	{
		interface IUnknown;
	};
	[
		uuid(589AF614-6AAE-11D2-B742-00C04FA3C554),
		helpstring("EnumSiteServer Class")
	]
	coclass EnumSiteServer
	{
		[default] interface IEnumSiteServer;
	};
	[
		uuid(589AF616-6AAE-11D2-B742-00C04FA3C554),
		helpstring("SiteUser Class")
	]
	coclass SiteUser
	{
		[default] interface ISiteUser;
	};
};
