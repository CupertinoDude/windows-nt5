/////////////////////////////////////////////////////////////////////////////
//  INTEL Corporation Proprietary Information
//  This listing is supplied under the terms of a license agreement with Intel 
//  Corporation and many not be copied nor disclosed except in accordance
//  with the terms of that agreement.
//  Copyright (c) 1995, 1996 Intel Corporation. 
//
//
//  Module Name: h261.h
//	Environment: MSVC 4.0, OLE 2
/////////////////////////////////////////////////////////////////////////////////

// Note: Payload header data generated by PPM are in network order

#ifndef H261_H
#define H261_H
#include <mmsystem.h>

#define H261_PT   31    //assigned RTP payload number for H.261

// These are used in T_BSINFO_HEADER.dwUniqueCode
#define	H261_CODE		mmioFOURCC('H','2','6','1')
#define H261_VERSION	0

// Per Extended Bitstream document
#define RTP_H26X_PACKET_LOST	0x00000001
#define RTP_H26X_INTRA_CODED	0x00000001

// Per Extended Bitstream document, payload source format codes.  Note that
// enum values must not exceed unsigned char BSINFO_TRAILER::SourceFormat.
enum RTPh261SourceFormat
{
	rtph261SourceFormatQCIF = 0,
	rtph261SourceFormatCIF,
	rtph261SourceFormatUnknown = (unsigned char) 0xff
};

#define BITSPERBYTE	8


// The H261 standard payload header
class H261_Header {
public:

		unsigned char byte0, byte1, byte2, byte3;
		unsigned long padding0;

		H261_Header () : byte0(0), byte1(0), byte2(0), byte3(0), padding0(0) {}

		H261_Header (char *pBuffer) { 
			byte0 = *((unsigned char *) pBuffer);
			byte1 = *((unsigned char *) pBuffer +1);
			byte2 = *((unsigned char *) pBuffer +2);
			byte3 = *((unsigned char *) pBuffer +3);
			padding0 = 0; // not necessary
		}

        int sbit() const { return (byte0 >> 5) & 7; }
        void set_sbit(int sbit) { byte0 = (byte0 & 0x1f) | ((sbit & 7) << 5); }
        
        int ebit() const { return (byte0 >> 2) & 7; }
        void set_ebit(int ebit) { byte0 = (byte0 & 0xe3) | ((ebit & 7) << 2); }
        
        int i() const { return (byte0 >> 1) & 1; }
        void set_i(int i) { byte0 = (byte0 & 0xfd) | ((i & 1) << 1); }
        
        int v() const { return byte0 & 1; }
        void set_v(int v) { byte0 = (byte0 & 0xfe) | (v & 1); }
        
        unsigned char gobn() const { return ((byte1 >> 4) & 0xf); }
        void set_gobn(int gobn) { byte1 = (byte1 & 0x0f) | ((gobn & 0xf) << 4); }
        
        unsigned char mbap() const { return (((byte1 & 0xf) << 1) | ((byte2 >> 7) & 1)); }
        void set_mbap(int mbap) { 
			byte1 = ((byte1 & 0xf0) | ((mbap >> 1) & 0xf));
			byte2 = ((byte2 & 0x7f) | ((mbap & 1) << 7));
		}
        
        unsigned char quant() const { return ((byte2 >> 2) & 0x1f); }
        void set_quant(int quant) { byte2 = (byte2 & 0x83) | ((quant & 0x1f) << 2); }
        
        char hmvd() const { return (((byte2 & 0x3) << 3) | ((byte3 >> 5) & 7)); }
        void set_hmvd(int hmvd) { 
			byte2 = ((byte2 & 0xfc) | ((hmvd >> 3) & 3));
			byte3 = ((byte3 & 0x1f) | ((hmvd & 7) << 5));
		}
        
        char vmvd() const { return (byte3 & 0x1f); }
        void set_vmvd(int vmvd) { byte3 = (byte3 & 0xe0) | (vmvd & 0x1f); }
        
};

/* Old bitset layout
        
typedef struct {                             
    DWORD          vmvd:5;		// vertical motion vector data 
    DWORD          hmvd:5;		// horizontal motion vector data
    DWORD          quant:5;		// quantizer 
    DWORD          mbap:5;		// macroblock address predictor 
    DWORD          gobn:4;		// GOB number  
    DWORD          v:1;			// motion vector flag 
    DWORD          i:1;			// INTRA-frame encoded data   
    DWORD          ebit:3;		// end bit position   
    DWORD          sbit:3;		// start bit position 
} H261_HDR_T;

*/

// The extended H261 bitstream is composed of an array of structures
// of these
typedef struct _T_EX_BITSTREAM_INFO {
	unsigned long	dwFlags;
	unsigned long	dwBitOffset;
	unsigned char	MBAP;
	unsigned char	Quant;
	unsigned char	GOBN;
	char			HMV;
	char			VMV;
	char			padding0;
	short int		padding1;
} BITSTREAM_INFO_H261;

#ifndef _BSINFO_TRAILER_DEFINED
#define _BSINFO_TRAILER_DEFINED
// This is used to locate bitstream info before accessing the extended
// bitstream
typedef struct _T_BSINFO_TRAILER {
	unsigned long	dwVersion;
	unsigned long	dwFlags;
	unsigned long	dwUniqueCode;
	unsigned long	dwCompressedSize;
	unsigned long	dwNumberOfPackets;
	unsigned char	SourceFormat;
	unsigned char	TR;
	unsigned char	TRB;
	unsigned char	DBQ;
} BSINFO_TRAILER;

#endif /* _BSINFO_TRAILER_DEFINED */


#endif /* H261_H */

