/////////////////////////////////////////////////////////////////////////////
//  INTEL Corporation Proprietary Information
//  This listing is supplied under the terms of a license agreement with Intel 
//  Corporation and many not be copied nor disclosed except in accordance
//  with the terms of that agreement.
//  Copyright (c) 1995, 1996 Intel Corporation. 
//
//
//  Module Name: h263.h
//	Environment: MSVC 4.0, OLE 2
/////////////////////////////////////////////////////////////////////////////////

// Note: Payload header data generated by PPM are in network order

#ifndef H263_H
#define H263_H

#include <mmsystem.h>

#define H263_PT   34    //assigned RTP payload number for H.263

// These are used in T_BSINFO_HEADER.dwUniqueCode
#define	H263_CODE		mmioFOURCC('H','2','6','3')
#define H263_VERSION	0

// Per Extended Bitstream document
#define RTP_H26X_PACKET_LOST	0x00000001
#define RTP_H26X_INTRA_CODED	0x00000001

// Per Extended Bitstream document - for H.263 only
#define RTP_H263_PB_FRAME		0x00000002
#define RTP_H263_AP				0x00000004
#define RTP_H263_SAC			0x00000008
#define RTP_H263_MODE_A			0x00000010

#define BITSPERBYTE	8

// The H263 standard payload headers
class H263_Header {
public:

	unsigned char byte0, byte1, byte2, byte3;
    unsigned char h1;
    unsigned char v1;
    unsigned char h2;
    unsigned char v2;
	unsigned char byte8,byte9;
	unsigned char byte10,byte11;

		H263_Header () : byte0(0),byte1(0),byte2(0),byte3(0),
			h1(0),v1(0),h2(0),v2(0),byte8(0),byte9(0),byte10(0),byte11(0) {}

		virtual int header_size() const = 0;
 		virtual void *header_data() const = 0;

        virtual int f() const = 0;
        virtual void set_f(int f) = 0;
        
        virtual int p() const = 0;
        virtual void set_p(int p) = 0;
        
        virtual int sbit() const = 0;
        virtual void set_sbit(int sbit) = 0;
        
        virtual int ebit() const = 0;
        virtual void set_ebit(int ebit) = 0;
        
        virtual unsigned char src() const = 0;
        virtual void set_src(int src) = 0;
        
        virtual int r() const = 0;
        virtual void set_r(int r) = 0;
        
        virtual int i() const = 0;
        virtual void set_i(int i) = 0;
        
        virtual int a() const = 0;
        virtual void set_a(int a) = 0;
        
        virtual int s() const = 0;
        virtual void set_s(int s) = 0;
        
        virtual unsigned char dbq() const = 0;
        virtual void set_dbq(int dbq) = 0;
        
        virtual unsigned char trb() const = 0;
        virtual void set_trb(int trb) = 0;
        
        virtual unsigned char tr() const = 0;
        virtual void set_tr(int tr) = 0;
                
        virtual unsigned char quant() const = 0;
        virtual void set_quant(int quant) = 0;
        
        virtual unsigned char gobn() const = 0;
        virtual void set_gobn(int gobn) = 0;
        
        virtual unsigned char mba() const = 0;
        virtual void set_mba(int mba) = 0;
                
        virtual char  hmv1() const = 0;
        virtual void set_hmv1(int h1) = 0;
                
        virtual char vmv1() const = 0;
        virtual void set_vmv1(int v1) = 0;
                
        virtual char hmv2() const = 0;
        virtual void set_hmv2(int h2) = 0;
                
        virtual char vmv2() const = 0;
        virtual void set_vmv2(int v2) = 0;

};

class H263_HeaderA : public H263_Header {

public:

	H263_HeaderA () {}

		H263_HeaderA (char *pBuffer) { 
			byte0 = *((unsigned char *) pBuffer);
			byte1 = *((unsigned char *) pBuffer +1);
			byte2 = *((unsigned char *) pBuffer +2);
			byte3 = *((unsigned char *) pBuffer +3);
		}

		virtual int header_size() const { return 4; }
		virtual void *header_data() const { return (void *) &byte0; }

        virtual int f() const { return (byte0 >> 7) & 1; }
        virtual void set_f(int f) { byte0 = (byte0 & 0x7f) | ((f & 1) << 7); }
        
        virtual int p() const { return (byte0 >> 6) & 1; }
        virtual void set_p(int p) { byte0 = (byte0 & 0xbf) | ((p & 1) << 6); }
        
        virtual int sbit() const { return (byte0 >> 3) & 7; }
        virtual void set_sbit(int sbit) { byte0 = (byte0 & 0xc7) | ((sbit & 7) << 3); }
        
        virtual int ebit() const { return (byte0 & 7); }
        virtual void set_ebit(int ebit) { byte0 = (byte0 & 0xf8) | (ebit & 7); }
        
        virtual unsigned char src() const { return (byte1 >> 5) & 7; }
        virtual void set_src(int src) { byte1 = (byte1 & 0x1f) | ((src & 7) << 5); }
        
        virtual int r() const { return (byte1 & 0x1f); }
        virtual void set_r(int r) { byte1 = (byte1 & 0xe0) | (r & 0x1f); }
        
        virtual int i() const { return (byte2 >> 7) & 1; }
        virtual void set_i(int i) { byte2 = (byte2 & 0x7f) | ((i & 1) << 7); }
        
        virtual int a() const { return (byte2 >> 6) & 1; }
        virtual void set_a(int a) { byte2 = (byte2 & 0xbf) | ((a & 1) << 6); }
        
        virtual int s() const { return (byte2 >> 5) & 1; }
        virtual void set_s(int s) { byte2 = (byte2 & 0xdf) | ((s & 1) << 5); }
        
        virtual unsigned char dbq() const { return (byte2 >> 3) & 3; }
        virtual void set_dbq(int dbq) { byte2 = (byte2 & 0xe7) | ((dbq & 3) << 3); }
        
        virtual unsigned char trb() const { return (byte2 & 7); }
        virtual void set_trb(int trb) { byte2 = (byte2 & 0xf8) | (trb & 7); }
        
        virtual unsigned char tr() const { return byte3; }
        virtual void set_tr(int tr) { byte3 = (BYTE)tr; }

        virtual unsigned char quant() const {return 0;}
        virtual void set_quant(int quant){}
        
        virtual unsigned char gobn() const {return 0;}
        virtual void set_gobn(int gobn){}
        
        virtual unsigned char mba() const {return 0;}
        virtual void set_mba(int mba){}
                
        virtual char hmv1() const {return 0;}
        virtual void set_hmv1(int h1){}
                
        virtual char vmv1() const {return 0;}
        virtual void set_vmv1(int v1){}
                
        virtual char hmv2() const {return 0;}
        virtual void set_hmv2(int h2){}
                
        virtual char vmv2() const {return 0;}
        virtual void set_vmv2(int v2){}

};

class H263_HeaderB : public H263_Header {

public:
		H263_HeaderB () {}

		H263_HeaderB (char *pBuffer) { 
			byte0 = *((unsigned char *) pBuffer);
			byte1 = *((unsigned char *) pBuffer +1);
			byte2 = *((unsigned char *) pBuffer +2);
			byte3 = *((unsigned char *) pBuffer +3);
			h1 = *(((unsigned char*)pBuffer)+4); 
			v1 = *(((unsigned char*)pBuffer)+5); 
			h2 = *(((unsigned char*)pBuffer)+6); 
			v2 = *(((unsigned char*)pBuffer)+7); 
		}

		virtual int header_size() const { return 8; }
 		virtual void *header_data() const { return (void *) &byte0; }

        virtual int f() const { return (byte0 >> 7) & 1; }
        virtual void set_f(int f) { byte0 = (byte0 & 0x7f) | ((f & 1) << 7); }
        
        virtual int p() const { return (byte0 >> 6) & 1; }
        virtual void set_p(int p) { byte0 = (byte0 & 0xbf) | ((p & 1) << 6); }
        
        virtual int sbit() const { return (byte0 >> 3) & 7; }
        virtual void set_sbit(int sbit) { byte0 = (byte0 & 0xc7) | ((sbit & 7) << 3); }
        
        virtual int ebit() const { return (byte0 & 7); }
        virtual void set_ebit(int ebit) { byte0 = (byte0 & 0xf8) | (ebit & 7); }
        
        virtual unsigned char src() const { return (byte1 >> 5) & 7; }
        virtual void set_src(int src) { byte1 = (byte1 & 0x1f) | ((src & 7) << 5); }
        
        virtual unsigned char quant() const { return (byte1 & 0x1f); }
        virtual void set_quant(int quant) { byte1 = (byte1 & 0xe0) | (quant & 0x1f); }
        
        virtual int i() const { return (byte2 >> 7) & 1; }
        virtual void set_i(int i) { byte2 = (byte2 & 0x7f) | ((i & 1) << 7); }
        
        virtual int a() const { return (byte2 >> 6) & 1; }
        virtual void set_a(int a) { byte2 = (byte2 & 0xbf) | ((a & 1) << 6); }
        
        virtual int s() const { return (byte2 >> 5) & 1; }
        virtual void set_s(int s) { byte2 = (byte2 & 0xdf) | ((s & 1) << 5); }
        
        virtual unsigned char gobn() const { return (byte2 & 0x1f); }
        virtual void set_gobn(int gobn) { byte2 = (byte2 & 0xe0) | (gobn & 0x1f); }
        
        virtual unsigned char mba() const { return byte3; }
        virtual void set_mba(int mba) { byte3 = (unsigned char)mba; }
                
        virtual char hmv1() const { return h1; }
        virtual void set_hmv1(int h) { h1 = (unsigned char)h; }
                
        virtual char vmv1() const { return v1; }
        virtual void set_vmv1(int v) { v1 = (unsigned char)v; }
                
        virtual char hmv2() const { return h2; }
        virtual void set_hmv2(int h) { h2 = (unsigned char)h; }
                
        virtual char vmv2() const { return v2; }
        virtual void set_vmv2(int v) { v2 = (unsigned char)v; }

        virtual int r() const { return 0; }
        virtual void set_r(int r) {}
        
        virtual unsigned char dbq() const { return 0; }
        virtual void set_dbq(int dbq) {}

        virtual unsigned char trb() const { return 0; }
        virtual void set_trb(int trb) {}

        virtual unsigned char tr() const { return 0; }
        virtual void set_tr(int tr) {}
                
};

class H263_HeaderC : public H263_Header {

public:

		H263_HeaderC () {}

		H263_HeaderC (char *pBuffer) { 
			byte0 = *((unsigned char *) pBuffer);
			byte1 = *((unsigned char *) pBuffer +1);
			byte2 = *((unsigned char *) pBuffer +2);
			byte3 = *((unsigned char *) pBuffer +3);
			h1 = *(((unsigned char*)pBuffer)+4); 
			v1 = *(((unsigned char*)pBuffer)+5); 
			h2 = *(((unsigned char*)pBuffer)+6); 
			v2 = *(((unsigned char*)pBuffer)+7);
			byte8 = *((unsigned char *) pBuffer +8);
			byte9 = *((unsigned char *) pBuffer +9);
		}

		virtual int header_size() const { return 12; }
		virtual void *header_data() const { return (void *) &byte0; }

        virtual int f() const { return (byte0 >> 7) & 1; }
        virtual void set_f(int f) { byte0 = (byte0 & 0x7f) | ((f & 1) << 7); }
        
        virtual int p() const { return (byte0 >> 6) & 1; }
        virtual void set_p(int p) { byte0 = (byte0 & 0xbf) | ((p & 1) << 6); }
        
        virtual int sbit() const { return (byte0 >> 3) & 7; }
        virtual void set_sbit(int sbit) { byte0 = (byte0 & 0xc7) | ((sbit & 7) << 3); }
        
        virtual int ebit() const { return (byte0 & 7); }
        virtual void set_ebit(int ebit) { byte0 = (byte0 & 0xf8) | (ebit & 7); }
        
        virtual unsigned char src() const { return (byte1 >> 5) & 7; }
        virtual void set_src(int src) { byte1 = (byte1 & 0x1f) | ((src & 7) << 5); }
        
        virtual unsigned char quant() const { return (byte1 & 0x1f); }
        virtual void set_quant(int quant) { byte1 = (byte1 & 0xe0) | (quant & 0x1f); }
        
        virtual int i() const { return (byte2 >> 7) & 1; }
        virtual void set_i(int i) { byte2 = (byte2 & 0x7f) | ((i & 1) << 7); }
        
        virtual int a() const { return (byte2 >> 6) & 1; }
        virtual void set_a(int a) { byte2 = (byte2 & 0xbf) | ((a & 1) << 6); }
        
        virtual int s() const { return (byte2 >> 5) & 1; }
        virtual void set_s(int s) { byte2 = (byte2 & 0xdf) | ((s & 1) << 5); }
        
        virtual unsigned char gobn() const { return (byte2 & 0x1f); }
        virtual void set_gobn(int gobn) { byte2 = (byte2 & 0xe0) | (gobn & 0x1f); }
        
        virtual unsigned char mba() const { return (byte3); }
        virtual void set_mba(int mba) { byte3 = (unsigned char ) mba; }
                
        virtual char hmv1() const { return h1; }
        virtual void set_hmv1(int h) { h1 = (unsigned char ) h; }
                
        virtual char vmv1() const { return v1; }
        virtual void set_vmv1(int v) { v1 = (unsigned char ) v; }
                
        virtual char hmv2() const { return h2; }
        virtual void set_hmv2(int h) { h2 = (unsigned char ) h; }
                
        virtual char vmv2() const { return v2; }
        virtual void set_vmv2(int v) { v2 = (unsigned char ) v; }
                               
        virtual unsigned char tr() const { return byte8; }
        virtual void set_tr(int tr) { byte8 = (unsigned char ) tr; }
        
        virtual unsigned char dbq() const { return (byte9 >> 6) & 3; }
        virtual void set_dbq(int dbq) { byte9 = (byte9 & 0x3f) | ((dbq & 3) << 6); }
        
        virtual unsigned char trb() const { return (byte9 >> 3) & 7; }
        virtual void set_trb(int trb) { byte9 = (byte9 & 0xc7) | ((trb & 7) << 3); }
        
        virtual int r() const { return (byte10 & 0x7); }
        virtual void set_r(int r) { byte10 = (byte10 & 0xf8) | (r & 0x7); }
                
};


// The extended H263 bitstream is composed of an array of structures
// of these
typedef struct _BITSTREAM_INFO_H263 {
	unsigned long	dwFlags;
	unsigned long	dwBitOffset;
	unsigned char	MBA;
	unsigned char	Quant;
	unsigned char	GOBN;
	char			HMV1;
	char			VMV1;
	char			HMV2;
	char			VMV2;
	char			padding;
} BITSTREAM_INFO_H263;

#ifndef _BSINFO_TRAILER_DEFINED
#define _BSINFO_TRAILER_DEFINED
// This is used to locate bitstream info before accessing the extended
// bitstream
typedef struct _T_BSINFO_TRAILER {
	unsigned long	dwVersion;
	unsigned long	dwFlags;
	unsigned long	dwUniqueCode;
	unsigned long	dwCompressedSize;
	unsigned long	dwNumberOfPackets;
	unsigned char	SourceFormat;
	unsigned char	TR;
	unsigned char	TRB;
	unsigned char	DBQ;
} BSINFO_TRAILER;

#endif /* _BSINFO_TRAILER_DEFINED */


#endif /* H263_H */

