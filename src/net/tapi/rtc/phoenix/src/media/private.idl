/*++

Copyright (C) Microsoft Corporation, 2000

Module Name:

    private.idl

Abstract:

    IDL source for private interfaces

Author:

    Qianbo Huai (qhuai) 28-Jul-2000

--*/

#ifndef _PRIVATE_IDL
#define _PRIVATE_IDL

import "oaidl.idl";
import "ocidl.idl";
import "strmif.idl";
import "rtcmedia.idl";
import "sdp.idl";
import "imsconf3.idl";

interface IRTCMediaManagePriv;
interface IRTCMedia;
interface IRTCStream;
interface IRTCTerminalPriv;

#if 0
interface IRTCQualityControl;
interface IRTCStreamQualityControl;
#endif

interface IRTCNmCallControl;
interface IRTCNmManagerControl;

/*//////////////////////////////////////////////////////////////////////////////
    Terminal Enumerations
////*/

typedef enum RTC_MULTICAST_LOOPBACK_MODE
{
    RTC_MM_NO_LOOPBACK      = 0,
    RTC_MM_FULL_LOOPBACK    = RTC_MM_NO_LOOPBACK + 1,
    RTC_MM_SELECTIVE_LOOPBACK   = RTC_MM_FULL_LOOPBACK + 1

} RTC_MULTICAST_LOOPBACK_MODE;

#if 0

typedef enum RTC_QUALITY_CONTROL_MODE
{
    RTC_QC_NONE_CONTROL,
    RTC_QC_AUTO_CONTROL,
    RTC_QC_MANUAL_CONTROL

} RTC_QUALITY_CONTROL_MODE;

typedef enum RTC_QUALITY_PROPERTY
{
    RTC_QP_MAX_CPULOAD,
    RTC_QP_CUR_CPULOAD,
    RTC_QP_MAX_OUT_BANDWIDTH,
    RTC_QP_CUR_OUT_BANDWIDTH,
    RTC_QP_MAX_IN_BANDWIDTH,
    RTC_QP_CUR_IN_BANDWIDTH,

} RTC_QUALITY_PROPERTY;

typedef enum RTC_STREAM_QUALITY_PROPERTY
{
    RTC_SQP_MAX_BANDWIDTH,
    RTC_SQP_CUR_BANDWIDTH,
    RTC_SQP_MAX_FRAMERATE,
    RTC_SQP_CUR_FRAMERATE

} RTC_STREAM_QUALITY_PROPERTY;
#endif

/*//////////////////////////////////////////////////////////////////////////////
    structures
////*/

#define RTC_MAX_DEVICE_DESP 260
cpp_quote("#define RTC_MAX_DEVICE_DESP 260")

typedef struct RTCDeviceInfo
{
    RTC_MEDIA_TYPE MediaType;
    RTC_MEDIA_DIRECTION Direction;
    UINT uiDeviceID;
    GUID Guid;
    WCHAR szDescription[RTC_MAX_DEVICE_DESP+1];
    UINT uiMark;

} RTCDeviceInfo;


/*//////////////////////////////////////////////////////////////////////////////
    Interfaces
////*/

[
    uuid(befb884c-bf62-4965-b2e0-79843d9613fc),
    helpstring("IRTCMediaManagePriv Interface"),
    pointer_default(unique)
]
// provides methods called by media and stream
interface IRTCMediaManagePriv : IUnknown
{
    HRESULT PostMediaEvent(
        [in] RTC_MEDIA_EVENT Event,
        [in] RTC_MEDIA_EVENT_CAUSE Cause,
        [in] RTC_MEDIA_TYPE MediaType,
        [in] RTC_MEDIA_DIRECTION Direction,
        [in] HRESULT hrError
        );

    HRESULT SendMediaEvent(
        [in] RTC_MEDIA_EVENT Event
        );

    HRESULT AllowStream(
        [in] RTC_MEDIA_TYPE MediaType,
        [in] RTC_MEDIA_DIRECTION Direction
        );

    HRESULT HookStream(
        [in] IRTCStream *pStream
        );

    HRESULT UnhookStream(
        [in] IRTCStream *pStream
        );

    HRESULT SelectLocalInterface(
        [in] DWORD dwRemoteIP,
        [out] DWORD *pdwLocalIP
        );
}

[
    uuid(b5c6848f-e85c-49e9-bee1-39f096fbfcc5),
    helpstring("IRTCMedia Interface"),
    pointer_default(unique)
]
interface IRTCMedia : IUnknown
{
    HRESULT Initialize(
        [in] ISDPMedia *pISDPMedia,
        [in] IRTCMediaManagePriv *pMediaManagePriv
        );

    HRESULT Reinitialize();

    // shutdown takes care of hook and unhook stream
    HRESULT Shutdown();

    // automatically add, remove or update streams
    // always return NOERROR
    // after sync, controller may check streams

    // sync takes care of hook and unhook stream
    HRESULT Synchronize(
        [in] BOOL fLocal,
        [in] DWORD dwDirection
        );

    HRESULT GetStream(
        [in] RTC_MEDIA_DIRECTION Direction,
        [out] IRTCStream **ppStream
        );

    HRESULT GetSDPMedia(
        [out] ISDPMedia **ppISDPMedia
        );
};

[
    uuid(33cef9e4-0792-49ea-b141-d0680cac9d67),
    helpstring("IRTCStream Interface"),
    pointer_default(unique)
]
interface IRTCStream : IUnknown
{
    HRESULT Initialize(
        [in] IRTCMedia *pMedia,
        [in] IRTCMediaManagePriv *pMediaManagePriv
        );

    HRESULT Shutdown();

    // when sync is called, assumption: we have terminal

    // sync may fail because:
    // - build up filter graph
    // - configure rtp formats

    // sync does not fail if remote addr not set
    // that is the case when we init INVITE
    // we need to wait for replied SDP to configure

    // if fail, media may shutdown/remove stream and
    // update sdpmedia
    HRESULT Synchronize();

    HRESULT ChangeTerminal(
        [in] IRTCTerminal *pTerminal
        );

    HRESULT StartStream();

    HRESULT StopStream();

    HRESULT GetMediaType(
        [out] RTC_MEDIA_TYPE *pMediaType
        );

    HRESULT GetDirection(
        [out] RTC_MEDIA_DIRECTION *pDirection
        );

    HRESULT GetState(
        [out] RTC_STREAM_STATE *pState
        );

    // used by media to register wait
    HRESULT GetIMediaEvent(
        [out] LONG_PTR **ppIMediaEvent
        );

    HRESULT GetMedia(
        [out] IRTCMedia **ppMedia
        );

    HRESULT ProcessGraphEvent();

    HRESULT SendDTMFEvent(
        [in] BOOL fOutOfBand,
        [in] DWORD dwCode,
        [in] DWORD dwId,
        [in] DWORD dwEvent,
        [in] DWORD dwVolume,
        [in] DWORD dwDuration,
        [in] BOOL fEnd
        );

    HRESULT GetCurrentBitrate(
        [out] DWORD *pdwBitrate,
        [in] BOOL fHeader
        );

    HRESULT SetEncryptionKey(
        [in] BSTR Key
        );

    // network quality: [0, 100].
    // higher value better quality
    HRESULT GetNetworkQuality(
        [out] DWORD *pdwValue,
        [out] DWORD *pdwAge
        );
};

[
    uuid(5cd50568-42ae-4486-b84e-f5e48d860920),
    helpstring("IRTCTerminalPriv Interface"),
    pointer_default(unique)
]
interface IRTCTerminalPriv : IUnknown
{
    HRESULT Initialize(
        [in] RTCDeviceInfo *pDeviceInfo,
        [in] IRTCTerminalManage *pTerminalManage
        );

    HRESULT Reinitialize();

    HRESULT Shutdown();

    // this is a hack method for tuning purpose
    // the only way to cleanup a previous AEC setting
    // is really re-cocreate the filter.

    HRESULT ReinitializeEx();

    HRESULT GetFilter(
        [out] IBaseFilter **ppIBaseFilter
        );
                
    HRESULT GetPins(
        [in, out] DWORD *pdwCount,
        [out] IPin **ppPin
        );

    HRESULT ConnectTerminal(
        [in] IRTCMedia *pMedia,
        [in] IGraphBuilder *pGraph
        );

    HRESULT CompleteConnectTerminal();

    HRESULT DisconnectTerminal();

    HRESULT GetMedia(
        [out] IRTCMedia **ppMedia
        );

    // if terminal has the same device
    HRESULT HasDevice(
        [in] RTCDeviceInfo *pDeviceInfo
        );

    // after pnp, video capture device may have different ID
    // we need to update the terminal
    HRESULT UpdateDeviceInfo(
        [in] RTCDeviceInfo *pDeviceInfo
        );

    HRESULT GetDeviceInfo(
        [out] RTCDeviceInfo **ppDeviceInfo
        );
};

#if 0
[
    uuid(3fd4ab8a-1359-425d-873a-4b6ab8d55496),
    helpstring("IRTCQualityControl Interface"),
    pointer_default(unique)
]
interface IRTCQualityControl : IUnknown
{
    HRESULT GetRange(
        [in] RTC_QUALITY_PROPERTY Property,
        [out] LONG *plMin,
        [out] LONG *plMax,
        [out] RTC_QUALITY_CONTROL_MODE *pMode
        );

    HRESULT Get(
        [in] RTC_QUALITY_PROPERTY Property,
        [out] LONG *plValue,
        [out] RTC_QUALITY_CONTROL_MODE *pMode
        );

    HRESULT Set(
        [in] RTC_QUALITY_PROPERTY Property,
        [in] LONG lValue,
        [in] RTC_QUALITY_CONTROL_MODE Mode
        );
};

[
    uuid(c59d9f38-3055-4cf9-9fb4-d01cca2341b3),
    helpstring("IRTCStrmQualityControl Interface"),
    pointer_default(unique)
]
interface IRTCStreamQualityControl : IUnknown
{
    HRESULT GetRange(
        [in] RTC_STREAM_QUALITY_PROPERTY Property,
        [out] LONG *plMin,
        [out] LONG *plMax,
        [out] RTC_QUALITY_CONTROL_MODE *pMode
        );

    HRESULT Get(
        [in] RTC_STREAM_QUALITY_PROPERTY Property,
        [out] LONG *plValue,
        [out] RTC_QUALITY_CONTROL_MODE *pMode
        );

    HRESULT Set(
        [in] RTC_STREAM_QUALITY_PROPERTY Property,
        [in] LONG lValue,
        [in] RTC_QUALITY_CONTROL_MODE Mode
        );
};
#endif

[
    uuid(4996deff-fec4-4e68-b793-790e8cf53dbc),
    helpstring("IRTCNmCallControl"),
    pointer_default(unique)
]
interface IRTCNmCallControl : IUnknown
{
    HRESULT Initialize (
        [in] INmCall * pNmCall
        );

    HRESULT Shutdown (
        );

    HRESULT AcceptCall (
        );

    HRESULT LaunchRemoteApplet (
        NM_APPID uApplet
        );
};

[
    uuid(bab76c36-5293-4324-8eb2-7d0ee9f4d947),
    helpstring("IRTCNmManagerControl"),
    pointer_default(unique)
]
interface IRTCNmManagerControl : IUnknown
{
    HRESULT Initialize (
        [in] BOOL fNoMsgPump,
        [in] IRTCMediaManagePriv *pIRTCMediaManagePriv
        );

    HRESULT Shutdown (
        );

    HRESULT CreateT120OutgoingCall (
        [in] NM_ADDR_TYPE    addrType,
        [in] BSTR bstrAddr
        );

    HRESULT AllowIncomingCall (
        );

    HRESULT StartApplet (
        NM_APPID uApplet
        );

    HRESULT StopApplet (
        NM_APPID uApplet
        );    
};

#endif // _PRIVATE_IDL