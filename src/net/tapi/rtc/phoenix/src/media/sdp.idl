/*++

Copyright (C) Microsoft Corporation, 2000

Module Name:

    sdp.idl

Abstract:

    IDL source for sdp interfaces.
    The SDP parser that implements these interfaces only accept charset

Author:

    Qianbo Huai (qhuai) 3-Sep-2000

--*/

#ifndef _SDP_IDL
#define _SDP_IDL

import "oaidl.idl";
import "ocidl.idl";

// only to use RTC_MEDIA_TYPE, RTC_MEDIA_DIRECTION
import "rtcmedia.idl";

// sdp related interface
interface ISDPParser;
interface ISDPSession;
interface ISDPMedia;
interface IRTPFormat;

/*//////////////////////////////////////////////////////////////////////////////
    Enumerations
////*/

// where the SDP is built
typedef enum SDP_SOURCE
{
    SDP_SOURCE_LOCAL    = 0x000000001,
    SDP_SOURCE_REMOTE   = 0x000000002,
    SDP_SOURCE_MERGED   = 0x000000004

} SDP_SOURCE;

/*
// TODO, use RTC_MEDIA_TYPE and RTC_MEDIA_DIRECTION?
// media type
typedef enum RTC_MEDIA_TYPE
{
    SDP_MT_AUDIO        = 0x000000001,
    SDP_MT_VIDEO        = 0x000000002

} RTC_MEDIA_TYPE;

// media direction
typedef enum SDP_MEDIA_DIRECTION
{
    SDP_MD_SEND         = 0x00000001,
    SDP_MD_RESV         = 0x00000002

} SDP_MEDIA_DIRECTION;
*/

// flags used to loose some strict rules in parsing an incoming SDP
// however SDP generated by us should always follow RFC 2543 and RFC 2327

// note: rule can be set in registry setting. it may help us in interops.
typedef enum SDP_LOOSE_FLAG
{
    SDP_LOOSE_LINEORDER     = 0x00000001,       // lines can be out of order
    SDP_LOOSE_ENDCRLF       = 0x00000002,       // CRLF not reqired at the end of SDP
    SDP_LOOSE_CRLF          = 0x00000004,       // CRLF can be replaced by LF only
    SDP_LOOSE_KEEPINGM0     = 0x00000008,       // allow media with port 0 to being removed
    SDP_LOOSE_RTPMAP        = 0x00000010,       // accept media type without rtpmap
    SDP_LOOSE_SPACE         = 0x00000020

} SDP_LOOSE_FLAG;


/*//////////////////////////////////////////////////////////////////////////////
    Structures
////*/

typedef struct RTP_FORMAT_PARAM
{
    // value based on standard SDP
    DWORD           dwCode;
    RTC_MEDIA_TYPE  MediaType;
    CHAR            pszName[32+1];
    DWORD           dwSampleRate;
    DWORD           dwChannelNum;

    // value based on our implementation
    DWORD           dwExternalID;

    // no need to use union based on audio or video
    // avoid extra structure
    DWORD           dwVidWidth;
    DWORD           dwVidHeight;
    DWORD           dwAudPktSize;

} RTP_FORMAT_PARAM;

// defines
cpp_quote("#define SDP_MAX_RTP_FORMAT_NAME_LEN      32")
cpp_quote("#define SDP_MAX_RTP_FORMAT_NUM           16")

cpp_quote("#define SDP_MIN_AUDIO_PACKET_SIZE        20      // ms")
cpp_quote("#define SDP_MAX_AUDIO_PACKET_SIZE        40      // ms")
cpp_quote("#define SDP_DEFAULT_AUDIO_PACKET_SIZE    20      // ms")

cpp_quote("#define SDP_DEFAULT_VIDEO_WIDTH          176    // QCIF")
cpp_quote("#define SDP_DEFAULT_VIDEO_HEIGHT         144    // QCIF")
cpp_quote("#define SDP_SMALL_VIDEO_WIDTH            128    // QCIF")
cpp_quote("#define SDP_SMALL_VIDEO_HEIGHT           96     // QCIF")

cpp_quote("#define SDP_DEFAULT_CONNECTION_TTL       127")
cpp_quote("#define SDP_INVALID_USHORT_PORT          ((USHORT)-1)")

/*//////////////////////////////////////////////////////////////////////////////
    Interfaces
////*/

[
    uuid(d94587a2-e0bf-41ba-a8b3-5b2e5af7fa5e),
    helpstring("ISDPParser interface"),
    pointer_default(unique)
]
interface ISDPParser: IUnknown
{
    HRESULT CreateSDP(
        [in] SDP_SOURCE Source,
        [out] ISDPSession **ppSession
        );

    HRESULT ParseSDPBlob(
        [in] CHAR *pszText,
        [in] SDP_SOURCE Source,
//        [in] DWORD dwLooseMask,
        [in] DWORD_PTR *pDTMF,
        [out] ISDPSession **ppSession
        );

    HRESULT BuildSDPBlob(
        [in] ISDPSession *pSession,
        [in] SDP_SOURCE Source,
        [in] DWORD_PTR *pNetwork,
        [in] DWORD_PTR *pPortCache,
        [in] DWORD_PTR *pDTMF,
        [out] CHAR **ppszText
        );

    HRESULT BuildSDPOption(
        [in] ISDPSession *pSession,
        [in] DWORD dwLocalIP,
        [in] DWORD dwBandwidth,
        [in] DWORD dwAudioDir,
        [in] DWORD dwVideoDir,
        [out] CHAR **ppszText
        );

    HRESULT FreeSDPBlob(
        [in] CHAR *pszText
        );

    HRESULT GetParsingError(
        [out] CHAR **ppszError
        );

    HRESULT FreeParsingError(
        [in] CHAR *pszError
        );
};


[
    uuid(7ec4ad19-a9d5-421a-90e0-a6a1ae2228e0),
    helpstring("ISDPSession interface"),
    pointer_default(unique)
]
interface ISDPSession: IUnknown
{
    HRESULT Update(
        [in] ISDPSession *pSession
        );

    HRESULT TryUpdate(
        [in] ISDPSession *pSession,
        [out] DWORD *pdwHasMedia
        );

    HRESULT TryCopy(
        [out] DWORD *pdwHasMedia
        );

    HRESULT GetSDPSource(
        [out] SDP_SOURCE *pSource
        );

    HRESULT SetSessName(
        [in] CHAR *pszName
        );

    HRESULT SetUserName(
        [in] CHAR *pszName
        );

    HRESULT GetMedias(
        [in, out] DWORD *pdwCount,
        [out] ISDPMedia **ppMedia
        );

    HRESULT AddMedia(
        [in] SDP_SOURCE Source,
        [in] RTC_MEDIA_TYPE MediaType,
        [in] DWORD dwDirections,
        [out] ISDPMedia **ppMedia
        );

    HRESULT RemoveMedia(
        [in] ISDPMedia *pMedia
        );

    HRESULT SetLocalBitrate(
        [in] DWORD dwBitrate
        );

    HRESULT GetRemoteBitrate(
        [out] DWORD *pdwBitrate
        );

    HRESULT GetMediaType(
        [in] DWORD dwIndex,
        [out] RTC_MEDIA_TYPE *pMediaType
        );
};


[
    uuid(e77e1734-befe-42fc-8fd2-2b8f00e72981),
    helpstring("ISDPMedia interface"),
    pointer_default(unique)
]
interface ISDPMedia: IUnknown
{
    HRESULT GetSDPSource(
        [out] SDP_SOURCE *pSource
        );

    HRESULT GetSession(
        [out] ISDPSession **ppSession
        );

    HRESULT GetMediaType(
        [out] RTC_MEDIA_TYPE *pMediaType
        );

    HRESULT GetDirections(
        [in] SDP_SOURCE Source,
        [out] DWORD *pdwDirections
        );

    HRESULT AddDirections(
        [in] SDP_SOURCE Source,
        [in] DWORD dwDirections
        );

    HRESULT RemoveDirections(
        [in] SDP_SOURCE Source,
        [in] DWORD dwDirections
        );

    HRESULT GetConnAddr(
        [in] SDP_SOURCE Source,
        [out] DWORD *pdwAddr
        );

    HRESULT SetConnAddr(
        [in] SDP_SOURCE Source,
        [in] DWORD dwAddr
        );

    HRESULT GetConnPort(
        [in] SDP_SOURCE Source,
        [out] USHORT *pusPort
        );

    HRESULT SetConnPort(
        [in] SDP_SOURCE Source,
        [in] USHORT usPort
        );

    HRESULT GetConnRTCP(
        [in] SDP_SOURCE Source,
        [out] USHORT *pusPort
        );

    HRESULT SetConnRTCP(
        [in] SDP_SOURCE Source,
        [in] USHORT usPort
        );

    HRESULT GetFormats(
        [in, out] DWORD *pdwCount,
        [out] IRTPFormat **ppFormat
        );

    HRESULT AddFormat(
        [in] RTP_FORMAT_PARAM *pParam,
        [out] IRTPFormat **ppFormat
        );

    HRESULT RemoveFormat(
        [in] IRTPFormat *pFormat
        );

    HRESULT IsConnChanged();
    HRESULT ResetConnChanged();

    HRESULT IsFmtChanged(
        [in] RTC_MEDIA_DIRECTION Direction
        );
    HRESULT ResetFmtChanged(
        [in] RTC_MEDIA_DIRECTION Direction
        );

    HRESULT Reinitialize();

    HRESULT CompleteParse(
        [in] DWORD_PTR *pDTMF
        );
};


[
    uuid(ed809094-2320-4833-aeae-08d1474f1980),
    helpstring("IRTPFormat interface"),
    pointer_default(unique)
]
interface IRTPFormat: IUnknown
{
    HRESULT GetMedia(
        [out] ISDPMedia **ppMedia
        );

    HRESULT GetParam(
        [out] RTP_FORMAT_PARAM *pParam
        );

    HRESULT IsParamMatch(
        [in] RTP_FORMAT_PARAM *pParam
        );

    HRESULT Update(
        [in] RTP_FORMAT_PARAM *pParam
        );

    HRESULT HasRtpmap();

    HRESULT CompleteParse(
        [in] DWORD_PTR *pDTMF,
        [out] BOOL *fDTMF
        );

};

#endif // _SDP_IDL;
