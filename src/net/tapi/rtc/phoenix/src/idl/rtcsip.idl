//
// SIP.IDL
//
// Interface definition for Phoenix SIP stack.
//
// Revision History
//
//      7/4/2000 - ArlieD - created
//      7/26/2000 - ArlieD - numerous updates
//



import  "wtypes.idl";
import  "unknwn.idl";

//
// Necessary for media type and direction enumerations,
// and media control interfaces.
//

import  "rtcmedia.idl";


/*

GUID Table
--------------------------------------------------------------------------------------------

67cda531-45ae-42af-a0b3-8a53dc4d45fe    ISipStack
3bb514ed-6021-4545-8ca1-ae5cb3703deb    ISipStackNotify
435176dd-1f8c-4866-819f-1cf7352e99d6    ISipCall
c4fa39e8-40dd-4c48-8870-28ee82beb8fb    ISipEnumParties
09555486-c969-41b1-b007-8be299e23f93    ISipCallNotify
236662be-5347-47a2-8960-8e662ca545cc    ISipRedirectContext
e9360bea-5268-4cb9-b28e-3736a520faf5    ISIPWatcher
6da7e176-b1e7-4e7b-a6d9-e885dcf3deab    ISIPBuddy
7f8cfc57-a92d-4bcf-be02-83ea11dba34f    ISIPWatcherManager
ccafd7c7-f7af-40cb-b981-d9a9e164843c    ISIPBuddyManager
d543b8e9-f704-4031-a518-5d392dc517b6    ISIPBuddyNotify
2e22721e-dde7-4d5c-a9cf-9b8bae714432
6bc80693-c186-4580-8809-17c9b684216e
eb03c8d8-fdca-4a2f-a726-719abadc1d3d
6cee894d-24fe-44ea-9d51-59436d29f803
7da5ce46-f718-40b5-a343-3eb68f95d864
4f2b0abd-34fb-4875-9b96-e64d751bce91
f1de331a-8bc7-4f3a-9625-c28238d08f18
5a8db4d2-608f-4669-8320-ff1ede30993b
0e474614-9658-4193-aa45-27fdc93d8106
fd44d412-6c5d-4c00-b768-b58d8af6c46f
75a5f436-c53a-41b4-b47f-6f870b56487f
ddd80c48-ced8-4f41-9ff4-2357a2bc06a9
1595a5a2-50b5-4dc8-86dd-e383caf7758a
f2b977c5-d6cd-43ce-b9e3-98367196a6b1
3974d418-c277-47ff-a6f4-e6753d99c91b
05c9ad01-1743-4534-a3cc-441152c7389c
e91b7fc1-cbfd-4ebb-93e8-782dcb41813c
a6c98341-c47d-4495-9f9c-b2f227560140
05853263-0e73-4535-a0a7-20f6b91f2e57
8e1e6554-53d1-4f5a-acf8-a4e57a5ebe24
81fa0468-0170-4a75-86a8-a7ad5f6b31d4
e3e190b3-664e-4c31-9b49-06558fdc3700
2f494b31-e5ce-48a3-9a2b-985fc1d08aa3
d3247af5-e7cf-4a00-83cc-3721dbce148a
abc9fc38-922c-4e50-b3a2-da3bd5a19c58
e48e37ef-0c6d-45d9-aeab-59179146dd37

*/

interface   ISipStack;
interface   ISipStackNotify;
interface   ISipCall;
interface   ISipCallNotify;
interface   ISipEnumParties;
interface   ISipRedirectContext;
interface   ISIPBuddy;
interface   ISIPWatcher;
interface   ISIPBuddyManager;
interface   ISIPWatcherManager;
interface   ISIPBuddyNotify;


typedef GUID SIP_PROVIDER_ID;


//
// SIP_STATUS_CODE is used for SIP result codes,
// such as 404, 100, 200, etc.
//
typedef ULONG SIP_STATUS_CODE;

//
// SIP_TRANSPORT specifies the transport protocol that the SIP stack should use.
//

typedef
enum    SIP_TRANSPORT
{
    SIP_TRANSPORT_UDP,
    SIP_TRANSPORT_TCP,
    SIP_TRANSPORT_SSL,
    SIP_TRANSPORT_UNKNOWN

}   SIP_TRANSPORT;

//
// SIP_AUTH_PROTOCOL specifies all of the
// authentication protocols that are supported.
//

typedef
enum    SIP_AUTH_PROTOCOL
{
    SIP_AUTH_PROTOCOL_NONE,
    SIP_AUTH_PROTOCOL_BASIC,
    SIP_AUTH_PROTOCOL_MD5DIGEST,

}   SIP_AUTH_PROTOCOL;


typedef
enum REGISTER_STATE
{
    REGISTER_STATE_NONE,
    REGISTER_STATE_REGISTERED,
    REGISTER_STATE_UNREGISTERING,
    REGISTER_STATE_UNREGISTERED,
    REGISTER_STATE_REGISTERING,
    REGISTER_STATE_REJECTED,
    REGISTER_STATE_ERROR,
    REGISTER_STATE_DEREGISTERED,
    REGISTER_STATE_DROPSUB,
    REGISTER_STATE_PALOGGEDOFF,

} REGISTER_STATE;

//
// SIP_ADDRESS_INFO specifies information about a SIP
//

typedef
struct  SIP_SERVER_INFO
{
    LPOLESTR            ServerAddress;
    BOOL                IsServerAddressSIPURI;
    SIP_TRANSPORT       TransportProtocol;
    SIP_AUTH_PROTOCOL   AuthProtocol;
}   SIP_SERVER_INFO;

//
// SIP_USER_CREDENTIALS specifies the credentials 
// that a user uses to prove its identity.
//

typedef
struct  SIP_USER_CREDENTIALS
{
    LPOLESTR    Username;
    LPOLESTR    Password;
}   SIP_USER_CREDENTIALS;

//All entries in here should have corresponding string in g_SipRegisterMethodsArray
cpp_quote("#define SIP_REGISTER_ACCEPT_INVITE    0x00000001")
cpp_quote("#define SIP_REGISTER_ACCEPT_MESSAGE   0x00000002")
cpp_quote("#define SIP_REGISTER_ACCEPT_INFO      0x00000004")
cpp_quote("#define SIP_REGISTER_ACCEPT_SUBSCRIBE 0x00000008")
cpp_quote("#define SIP_REGISTER_ACCEPT_OPTIONS   0x00000010")
cpp_quote("#define SIP_REGISTER_ACCEPT_BYE       0x00000020")
cpp_quote("#define SIP_REGISTER_ACCEPT_CANCEL    0x00000040")
cpp_quote("#define SIP_REGISTER_ACCEPT_NOTIFY    0x00000080")
cpp_quote("#define SIP_REGISTER_ACCEPT_ACK       0x00000100")

typedef
struct  SIP_PROVIDER_PROFILE
{
    SIP_PROVIDER_ID ProviderID;
    SIP_SERVER_INFO         Registrar;
    long                    lRegisterAccept;

    SIP_USER_CREDENTIALS    UserCredentials;
    LPOLESTR                Realm;

    //
    // UserURI may be a SIP URI, or a TEL URI.
    //

    LPOLESTR    UserURI;

    PVOID                   pRegisterContext;
    ISipRedirectContext    *pRedirectContext;

}   SIP_PROVIDER_PROFILE;


typedef struct
{
    HRESULT     StatusCode;
    LPOLESTR    StatusText;
}   SIP_STATUS_BLOB;


typedef
struct  SIP_PROVIDER_STATUS
{
    SIP_PROVIDER_ID     ProviderID;
    REGISTER_STATE      RegisterState;
        
    SIP_STATUS_BLOB     Status;

}   SIP_PROVIDER_STATUS;



typedef
enum    SIP_CALL_TYPE
{
    SIP_CALL_TYPE_RTP,      // client participates directly in call, using RTP
    SIP_CALL_TYPE_PINT,     // client participates indirectly in call, using PINT
    SIP_CALL_TYPE_MESSAGE,
}   SIP_CALL_TYPE;


typedef
enum    SIP_CALL_STATE
{
    SIP_CALL_STATE_IDLE,                    // newly-created call, not yet connected
    SIP_CALL_STATE_OFFERING,                // user is offering to join the call
    
    // user has rejected your attempt to add to call
    // in this state, the Reject field is valid (StatusCode and StatusText)
    SIP_CALL_STATE_REJECTED,

    // an internal or network error has occurred
    // in this state, the ErrorCode field is valid
    SIP_CALL_STATE_ERROR,

    // user has disconnected
    SIP_CALL_STATE_DISCONNECTED,
    SIP_CALL_STATE_CONNECTING,              // attempting to connect / accept the user
    SIP_CALL_STATE_CONNECTED,               // user is connected
    SIP_CALL_STATE_ALERTING,                // request has reached user, user's phone is "ringing"
}   SIP_CALL_STATE;


typedef
struct  SIP_CALL_STATUS
{
    SIP_CALL_STATE      State;              // current state of the call

    //
    // Status is valid only if RequestState = REJECTED, ERROR, or DISCONNECTED.
    //

    SIP_STATUS_BLOB     Status;

}   SIP_CALL_STATUS;


//
// SIP_PARTY_STATE describes the state of a single participant in a call.
//

typedef
enum    SIP_PARTY_STATE
{
    SIP_PARTY_STATE_IDLE = 0,               //call party added by the RTC client
    SIP_PARTY_STATE_CONNECT_INITIATED,      //connect request sent to the server
    
    SIP_PARTY_STATE_PENDING,             //call leg connction request received by the server
    SIP_PARTY_STATE_CONNECTING,               //call leg alerting at the PSTN handset
    SIP_PARTY_STATE_CONNECTED,              //call leg connected

    SIP_PARTY_STATE_REJECTED,               //call leg initiation rejected by the server
    
    SIP_PARTY_STATE_DISCONNECT_INITIATED,   //disconnect request sent to the server
    SIP_PARTY_STATE_DISCONNECTING,          //disconnect request received by the server
    SIP_PARTY_STATE_DISCONNECTED,           //call leg disconnected

    SIP_PARTY_STATE_ERROR,

}   SIP_PARTY_STATE;



typedef
struct  SIP_PARTY_INFO
{
    LPOLESTR            DisplayName;
    LPOLESTR            URI;
    SIP_PARTY_STATE     State;

    HRESULT             StatusCode;

    LPOLESTR            PartyContactInfo;
	
}   SIP_PARTY_INFO;

//All interface functions defined in the sip (stack,call, etc) must check for sipstack shutdown before processing

//
// Outbound interfaces:
//      ISipStackNotify (set via SetNotifyInterface)
//

[local, uuid(67cda531-45ae-42af-a0b3-8a53dc4d45fe)]
interface   ISipStack : IUnknown
{

    //
    // Sets the interface which receives notifications from the SIP stack.
    // If any previous interface had been set, then this method releases that interface.
    // If NotifyInterface is not NULL, then this method retains a reference
    // to the interface.
    //

    HRESULT SetNotifyInterface (
        [in]    ISipStackNotify *   NotifyInterface);


    HRESULT EnableIncomingCalls();

    HRESULT DisableIncomingCalls();

    HRESULT EnableStaticPort();
    
    HRESULT DisableStaticPort();

    HRESULT GetNetworkAddresses(
        [in]    BOOL        fTcp,
        [in]    BOOL        fExternal,
        [out]   LPOLESTR  **pNetworkAddressArray,
        [out]   ULONG      *pNetworkAddressCount
        );

    HRESULT FreeNetworkAddresses(
        [in]    LPOLESTR   *NetworkAddressArray,
        [in]    ULONG       NetworkAddressCount
        );      

    //
    // SetProviderProfile - Gives information about a specific provider to the SIP stack.
    // If the SIP stack already had information matching this provider ID (a GUID),
    // then the information is updated.  Else, it is created.
    //

    HRESULT SetProviderProfile (
        [in]    SIP_PROVIDER_PROFILE *      ProviderInfo);

    //
    // DeleteProviderProfile - Requests that the SIP stack forget about a specific provider.
    // If the SIP stack was registered with a registrar, it will now unregister.
    //

    HRESULT DeleteProviderProfile (
        [in]    SIP_PROVIDER_ID *           ProviderID);

    //
    // DeleteAllProviderProfiles - Requests that the SIP stack forget all provider profiles.
    // If any profiles were registered with a registrar, they will now unregister.
    //

    HRESULT DeleteAllProviderProfiles (void);
    
    //
    // CreateCall - Start a new SIP call / session.
    // The call is created against a specific provider ID.
    //

    HRESULT CreateCall (
        [in]    SIP_PROVIDER_ID        *pProviderID,
        [in]    SIP_SERVER_INFO        *pProxyInfo,
        [in]    SIP_CALL_TYPE           CallType,
        [in]    ISipRedirectContext    *pRedirectContext,
        [out]   ISipCall              **ppReturnCall
        );


    // Returns S_OK if Shutdown() can be called immediately.
    // Otherwise it returns S_FALSE. In this case the SIP stack
    // will notify Core when Shutdown() can be called using
    // NotifyShutdownReady()
    
    HRESULT PrepareForShutdown();
    
    HRESULT Shutdown();

    // Media calls this interface to check if Internet Connection Firewall
    // is enabled for the Local interface.
    // LocalIp is in network order.
    HRESULT IsFirewallEnabled(
        [in]    DWORD       LocalIp,
        [out]   BOOL       *pfIsFirewallEnabled 
        );
    
};

interface IIMSession;

[local, uuid(3bb514ed-6021-4545-8ca1-ae5cb3703deb)]
interface   ISipStackNotify : IUnknown
{
    //
    // NotifyProviderStatusChange - Updates the user application about changes
    // in the status of a service provider.
    //

    HRESULT NotifyProviderStatusChange (
        [in]    SIP_PROVIDER_STATUS *   ProviderStatus);


    HRESULT NotifyIPAddrChange();

    HRESULT NotifyRegisterRedirect(
        [in]  SIP_PROVIDER_ID        *pSipProviderID,
        [in]  ISipRedirectContext    *pRegisterContext,
        [in]  SIP_CALL_STATUS        *pRegisterStatus
        );

    //
    // Offer a call to the user application.
    //

    HRESULT OfferCall (
        [in]    ISipCall *          Call,
        [in]    SIP_PARTY_INFO *    CallerInfo
        );

    HRESULT NotifyIncomingSession(
        [in] IIMSession *pSession,// - The new session.
        [in] BSTR msg, //         - The text message 
        [in] BSTR ContentType,
        [in] SIP_PARTY_INFO* CallerInfo // - Information about the sender of the message.
        );

    HRESULT IsIMSessionAuthorized(
        [in] BSTR pszCallerURI,
        [out] BOOL  * bAuthorized);


    // *pProviderID will be GUID_NULL if there is no provider.
    // Returns S_OK if user presses OK or E_ABORT if user presses Cancel.
    // The username and password are freed using SysFreeString().
    
    HRESULT GetCredentialsFromUI(
        [in]        SIP_PROVIDER_ID     *pProviderID,
        [in]        BSTR                 Realm,
        [in, out]   BSTR                *Username,
        [out]       BSTR                *Password        
        );
            
    // Core looks up the credentials based on the Realm.
    // AuthProtocol is the AuthProtocol of
    // PC->PC proxy / PC -> Phone Proxy / Registrar in that order.
    // We just use it to verify that basic auth is allowed.
    // Returns S_OK if user presses OK or E_ABORT if user presses Cancel.
    // The username and password are freed using SysFreeString().
    
    HRESULT GetCredentialsForRealm(
        [in]    BSTR                 Realm,
        [out]   BSTR                *Username,
        [out]   BSTR                *Password,
        [out]   SIP_AUTH_PROTOCOL   *pAuthProtocol
        );
            
    //
    // Sip Watcher related events
    //
    HRESULT OfferWatcher( 
        [in]    ISIPWatcher    *pSipWatcher,
        [in]    SIP_PARTY_INFO *pWatcherInfo
        );

        
    HRESULT WatcherOffline(
        [in]    ISIPWatcher    *pSipWatcher,
        [in]    WCHAR* pwstrPresentityURI
        );

    // When Core is notified using this function, it will
    // call Shutdown()
    HRESULT NotifyShutdownReady();
};


//
// ISipCall
//
// This is the primary interface on the SIP Call object.
// This interface (and the SIP Call object) are analogous to the API Call Hub object.
//

[local, uuid(435176dd-1f8c-4866-819f-1cf7352e99d6)]
interface   ISipCall : IUnknown
{

    //
    // Sets the notification interface.
    //

    HRESULT SetNotifyInterface (
        [in]    ISipCallNotify *    NotifyInterface
        );


    //
    // Accept accepts a call that has been offered from the network.
    // The call must be in the OFFERING state.
    // This method applies only to inbound calls.
    // The SIP call sends a 200 OK status code to the peer.
    // The call is then in the CONNECTED state.
    //

    HRESULT Accept (void);

    //
    // Reject allows the applicaton to reject the call.
    // The call must be in the OFFERING state.
    // The call will transition immediately to the DISCONNECTED state.
    //

    HRESULT Reject (
        [in] SIP_STATUS_CODE StatusCode
        );

    //
    // Connect places a call to a remote SIP endpoint.
    // The call must be in the IDLE state.
    //
    // LocalUserURI should be a SIP URI, in the form "sip:user@domain".
    // (However, the stack does not act on the contents of the From field, and therefore
    // does not validate their contents.)
    //
    // LocalDisplayName should be set to a short, textual name of the user initiating the call.
    // This field is optional, and may be NULL.
    //
    // RTP Calls
    // ---------
    // RemoteUserURI should indicate the destination to call.
    // RemoteUserURI can take these legal forms:
    //
    //      sip:aaa.bbb.ccc.ddd[:ppp]       IP address and port
    //      sip:domain.name                 fully-qualified domain name
    //      sip:user@domain.name            user at a fully-qualified domain name
    //
    // In the first case, the SIP stack will use the IP address (and optional port) specified.
    // In the second and third cases, the SIP stack will perform a DNS query.
    //
    // LocalPhoneURI is not used, and may be NULL.
    //
    //
    // PSTN Calls
    // ----------
    // RemoteUserURI should be set to the same value as the LocalUserURI.
    // LocalPhoneURI should contain the phone number of this user.
    // LocalPhoneURI MUST be in the form "tel:<phone number>".
    //

    HRESULT Connect (
        [in]    LPCOLESTR       LocalDisplayName,   // display name for "From" field.
        [in]    LPCOLESTR       LocalUserURI,       // the "From" field
        [in]    LPCOLESTR       RemoteUserURI,      // the "To" field
        [in]    LPCOLESTR       LocalPhoneURI       // only used for PSTN calls
        );


    //
    // Disconnects a call in progress.
    //

    HRESULT Disconnect (void);

    // All Party methods are specific to PINT calls and are never called
    // for RTP calls.
    //
    // AddParty adds a new participant to the call.
    // If the call is not connected, then the party information is stored,
    // but nothing else occurs.
    // If the call is connected, then a new INVITE is sent to the service provider.
    //

    HRESULT AddParty (
        [in]    SIP_PARTY_INFO *    PartyInfo
        );

    //
    // RemoveParty removes an existing participant from the call.
    // If the call is not connected, then the party information is removed,
    // but nothing else occurs.
    // If the party is connected, then a new INVITE is sent to the service provider.
    //

    HRESULT RemoveParty (
        [in]    LPOLESTR            PartyURI
        );


    //
    // Enumerate the list of parties in the call.
    // Probably not needed.

    // HRESULT  EnumParties (
    // [out]    ISipEnumParties **      ReturnEnum);

    // The following methods are never called for PINT calls.

    HRESULT StartStream(
        [in] RTC_MEDIA_TYPE         MediaType,
        [in] RTC_MEDIA_DIRECTION    Direction,
        [in] long                   lCookie
        );

    HRESULT StopStream(
        [in] RTC_MEDIA_TYPE         MediaType,
        [in] RTC_MEDIA_DIRECTION    Direction,
        [in] long                   lCookie
        );
    
    HRESULT SetNeedToReinitializeMediaManager(
        [in] BOOL BoolValue
        );

};

//IM User Status
typedef
enum USR_STATUS{
    USR_STATUS_IDLE = 0,
    USR_STATUS_TYPING,
}USR_STATUS;

//
// ISipCallNotify is a connection point of the Call object.
//

[local, uuid(09555486-c969-41b1-b007-8be299e23f93)]
interface   ISipCallNotify : IUnknown
{
    // Notifies the application of a change to the status of the call.

    HRESULT NotifyCallChange(
        [in] SIP_CALL_STATUS *   CallStatus
        );

    // Notifies core about the completion of the
    // StartStream/StopStream operation.

    HRESULT NotifyStartOrStopStreamCompletion(
        [in] long                   lCookie,
        [in] SIP_STATUS_BLOB       *pStatus
        );
    
    // Notifies the application of a change to the status of a specific party.

    HRESULT NotifyPartyChange(
        [in] SIP_PARTY_INFO *    PartyInfo
        );

    // Notifies the application of a redirect.
    // Core will call CreateCall() with this redirect context
    
    HRESULT NotifyRedirect(
        [in] ISipRedirectContext    *pRedirectContext,
        [in] SIP_CALL_STATUS        *pCallStatus
        );
    
    HRESULT NotifyIncomingMessage(
        [in] IIMSession *pSession,
        [in] BSTR msg,
        [in] BSTR ContentType,
        [in]    SIP_PARTY_INFO *    CallerInfo
        );

    HRESULT NotifyUsrStatus(
        [in] USR_STATUS  UsrStatus,
        [in]    SIP_PARTY_INFO *    CallerInfo
        );

    HRESULT NotifyMessageCompletion(
        [in] SIP_STATUS_BLOB *      pStatus,
        [in] long                   lCookie
        );
    HRESULT NotifyMessageRedirect(
        [in] ISipRedirectContext    *pRedirectContext,
        [in] SIP_CALL_STATUS        *pCallStatus,
        [in] BSTR                   bstrmsg,
        [in] BSTR                   bstrContentType,
        [in] USR_STATUS             UsrStatus,
        [in] long                   lCookie
        );

};


//
// ISipBuddyNotify is a connection point of the Buddy object.
//

[local, uuid(d543b8e9-f704-4031-a518-5d392dc517b6)]
interface   ISipBuddyNotify : IUnknown
{
    HRESULT BuddyUnsubscribed();
    
    HRESULT NotifyRedirect(
        [in] ISipRedirectContext    *pRedirectContext,
        [in] SIP_CALL_STATUS        *pCallStatus
        );
        
    HRESULT BuddyInfoChange(void);

    HRESULT BuddyRejected(
        [in]    HRESULT   StatusCode
        );
}


[local, uuid(236662be-5347-47a2-8960-8e662ca545cc)]
interface  ISipRedirectContext : IUnknown
{
    // Gets the SIP URL and Display name for creating the call.
    HRESULT GetSipUrlAndDisplayName(
        [out]  BSTR  *pbstrSipUrl,
        [out]  BSTR  *pbstrDisplayName
        );

    // Move to the next url in the list of contacts.
    // Returns S_FALSE if we hit the end of list.
    HRESULT Advance();
};


//
// ISipEnumParties enumerates the parties on a call.
// Standard enumerator interface.
// Note that, for our purposes, only Next really needs to be implemented.
//

[local, uuid(c4fa39e8-40dd-4c48-8870-28ee82beb8fb)]
interface   ISipEnumParties : IUnknown
{
    HRESULT Next (
        [in]    ULONG               RequestCount,
        [out]   SIP_PARTY_INFO *    RequestArray,
        [out]   ULONG *             ReturnCount);

    HRESULT Skip (
        [in]    ULONG               SkipCount);

    HRESULT Reset (void);

    HRESULT Clone (
        [out]   ISipEnumParties **  ReturnClone);
};

//Instant messaging

// This interface works as the manager of all the sessions.
[local, uuid(FBC37336-6E8F-4377-9D09-D49A32A14D5C)]
interface IIMManager : IUnknown
{   

    // create IM session with a single person. 
    //Should be called by UI for outgoing calls
    HRESULT CreateSession(
        [in]    BSTR    LocalDisplayName,
        [in]    BSTR    LocalUserURI,
        [in]  SIP_PROVIDER_ID   *pProviderId,
        [in]  SIP_SERVER_INFO        *pProxyInfo,
        [in]  ISipRedirectContext    *pRedirectContext,
        [out] IIMSession ** pImSession
        );

    //Sends BYE to the other party.End Session
    HRESULT DeleteSession(
        [in] IIMSession * pImSession
      );

};

// This interface represents the session object.
[local, uuid(1D8CDB54-77A0-4500-809D-EFB47A1FF65E)]
interface IIMSession : IUnknown  
{
    HRESULT SendTextMessage(
        [in] BSTR msg,
        [in] BSTR ContentType,
        [in] long lCookie
        );

    HRESULT SendUsrStatus(
        [in] USR_STATUS  UsrStatus,
        [in] long        lCookie
        );

    HRESULT GetIMSessionState(SIP_CALL_STATE * ImState);

    HRESULT AcceptSession();

    //One notification per session
    HRESULT SetNotifyInterface(
        [in]   ISipCallNotify *    NotifyInterface
        );

    //Add the To field for an outgoing session.
    HRESULT AddParty (
        [in]    SIP_PARTY_INFO *    PartyInfo
        );

    //Called by DeleteSession of IMManager. Should not be called by client
    HRESULT Cleanup();
};


typedef
enum WATCHER_BLOCKED_STATUS
{
    WATCHER_BLOCKED = 1,
    WATCHER_UNBLOCKED = 2,
} WATCHER_BLOCKED_STATUS;


typedef
enum BUDDY_REMOVE_REASON
{
    APPLICATION_SHUTDOWN = 0,
    //The buddy needs to be removed from the stack since the 
    //application is being shutdown

    BUDDY_REMOVED_BYUSER = 1,
    //The buddy needs to be removed since the user has removed
    //this buddy from the buddy list

} BUDDY_REMOVE_REASON;


typedef
enum  BUDDY_ONLINE_STATUS
{
    TRYING_TO_CONTACT = 0,  
    //In the process of getting the presence information.
 
    UNABLE_TO_LOCATE = 1,
    //The presentity URI could not be located. The UA could remove this buddy 
    //and adding it later or let the SIP stack keep trying to locate this 
    //presentity after some interval of time with an exponential backoff.

    BUDDY_ONLINE = 2,
    //The subscription to the presentity URI was successful and the latest
    //presence information is available.

    BUDDY_OFFLINE = 3,
    //The presentity as located but the subscription was not successful, either
    //because there was no response from the presentity or the subscription was
    //rejected. This state could also signal that the buddy has dropped a 
    //previously active subscription.

} BUDDY_ONLINE_STATUS;


//A presentity URI identifies a specific device which the user is using to get 
//online. The active status of this device is conveyed through the following enum.

typedef
enum    ACTIVE_STATUS
{
    ACTIVE_STATUS_UNKNOWN  = 0,
    //The active status of the buddy device is not known.

    DEVICE_ACTIVE = 1,
    //The buddy is active with the device, we are subscribed to.

    DEVICE_INACTIVE = 2,
    //The buddy is not active with the device, we are subscribed to. 
    //For eg.- The buddy device is a PC but there is not keyboard or 
    //mouse action and screen saver has been launched.

    DEVICE_INUSE = 3,
    //The buddy device is already busy in as many sessions as it can handle.
    //For eg. - The buddy device is a cell phone and it is already in a  call.

} ACTIVE_STATUS;

typedef
enum    ACTIVE_MSN_SUBSTATUS
{
    MSN_SUBSTATUS_UNKNOWN  = 0,
    MSN_SUBSTATUS_ONLINE,
    MSN_SUBSTATUS_AWAY,
    MSN_SUBSTATUS_IDLE,
    MSN_SUBSTATUS_BUSY,
    MSN_SUBSTATUS_BE_RIGHT_BACK,
    MSN_SUBSTATUS_ON_THE_PHONE,
    MSN_SUBSTATUS_OUT_TO_LUNCH

} ACTIVE_MSN_SUBSTATUS;
    
//A buddy could convey through presence documents the information about weather
//she is willing to accept any SIP sessions for audio/video multimedia calls or
//phone to phone calls. Following enumeration conveys this information to the UA
 
typedef
enum    SIPCALL_ACCEPTANCE_STATUS
{
    SIPCALL_ACCEPTANCE_STATUS_UNKNOWN = 0,
    //No information is available weather this buddy is willing to accept any
    //SIP sessions such as audio/video calls, phone to phone calls etc.

    SIPCALL_ACCEPTANCE_ALLOWED = 1,
    //This buddy is ready to accept SIP sessions.

    SIPCALL_ACCEPTANCE_DISALLOWED = 2,
    //This buddy does not wish to accept any SIP calls from this UA.

} SIPCALL_ACCEPTANCE_STATUS;



//A buddy could convey through presence documents the information about weather she
//is willing to accept any IM sessions for chat, whiteboard sharing or multiparty
//game sessions. Following enumeration conveys this information to the UA.
 
typedef
enum    IM_ACCEPTANCE_STATUS
{
    IM_ACCEPTANCE_STATUS_UNKNOWN = 0,
    //No information is available weather this buddy is willing to accept any
    //SIP sessions such as audio/video calls, phone to phone calls etc.

    IM_ACCEPTANCE_ALLOWED = 1,
    //This buddy is ready to accept IM sessions.

    IM_ACCEPTANCE_DISALLOWED = 2,
    //This buddy does not wish to accept any IM  sessions from this UA.

} IM_ACCEPTANCE_STATUS;


typedef
enum    APPSHARING_ACCEPTANCE_STATUS
{
    APPSHARING_ACCEPTANCE_STATUS_UNKNOWN = 0,
    //No information is available weather this buddy is willing to accept any
    //SIP sessions such as audio/video calls, phone to phone calls etc.

    APPSHARING_ACCEPTANCE_ALLOWED = 1,
    //This buddy is ready to accept IM sessions.

    APPSHARING_ACCEPTANCE_DISALLOWED = 2,
    //This buddy does not wish to accept any IM  sessions from this UA.

} APPSHARING_ACCEPTANCE_STATUS;


typedef
struct PHONE_DEVICES_AVAIL
{
    BOOL    fLegacyPhoneAvailable;
    CHAR    pstrLegacyPhoneNumber[32];

    BOOL    fCellPhoneAvailable;
    CHAR    pstrCellPhoneNumber[32];

} PHONE_DEVICES_AVAIL;


typedef
struct  SIP_PRESENCE_INFO
{
    BUDDY_ONLINE_STATUS         presenceStatus;
    ACTIVE_STATUS               activeStatus;
    ACTIVE_MSN_SUBSTATUS        activeMsnSubstatus;   
    SIPCALL_ACCEPTANCE_STATUS   sipCallAcceptance;
    IM_ACCEPTANCE_STATUS        IMAcceptnce;
    APPSHARING_ACCEPTANCE_STATUS appsharingStatus;

    PHONE_DEVICES_AVAIL         phonesAvailableStatus;

    CHAR                        pstrSpecialNote[ 512 ];
    //This conveys any miscellaneous information to the UA.
    //This information is not interpreted by SIP stack and
    //could be relevant for the UA for a particular buddy.

} SIP_PRESENCE_INFO;


//This enumeration is defined as follows:
typedef
enum  WATCHER_REJECT_REASON
{
    REJECT_REASON_NONE = 0,
    //The user does not wish to specify any reason.

    REJECT_REASON_BUSY = 1,

    //The user is too busy right now to accept any new sessions at all.

    REJECT_REASON_UA_OUTOFRESOURCE = 2,

    //The UA is out of resources and can not accept any more watchers.

    REJECT_REASON_WATCHER_UNKNOWN = 3,

    //The user does not recognize the watcher.

} WATCHER_REJECT_REASON;



typedef
struct BLOCKED_WATCHER_INFO
{
    CHAR   *pstrSubscribeRequest;

} BLOCKED_WATCHER_INFO;


[local, uuid(6da7e176-b1e7-4e7b-a6d9-e885dcf3deab)]
interface   ISIPBuddy : IUnknown
{

    HRESULT GetPresenceInformation(
        [in, out]   SIP_PRESENCE_INFO * pSipBuddyPresenceInfo
        );


    HRESULT SetNotifyInterface(
        [in]   ISipBuddyNotify *    NotifyInterface
        );
        
};
    

[local, uuid(e9360bea-5268-4cb9-b28e-3736a520faf5)]
interface   ISIPWatcher : IUnknown
{

    HRESULT ApproveSubscription(
        [in]  DWORD dwPresenceInfoRules 
        );

    HRESULT RejectSubscription(
        [in]  WATCHER_REJECT_REASON ulReason
        );
    
    HRESULT ChangeBlockedStatus(
        [in]  WATCHER_BLOCKED_STATUS    BlockedStatus
        );

    HRESULT GetWatcherShutdownData(
        [in]  CHAR    *NotifyBlob,
        [out] DWORD   *pdwBlobLength
        );

};


[local, uuid(7f8cfc57-a92d-4bcf-be02-83ea11dba34f)]
interface   ISIPWatcherManager : IUnknown
{
    HRESULT SetPresenceInformation(
        [in] SIP_PRESENCE_INFO * pSipLocalPresenceInfo
        );

    INT GetWatcherCount(void);
    
    ISIPWatcher * GetWatcherByIndex(
        [in]  INT iIndex
        );

    HRESULT RemoveWatcher(
        [in]  ISIPWatcher * pSipWatcher,
        [in]  BUDDY_REMOVE_REASON watcherRemoveReason
        );
    
    HRESULT SendUnsubToWatcher(
        [in]  CHAR           *NotifyBlob,
        [in]  DWORD           dwBlobLength,
        [in]  SIP_SERVER_INFO *pProxyInfo
        );

};


[local, uuid(ccafd7c7-f7af-40cb-b981-d9a9e164843c)]
interface   ISIPBuddyManager : IUnknown
{

    INT GetBuddyCount(void);
    
    ISIPBuddy * GetBuddyByIndex(
        [in]    INT iIndex
        );
    
    HRESULT AddBuddy(
        [in]    WCHAR*               lpwstrFriendlyName,
        [in]    WCHAR*               lpwstrPresentityURI,
        [in]    WCHAR*               lpwstrLocalUserURI,
        [in]    SIP_PROVIDER_ID     *pProviderID,
        [in]    SIP_SERVER_INFO     *pProxyInfo,
        [in]    ISipRedirectContext *pRedirectContext,
        [out]   ISIPBuddy          **ppSipBuddy
        );

    HRESULT RemoveBuddy(
        [in]  ISIPBuddy *         pSipBuddy,
        [in]  BUDDY_REMOVE_REASON buddyRemoveReason
        );

}

cpp_quote("")
cpp_quote("HRESULT  SipCreateStack (")
cpp_quote(" IN  IRTCMediaManage  *pIRTCMediaManage, ")
cpp_quote(" OUT ISipStack       **ppSipStack);      ")
cpp_quote("")

// Called from DllMain load
cpp_quote("")
cpp_quote("HRESULT  SipStackInitialize ();")
cpp_quote("")
    
// Called from DllMain unload
cpp_quote("")
cpp_quote("HRESULT  SipStackShutdown ();")
cpp_quote("")
