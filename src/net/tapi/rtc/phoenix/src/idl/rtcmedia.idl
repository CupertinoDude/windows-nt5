/*++

Copyright (C) Microsoft Corporation, 2000

Module Name:

    rtcmedia.idl

Abstract:

    IDL source for rtcmedia.lib

Author:

    Qianbo Huai (qhuai) 18-Jul-2000

--*/

#ifndef _RTCMEDIA_IDL
#define _RTCMEDIA_IDL

import "oaidl.idl";
import "ocidl.idl";
import "strmif.idl";

// include IVideoWindow
// #include <control.h>

interface IRTCMediaManage;
interface IRTCTerminalManage;
interface IRTCTerminal;
interface IRTCAudioConfigure;
interface IRTCVideoConfigure;

/*//////////////////////////////////////////////////////////////////////////////
    Media Enumerations
////*/

typedef enum RTC_MEDIA_TYPE
{
    RTC_MT_AUDIO        = 0x000000001,
    RTC_MT_VIDEO        = 0x000000002,
    RTC_MT_DATA			= 0x000000004

} RTC_MEDIA_TYPE;

typedef enum RTC_MEDIA_DIRECTION
{
    RTC_MD_CAPTURE   = 0x00000001,
    RTC_MD_RENDER    = 0x00000002

} RTC_MEDIA_DIRECTION;

typedef enum RTC_MEDIA_PREFERENCE
{
    RTC_MP_AUDIO_CAPTURE    = 0x00000001,
    RTC_MP_AUDIO_RENDER     = 0x00000002,
    RTC_MP_VIDEO_CAPTURE    = 0x00000004,
    RTC_MP_VIDEO_RENDER     = 0x00000008,
    RTC_MP_DATA_SENDRECV    = 0x00000010

} RTC_MEDIA_PREFERENCE;

typedef enum RTC_STREAM_STATE
{
    RTC_SS_CREATED,         // created
    RTC_SS_INITIATED,       // initiated
    RTC_SS_STARTED,         // started but not running
    RTC_SS_RUNNING,         // graph running
    RTC_SS_STOPPED,         // graph stopped
    RTC_SS_SHUTDOWN         // shutdown was called

} RTC_STREAM_STATE;

// media event needs to be sync with g_pszMediaEventName
typedef enum RTC_MEDIA_EVENT
{
    RTC_ME_STREAM_CREATED,      // new stream created by media
    RTC_ME_STREAM_REMOVED,      // stream removed by media
    RTC_ME_STREAM_ACTIVE,       // stream active
    RTC_ME_STREAM_INACTIVE,     // stream inactive
    RTC_ME_STREAM_FAIL,         // stream failed due to some error
    // RTC_ME_TERMINAL_ADDED,   // usb device plugged in
    RTC_ME_TERMINAL_REMOVED,    // usb devide removed
    RTC_ME_VOLUME_CHANGE,
    RTC_ME_REQUEST_RELEASE_WAVEBUF,   // request to release wave buf
    RTC_ME_LOSSRATE,
    RTC_ME_BANDWIDTH,
    RTC_ME_NETWORK_QUALITY,
    RTC_ME_T120_FAIL,            // t120 related failure

    RTC_ME_LAST

} RTC_MEDIA_EVENT;

typedef enum RTC_MEDIA_EVENT_CAUSE
{
    RTC_ME_CAUSE_UNKNOWN,
    RTC_ME_CAUSE_RECOVERED,
    RTC_ME_CAUSE_TIMEOUT,
    RTC_ME_CAUSE_BAD_DEVICE,
    RTC_ME_CAUSE_LOCAL_REQUEST,
    RTC_ME_CAUSE_REMOTE_REQUEST,
    RTC_ME_CAUSE_QUALITY_OF_SERVICE,
    RTC_ME_CAUSE_PLUG_AND_PLAY,
    RTC_ME_CAUSE_REMOTE_HOLD,
    RTC_ME_CAUSE_LOSSRATE,
    RTC_ME_CAUSE_BANDWIDTH,
    RTC_ME_CAUSE_NETWORK_QUALITY,
    RTC_ME_CAUSE_CRYPTO,

    RTC_ME_CAUSE_T120_INITIALIZE,
    // RTC_ME_CAUSE_T120_SHUTDOWN,
    RTC_ME_CAUSE_T120_OUTGOING_CALL,
    RTC_ME_CAUSE_T120_INCOMING_CALL,
    RTC_ME_CAUSE_T120_START_APPLET,
    //RTC_ME_CAUSE_T120_STOP_APPLET

} RTC_MEDIA_EVENT_CAUSE;

typedef enum RTC_TERMINAL_TYPE
{
    RTC_TT_STATIC,
    RTC_TT_DYNAMIC

} RTC_TERMINAL_TYPE;

typedef enum RTC_TERMINAL_STATE
{
    RTC_TS_CREATED,
    RTC_TS_INITIATED,
    RTC_TS_CONNECTED,
    RTC_TS_SHUTDOWN

} RTC_TERMINAL_STATE;

// DTMF format in RTP in the range 96 to 127 (RFC1890)
cpp_quote("#define RTC_DTMF_RTP_FORMAT         120")

cpp_quote("#define RTC_MIN_AUDIO_VOLUME		     0")
cpp_quote("#define RTC_MAX_AUDIO_VOLUME		0xFFFF")

cpp_quote("#define RTC_MIN_AUDIO_LEVEL           0")
cpp_quote("#define RTC_MAX_AUDIO_LEVEL      0xFFFF")

/*//////////////////////////////////////////////////////////////////////////////
    Structures
////*/

typedef struct
{
    RTC_MEDIA_EVENT Event;
    RTC_MEDIA_EVENT_CAUSE Cause;
    RTC_MEDIA_TYPE MediaType;
    RTC_MEDIA_DIRECTION Direction;
    HRESULT hrError;
    UINT uiDebugInfo;

} RTCMediaEventItem;

/*//////////////////////////////////////////////////////////////////////////////
    Interfaces
////*/

[
    uuid(f09f9ae7-6712-41a5-b959-4cb4d602a9dc),
    helpstring("IRTCMediaManage Interface"),
    pointer_default(unique)
]
interface IRTCMediaManage : IUnknown
{
    HRESULT Initialize(
        [in] HWND hWnd,
        [in] UINT uiEventID
        );

    HRESULT SetDirectPlayNATHelpAndSipStackInterfaces(
        [in] IUnknown  *pDirectPlayNATHelp, // (IDirectPlayNATHelp *)
        [in] IUnknown  *pSipStack
        );
    
    HRESULT Reinitialize();

    HRESULT Shutdown();

    //
    // SDP blob related methods
    //

    // To be removed
    //HRESULT SetSDPBlob(
        //[in] CHAR *szSDP
        //);

    // dwSkipMask marks types of streams we don't
    // want to include in the SDP blob.
    HRESULT GetSDPBlob(
        [in] DWORD dwSkipMask,
        [out] CHAR **pszSDP
        );

    HRESULT GetSDPOption(
        [in] DWORD dwLocalIP,
        [out] CHAR **pszSDP
        );

    HRESULT FreeSDPBlob(
        [in] CHAR *szSDP
        );

    // break SetSDPBlob into several steps
    // to let the user of IRTCMediaManage have more knowlegde
    // of possible failures.

    HRESULT ParseSDPBlob(
        [in] CHAR *szSDP,
        [out] IUnknown **ppSession
        );

    // To be removed
    //HRESULT TrySDPSession(
        //[in] IUnknown *pSession,
        //[out] DWORD *pdwHasMedia
        //);

    // If fNewSession is true, media checks if the input SDP is valid.
    // Otherwise, media checks the SDP against the internal SDP.
    // This variable is needed to distinguish whether the incoming SDP is
    // from a different source compared with the current one,
    // so that the app can ask the user if he wants to disconnect the current
    // session and accept the new one.

    HRESULT VerifySDPSession(
        [in] IUnknown *pSession,
        [in] BOOL fNewSession,
        [out] DWORD *pdwHasMedia
        );

    HRESULT SetSDPSession(
        [in] IUnknown *pSession
        );

    //
    // media preference related methods
    //

    // return NOERROR or RTCMEDIA_E_DEFAULTTERMINAL
    // preferred media default is none
    HRESULT SetPreference(
        [in] DWORD dwPreference
        );

    HRESULT GetPreference(
        [out] DWORD *pdwPreference
        );

    HRESULT AddPreference(
        [in] DWORD dwPreference
        );

    //
    // stream related methods
    //
    HRESULT AddStream(
        [in] RTC_MEDIA_TYPE MediaType,
        [in] RTC_MEDIA_DIRECTION Direction,
        [in] DWORD dwRemoteIP
        );

    HRESULT HasStream(
        [in] RTC_MEDIA_TYPE MediaType,
        [in] RTC_MEDIA_DIRECTION Direction
        );

    HRESULT RemoveStream(
        [in] RTC_MEDIA_TYPE MediaType,
        [in] RTC_MEDIA_DIRECTION Direction
        );

    HRESULT StartStream(        
        [in] RTC_MEDIA_TYPE MediaType,
        [in] RTC_MEDIA_DIRECTION Direction
        );

    HRESULT StopStream(
        [in] RTC_MEDIA_TYPE MediaType,
        [in] RTC_MEDIA_DIRECTION Direction
        );

    HRESULT GetStreamState(
        [in] RTC_MEDIA_TYPE MediaType,
        [in] RTC_MEDIA_DIRECTION Direction,
        [out] RTC_STREAM_STATE *pState
        );

    HRESULT FreeMediaEvent(
        [out] RTCMediaEventItem *pEventItem
        );

    HRESULT SendDTMFEvent(
        [in] DWORD dwId,
        [in] DWORD dwEvent,
        [in] DWORD dwVolume,
        [in] DWORD dwDuration,
        [in] BOOL fEnd
        );

    HRESULT OnLossrate(
        [in] RTC_MEDIA_TYPE MediaType,
        [in] RTC_MEDIA_DIRECTION Direction,
        [in] DWORD dwLossrate
        );

    HRESULT OnBandwidth(
        [in] RTC_MEDIA_TYPE MediaType,
        [in] RTC_MEDIA_DIRECTION Direction,
        [in] DWORD dwBandwidth
        );

    //
    // Exposed by CoreAPI
    //
    HRESULT SetMaxBitrate(
        [in] DWORD dwMaxBitrate
        );

    HRESULT GetMaxBitrate(
        [out] DWORD *pdwMaxBitrate
        );

    HRESULT SetTemporalSpatialTradeOff(
        [in] DWORD dwValue
        );

    HRESULT GetTemporalSpatialTradeOff(
        [out] DWORD *pdwValue
        );

    // T120 stuff
    HRESULT StartT120Applet (
        [in] UINT   uiAppletID
        );

    HRESULT StopT120Applets();

    HRESULT SetEncryptionKey(
        [in] RTC_MEDIA_TYPE MediaType,
        [in] RTC_MEDIA_DIRECTION Direction,
        [in] BSTR Key
        );

    // network quality: [0, 100].
    // higher value better quality
    HRESULT GetNetworkQuality(
        [out] DWORD *pdwValue
        );

    // S_OK if out-of-band dtmf is enabled. S_FALSE otherwise.
    HRESULT IsOutOfBandDTMFEnabled();

    // * port manager can only be set/removed before any stream is
    //   created or before SDP is accepted, otherwise
    //   RTC_E_MEDIA_CONTROLLER_STATE will be returned.
    // * port manager and session will be released in reinitialize
    // * if app sets the port manager via advise or unadvise, we will
    //   need to input an additional IUnknown *pIRTCSession
    // * port manager is removed if the pointer is NULL
    //
    HRESULT SetPortManager(
        [in] IUnknown       *pPortManager
        );
};

[
    uuid(bc05bebe-2b0d-4325-9182-e950f406518c),
    helpstring("IRTCTerminalManage Interface"),
    pointer_default(unique)
]
interface IRTCTerminalManage : IUnknown
{
    //
    // static terminal related methods
    //
    HRESULT GetStaticTerminals(
        [in, out] DWORD *pdwCount,
        [out] IRTCTerminal **ppTerminal
        );

    HRESULT GetDefaultTerminal(
        [in] RTC_MEDIA_TYPE MediaType,
        [in] RTC_MEDIA_DIRECTION Direction,
        [out] IRTCTerminal **ppTerminal
        );

    HRESULT GetVideoPreviewTerminal(
        [out] IRTCTerminal **ppTerminal
        );

    HRESULT SetDefaultStaticTerminal(
        [in] RTC_MEDIA_TYPE MediaType,
        [in] RTC_MEDIA_DIRECTION Direction,
        [in] IRTCTerminal *pTerminal
        );

    HRESULT UpdateStaticTerminals();
};

[
    uuid(6cae2a34-e12b-4102-b0b7-578c13c2e26d),
    helpstring("IRTCTuningManage Interface"),
    pointer_default(unique)
]
interface IRTCTuningManage : IUnknown
{
    //
    // tuning related methods
    //
    HRESULT IsAECEnabled(
        [in] IRTCTerminal *pAudCapt,   // capture tm
        [in] IRTCTerminal *pAudRend,   // render tm
        [out] BOOL *pfEnableAEC
        );

    HRESULT InitializeTuning(
        [in] IRTCTerminal *pAudCaptTerminal,
        [in] IRTCTerminal *pAudRendTerminal,
        [in] BOOL fEnableAEC
        );

    // save AEC settting
    HRESULT SaveAECSetting();

    HRESULT ShutdownTuning();

    HRESULT StartTuning(
        [in] RTC_MEDIA_DIRECTION Direction
        );

    HRESULT StopTuning(
        [in] BOOL fSaveSetting
        );

    HRESULT GetVolumeRange(
        [in] RTC_MEDIA_DIRECTION Direction,
        [out] UINT *puiMin,
        [out] UINT *puiMax
        );

    HRESULT GetVolume(
        [in] RTC_MEDIA_DIRECTION Direction,
        [out] UINT *puiVolume
        );

    HRESULT SetVolume(
        [in] RTC_MEDIA_DIRECTION Direction,
        [in] UINT uiVolume
        );

    HRESULT GetAudioLevelRange(
        [in] RTC_MEDIA_DIRECTION Direction,
        [out] UINT *puiMin,
        [out] UINT *puiMax
        );

    HRESULT GetAudioLevel(
        [in] RTC_MEDIA_DIRECTION Direction,
        [out] UINT *puiLevel
        );

    // video tuning
    HRESULT StartVideo(
        [in] IRTCTerminal *pVidCaptTerminal,
        [in] IRTCTerminal *pVidRendTerminal
        );

    HRESULT StopVideo();

    // get system volume
    HRESULT GetSystemVolume(
        [in] IRTCTerminal *pTerminal,
        [out] UINT *puiVolume
        );
};

[
    uuid(c914c1ae-ce2d-4916-b838-f6341e45cc0d),
    helpstring("IRTCTerminal Interface"),
    pointer_default(unique)
]
interface IRTCTerminal : IUnknown
{
    HRESULT GetTerminalType(
        [out] RTC_TERMINAL_TYPE *pType
        );

    HRESULT GetMediaType(
        [out] RTC_MEDIA_TYPE *pMediaType
        );

    HRESULT GetDirection(
        [out] RTC_MEDIA_DIRECTION *pDirection
        );

    HRESULT GetDescription(
        [out] WCHAR **ppDescription
        );

    HRESULT FreeDescription(
        [in] WCHAR *pDescription
        );

    HRESULT GetState(
        [out] RTC_TERMINAL_STATE *pState
        );
};

[
    uuid(f5108e83-e088-4ba5-bc59-c4bfe831fe59),
    helpstring("IRTCAudioConfigure Interface"),
    pointer_default(unique)
]
interface IRTCAudioConfigure : IUnknown
{
    HRESULT GetVolume(
        [out] UINT *puiVolume
        );

    HRESULT SetVolume(
        [in] UINT uiVolume
        );

    HRESULT SetMute(
        [in] BOOL fMute
        );

    HRESULT GetMute(
        [out] BOOL *pfMute
        );

    HRESULT GetWaveID(
        [out] UINT *puiWaveID
        );

    HRESULT GetAudioLevel(
        [out] UINT *puiLevel
        );

    HRESULT GetAudioLevelRange(
        [out] UINT *puiMin,
        [out] UINT *puiMax
        );
};

[
    uuid(8f31bdcb-1b34-4724-ab02-9617a0cbc477),
    helpstring("IRTCVideoConfigure Interface"),
    pointer_default(unique)
]
interface IRTCVideoConfigure : IUnknown
{
    // can't make it to be IVideoWindow, use IUnknown instead
    HRESULT GetIVideoWindow(
        [out] LONG_PTR **ppIVideoWindow
        );
};

/*//////////////////////////////////////////////////////////////////////////////
    Error code
////*/

cpp_quote("#define RTCMEDIA_E_SIZETOOSMALL      MAKE_HRESULT(1, 0x234, 0x51)")
cpp_quote("#define RTCMEDIA_E_DEFAULTTERMINAL   MAKE_HRESULT(1, 0x234, 0x53)")
cpp_quote("#define RTCMEDIA_E_CRYPTO            MAKE_HRESULT(1, 0x234, 0x55)")

#ifndef RTCMEDIA_DLL

// for library use
cpp_quote ("HRESULT CreateMediaController(IRTCMediaManage **ppIRTCMediaManage);")

#else

//
// for dll use
//

#endif // RTCMEDIA_DLL

#endif // _RTCMEDIA_IDL

