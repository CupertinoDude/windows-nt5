// Frame.idl : IDL source for Frame.dll
//

// This file will be processed by the MIDL tool to
// produce the type library (Frame.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";

typedef enum RTC_ADDRESS_TYPE
{
    RTCAT_PHONE,
    RTCAT_COMPUTER

} RTC_ADDRESS_TYPE;

interface IRTCEnumContacts;
interface IRTCContact;
interface IRTCContactList;
interface IRTCEnumAddresses;
interface IRTCAddress;

[
    uuid(C4199108-D022-40be-BD8C-F0D10F869082),
    hidden,
    helpstring("IRTCAddress Interface"),
    pointer_default(unique)
]
interface IRTCAddress : IUnknown
{
    [propput, id(1), helpstring("property Address")]
    HRESULT Address(
            [in] BSTR bstrAddress
            );  
            
    [propget, id(1), helpstring("property Address")]
    HRESULT Address(
            [out, retval] BSTR * pbstrAddress
            );  
            
    [propput, id(2), helpstring("property Label")]
    HRESULT Label(
            [in] BSTR bstrLabel
            );  
            
    [propget, id(2), helpstring("property Label")]
    HRESULT Label(
            [out, retval] BSTR * pbstrLabel
            );  
            
    [propput, id(3), helpstring("property Type")]
    HRESULT Type(
            [in] RTC_ADDRESS_TYPE enType
            );  
            
    [propget, id(3), helpstring("property Type")]
    HRESULT Type(
            [out, retval] RTC_ADDRESS_TYPE * penType
            );                                                      
};

[
    uuid(41C819E3-7186-4b7e-9CAF-513B579D06B1),
    hidden,
    helpstring("IRTCEnumAddresses interface"),
    pointer_default(unique)
]  
interface IRTCEnumAddresses : IUnknown
{
    HRESULT Next(
            [in] ULONG celt,
            [out, size_is(celt)] IRTCAddress ** ppElements,
            [in,out,ptr] ULONG * pceltFetched
            );

    HRESULT Reset( void );

    HRESULT Skip (
            [in] ULONG celt
            );

    HRESULT Clone (
            [out, retval] IRTCEnumAddresses ** ppEnum
            );
}

[
    uuid(0BB7B3A0-7EFE-4eb0-B666-912CF050C408),
    hidden,
    helpstring("IRTCContactList Interface"),
    pointer_default(unique)
]
interface IRTCContactList : IUnknown
{
    [id(1), helpstring("method EnumerateContacts")]
    HRESULT EnumerateContacts(   
            [out, retval] IRTCEnumContacts ** ppEnum
            ); 

    [id(2), helpstring("method NewContact")]
    HRESULT NewContact(
            [in] HWND hWnd,
            [out, retval] IRTCContact ** ppContact
            );

    [propget, id(3), helpstring("property Name")]
    HRESULT Name(
            [out, retval] BSTR * pbstrName
            ); 

    [id(4), helpstring("method Advise")]
    HRESULT Advise(
            [in] HWND hWnd,
            [in] UINT uiEventID
            );

    [id(5), helpstring("method Unadvise")]
    HRESULT Unadvise();

	[id(6), helpstring("method NewContactNoUI")]
	HRESULT	NewContactNoUI(
			[in] BSTR	bstrDisplayName,
			[in] BSTR	bstrEmailAddress,
			[in] BOOL	bIsBuddy
			);

}; 

[
    uuid(3F679074-5EF5-4831-9410-6A4A6B65A21C),
    hidden,
    helpstring("IRTCContact Interface"),
    pointer_default(unique)
]
interface IRTCContact : IUnknown
{
    [propget, id(1), helpstring("property DisplayName")]
    HRESULT DisplayName(
            [out, retval] BSTR * pbstrName
            ); 

    [id(2), helpstring("method EnumerateAddresses")]
    HRESULT EnumerateAddresses(   
            [out, retval] IRTCEnumAddresses ** ppEnum
            );

    [id(3), helpstring("method Edit")]
    HRESULT Edit(
            [in] HWND hWnd
            );

    [propget, id(4), helpstring("property ContactList")]
    HRESULT ContactList(
            [out, retval] IRTCContactList ** ppContactList
            );

    [id(5), helpstring("method Delete")]
    HRESULT Delete();
    
	[propget, id(6), helpstring("property IsBuddy")]
	HRESULT	IsBuddy(
			[out, retval] BOOL *pVal);

	[propput, id(6), helpstring("property IsBuddy")]
	HRESULT	IsBuddy(
			[in] BOOL bVal);

	[propget, id(7), helpstring("property DefaultEmailAddress")]
	HRESULT	DefaultEmailAddress(
			[out, retval] BSTR *pbstrVal);

	[propput, id(7), helpstring("property DefaultEmailAddress")]
	HRESULT	DefaultEmailAddress(
			[in] BSTR bstrVal);

    [id(8), helpstring("method GetEntryID")]
	HRESULT	GetEntryID(
			[out] ULONG	*pcbSize,
			[out, size_is( ,*pcbSize)] BYTE	**ppEntryID
			);

};

[
    uuid(29EF6C3B-2DAB-44ca-ACA9-93A53B7E8572),
    hidden,
    helpstring("IRTCEnumContacts interface"),
    pointer_default(unique)
]   
interface IRTCEnumContacts : IUnknown
{
    HRESULT Next(
            [in] ULONG celt,
            [out, size_is(celt)] IRTCContact ** ppElements,
            [in,out,ptr] ULONG * pceltFetched
            );

    HRESULT Reset( void );

    HRESULT Skip (
            [in] ULONG celt
            );

    HRESULT Clone (
            [out, retval] IRTCEnumContacts ** ppEnum
            );
}

[
	object,
	uuid(c65062b7-b5d8-4082-a4ed-6d4f77046c41),
	dual,
	helpstring("IRTCFrame Interface"),
	pointer_default(unique)
]
interface IRTCFrame : IDispatch
{
	[id(1), helpstring("method PlaceCall")] HRESULT PlaceCall(BSTR callString);
	[id(2), helpstring("method OnTop")] HRESULT OnTop();
};

[
	uuid(d8eb9075-a213-47f3-8e93-15a09ba6d009),
	version(1.0),
	helpstring("Frame 1.0 Type Library")
]
library RTCFRAMELib
{
	importlib("stdole32.tlb");
	importlib("stdole2.tlb");

	[
		uuid(b12686f8-cba4-43da-8d38-b5a270a9799a),
		helpstring("RTCFrame Class")
	]
	coclass RTCFrame
	{
		[default] interface IRTCFrame;
	};
};
