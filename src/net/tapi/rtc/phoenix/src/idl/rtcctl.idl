// rtcctl.idl : IDL source for rctctl.lib
//

// This file will be processed by the MIDL tool to
// produce the type library (rtcctl.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";
#include "olectl.h"

import "rtccore.idl";


typedef enum DISPID_RTCCTL
{
    DISPID_RTCCTL_DESTINATIONURL = 1,
    DISPID_RTCCTL_DESTINATIONNAME,
    DISPID_RTCCTL_CALLSCENARIO,
    DISPID_RTCCTL_AUTOPLACECALL,
    DISPID_RTCCTL_PROVISIONINGPROFILE,
    DISPID_RTCCTL_SHOWDIALPAD,
    DISPID_RTCCTL_DISABLEVIDEORECEPTION,
    DISPID_RTCCTL_DISABLEVIDEOTRANSMISSION,
    DISPID_RTCCTL_DISABLEVIDEOPREVIEW
} DISPID_RCTCTL;

typedef enum RTC_CALL_SCENARIO
{
    RTC_CALL_SCENARIO_PCTOPC,
    RTC_CALL_SCENARIO_PCTOPHONE,
    RTC_CALL_SCENARIO_PHONETOPHONE,
} RTC_CALL_SCENARIO;


[
    object,
    uuid(1e6aa071-a5a4-4364-a576-6513b1d18c85),
    helpstring("IRTCProvStore Interface"),
    dual
]
interface IRTCProvStore : IDispatch
{
    [propget, id(1), helpstring("property ProvisioningProfile")] 
    HRESULT ProvisioningProfile(
            [in] BSTR bstrKey, 
            [out, retval] BSTR * pbstrProfileXML
            );

    [id(2), helpstring("method SetProvisioningProfile")] 
    HRESULT SetProvisioningProfile(
            [in] BSTR bstrProfileXML
            );

    [id(3), helpstring("method DeleteProvisioningProfile")] 
    HRESULT DeleteProvisioningProfile(
            [in] BSTR bstrKey
            );
};


[
    object,
    uuid(5695B060-0E59-493A-80DC-DEE2D7F2A69F),
    dual,
    oleautomation,
    helpstring("IRTCCtl Interface"),
    pointer_default(unique)
]
interface IRTCCtl : IDispatch
{
    [propget, id(DISPID_RTCCTL_DESTINATIONURL), helpstring("property DestinationUrl")] 
        HRESULT DestinationUrl([out, retval] BSTR *pVal);
    
    [propput, id(DISPID_RTCCTL_DESTINATIONURL), helpstring("property DestinationUrl")] 
        HRESULT DestinationUrl([in] BSTR newVal);
    
    [propget, id(DISPID_RTCCTL_DESTINATIONNAME), helpstring("property DestinationName")] 
        HRESULT DestinationName([out, retval] BSTR *pVal);
    
    [propput, id(DISPID_RTCCTL_DESTINATIONNAME), helpstring("property DestinationName")] 
        HRESULT DestinationName([in] BSTR newVal);
    
    [propget, id(DISPID_RTCCTL_CALLSCENARIO), helpstring("property CallScenario")] 
        HRESULT CallScenario([out, retval] RTC_CALL_SCENARIO *pVal);
    
    [propput, id(DISPID_RTCCTL_CALLSCENARIO), helpstring("property CallScenario")] 
        HRESULT CallScenario([in] RTC_CALL_SCENARIO newVal);
    
    [propget, id(DISPID_RTCCTL_AUTOPLACECALL), helpstring("property AutoPlaceCall")]
        HRESULT AutoPlaceCall([out, retval] BOOL *pVal);

    [propput, id(DISPID_RTCCTL_AUTOPLACECALL), helpstring("property AutoPlaceCall")]
        HRESULT AutoPlaceCall([in] BOOL newVal);

    [propget, id(DISPID_RTCCTL_PROVISIONINGPROFILE), helpstring("property ProvisioningProfile")]
        HRESULT ProvisioningProfile([out, retval] BSTR *pVal);

    [propput, id(DISPID_RTCCTL_PROVISIONINGPROFILE), helpstring("property ProvisioningProfile")]
        HRESULT ProvisioningProfile([in] BSTR newVal);

    [propget, id(DISPID_RTCCTL_SHOWDIALPAD), helpstring("property ShowDialpad")]
        HRESULT ShowDialpad([out, retval] BOOL *pVal);

    [propput, id(DISPID_RTCCTL_SHOWDIALPAD), helpstring("property ShowDialpad")]
        HRESULT ShowDialpad([in] BOOL newVal);

    [propget, id(DISPID_RTCCTL_DISABLEVIDEORECEPTION), helpstring("property DisableVideoReception")]
        HRESULT DisableVideoReception([out, retval] BOOL *pVal);

    [propput, id(DISPID_RTCCTL_DISABLEVIDEORECEPTION), helpstring("property DisableVideoReception")]
        HRESULT DisableVideoReception([in] BOOL newVal);
    
    [propget, id(DISPID_RTCCTL_DISABLEVIDEOTRANSMISSION), helpstring("property DisableVideoTransmission")]
        HRESULT DisableVideoTransmission([out, retval] BOOL *pVal);

    [propput, id(DISPID_RTCCTL_DISABLEVIDEOTRANSMISSION), helpstring("property DisableVideoTransmission")]
        HRESULT DisableVideoTransmission([in] BOOL newVal);

    [propget, id(DISPID_RTCCTL_DISABLEVIDEOPREVIEW), helpstring("property DisableVideoPreview")]
        HRESULT DisableVideoPreview([out, retval] BOOL *pVal);

    [propput, id(DISPID_RTCCTL_DISABLEVIDEOPREVIEW), helpstring("property DisableVideoPreview")]
        HRESULT DisableVideoPreview([in] BOOL newVal);

};

[
    uuid(0edc44f8-825e-4a23-8af7-69b035393e7b),
    version(1.0),
    helpstring("rtcctl 1.0 Type Library")
]
library RTCCtlLib
{
    importlib("stdole32.tlb");
    importlib("stdole2.tlb");

    [
        uuid(b6b766ab-82e2-412a-9de4-26e4ab77ab4c),
        helpstring("_IRTCCtlEvents Interface")
    ]
    dispinterface _IRTCCtlEvents
    {
        properties:
        methods:
    };

    [
        uuid(cd44f458-26c3-4776-b6e4-d0fb28578eb8),
        helpstring("RTCCTL Class")
    ]
    coclass RTCCtl
    {
        [default] interface IRTCCtl;
        [default, source] dispinterface _IRTCCtlEvents;
    };

    [
        uuid(9f5c41a7-e2ae-482e-874d-5fe8f50e2f9d),
        helpstring("RTCProvStore Class")
    ]
    coclass RTCProvStore
    {
        [default] interface IRTCProvStore;
    };

};


/////////////////////////////////////////////////////////////////////////////
//  Layout related types
//
cpp_quote("#define     AXCTL_ZONE_TOOLBAR      0")
cpp_quote("#define     AXCTL_ZONE_LOGOVIDEO    1")
cpp_quote("#define     AXCTL_ZONE_DIALPAD      2")
cpp_quote("#define     AXCTL_ZONE_AUDIO        3")
cpp_quote("#define     AXCTL_ZONE_PARTICIPANTS 4")
cpp_quote("#define     AXCTL_ZONE_STATUS       5")

#define                 AXCTL_ZONE_NR           6
cpp_quote("#define		AXCTL_ZONE_NR           6")


typedef struct  CZoneState {
    int     iBase;
    BOOL    bShown;
} CZoneState;

typedef CZoneState CZoneStateArray[AXCTL_ZONE_NR];

// AX control states
typedef enum RTCAX_STATE {
        RTCAX_STATE_NONE,       // just created
        RTCAX_STATE_ERROR,      // initialization failure
        RTCAX_STATE_IDLE,       // not in a call
        RTCAX_STATE_UI_BUSY,    // idle, but a meesage box is up.
        RTCAX_STATE_DIALING,    // placing a call
        RTCAX_STATE_CONNECTING, // connecting to a destination
        RTCAX_STATE_ANSWERING,  // answering
        RTCAX_STATE_DISCONNECTING, // disconnecting
        RTCAX_STATE_ALERTING,   // ringing
        RTCAX_STATE_CONNECTED   // in a call
} RTCAX_STATE;


[
    object,
    local,
    uuid(BEBBC30F-A3A4-440B-AB96-0A409518393E),
    helpstring("IRTCCtlFrameSupport Interface"),
    pointer_default(unique)
]
interface IRTCCtlFrameSupport : IUnknown
{
        // Gets an IRTCClient interface pointer
        HRESULT GetClient([out] IRTCClient **ppClient);
        
        // Gets an IRTCSessiont interface pointer
        HRESULT GetActiveSession([out] IRTCSession **ppSession);

        // Starts an IM session
        HRESULT Message(
                    [in] BSTR          pDestName,
                    [in] BSTR          pDestAddress,
                    [in] BOOL          bDestAddressEditable,
                    [out] BSTR       * ppDestAddressChosen);

        // Places a call
        HRESULT Call([in] BOOL          bCallPhone,
                     [in] BSTR          pDestName,
                     [in] BSTR          pDestAddress,
                     [in] BOOL          bDestAddressEditable,
                     [in] BSTR          pLocalPhoneAddress,
                     [in] BOOL          bProfileSelected,
                     [in] IRTCProfile * pProfile,
                     [out] BSTR       * ppDestAddressChosen);           

        // Hangs up
        HRESULT HangUp(void);

        // Releases the session without hanging up
        HRESULT ReleaseSession(void);

        // Accepts the currently alerting session
        HRESULT Accept(void);

        // Rejects the currently alerting session
        HRESULT Reject(RTC_TERMINATE_REASON Reason);

        // Adds a new participant in a PhoneToPhone scenario
        HRESULT AddParticipant([in] BSTR pDestName,
                               [in] BSTR pDestAddress,
                               [in] BOOL bAddressEditable); 

        // Set the zone layout
        HRESULT SetZoneLayout( [in] CZoneStateArray *pArray,
                               [in] BOOL bRefreshControls);

        // Hook for the message loop (good for accelerators)
        HRESULT PreProcessMessage([in] LPMSG lpMsg);

        HRESULT LoadStringResource(
            [in] UINT nID,
            [in] int  nBufferMax,
            [out] LPWSTR pszText);  

        HRESULT ShowCallFromOptions();

        HRESULT ShowServiceProviderOptions();

        HRESULT StartT120Applet(RTC_T120_APPLET enApplet);
        
        // UI state
    [propget]
        HRESULT ControlState([out, retval] RTCAX_STATE *pVal);
    
    [propput] 
        HRESULT ControlState([in] RTCAX_STATE pVal);
    
        // Standalone mode
    [propput] 
        HRESULT Standalone([in] BOOL pVal);

    [propput]
        HRESULT Palette([in] HPALETTE hPalette);

    [propput]
        HRESULT BackgroundPalette([in] BOOL bBackgroundPalette);
        
        // Can add participant
    [propget]
        HRESULT CanAddParticipant([out, retval] BOOL * pfCan); 

        // Can add participant
    [propget]
        HRESULT CurrentCallScenario([out, retval] RTC_CALL_SCENARIO *pVal);

        // Listen for incoming sessions
    [propput]
        HRESULT ListenForIncomingSessions([in] RTC_LISTEN_MODE enListen);

    [propget]
        HRESULT ListenForIncomingSessions([out, retval] RTC_LISTEN_MODE * penListen); 

        // MediaPreferences
    [propget] 
        HRESULT MediaPreferences([out, retval] long *pVal);
    
    [propput] 
        HRESULT MediaPreferences([in] long pVal);

        // MediaCapabilities
    [propget]
        HRESULT MediaCapabilities([out, retval] long *pVal);

        // VideoPreview
    [propput]
        HRESULT VideoPreview([in] BOOL pVal);

    [propget]
        HRESULT VideoPreview([out, retval] BOOL * pVal);

        // AudioMuted
    [propget] 
        HRESULT AudioMuted(
        [in] RTC_AUDIO_DEVICE enDevice,
        [out, retval] BOOL *fpMuted);
    
    [propput] 
        HRESULT AudioMuted(
        [in] RTC_AUDIO_DEVICE enDevice,
        [in] BOOL pVal);

    
};

[
    object,
    local,
    uuid(93357902-3F99-4E18-97BD-D23BC2059CE6),
    helpstring("IRTCCtlNotify Interface"),
    pointer_default(unique)
]
interface IRTCCtlNotify : IUnknown {

    HRESULT OnControlStateChange(
        [in] RTCAX_STATE State,
        [in] UINT   StatusBarResID);
};

