//+---------------------------------------------------------------------------
//
//  Copyright 1997 Microsoft Corporation. All Rights Reserved.
//
//  Contents: IMsgrObject interface
// 
//----------------------------------------------------------------------------

#ifdef __MKTYPLIB__
#define VARIANT_BOOL boolean
#else  // __MKTYPLIB__
cpp_quote("//+-------------------------------------------------------------------------")
cpp_quote("//")
cpp_quote("//  Microsoft Windows")
cpp_quote("//  Copyright 1997 Microsoft Corporation. All Rights Reserved.")
cpp_quote("//")
cpp_quote("//  File: mdisp.h")
cpp_quote("//")
cpp_quote("//--------------------------------------------------------------------------")


import "objidl.idl";
import "oleidl.idl";
import "oaidl.idl";
import "basicim.idl";
import "lock.idl";
import "sessions.idl";

#endif // __MKTYPLIB__
#include "mdispid.h"

#define MSGR_S(e) (0x01000300 + (e))
#define MSGR_E(e) (0x81000300 + (e))
#define E_FAIL 0x80004005
#define S_OK 0

//////////////////////////////////////////////////////////////////////////////////
// GUID usage:
// {218CB450-20B6-11d2-8E17-0000F803A446}-{218CB45F-20B6-11d2-8E17-0000F803A446}

//--------------------------------------------------------------------------
// Type Library
[
	uuid(218CB45F-20B6-11d2-8E17-0000F803A446), // LIBID_Messenger
	version(1.0),
	helpstring("Messenger Type Library")
]
library Messenger
{
	importlib("stdole32.tlb");
    importlib("basicim.tlb");
	importlib("sessions.tlb");
	importlib("msgrua.tlb");
	interface IMsgrObject;
	interface IMsgrUser;
	interface IMsgrUsers;
	interface IMsgrIMSession;
	interface IMsgrIMSessions;
	interface IMessengerApp;
	interface IMessengerApp2;
	interface IMessengerApp3;
	interface IMessengerIMWindow;
	interface IMessengerIMWindows;
	interface IMsgrServices;
	interface IMsgrService;

	#define DISPID_VALUE      0
	#define DISPID_NEWENUM   -4

	typedef enum
	{
		MSTATE_UNKNOWN                         = 0x0000,
		
		MSTATE_OFFLINE                         = 0x0001,
		MSTATE_ONLINE                          = 0x0002,
		MSTATE_INVISIBLE                       = 0x0006,
		MSTATE_BUSY                            = 0x000A,
		MSTATE_BE_RIGHT_BACK                   = 0x000E,
		MSTATE_IDLE                            = 0x0012,
		MSTATE_AWAY                            = 0x0022,
		MSTATE_ON_THE_PHONE                    = 0x0032,
		MSTATE_OUT_TO_LUNCH                    = 0x0042,
		
		MSTATE_LOCAL_FINDING_SERVER            = 0x0100,
		MSTATE_LOCAL_CONNECTING_TO_SERVER      = 0x0200,
		MSTATE_LOCAL_SYNCHRONIZING_WITH_SERVER = 0x0300,
		MSTATE_LOCAL_DISCONNECTING_FROM_SERVER = 0x0400,
	}
		MSTATE;

	typedef enum
	{
		MPROMPT_YES_IF_NOT_ALLOWED_OR_BLOCKED  = 0,
		MPROMPT_NO_ADD_TO_ALLOW                = 1,
	}
		MPROMPT;

	typedef enum
	{
		MMSGPRIVACY_BLOCK_LIST_EXCLUDED        = 0,
		MMSGPRIVACY_ALLOW_LIST_ONLY            = 1,
	}
		MMSGPRIVACY;

	typedef enum
	{
		MURLTYPE_CHANGE_PASSWORD               = 0,
		MURLTYPE_CHANGE_INFO                   = 1,
		MURLTYPE_COMPOSE_EMAIL                 = 2,
		MURLTYPE_GO_TO_EMAIL_INBOX             = 3,
		MURLTYPE_GO_TO_EMAIL_FOLDERS           = 4,
		MURLTYPE_MOBILE_SIGNUP                 = 5,
		MURLTYPE_CHANGE_MOBILE_INFO			   = 6,
		MURLTYPE_CHANGE_PROFILE				   = 7,
		MURLTYPE_N2P_ACCOUNT				   = 8,
		MURLTYPE_N2P_ADD_FUND				   = 9
	}
		MURLTYPE;

	typedef enum
	{
		MLIST_CONTACT                          = 0,
		MLIST_ALLOW                            = 1,
		MLIST_BLOCK                            = 2,
		MLIST_REVERSE                          = 3,
	}
		MLIST;

	typedef enum
	{
		MMSGTYPE_NO_RESULT                     = 0,
		MMSGTYPE_ERRORS_ONLY                   = 1,
		MMSGTYPE_ALL_RESULTS                   = 2,
	}
		MMSGTYPE;

	typedef enum
	{
		MUPDATE_OPTIONAL                 = 0x00000001,
		MUPDATE_MANDATORY                = 0x00000002,
		MUPDATE_BRANDED                  = 0x00000004,
	}
		MUPDATE_FLAGS;

	typedef enum
	{
		MIF_NONE			= 0x00000000,
		MIF_REQUEST_LAUNCH  = 0x00000001,
		MIF_REQUEST_IP      = 0x00000004,
		MIF_PROVIDE_IP      = 0x00000008,
	}
		MINVITE_FLAGS;

	typedef enum
	{
		MPFLFIELD_COUNTRY                      = 0,
		MPFLFIELD_POSTALCODE                   = 1,
		MPFLFIELD_LANG_PREFERENCE              = 2,
		MPFLFIELD_GENDER                       = 3,
		MPFLFIELD_PREFERRED_EMAIL              = 4,
		MPFLFIELD_NICKNAME                     = 5,
		MPFLFIELD_ACCESSIBILITY                = 6,
		MPFLFIELD_WALLET                       = 7,
		MPFLFIELD_DIRECTORY                    = 8,
		MPFLFIELD_INETACCESS                   = 9,
	}
		MPFLFIELD;

	typedef enum
	{
		MSGR_E_CONNECT							= MSGR_E(0x0001),
		MSGR_E_INVALID_SERVER_NAME				= MSGR_E(0x0002),
		MSGR_E_INVALID_PASSWORD					= MSGR_E(0x0003),
		MSGR_E_ALREADY_LOGGED_ON				= MSGR_E(0x0004),
		MSGR_E_SERVER_VERSION					= MSGR_E(0x0005),
		MSGR_E_LOGON_TIMEOUT					= MSGR_E(0x0006),
		MSGR_E_LIST_FULL						= MSGR_E(0x0007),
		MSGR_E_AI_REJECT						= MSGR_E(0x0008),
		MSGR_E_AI_REJECT_NOT_INST				= MSGR_E(0x0009),
		MSGR_E_USER_NOT_FOUND					= MSGR_E(0x000A),
		MSGR_E_ALREADY_IN_LIST					= MSGR_E(0x000B),
		MSGR_E_DISCONNECTED						= MSGR_E(0x000C),
		MSGR_E_UNEXPECTED						= MSGR_E(0x000D),
		MSGR_E_SERVER_TOO_BUSY					= MSGR_E(0x000E),
		MSGR_E_INVALID_AUTH_PACKAGES			= MSGR_E(0x000F),
		MSGR_E_NEWER_CLIENT_AVAILABLE			= MSGR_E(0x0010),
		MSGR_E_AI_TIMEOUT						= MSGR_E(0x0011),
		MSGR_E_CANCEL							= MSGR_E(0x0012),
		MSGR_E_TOO_MANY_MATCHES					= MSGR_E(0x0013),
		MSGR_E_SERVER_UNAVAILABLE				= MSGR_E(0x0014),
		MSGR_E_LOGON_UI_ACTIVE					= MSGR_E(0x0015),
		MSGR_E_OPTION_UI_ACTIVE					= MSGR_E(0x0016),
		MSGR_E_CONTACT_UI_ACTIVE				= MSGR_E(0x0017),
		MSGR_E_PRIMARY_SERVICE_NOT_LOGGED_ON	= MSGR_E(0x0018),
		MSGR_E_LOGGED_ON						= MSGR_E(0x0019),
		MSGR_E_CONNECT_PROXY					= MSGR_E(0x001A),
		MSGR_E_PROXY_AUTH						= MSGR_E(0x001B),
		MSGR_E_PROXY_AUTH_TYPE					= MSGR_E(0x001C),
		MSGR_E_INVALID_PROXY_NAME				= MSGR_E(0x001D),
		MSGR_E_NOT_LOGGED_ON					= MSGR_E(0x001E),
		MSGR_E_NOT_PRIMARY_SERVICE				= MSGR_E(0x0020),
		MSGR_E_TOO_MANY_SESSIONS				= MSGR_E(0x0021),
		MSGR_E_TOO_MANY_MESSAGES				= MSGR_E(0x0022),
		MSGR_E_REMOTE_LOGIN						= MSGR_E(0x0023),
		MSGR_E_INVALID_FRIENDLY_NAME			= MSGR_E(0x0024),
		MSGR_E_SESSION_FULL						= MSGR_E(0x0025),
		MSGR_E_NOT_ALLOWING_NEW_USERS			= MSGR_E(0x0026),
		MSGR_E_INVALID_DOMAIN					= MSGR_E(0x0027),
		MSGR_E_TCP_ERROR						= MSGR_E(0x0028),
		MSGR_E_SESSION_TIMEOUT					= MSGR_E(0x0029),
		MSGR_E_MULTIPOINT_SESSION_BEGIN_TIMEOUT = MSGR_E(0x002a),
		MSGR_E_MULTIPOINT_SESSION_END_TIMEOUT	= MSGR_E(0x002b),
		MSGR_E_REVERSE_LIST_FULL				= MSGR_E(0x002c),
		MSGR_E_SERVER_ERROR						= MSGR_E(0x002d),
		MSGR_E_SYSTEM_CONFIG					= MSGR_E(0x002e),
		MSGR_E_NO_DIRECTORY						= MSGR_E(0x002f), 
		MSGR_E_RETRY_SET						= MSGR_E(0x0030), 
		MSGR_E_CHILD_WITHOUT_CONSENT			= MSGR_E(0x0031), 
		MSGR_E_USER_CANCELLED					= MSGR_E(0x0032), 
		MSGR_E_CANCEL_BEFORE_CONNECT			= MSGR_E(0x0033),
		MSGR_E_VOICE_IM_TIMEOUT					= MSGR_E(0x0034),
		MSGR_E_NOT_ACCEPTING_PAGES				= MSGR_E(0x0035),
		MSGR_E_EMAIL_PASSPORT_NOT_VALIDATED		= MSGR_E(0x0036),
		MSGR_E_AUDIO_UI_ACTIVE					= MSGR_E(0x0037),
		MSGR_E_NO_HARDWARE						= MSGR_E(0x0038),
		MSGR_E_PAGING_UNAVAILABLE				= MSGR_E(0x0039),
		MSGR_E_PHONE_INVALID_NUMBER				= MSGR_E(0x003a),
		MSGR_E_PHONE_NO_FUNDS					= MSGR_E(0x003b),
		MSGR_E_VOICE_NO_ANSWER					= MSGR_E(0x003c),
		MSGR_E_VOICE_WAVEIN_DEVICE				= MSGR_E(0x003d),
		MSGR_E_FT_TIMEOUT						= MSGR_E(0x003e),
		MSGR_E_MESSAGE_TOO_LONG					= MSGR_E(0x003f),
		MSGR_E_VOICE_FIREWALL					= MSGR_E(0x0040),
		MSGR_E_VOICE_NETCONN					= MSGR_E(0x0041),
		MSGR_E_PHONE_CIRCUITS_BUSY				= MSGR_E(0x0042),
		MSGR_E_SERVER_PROTOCOL					= MSGR_E(0x0043),
		MSGR_E_UNAVAILABLE_VIA_HTTP				= MSGR_E(0x0044),
		MSGR_E_PHONE_INVALID_PIN				= MSGR_E(0x0045),
		MSGR_E_PHONE_PINPROCEED_TIMEOUT			= MSGR_E(0x0046),
		MSGR_E_SERVER_SHUTDOWN					= MSGR_E(0x0047),
		MSGR_E_CLIENT_DISALLOWED				= MSGR_E(0x0048),
		MSGR_E_PHONE_CALL_NOT_COMPLETE			= MSGR_E(0x0049),
	
		MSGR_S_ALREADY_IN_THE_MODE				= MSGR_S(0x0001),
		MSGR_S_TRANSFER_SEND_BEGUN				= MSGR_S(0x0002),
		MSGR_S_TRANSFER_SEND_FINISHED			= MSGR_S(0x0003),
		MSGR_S_TRANSFER_RECEIVE_BEGUN			= MSGR_S(0x0004),
		MSGR_S_TRANSFER_RECEIVE_FINISHED		= MSGR_S(0x0005),
												
		MSGR_E_FAIL								= E_FAIL,
		MSGR_S_OK								= S_OK,
	}
		MSGRConstants;

	typedef enum
	{
		SSTATE_DISCONNECTED                    = 0,
		SSTATE_CONNECTING                      = 1,
		SSTATE_CONNECTED                       = 2,
		SSTATE_DISCONNECTING                   = 3,
		SSTATE_ERROR                           = 4,	
	}
		SSTATE;

	typedef enum
	{
		MFOLDER_INBOX                          = 0,
		MFOLDER_ALL_OTHER_FOLDERS              = 1,	
	}
		MFOLDER;

// If you modify this enumeration, be sure to update loTable in blobject.cpp!!
	typedef enum
	{
		[helpstring("Proxy State")]            MLOPT_PROXY_STATE        = 0,
		[helpstring("Proxy Type")]             MLOPT_PROXY_TYPE         = 1,
		[helpstring("SOCKS4 Proxy Server")]    MLOPT_SOCKS4_SERVER      = 2,
		[helpstring("SOCKS5 Proxy Server")]    MLOPT_SOCKS5_SERVER      = 3,
		[helpstring("HTTPS Proxy Server")]	   MLOPT_HTTPS_SERVER		= 4,
		[helpstring("SOCKS4 Port")]			   MLOPT_SOCKS4_PORT		= 5,
		[helpstring("SOCKS5 Port")]			   MLOPT_SOCKS5_PORT		= 6,
		[helpstring("HTTPS Port")]			   MLOPT_HTTPS_PORT			= 7,
		[helpstring("SOCKS5 Username")]        MLOPT_SOCKS5_USERNAME    = 8,
		[helpstring("SOCKS5 Password")]        MLOPT_SOCKS5_PASSWORD    = 9,
		[helpstring("Server Name")]            MLOPT_SERVER_NAME        = 10,
		[helpstring("Enable Idle Detect")]     MLOPT_ENABLE_IDLE_DETECT = 11,
		[helpstring("Idle Threshold")]         MLOPT_IDLE_THRESHOLD     = 12,
		[helpstring("Idle Detectable")]        MLOPT_IDLE_DETECTABLE    = 13,
		[helpstring("ScreenSaver Detectable")] MLOPT_SS_DETECTABLE      = 14,
		[helpstring("HTTP Proxy Server")]      MLOPT_HTTP_SERVER      	= 15,
		[helpstring("HTTP Proxy Port")]        MLOPT_HTTP_PORT      	= 16,		
	}
		MLOCALOPTION;


	//If you change this, then change the g_szPropertyString[] and g_uUserPropPropertyStringID[]
	//arrays as well. You'll also need to check that the equivalents in basicim.idl are still
	//OK.
	typedef  enum
	{
		MUSERPROP_INVALID_PROPERTY = -1,
		MUSERPROP_HOME_PHONE_NUMBER = 0,
		MUSERPROP_WORK_PHONE_NUMBER = 1,
		MUSERPROP_MOBILE_PHONE_NUMBER = 2,
		MUSERPROP_PAGES_ALLOWED = 3,

		MUSERPROP_NUMBER_OF_PUBLIC_PROPERTIES = 4,

		MUSERPROP_PAGES_ENABLED = 4,
		MUSERPROP_NUMBER_OF_PROPERTIES,
	} 
		MUSERPROPERTY;

	typedef enum
	{
		MLOPT_MAX_SERVICE_STRING = 255,
		MLOPT_MAX_PROXY_STRING = 255,
		MLOPT_MAX_PORT_NUMBER  = 65535,
		MLOPT_MAX_IDLE_THRESHOLD  = 999,
	}
		MLOCALOPTION_LIMITS;

	typedef enum
	{
		[helpstring("Proxy Type: No proxy")]   MPROXYTYPE_NO_PROXY      = 0,
		[helpstring("Proxy Type: SOCKS 4")]    MPROXYTYPE_SOCKS4        = 1,
		[helpstring("Proxy Type: SOCKS 5")]    MPROXYTYPE_SOCKS5        = 2,
		[helpstring("Proxy Type: HTTPS")]      MPROXYTYPE_HTTPS         = 3,
		[helpstring("Proxy Type: HTTP")]       MPROXYTYPE_HTTP          = 4,
	}
		MPROXYTYPE;

    // If you update this enumeration, be sure to fixup COptionsConnectionDlg::SetConnectionText
    typedef enum
    {
      MCONNECTIONTYPE_DISCONNECTED  = 0,
      MCONNECTIONTYPE_DIRECT        = 1,
      MCONNECTIONTYPE_BROWSER_PROXY = 2,
      MCONNECTIONTYPE_HTTP_PROXY    = 3,
      MCONNECTIONTYPE_SOCKS_PROXY   = 4,
    }
    MCONNECTIONTYPE;

	typedef enum
	{
		MOPTDLG_GENERAL_PAGE                   = 0,
		MOPTDLG_PRIVACY_PAGE                   = 1,
		MOPTDLG_EXCHANGE_PAGE                  = 2,
		MOPTDLG_ACCOUNTS_PAGE                  = 3,
		MOPTDLG_CONNECTION_PAGE                = 4,
		MOPTDLG_PREFERENCES_PAGE               = 5,
		MOPTDLG_SERVICES_PAGE                  = 6,
		MOPTDLG_PHONE_PAGE					   = 7,
	}
		MOPTDLGPAGE;

	typedef enum
	{
		MSF_PRIMARY		= 0x00000001,			// capable of being primary
		MSF_APP_INVITE	= 0x00000002,			// supports app invites
		MSF_MULTI_IM	= 0x00000004,			// supports multiway IM sessions
		MSF_BLOCKING	= 0x00000008,			// unused
		MSF_UNAME_IN_EMAIL_FMT	= 0x00000010,	// usernames look like e-mail names
		MSF_LOCAL_LISTS = 0x00000020,			// lists are kept locally, not on server
		MSF_FIND_USER	= 0x00000040,			// supports FindUser
		MSF_INVITE_MAIL = 0x00000080,			// can send invitation mail
		MSF_INTERNET	= 0x00000100,			// connects to server thru internet
		MSF_NO_ALLOW_LIST  = 0x00000200			// no allow list supported
	}
		MSERVICE_FLAGS;

	typedef enum
	{
		MFT_SAVE_PASSWORD= 0x00000000,
		MFT_DONT_SAVE_PASSWORD= 0x00000001,
		MFT_OVERWRITE_EXISTING= 0x00000002,
	}
		MFIRSTTIME_FLAGS;

	typedef enum
	{
		MSS_LOGGED_ON     = 0,
		MSS_NOT_LOGGED_ON = 1,
		MSS_LOGGING_ON    = 2,
		MSS_LOGGING_OFF   = 3
	}
		MSVCSTATUS;

	typedef enum
	{
		MFTF_SENDING          = 0x00000004,
		MFTF_RECEIVING        = 0x00000008,
		MFTF_CONNECTING       = 0x00000010,
		MFTF_CONNECTED        = 0x00000020,
		MFTF_DISCONNECTED     = 0x00000040,
	}
		MFILETRANSFER_FLAGS;

	//--------------------------------------------------------------------------
	// IMsgrObject Interface
	[
		uuid(218CB451-20B6-11d2-8E17-0000F803A446), // IID_IMsgrObject
		helpstring("Messenger Object Interface"),
		helpcontext(0x0000),
		dual,
		oleautomation
	]
	interface IMsgrObject : IDispatch
	{
		[id(100), helpstring("Creates a user object."), helpcontext(0x0000)]
		HRESULT CreateUser(
			[in] BSTR bstrLogonName,
			[in] IMsgrService *pService,
			[out, retval] IMsgrUser** ppUser);
			
		[id(104), helpstring("Initiates a logon to a service."), helpcontext(0x0000)]
		HRESULT Logon(
			[in] BSTR bstrUser,
			[in] BSTR bstrPassword,
			[in] IMsgrService* pService);
			
		[id(105), helpstring("Initiates a logoff from all services."), helpcontext(0x0000)]
		HRESULT Logoff();

			
		[propget, helpstring("Returns a list."), helpcontext(0x0000)]
		HRESULT List(
			[in] MLIST mList,
			[out, retval] IMsgrUsers** ppUsers);

		[propget, helpstring("Logon name."), helpcontext(0x0000)]
		HRESULT LocalLogonName(
			[out, retval] BSTR* pbstrName);

		[propget, helpstring("Friendly name."), helpcontext(0x0000)]
		HRESULT LocalFriendlyName(
			[out, retval] BSTR* pbstrName);

		[propput, helpstring("Local state."), helpcontext(0x0000)]
		HRESULT LocalState(
			[in] MSTATE mState);

		[propget]
		HRESULT LocalState(
			[out, retval] MSTATE* pmState);

		[propput, helpstring("Message privacy setting."), helpcontext(0x0000)]
		HRESULT MessagePrivacy(
			[in] MMSGPRIVACY mmpSetting);

		[propget]
		HRESULT MessagePrivacy(
			[out, retval] MMSGPRIVACY* pmmpSetting);

		[propput, helpstring("Prompt setting."), helpcontext(0x0000)]
		HRESULT Prompt(
			[in] MPROMPT mpSetting);

		[propget]
		HRESULT Prompt(
			[out, retval] MPROMPT* pmpSetting);

		[id(108), helpstring("Invites another user to use an application."), helpcontext(0x0000)]
		HRESULT SendAppInvite(
			[in] IMsgrUser* pUser,
			[in] LONG lCookie,
			[in] BSTR bstrAppGUID,
			[in] BSTR bstrAppName,
			[in] BSTR bstrAppURL,
			[in] LONG lInviteType,
			[in] MMSGTYPE mmtType,
			[out, retval] LONG* plCookie);
			
		[id(109), helpstring("Accepts an invitation to use an application."), helpcontext(0x0000)]
		HRESULT SendAppInviteAccept(
			[in] IMsgrUser* pUser,
			[in] LONG lCookie,
			[in] LONG lInviteType,
			[in] MMSGTYPE mmtType,
			[out, retval] LONG* plCookie);
			
		[id(110), helpstring("Cancels an invitation to use an application."), helpcontext(0x0000)]
		HRESULT SendAppInviteCancel(
			[in] IMsgrUser* pUser,
			[in] LONG lCookie,
			[in] LONG hrReason,
			[in] MMSGTYPE mmtType,
			[out, retval] LONG* plCookie);

		[propput, helpstring("Local options."), helpcontext(0x0000)]
		HRESULT LocalOption(
			[in] MLOCALOPTION option,
			[in] VARIANT vSetting);

		[propget]
		HRESULT LocalOption(
			[in] MLOCALOPTION option,
			[out, retval] VARIANT* pvSetting);

		[id(111), helpstring("Finds a user."), helpcontext(0x0000)]
		HRESULT FindUser(
			[in] BSTR bstrFirstName,
			[in] BSTR bstrLastName,
			[in] BSTR bstrCity,
			[in] BSTR bstrState,
			[in] BSTR bstrCountry,
			[out, retval] LONG* plCookie);

		[id(112), helpstring("Sends invitation mail."), helpcontext(0x0000)]
		HRESULT SendInviteMail(
			[in] BSTR bstrEmailAddress,
			[in] LONG lFindCookie,
			[in] LONG lFindIndex,
			[in] LONG lLCID,
			[out, retval] LONG* plCookie);

		[id(113), helpstring("Requests the post script for this URL."), helpcontext(0x0000)]
		HRESULT RequestURLPost(
			[in] MURLTYPE muType,
			[in] BSTR bstrAdditionalInfo,
			[out, retval] LONG* plCookie);
		
		[propget, helpstring("Returns a list of IM sessions"), helpcontext(0x0000)]
		HRESULT IMSessions(
			[out, retval] IMsgrIMSessions** ppIMSessions);

		[id(114), helpstring("Creates a new IM session."), helpcontext(0x0000)]
		HRESULT CreateIMSession(
			[in] VARIANT vUser,
			[out, retval] IMsgrIMSession** ppIMSession);

		[id(115), helpstring("Accepts a session request."), helpcontext(0x0000)]
		HRESULT	SessionRequestAccept(
			[in] IMsgrIMSession* pIMsgrIMSession, 
			[in] long hrReason);

		[id(116), helpstring("Cancels a session request."), helpcontext(0x0000)]
		HRESULT	SessionRequestCancel(
			[in] IMsgrIMSession* pIMsgrIMSession, 
			[in] long hrReason);

		[propget, helpstring("Returns a list of services"), helpcontext(0x0000)]
		HRESULT Services(
			[out, retval] IMsgrServices** ppServices);

		[propget, helpstring("Returns the count of unread email"), helpcontext(0x0000)]
		HRESULT UnreadEmail(
			[in] MFOLDER mFolder,
			[out, retval] long* pcUnreadEmail);

	}

	//--------------------------------------------------------------------------
	// IMsgrObject2 Interface
	[
		uuid(218CB455-20B6-11d2-8E17-0000F803A446), // IID_IMsgrObject2
		helpstring("Messenger Object Interface 2"),
		helpcontext(0x0000),
		dual,
		oleautomation
	]
	interface IMsgrObject2 : IMsgrObject
	{
		[id(117), helpstring("Requests to send a file to another user."), helpcontext(0x0000)]
		HRESULT SendFileTransferInvite(
			[in] IMsgrUser* pUser,
			[in] LONG lCookie,
			[in] BSTR bstrFilePath,
			[in] MMSGTYPE mmtType,
			[out, retval] LONG* plCookie);
			
		[id(118), helpstring("Accepts a request to send a file."), helpcontext(0x0000)]
		HRESULT SendFileTransferInviteAccept(
			[in] IMsgrUser* pUser,
			[in] LONG lCookie,
			[in] BSTR bstrFilePath,
			[in] MMSGTYPE mmtType,
			[out, retval] LONG* plCookie);
			
		[id(119), helpstring("Cancels a request to send a file."), helpcontext(0x0000)]
		HRESULT SendFileTransferInviteCancel(
			[in] IMsgrUser* pUser,
			[in] LONG lCookie,
			[in] LONG hrReason,
			[in] MMSGTYPE mmtType,
			[out, retval] LONG* plCookie);

		[id(120), helpstring("Cancels file transfer in progress."), helpcontext(0x0000)]
		HRESULT CancelFileTransfer(
			[in] IMsgrUser* pUser,
			[in] LONG lCookie,
			[in] LONG hrReason,
			[in] MMSGTYPE mmtType,
			[out, retval] LONG* plCookie);

		[id(121), helpstring("Retrieve status of a file transfer in progress."), helpcontext(0x0000)]
		HRESULT FileTransferStatus(
			[in] LONG lCookie,
			[in] IMsgrUser* pUser,
			[out] long* plStatus,
			[out] BSTR* pbstrFilePath,
			[out] long* plTotalBytes,
			[out] long* plBytesTransferred);

		[propput, helpstring("Generic API to get at some specific property of the user."), helpcontext(0x0000)]
		HRESULT LocalProperty(
			[in] MUSERPROPERTY ePropType,
			[in] VARIANT vPropVal);

		[propget]
		HRESULT LocalProperty(
			[in] MUSERPROPERTY ePropType,
			[out, retval] VARIANT *pvPropVal);

		[id(125), helpstring("Send a page to a user."), helpcontext(0x0000)]
		HRESULT SendPage(
			[in] IMsgrUser* pUser,
			[in] BSTR bstrMessage,
			[in] MUSERPROPERTY ePhoneType,
			[out, retval] LONG* plCookie);

		[id(126), helpstring("Sends custom invitation mail."), helpcontext(0x0000)]
		HRESULT SendCustomInviteMail(
			[in] BSTR bstrEmailAddress,
			[in] LONG lFindCookie,
			[in] LONG lFindIndex,
			[in] LONG lLCID,
			[in] BSTR bstrCustomText,
			[out, retval] LONG* plCookie);
	}


	//--------------------------------------------------------------------------
	// DMsgrObjectEvents Interface
	[
		uuid(218CB452-20B6-11d2-8E17-0000F803A446), // DIID_DMsgrObjectEvents
		helpstring("Messenger Events Interface"),
		helpcontext(0x0000),
		hidden
	]
	dispinterface DMsgrObjectEvents
	{
		properties:
		methods:
		[id(DISPID_ONLOGONRESULT), helpstring("Logon attempt complete for this service."), helpcontext(0x0000)]
		void OnLogonResult(
			[in] long hr,
			[in] IMsgrService* pService);
			
		[id(DISPID_ONLOGOFF), helpstring("Logoff complete for all services."), helpcontext(0x0000)]
		void OnLogoff();

		[id(DISPID_ONSERVICELOGOFF), helpstring("Logoff complete for this service."), helpcontext(0x0000)]
		void OnServiceLogoff(
			[in] long hr,
			[in] IMsgrService* pService);

		[id(DISPID_ONLISTADDRESULT), helpstring("Result from list add request."), helpcontext(0x0000)]
		void OnListAddResult(
			[in] long hr,
			[in] MLIST mList,
			[in] IMsgrUser* pUser);
			
		[id(DISPID_ONLISTREMOVERESULT), helpstring("Result from list remove request."), helpcontext(0x0000)]
		void OnListRemoveResult(
			[in] long hr,
			[in] MLIST mList,
			[in] IMsgrUser* pUser);
			
		[id(DISPID_ONMESSAGEPRIVACYCHANGERESULT), helpstring("Result from message privacy setting change request."), helpcontext(0x0000)]
		void OnMessagePrivacyChangeResult(
			[in] long hr,
			[in] MMSGPRIVACY mmpSetting,
			[in] IMsgrService *pService);
			
		[id(DISPID_ONPROMPTCHANGERESULT), helpstring("Result from prompt setting change request."), helpcontext(0x0000)]
		void OnPromptChangeResult(
			[in] long hr,
			[in] MPROMPT mpSetting,
			[in] IMsgrService *pService);
			
		[id(DISPID_ONUSERFRIENDLYNAMECHANGERESULT), helpstring("Result from name change request."), helpcontext(0x0000)]
		void OnUserFriendlyNameChangeResult(
			[in] long hr,
			[in] IMsgrUser* pUser,
			[in] BSTR bstrPrevFriendlyName);

		[id(DISPID_ONUSERSTATECHANGED), helpstring("User state changed."), helpcontext(0x0000)]
		void OnUserStateChanged(
			[in] IMsgrUser* pUser,
			[in] MSTATE mPrevState,
			[in, out] VARIANT_BOOL* pfEnableDefault);

		[id(DISPID_ONTEXTRECEIVED), helpstring("Text message received."), helpcontext(0x0000)]
		void OnTextReceived(
			[in] IMsgrIMSession* pIMSession,
			[in] IMsgrUser* pSourceUser,
			[in] BSTR bstrMsgHeader,
			[in] BSTR bstrMsgText,
			[in, out] VARIANT_BOOL* pfEnableDefault);

		[id(DISPID_ONSPMESSAGERECEIVED), helpstring("Message received from an SP."), helpcontext(0x0000)]
		void OnSPMessageReceived(
			[in] BSTR bstrMsgHeader,
			[in] BSTR bstrMsgText,
			[in] IMsgrService *pService);

		[id(DISPID_ONLOCALFRIENDLYNAMECHANGERESULT), helpstring("Local friendly name changed."), helpcontext(0x0000)]
		void OnLocalFriendlyNameChangeResult(
			[in] long hr,
			[in] IMsgrService* pService,
			[in] BSTR bstrPrevFriendlyName);

		[id(DISPID_ONLOCALSTATECHANGERESULT), helpstring("Result from local state request."), helpcontext(0x0000)]
		void OnLocalStateChangeResult(
			[in] long hr,
			[in] MSTATE mLocalState,
			[in] IMsgrService *pService);

		[id(DISPID_ONAPPINVITERECEIVED), helpstring("Application invitation received."), helpcontext(0x0000)]
		void OnAppInviteReceived(
			[in] IMsgrUser* pUser,
			[in] long lCookie,
			[in] BSTR bstrAppGUID,
			[in] BSTR bstrAppName,
			[in] BSTR bstrAppURL,
			[in] LONG lInviteType,
			[in, out] VARIANT_BOOL* pfEnableDefault);
			
		[id(DISPID_ONAPPINVITEACCEPTED), helpstring("Application invitation accepted."), helpcontext(0x0000)]
		void OnAppInviteAccepted(
			[in] IMsgrUser* pUser,
			[in] long lCookie,
			[in] BSTR bstrIPAddress,
			[in] LONG lInviteType,
			[in, out] VARIANT_BOOL* pfEnableDefault);
						
		[id(DISPID_ONAPPINVITECANCELLED), helpstring("Application invitation cancelled."), helpcontext(0x0000)]
		void OnAppInviteCancelled(
			[in] IMsgrUser* pUser,
			[in] long lCookie,
			[in] long hrReason,
			[in, out] VARIANT_BOOL* pfEnableDefault);

		[id(DISPID_ONSENDRESULT), helpstring("Result from send request."), helpcontext(0x0000)]
		void OnSendResult(
			[in] long hr,
			[in] long lCookie);

		[id(DISPID_ONNEWERCLIENTAVAILABLE), helpstring("Newer client is available."), helpcontext(0x0000)]
		void OnNewerClientAvailable(
			[in] BSTR bstrDownloadUrl,
			[in] BSTR bstrFallbackUrl,
			[in] long lUpdateFlags);

		[id(DISPID_ONFINDRESULT), helpstring("Result from find request."), helpcontext(0x0000)]
		void OnFindResult(
			[in] long hr,
			[in] long lCookie,
			[in] long lFindIndex,
			[in] long lTotalResults,
			[in] BSTR bstrEmailAddress,
			[in] BSTR bstrFirstName,
			[in] BSTR bstrLastName,
			[in] BSTR bstrCity,
			[in] BSTR bstrState,
			[in] BSTR bstrCountry);

		[id(DISPID_ONINVITEMAILRESULT), helpstring("Result from SendInviteMail or SendCustomInviteMail request."), helpcontext(0x0000)]
		void OnInviteMailResult(
			[in] long hr,
			[in] long lCookie);

		[id(DISPID_ONREQUESTURLRESULT), helpstring("Result from URL request."), helpcontext(0x0000)]
		void OnRequestURLResult(
			[in] long hr,
			[in] long lCookie,
			[in] MURLTYPE muType,
			[in] BSTR bstrURL);

		[id(DISPID_ONSESSIONSTATECHANGE), helpstring("Session state changed."), helpcontext(0x0000)]
		void OnSessionStateChange(
			[in] IMsgrIMsession* pIMSession, 
			[in] SSTATE sPrevState);

		[id(DISPID_ONUSERJOIN), helpstring("User joined a session."), helpcontext(0x0000)]
		void OnUserJoin(
			[in] IMsgrUser* pIMsgrUser,
			[in] IMsgrIMSession* pIMSession);

		[id(DISPID_ONUSERLEAVE), helpstring("User left a session."), helpcontext(0x0000)]
		void OnUserLeave(
			[in] IMsgrUser* pIMsgrUser,
			[in] IMsgrIMSession* pIMSession);

		[id(DISPID_ONUSERDROPPED), helpstring("User dropped from a session."), helpcontext(0x0000)]
		void OnUserDropped(
			[in] long hr,
			[in] IMsgrUser* pIMsgrUser,
			[in] IMsgrIMSession* pIMSession);

		[id(DISPID_ONNEWSESSIONREQUEST), helpstring("Request for a new session."), helpcontext(0x0000)]
		void OnNewSessionRequest(
			[in] IMsgrUser* pRequestUser, 
			[in] IMsgrIMSession* pIMSession,
			[in, out] VARIANT_BOOL* pfEnableDefault);	

		[id(DISPID_ONINVITEUSER), helpstring("Invite user result."), helpcontext(0x0000)]
		void OnInviteUser(
			[in] IMsgrUser* pIMsgrUser,
			[in] IMsgrIMSession* pIMSession,
			[in] long hr);	

		[id(DISPID_ONPRIMARYSERVICECHANGED), helpstring("Primary service has been changed."), helpcontext(0x0000)]
		void OnPrimaryServiceChanged(
			[in] IMsgrService* pService);	

		[id(DISPID_ONAPPSHUTDOWN), helpstring("Messenger is shutting down."), helpcontext(0x0000)]
		void OnAppShutdown();	

		[id(DISPID_ONUNREADEMAILCHANGED), helpstring("Unread email count has changed."), helpcontext(0x0000)]
		void OnUnreadEmailChanged(
			[in] MFOLDER mFolder,			
			[in] long cUnreadEmail,
			[in, out] VARIANT_BOOL* pfEnableDefault);

		[id(DISPID_ONREQUESTURLPOSTRESULT), helpstring("Result from post URL request."), helpcontext(0x0000)]
		void OnRequestURLPostResult(
			[in] long hr,
			[in] long lCookie,
			[in] MURLTYPE muType,
			[in] BSTR bstrURLPost);

		[id(DISPID_ONTRUSTCHANGED), helpstring("The trust of the site has changed."), helpcontext(0x0000)]
		void OnTrustChanged();

		[id(DISPID_ONFILETRANSFERINVITERECEIVED), helpstring("File transfer invitation received."), helpcontext(0x0000)]
		void OnFileTransferInviteReceived(
			[in] IMsgrUser* pUser,
			[in] long lCookie,
			[in] BSTR bstrFileName,
			[in] long lFileSize,
			[in, out] VARIANT_BOOL* pfEnableDefault);
			
		[id(DISPID_ONFILETRANSFERINVITEACCEPTED), helpstring("File transfer invitation accepted; transfer beginning."), helpcontext(0x0000)]
		void OnFileTransferInviteAccepted(
			[in] IMsgrUser* pUser,
			[in] long lCookie,
			[in, out] VARIANT_BOOL* pfEnableDefault);
						
		[id(DISPID_ONFILETRANSFERINVITECANCELLED), helpstring("File transfer invitation cancelled."), helpcontext(0x0000)]
		void OnFileTransferInviteCancelled(
			[in] IMsgrUser* pUser,
			[in] long lCookie,
			[in] long hrReason,
			[in, out] VARIANT_BOOL* pfEnableDefault);

		[id(DISPID_ONFILETRANSFERCANCELLED), helpstring("File transfer invitation cancelled."), helpcontext(0x0000)]
		void OnFileTransferCancelled(
			[in] IMsgrUser* pUser,
			[in] long lCookie,
			[in] long hrReason,
			[in, out] VARIANT_BOOL* pfEnableDefault);

		[id(DISPID_ONFILETRANSFERSTATUSCHANGE), helpstring("File transfer invitation status change."), helpcontext(0x0000)]
		void OnFileTransferStatusChange(
			[in] IMsgrUser* pUser,
			[in] long lCookie,
			[in] long lStatus,
			[in] long hr,
			[in, out] VARIANT_BOOL* pfEnableDefault);

		[id(DISPID_ONLOCALPROPERTYCHANGERESULT), helpstring("Result from property change request."), helpcontext(0x0000)]
		void OnLocalPropertyChangeResult(
			[in] long hr,
			[in] MUSERPROPERTY ePropType,
			[in] VARIANT vPropVal,
			[in] IMsgrService* pService);
			
		[id(DISPID_ONBUDDYPROPERTYCHANGERESULT), helpstring("Result from buddy property change notification."), helpcontext(0x0000)]
		void OnBuddyPropertyChangeResult(
			[in] long hr,
			[in] IMsgrUser* pUser,
			[in] MUSERPROPERTY ePropType,
			[in] VARIANT vPropVal,
			[in] IMsgrService* pService);
			
		[id(DISPID_ONNOTIFICATIONRECEIVED), helpstring("Notification received from an SP."), helpcontext(0x0000)]
		void OnNotificationReceived(
			[in] BSTR bstrNotification,
			[in] IMsgrService *pService);

		[id(DISPID_ONPAGERECEIVED), helpstring("Page received from an SP."), helpcontext(0x0000)]
		void OnPageReceived(
			[in] BSTR bstrPage,
			[in] IMsgrService *pService);       
			
		[id(DISPID_ONLOCKCHALLENGE), helpstring("Challenge from server received."), helpcontext(0x0000)]
		void OnLockChallenge(
			[in] BSTR bstrChallenge,
			[in] long lCookie);

		[id(DISPID_ONLOCKRESULT), helpstring("Result from server lock and key service."), helpcontext(0x0000)]
		void OnLockResult(
			[in] VARIANT_BOOL fSucceed,
			[in] long lCookie);

		[id(DISPID_ONLOCKENABLE), helpstring("Enable/disable lock and key."), helpcontext(0x0000)]
		void OnLockEnable(
			[in] VARIANT_BOOL fEnable);
	}
	
	//--------------------------------------------------------------------------
	// DMsgrSPEvents Interface
	[
		uuid(2B2F1E9E-B01D-47e9-BD6A-EF6D63DE7170), // DIID_DMsgrSPEvents
		helpstring("Messenger Events Interface"),
		helpcontext(0x0000),
		hidden
	]
	dispinterface DMsgrSPEvents
	{
		properties:
		methods:
		[id(DISPID_ONLOGONRESULT), helpstring("Logon attempt complete for this service."), helpcontext(0x0000)]
		void OnLogonResult(
			[in] long hr,
			[in] IMsgrService* pService);
			
		[id(DISPID_ONSERVICELOGOFF), helpstring("Logoff complete for this service."), helpcontext(0x0000)]
		void OnServiceLogoff(
			[in] long hr,
			[in] IMsgrService* pService);

		[id(DISPID_ONLISTADDRESULT), helpstring("Result from list add request."), helpcontext(0x0000)]
		void OnListAddResult(
			[in] long hr,
			[in] MLIST mList,
			[in] IMsgrUser* pUser);
			
		[id(DISPID_ONLISTREMOVERESULT), helpstring("Result from list remove request."), helpcontext(0x0000)]
		void OnListRemoveResult(
			[in] long hr,
			[in] MLIST mList,
			[in] IMsgrUser* pUser);
			
		[id(DISPID_ONMESSAGEPRIVACYCHANGERESULT), helpstring("Result from message privacy setting change request."), helpcontext(0x0000)]
		void OnMessagePrivacyChangeResult(
			[in] long hr,
			[in] MMSGPRIVACY mmpSetting,
			[in] IMsgrService *pService);
			
		[id(DISPID_ONPROMPTCHANGERESULT), helpstring("Result from prompt setting change request."), helpcontext(0x0000)]
		void OnPromptChangeResult(
			[in] long hr,
			[in] MPROMPT mpSetting,
			[in] IMsgrService *pService);
			
		[id(DISPID_ONUSERFRIENDLYNAMECHANGERESULT), helpstring("Result from name change request."), helpcontext(0x0000)]
		void OnUserFriendlyNameChangeResult(
			[in] long hr,
			[in] IMsgrUser* pUser,
			[in] BSTR bstrPrevFriendlyName);

		[id(DISPID_ONUSERSTATECHANGED), helpstring("User state changed."), helpcontext(0x0000)]
		void OnUserStateChanged(
			[in] IMsgrUser* pUser,
			[in] MSTATE mPrevState,
			[in, out] VARIANT_BOOL* pfEnableDefault);

		[id(DISPID_ONTEXTRECEIVED), helpstring("Text message received."), helpcontext(0x0000)]
		void OnTextReceived(
			[in] IMsgrIMSession* pIMSession,
			[in] IMsgrUser* pSourceUser,
			[in] BSTR bstrMsgHeader,
			[in] BSTR bstrMsgText,
			[in, out] VARIANT_BOOL* pfEnableDefault);

		[id(DISPID_ONSPMESSAGERECEIVED), helpstring("Message received from an SP."), helpcontext(0x0000)]
		void OnSPMessageReceived(
			[in] BSTR bstrMsgHeader,
			[in] BSTR bstrMsgText,
			[in] IMsgrService *pService);

		[id(DISPID_ONLOCALFRIENDLYNAMECHANGERESULT), helpstring("Local friendly name changed."), helpcontext(0x0000)]
		void OnLocalFriendlyNameChangeResult(
			[in] long hr,
			[in] IMsgrService* pService,
			[in] BSTR bstrPrevFriendlyName);

		[id(DISPID_ONLOCALSTATECHANGERESULT), helpstring("Result from local state request."), helpcontext(0x0000)]
		void OnLocalStateChangeResult(
			[in] long hr,
			[in] MSTATE mLocalState,
			[in] IMsgrService *pService);

		[id(DISPID_ONSENDRESULT), helpstring("Result from send request."), helpcontext(0x0000)]
		void OnSendResult(
			[in] long hr,
			[in] long lCookie);

		[id(DISPID_ONNEWERCLIENTAVAILABLE), helpstring("Newer client is available."), helpcontext(0x0000)]
		void OnNewerClientAvailable(
			[in] BSTR bstrDownloadUrl,
			[in] BSTR bstrFallbackUrl,
			[in] long lUpdateFlags);

		[id(DISPID_ONFINDRESULT), helpstring("Result from find request."), helpcontext(0x0000)]
		void OnFindResult(
			[in] long hr,
			[in] long lCookie,
			[in] long lFindIndex,
			[in] long lTotalResults,
			[in] BSTR bstrEmailAddress,
			[in] BSTR bstrFirstName,
			[in] BSTR bstrLastName,
			[in] BSTR bstrCity,
			[in] BSTR bstrState,
			[in] BSTR bstrCountry);

		[id(DISPID_ONINVITEMAILRESULT), helpstring("Result from SendInviteMail or SendCustomInviteMail request."), helpcontext(0x0000)]
		void OnInviteMailResult(
			[in] long hr,
			[in] long lCookie);

		[id(DISPID_ONREQUESTURLRESULT), helpstring("Result from URL request."), helpcontext(0x0000)]
		void OnRequestURLResult(
			[in] long hr,
			[in] long lCookie,
			[in] MURLTYPE muType,
			[in] BSTR bstrURL);

		[id(DISPID_ONSESSIONSTATECHANGE), helpstring("Session state changed."), helpcontext(0x0000)]
		void OnSessionStateChange(
			[in] IMsgrIMsession* pIMSession, 
			[in] SSTATE sPrevState);

		[id(DISPID_ONUSERJOIN), helpstring("User joined a session."), helpcontext(0x0000)]
		void OnUserJoin(
			[in] IMsgrUser* pIMsgrUser,
			[in] IMsgrIMSession* pIMSession);

		[id(DISPID_ONUSERLEAVE), helpstring("User left a session."), helpcontext(0x0000)]
		void OnUserLeave(
			[in] IMsgrUser* pIMsgrUser,
			[in] IMsgrIMSession* pIMSession);

		[id(DISPID_ONUSERDROPPED), helpstring("User dropped from a session."), helpcontext(0x0000)]
		void OnUserDropped(
			[in] long hr,
			[in] IMsgrUser* pIMsgrUser,
			[in] IMsgrIMSession* pIMSession);

		[id(DISPID_ONNEWSESSIONREQUEST), helpstring("Request for a new session."), helpcontext(0x0000)]
		void OnNewSessionRequest(
			[in] IMsgrUser* pRequestUser, 
			[in] IMsgrIMSession* pIMSession,
			[in, out] VARIANT_BOOL* pfEnableDefault);	

		[id(DISPID_ONINVITEUSER), helpstring("Invite user result."), helpcontext(0x0000)]
		void OnInviteUser(
			[in] IMsgrUser* pIMsgrUser,
			[in] IMsgrIMSession* pIMSession,
			[in] long hr);	

		[id(DISPID_ONREQUESTURLPOSTRESULT), helpstring("Result from post URL request."), helpcontext(0x0000)]
		void OnRequestURLPostResult(
			[in] long hr,
			[in] long lCookie,
			[in] MURLTYPE muType,
			[in] BSTR bstrURLPost);

		[id(DISPID_ONLOCALPROPERTYCHANGERESULT), helpstring("Result from property change request."), helpcontext(0x0000)]
		void OnLocalPropertyChangeResult(
			[in] long hr,
			[in] MUSERPROPERTY ePropType,
			[in] VARIANT vPropVal,
			[in] IMsgrService* pService);
			
		[id(DISPID_ONBUDDYPROPERTYCHANGERESULT), helpstring("Result from buddy property change notification."), helpcontext(0x0000)]
		void OnBuddyPropertyChangeResult(
			[in] long hr,
			[in] IMsgrUser* pUser,
			[in] MUSERPROPERTY ePropType,
			[in] VARIANT vPropVal,
			[in] IMsgrService* pService);
		
	}
	//--------------------------------------------------------------------------
	// IMsgrUser Interface
	[
		uuid(218CB453-20B6-11d2-8E17-0000F803A446), // IID_IMsgrUser
		helpstring("Messenger User Interface"),
		helpcontext(0x0000),
		dual,
		oleautomation
	]
	interface IMsgrUser : IDispatch
	{
		[propput, helpstring("Friendly Name of the user."), helpcontext(0x0000)]
		HRESULT FriendlyName(
			[in] BSTR bstrFriendlyName);
			
		[propget]
		HRESULT FriendlyName(
			[out, retval] BSTR* pbstrFriendlyName);
			
		[propget]
		HRESULT EmailAddress(
			[out, retval] BSTR* pbstrEmailAddress);

		[propget, helpstring("State of the user."), helpcontext(0x0000)]
		HRESULT State(
			[out, retval] MSTATE* pmState);
			
		[propget, helpstring("Logon Name of the user."), helpcontext(0x0000)]
		HRESULT LogonName(
			[out, retval] BSTR* pbstrLogonName);

		[id(101), helpstring("Send message to this user"), helpcontext(0x0000)]
		HRESULT SendText(
			[in] BSTR bstrMsgHeader,
			[in] BSTR bstrMsgText,
			[in] MMSGTYPE mmtType,
			[out, retval] LONG* plCookie);

		[propget, helpstring("Get service object of the user."), helpcontext(0x0000)]
		HRESULT Service(
			[out, retval] IMsgrService** ppService);
	}

	//--------------------------------------------------------------------------
	// IMsgrUser2 Interface
	[
		uuid(218CB456-20B6-11d2-8E17-0000F803A446), //IID_IMsgrUser2
		helpstring("Messenger User Interface 2"),
		helpcontext(0x0000),
		dual,
		oleautomation
	]
	interface IMsgrUser2 : IMsgrUser
	{
		[propput, helpstring("Generic API to get at some specific property of the user."), helpcontext(0x0000)]
		HRESULT Property(
			[in] MUSERPROPERTY ePropType,
			[in] VARIANT vPropVal);

		[propget]
		HRESULT Property(
			[in] MUSERPROPERTY ePropType,
			[out, retval] VARIANT *pvPropVal);
	}

	//--------------------------------------------------------------------------
	// IMsgrUsers Interface
	[
		uuid(218CB454-20B6-11d2-8E17-0000F803A446), // IID_IMsgrUsers
		helpstring("Messenger Users Collection Interface"),
		helpcontext(0x0000),
		dual,
		oleautomation
	]
	interface IMsgrUsers : IDispatch
	{
		[propget, helpstring("Number of users."), helpcontext(0x0000)]
		HRESULT Count(
			[out, retval] long* pcUsers);

		[id(DISPID_VALUE), helpstring("Retrieves a specific user by index."), helpcontext(0x0000)]
		HRESULT Item(
			[in] long Index,
			[out, retval] IMsgrUser** ppUser);

		[id(100), helpstring("Adds a user object to the collection."), helpcontext(0x0000)]
		HRESULT Add(
			[in] IMsgrUser* pUser);
		
		[id(101), helpstring("Removes a user object from the collection."), helpcontext(0x0000)]
		HRESULT Remove(
			[in] IMsgrUser* pUser);

		[propget, restricted, id(DISPID_NEWENUM), helpstring("Enumerates the users."), helpcontext(0x0000)]
		HRESULT _NewEnum(
			[out, retval] IUnknown **ppUnknown);
	}

	//--------------------------------------------------------------------------
	// IMsgrIMSession Interface
	[
		uuid(82e11592-20f5-11d2-91ad-0000f81fefc9), // IID_IMsgrIMSession
		helpstring("Messenger IM Session Interface"),
		helpcontext(0x0000),
		dual,
		oleautomation
	]
	interface IMsgrIMSession : IDispatch
	{
		[propget, helpstring("Returns a collection object of current recipients in the IM Session."), helpcontext(0x0000)]
		HRESULT Members(
			[out, retval] IMsgrUsers** ppUsers);

		[propget, helpstring("Session state."), helpcontext(0x0000)]
		HRESULT State(
			[out, retval] SSTATE* psState);

		[propget, helpstring("Service associated with session."), helpcontext(0x0000)]
		HRESULT Service(
			[out, retval] IMsgrService** ppService);

		[propget, helpstring("Returns a collection object of current invitees."), helpcontext(0x0000)]
		HRESULT Invitees(
			[out, retval] IMsgrUsers** ppUsers);

		[id(100), helpstring("Leaves IM session.")]
		HRESULT LeaveSession();

		[id(101), helpstring("Invites a new user to the session.")]
		HRESULT InviteUser(
			[in] VARIANT vUser);
		
		[id(102), helpstring("Sends a text message."), helpcontext(0x0000)]
		HRESULT SendText(
			[in] BSTR bstrMsgHeader,
			[in] BSTR bstrMsgText,
			[in] MMSGTYPE mmtType,
			[out, retval] LONG* plCookie);


	}

	//--------------------------------------------------------------------------
	// IMsgrIMSessions Interface
	[
		uuid(6fd143e6-20a5-11d2-91ad-0000f81fefc9), // IID_IMsgrIMSessions
		helpstring("Messenger IM Sessions Collection Interface"),
		helpcontext(0x0000),
		dual,
		oleautomation
	]

	interface IMsgrIMSessions : IDispatch
	{
		[propget, helpstring("Number of IM Sessions."), helpcontext(0x0000)]
		HRESULT Count(
			[out, retval] long* pcSessions);

		[id(DISPID_VALUE), helpstring("Retrieves a specific IM Session by index."), helpcontext(0x0000)]
		HRESULT Item(
			[in] long Index,
			[out, retval] IMsgrIMSession** ppIMSession);
		
		[propget, restricted, id(DISPID_NEWENUM), helpstring("Enumerates the IM Session."), helpcontext(0x0000)]
		HRESULT _NewEnum(
			[out, retval] IUnknown **ppUnknown);
	}

	//--------------------------------------------------------------------------
	// IMsgrServices Interface
	[
		uuid(659ECAD8-A5C0-11d2-A440-00C04F795683), // IID_IMsgrServices
		helpstring("Messenger Services Interface"),
		helpcontext(0x0000),
		dual,
		oleautomation
	]
	interface IMsgrServices : IDispatch
	{
		

		[propput, helpstring("Primary service."), helpcontext(0x0000)]
		HRESULT PrimaryService(
			[in] IMsgrService* pService);

		[propget]
		HRESULT PrimaryService(
			[out, retval] IMsgrService** ppService);

		[propget, helpstring("Number of services."), helpcontext(0x0000)]
		HRESULT Count(
			[out, retval] long* pcServices);

		[id(DISPID_VALUE), helpstring("Retrieves a specific service by index."), helpcontext(0x0000)]
		HRESULT Item(
			[in] long Index,
			[out, retval] IMsgrService** ppService);

		[propget, restricted, id(DISPID_NEWENUM), helpstring("Enumerates the services."), helpcontext(0x0000)]
		HRESULT _NewEnum(
			[out, retval] IUnknown **ppUnknown);
	}

	//--------------------------------------------------------------------------
	// IMsgrService Interface
	[
		uuid(659ECAD9-A5C0-11d2-A440-00C04F795683), // IID_IMsgrService
		helpstring("Messenger Services Interface"),
		helpcontext(0x0000),
		dual,
		oleautomation
	]
	interface IMsgrService : IDispatch
	{
		[propget, helpstring("Service name."), helpcontext(0x0000)]
		HRESULT ServiceName(
			[out, retval] BSTR* pbstrServiceName);

		[propget, helpstring("Logon name."), helpcontext(0x0000)]
		HRESULT LogonName(
			[out, retval] BSTR* pbstrName);

		[propput, helpstring("Friendly name."), helpcontext(0x0000)]
		HRESULT FriendlyName(
			[in] BSTR bstrName);

		[propget, helpstring("Friendly name."), helpcontext(0x0000)]
		HRESULT FriendlyName(
			[out, retval] BSTR* pbstrName);

		[propget, helpstring("Service capabilities."), helpcontext(0x0000)]
		HRESULT Capabilities(
			[out, retval] LONG* plCapabilities);

		[propget, helpstring("Service status."), helpcontext(0x0000)]
		HRESULT Status(
			[out, retval] MSVCSTATUS* pmStatus);

		[helpstring("Initiate a logoff from this service."), helpcontext(0x0000)]
		HRESULT Logoff();

		[helpstring("Finds a user."), helpcontext(0x0000)]
		HRESULT FindUser(
			[in] BSTR bstrFirstName,
			[in] BSTR bstrLastName,
			[in] BSTR bstrCity,
			[in] BSTR bstrState,
			[in] BSTR bstrCountry,
			[out, retval] LONG* plCookie);

		[helpstring("Sends invitation mail."), helpcontext(0x0000)]
		HRESULT SendInviteMail(
			[in] BSTR bstrEmailAddress,
			[in] LONG lFindCookie,
			[in] LONG lFindIndex,
			[in] LONG lLCID,
			[out, retval] LONG* plCookie);

		[helpstring("Requests the post script for this type of URL."), helpcontext(0x0000)]
		HRESULT RequestURLPost(
			[in] MURLTYPE muType,
			[in]  BSTR bstrAdditionalInfo,
			[out, retval] LONG* plCookie);

		[propput, helpstring("Profile field."), helpcontext(0x0000)]
		HRESULT ProfileField(
			[in] MPFLFIELD mpflField,
			[in] VARIANT vFieldValue);

		[propget, helpstring("Profile field."), helpcontext(0x0000)]
		HRESULT ProfileField(
			[in] MPFLFIELD mpflField, 
			[out, retval] VARIANT* pvFieldValue);

	}

	//--------------------------------------------------------------------------
	// IMessengerApp Interface
	[
		uuid(F3A614DD-ABE0-11d2-A441-00C04F795683), // IID_IMessengerApp
		helpstring("Messenger Application Interface"),
		helpcontext(0x0000),
		dual,
		oleautomation
	]
	interface IMessengerApp : IDispatch
	{
		[propget, helpstring("Returns the application automation object."), helpcontext(0x0000)]
		HRESULT Application(
			[out, retval] IDispatch** ppDisp);

		[propget, helpstring("Returns the automation object of the container/parent if one exists or this automation object."), helpcontext(0x0000)]
		HRESULT Parent(
			[out, retval] IDispatch** ppDisp);

		[id(100), helpstring("Exits application."), helpcontext(0x0000)]
		HRESULT Quit();

		[propget, helpstring("Returns name of the application."), helpcontext(0x0000)]
		HRESULT Name(
			[out, retval] BSTR* pbstrName);

		[propget, helpstring("Returns file specification of the application, including path."), helpcontext(0x0000)]
		HRESULT FullName(
			[out, retval] BSTR* pbstrFullName);

		[propget, helpstring("Returns the path to the application."), helpcontext(0x0000)]
		HRESULT Path(
			[out, retval] BSTR* pbstrPath);

		// do we need success/failure result/event or use OnLogonResult event?
		[id(200), helpstring("Initiates Logon dialog."), helpcontext(0x0000)]
		HRESULT LaunchLogonUI();

		[id(201), helpstring("Initiates Options dialog."), helpcontext(0x0000)]
		HRESULT LaunchOptionsUI(
			[in] MOPTDLGPAGE mOptDlgPage);

		// do we need success/failure result/event or use OnListAddResult event
		[id(202), helpstring("Initiates Add Contact dialog."), helpcontext(0x0000)]
		HRESULT LaunchAddContactUI(
			[in] BSTR bstrEMail);

		[id(203), helpstring("Initiates Find Contact Dialog."), helpcontext(0x0000)]
		HRESULT LaunchFindContactUI(
			[in] BSTR bstrFirstName,
			[in] BSTR bstrLastName,
			[in, optional] VARIANT vbstrCity,
			[in, optional] VARIANT vbstrState,
			[in, optional] VARIANT vbstrCountry);

		[id(210), helpstring("Initiates IM Window."), helpcontext(0x0000)]
		HRESULT LaunchIMUI(
			[in] VARIANT vUser,
			[out, retval] IMessengerIMWindow** ppIMWindow);

		[propget, helpstring("Collection of current IM Windows."), helpcontext(0x0000)]
		HRESULT IMWindows(
			[out, retval] IMessengerIMWindows** ppIMWindows);

		[propget, helpstring("ToolBar visibility."), helpcontext(0x0000)]
		HRESULT ToolBar(
			[out, retval] VARIANT_BOOL* pBoolToolBar);

		[propput]
		HRESULT ToolBar(
			[in] VARIANT_BOOL BoolToolBar);

		[propget, helpstring("StatusBar visibility."), helpcontext(0x0000)]
		HRESULT StatusBar(
			[out, retval] VARIANT_BOOL* pBoolStatusBar);

		[propput]
		HRESULT StatusBar(
			[in] VARIANT_BOOL BoolStatusBar);

		[propget, helpstring("Text of StatusBar."), helpcontext(0x0000)]
		HRESULT StatusText(
			[out, retval] BSTR *pbstrStatusText);

		[propput]
		HRESULT StatusText(
			[in] BSTR bstrStatusText);

		[propget, helpstring("Returns the Handle of the Application window."), helpcontext(0x0000)]
		HRESULT HWND(
			[out, retval] long *phWnd);

		[propget, helpstring("The horizontal position (pixels) of the Application window relative to the screen."), helpcontext(0x0000)]
		HRESULT Left(
			[out, retval] long *plLeft);

		[propput]
		HRESULT Left(
			[in] long lLeft);

		[propget, helpstring("The vertical position (pixels) of the Application window relative to the screen."), helpcontext(0x0000)]
		HRESULT Top(
			[out, retval] long *plTop);

		[propput]
		HRESULT Top(
			[in] long lTop);

		[propget, helpstring("The horizontal dimension (pixels) of the Application window."), helpcontext(0x0000)]
		HRESULT Width(
			[out, retval] long *plWidth);

		[propput]
		HRESULT Width(
			[in] long lWidth);

		[propget, helpstring("The vertical dimension (pixels) of the Application window."), helpcontext(0x0000)]
		HRESULT Height(
			[out, retval] long *plHeight);

		[propput]
		HRESULT Height(
			[in] long lHeight);

		[propget, helpstring("Visibility of the application."), helpcontext(0x0000)]
		HRESULT Visible(
			[out, retval] VARIANT_BOOL* pBoolVisible);

		[propput]
		HRESULT Visible(
			[in] VARIANT_BOOL BoolVisible);

		[id(222), helpstring("Initiates a Logon without UI if connected to the network and user saved the password."), helpcontext(0x0000)]
		HRESULT AutoLogon();

		[propput, helpstring("Sets credentials and overrides the first time wizard."), helpcontext(0x0000)]
		HRESULT FirstTimeCredentials(
			[in] BSTR bstrUser,
			[in] BSTR bstrPassword,
			[in] IMsgrService* pService,
			[in] long lFlags);

		[propput, helpstring("Changes the cached password if the given user name matches the cached user name."), helpcontext(0x0000)]
		HRESULT CachedPassword(
			[in] BSTR bstrUser,
			[in] BSTR bstrPassword,
			[in] IMsgrService* pService,
			[in] VARIANT_BOOL BoolSavePassword);

		[id(223), helpstring("Requests the post script for this type of URL."), helpcontext(0x0000)]
		HRESULT RequestURLPost(
			[in] MURLTYPE muType,
			[in, optional]  VARIANT vbstrAdditionalInfo);

		[id(224), propput]
		HRESULT TaskbarIcon(
			[in] VARIANT_BOOL BoolVisible);

		[id(224), propget, helpstring("Visibility of the taskbar icon."), helpcontext(0x0000)]
		HRESULT TaskbarIcon(
			[out, retval] VARIANT_BOOL* pBoolVisible);

	}


	//--------------------------------------------------------------------------
	// IMessengerApp2 Interface
	[
		uuid(FF55D627-CF5B-40de-850F-62D20BC241C8), // IID_IMessengerApp2
		helpstring("Messenger Application Interface 2"),
		helpcontext(0x0000),
		dual,
		oleautomation
	]
	interface IMessengerApp2 : IMessengerApp
	{
		[id(225), helpstring("Initiates Phone Window."), helpcontext(0x0000)]
		HRESULT LaunchPhoneUI(
			[in] VARIANT vUser, 
			[in] MUSERPROPERTY ePhoneNumber);

		[id(226), helpstring("Launches the audio tuning wizard."), helpcontext(0x0000)]
		HRESULT LaunchAudioTuningWizard(
			[in] long hwndParent);
	}


	//--------------------------------------------------------------------------
	// IMessengerApp3 Interface
	[
		uuid(28E28123-7DC5-45d3-860E-8EE1C3681BD5), // IID_IMessengerApp3
		helpstring("Messenger Application Interface 3"),
		helpcontext(0x0000),
		dual,
		oleautomation
	]
	interface IMessengerApp3 : IMessengerApp2
	{
		[id(227), helpstring("Initiates Pager IM Window."), helpcontext(0x0000)]
		HRESULT LaunchPagerUI(
			[in] VARIANT vUser,
			[out, retval] IMessengerIMWindow** ppIMWindow);
	}


	//--------------------------------------------------------------------------
	// IMessengerIMWindow Interface
	[
		uuid(35EDD1CD-1A8C-11d2-B49D-00C04FB90376), // IID_IMessengerIMWindow
		helpstring("Messenger IM Window Interface"),
		helpcontext(0x0000),
		dual,
		oleautomation
	]
	interface IMessengerIMWindow : IDispatch
	{
		[propget, helpstring("Returns the application automation object if accessible, this automation object otherwise."), helpcontext(0x0000)]
		HRESULT Application(
			[out, retval] IDispatch** ppDisp);

		[propget, helpstring("Returns the automation object of the container/parent if one exists or this automation object."), helpcontext(0x0000)]
		HRESULT Parent(
			[out, retval] IDispatch** ppDisp);

		[propget, helpstring("Returns the IMSession Object associated with this window."), helpcontext(0x0000)]
		HRESULT IMSession(
			[out, retval] IMsgrIMSession** ppIMSession);

		[propget, helpstring("Current history in the window."), helpcontext(0x0000)]
		HRESULT History(
			[out, retval] BSTR* pbstrHistory);

		[id(300), helpstring("Sends a text message through the IM window."), helpcontext(0x0000)]
		HRESULT SendText(
			[in] BSTR bstrSendText);

		[id(301), helpstring("Closes the IM window."), helpcontext(0x0000)]
		HRESULT Close();

		[propget, helpstring("ToolBar visibility."), helpcontext(0x0000)]
		HRESULT ToolBar(
			[out, retval] VARIANT_BOOL* pBoolToolBar);

		[propput]
		HRESULT ToolBar(
			[in] VARIANT_BOOL BoolToolBar);

		[propget, helpstring("StatusBar visibility."), helpcontext(0x0000)]
		HRESULT StatusBar(
			[out, retval] VARIANT_BOOL* pBoolStatusBar);

		[propput]
		HRESULT StatusBar(
			[in] VARIANT_BOOL BoolStatusBar);

		[propget, helpstring("Text of StatusBar."), helpcontext(0x0000)]
		HRESULT StatusText(
			[out, retval] BSTR *pbstrStatusText);

		[propput]
		HRESULT StatusText(
			[in] BSTR bstrStatusText);

		[propget, helpstring("Returns the Handle of the IM window."), helpcontext(0x0000)]
		HRESULT HWND(
			[out, retval] long *phWnd);

		[propget, helpstring("The horizontal position (pixels) of the IM window relative to the screen."), helpcontext(0x0000)]
		HRESULT Left(
			[out, retval] long *plLeft);

		[propput]
		HRESULT Left(
			[in] long lLeft);

		[propget, helpstring("The vertical position (pixels) of the IM window relative to the screen."), helpcontext(0x0000)]
		HRESULT Top(
			[out, retval] long *plTop);

		[propput]
		HRESULT Top(
			[in] long lTop);

		[propget, helpstring("The horizontal dimension (pixels) of the IM window."), helpcontext(0x0000)]
		HRESULT Width(
			[out, retval] long *plWidth);

		[propput]
		HRESULT Width(
			[in] long lWidth);

		[propget, helpstring("The vertical dimension (pixels) of the IM window."), helpcontext(0x0000)]
		HRESULT Height(
			[out, retval] long *plHeight);

		[propput]
		HRESULT Height(
			[in] long lHeight);

		[propget, helpstring("Visibility of the window."), helpcontext(0x0000)]
		HRESULT Visible(
			[out, retval] VARIANT_BOOL* pBoolVisible);

		[propput]
		HRESULT Visible(
			[in] VARIANT_BOOL BoolVisible);

		[propget, helpstring("Returns a collection object of current recipients in the IM Window."), helpcontext(0x0000)]
		HRESULT Members(
			[out, retval] IMsgrUsers** ppUsers);
	}

	//--------------------------------------------------------------------------
	// IMessengerIMWindows Interface
	[
		uuid(35EDD1CC-1A8C-11d2-B49D-00C04FB90376), // IID_IMessengerIMWindows
		helpstring("Messenger IM Windows Collection Interface"),
		helpcontext(0x0000),
		dual,
		oleautomation
	]
	interface IMessengerIMWindows : IDispatch
	{
		[propget, helpstring("Number of IM Windows."), helpcontext(0x0000)]
		HRESULT Count(
			[out, retval] long* pcWindows);

		[id(DISPID_VALUE), helpstring("Retrieves a specific IM Window by index."), helpcontext(0x0000)]
		HRESULT Item(
			[in] long Index,
			[out, retval] IMessengerIMWindow** ppIMWindow);

		[propget, restricted, id(DISPID_NEWENUM), helpstring("Enumerates the IM Windows."), helpcontext(0x0000)]
		HRESULT _NewEnum(
			[out, retval] IUnknown **ppUnknown);
	}

	//--------------------------------------------------------------------------
	// IMsgrSP Interface
	[
		uuid(E5B42158-AF2C-11d2-8D9D-0000F875C541), // IID_IMsgrSP
		helpstring("Messenger Service Provider Interface"),
		helpcontext(0x0000),
		odl
	]
	interface IMsgrSP : IMsgrService
	{
		[helpstring("Initiate a logon to this service."), helpcontext(0x0000)]
		HRESULT Logon(
			[in] BSTR bstrUser,
			[in] BSTR bstrPassword);

		[helpstring("Creates a user object."), helpcontext(0x0000)]
		HRESULT CreateUser(
			[in] BSTR bstrLogonName,
			[out, retval] IMsgrUser** ppUser);
			
		[propget, helpstring("Returns a list."), helpcontext(0x0000)]
		HRESULT List(
			[in] MLIST mList,
			[out, retval] IMsgrUsers** ppUsers);

		[propput, helpstring("Message privacy setting."), helpcontext(0x0000)]
		HRESULT MessagePrivacy(
			[in] MMSGPRIVACY mmpSetting);

		[propget]
		HRESULT MessagePrivacy(
			[out, retval] MMSGPRIVACY* pmmpSetting);

		[propput, helpstring("Prompt setting."), helpcontext(0x0000)]
		HRESULT Prompt(
			[in] MPROMPT mpSetting);

		[propget]
		HRESULT Prompt(
			[out, retval] MPROMPT* pmpSetting);

		[propput, helpstring("Local state."), helpcontext(0x0000)]
		HRESULT LocalState(
			[in] MSTATE mState);

		[propget, helpstring("Local state."), helpcontext(0x0000)]
		HRESULT LocalState(
			[out, retval] MSTATE *pmState);

		[helpstring("Add a buddy."), helpcontext(0x0000)]
		HRESULT AddBuddy(
			[in] IMsgrUser *pBuddy,
			[in] MLIST mList);

		[helpstring("Remove a buddy."), helpcontext(0x0000)]
		HRESULT RemoveBuddy(
			[in] IMsgrUser *pBuddy,
			[in] MLIST mList);

		[helpstring("Creates a new IM session."), helpcontext(0x0000)]
		HRESULT CreateIMSession(
			[in] IMsgrUser *pUser,
			[out, retval] IMsgrIMSession** ppIMSession);

		[propget, helpstring("Returns a list of IM sessions"), helpcontext(0x0000)]
		HRESULT IMSessions(
			[out, retval] IMsgrIMSessions** ppIMSessions);
	}

	//--------------------------------------------------------------------------
	// IMsgrSP2 Interface
	[
		uuid(E5B42159-AF2C-11d2-8D9D-0000F875C541), // IID_IMsgrSP2
		helpstring("Messenger Service Provider Interface 2"),
		helpcontext(0x0000),
		odl
	]
	interface IMsgrSP2 : IMsgrSP
	{
		[propget, helpstring("Returns the local IP address"), helpcontext(0x0000)]
		HRESULT LocalIPAddress(
			[out, retval] long *plAddr);

		[propput, helpstring("Generic API to get at some specific property of the user."), helpcontext(0x0000)]
		HRESULT LocalProperty(
			[in] MUSERPROPERTY ePropType,
			[in] VARIANT vPropVal);

		[propget]
		HRESULT LocalProperty(
			[in] MUSERPROPERTY ePropType,
			[out, retval] VARIANT *pvPropVal);

		[id(125), helpstring("Send a page to a user."), helpcontext(0x0000)]
		HRESULT SendPage(
			[in] IMsgrUser* pUser,
			[in] BSTR bstrMessage,
			[in] MUSERPROPERTY ePhoneType,
			[out, retval] LONG* plCookie);

		[id(126), helpstring("Sends custom invitation mail."), helpcontext(0x0000)]
		HRESULT SendCustomInviteMail(
			[in] BSTR bstrEmailAddress,
			[in] LONG lFindCookie,
			[in] LONG lFindIndex,
			[in] LONG lLCID,
			[in] BSTR bstrCustomText,
			[out, retval] LONG* plCookie);
	}


	//--------------------------------------------------------------------------
	// Messenger objects class definition
	[
		uuid(F3A614DC-ABE0-11d2-A441-00C04F795683), // CLSID_MsgrObject
		helpstring("Messenger Object")
	]
	coclass MsgrObject
	{
		[default] interface IMsgrObject2;
		interface IMsgrObject;
		[default, source] dispinterface DMsgrObjectEvents;
	};

	[
		uuid(FB7199AB-79BF-11d2-8D94-0000F875C541), // CLSID_MessengerApp
		helpstring("Messenger Application"),
		appobject
	]
	coclass MessengerApp
	{
		[default] interface IMessengerApp3;
		interface IMessengerApp2;
		interface IMessengerApp;
		interface IBasicIMOld;
	};
};

#ifndef __MKTYPLIB__

typedef enum
{
	INFOBAR_DEFAULT			= 0,
	INFOBAR_INFORMATION		= 1,
	INFOBAR_EXCLAMATION		= 2,
}
	INFOBAR;

typedef enum
{
	FONTSIZE_SMALLEST	= 0,
	FONTSIZE_SMALLER	= 1,
	FONTSIZE_MEDIUM		= 2,
	FONTSIZE_LARGER		= 3,
	FONTSIZE_LARGEST	= 4,
}
	FONTSIZE;

typedef enum
{
	VOICESESSIONSTATE_DISABLED	= 0,
	VOICESESSIONSTATE_INACTIVE	= 1,
	VOICESESSIONSTATE_ACTIVE 	= 2,
}
	VOICESESSIONSTATE;

// The real LOGFONT uses 'byte' which mktypelib chokes on
// so we define this version
typedef struct tagLOGFONT_DATA
{
	LONG	  lfHeight;
	LONG	  lfWidth;
	LONG	  lfEscapement;
	LONG	  lfOrientation;
	LONG	  lfWeight;
	LONG	  lfItalic;
	LONG	  lfUnderline;		
	LONG	  lfStrikeOut;
	LONG	  lfCharSet;
	LONG	  lfOutPrecision;
	LONG	  lfClipPrecision;
	LONG	  lfQuality;
	LONG	  lfPitchAndFamily;
	BSTR	  bstrFaceName;
} LOGFONT_DATA;

//--------------------------------------------------------------------------
// DMessengerAppEvents Interface
[
	uuid(677DF8D4-A471-4751-958A-31D102EF2D89), // DIID_DMessengerAppEvents
	helpstring("Messenger App Events Interface"),
	helpcontext(0x0000),
	hidden
]
dispinterface DMessengerAppEvents
{
	properties:
	methods:

	[id(DISPID_ONBEFORELAUNCHIMUI), helpstring("A new IM Window is about to be launched."), helpcontext(0x0000)]
	HRESULT OnBeforeLaunchIMUI(
		[in] IMessengerIMWindow* pIMWindow,
		[in] VARIANT_BOOL BoolMinimized,
		[in, out] VARIANT_BOOL* pfEnableDefault);

	[id(DISPID_ONSHOWIMUI), helpstring("Show/hide an IM Window."), helpcontext(0x0000)]
	HRESULT OnShowIMUI(
		[in] IMessengerIMWindow* pIMWindow,
		[in] VARIANT_BOOL BoolVisible,
		[in, out] VARIANT_BOOL* pfEnableDefault);

	[id(DISPID_ONDESTROYIMUI), helpstring("An IM Window is about to be destroyed."), helpcontext(0x0000)]
	HRESULT OnDestroyIMUI(
		[in] IMessengerIMWindow* pIMWindow);

	[id(DISPID_ONINDICATEMESSAGERECEIVED), helpstring("Fash window and/or play sound to indicate message received."), helpcontext(0x0000)]
	HRESULT OnIndicateMessageReceivedIMUI(
		[in] IMessengerIMWindow* pIMWindow,
		[in, out] VARIANT_BOOL* pfEnableDefault);

	[id(DISPID_ONSTATUSTEXT), helpstring("New IM status Text"), helpcontext(0x0000)]
	HRESULT OnStatusTextIMUI(
		[in] IMessengerIMWindow* pIMWindow,
		[in] BSTR bstrStatusText);

	[id(DISPID_ONTITLEBARTEXT), helpstring("New IM titlebar Text"), helpcontext(0x0000)]
	HRESULT OnTitlebarTextIMUI(
		[in] IMessengerIMWindow* pIMWindow,
		[in] BSTR bstrTitlebarText);

	[id(DISPID_ONINFOBARTEXT), helpstring("New IM infobar Text"), helpcontext(0x0000)]
	HRESULT OnInfobarTextIMUI(
		[in] IMessengerIMWindow* pIMWindow,
		[in] BSTR bstrInforbarText,
		[in] INFOBAR lType);

	[id(DISPID_ONSENDENABLED), helpstring("Enable/disable the send button"), helpcontext(0x0000)]
	HRESULT OnSendEnabledIMUI(
		[in] IMessengerIMWindow* pIMWindow,
		[in] VARIANT_BOOL BoolEnable);

	[id(DISPID_ONFILETRANSFER), helpstring("File Transfer Status."), helpcontext(0x0000)]
	void OnFileTransferIMUI(
		[in] IMessengerIMWindow* pIMWindow,
		[in] BSTR bstrFile,
		[in] MFILETRANSFER_FLAGS lStatus,
		[in] long lBytesTransferred,
		[in] long lBytesTotal);

	[id(DISPID_ONVOICESESSIONSTATE), helpstring("Voice IM volume changed."), helpcontext(0x0000)]
	void OnVoiceSessionStateIMUI(
		[in] IMessengerIMWindow* pIMWindow,
		[in] VOICESESSIONSTATE lNewState);

	[id(DISPID_ONVOICEVOLUMECHANGED), helpstring("Voice IM volume changed."), helpcontext(0x0000)]
	void OnVoiceVolumeChangedIMUI(
		[in] IMessengerIMWindow* pIMWindow,
		[in] long lNewVolume);

	[id(DISPID_ONMICROPHONEMUTE), helpstring("Microphone has been muted."), helpcontext(0x0000)]
	void OnMicrophoneMuteIMUI(
		[in] IMessengerIMWindow* pIMWindow,
		[in] VARIANT_BOOL BoolMute);
}

//--------------------------------------------------------------------------
// IMsnMessengerIMWindow Interface
[
	uuid(2B7E6AA9-C4FA-4951-815B-4AFE39D81453), // IID_IMsnMessengerIMWindow
	helpstring("Private Messenger IM Window Interface for Mars"),
	helpcontext(0x0000),
	object
]
interface IMsnMessengerIMWindow : IUnknown
{
	[propget, helpstring("Returns the Handle of the history window."), helpcontext(0x0000)]
	HRESULT HistoryHWND(
		[out, retval] long *phWnd);

	[propget, helpstring("Returns the Handle of the input window."), helpcontext(0x0000)]
	HRESULT InputHWND(
		[out, retval] long *phWnd);

	[id(303), helpstring("Changes the style of IM window, input window, or history window."), helpcontext(0x0000)]
	HRESULT SetWindowStyle(
		[in] long hWnd,
		[in] long lStyle,
		[in] long lExStyle);

	[propget, helpstring("Gets the current display size of the font."), helpcontext(0x0000)]
	HRESULT TextSize(
		[out, retval] FONTSIZE* plSize);

	[propput, helpstring("Changes the display size of the font."), helpcontext(0x0000)]
	HRESULT TextSize(
		[in] FONTSIZE lSize);

	[id(304), helpstring("Gets current font settings for input and history fields."), helpcontext(0x0000)]
	HRESULT GetMessageFont(
		[out] LOGFONT_DATA* plfMessage,
		[out] COLORREF* pcrMessage,
		[out] long* plMinPointSize,
		[out] long* plMaxPointSize);

	[id(305), helpstring("Sets current font settings for input and history fields."), helpcontext(0x0000)]
	HRESULT SetMessageFont(
		[in] LOGFONT_DATA* plfMessage,
		[in] COLORREF crMessage);

	[id(306), helpstring("Send a file."), helpcontext(0x0000)]
	HRESULT SendFile(
		[in] BSTR bstrFilePath);

	[id(307), helpstring("Cancel's current file transfer."), helpcontext(0x0000)]
	HRESULT CancelFileTransfer();

	[propget, helpstring("Gets the state of the voice button."), helpcontext(0x0000)]
	HRESULT VoiceSessionState(
		[out, retval] VOICESESSIONSTATE* plState);

	[propput, helpstring("Sets the state of the voice button."), helpcontext(0x0000)]
	HRESULT VoiceSessionState(
		[in] VOICESESSIONSTATE lState);

	[propget, helpstring("Sets the volume for voice IM sessions."), helpcontext(0x0000)]
	HRESULT VoiceVolume(
		[out, retval] long* plVolume);

	[propput, helpstring("Returns the volume for voice IM sessions."), helpcontext(0x0000)]
	HRESULT VoiceVolume(
		[in] long lVolume);

	[propget, helpstring("Gets the microphone mute."), helpcontext(0x0000)]
	HRESULT MicrophoneMute(
		[out, retval] VARIANT_BOOL* pBoolMute);

	[propput, helpstring("Sets the microphone mute."), helpcontext(0x0000)]
	HRESULT MicrophoneMute(
		[in] VARIANT_BOOL BoolMute);

	[propget, helpstring("Get the current amplitude of the microphone."), helpcontext(0x0000)]
	HRESULT MicrophoneAmplitude(
		[out, retval] long* plAmplitude);

	[propget, helpstring("Does this IM window support paging?"), helpcontext(0x0000)]
	HRESULT IsPageMode(
		[out, retval] VARIANT_BOOL* pBoolPager);

	[propget, helpstring("Get the phone number to be sent in a pager message."), helpcontext(0x0000)]
	HRESULT PhoneNumber(
		[out, retval] MUSERPROPERTY* plProp);

	[propput, helpstring("Set the phone number to be sent in a pager message."), helpcontext(0x0000)]
	HRESULT PhoneNumber(
		[in] MUSERPROPERTY lProp);

	[propget, helpstring("Default user if everyone leaves the IM session."), helpcontext(0x0000)]
	HRESULT DefaultUser(
		[out, retval] IMsgrUser** ppUser);
};

//--------------------------------------------------------------------------
// IMsnMessengerIMWindow Interface
[
	uuid(70BF15A8-58CD-4687-A8B3-D14E2F760371), // IID_IMsnMessengerIMWindow2
	helpstring("Another Private Messenger IM Window Interface for Mars"),
	helpcontext(0x0000),
	object
]
interface IMsnMessengerIMWindow2 : IMsnMessengerIMWindow
{
	[id(307), helpstring("ProcessSysChar"), helpcontext(0x0000)]
	HRESULT ProcessSysChar(long lChar);

}
#endif // __MKTYPLIB__
