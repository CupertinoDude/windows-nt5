//+---------------------------------------------------------------------------
//
//  Copyright 2001 Microsoft Corporation. All Rights Reserved.
//
//  Contents: Messenger platform lock interfaces
// 
//----------------------------------------------------------------------------

#ifdef __MKTYPLIB__
#define VARIANT_BOOL boolean
#else  // __MKTYPLIB__
cpp_quote("//+-------------------------------------------------------------------------")
cpp_quote("//")
cpp_quote("//  Microsoft Windows")
cpp_quote("//  Copyright 1997 Microsoft Corporation. All Rights Reserved.")
cpp_quote("//")
cpp_quote("//  File: lock.h")
cpp_quote("//")
cpp_quote("//--------------------------------------------------------------------------")


import "objidl.idl";
import "oleidl.idl";
import "oaidl.idl";
import "lock.idl";
#endif // __MKTYPLIB__
#include "mdispid.h"

#ifdef __MKTYPLIB__
//--------------------------------------------------------------------------
// Type Library
[
	uuid(B2973F5E-C33E-4C94-8989-221CEEB8DC23), // LIBID_MsgrLock
	version(1.0),
	helpstring("Messenger Platform Lock Type Library")
]
library MsgrLock
{
	importlib("stdole32.tlb");
#endif // __MKTYPLIB__

	interface IMsgrLock;
	
	
	#define LOCK_E(e) (0x81000700 + (e))
	typedef enum
	{
		MSGR_E_API_NOTINITIALIZED				= LOCK_E(0x0051),
		MSGR_E_API_LOCKED						= LOCK_E(0x0052),
		MSGR_E_API_UNLOCK_FAILED				= LOCK_E(0x0053),
		MSGR_E_API_ALREADY_UNLOCKED				= LOCK_E(0x0054),
		MSGR_E_API_PENDING_UNLOCK				= LOCK_E(0x0055),
		MSGR_E_API_DISABLED						= LOCK_E(0x0056),	
	}  LockError;
	
	typedef enum
	{
		LOCK_NOTINITIALIZED		= 0x00000001,
		LOCK_INITIALIZED		= 0x00000002,
		LOCK_PENDINGRESULT		= 0x00000003,
		LOCK_UNLOCKED			= 0x00000004,
		LOCK_UNLOCKFAILED		= 0x00000005,
		LOCK_DISABLED			= 0x00000006,
	} LockStatus;


	//------------------------------------------------------------------------------
	// IMsgrLock
	[
		uuid(36602AFA-4859-4DF5-820B-BF35ACAA16CA), // IID_IMsgrLock
		helpstring("Messenger Lock and Key Interface"),
		helpcontext(0x0000),
		oleautomation
	]
	interface IMsgrLock : IUnknown
	{
		[propget, helpstring("Returns the lock and key status"), helpcontext(0x0000)]
		HRESULT Status(
			[out, retval] LockStatus *peStatus);

		[id(137), helpstring("Request lock and key challenge."), helpcontext(0x0000)]
		HRESULT RequestChallenge(
			[in] long lCookie);

		[id(138), helpstring("Send lock and key response."), helpcontext(0x0000)]
		HRESULT SendResponse(
			[in] BSTR bstrAppStrId,
			[in] BSTR bstrResponse,
			[in] long lCookie);
	}

#ifndef __MKTYPLIB__
//--------------------------------------------------------------------------
// Type Library
[
	uuid(B2973F5E-C33E-4C94-8989-221CEEB8DC23), // LIBID_MsgrLock
	version(1.0),
	helpstring("Messenger Platform Lock Type Library")
]
library MsgrLock
{
	importlib("stdole32.tlb");
#endif // __MKTYPLIB__
};
/* end */
