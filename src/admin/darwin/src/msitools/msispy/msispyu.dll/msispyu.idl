/////////////////////////////////////////////////////////////////////////////
// msispyu.idl
//		IDL description of the MsiSpy TypeLib
//		Copyright (C) Microsoft Corp 1997-2000.  All Rights Reserved.
// 

#include "..\spyinc\spydspid.h"   // help context ID definitions, dispatch IDs
#include "version.h"
#define MAKE_VERSION(a,b) a##.##b
[
	uuid(000C1121-0000-0000-C000-000000000046), // LIBID_MsispyTypeLib
	helpstring("Msispy automation TypeLibrary"),
	lcid(0x0409),
	version( MAKE_VERSION(rmj,rmm) )
]
library Msispy
{
	importlib("stdole32.tlb");
	dispinterface Msispy;
	dispinterface MsispyDatabase;
	dispinterface MsispyProfile;
	dispinterface MsispyRegistry;

typedef [helpcontext(0),helpstring("Msispy enumerations")] enum
{
	[helpcontext(0),helpstring("Msispy Help")]
		isfInteger  = 0,

} Constants;

	[
		uuid(000C1122-0000-0000-C000-000000000046),  // IID_IMsispy
		helpcontext(HELPID_Msispy),helpstring("Msispy top-level object.")
	]
	dispinterface Msispy
	{
		properties:
		methods:
			[id(DISPID_Msispy_CreateDatabase), helpcontext(HELPID_Msispy_CreateDatabase), helpstring("Creates a new database object")]
				MsispyDatabase *CreateDatabase();
			[id(DISPID_Msispy_CreateProfile), helpcontext(HELPID_Msispy_CreateProfile), helpstring("Creates a new profile object")]
				MsispyProfile *CreateProfile();
			[id(DISPID_Msispy_CreateRegistry), helpcontext(HELPID_Msispy_CreateRegistry), helpstring("Creates a new registry object")]
				MsispyRegistry *CreateRegistry();
	};

	[
		uuid(000C1123-0000-0000-C000-000000000046),  // IID_IMsispyDatabase
		helpcontext(HELPID_MsispyDatabase),helpstring("MsispyDatabase object")
	]
	dispinterface MsispyDatabase
	{
		properties:
		methods:
			[id(DISPID_MsispyDatabase_Open), helpcontext(HELPID_MsispyDatabase_Open), helpstring("MsispyDatabase.Open action: opens a database object")]
				void Open([in] BSTR databasePath);
			[id(DISPID_MsispyDatabase_Close), helpcontext(HELPID_MsispyDatabase_Close), helpstring("MsispyDatabase.Close action: closes a database object")]
				void Close();
			[id(DISPID_MsispyDatabase_GetProduct), propget, helpcontext(HELPID_MsispyDatabase_GetProduct), helpstring("Returns product codes from a database, on a 0-based index")]
				BSTR GetProduct([in] long productIndex);
			[id(DISPID_MsispyDatabase_GetFeatureFromProduct), propget, helpcontext(HELPID_MsispyDatabase_GetFeatureFromProduct), helpstring("Returns names of features of a product, on a 0-based index ")]
				BSTR GetFeatureFromProduct([in] BSTR productCode, [in] long featureIndex);
			[id(DISPID_MsispyDatabase_GetComponent), propget, helpcontext(HELPID_MsispyDatabase_GetComponent), helpstring("Returns component GUIDs from a database, on a 0-based index")]
				BSTR GetComponent([in] long componentIndex);
			[id(DISPID_MsispyDatabase_GetComponentFromProduct), propget, helpcontext(HELPID_MsispyDatabase_GetComponentFromProduct), helpstring("Returns GUIDs of components of a product, on a 0-based index")]
				BSTR GetComponentFromProduct([in] BSTR productCode, [in] long componentIndex);
			[id(DISPID_MsispyDatabase_GetComponentFromFeature), propget, helpcontext(HELPID_MsispyDatabase_GetComponentFromFeature), helpstring("Returns GUIDs of components of a feature, on a 0-based index")]
				BSTR GetComponentFromFeature([in] BSTR productCode, [in] BSTR featureName, [in] long componentIndex);
			[id(DISPID_MsispyDatabase_GetComponentName), propget, helpcontext(HELPID_MsispyDatabase_GetComponentName), helpstring("Returns the name of the component whose GUID is passed in")]
				BSTR GetComponentName([in] BSTR componentGuid);
			[id(DISPID_MsispyDatabase_GetProductInfo), propget, helpcontext(HELPID_MsispyDatabase_GetProductInfo), helpstring("Returns info on a product based on the case-sensitive productAttribute")]
				BSTR GetProductInfo([in] BSTR productCode, [in] BSTR productAttribute);
			[id(DISPID_MsispyDatabase_GetFeatureInfo), propget, helpcontext(HELPID_MsispyDatabase_GetFeatureInfo), helpstring("Returns info on a feature based on the case-sensitive featureAttribute")]
				BSTR GetFeatureInfo([in] BSTR productCode, [in] BSTR featureName, [in] BSTR featureAttribute);
			[id(DISPID_MsispyDatabase_QueryProductState), propget, helpcontext(HELPID_MsispyDatabase_QueryProductState), helpstring("Returns the numeric state of a product")]
				int QueryProductState([in] BSTR productCode);
			[id(DISPID_MsispyDatabase_QueryFeatureState), propget, helpcontext(HELPID_MsispyDatabase_QueryFeatureState), helpstring("Returns the numeric state of a feature")]
				int QueryFeatureState([in] BSTR productCode, [in] BSTR featureName);
			[id(DISPID_MsispyDatabase_QueryComponentState), propget, helpcontext(HELPID_MsispyDatabase_QueryComponentState), helpstring("Returns the numeric state of a component")]
				int QueryComponentState([in] BSTR productCode, [in] BSTR componentGuid);
			[id(DISPID_MsispyDatabase_GetFeatureUsage), propget, helpcontext(HELPID_MsispyDatabase_GetFeatureUsage), helpstring("Returns the usage-count of a feature")]
				long GetFeatureUsage([in] BSTR productCode, [in] BSTR featureName);
			[id(DISPID_MsispyDatabase_GetClientFromComponent), propget, helpcontext(HELPID_MsispyDatabase_GetClientFromComponent), helpstring("Returns product codes of products that use a component, on a 0-based index")]
				BSTR GetClientFromComponent([in] BSTR componentGuid, [in] long clientIndex);
			[id(DISPID_MsispyDatabase_GetFileFromComponent), propget, helpcontext(HELPID_MsispyDatabase_GetFileFromComponent), helpstring("Returns names of files of a component, on a 0-based index")]
				BSTR GetFileFromComponent([in] BSTR componentGuid, [in] long productIndex);
			[id(DISPID_MsispyDatabase_GetFileInfo), propget, helpcontext(HELPID_MsispyDatabase_GetFileInfo), helpstring("Returns info on a file based on the case-sensitive fileAttribute")]
				BSTR GetFileInfo([in] BSTR productCode, [in] BSTR componentGuid, [in] BSTR fileName, [in] BSTR fileAttribute);
			[id(DISPID_MsispyDatabase_GetComponentLocation), propget, helpcontext(HELPID_MsispyDatabase_GetComponentLocation), helpstring("Returns the full path of an installed component")]
				BSTR GetComponentLocation([in] BSTR componentGuid);
	};

	
	[
		uuid(000C1124-0000-0000-C000-000000000046),  // IID_IMsispyProfile
		helpcontext(HELPID_MsispyProfile),helpstring("MsispyProfile object.")
	]
	dispinterface MsispyProfile
	{
		properties:
		methods:
			[id(DISPID_MsispyProfile_Open), helpcontext(HELPID_MsispyProfile_Open), helpstring("MsispyProfile.Open action: opens a profile object")]
				void Open([in] BSTR ProfilePath);
			[id(DISPID_MsispyProfile_Close), helpcontext(HELPID_MsispyProfile_Close), helpstring("MsispyProfile.Close action: closes a profile object")]
				void Close();
			[id(DISPID_MsispyProfile_GetProduct), propget, helpcontext(HELPID_MsispyProfile_GetProduct), helpstring("Returns product codes from a profile, on a 0-based index")]
				BSTR GetProduct([in] long productIndex);
			[id(DISPID_MsispyProfile_GetFeatureFromProduct), propget, helpcontext(HELPID_MsispyProfile_GetFeatureFromProduct), helpstring("Returns names of features of a product, on a 0-based index")]
				BSTR GetFeatureFromProduct([in] BSTR productCode, [in] long featureIndex);
			[id(DISPID_MsispyProfile_GetComponent), propget, helpcontext(HELPID_MsispyProfile_GetComponent), helpstring("Returns component GUIDs from a profile, on a 0-based index")]
				BSTR GetComponent([in] long componentIndex);
			[id(DISPID_MsispyProfile_GetComponentFromProduct), propget, helpcontext(HELPID_MsispyProfile_GetComponentFromProduct), helpstring("Returns GUIDs of components of a product, on a 0-based index")]
				BSTR GetComponentFromProduct([in] BSTR productCode, [in] long componentIndex);
			[id(DISPID_MsispyProfile_GetComponentFromFeature), propget, helpcontext(HELPID_MsispyProfile_GetComponentFromFeature), helpstring("Returns GUIDs of components of a feature, on a 0-based index")]
				BSTR GetComponentFromFeature([in] BSTR productCode, [in] BSTR featureName, [in] long componentIndex);
			[id(DISPID_MsispyProfile_GetComponentName), propget, helpcontext(HELPID_MsispyProfile_GetComponentName), helpstring("Returns the name of the component whose GUID is passed in")]
				BSTR GetComponentName([in] BSTR componentGuid);
			[id(DISPID_MsispyProfile_GetProductInfo), propget, helpcontext(HELPID_MsispyProfile_GetProductInfo), helpstring("Returns info on a product based on the case-sensitive productAttribute")]
				BSTR GetProductInfo([in] BSTR productCode, [in] BSTR productAttribute);
			[id(DISPID_MsispyProfile_GetFeatureInfo), propget, helpcontext(HELPID_MsispyProfile_GetFeatureInfo), helpstring("Returns info on a feature based on the case-sensitive featureAttribute")]
				BSTR GetFeatureInfo([in] BSTR productCode, [in] BSTR featureName, [in] BSTR featureAttribute);
			[id(DISPID_MsispyProfile_QueryProductState), propget, helpcontext(HELPID_MsispyProfile_QueryProductState), helpstring("Returns the numeric state of a product")]
				int QueryProductState([in] BSTR productCode);
			[id(DISPID_MsispyProfile_QueryFeatureState), propget, helpcontext(HELPID_MsispyProfile_QueryFeatureState), helpstring("Returns the numeric state of a feature")]
				int QueryFeatureState([in] BSTR productCode, [in] BSTR featureName);
			[id(DISPID_MsispyProfile_QueryComponentState), propget, helpcontext(HELPID_MsispyProfile_QueryComponentState), helpstring("Returns the numeric state of a component")]
				int QueryComponentState([in] BSTR productCode, [in] BSTR componentGuid);
			[id(DISPID_MsispyProfile_GetFeatureUsage), propget, helpcontext(HELPID_MsispyProfile_GetFeatureUsage), helpstring("Returns the usage-count of a feature")]
				long GetFeatureUsage([in] BSTR productCode, [in] BSTR featureName);
			[id(DISPID_MsispyProfile_GetClientFromComponent), propget, helpcontext(HELPID_MsispyProfile_GetClientFromComponent), helpstring("Returns product codes of products that use a component, on a 0-based index")]
				BSTR GetClientFromComponent([in] BSTR componentGuid, [in] long clientIndex);
			[id(DISPID_MsispyProfile_GetFileFromComponent), propget, helpcontext(HELPID_MsispyProfile_GetFileFromComponent), helpstring("20. No help available!")]
				BSTR GetFileFromComponent([in] BSTR componentGuid, [in] long productIndex);
			[id(DISPID_MsispyProfile_GetFileInfo), propget, helpcontext(HELPID_MsispyProfile_GetFileInfo), helpstring("Returns info on a file based on the case-sensitive fileAttribute")]
				BSTR GetFileInfo([in] BSTR productCode, [in] BSTR ComponentGuid, [in] BSTR fileName, [in] BSTR fileAttribute);
			[id(DISPID_MsispyProfile_GetComponentLocation), propget, helpcontext(HELPID_MsispyProfile_GetComponentLocation), helpstring("Returns the full path of an installed component")]
				BSTR GetComponentLocation([in] BSTR componentGuid);
	};


	[
		uuid(000C1125-0000-0000-C000-000000000046),  // IID_IMsispyRegistry
		helpcontext(HELPID_MsispyRegistry),helpstring("MsispyRegistry object.")
	]
	dispinterface MsispyRegistry
	{
		properties:
		methods:
			[id(DISPID_MsispyRegistry_Open), helpcontext(HELPID_MsispyRegistry_Open), helpstring("MsispyRegistry.Open action: opens a registry object")]
				void Open();
			[id(DISPID_MsispyRegistry_Close), helpcontext(HELPID_MsispyRegistry_Close), helpstring("MsispyRegistry.Close action: closes a registry object")]
				void Close();
			[id(DISPID_MsispyRegistry_GetProduct), propget, helpcontext(HELPID_MsispyRegistry_GetProduct), helpstring("Returns product codes from the registry, on a 0-based index")]
				BSTR GetProduct([in] long productIndex);
			[id(DISPID_MsispyRegistry_GetFeatureFromProduct), propget, helpcontext(HELPID_MsispyRegistry_GetFeatureFromProduct), helpstring("Returns names of features of a product, on a 0-based index")]
				BSTR GetFeatureFromProduct([in] BSTR productCode, [in] long featureIndex);
			[id(DISPID_MsispyRegistry_GetComponent), propget, helpcontext(HELPID_MsispyRegistry_GetComponent), helpstring("Returns component GUIDs from the registry, on a 0-based index")]
				BSTR GetComponent([in] long componentIndex);
			[id(DISPID_MsispyRegistry_GetComponentFromProduct), propget, helpcontext(HELPID_MsispyRegistry_GetComponentFromProduct), helpstring("Returns GUIDs of components of a product, on a 0-based index")]
				BSTR GetComponentFromProduct([in] BSTR productCode, [in] long componentIndex);
			[id(DISPID_MsispyRegistry_GetComponentFromFeature), propget, helpcontext(HELPID_MsispyRegistry_GetComponentFromFeature), helpstring("Returns GUIDs of components of a feature, on a 0-based index")]
				BSTR GetComponentFromFeature([in] BSTR productCode, [in] BSTR featureName, [in] long componentIndex);
			[id(DISPID_MsispyRegistry_GetComponentName), propget, helpcontext(HELPID_MsispyRegistry_GetComponentName), helpstring("Returns the name of the component whose GUID is passed in")]
				BSTR GetComponentName([in] BSTR componentGuid);
			[id(DISPID_MsispyRegistry_GetProductInfo), propget, helpcontext(HELPID_MsispyRegistry_GetProductInfo), helpstring("Returns info on a product based on the case-sensitive productAttribute")]
				BSTR GetProductInfo([in] BSTR productCode, [in] BSTR productAttribute);
			[id(DISPID_MsispyRegistry_GetFeatureInfo), propget, helpcontext(HELPID_MsispyRegistry_GetFeatureInfo), helpstring("Returns info on a feature based on the case-sensitive featureAttribute")]
				BSTR GetFeatureInfo([in] BSTR productCode, [in] BSTR featureName, [in] BSTR featureAttribute);
			[id(DISPID_MsispyRegistry_QueryProductState), propget, helpcontext(HELPID_MsispyRegistry_QueryProductState), helpstring("Returns the numeric state of a product")]
				int QueryProductState([in] BSTR productCode);
			[id(DISPID_MsispyRegistry_QueryFeatureState), propget, helpcontext(HELPID_MsispyRegistry_QueryFeatureState), helpstring("Returns the numeric state of a feature")]
				int QueryFeatureState([in] BSTR productCode, [in] BSTR featureName);
			[id(DISPID_MsispyRegistry_QueryComponentState), propget, helpcontext(HELPID_MsispyRegistry_QueryComponentState), helpstring("Returns the numeric state of a component")]
				int QueryComponentState([in] BSTR productCode, [in] BSTR componentGuid);
			[id(DISPID_MsispyRegistry_GetFeatureUsage), propget, helpcontext(HELPID_MsispyRegistry_GetFeatureUsage), helpstring("Returns the usage-count of a feature")]
				long GetFeatureUsage([in] BSTR productCode, [in] BSTR featureName);
			[id(DISPID_MsispyRegistry_GetClientFromComponent), propget, helpcontext(HELPID_MsispyRegistry_GetClientFromComponent), helpstring("Returns product codes of products that use a component, on a 0-based index")]
				BSTR GetClientFromComponent([in] BSTR componentGuid, [in] long clientIndex);
			[id(DISPID_MsispyRegistry_GetFileFromComponent), propget, helpcontext(HELPID_MsispyRegistry_GetFileFromComponent), helpstring("20. No help available!")]
				BSTR GetFileFromComponent([in] BSTR componentGuid, [in] long productIndex);
			[id(DISPID_MsispyRegistry_GetFileInfo), propget, helpcontext(HELPID_MsispyRegistry_GetFileInfo), helpstring("Returns info on a file based on the case-sensitive fileAttribute")]
				BSTR GetFileInfo([in] BSTR productCode, [in] BSTR ComponentGuid, [in] BSTR fileName, [in] BSTR fileAttribute);
			[id(DISPID_MsispyRegistry_GetComponentLocation), propget, helpcontext(HELPID_MsispyRegistry_GetComponentLocation), helpstring("Returns the full path of an installed component")]
				BSTR GetComponentLocation([in] BSTR componentGuid);
	};

};
