;; --------------------------------------------------------------------
;; --------------------------------------------------------------------
;;
;; This file must be in Windows directory to take effect.
;;
;; To use, add up the flags that you want enabled (listed in the comments)
;; and then set the appropriate flag key to that value.  If this
;; file is not found, then the flags will be assumed to have the value
;; listed as default.

;; NOTE TO DEVS: To change default behavior modify appropriate #define in
;; mars\lib\debug.cpp   Also note change here.

[MARSCORE]

; BreakFlags:
;    0x00000001     Break on ASSERTs        BF_ASSERT
;    0x00000002     Break on TF_ERROR       BF_ONTRACEERROR
;    0x00000004     Break on TF_WARNING     BF_ONTRACEWARNING
;    0x00000008     Break on Leaks          BF_LEAKS
;    0x00000010     Break on RIPS           BF_RIPS
;    0x00000020     Break on script breaks  BF_SCRIPT
;    0x00000040     Break on variable       BF_VALIDATEVARS
;                   validation failures
;    0x00000080     Break on TraceResult    BF_TRACERESULT
;                   failures
;    0x00000100     if BF_ASSERT is set,    BF_POPUPASSERT
;                   prompt via messagebox
;                   whether or not to break
;
;    Default:  0x0000001b       (BF_ASSERT | BF_ONTRACEERROR | BF_LEAKS | BF_RIPS)
;
;    NOTE: This setting will have no effect in retail builds.

BreakFlags=0x0000001b


; TraceFlags:
;    0x0000000000000001     Always show message       TF_ALWAYS
;    0x0000000000000002     This is an error cond.    TF_ERROR
;    0x0000000000000004     This is a warning         TF_WARNING
;    0x0000000000000008     Function Entry/Exit       TF_FUNCENTER
;    0x0000000000000010     IUnknown Entry/Exit       TF_PUNKENTER
;    0x0000000000000020     Show variable             TF_VALIDATEVARS
;                           validation failures
;    0x0000000000000040     Show RIP messages         TF_RIP
;    0x0000000000000080     Show TraceResults         TF_TRACERESULT
;    0x0000000000000100     Show function name for    TF_FUNCNAMES
;                           each trace (need symbols)
;
;    0x0000000000001000     Panel related messages    TF_PANEL
;    0x0000000000002000     Place related messages    TF_PLACE
;    0x0000000000004000     Passport Login messages   TF_PPLOGIN
;    0x0000000000008000     TravelLog messages        TF_TRAVELLOG
;    0x0000000000010000     Download Manager messages TF_DLMGR
;    0x0000000000020000     Topics messages           TF_TOPICS
;    0x0000000000040000     XML Parsing messages      TF_XMLPARSING
;    0x0000000000080000     MARS protocol/store msgs  TF_PROT_STORE
;    0x0000000000100000                               TF_DYNCONTENT
;    0x0000000000200000                               TF_SCRIPT
;    0x0000000000400000                               TF_PALETTE
;    0x0000000000800000                               TF_UIACT_AND_KBD
;    0x0000000001000000     Memory usage stats        TF_MEMUSAGE
;    0x0000000002000000     dhtml Behaviors           TF_BEHAVIORS
;    0x0000000004000000     Notifications messages    TF_NOTIFICATIONS
;    0x0000000008000000     Parental Controls system  TF_PARENTALCONTROLS
;    0x0000000010000000     Mars logging              TF_LOGGING
;    0x0000000020000000     IntelliForms              TF_IFORMS
;    0x0000000040000000     Messenger                 TF_MESSENGER
;
;    Default:   0x0000000000200047      (TF_ALWAYS | TF_ERROR | TF_WARNING |
;                                        TF_RIP | TF_SCRIPT)

TraceFlags=0x0000000000200047

; If either TF_FUNCENTER or TF_PUNKENTER is set, then TraceExcludeFiles and
; TraceIncludeFiles can be used to refine the files which will have FunctionTracing
; turned on.  Note that if a TraceExcludeFiles entry is found, then the TraceIncludeFiles
; entry will be ignored.  Write file names in ALL LOWERCASE.  Full path from mars is
; only necessary if there are multiple files with the same name in different directories.
;
; TraceExcludeFiles=\marscore\panel.cpp;\marscore\external.cpp
; TraceIncludeFiles=\lib\debug.cpp


; ScriptTraceFlags
;    0x00000001     Always show message       STF_ALWAYS
;    0x00000002     This is an error cond.    STF_ERROR
;    0x00000004     This is a warning         STF_WARNING
;    0x00000008     LogScriptEvent coverage messages in debug uicvg builds
;
;    Default:       0x00000007  (STF_ALWAYS | STF_ERROR | STF_WARNING)

ScriptTraceFlags=0x00000007

; ConsoleWidth
;
; Here you can set the number of characters in your debug output console.  This is used in the
; character wrapping calculations for pretty output.  If you hate the wrapping like *foolish tnoonan*
; then you can set this to a really large value to turn off the wrapping!  Any value smaller than
; 73 characters will be read as 73 characters.
;
; Default:  80

ConsoleWidth=80


; AtlTraceFlags
;    (Application defined categories)
;    0x00000001     atlTraceUser
;    0x00000002     atlTraceUser2
;    0x00000004     atlTraceUser3
;    0x00000008     atlTraceUser4
;    (ATL defined categories)
;    0x00000020     atlTraceGeneral
;    0x00000040     atlTraceCOM
;    0x00000080     atlTraceQI
;    0x00000100     atlTraceRegistrar
;    0x00000200     atlTraceRefcount
;    0x00000400     atlTraceWindowing
;    0x00000800     atlTraceControls
;    0x00001000     atlTraceHosting
;    0x00002000     atlTraceDBClient
;    0x00004000     atlTraceDBProvider
;    0x00008000     atlTraceSnapin
;    0x00010000     atlTraceNotImpl
;
;    Default:  0x00000000

AtlTraceFlags=0x00000000

; DebugOMFlags:
;    0x00000001     Enable the debug OM     DF_OM_ENABLED
;                   functionality
;    0x00000002     Enable logging          DF_OM_LOG
;    0x00000004     Enable the console spew DF_CON_ENABLED
;                   window
;    0x00000008     waits for a keypress    DF_CON_WAITONEXIT
;                   before closing the
;                   console window
;    0x00000010     Also spew to StdOut     DF_STDOUT
;
;
;    Default:   (DF_OM_ENABLED | DF_OM_LOG | DF_CON_ENABLED | DF_CON_WAITONEXIT)

DebugOMFlags=0x0000000f


[MARS]

; BreakFlags:
;    0x00000001     Break on ASSERTs        BF_ASSERT
;    0x00000002     Break on TF_ERROR       BF_ONTRACEERROR
;    0x00000004     Break on TF_WARNING     BF_ONTRACEWARNING
;
;    Default:  0x00000001       (BF_ASSERT)

BreakFlags=0x00000001


; TraceFlags:
;    0x00000001     Always show message     TF_ALWAYS
;    0x00000002     This is an error cond.  TF_ERROR
;    0x00000004     This is a warning       TF_WARNING
;    0x00000008     Function Entry/Exit     TF_FUNCENTER
;    0x00000010     IUnknown Entry/Exit     TF_PUNKENTER
;    0x00001000     Ignore other instances  TF_OPENNEWPROCESS
;
;    Default:   0x00000007      (TF_ALWAYS | TF_ERROR | TF_WARNING)

TraceFlags=0x00000007

; ConsoleWidth
;
; Here you can set the number of characters in your debug output console.  This is used in the
; character wrapping calculations for pretty output.  If you hate the wrapping like *foolish tnoonan*
; then you can set this to a really large value to turn off the wrapping!  Any value smaller than
; 73 characters will be read as 73 characters.
;
; Default:  80

ConsoleWidth=80


; AtlTraceFlags
;    (Application defined categories)
;    0x00000001     atlTraceUser
;    0x00000002     atlTraceUser2
;    0x00000004     atlTraceUser3
;    0x00000008     atlTraceUser4
;    (ATL defined categories)
;    0x00000020     atlTraceGeneral
;    0x00000040     atlTraceCOM
;    0x00000080     atlTraceQI
;    0x00000100     atlTraceRegistrar
;    0x00000200     atlTraceRefcount
;    0x00000400     atlTraceWindowing
;    0x00000800     atlTraceControls
;    0x00001000     atlTraceHosting
;    0x00002000     atlTraceDBClient
;    0x00004000     atlTraceDBProvider
;    0x00008000     atlTraceSnapin
;    0x00010000     atlTraceNotImpl
;
;    Default:  0x00000000

AtlTraceFlags=0x00000000
