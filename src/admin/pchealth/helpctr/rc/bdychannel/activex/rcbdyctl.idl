// rcbdyctl.idl : IDL source for rcbdyctl.dll
//

// This file will be processed by the MIDL tool to
// produce the type library (rcbdyctl.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";
import "..\\im_inc\\sessions.idl";
#include "olectl.h"

interface IRecipients;

    [
        object,
        uuid(f3d16de6-045b-48cc-87ac-8ab75974685d),
        dual,
        helpstring("IIMSession Interface"),
        pointer_default(unique)
    ]
    interface IIMSession : IDispatch
    {
        [propput, id(1), helpstring("property OnSessionStatus")] HRESULT OnSessionStatus([in] IDispatch *pfn);
        [id(2), helpstring("Send Expert Ticket")] HRESULT SendOutExpertTicket(BSTR bstrTicket);
        [propget, id(3), helpstring("property ReceivedUserTicket")] HRESULT ReceivedUserTicket([out, retval] BSTR* pbstrVal);
        [propget, id(4), helpstring("property User")] HRESULT User([out, retval] IDispatch** ppUser);
        [id(5), helpstring("Send Invitation")] HRESULT HSC_Invite([in] IDispatch *pUser);
        [id(7), helpstring("ProcessContext")] HRESULT ProcessContext([in] BSTR pContext);
        [id(8), helpstring("Close RA Window")] HRESULT CloseRA();
        [id(9), helpstring("property GetLaunchingSession")] HRESULT GetLaunchingSession([in] LONG ID);
        [id(10), helpstring("HookUp existing session object")] HRESULT Hook(IMsgrSession*, HWND);
        [id(11), helpstring("Notify inviter/recipient")] HRESULT Notify(int);
        [id(12), helpstring("ContextDataProperty")] HRESULT ContextDataProperty([in] BSTR pName, [out, retval] BSTR* ppValue);
        [propget, id(13), helpstring("IsInviter")] HRESULT IsInviter([out, retval] BOOL* ppValue);
    };
        
    [
        object,
        uuid(0108a95e-b23e-4372-841b-8153fd529a6e),
        dual,
        helpstring("IConnection Interface"),
        pointer_default(unique)
    ]
    interface IConnection : IDispatch
    {
        [id(5), helpstring("method NotifyStub")] HRESULT NotifyStub();
        [propget, id(8), helpstring("property ReceivedData")] HRESULT ReceivedData([out, retval] BSTR *pVal);
        [id(9), helpstring("method SendData")] HRESULT SendData(BSTR bstrData);
        [id(10), helpstring("method SendDataFromFile")] HRESULT SendDataFromFile(BSTR bstrFile);
    };
    [
        object,
        uuid(954DC5AB-4F3B-493b-AF10-30FF50A38143),
        dual,
        helpstring("IDisplay Interface"),
        pointer_default(unique)
    ]
    interface IDisplay : IDispatch
    {
        [propget, id(1), helpstring("perperty PixBits")] HRESULT PixBits([out, retval] LONG *lbits);
        [propput, id(1), helpstring("perperty PixBits")] HRESULT PixBits(LONG bits);
        [propput, id(2), helpstring("perperty WallPaper")] HRESULT WallPaper(BOOL fOn);
    };
    [
        object,
        uuid(11685FCA-2787-4235-ACE5-AA92AF5DD900),
        dual,
        helpstring("Ismapi Interface"),
        pointer_default(unique)
    ]
    interface Ismapi : IDispatch
    {
        [id(1), helpstring("method Logon")] HRESULT Logon([out,retval]ULONG *plRet);
        [id(2), helpstring("method Logoff")] HRESULT Logoff();
        [id(3), helpstring("method OpenAddressBox")] HRESULT OpenAddressBox();
        [id(4), helpstring("method AddRecipient")] HRESULT AddRecipient(BSTR newRecip);
        [id(5), helpstring("method ClearRecipList")] HRESULT ClearRecipList();
        [id(6), helpstring("method SendMail")] HRESULT SendMail([out, retval] LONG* plStatus);
        [propget, id(7), helpstring("property Recipients")] HRESULT Recipients([out, retval] IRecipients* *pVal);
        [propget, id(8), helpstring("property Subject")] HRESULT Subject([out, retval] BSTR *pVal);
        [propput, id(8), helpstring("property Subject")] HRESULT Subject([in] BSTR newVal);
        [propget, id(9), helpstring("property Body")] HRESULT Body([out, retval] BSTR *pVal);
        [propput, id(9), helpstring("property Body")] HRESULT Body([in] BSTR newVal);
        [propget, id(10), helpstring("property AttachedXMLFile")] HRESULT AttachedXMLFile([out, retval] BSTR *pVal);
        [propput, id(10), helpstring("property AttachedXMLFile")] HRESULT AttachedXMLFile([in] BSTR newVal);
        [propget, id(11), helpstring("property SMAPI email client")] HRESULT SMAPIClientName([out, retval] BSTR *pVal);
        [propget, id(12), helpstring("property IsSMAPIClient_OE")] HRESULT IsSMAPIClient_OE([out, retval] LONG *pVal);
        [propget, id(13), helpstring("Reload")] HRESULT Reload([out, retval] LONG* pVal);
    };
    
    [
        object,
        uuid(6A5ED548-6DFD-4C7B-B377-526899D148B1),
        dual,
        helpstring("IRecipient Interface"),
        pointer_default(unique)
    ]
    interface IRecipient : IDispatch
    {
        [propget, id(1), helpstring("property Name")] HRESULT Name([out, retval] BSTR *pVal);
        [propput, id(1), helpstring("property Name")] HRESULT Name([in] BSTR newVal);
        [propget, id(2), helpstring("property Address")] HRESULT Address([out, retval] BSTR *pVal);
        [propput, id(2), helpstring("property Address")] HRESULT Address([in] BSTR newVal);
    };

    [
        object,
        uuid(22FF2143-D949-47ed-B912-AADE1E3B67F3),
        dual,
        helpstring("ISetting Interface"),
        pointer_default(unique)
    ]
    interface ISetting : IDispatch
    {
        [propget, id(1), helpstring("property GetIPAddress")] HRESULT GetIPAddress([out, retval] BSTR *pVal);
        //[propget, id(2), helpstring("property GetUserTempFileName")] HRESULT GetUserTempFileName([out, retval] BSTR *pVal);
        //[id(3), helpstring("method GetProfileString")] HRESULT GetProfileString([in] BSTR section, [out, retval] BSTR* pVal);
        //[id(4), helpstring("method SetProfileString")] HRESULT SetProfileString([in] BSTR section, [in] BSTR newVal);
        [propget, id(5), helpstring("property CreatePassword")] HRESULT CreatePassword([out, retval] BSTR *pVal);
        [propget, id(6), helpstring("property GetPropertyInBlob")] HRESULT GetPropertyInBlob([in] BSTR bstrBlob, [in] BSTR bstrName, [out, retval] BSTR *pVal);


   };
    
    [
        object,
        uuid(5049BF87-9BA1-4B8E-8FEC-5AD21D9C63AC),
        dual,
        helpstring("IRecipients Interface"),
        pointer_default(unique)
    ]
    interface IRecipients : IDispatch
    {
        [propget, id(DISPID_NEWENUM), helpstring("property _NewEnum")] HRESULT _NewEnum([out, retval] LPUNKNOWN *pVal);
        [propget, id(DISPID_VALUE), helpstring("property Item")] HRESULT Item(LONG vIndex, [out, retval] IRecipient* *pVal);
        [propget, id(1), helpstring("property Count")] HRESULT Count([out, retval] long *pVal);
    };
    
[
    uuid(D149C2B1-25BB-4D8C-9684-2696FDA4AF60),
    version(1.0),
    helpstring("rcbdyctl 1.0 Type Library")
]
library RCBDYCTLLib
{
    importlib("stdole32.tlb");
    importlib("stdole2.tlb");
    [
        uuid(a93bf5a1-443d-48fe-921a-244d3afa7ed4),
        helpstring("IMSession Class")
    ]
    coclass IMSession
    {
        [default] interface IIMSession;
    };
    [
        uuid(5E7C299F-6EAD-4F6D-AFC0-B6972931517D),
        helpstring("smapi Class")
    ]
    coclass smapi
    {
        [default] interface Ismapi;
    };
    
    [
        uuid(0F59E739-5A8A-4411-B246-0B8968054D93),
        helpstring("Recipient Class")
    ]
    coclass Recipient
    {
        [default] interface IRecipient;
    };
    
    [
        uuid(92E4A8C4-4DE4-4E62-9025-63D975ACA4C1),
        helpstring("Recipients Class")
    ]
    coclass Recipients
    {
        [default] interface IRecipients;
    };

    [
        uuid(BFB3EC07-A552-4f57-9CC5-06B02205C566),
        helpstring("Setting Class")
    ]
    coclass Setting
    {
        [default] interface ISetting;
    };

    [
        uuid(f0a45e65-84a6-4543-baf7-491d38de8e8b),
        helpstring("Connection Class")
    ]
    coclass Connection
    {
        [default] interface IConnection;
    };    
    
    [
        uuid(C2AEF40E-BE1F-4bae-A3D7-8F7531213DE8),
        helpstring("Display Class")
    ]
    coclass Display
    {
        [default] interface IDisplay;
    };

};
