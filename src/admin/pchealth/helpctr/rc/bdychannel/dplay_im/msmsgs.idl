// Generated .IDL file (by the OLE/COM Object Viewer)
// 
// typelib filename: msmsgs.exe

[
  uuid(218CB45F-20B6-11D2-8E17-0000F803A446),
  version(1.0),
  helpstring("Messenger Type Library")
]
library Messenger
{
    // TLib :     // TLib : OLE Automation : {00020430-0000-0000-C000-000000000046}
    importlib("stdole32.tlb");

    // Forward declare all types defined in this typelib
    interface IMsgrObject;
    interface IMsgrObject2;
    dispinterface DMsgrObjectEvents;
    interface IMsgrUser;
    interface IMsgrUser2;
    interface IMsgrUsers;
    interface IMsgrIMSession;
    interface IMsgrIMSessions;
    interface IMsgrServices;
    interface IMsgrService;
    interface IMessengerApp;
    interface IMessengerApp2;
    interface IMessengerIMWindow;
    interface IMessengerIMWindows;
    interface IMsgrOE;
    dispinterface DMsgrOEEvents;
    interface IMsgrUserOE;
    interface IMsgrUsersOE;
    interface IMsgrSP;
    interface IMsgrSP2;

    typedef enum {
        MSTATEOE_UNKNOWN = 0,
        MSTATEOE_OFFLINE = 1,
        MSTATEOE_ONLINE = 2,
        MSTATEOE_INVISIBLE = 6,
        MSTATEOE_BUSY = 10,
        MSTATEOE_BE_RIGHT_BACK = 14,
        MSTATEOE_IDLE = 18,
        MSTATEOE_AWAY = 34,
        MSTATEOE_ON_THE_PHONE = 50,
        MSTATEOE_OUT_TO_LUNCH = 66,
        MSTATEOE_LOCAL_FINDING_SERVER = 256,
        MSTATEOE_LOCAL_CONNECTING_TO_SERVER = 512,
        MSTATEOE_LOCAL_SYNCHRONIZING_WITH_SERVER = 768,
        MSTATEOE_LOCAL_DISCONNECTING_FROM_SERVER = 1024
    } MSTATEOE;

    typedef enum {
        MSGR_E_OE_CONNECT = -2130705663,
        MSGR_E_OE_INVALID_SERVER_NAME = -2130705662,
        MSGR_E_OE_INVALID_PASSWORD = -2130705661,
        MSGR_E_OE_ALREADY_LOGGED_ON = -2130705660,
        MSGR_E_OE_SERVER_VERSION = -2130705659,
        MSGR_E_OE_LOGON_TIMEOUT = -2130705658,
        MSGR_E_OE_LIST_FULL = -2130705657,
        MSGR_E_OE_AI_REJECT = -2130705656,
        MSGR_E_OE_AI_REJECT_NOT_INST = -2130705655,
        MSGR_E_OE_USER_NOT_FOUND = -2130705654,
        MSGR_E_OE_ALREADY_IN_LIST = -2130705653,
        MSGR_E_OE_DISCONNECTED = -2130705652,
        MSGR_E_OE_UNEXPECTED = -2130705651,
        MSGR_E_OE_SERVER_TOO_BUSY = -2130705650,
        MSGR_E_OE_INVALID_AUTH_PACKAGES = -2130705649,
        MSGR_E_OE_NEWER_CLIENT_AVAILABLE = -2130705648,
        MSGR_E_OE_AI_TIMEOUT = -2130705647,
        MSGR_E_OE_CANCEL = -2130705646,
        MSGR_E_OE_TOO_MANY_MATCHES = -2130705645,
        MSGR_E_OE_SERVER_UNAVAILABLE = -2130705644,
        MSGR_E_OE_LOGON_UI_ACTIVE = -2130705643,
        MSGR_E_OE_OPTION_UI_ACTIVE = -2130705642,
        MSGR_E_OE_CONTACT_UI_ACTIVE = -2130705641,
        MSGR_E_OE_FAIL = -2147467259,
        MSGR_S_OE_OK = 0
    } MSGR_OE_Constants;

    typedef enum {
        MSTATE_UNKNOWN = 0,
        MSTATE_OFFLINE = 1,
        MSTATE_ONLINE = 2,
        MSTATE_INVISIBLE = 6,
        MSTATE_BUSY = 10,
        MSTATE_BE_RIGHT_BACK = 14,
        MSTATE_IDLE = 18,
        MSTATE_AWAY = 34,
        MSTATE_ON_THE_PHONE = 50,
        MSTATE_OUT_TO_LUNCH = 66,
        MSTATE_LOCAL_FINDING_SERVER = 256,
        MSTATE_LOCAL_CONNECTING_TO_SERVER = 512,
        MSTATE_LOCAL_SYNCHRONIZING_WITH_SERVER = 768,
        MSTATE_LOCAL_DISCONNECTING_FROM_SERVER = 1024
    } MSTATE;

    typedef enum {
        MPROMPT_YES_IF_NOT_ALLOWED_OR_BLOCKED = 0,
        MPROMPT_NO_ADD_TO_ALLOW = 1
    } MPROMPT;

    typedef enum {
        MMSGPRIVACY_BLOCK_LIST_EXCLUDED = 0,
        MMSGPRIVACY_ALLOW_LIST_ONLY = 1
    } MMSGPRIVACY;

    typedef enum {
        MURLTYPE_CHANGE_PASSWORD = 0,
        MURLTYPE_CHANGE_INFO = 1,
        MURLTYPE_COMPOSE_EMAIL = 2,
        MURLTYPE_GO_TO_EMAIL_INBOX = 3,
        MURLTYPE_GO_TO_EMAIL_FOLDERS = 4,
        MURLTYPE_MOBILE_SIGNUP = 5,
        MURLTYPE_CHANGE_MOBILE_INFO = 6
    } MURLTYPE;

    typedef enum {
        MLIST_CONTACT = 0,
        MLIST_ALLOW = 1,
        MLIST_BLOCK = 2,
        MLIST_REVERSE = 3
    } MLIST;

    typedef enum {
        MMSGTYPE_NO_RESULT = 0,
        MMSGTYPE_ERRORS_ONLY = 1,
        MMSGTYPE_ALL_RESULTS = 2
    } MMSGTYPE;

    typedef enum {
        MUPDATE_OPTIONAL = 1,
        MUPDATE_MANDATORY = 2,
        MUPDATE_BRANDED = 4
    } MUPDATE_FLAGS;

    typedef enum {
        MIF_REQUEST_LAUNCH = 1,
        MIF_REQUEST_IP = 4,
        MIF_PROVIDE_IP = 8
    } MINVITE_FLAGS;

    typedef enum {
        MPFLFIELD_COUNTRY = 0,
        MPFLFIELD_POSTALCODE = 1,
        MPFLFIELD_LANG_PREFERENCE = 2,
        MPFLFIELD_GENDER = 3,
        MPFLFIELD_PREFERRED_EMAIL = 4,
        MPFLFIELD_NICKNAME = 5,
        MPFLFIELD_ACCESSIBILITY = 6,
        MPFLFIELD_WALLET = 7,
        MPFLFIELD_DIRECTORY = 8,
        MPFLFIELD_INETACCESS = 9
    } MPFLFIELD;

    typedef enum {
        MSGR_E_CONNECT = -2130705663,
        MSGR_E_INVALID_SERVER_NAME = -2130705662,
        MSGR_E_INVALID_PASSWORD = -2130705661,
        MSGR_E_ALREADY_LOGGED_ON = -2130705660,
        MSGR_E_SERVER_VERSION = -2130705659,
        MSGR_E_LOGON_TIMEOUT = -2130705658,
        MSGR_E_LIST_FULL = -2130705657,
        MSGR_E_AI_REJECT = -2130705656,
        MSGR_E_AI_REJECT_NOT_INST = -2130705655,
        MSGR_E_USER_NOT_FOUND = -2130705654,
        MSGR_E_ALREADY_IN_LIST = -2130705653,
        MSGR_E_DISCONNECTED = -2130705652,
        MSGR_E_UNEXPECTED = -2130705651,
        MSGR_E_SERVER_TOO_BUSY = -2130705650,
        MSGR_E_INVALID_AUTH_PACKAGES = -2130705649,
        MSGR_E_NEWER_CLIENT_AVAILABLE = -2130705648,
        MSGR_E_AI_TIMEOUT = -2130705647,
        MSGR_E_CANCEL = -2130705646,
        MSGR_E_TOO_MANY_MATCHES = -2130705645,
        MSGR_E_SERVER_UNAVAILABLE = -2130705644,
        MSGR_E_LOGON_UI_ACTIVE = -2130705643,
        MSGR_E_OPTION_UI_ACTIVE = -2130705642,
        MSGR_E_CONTACT_UI_ACTIVE = -2130705641,
        MSGR_E_PRIMARY_SERVICE_NOT_LOGGED_ON = -2130705640,
        MSGR_E_LOGGED_ON = -2130705639,
        MSGR_E_CONNECT_PROXY = -2130705638,
        MSGR_E_PROXY_AUTH = -2130705637,
        MSGR_E_PROXY_AUTH_TYPE = -2130705636,
        MSGR_E_INVALID_PROXY_NAME = -2130705635,
        MSGR_E_NOT_PRIMARY_SERVICE = -2130705632,
        MSGR_E_TOO_MANY_SESSIONS = -2130705631,
        MSGR_E_TOO_MANY_MESSAGES = -2130705630,
        MSGR_E_REMOTE_LOGIN = -2130705629,
        MSGR_E_INVALID_FRIENDLY_NAME = -2130705628,
        MSGR_E_SESSION_FULL = -2130705627,
        MSGR_E_NOT_ALLOWING_NEW_USERS = -2130705626,
        MSGR_E_INVALID_DOMAIN = -2130705625,
        MSGR_E_TCP_ERROR = -2130705624,
        MSGR_E_SESSION_TIMEOUT = -2130705623,
        MSGR_E_MULTIPOINT_SESSION_BEGIN_TIMEOUT = -2130705622,
        MSGR_E_MULTIPOINT_SESSION_END_TIMEOUT = -2130705621,
        MSGR_E_REVERSE_LIST_FULL = -2130705620,
        MSGR_E_SERVER_ERROR = -2130705619,
        MSGR_E_SYSTEM_CONFIG = -2130705618,
        MSGR_E_NO_DIRECTORY = -2130705617,
        MSGR_E_RETRY_SET = -2130705616,
        MSGR_E_CHILD_WITHOUT_CONSENT = -2130705615,
        MSGR_E_USER_CANCELLED = -2130705614,
        MSGR_E_CANCEL_BEFORE_CONNECT = -2130705613,
        MSGR_E_VOICE_IM_TIMEOUT = -2130705612,
        MSGR_E_NOT_ACCEPTING_PAGES = -2130705611,
        MSGR_E_EMAIL_PASSPORT_NOT_VALIDATED = -2130705610,
        MSGR_E_AUDIO_UI_ACTIVE = -2130705609,
        MSGR_E_NO_HARDWARE = -2130705608,
        MSGR_E_PAGING_UNAVAILABLE = -2130705607,
        MSGR_E_PHONE_INVALID_NUMBER = -2130705606,
        MSGR_E_PHONE_NO_FUNDS = -2130705605,
        MSGR_E_VOICE_NO_ANSWER = -2130705604,
        MSGR_E_VOICE_WAVEIN_DEVICE = -2130705603,
        MSGR_E_FT_TIMEOUT = -2130705602,
        MSGR_E_MESSAGE_TOO_LONG = -2130705601,
        MSGR_E_VOICE_FIREWALL = -2130705600,
        MSGR_E_VOICE_NETCONN = -2130705599,
        MSGR_E_PHONE_CIRCUITS_BUSY = -2130705598,
        MSGR_S_ALREADY_IN_THE_MODE = 16777985,
        MSGR_S_TRANSFER_SEND_BEGUN = 16777986,
        MSGR_S_TRANSFER_SEND_FINISHED = 16777987,
        MSGR_S_TRANSFER_RECEIVE_BEGUN = 16777988,
        MSGR_S_TRANSFER_RECEIVE_FINISHED = 16777989,
        MSGR_E_FAIL = -2147467259,
        MSGR_S_OK = 0
    } MSGRConstants;

    typedef enum {
        SSTATE_DISCONNECTED = 0,
        SSTATE_CONNECTING = 1,
        SSTATE_CONNECTED = 2,
        SSTATE_DISCONNECTING = 3,
        SSTATE_ERROR = 4
    } SSTATE;

    typedef enum {
        MFOLDER_INBOX = 0,
        MFOLDER_ALL_OTHER_FOLDERS = 1
    } MFOLDER;

    typedef enum {
        MLOPT_PROXY_STATE = 0,
        MLOPT_PROXY_TYPE = 1,
        MLOPT_SOCKS4_SERVER = 2,
        MLOPT_SOCKS5_SERVER = 3,
        MLOPT_HTTPS_SERVER = 4,
        MLOPT_SOCKS4_PORT = 5,
        MLOPT_SOCKS5_PORT = 6,
        MLOPT_HTTPS_PORT = 7,
        MLOPT_SOCKS5_USERNAME = 8,
        MLOPT_SOCKS5_PASSWORD = 9,
        MLOPT_SERVER_NAME = 10,
        MLOPT_ENABLE_IDLE_DETECT = 11,
        MLOPT_IDLE_THRESHOLD = 12,
        MLOPT_IDLE_DETECTABLE = 13,
        MLOPT_SS_DETECTABLE = 14
    } MLOCALOPTION;

    typedef enum {
        MUSERPROP_INVALID_PROPERTY = -1,
        MUSERPROP_HOME_PHONE_NUMBER = 0,
        MUSERPROP_WORK_PHONE_NUMBER = 1,
        MUSERPROP_MOBILE_PHONE_NUMBER = 2,
        MUSERPROP_PAGES_ALLOWED = 3,
        MUSERPROP_NUMBER_OF_PUBLIC_PROPERTIES = 4,
        MUSERPROP_PAGES_ENABLED = 4,
        MUSERPROP_NUMBER_OF_PROPERTIES = 5
    } MUSERPROPERTY;

    typedef enum {
        MLOPT_MAX_SERVICE_STRING = 255,
        MLOPT_MAX_PROXY_STRING = 255,
        MLOPT_MAX_PORT_NUMBER = 65535,
        MLOPT_MAX_IDLE_THRESHOLD = 999
    } MLOCALOPTION_LIMITS;

    typedef enum {
        MPROXYTYPE_NO_PROXY = 0,
        MPROXYTYPE_SOCKS4 = 1,
        MPROXYTYPE_SOCKS5 = 2,
        MPROXYTYPE_HTTPS = 3
    } MPROXYTYPE;

    typedef enum {
        MOPTDLG_GENERAL_PAGE = 0,
        MOPTDLG_PRIVACY_PAGE = 1,
        MOPTDLG_EXCHANGE_PAGE = 2,
        MOPTDLG_ACCOUNTS_PAGE = 3,
        MOPTDLG_CONNECTION_PAGE = 4,
        MOPTDLG_PHONE_PAGE = 5
    } MOPTDLGPAGE;

    typedef enum {
        MSF_PRIMARY = 1,
        MSF_APP_INVITE = 2,
        MSF_MULTI_IM = 4,
        MSF_BLOCKING = 8,
        MSF_UNAME_IN_EMAIL_FMT = 16,
        MSF_LOCAL_LISTS = 32,
        MSF_FIND_USER = 64,
        MSF_INVITE_MAIL = 128,
        MSF_INTERNET = 256
    } MSERVICE_FLAGS;

    typedef enum {
        MFT_SAVE_PASSWORD = 0,
        MFT_DONT_SAVE_PASSWORD = 1,
        MFT_OVERWRITE_EXISTING = 2
    } MFIRSTTIME_FLAGS;

    typedef enum {
        MSS_LOGGED_ON = 0,
        MSS_NOT_LOGGED_ON = 1,
        MSS_LOGGING_ON = 2,
        MSS_LOGGING_OFF = 3
    } MSVCSTATUS;

    typedef enum {
        MFTF_SENDING = 4,
        MFTF_RECEIVING = 8,
        MFTF_CONNECTING = 16,
        MFTF_CONNECTED = 32,
        MFTF_DISCONNECTED = 64
    } MFILETRANSFER_FLAGS;

    [
      odl,
      uuid(218CB451-20B6-11D2-8E17-0000F803A446),
      helpstring("Messenger Object Interface"),
      dual,
      oleautomation
    ]
    interface IMsgrObject : IDispatch {
        [id(0x00000064), helpstring("Creates a user object.")]
        HRESULT CreateUser(
                        [in] BSTR bstrLogonName, 
                        [in] IMsgrService* pService, 
                        [out, retval] IMsgrUser** ppUser);
        [id(0x00000068), helpstring("Initiates a logon to a service.")]
        HRESULT Logon(
                        [in] BSTR bstrUser, 
                        [in] BSTR bstrPassword, 
                        [in] IMsgrService* pService);
        [id(0x00000069), helpstring("Initiates a logoff from all services.")]
        HRESULT Logoff();
        [id(0x60020003), propget, helpstring("Returns a list.")]
        HRESULT List(
                        [in] MLIST MLIST, 
                        [out, retval] IMsgrUsers** ppUsers);
        [id(0x60020004), propget, helpstring("Logon name.")]
        HRESULT LocalLogonName([out, retval] BSTR* pbstrName);
        [id(0x60020005), propget, helpstring("Friendly name.")]
        HRESULT LocalFriendlyName([out, retval] BSTR* pbstrName);
        [id(0x60020006), propput, helpstring("Local state.")]
        HRESULT LocalState([in] MSTATE pmState);
        [id(0x60020006), propget, helpstring("Local state.")]
        HRESULT LocalState([out, retval] MSTATE* pmState);
        [id(0x60020008), propput, helpstring("Message privacy setting.")]
        HRESULT MessagePrivacy([in] MMSGPRIVACY pmmpSetting);
        [id(0x60020008), propget, helpstring("Message privacy setting.")]
        HRESULT MessagePrivacy([out, retval] MMSGPRIVACY* pmmpSetting);
        [id(0x6002000a), propput, helpstring("Prompt setting.")]
        HRESULT Prompt([in] MPROMPT pmpSetting);
        [id(0x6002000a), propget, helpstring("Prompt setting.")]
        HRESULT Prompt([out, retval] MPROMPT* pmpSetting);
        [id(0x0000006c), helpstring("Invites another user to use an application.")]
        HRESULT SendAppInvite(
                        [in] IMsgrUser* pUser, 
                        [in] long lCookie, 
                        [in] BSTR bstrAppGUID, 
                        [in] BSTR bstrAppName, 
                        [in] BSTR bstrAppURL, 
                        [in] long lInviteType, 
                        [in] MMSGTYPE mmtType, 
                        [out, retval] long* plCookie);
        [id(0x0000006d), helpstring("Accepts an invitation to use an application.")]
        HRESULT SendAppInviteAccept(
                        [in] IMsgrUser* pUser, 
                        [in] long lCookie, 
                        [in] long lInviteType, 
                        [in] MMSGTYPE mmtType, 
                        [out, retval] long* plCookie);
        [id(0x0000006e), helpstring("Cancels an invitation to use an application.")]
        HRESULT SendAppInviteCancel(
                        [in] IMsgrUser* pUser, 
                        [in] long lCookie, 
                        [in] long hrReason, 
                        [in] MMSGTYPE mmtType, 
                        [out, retval] long* plCookie);
        [id(0x6002000f), propput, helpstring("Local options.")]
        HRESULT LocalOption(
                        [in] MLOCALOPTION option, 
                        [in] VARIANT pvSetting);
        [id(0x6002000f), propget, helpstring("Local options.")]
        HRESULT LocalOption(
                        [in] MLOCALOPTION option, 
                        [out, retval] VARIANT* pvSetting);
        [id(0x0000006f), helpstring("Finds a user.")]
        HRESULT FindUser(
                        [in] BSTR bstrFirstName, 
                        [in] BSTR bstrLastName, 
                        [in] BSTR bstrCity, 
                        [in] BSTR bstrState, 
                        [in] BSTR bstrCountry, 
                        [out, retval] long* plCookie);
        [id(0x00000070), helpstring("Sends invitation mail.")]
        HRESULT SendInviteMail(
                        [in] BSTR bstrEmailAddress, 
                        [in] long lFindCookie, 
                        [in] long lFindIndex, 
                        [in] long lLCID, 
                        [out, retval] long* plCookie);
        [id(0x00000071), helpstring("Requests the post script for this URL.")]
        HRESULT RequestURLPost(
                        [in] MURLTYPE muType, 
                        [in] BSTR bstrAdditionalInfo, 
                        [out, retval] long* plCookie);
        [id(0x60020014), propget, helpstring("Returns a list of IM sessions")]
        HRESULT IMSessions([out, retval] IMsgrIMSessions** ppIMSessions);
        [id(0x00000072), helpstring("Creates a new IM session.")]
        HRESULT CreateIMSession(
                        [in] VARIANT vUser, 
                        [out, retval] IMsgrIMSession** ppIMSession);
        [id(0x00000073), helpstring("Accepts a session request.")]
        HRESULT SessionRequestAccept(
                        [in] IMsgrIMSession* pIMsgrIMSession, 
                        [in] long hrReason);
        [id(0x00000074), helpstring("Cancels a session request.")]
        HRESULT SessionRequestCancel(
                        [in] IMsgrIMSession* pIMsgrIMSession, 
                        [in] long hrReason);
        [id(0x60020018), propget, helpstring("Returns a list of services")]
        HRESULT Services([out, retval] IMsgrServices** ppServices);
        [id(0x60020019), propget, helpstring("Returns the count of unread email")]
        HRESULT UnreadEmail(
                        [in] MFOLDER MFOLDER, 
                        [out, retval] long* pcUnreadEmail);
    };

    [
      odl,
      uuid(218CB455-20B6-11D2-8E17-0000F803A446),
      helpstring("Messenger Object Interface 2"),
      dual,
      oleautomation
    ]
    interface IMsgrObject2 : IMsgrObject {
        [id(0x00000075), helpstring("Requests to send a file to another user.")]
        HRESULT SendFileTransferInvite(
                        [in] IMsgrUser* pUser, 
                        [in] long lCookie, 
                        [in] BSTR bstrFilePath, 
                        [in] MMSGTYPE mmtType, 
                        [out, retval] long* plCookie);
        [id(0x00000076), helpstring("Accepts a request to send a file.")]
        HRESULT SendFileTransferInviteAccept(
                        [in] IMsgrUser* pUser, 
                        [in] long lCookie, 
                        [in] BSTR bstrFilePath, 
                        [in] MMSGTYPE mmtType, 
                        [out, retval] long* plCookie);
        [id(0x00000077), helpstring("Cancels a request to send a file.")]
        HRESULT SendFileTransferInviteCancel(
                        [in] IMsgrUser* pUser, 
                        [in] long lCookie, 
                        [in] long hrReason, 
                        [in] MMSGTYPE mmtType, 
                        [out, retval] long* plCookie);
        [id(0x00000078), helpstring("Cancels file transfer in progress.")]
        HRESULT CancelFileTransfer(
                        [in] IMsgrUser* pUser, 
                        [in] long lCookie, 
                        [in] long hrReason, 
                        [in] MMSGTYPE mmtType, 
                        [out, retval] long* plCookie);
        [id(0x00000079), helpstring("Retrieve status of a file transfer in progress.")]
        HRESULT FileTransferStatus(
                        [in] long lCookie, 
                        [in] IMsgrUser* pUser, 
                        [out] long* plStatus, 
                        [out] BSTR* pbstrFilePath, 
                        [out] long* plTotalBytes, 
                        [out] long* plBytesTransferred);
        [id(0x60030005), propput, helpstring("Generic API to get at some specific property of the user.")]
        HRESULT LocalProperty(
                        [in] MUSERPROPERTY ePropType, 
                        [in] VARIANT pvPropVal);
        [id(0x60030005), propget, helpstring("Generic API to get at some specific property of the user.")]
        HRESULT LocalProperty(
                        [in] MUSERPROPERTY ePropType, 
                        [out, retval] VARIANT* pvPropVal);
        [id(0x0000007d), helpstring("Send a page to a user.")]
        HRESULT SendPage(
                        [in] IMsgrUser* pUser, 
                        [in] BSTR bstrMessage, 
                        [in] MUSERPROPERTY ePhoneType, 
                        [out, retval] long* plCookie);
        [id(0x0000007e), helpstring("Sends custom invitation mail.")]
        HRESULT SendCustomInviteMail(
                        [in] BSTR bstrEmailAddress, 
                        [in] long lFindCookie, 
                        [in] long lFindIndex, 
                        [in] long lLCID, 
                        [in] BSTR bstrCustomText, 
                        [out, retval] long* plCookie);
    };

    [
      uuid(218CB452-20B6-11D2-8E17-0000F803A446),
      helpstring("Messenger Events Interface"),
      hidden
    ]
    dispinterface DMsgrObjectEvents {
        properties:
        methods:
            [id(0x00000064), helpstring("Logon attempt complete for this service.")]
            void OnLogonResult(
                            [in] long hr, 
                            [in] IMsgrService* pService);
            [id(0x00000065), helpstring("Logoff complete for all services.")]
            void OnLogoff();
            [id(0x0000007c), helpstring("Logoff complete for this service.")]
            void OnServiceLogoff(
                            [in] long hr, 
                            [in] IMsgrService* pService);
            [id(0x00000066), helpstring("Result from list add request.")]
            void OnListAddResult(
                            [in] long hr, 
                            [in] MLIST MLIST, 
                            [in] IMsgrUser* pUser);
            [id(0x00000067), helpstring("Result from list remove request.")]
            void OnListRemoveResult(
                            [in] long hr, 
                            [in] MLIST MLIST, 
                            [in] IMsgrUser* pUser);
            [id(0x00000068), helpstring("Result from message privacy setting change request.")]
            void OnMessagePrivacyChangeResult(
                            [in] long hr, 
                            [in] MMSGPRIVACY mmpSetting, 
                            [in] IMsgrService* pService);
            [id(0x00000069), helpstring("Result from prompt setting change request.")]
            void OnPromptChangeResult(
                            [in] long hr, 
                            [in] MPROMPT mpSetting, 
                            [in] IMsgrService* pService);
            [id(0x0000006a), helpstring("Result from name change request.")]
            void OnUserFriendlyNameChangeResult(
                            [in] long hr, 
                            [in] IMsgrUser* pUser, 
                            [in] BSTR bstrPrevFriendlyName);
            [id(0x0000006b), helpstring("User state changed.")]
            void OnUserStateChanged(
                            [in] IMsgrUser* pUser, 
                            [in] MSTATE mPrevState, 
                            [in, out] VARIANT_BOOL* pfEnableDefault);
            [id(0x0000006c), helpstring("Text message received.")]
            void OnTextReceived(
                            [in] IMsgrIMSession* pIMSession, 
                            [in] IMsgrUser* pSourceUser, 
                            [in] BSTR bstrMsgHeader, 
                            [in] BSTR bstrMsgText, 
                            [in, out] VARIANT_BOOL* pfEnableDefault);
            [id(0x00000089), helpstring("Message received from an SP.")]
            void OnSPMessageReceived(
                            [in] BSTR bstrMsgHeader, 
                            [in] BSTR bstrMsgText, 
                            [in] IMsgrService* pService);
            [id(0x0000006d), helpstring("Local friendly name changed.")]
            void OnLocalFriendlyNameChangeResult(
                            [in] long hr, 
                            [in] IMsgrService* pService, 
                            [in] BSTR bstrPrevFriendlyName);
            [id(0x0000006e), helpstring("Result from local state request.")]
            void OnLocalStateChangeResult(
                            [in] long hr, 
                            [in] MSTATE mLocalState, 
                            [in] IMsgrService* pService);
            [id(0x0000006f), helpstring("Application invitation received.")]
            void OnAppInviteReceived(
                            [in] IMsgrUser* pUser, 
                            [in] long lCookie, 
                            [in] BSTR bstrAppGUID, 
                            [in] BSTR bstrAppName, 
                            [in] BSTR bstrAppURL, 
                            [in] long lInviteType, 
                            [in, out] VARIANT_BOOL* pfEnableDefault);
            [id(0x00000070), helpstring("Application invitation accepted.")]
            void OnAppInviteAccepted(
                            [in] IMsgrUser* pUser, 
                            [in] long lCookie, 
                            [in] BSTR bstrIPAddress, 
                            [in] long lInviteType, 
                            [in, out] VARIANT_BOOL* pfEnableDefault);
            [id(0x00000071), helpstring("Application invitation cancelled.")]
            void OnAppInviteCancelled(
                            [in] IMsgrUser* pUser, 
                            [in] long lCookie, 
                            [in] long hrReason, 
                            [in, out] VARIANT_BOOL* pfEnableDefault);
            [id(0x00000072), helpstring("Result from send request.")]
            void OnSendResult(
                            [in] long hr, 
                            [in] long lCookie);
            [id(0x00000073), helpstring("Newer client is available.")]
            void OnNewerClientAvailable(
                            [in] BSTR bstrDownloadUrl, 
                            [in] BSTR bstrFallbackUrl, 
                            [in] long lUpdateFlags);
            [id(0x00000074), helpstring("Result from find request.")]
            void OnFindResult(
                            [in] long hr, 
                            [in] long lCookie, 
                            [in] long lFindIndex, 
                            [in] long lTotalResults, 
                            [in] BSTR bstrEmailAddress, 
                            [in] BSTR bstrFirstName, 
                            [in] BSTR bstrLastName, 
                            [in] BSTR bstrCity, 
                            [in] BSTR bstrState, 
                            [in] BSTR bstrCountry);
            [id(0x00000075), helpstring("Result from SendInviteMail or SendCustomInviteMail request.")]
            void OnInviteMailResult(
                            [in] long hr, 
                            [in] long lCookie);
            [id(0x00000076), helpstring("Result from URL request.")]
            void OnRequestURLResult(
                            [in] long hr, 
                            [in] long lCookie, 
                            [in] MURLTYPE muType, 
                            [in] BSTR bstrURL);
            [id(0x00000077), helpstring("Session state changed.")]
            void OnSessionStateChange(
                            [in] IMsgrIMSession* pIMSession, 
                            [in] SSTATE sPrevState);
            [id(0x00000078), helpstring("User joined a session.")]
            void OnUserJoin(
                            [in] IMsgrUser* pIMsgrUser, 
                            [in] IMsgrIMSession* pIMSession);
            [id(0x00000079), helpstring("User left a session.")]
            void OnUserLeave(
                            [in] IMsgrUser* pIMsgrUser, 
                            [in] IMsgrIMSession* pIMSession);
            [id(0x00000080), helpstring("User dropped from a session.")]
            void OnUserDropped(
                            [in] long hr, 
                            [in] IMsgrUser* pIMsgrUser, 
                            [in] IMsgrIMSession* pIMSession);
            [id(0x0000007a), helpstring("Request for a new session.")]
            void OnNewSessionRequest(
                            [in] IMsgrUser* pRequestUser, 
                            [in] IMsgrIMSession* pIMSession, 
                            [in, out] VARIANT_BOOL* pfEnableDefault);
            [id(0x0000007b), helpstring("Invite user result.")]
            void OnInviteUser(
                            [in] IMsgrUser* pIMsgrUser, 
                            [in] IMsgrIMSession* pIMSession, 
                            [in] long hr);
            [id(0x0000007d), helpstring("Primary service has been changed.")]
            void OnPrimaryServiceChanged([in] IMsgrService* pService);
            [id(0x0000007e), helpstring("Messenger is shutting down.")]
            void OnAppShutdown();
            [id(0x0000007f), helpstring("Unread email count has changed.")]
            void OnUnreadEmailChanged(
                            [in] MFOLDER MFOLDER, 
                            [in] long cUnreadEmail, 
                            [in, out] VARIANT_BOOL* pfEnableDefault);
            [id(0x00000081), helpstring("Result from post URL request.")]
            void OnRequestURLPostResult(
                            [in] long hr, 
                            [in] long lCookie, 
                            [in] MURLTYPE muType, 
                            [in] BSTR bstrURLPost);
            [id(0x00000083), helpstring("The trust of the site has changed.")]
            void OnTrustChanged();
            [id(0x00000084), helpstring("File transfer invitation received.")]
            void OnFileTransferInviteReceived(
                            [in] IMsgrUser* pUser, 
                            [in] long lCookie, 
                            [in] BSTR bstrFileName, 
                            [in] long lFileSize, 
                            [in, out] VARIANT_BOOL* pfEnableDefault);
            [id(0x00000085), helpstring("File transfer invitation accepted; transfer beginning.")]
            void OnFileTransferInviteAccepted(
                            [in] IMsgrUser* pUser, 
                            [in] long lCookie, 
                            [in, out] VARIANT_BOOL* pfEnableDefault);
            [id(0x00000086), helpstring("File transfer invitation cancelled.")]
            void OnFileTransferInviteCancelled(
                            [in] IMsgrUser* pUser, 
                            [in] long lCookie, 
                            [in] long hrReason, 
                            [in, out] VARIANT_BOOL* pfEnableDefault);
            [id(0x00000087), helpstring("File transfer invitation cancelled.")]
            void OnFileTransferCancelled(
                            [in] IMsgrUser* pUser, 
                            [in] long lCookie, 
                            [in] long hrReason, 
                            [in, out] VARIANT_BOOL* pfEnableDefault);
            [id(0x00000088), helpstring("File transfer invitation status change.")]
            void OnFileTransferStatusChange(
                            [in] IMsgrUser* pUser, 
                            [in] long lCookie, 
                            [in] long lStatus, 
                            [in] long hr, 
                            [in, out] VARIANT_BOOL* pfEnableDefault);
            [id(0x0000008d), helpstring("Result from property change request.")]
            void OnLocalPropertyChangeResult(
                            [in] long hr, 
                            [in] MUSERPROPERTY ePropType, 
                            [in] VARIANT vPropVal, 
                            [in] IMsgrService* pService);
            [id(0x0000008e), helpstring("Result from buddy property change notification.")]
            void OnBuddyPropertyChangeResult(
                            [in] long hr, 
                            [in] IMsgrUser* pUser, 
                            [in] MUSERPROPERTY ePropType, 
                            [in] VARIANT vPropVal, 
                            [in] IMsgrService* pService);
            [id(0x0000008f), helpstring("Notification received from an SP.")]
            void OnNotificationReceived(
                            [in] BSTR bstrNotification, 
                            [in] IMsgrService* pService);
    };

    [
      odl,
      uuid(218CB453-20B6-11D2-8E17-0000F803A446),
      helpstring("Messenger User Interface"),
      dual,
      oleautomation
    ]
    interface IMsgrUser : IDispatch {
        [id(0x60020000), propput, helpstring("Friendly Name of the user.")]
        HRESULT FriendlyName([in] BSTR pbstrFriendlyName);
        [id(0x60020000), propget, helpstring("Friendly Name of the user.")]
        HRESULT FriendlyName([out, retval] BSTR* pbstrFriendlyName);
        [id(0x60020002), propget]
        HRESULT EmailAddress([out, retval] BSTR* pbstrEmailAddress);
        [id(0x60020003), propget, helpstring("State of the user.")]
        HRESULT State([out, retval] MSTATE* pmState);
        [id(0x60020004), propget, helpstring("Logon Name of the user.")]
        HRESULT LogonName([out, retval] BSTR* pbstrLogonName);
        [id(0x00000065), helpstring("Send message to this user")]
        HRESULT SendText(
                        [in] BSTR bstrMsgHeader, 
                        [in] BSTR bstrMsgText, 
                        [in] MMSGTYPE mmtType, 
                        [out, retval] long* plCookie);
        [id(0x60020006), propget, helpstring("Get service object of the user.")]
        HRESULT Service([out, retval] IMsgrService** ppService);
    };

    [
      odl,
      uuid(218CB456-20B6-11D2-8E17-0000F803A446),
      helpstring("Messenger User Interface 2")
    ]
    interface IMsgrUser2 : IMsgrUser {
        [propput, helpstring("Generic API to get at some specific property of the user.")]
        HRESULT _stdcall Property(
                        [in] MUSERPROPERTY ePropType, 
                        [in] VARIANT pvPropVal);
        [propget, helpstring("Generic API to get at some specific property of the user.")]
        HRESULT _stdcall Property(
                        [in] MUSERPROPERTY ePropType, 
                        [out, retval] VARIANT* pvPropVal);
    };

    [
      odl,
      uuid(218CB454-20B6-11D2-8E17-0000F803A446),
      helpstring("Messenger Users Collection Interface"),
      dual,
      oleautomation
    ]
    interface IMsgrUsers : IDispatch {
        [id(0x60020000), propget, helpstring("Number of users.")]
        HRESULT Count([out, retval] long* pcUsers);
        [id(00000000), helpstring("Retrieves a specific user by index.")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] IMsgrUser** ppUser);
        [id(0x00000064), helpstring("Adds a user object to the collection.")]
        HRESULT Add([in] IMsgrUser* pUser);
        [id(0x00000065), helpstring("Removes a user object from the collection.")]
        HRESULT Remove([in] IMsgrUser* pUser);
        [id(0xfffffffc), propget, restricted, helpstring("Enumerates the users.")]
        HRESULT _NewEnum([out, retval] IUnknown** ppUnknown);
    };

    [
      odl,
      uuid(82E11592-20F5-11D2-91AD-0000F81FEFC9),
      helpstring("Messenger IM Session Interface"),
      dual,
      oleautomation
    ]
    interface IMsgrIMSession : IDispatch {
        [id(0x60020000), propget, helpstring("Returns a collection object of current recipients in the IM Session.")]
        HRESULT Members([out, retval] IMsgrUsers** ppUsers);
        [id(0x60020001), propget, helpstring("Session state.")]
        HRESULT State([out, retval] SSTATE* psState);
        [id(0x60020002), propget, helpstring("Service associated with session.")]
        HRESULT Service([out, retval] IMsgrService** ppService);
        [id(0x60020003), propget, helpstring("Returns a collection object of current invitees.")]
        HRESULT Invitees([out, retval] IMsgrUsers** ppUsers);
        [id(0x00000064), helpstring("Leaves IM session.")]
        HRESULT LeaveSession();
        [id(0x00000065), helpstring("Invites a new user to the session.")]
        HRESULT InviteUser([in] VARIANT vUser);
        [id(0x00000066), helpstring("Sends a text message.")]
        HRESULT SendText(
                        [in] BSTR bstrMsgHeader, 
                        [in] BSTR bstrMsgText, 
                        [in] MMSGTYPE mmtType, 
                        [out, retval] long* plCookie);
    };

    [
      odl,
      uuid(6FD143E6-20A5-11D2-91AD-0000F81FEFC9),
      helpstring("Messenger IM Sessions Collection Interface"),
      dual,
      oleautomation
    ]
    interface IMsgrIMSessions : IDispatch {
        [id(0x60020000), propget, helpstring("Number of IM Sessions.")]
        HRESULT Count([out, retval] long* pcSessions);
        [id(00000000), helpstring("Retrieves a specific IM Session by index.")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] IMsgrIMSession** ppIMSession);
        [id(0xfffffffc), propget, restricted, helpstring("Enumerates the IM Session.")]
        HRESULT _NewEnum([out, retval] IUnknown** ppUnknown);
    };

    [
      odl,
      uuid(659ECAD8-A5C0-11D2-A440-00C04F795683),
      helpstring("Messenger Services Interface"),
      dual,
      oleautomation
    ]
    interface IMsgrServices : IDispatch {
        [id(0x60020000), propput, helpstring("Primary service.")]
        HRESULT PrimaryService([in] IMsgrService* ppService);
        [id(0x60020000), propget, helpstring("Primary service.")]
        HRESULT PrimaryService([out, retval] IMsgrService** ppService);
        [id(0x60020002), propget, helpstring("Number of services.")]
        HRESULT Count([out, retval] long* pcServices);
        [id(00000000), helpstring("Retrieves a specific service by index.")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] IMsgrService** ppService);
        [id(0xfffffffc), propget, restricted, helpstring("Enumerates the services.")]
        HRESULT _NewEnum([out, retval] IUnknown** ppUnknown);
    };

    [
      odl,
      uuid(659ECAD9-A5C0-11D2-A440-00C04F795683),
      helpstring("Messenger Services Interface"),
      dual,
      oleautomation
    ]
    interface IMsgrService : IDispatch {
        [id(0x60020000), propget, helpstring("Service name.")]
        HRESULT ServiceName([out, retval] BSTR* pbstrServiceName);
        [id(0x60020001), propget, helpstring("Logon name.")]
        HRESULT LogonName([out, retval] BSTR* pbstrName);
        [id(0x60020002), propput, helpstring("Friendly name.")]
        HRESULT FriendlyName([in] BSTR pbstrName);
        [id(0x60020002), propget, helpstring("Friendly name.")]
        HRESULT FriendlyName([out, retval] BSTR* pbstrName);
        [id(0x60020004), propget, helpstring("Service capabilities.")]
        HRESULT Capabilities([out, retval] long* plCapabilities);
        [id(0x60020005), propget, helpstring("Service status.")]
        HRESULT Status([out, retval] MSVCSTATUS* pmStatus);
        [id(0x60020006), helpstring("Initiate a logoff from this service.")]
        HRESULT Logoff();
        [id(0x60020007), helpstring("Finds a user.")]
        HRESULT FindUser(
                        [in] BSTR bstrFirstName, 
                        [in] BSTR bstrLastName, 
                        [in] BSTR bstrCity, 
                        [in] BSTR bstrState, 
                        [in] BSTR bstrCountry, 
                        [out, retval] long* plCookie);
        [id(0x60020008), helpstring("Sends invitation mail.")]
        HRESULT SendInviteMail(
                        [in] BSTR bstrEmailAddress, 
                        [in] long lFindCookie, 
                        [in] long lFindIndex, 
                        [in] long lLCID, 
                        [out, retval] long* plCookie);
        [id(0x60020009), helpstring("Requests the post script for this type of URL.")]
        HRESULT RequestURLPost(
                        [in] MURLTYPE muType, 
                        [in] BSTR bstrAdditionalInfo, 
                        [out, retval] long* plCookie);
        [id(0x6002000a), propput, helpstring("Profile field.")]
        HRESULT ProfileField(
                        [in] MPFLFIELD MPFLFIELD, 
                        [in] VARIANT pvFieldValue);
        [id(0x6002000a), propget, helpstring("Profile field.")]
        HRESULT ProfileField(
                        [in] MPFLFIELD MPFLFIELD, 
                        [out, retval] VARIANT* pvFieldValue);
    };

    [
      odl,
      uuid(F3A614DD-ABE0-11D2-A441-00C04F795683),
      helpstring("Messenger Application Interface"),
      dual,
      oleautomation
    ]
    interface IMessengerApp : IDispatch {
        [id(0x60020000), propget, helpstring("Returns the application automation object.")]
        HRESULT Application([out, retval] IDispatch** ppDisp);
        [id(0x60020001), propget, helpstring("Returns the automation object of the container/parent if one exists or this automation object.")]
        HRESULT Parent([out, retval] IDispatch** ppDisp);
        [id(0x00000064), helpstring("Exits application.")]
        HRESULT Quit();
        [id(0x60020003), propget, helpstring("Returns name of the application.")]
        HRESULT Name([out, retval] BSTR* pbstrName);
        [id(0x60020004), propget, helpstring("Returns file specification of the application, including path.")]
        HRESULT FullName([out, retval] BSTR* pbstrFullName);
        [id(0x60020005), propget, helpstring("Returns the path to the application.")]
        HRESULT Path([out, retval] BSTR* pbstrPath);
        [id(0x000000c8), helpstring("Initiates Logon dialog.")]
        HRESULT LaunchLogonUI();
        [id(0x000000c9), helpstring("Initiates Options dialog.")]
        HRESULT LaunchOptionsUI([in] MOPTDLGPAGE MOPTDLGPAGE);
        [id(0x000000ca), helpstring("Initiates Add Contact dialog.")]
        HRESULT LaunchAddContactUI([in] BSTR bstrEMail);
        [id(0x000000cb), helpstring("Initiates Find Contact Dialog.")]
        HRESULT LaunchFindContactUI(
                        [in] BSTR bstrFirstName, 
                        [in] BSTR bstrLastName, 
                        [in] VARIANT vbstrCity, 
                        [in] VARIANT vbstrState, 
                        [in] VARIANT vbstrCountry);
        [id(0x000000d2), helpstring("Initiates IM Window.")]
        HRESULT LaunchIMUI(
                        [in] VARIANT vUser, 
                        [out, retval] IMessengerIMWindow** ppIMWindow);
        [id(0x6002000b), propget, helpstring("Collection of current IM Windows.")]
        HRESULT IMWindows([out, retval] IMessengerIMWindows** ppIMWindows);
        [id(0x6002000c), propget, helpstring("ToolBar visibility.")]
        HRESULT ToolBar([out, retval] VARIANT_BOOL* pBoolToolBar);
        [id(0x6002000c), propput, helpstring("ToolBar visibility.")]
        HRESULT ToolBar([in] VARIANT_BOOL pBoolToolBar);
        [id(0x6002000e), propget, helpstring("StatusBar visibility.")]
        HRESULT StatusBar([out, retval] VARIANT_BOOL* pBoolStatusBar);
        [id(0x6002000e), propput, helpstring("StatusBar visibility.")]
        HRESULT StatusBar([in] VARIANT_BOOL pBoolStatusBar);
        [id(0x60020010), propget, helpstring("Text of StatusBar.")]
        HRESULT StatusText([out, retval] BSTR* pbstrStatusText);
        [id(0x60020010), propput, helpstring("Text of StatusBar.")]
        HRESULT StatusText([in] BSTR pbstrStatusText);
        [id(0x60020012), propget, helpstring("Returns the Handle of the Application window.")]
        HRESULT HWND([out, retval] long* phWnd);
        [id(0x60020013), propget, helpstring("The horizontal position (pixels) of the Application window relative to the screen.")]
        HRESULT Left([out, retval] long* plLeft);
        [id(0x60020013), propput, helpstring("The horizontal position (pixels) of the Application window relative to the screen.")]
        HRESULT Left([in] long plLeft);
        [id(0x60020015), propget, helpstring("The vertical position (pixels) of the Application window relative to the screen.")]
        HRESULT Top([out, retval] long* plTop);
        [id(0x60020015), propput, helpstring("The vertical position (pixels) of the Application window relative to the screen.")]
        HRESULT Top([in] long plTop);
        [id(0x60020017), propget, helpstring("The horizontal dimension (pixels) of the Application window.")]
        HRESULT Width([out, retval] long* plWidth);
        [id(0x60020017), propput, helpstring("The horizontal dimension (pixels) of the Application window.")]
        HRESULT Width([in] long plWidth);
        [id(0x60020019), propget, helpstring("The vertical dimension (pixels) of the Application window.")]
        HRESULT Height([out, retval] long* plHeight);
        [id(0x60020019), propput, helpstring("The vertical dimension (pixels) of the Application window.")]
        HRESULT Height([in] long plHeight);
        [id(0x6002001b), propget, helpstring("Visibility of the application.")]
        HRESULT Visible([out, retval] VARIANT_BOOL* pBoolVisible);
        [id(0x6002001b), propput, helpstring("Visibility of the application.")]
        HRESULT Visible([in] VARIANT_BOOL pBoolVisible);
        [id(0x000000de), helpstring("Initiates a Logon without UI if connected to the network and user saved the password.")]
        HRESULT AutoLogon();
        [id(0x6002001e), propput, helpstring("Sets credentials and overrides the first time wizard.")]
        HRESULT FirstTimeCredentials(
                        [in] BSTR bstrUser, 
                        [in] BSTR bstrPassword, 
                        [in] IMsgrService* pService, 
                        [in] long rhs);
        [id(0x6002001f), propput, helpstring("Changes the cached password if the given user name matches the cached user name.")]
        HRESULT CachedPassword(
                        [in] BSTR bstrUser, 
                        [in] BSTR bstrPassword, 
                        [in] IMsgrService* pService, 
                        [in] VARIANT_BOOL rhs);
        [id(0x000000df), helpstring("Requests the post script for this type of URL.")]
        HRESULT RequestURLPost(
                        [in] MURLTYPE muType, 
                        [in] VARIANT vbstrAdditionalInfo);
        [id(0x000000e0), propput]
        HRESULT TaskbarIcon([in] VARIANT_BOOL pBoolVisible);
        [id(0x000000e0), propget]
        HRESULT TaskbarIcon([out, retval] VARIANT_BOOL* pBoolVisible);
    };

    [
      odl,
      uuid(FF55D627-CF5B-40DE-850F-62D20BC241C8),
      helpstring("Messenger Application Interface 2"),
      dual,
      oleautomation
    ]
    interface IMessengerApp2 : IMessengerApp {
        [id(0x000000e1), helpstring("Initiates Phone Window.")]
        HRESULT LaunchPhoneUI(
                        [in] VARIANT vUser, 
                        [in] MUSERPROPERTY ePhoneNumber);
        [id(0x000000e2), helpstring("Launches the audio tuning wizard.")]
        HRESULT LaunchAudioTuningWizard([in] long hwndParent);
    };

    [
      odl,
      uuid(35EDD1CD-1A8C-11D2-B49D-00C04FB90376),
      helpstring("Messenger IM Window Interface"),
      dual,
      oleautomation
    ]
    interface IMessengerIMWindow : IDispatch {
        [id(0x60020000), propget, helpstring("Returns the application automation object if accessible, this automation object otherwise.")]
        HRESULT Application([out, retval] IDispatch** ppDisp);
        [id(0x60020001), propget, helpstring("Returns the automation object of the container/parent if one exists or this automation object.")]
        HRESULT Parent([out, retval] IDispatch** ppDisp);
        [id(0x60020002), propget, helpstring("Returns the IMSession Object associated with this window.")]
        HRESULT IMSession([out, retval] IMsgrIMSession** ppIMSession);
        [id(0x60020003), propget, helpstring("Current history in the window.")]
        HRESULT History([out, retval] BSTR* pbstrHistory);
        [id(0x0000012c), helpstring("Sends a text message through the IM window.")]
        HRESULT SendText([in] BSTR bstrSendText);
        [id(0x0000012d), helpstring("Closes the IM window.")]
        HRESULT Close();
        [id(0x60020006), propget, helpstring("ToolBar visibility.")]
        HRESULT ToolBar([out, retval] VARIANT_BOOL* pBoolToolBar);
        [id(0x60020006), propput, helpstring("ToolBar visibility.")]
        HRESULT ToolBar([in] VARIANT_BOOL pBoolToolBar);
        [id(0x60020008), propget, helpstring("StatusBar visibility.")]
        HRESULT StatusBar([out, retval] VARIANT_BOOL* pBoolStatusBar);
        [id(0x60020008), propput, helpstring("StatusBar visibility.")]
        HRESULT StatusBar([in] VARIANT_BOOL pBoolStatusBar);
        [id(0x6002000a), propget, helpstring("Text of StatusBar.")]
        HRESULT StatusText([out, retval] BSTR* pbstrStatusText);
        [id(0x6002000a), propput, helpstring("Text of StatusBar.")]
        HRESULT StatusText([in] BSTR pbstrStatusText);
        [id(0x6002000c), propget, helpstring("Returns the Handle of the IM window.")]
        HRESULT HWND([out, retval] long* phWnd);
        [id(0x6002000d), propget, helpstring("The horizontal position (pixels) of the IM window relative to the screen.")]
        HRESULT Left([out, retval] long* plLeft);
        [id(0x6002000d), propput, helpstring("The horizontal position (pixels) of the IM window relative to the screen.")]
        HRESULT Left([in] long plLeft);
        [id(0x6002000f), propget, helpstring("The vertical position (pixels) of the IM window relative to the screen.")]
        HRESULT Top([out, retval] long* plTop);
        [id(0x6002000f), propput, helpstring("The vertical position (pixels) of the IM window relative to the screen.")]
        HRESULT Top([in] long plTop);
        [id(0x60020011), propget, helpstring("The horizontal dimension (pixels) of the IM window.")]
        HRESULT Width([out, retval] long* plWidth);
        [id(0x60020011), propput, helpstring("The horizontal dimension (pixels) of the IM window.")]
        HRESULT Width([in] long plWidth);
        [id(0x60020013), propget, helpstring("The vertical dimension (pixels) of the IM window.")]
        HRESULT Height([out, retval] long* plHeight);
        [id(0x60020013), propput, helpstring("The vertical dimension (pixels) of the IM window.")]
        HRESULT Height([in] long plHeight);
        [id(0x60020015), propget, helpstring("Visibility of the window.")]
        HRESULT Visible([out, retval] VARIANT_BOOL* pBoolVisible);
        [id(0x60020015), propput, helpstring("Visibility of the window.")]
        HRESULT Visible([in] VARIANT_BOOL pBoolVisible);
        [id(0x60020017), propget, helpstring("Returns a collection object of current recipients in the IM Window.")]
        HRESULT Members([out, retval] IMsgrUsers** ppUsers);
    };

    [
      odl,
      uuid(35EDD1CC-1A8C-11D2-B49D-00C04FB90376),
      helpstring("Messenger IM Windows Collection Interface"),
      dual,
      oleautomation
    ]
    interface IMessengerIMWindows : IDispatch {
        [id(0x60020000), propget, helpstring("Number of IM Windows.")]
        HRESULT Count([out, retval] long* pcWindows);
        [id(00000000), helpstring("Retrieves a specific IM Window by index.")]
        HRESULT Item(
                        [in] long Index, 
                        [out, retval] IMessengerIMWindow** ppIMWindow);
        [id(0xfffffffc), propget, restricted, helpstring("Enumerates the IM Windows.")]
        HRESULT _NewEnum([out, retval] IUnknown** ppUnknown);
    };

    [
      odl,
      uuid(59EC0340-7506-11D2-B05F-00C04F7F89FE),
      helpstring("Messenger Object for OE Private Interface"),
      hidden,
      oleautomation
    ]
    interface IMsgrOE : IUnknown {
        [helpstring("Creates a user object for OE.")]
        HRESULT _stdcall CreateUser(
                        [in] BSTR bstrLogonName, 
                        [out, retval] IMsgrUserOE** ppUserOE);
        [helpstring("Initiates a logoff.")]
        HRESULT _stdcall Logoff();
        [propget, helpstring("Returns the Contact list for OE.")]
        HRESULT _stdcall ContactList([out, retval] IMsgrUsersOE** ppUsersOE);
        [propget, helpstring("Logon name.")]
        HRESULT _stdcall LocalLogonName([out, retval] BSTR* pbstrName);
        [propput, helpstring("Local state.")]
        HRESULT _stdcall LocalState([in] MSTATEOE pmStateOE);
        [propget, helpstring("Local state.")]
        HRESULT _stdcall LocalState([out, retval] MSTATEOE* pmStateOE);
        [helpstring("Initiates a Logon without UI if connected to the network and user saved the password.")]
        HRESULT _stdcall AutoLogon();
        [helpstring("Initiates Logon dialog.")]
        HRESULT _stdcall LaunchLogonUI();
        [helpstring("Initiates Options dialog.")]
        HRESULT _stdcall LaunchOptionsUI();
        [helpstring("Initiates Add Contact dialog.")]
        HRESULT _stdcall LaunchAddContactUI([in] BSTR bstrEMail);
        [helpstring("Initiates IM Window.")]
        HRESULT _stdcall LaunchIMUI([in] VARIANT vUser);
        [helpstring("Establishes a connection between the IMsgrObjectOE and the client's sink")]
        HRESULT _stdcall AdviseOE(
                        [in] IUnknown* pUnk, 
                        [out, retval] long* plCookie);
        [helpstring("Terminates a connection between the IMsgrObjectOE and the client's sink")]
        HRESULT _stdcall UnadviseOE([in] long lCookie);
    };

    [
      uuid(59EC0341-7506-11D2-B05F-00C04F7F89FE),
      helpstring("Messenger Events for OE Private Interface"),
      hidden
    ]
    dispinterface DMsgrOEEvents {
        properties:
        methods:
            [id(0x00000064), helpstring("Logon attempt complete.")]
            void OnLogonResult([in] long hr);
            [id(0x00000065), helpstring("Logoff complete.")]
            void OnLogoff();
            [id(0x00000066), helpstring("Result from list add request.")]
            void OnContactListAddResult(
                            [in] long hr, 
                            [in] IMsgrUserOE* pUserOE);
            [id(0x00000067), helpstring("Result from list remove request.")]
            void OnContactListRemoveResult(
                            [in] long hr, 
                            [in] IMsgrUserOE* pUserOE);
            [id(0x0000006a), helpstring("Result from name change request.")]
            void OnUserFriendlyNameChangeResult(
                            [in] long hr, 
                            [in] IMsgrUserOE* pUserOE, 
                            [in] BSTR bstrPrevFriendlyName);
            [id(0x0000006b), helpstring("User state changed.")]
            void OnUserStateChanged(
                            [in] IMsgrUserOE* pUserOE, 
                            [in] MSTATEOE mPrevStateOE);
            [id(0x0000006e), helpstring("Result from local state request.")]
            void OnLocalStateChangeResult(
                            [in] long hr, 
                            [in] MSTATEOE mLocalStateOE);
    };

    [
      odl,
      uuid(59EC0342-7506-11D2-B05F-00C04F7F89FE),
      helpstring("Messenger User for OE Private Interface"),
      hidden,
      oleautomation
    ]
    interface IMsgrUserOE : IUnknown {
        [propget]
        HRESULT _stdcall FriendlyName([out, retval] BSTR* pbstrFriendlyName);
        [propget, helpstring("State of the user.")]
        HRESULT _stdcall State([out, retval] MSTATEOE* pmStateOE);
        [propget, helpstring("Logon Name of the user.")]
        HRESULT _stdcall LogonName([out, retval] BSTR* pbstrLogonName);
    };

    [
      odl,
      uuid(59EC0343-7506-11D2-B05F-00C04F7F89FE),
      helpstring("Messenger Users Collection for OE private Interface"),
      hidden,
      oleautomation
    ]
    interface IMsgrUsersOE : IUnknown {
        [propget, helpstring("Number of users.")]
        HRESULT _stdcall Count([out, retval] long* pcUsers);
        [helpstring("Retrieves a specific user by index.")]
        HRESULT _stdcall Item(
                        [in] long Index, 
                        [out, retval] IMsgrUserOE** ppUserOE);
        [helpstring("Adds a user object to the collection.")]
        HRESULT _stdcall Add([in] IMsgrUserOE* pUserOE);
        [helpstring("Removes a user object from the collection.")]
        HRESULT _stdcall Remove([in] IMsgrUserOE* pUserOE);
        [propget, restricted, helpstring("Enumerates the users.")]
        HRESULT _stdcall _NewEnum([out, retval] IUnknown** ppUnknown);
    };

    [
      odl,
      uuid(E5B42158-AF2C-11D2-8D9D-0000F875C541),
      helpstring("Messenger Service Provider Interface")
    ]
    interface IMsgrSP : IMsgrService {
        [helpstring("Initiate a logon to this service.")]
        HRESULT _stdcall Logon(
                        [in] BSTR bstrUser, 
                        [in] BSTR bstrPassword);
        [helpstring("Creates a user object.")]
        HRESULT _stdcall CreateUser(
                        [in] BSTR bstrLogonName, 
                        [out, retval] IMsgrUser** ppUser);
        [propget, helpstring("Returns a list.")]
        HRESULT _stdcall List(
                        [in] MLIST MLIST, 
                        [out, retval] IMsgrUsers** ppUsers);
        [propput, helpstring("Message privacy setting.")]
        HRESULT _stdcall MessagePrivacy([in] MMSGPRIVACY pmmpSetting);
        [propget, helpstring("Message privacy setting.")]
        HRESULT _stdcall MessagePrivacy([out, retval] MMSGPRIVACY* pmmpSetting);
        [propput, helpstring("Prompt setting.")]
        HRESULT _stdcall Prompt([in] MPROMPT pmpSetting);
        [propget, helpstring("Prompt setting.")]
        HRESULT _stdcall Prompt([out, retval] MPROMPT* pmpSetting);
        [propput, helpstring("Local state.")]
        HRESULT _stdcall LocalState([in] MSTATE pmState);
        [propget, helpstring("Local state.")]
        HRESULT _stdcall LocalState([out, retval] MSTATE* pmState);
        [helpstring("Add a buddy.")]
        HRESULT _stdcall AddBuddy(
                        [in] IMsgrUser* pBuddy, 
                        [in] MLIST MLIST);
        [helpstring("Remove a buddy.")]
        HRESULT _stdcall RemoveBuddy(
                        [in] IMsgrUser* pBuddy, 
                        [in] MLIST MLIST);
        [helpstring("Creates a new IM session.")]
        HRESULT _stdcall CreateIMSession(
                        [in] IMsgrUser* pUser, 
                        [out, retval] IMsgrIMSession** ppIMSession);
        [propget, helpstring("Returns a list of IM sessions")]
        HRESULT _stdcall IMSessions([out, retval] IMsgrIMSessions** ppIMSessions);
    };

    [
      odl,
      uuid(E5B42159-AF2C-11D2-8D9D-0000F875C541),
      helpstring("Messenger Service Provider Interface 2")
    ]
    interface IMsgrSP2 : IMsgrSP {
        [propget, helpstring("Returns the local IP address")]
        HRESULT _stdcall LocalIPAddress([out, retval] long* plAddr);
        [propput, helpstring("Generic API to get at some specific property of the user.")]
        HRESULT _stdcall LocalProperty(
                        [in] MUSERPROPERTY ePropType, 
                        [in] VARIANT pvPropVal);
        [propget, helpstring("Generic API to get at some specific property of the user.")]
        HRESULT _stdcall LocalProperty(
                        [in] MUSERPROPERTY ePropType, 
                        [out, retval] VARIANT* pvPropVal);
        [helpstring("Send a page to a user.")]
        HRESULT _stdcall SendPage(
                        [in] IMsgrUser* pUser, 
                        [in] BSTR bstrMessage, 
                        [in] MUSERPROPERTY ePhoneType, 
                        [out, retval] long* plCookie);
        [helpstring("Sends custom invitation mail.")]
        HRESULT _stdcall SendCustomInviteMail(
                        [in] BSTR bstrEmailAddress, 
                        [in] long lFindCookie, 
                        [in] long lFindIndex, 
                        [in] long lLCID, 
                        [in] BSTR bstrCustomText, 
                        [out, retval] long* plCookie);
    };

    [
      uuid(F3A614DC-ABE0-11D2-A441-00C04F795683),
      helpstring("Messenger Object")
    ]
    coclass MsgrObject {
        [default] interface IMsgrObject2;
        interface IMsgrObject;
        [default, source] dispinterface DMsgrObjectEvents;
    };

    [
      uuid(FB7199AB-79BF-11D2-8D94-0000F875C541),
      helpstring("Messenger Application"),
      appobject
    ]
    coclass MessengerApp {
        [default] interface IMessengerApp2;
        interface IMessengerApp;
        interface IMsgrOE;
    };
};
