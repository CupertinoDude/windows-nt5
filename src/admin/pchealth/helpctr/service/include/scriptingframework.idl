/******************************************************************************

Copyright (c) 1999-2000 Microsoft Corporation

Module Name:
    ScriptingFramework.idl

Abstract:
    This file contains the declaration of the set of  coclasses and interfaces
    implemented by the Scripting Framework.

Revision History:
    Davide Massarenti   (Dmassare)  07/21/99
        created

    Kalyani Narlanka    (KalyaniN)  03/15/01
        Moved Incident and Encryption Objects from HelpService to HelpCtr to improve Perf.

******************************************************************************/

cpp_quote( "#include <ScriptingFrameworkDID.h>" )
cpp_quote( "#include <rdshost.h>" )
#include <ScriptingFrameworkDID.h>

[
    object,
    uuid(833E4100-AFF7-4AC3-AAC2-9F24C1457BCE),
    dual,
    oleautomation,
    helpstring("IPCHCollection Interface"),
    pointer_default(unique)
]
interface IPCHCollection : IDispatch
{
    [propget, id(DISPID_NEWENUM)       ] HRESULT _NewEnum(                   [out, retval] IUnknown* *pVal    );
    [propget, id(DISPID_VALUE)         ] HRESULT Item    ( [in] long vIndex, [out, retval] VARIANT   *ppEntry );
    [propget, id(DISPID_PCH_COL__COUNT)] HRESULT Count   (                   [out, retval] long      *pVal    );
};

///////////////////////////////////////////////////////////////////////////////

[
    object,
    uuid(833E4101-AFF7-4AC3-AAC2-9F24C1457BCE),
    dual,
    oleautomation,
    helpstring("IPCHUtility Interface"),
    pointer_default(unique)
]
interface IPCHUtility : IDispatch
{
    //
    // Properties
    //
    [propget, id(DISPID_PCH_U__USERSETTINGS  )] HRESULT UserSettings  ( [out, retval] IPCHUserSettings*     *pVal );
    [propget, id(DISPID_PCH_U__CHANNELS      )] HRESULT Channels      ( [out, retval] ISAFReg*              *pVal );
    [propget, id(DISPID_PCH_U__SECURITY      )] HRESULT Security      ( [out, retval] IPCHSecurity*         *pVal );
    [propget, id(DISPID_PCH_U__DATABASE      )] HRESULT Database      ( [out, retval] IPCHTaxonomyDatabase* *pVal );

    ////////////////////////////////////////

    //
    // Methods
    //
    [id(DISPID_PCH_U__FORMATERROR)] HRESULT FormatError( [in] VARIANT vError, [out, retval] BSTR *pbstrVal );

    [id(DISPID_PCH_U__CREATEOBJECT_SEARCHENGINEMGR        )] HRESULT CreateObject_SearchEngineMgr         (                                                  [out, retval] IPCHSEManager*      *ppSE );
    [id(DISPID_PCH_U__CREATEOBJECT_DATACOLLECTION         )] HRESULT CreateObject_DataCollection          (                                                  [out, retval] ISAFDataCollection* *ppDC );
    [id(DISPID_PCH_U__CREATEOBJECT_CABINET                )] HRESULT CreateObject_Cabinet                 (                                                  [out, retval] ISAFCabinet*        *ppCB );
    [id(DISPID_PCH_U__CREATEOBJECT_ENCRYPTION             )] HRESULT CreateObject_Encryption              (                                                  [out, retval] ISAFEncrypt*        *ppEn );
    [id(DISPID_PCH_U__CREATEOBJECT_CHANNEL                )] HRESULT CreateObject_Channel                 ( [in] BSTR bstrVendorID, [in] BSTR bstrProductID, [out, retval] ISAFChannel*        *ppSh );

    [id(DISPID_PCH_U__CREATEOBJECT_REMOTEDESKTOPCONNECTION)] HRESULT CreateObject_RemoteDesktopConnection (                                                  [out, retval] ISAFRemoteDesktopConnection*        *ppRDC );
    [id(DISPID_PCH_U__CREATEOBJECT_REMOTEDESKTOPSESSION   )] HRESULT CreateObject_RemoteDesktopSession    ( [in] REMOTE_DESKTOP_SHARING_CLASS sharingClass,
                                                                                                            [in] long lTimeout                            ,
                                                                                                            [in] BSTR bstrConnectionParms                 ,
                                                                                                            [in] BSTR bstrUserHelpBlob                    ,
                                                                                                            [out, retval] ISAFRemoteDesktopSession* *ppRCS );


    [id(DISPID_PCH_U__CONNECTTOEXPERT                     )] HRESULT ConnectToExpert                      (  [in] BSTR bstrExpertConnectParm,
                                                                                                             [in] LONG lTimeout,
                                                                                                             [out, retval] LONG *lSafErrorCode);


    [id(DISPID_PCH_U__SWITCHDESKTOPMODE                   )] HRESULT SwitchDesktopMode                    (  [in] int nMode, 
	                                                                                                         [in] int nRAType);



};

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

[
    object,
    uuid(833E4108-AFF7-4AC3-AAC2-9F24C1457BCE),
    dual,
    oleautomation,
    helpstring("IPCHUserSettings Interface"),
    pointer_default(unique)
]
interface IPCHUserSettings : IDispatch
{
    //
    // Properties
    //
    [propget, id(DISPID_PCH_US__CURRENTSKU)] HRESULT CurrentSKU( [out, retval] IPCHSetOfHelpTopics* *pVal );
    [propget, id(DISPID_PCH_US__MACHINESKU)] HRESULT MachineSKU( [out, retval] IPCHSetOfHelpTopics* *pVal );


    [propget, id(DISPID_PCH_US__HELPLOCATION	)] HRESULT HelpLocation	   (                               [out, retval] BSTR *pVal );
    [propget, id(DISPID_PCH_US__DATABASEDIR 	)] HRESULT DatabaseDir 	   (                               [out, retval] BSTR *pVal );
    [propget, id(DISPID_PCH_US__DATABASEFILE	)] HRESULT DatabaseFile	   (                               [out, retval] BSTR *pVal );
    [propget, id(DISPID_PCH_US__INDEXFILE   	)] HRESULT IndexFile       ( [in,optional] VARIANT vScope, [out, retval] BSTR *pVal );
    [propget, id(DISPID_PCH_US__INDEXDISPLAYNAME)] HRESULT IndexDisplayName( [in,optional] VARIANT vScope, [out, retval] BSTR *pVal );
    [propget, id(DISPID_PCH_US__LASTUPDATED 	)] HRESULT LastUpdated 	   (                               [out, retval] DATE *pVal );

    [propget, id(DISPID_PCH_US__AREHEADLINESENABLED)] HRESULT AreHeadlinesEnabled( [out, retval] VARIANT_BOOL *pVal );
    [propget, id(DISPID_PCH_US__NEWS               )] HRESULT News               ( [out, retval] IUnknown*    *pVal );

    //
    // Methods
    //
    [id(DISPID_PCH_US__SELECT)] HRESULT Select( [in] BSTR bstrSKU, [in] long lLCID );
};

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

typedef [v1_enum] enum tagQR_NAVMODEL {
    QR_DEFAULT = 0x00000000,
    QR_DESKTOP = 0x00000001,
    QR_SERVER  = 0x00000002,
} QR_NAVMODEL;

[
    object,
    uuid(833E4110-AFF7-4AC3-AAC2-9F24C1457BCE),
    dual,
    oleautomation,
    helpstring("IPCHQueryResult Interface"),
    pointer_default(unique)
]
interface IPCHQueryResult : IDispatch
{
    //
    // Properties
    //
    [propget, id(DISPID_PCH_QR__CATEGORY       )] HRESULT Category       ( [out, retval] BSTR         *pVal );
    [propget, id(DISPID_PCH_QR__ENTRY          )] HRESULT Entry          ( [out, retval] BSTR         *pVal );
    [propget, id(DISPID_PCH_QR__TOPIC_URL      )] HRESULT TopicURL       ( [out, retval] BSTR         *pVal );
    [propget, id(DISPID_PCH_QR__ICON_URL       )] HRESULT IconURL        ( [out, retval] BSTR         *pVal );
    [propget, id(DISPID_PCH_QR__TITLE          )] HRESULT Title          ( [out, retval] BSTR         *pVal );
    [propget, id(DISPID_PCH_QR__DESCRIPTION    )] HRESULT Description    ( [out, retval] BSTR         *pVal );
    [propget, id(DISPID_PCH_QR__TYPE           )] HRESULT Type           ( [out, retval] long         *pVal );
    [propget, id(DISPID_PCH_QR__POS            )] HRESULT Pos            ( [out, retval] long         *pVal );
    [propget, id(DISPID_PCH_QR__VISIBLE        )] HRESULT Visible        ( [out, retval] VARIANT_BOOL *pVal );
    [propget, id(DISPID_PCH_QR__SUBSITE        )] HRESULT Subsite        ( [out, retval] VARIANT_BOOL *pVal );
    [propget, id(DISPID_PCH_QR__NAVIGATIONMODEL)] HRESULT NavigationModel( [out, retval] QR_NAVMODEL  *pVal );
    [propget, id(DISPID_PCH_QR__PRIORITY       )] HRESULT Priority       ( [out, retval] long         *pVal );

    //
    // Generated properties.
    //
    [propget, id(DISPID_PCH_QR__FULLPATH       )] HRESULT FullPath       ( [out, retval] BSTR         *pVal );
};

[
    object,
    uuid(833E4111-AFF7-4AC3-AAC2-9F24C1457BCE),
    dual,
    oleautomation,
    helpstring("IPCHTaxonomyDatabase Interface"),
    pointer_default(unique)
]
interface IPCHTaxonomyDatabase : IDispatch
{
    //
    // Properties
    //
    [propget, id(DISPID_PCH_TDB__INSTALLEDSKUS      )] HRESULT InstalledSKUs      ( [out, retval] IPCHCollection* *pVal );
    [propget, id(DISPID_PCH_TDB__HASWRITEPERMISSIONS)] HRESULT HasWritePermissions( [out, retval] VARIANT_BOOL    *pVal );


    //
    // Methods
    //
    [id(DISPID_PCH_TDB__LOOKUPNODE          )] HRESULT LookupNode          ( [in] BSTR bstrNode ,                                 [out, retval] IPCHCollection* *ppC );
    [id(DISPID_PCH_TDB__LOOKUPSUBNODES      )] HRESULT LookupSubNodes      ( [in] BSTR bstrNode , [in] VARIANT_BOOL fVisibleOnly, [out, retval] IPCHCollection* *ppC );
    [id(DISPID_PCH_TDB__LOOKUPNODESANDTOPICS)] HRESULT LookupNodesAndTopics( [in] BSTR bstrNode , [in] VARIANT_BOOL fVisibleOnly, [out, retval] IPCHCollection* *ppC );
    [id(DISPID_PCH_TDB__LOOKUPTOPICS        )] HRESULT LookupTopics        ( [in] BSTR bstrNode , [in] VARIANT_BOOL fVisibleOnly, [out, retval] IPCHCollection* *ppC );
    [id(DISPID_PCH_TDB__LOCATECONTEXT       )] HRESULT LocateContext       ( [in] BSTR bstrURL  , [in,optional] VARIANT vSubSite, [out, retval] IPCHCollection* *ppC );
    [id(DISPID_PCH_TDB__KEYWORDSEARCH       )] HRESULT KeywordSearch       ( [in] BSTR bstrQuery, [in,optional] VARIANT vSubSite, [out, retval] IPCHCollection* *ppC );

    [id(DISPID_PCH_TDB__GATHERNODES         )] HRESULT GatherNodes         ( [in] BSTR bstrNode , [in] VARIANT_BOOL fVisibleOnly, [out, retval] IPCHCollection* *ppC );
    [id(DISPID_PCH_TDB__GATHERTOPICS        )] HRESULT GatherTopics        ( [in] BSTR bstrNode , [in] VARIANT_BOOL fVisibleOnly, [out, retval] IPCHCollection* *ppC );


    [id(DISPID_PCH_TDB__CONNECTTODISK  )] HRESULT ConnectToDisk  ( [in] BSTR bstrDirectory , [in] IDispatch* notify, [out, retval] IPCHCollection* *ppC );
    [id(DISPID_PCH_TDB__CONNECTTOSERVER)] HRESULT ConnectToServer( [in] BSTR bstrServerName, [in] IDispatch* notify, [out, retval] IPCHCollection* *ppC );
    [id(DISPID_PCH_TDB__ABORT          )] HRESULT Abort          (                                                                                      );
};


typedef [v1_enum] enum tagSHT_STATUS {
    SHT_NOTACTIVE     = 0x00000000,
    SHT_QUERYING      = 0x00000001,
    SHT_QUERIED       = 0x00000002,
    SHT_COPYING_DB    = 0x00000003,
    SHT_COPYING_FILES = 0x00000004,
    SHT_INSTALLING    = 0x00000005,
    SHT_INSTALLED     = 0x00000006,
    SHT_UNINSTALLING  = 0x00000007,
    SHT_UNINSTALLED   = 0x00000008,
    SHT_ABORTING      = 0x00000009,
    SHT_ABORTED       = 0x0000000A,
    SHT_FAILED        = 0x0000000B,
} SHT_STATUS;

[
    object,
    uuid(833E4112-AFF7-4AC3-AAC2-9F24C1457BCE),
    dual,
    oleautomation,
    helpstring("IPCHSetOfHelpTopics Interface"),
    pointer_default(unique)
]
interface IPCHSetOfHelpTopics : IDispatch
{
    //
    // Properties
    //
    [propget, id(DISPID_PCH_SHT__SKU           )] HRESULT SKU           ( [out, retval] BSTR         *pVal     ); // Stock Keeping Unit
    [propget, id(DISPID_PCH_SHT__LANGUAGE      )] HRESULT Language      ( [out, retval] long         *pVal     );
    [propget, id(DISPID_PCH_SHT__DISPLAYNAME   )] HRESULT DisplayName   ( [out, retval] BSTR         *pVal     );
    [propget, id(DISPID_PCH_SHT__PRODUCTID     )] HRESULT ProductID     ( [out, retval] BSTR         *pVal     );
    [propget, id(DISPID_PCH_SHT__VERSION       )] HRESULT Version       ( [out, retval] BSTR         *pVal     );

    [propget, id(DISPID_PCH_SHT__LOCATION      )] HRESULT Location      ( [out, retval] BSTR         *pVal     );
    [propget, id(DISPID_PCH_SHT__EXPORTED      )] HRESULT Exported      ( [out, retval] VARIANT_BOOL *pVal     );
    [propput, id(DISPID_PCH_SHT__EXPORTED      )] HRESULT Exported      ( [in         ] VARIANT_BOOL  newVal   );

    [propput, id(DISPID_PCH_SHT__ONSTATUSCHANGE)] HRESULT onStatusChange( [in]          IDispatch*    function );
    [propget, id(DISPID_PCH_SHT__STATUS        )] HRESULT Status        ( [out, retval] SHT_STATUS   *pVal     );
    [propget, id(DISPID_PCH_SHT__ERRORCODE     )] HRESULT ErrorCode     ( [out, retval] long         *pVal     );

    [propget, id(DISPID_PCH_SHT__ISMACHINEHELP )] HRESULT IsMachineHelp ( [out, retval] VARIANT_BOOL *pVal     );
    [propget, id(DISPID_PCH_SHT__ISINSTALLED   )] HRESULT IsInstalled   ( [out, retval] VARIANT_BOOL *pVal     );
    [propget, id(DISPID_PCH_SHT__CANINSTALL    )] HRESULT CanInstall    ( [out, retval] VARIANT_BOOL *pVal     );
    [propget, id(DISPID_PCH_SHT__CANUNINSTALL  )] HRESULT CanUninstall  ( [out, retval] VARIANT_BOOL *pVal     );


    //
    // Methods
    //
    [id(DISPID_PCH_SHT__INSTALL  )] HRESULT Install  ();
    [id(DISPID_PCH_SHT__UNINSTALL)] HRESULT Uninstall();
    [id(DISPID_PCH_SHT__ABORT    )] HRESULT Abort    ();
};

[
    uuid(833E4113-AFF7-4AC3-AAC2-9F24C1457BCE),
    helpstring("DPCHSetOfHelpTopicsEvents Interface")
]
dispinterface DPCHSetOfHelpTopicsEvents
{
    properties:
    methods:
    [id(DISPID_PCH_SHTE__ONSTATUSCHANGE)] HRESULT onStatusChange( IPCHSetOfHelpTopics* obj, SHT_STATUS lStatus, long hrErrorCode, BSTR bstrFile );
};

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

[
    object,
    uuid(833E4130-AFF7-4AC3-AAC2-9F24C1457BCE),
    dual,
    oleautomation,
    helpstring("IPCHSecurity Interface"),
    pointer_default(unique)
]
interface IPCHSecurity : IDispatch
{
    //
    // Methods
    //
    [id(DISPID_PCH_S__CREATEOBJECT_SECURITYDESCRIPTOR)] HRESULT CreateObject_SecurityDescriptor( [out, retval] IPCHSecurityDescriptor* *pSD  );
    [id(DISPID_PCH_S__CREATEOBJECT_ACCESSCONTROLLIST )] HRESULT CreateObject_AccessControlList ( [out, retval] IPCHAccessControlList * *pACL );
    [id(DISPID_PCH_S__CREATEOBJECT_ACCESSCONTROLENTRY)] HRESULT CreateObject_AccessControlEntry( [out, retval] IPCHAccessControlEntry* *pACE );


    [id(DISPID_PCH_S__GETUSERNAME       )] HRESULT GetUserName       ( [in] BSTR bstrPrincipal, [out, retval] BSTR *retVal );
    [id(DISPID_PCH_S__GETUSERDOMAIN     )] HRESULT GetUserDomain     ( [in] BSTR bstrPrincipal, [out, retval] BSTR *retVal );
    [id(DISPID_PCH_S__GETUSERDISPLAYNAME)] HRESULT GetUserDisplayName( [in] BSTR bstrPrincipal, [out, retval] BSTR *retVal );

    [id(DISPID_PCH_S__CHECKCREDENTIALS)] HRESULT CheckCredentials( [in] BSTR bstrCredentials, [out, retval] VARIANT_BOOL *retVal );

    [id(DISPID_PCH_S__CHECKACCESSTOSD      )] HRESULT CheckAccessToSD      ( [in] VARIANT vDesiredAccess, [in] IPCHSecurityDescriptor* sd          , [out, retval] VARIANT_BOOL *retVal );
    [id(DISPID_PCH_S__CHECKACCESSTOFILE    )] HRESULT CheckAccessToFile    ( [in] VARIANT vDesiredAccess, [in] BSTR                    bstrFilename, [out, retval] VARIANT_BOOL *retVal );
    [id(DISPID_PCH_S__CHECKACCESSTOREGISTRY)] HRESULT CheckAccessToRegistry( [in] VARIANT vDesiredAccess, [in] BSTR                    bstrKey     , [out, retval] VARIANT_BOOL *retVal );


    [id(DISPID_PCH_S__GETFILESD)] HRESULT GetFileSD( [in] BSTR bstrFilename, [out, retval] IPCHSecurityDescriptor* *psd );
    [id(DISPID_PCH_S__SETFILESD)] HRESULT SetFileSD( [in] BSTR bstrFilename, [in]          IPCHSecurityDescriptor*   sd );

    [id(DISPID_PCH_S__GETREGISTRYSD)] HRESULT GetRegistrySD( [in] BSTR bstrKey, [out, retval] IPCHSecurityDescriptor* *psd );
    [id(DISPID_PCH_S__SETREGISTRYSD)] HRESULT SetRegistrySD( [in] BSTR bstrKey, [in]          IPCHSecurityDescriptor*   sd );
};

[
    object,
    uuid(833E4131-AFF7-4AC3-AAC2-9F24C1457BCE),
    dual,
    oleautomation,
    helpstring("IPCHSecurityDescriptor Interface"),
    pointer_default(unique)
]
interface IPCHSecurityDescriptor : IDispatch
{
    //
    // Properties
    //
    [propget, id(DISPID_PCH_SD__REVISION        )] HRESULT Revision        ( [out, retval] long                   *pVal   );
    [propput, id(DISPID_PCH_SD__REVISION        )] HRESULT Revision        ( [in         ] long                    newVal );
    [propget, id(DISPID_PCH_SD__CONTROL         )] HRESULT Control         ( [out, retval] long                   *pVal   );
    [propput, id(DISPID_PCH_SD__CONTROL         )] HRESULT Control         ( [in         ] long                    newVal );
    [propget, id(DISPID_PCH_SD__OWNER           )] HRESULT Owner           ( [out, retval] BSTR                   *pVal   );
    [propput, id(DISPID_PCH_SD__OWNER           )] HRESULT Owner           ( [in         ] BSTR                    newVal );
    [propget, id(DISPID_PCH_SD__OWNERDEFAULTED  )] HRESULT OwnerDefaulted  ( [out, retval] VARIANT_BOOL           *pVal   );
    [propput, id(DISPID_PCH_SD__OWNERDEFAULTED  )] HRESULT OwnerDefaulted  ( [in         ] VARIANT_BOOL            newVal );
    [propget, id(DISPID_PCH_SD__GROUP           )] HRESULT Group           ( [out, retval] BSTR                   *pVal   );
    [propput, id(DISPID_PCH_SD__GROUP           )] HRESULT Group           ( [in         ] BSTR                    newVal );
    [propget, id(DISPID_PCH_SD__GROUPDEFAULTED  )] HRESULT GroupDefaulted  ( [out, retval] VARIANT_BOOL           *pVal   );
    [propput, id(DISPID_PCH_SD__GROUPDEFAULTED  )] HRESULT GroupDefaulted  ( [in         ] VARIANT_BOOL            newVal );
    [propget, id(DISPID_PCH_SD__DISCRETIONARYACL)] HRESULT DiscretionaryAcl( [out, retval] IPCHAccessControlList* *pVal   );
    [propput, id(DISPID_PCH_SD__DISCRETIONARYACL)] HRESULT DiscretionaryAcl( [in         ] IPCHAccessControlList*  newVal );
    [propget, id(DISPID_PCH_SD__DACLDEFAULTED   )] HRESULT DaclDefaulted   ( [out, retval] VARIANT_BOOL           *pVal   );
    [propput, id(DISPID_PCH_SD__DACLDEFAULTED   )] HRESULT DaclDefaulted   ( [in         ] VARIANT_BOOL            newVal );
    [propget, id(DISPID_PCH_SD__SYSTEMACL       )] HRESULT SystemAcl       ( [out, retval] IPCHAccessControlList* *pVal   );
    [propput, id(DISPID_PCH_SD__SYSTEMACL       )] HRESULT SystemAcl       ( [in         ] IPCHAccessControlList*  newVal );
    [propget, id(DISPID_PCH_SD__SACLDEFAULTED   )] HRESULT SaclDefaulted   ( [out, retval] VARIANT_BOOL           *pVal   );
    [propput, id(DISPID_PCH_SD__SACLDEFAULTED   )] HRESULT SaclDefaulted   ( [in         ] VARIANT_BOOL            newVal );

    //
    // Methods
    //
    [id(DISPID_PCH_SD__CLONE)] HRESULT Clone( [out, retval] IPCHSecurityDescriptor* *pVal );

    [id(DISPID_PCH_SD__LOADXML        )] HRESULT LoadXML        ( [in] IXMLDOMNode* xdnNode );
    [id(DISPID_PCH_SD__LOADXMLASSTRING)] HRESULT LoadXMLAsString( [in] BSTR         bstrVal );
    [id(DISPID_PCH_SD__LOADXMLASSTREAM)] HRESULT LoadXMLAsStream( [in] IUnknown*    pStream );

    [id(DISPID_PCH_SD__SAVEXML        )] HRESULT SaveXML        ( [in] IXMLDOMNode* xdnRoot, [out, retval] IXMLDOMNode* *pxdnNode );
    [id(DISPID_PCH_SD__SAVEXMLASSTRING)] HRESULT SaveXMLAsString(                            [out, retval] BSTR         *bstrVal  );
    [id(DISPID_PCH_SD__SAVEXMLASSTREAM)] HRESULT SaveXMLAsStream(                            [out, retval] IUnknown*    *pStream  );
};

[
    object,
    uuid(833E4132-AFF7-4AC3-AAC2-9F24C1457BCE),
    dual,
    oleautomation,
    helpstring("IPCHAccessControlList Interface"),
    pointer_default(unique)
]
interface IPCHAccessControlList : IDispatch
{
    [propget, id(DISPID_NEWENUM)       ] HRESULT _NewEnum(                   [out, retval] IUnknown* *pVal    );
    [propget, id(DISPID_VALUE)         ] HRESULT Item    ( [in] long vIndex, [out, retval] VARIANT   *ppEntry );
    [propget, id(DISPID_PCH_ACL__COUNT)] HRESULT Count   (                   [out, retval] long      *pVal    );

    //
    // Properties
    //
    [propget, id(DISPID_PCH_ACL__ACLREVISION )] HRESULT AclRevision( [out, retval] long *pVal   );
    [propput, id(DISPID_PCH_ACL__ACLREVISION )] HRESULT AclRevision( [in         ] long  newVal );

    //
    // Methods
    //
    [id(DISPID_PCH_ACL__ADDACE   )] HRESULT AddAce   ( [in] IPCHAccessControlEntry* pAccessControlEntry );
    [id(DISPID_PCH_ACL__REMOVEACE)] HRESULT RemoveAce( [in] IPCHAccessControlEntry* pAccessControlEntry );

    [id(DISPID_PCH_ACL__CLONE)] HRESULT Clone( [out, retval] IPCHAccessControlList* *pVal );

    [id(DISPID_PCH_ACL__LOADXML        )] HRESULT LoadXML        ( [in] IXMLDOMNode* xdnNode );
    [id(DISPID_PCH_ACL__LOADXMLASSTRING)] HRESULT LoadXMLAsString( [in] BSTR         bstrVal );
    [id(DISPID_PCH_ACL__LOADXMLASSTREAM)] HRESULT LoadXMLAsStream( [in] IUnknown*    pStream );

    [id(DISPID_PCH_ACL__SAVEXML        )] HRESULT SaveXML        ( [in] IXMLDOMNode* xdnRoot, [out, retval] IXMLDOMNode* *pxdnNode );
    [id(DISPID_PCH_ACL__SAVEXMLASSTRING)] HRESULT SaveXMLAsString(                            [out, retval] BSTR         *bstrVal  );
    [id(DISPID_PCH_ACL__SAVEXMLASSTREAM)] HRESULT SaveXMLAsStream(                            [out, retval] IUnknown*    *pStream  );
};

[
    object,
    uuid(833E4133-AFF7-4AC3-AAC2-9F24C1457BCE),
    dual,
    oleautomation,
    helpstring("IPCHAccessControlEntry Interface"),
    pointer_default(unique)
]
interface IPCHAccessControlEntry : IDispatch
{
    //
    // Properties
    //
    [propget, id(DISPID_PCH_ACE__ACCESSMASK         )] HRESULT AccessMask         ( [out, retval] long *pVal   );
    [propput, id(DISPID_PCH_ACE__ACCESSMASK         )] HRESULT AccessMask         ( [in         ] long  newVal );
    [propget, id(DISPID_PCH_ACE__ACETYPE            )] HRESULT AceType            ( [out, retval] long *pVal   );
    [propput, id(DISPID_PCH_ACE__ACETYPE            )] HRESULT AceType            ( [in         ] long  newVal );
    [propget, id(DISPID_PCH_ACE__ACEFLAGS           )] HRESULT AceFlags           ( [out, retval] long *pVal   );
    [propput, id(DISPID_PCH_ACE__ACEFLAGS           )] HRESULT AceFlags           ( [in         ] long  newVal );
    [propget, id(DISPID_PCH_ACE__FLAGS              )] HRESULT Flags              ( [out, retval] long *pVal   );
    [propput, id(DISPID_PCH_ACE__FLAGS              )] HRESULT Flags              ( [in         ] long  newVal );
    [propget, id(DISPID_PCH_ACE__OBJECTTYPE         )] HRESULT ObjectType         ( [out, retval] BSTR *pVal   );
    [propput, id(DISPID_PCH_ACE__OBJECTTYPE         )] HRESULT ObjectType         ( [in         ] BSTR  newVal );
    [propget, id(DISPID_PCH_ACE__INHERITEDOBJECTTYPE)] HRESULT InheritedObjectType( [out, retval] BSTR *pVal   );
    [propput, id(DISPID_PCH_ACE__INHERITEDOBJECTTYPE)] HRESULT InheritedObjectType( [in         ] BSTR  newVal );
    [propget, id(DISPID_PCH_ACE__TRUSTEE            )] HRESULT Trustee            ( [out, retval] BSTR *pVal   );
    [propput, id(DISPID_PCH_ACE__TRUSTEE            )] HRESULT Trustee            ( [in         ] BSTR  newVal );

    //
    // Methods
    //
    [id(DISPID_PCH_ACE__ISEQUIVALENT)] HRESULT IsEquivalent( [in] IPCHAccessControlEntry* pAce, [out, retval] VARIANT_BOOL *pVal );

    [id(DISPID_PCH_ACE__CLONE)] HRESULT Clone( [out, retval] IPCHAccessControlEntry* *pVal );

    [id(DISPID_PCH_ACE__LOADXML        )] HRESULT LoadXML        ( [in] IXMLDOMNode* xdnNode );
    [id(DISPID_PCH_ACE__LOADXMLASSTRING)] HRESULT LoadXMLAsString( [in] BSTR         bstrVal );
    [id(DISPID_PCH_ACE__LOADXMLASSTREAM)] HRESULT LoadXMLAsStream( [in] IUnknown*    pStream );

    [id(DISPID_PCH_ACE__SAVEXML        )] HRESULT SaveXML        ( [in] IXMLDOMNode* xdnRoot, [out, retval] IXMLDOMNode* *pxdnNode );
    [id(DISPID_PCH_ACE__SAVEXMLASSTRING)] HRESULT SaveXMLAsString(                            [out, retval] BSTR         *bstrVal  );
    [id(DISPID_PCH_ACE__SAVEXMLASSTREAM)] HRESULT SaveXMLAsStream(                            [out, retval] IUnknown*    *pStream  );
};
