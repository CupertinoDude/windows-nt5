/******************************************************************************

Copyright (c) 2000 Microsoft Corporation

Module Name:
    HelpHost_Priv.idl

Abstract:
    This file contains the declaration of the set of coclasses and interfaces
    used to control the HSS from the launch API.

Revision History:
    Davide Massarenti   (Dmassare)  11/02/2000
        created

******************************************************************************/

import "oaidl.idl";

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

//
// Forward declaration.
//
interface IPCHHelpHost;

//// FEATURE CUT : interface IPCHHelpHostPanes;
//// FEATURE CUT : interface IPCHHelpHostPane;
//// FEATURE CUT : interface IPCHHelpHostWindow;
//// FEATURE CUT : 
//// FEATURE CUT : interface IPCHHelpHostEvents;
//// FEATURE CUT : interface IPCHHelpHostNavEvents;

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

[
    object,
    uuid(BF72E210-FA10-4BB5-A348-269D7615A520),
    dual,
    oleautomation,
    helpstring("IPCHHelpHost Interface"),
    pointer_default(unique)
]
interface IPCHHelpHost : IDispatch
{
    ////////////////////////////////////////
    //
    // Read/write Properties
    //
    ////////////////////////////////////////

//// FEATURE CUT : 	   [propput] HRESULT FilterName( [in]          BSTR   Value );
//// FEATURE CUT : 	   [propget] HRESULT FilterName( [out, retval] BSTR *pValue );


    ////////////////////////////////////////
    //
    // Read-only Properties
    //
    ////////////////////////////////////////

//// FEATURE CUT : 	   [propget] HRESULT Namespace       ( [out, retval] BSTR                *pValue );
//// FEATURE CUT : 	   [propget] HRESULT Session         ( [out, retval] IDispatch*          *pValue );
//// FEATURE CUT : 	   [propget] HRESULT FilterExpression( [out, retval] BSTR                *pValue );
//// FEATURE CUT : 	   [propget] HRESULT CurrentUrl      ( [out, retval] BSTR                *pValue );
//// FEATURE CUT : 
//// FEATURE CUT : 	   [propget] HRESULT Panes           ( [out, retval] IPCHHelpHostPanes*  *pValue );
//// FEATURE CUT : 	   [propget] HRESULT HelpHostWindow  ( [out, retval] IPCHHelpHostWindow* *pValue );


    ////////////////////////////////////////
    //
    // Methods
    //
    ////////////////////////////////////////

//// FEATURE CUT : 	   //
//// FEATURE CUT : 	   // Initialize a session for a namespace
//// FEATURE CUT : 	   //
//// FEATURE CUT : 	   HRESULT OpenNamespace( [in] BSTR newNamespace ,
//// FEATURE CUT : 							  [in] BSTR filterName   );

    //
    // Navigate to a topic
    //
    HRESULT DisplayTopicFromURL( [in] BSTR    url     ,
                                 [in] VARIANT options );

//// FEATURE CUT : 	   //
//// FEATURE CUT : 	   // Perform keyword or other lookup
//// FEATURE CUT : 	   //
//// FEATURE CUT : 	   HRESULT DisplayResultsFromQuery( [in] BSTR    query      ,
//// FEATURE CUT : 										[in] BSTR    navMoniker ,
//// FEATURE CUT : 										[in] VARIANT options    ); // show only 1
//// FEATURE CUT : 
//// FEATURE CUT : 	   //
//// FEATURE CUT : 	   // Show a UI element
//// FEATURE CUT : 	   //
//// FEATURE CUT : 	   // <paneName> examples :
//// FEATURE CUT : 	   //
//// FEATURE CUT : 	   //        //topic/1
//// FEATURE CUT : 	   //        //toc/1
//// FEATURE CUT : 	   //        //index/1
//// FEATURE CUT : 	   //        //search/1
//// FEATURE CUT : 	   //
//// FEATURE CUT : 	   //
//// FEATURE CUT : 	   HRESULT ShowPane( [in] BSTR    paneName   ,  // "path" style name of pane
//// FEATURE CUT : 						 [in] BSTR    query      ,  // prepopulate edit box (optional)
//// FEATURE CUT : 						 [in] BSTR    navMoniker ,
//// FEATURE CUT : 						 [in] VARIANT options    ); // options: hide, doquery
//// FEATURE CUT : 
//// FEATURE CUT : 
//// FEATURE CUT : 	   //
//// FEATURE CUT : 	   // Close the Help window
//// FEATURE CUT : 	   //
//// FEATURE CUT : 	   HRESULT Terminate();
//// FEATURE CUT : 
//// FEATURE CUT : 
//// FEATURE CUT : 	   //
//// FEATURE CUT : 	   // PRIVATE to the HSS
//// FEATURE CUT : 	   //
//// FEATURE CUT : 	   HRESULT PRIV_Init( [in] IUnknown* pCaller );
};

//// FEATURE CUT : [
//// FEATURE CUT : 	   object,
//// FEATURE CUT : 	   uuid(BF72E211-FA10-4BB5-A348-269D7615A520),
//// FEATURE CUT : 	   dual,
//// FEATURE CUT : 	   oleautomation,
//// FEATURE CUT : 	   helpstring("IPCHHelpHostPanes Interface"),
//// FEATURE CUT : 	   pointer_default(unique)
//// FEATURE CUT : ]
//// FEATURE CUT : interface IPCHHelpHostPanes : IDispatch
//// FEATURE CUT : {
//// FEATURE CUT : 	   [propget, id(DISPID_NEWENUM)] HRESULT _NewEnum(                      [out, retval] IUnknown* *pVal    );
//// FEATURE CUT : 	   [propget, id(DISPID_VALUE)  ] HRESULT Item    ( [in] VARIANT vIndex, [out, retval] VARIANT   *ppEntry );
//// FEATURE CUT : 	   [propget                    ] HRESULT Count   (                      [out, retval] long      *pVal    );
//// FEATURE CUT : };
//// FEATURE CUT : 
//// FEATURE CUT : [
//// FEATURE CUT : 	   object,
//// FEATURE CUT : 	   uuid(BF72E212-FA10-4BB5-A348-269D7615A520),
//// FEATURE CUT : 	   dual,
//// FEATURE CUT : 	   oleautomation,
//// FEATURE CUT : 	   helpstring("IPCHHelpHostPane Interface"),
//// FEATURE CUT : 	   pointer_default(unique)
//// FEATURE CUT : ]
//// FEATURE CUT : interface IPCHHelpHostPane : IDispatch
//// FEATURE CUT : {
//// FEATURE CUT : 	   ////////////////////////////////////////
//// FEATURE CUT : 	   //
//// FEATURE CUT : 	   // Read/write Properties
//// FEATURE CUT : 	   //
//// FEATURE CUT : 	   ////////////////////////////////////////
//// FEATURE CUT : 
//// FEATURE CUT : 	   [propput] HRESULT Visible   ( [in         ] VARIANT_BOOL   Value );
//// FEATURE CUT : 	   [propget] HRESULT Visible   ( [out, retval] VARIANT_BOOL *pValue );
//// FEATURE CUT : 
//// FEATURE CUT : 	   [propput] HRESULT NavMoniker( [in         ] BSTR   Value );
//// FEATURE CUT : 	   [propget] HRESULT NavMoniker( [out, retval] BSTR *pValue );
//// FEATURE CUT : 
//// FEATURE CUT : 
//// FEATURE CUT : 	   ////////////////////////////////////////
//// FEATURE CUT : 	   //
//// FEATURE CUT : 	   // Read-only Properties
//// FEATURE CUT : 	   //
//// FEATURE CUT : 	   ////////////////////////////////////////
//// FEATURE CUT : 
//// FEATURE CUT : 	   [propget] HRESULT Name      ( [out, retval] BSTR       *pValue );
//// FEATURE CUT : 	   [propget] HRESULT CurrentUrl( [out, retval] BSTR       *pValue );
//// FEATURE CUT : 	   [propget] HRESULT WebBrowser( [out, retval] IDispatch* *pValue );
//// FEATURE CUT : 
//// FEATURE CUT : 
//// FEATURE CUT : 	   //
//// FEATURE CUT : 	   // Navigate to a topic
//// FEATURE CUT : 	   //
//// FEATURE CUT : 	   HRESULT DisplayTopicFromURL( [in] BSTR    url     ,
//// FEATURE CUT : 									[in] VARIANT options );
//// FEATURE CUT : 
//// FEATURE CUT : 	   //
//// FEATURE CUT : 	   // Perform keyword or other lookup
//// FEATURE CUT : 	   //
//// FEATURE CUT : 	   HRESULT DisplayResultsFromQuery( [in] BSTR    query   ,
//// FEATURE CUT : 										[in] VARIANT options ); // show only 1
//// FEATURE CUT : 
//// FEATURE CUT : 	   //
//// FEATURE CUT : 	   // Synchronize a navigation pane
//// FEATURE CUT : 	   //
//// FEATURE CUT : 	   HRESULT Sync( [in] BSTR    url     ,
//// FEATURE CUT : 					 [in] VARIANT options ); // force pane to show
//// FEATURE CUT : };
//// FEATURE CUT : 
//// FEATURE CUT : [
//// FEATURE CUT : 	   object,
//// FEATURE CUT : 	   uuid(BF72E213-FA10-4BB5-A348-269D7615A520),
//// FEATURE CUT : 	   dual,
//// FEATURE CUT : 	   oleautomation,
//// FEATURE CUT : 	   helpstring("IPCHHelpHostWindow Interface"),
//// FEATURE CUT : 	   pointer_default(unique)
//// FEATURE CUT : ]
//// FEATURE CUT : interface IPCHHelpHostWindow : IDispatch
//// FEATURE CUT : {
//// FEATURE CUT : 	   ////////////////////////////////////////
//// FEATURE CUT : 	   //
//// FEATURE CUT : 	   // Read/write Properties
//// FEATURE CUT : 	   //
//// FEATURE CUT : 	   ////////////////////////////////////////
//// FEATURE CUT : 
//// FEATURE CUT : 	   //
//// FEATURE CUT : 	   // Must be set before opening the namespace.
//// FEATURE CUT : 	   //
//// FEATURE CUT : 	   [propput] HRESULT ParentWindow( [in         ] long   HWND );
//// FEATURE CUT : 	   [propget] HRESULT ParentWindow( [out, retval] long *pHWND );
//// FEATURE CUT : 
//// FEATURE CUT : 	   //
//// FEATURE CUT : 	   // Recommended to call this before showing the window. Viewers can optionally allow more dynamic setting.
//// FEATURE CUT : 	   //
//// FEATURE CUT : 	   [propput] HRESULT UILanguage( [in         ] long           LCID  );
//// FEATURE CUT : 	   [propget] HRESULT UILanguage( [out, retval] long         *pLCID  );
//// FEATURE CUT : 
//// FEATURE CUT : 	   [propput] HRESULT Visible   ( [in         ] VARIANT_BOOL   Value );
//// FEATURE CUT : 	   [propget] HRESULT Visible   ( [out, retval] VARIANT_BOOL *pValue );
//// FEATURE CUT : 
//// FEATURE CUT : 
//// FEATURE CUT : 	   ////////////////////////////////////////
//// FEATURE CUT : 	   //
//// FEATURE CUT : 	   // Read-only Properties
//// FEATURE CUT : 	   //
//// FEATURE CUT : 	   ////////////////////////////////////////
//// FEATURE CUT : 
//// FEATURE CUT : 	   [propget] HRESULT OriginX   ( [out, retval] long *pValue );
//// FEATURE CUT : 	   [propget] HRESULT OriginY   ( [out, retval] long *pValue );
//// FEATURE CUT : 	   [propget] HRESULT Width     ( [out, retval] long *pValue );
//// FEATURE CUT : 	   [propget] HRESULT Height    ( [out, retval] long *pValue );
//// FEATURE CUT : 
//// FEATURE CUT : 
//// FEATURE CUT : 	   //
//// FEATURE CUT : 	   // PRIVATE to the HSS
//// FEATURE CUT : 	   //
//// FEATURE CUT : 	   [propget] HRESULT PRIV_Window( [out, retval] long *pHWND );
//// FEATURE CUT : 
//// FEATURE CUT : 
//// FEATURE CUT : 	   ////////////////////////////////////////
//// FEATURE CUT : 	   //
//// FEATURE CUT : 	   // Methods
//// FEATURE CUT : 	   //
//// FEATURE CUT : 	   ////////////////////////////////////////
//// FEATURE CUT : 
//// FEATURE CUT : 	   //
//// FEATURE CUT : 	   // Set the window position and size
//// FEATURE CUT : 	   //
//// FEATURE CUT : 	   HRESULT MoveWindow( [in] long originX, [in] long originY ,  // corner
//// FEATURE CUT : 						   [in] long width  , [in] long height  ); // size
//// FEATURE CUT : };
//// FEATURE CUT : 
//// FEATURE CUT : ////////////////////////////////////////////////////////////////////////////////
//// FEATURE CUT : 
//// FEATURE CUT : [
//// FEATURE CUT : 	   object,
//// FEATURE CUT : 	   uuid(BF72E220-FA10-4BB5-A348-269D7615A520),
//// FEATURE CUT : 	   dual,
//// FEATURE CUT : 	   oleautomation,
//// FEATURE CUT : 	   helpstring("IPCHHelpHostEvents Interface"),
//// FEATURE CUT : 	   pointer_default(unique)
//// FEATURE CUT : ]
//// FEATURE CUT : interface IPCHHelpHostEvents : IDispatch
//// FEATURE CUT : {
//// FEATURE CUT : 	   HRESULT OnFilterSelectionChanged(                         [in] BSTR filterName );
//// FEATURE CUT : 	   HRESULT OnFilterModified        (                         [in] BSTR filterName );
//// FEATURE CUT : 	   HRESULT OnFilterAdded           (                         [in] BSTR filterName );
//// FEATURE CUT : 	   HRESULT OnFilterDeleted         (                         [in] BSTR filterName );
//// FEATURE CUT : 	   HRESULT OnNamespaceChanged      ( [in] BSTR newNamespace, [in] BSTR newFilter  );
//// FEATURE CUT : 
//// FEATURE CUT : 	   HRESULT OnPaneOpened( [in] IPCHHelpHostPane* newPane );
//// FEATURE CUT : 	   HRESULT OnPaneClosed( [in] IPCHHelpHostPane* oldPane );
//// FEATURE CUT : 
//// FEATURE CUT : 	   HRESULT OnClose();
//// FEATURE CUT : };
//// FEATURE CUT : 
//// FEATURE CUT : [
//// FEATURE CUT : 	   object,
//// FEATURE CUT : 	   uuid(BF72E221-FA10-4BB5-A348-269D7615A520),
//// FEATURE CUT : 	   dual,
//// FEATURE CUT : 	   oleautomation,
//// FEATURE CUT : 	   helpstring("IPCHHelpHostNavEvents Interface"),
//// FEATURE CUT : 	   pointer_default(unique)
//// FEATURE CUT : ]
//// FEATURE CUT : interface IPCHHelpHostNavEvents : IDispatch
//// FEATURE CUT : {
//// FEATURE CUT : 	   HRESULT OnBeforeNavigate  ( [in] BSTR url, [in] IPCHHelpHostPane* pane, [in, out] VARIANT_BOOL *pCancel );
//// FEATURE CUT : 	   HRESULT OnDownloadBegin   ( [in] BSTR url, [in] IPCHHelpHostPane* pane                                  );
//// FEATURE CUT : 	   HRESULT OnDownloadComplete( [in] BSTR url, [in] IPCHHelpHostPane* pane                                  );
//// FEATURE CUT : 	   HRESULT OnNavigateComplete( [in] BSTR url, [in] IPCHHelpHostPane* pane                                  );
//// FEATURE CUT : 	   HRESULT OnDocumentComplete( [in] BSTR url, [in] IPCHHelpHostPane* pane                                  );
//// FEATURE CUT : };
