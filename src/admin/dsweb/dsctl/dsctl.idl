// dsctl.idl : IDL source for dsctl.dll
//

// This file will be processed by the MIDL tool to
// produce the type library (dsctl.tlb) and marshalling code.

	[
		object,
		uuid(0998BB01-DFFD-11CF-927F-00AA00688A38),
		dual,
		helpstring("IDsconn Interface"),
		pointer_default(unique)
	]
	interface IDsctl : IDispatch
	{
		import "oaidl.idl";

                [id(DISPID_VALUE )]
			HRESULT DSGetObject ([in]VARIANT ADsPath,
				[out, retval] VARIANT *retval);

                [id(DISPID_VALUE + 1)]
			HRESULT DSGetEnum ([in] VARIANT ADsPath,
							[out, retval] VARIANT *retval);

                [id(DISPID_VALUE + 2)]
			HRESULT DSEnumNext ([in]VARIANT Enum,
								[out, retval] VARIANT *retval);

                [id(DISPID_VALUE + 3)]
			HRESULT DSIsContainer ([in]VARIANT ObjectPtr,
								[out, retval] VARIANT *retval);

                [id(DISPID_VALUE + 4)]
            HRESULT DSGetLastError ([out, retval] VARIANT *retval);

                [id(DISPID_VALUE + 5)]
            HRESULT DSGetMemberEnum ([in] VARIANT ObjectPtr,
							[out, retval] VARIANT *retval);

                [id(DISPID_VALUE + 6)]
            HRESULT DecodeURL ([in] VARIANT EncodedURL,
							[out, retval] VARIANT *retval);
    };



[
	uuid(0998BB00-DFFD-11CF-927F-00AA00688A38),
	version(1.0),
	helpstring("dsctl 1.0 Type Library")
]
library DSCTLLib
{
	importlib("stdole2.tlb");

	[
		uuid(0998BB05-DFFD-11CF-927F-00AA00688A38),
		helpstring("Dsctl Class")
	]
	coclass Dsctl
	{
		[default] interface IDsctl;
	};

};
