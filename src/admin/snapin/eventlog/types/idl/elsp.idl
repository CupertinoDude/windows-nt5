//+--------------------------------------------------------------------------
//
//  Microsoft Windows
//  Copyright (C) Microsoft Corporation, 1996 - 1997.
//
//  File:       prshtitf.idl
//
//  Contents:   Definitions of private interfaces.
//
//  History:    3-27-1997   DavidMun   Created
//
//  Notes:      Since each property sheet runs in its own thread, and all
//              the MMC interfaces the snapin has are owned by the main
//              thread, the property sheet code cannot directly call
//              those interfaces.
//
//              Since the methods on the CComponentData and CSnapin that
//              the property sheet code needs to call may internally call
//              MMC interfaces, the property sheet code cannot directly
//              call methods on these classes either.
//
//              The solution is to create these private interfaces, which
//              can be marshalled for inter-thread use.  Then calls made
//              by the property sheet code to these methods will be
//              serialized by OLE using windows messages so that the actual
//              call to the CComponentData and CSnapin methods (and hence
//              the MMC interface methods) occurs in the main thread, which
//              owns those interface pointers.
//
//              CAUTION: these interfaces are NOT REMOTEABLE.  Since they
//              are only used within a single process, no marshalling of
//              the arguments occurs, and the threads simply cast the
//              ULONG arguments to their real data types as needed.
//
//              The hungarian notation for the method arguments reflects
//              this by prefixing the original data type with ul_.  So an
//              argument of ul_pliToClear, for example, is a pointer to
//              a CLogInfo object cast to a ULONG.
//
//---------------------------------------------------------------------------

import "oaidl.idl";


interface INamespacePrshtActions;
interface IResultPrshtActions;

const WCHAR *GUID_INAMESPACEACTIONS_STR = L"{05238C14-A6E1-11D0-9A84-00C04FD8DBF7}";
const WCHAR *INAMESPACEACTIONS_STR      = L"INamespacePrshtActions";
const WCHAR *GUID_IRESULTACTIONS_STR    = L"{12DD72EE-A6E5-11D0-9A84-00C04FD8DBF7}";
const WCHAR *IRESULTACTIONS_STR         = L"IResultPrshtActions";

//
// CAUTION: if you change the number of methods in INamespacePrshtActions,
// you must update this value.
//

const WCHAR *NUM_INAMESPACEACTIONS_METHODS = L"4";

//+---------------------------------------------------------------------------
//
//  Interface:  INamespacePrshtActions
//
//  Synopsis:   Contains methods the general and filter property sheet pages
//              call.
//
//----------------------------------------------------------------------------

[
    object,
    uuid(05238c14-a6e1-11d0-9a84-00c04fd8dbf7),
    helpstring("INamespacePrshtActions Interface"),
    pointer_default(unique)
]
interface INamespacePrshtActions : IUnknown
{
    [helpstring("Delete all events in the log")]
    HRESULT
    ClearLog(
        [in] HANDLE_PTR ul_pli,
        [in] ULONG ul_SaveType,
        [in] HANDLE_PTR ul_wszSaveFilename);
};

//
// CAUTION: if you change the number of methods in IResultPrshtActions,
// you must update this value.
//

const WCHAR *NUM_IRESULTACTIONS_METHODS = L"8";

//+---------------------------------------------------------------------------
//
//  Interface:  IResultPrshtActions
//
//  Synopsis:   Contains methods the record details property sheet pages
//              call.
//
//----------------------------------------------------------------------------

[
    object,
    uuid(12dd72ee-a6e5-11d0-9a84-00c04fd8dbf7),
    helpstring("IResultPrshtActions Interface"),
    pointer_default(unique)
]
interface IResultPrshtActions : IUnknown
{
    [helpstring("Conditionally advance the result view selection")]
    HRESULT
    InspectorAdvance(
        [in] ULONG idNextPrev,
        [in] ULONG fWrapOk);

    [helpstring("Set or clear the property inspector handle")]
    HRESULT
    SetInspectorWnd(
        [in] HANDLE_PTR ul_hwnd);

    [helpstring("Return CLogInfo * of currently selected log")]
    HRESULT
    GetCurSelLogInfo(
        [in] HANDLE_PTR ul_ppli);

    [helpstring("Return pointer to copy of EVENTLOGRECORD inspector is looking at")]
    HRESULT
    GetCurSelRecCopy(
        [in] HANDLE_PTR ul_ppelr);

    [helpstring("Set the current result view selection to the next matching item")]
    HRESULT
    FindNext(
         [in] HANDLE_PTR ul_pfi);
};


