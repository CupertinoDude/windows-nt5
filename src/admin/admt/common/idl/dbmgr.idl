// DBManager.idl : IDL source for DBManager.dll
//

// This file will be processed by the MIDL tool to
// produce the type library (DBManager.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";
	[
		object,
#ifdef OFA
      uuid(2EAD7A80-9285-48e7-8DDE-88AC3BDFDE15),
#else
		uuid(CBA3DB00-2A83-11D3-8C8E-0090270D48D1),
#endif
  		dual,
		helpstring("IIManageDB Interface"),
		pointer_default(unique)
	]
	interface IIManageDB : IDispatch
	{
		[id(1), helpstring("method SetVarsetToDB")] HRESULT SetVarsetToDB([in] IUnknown * pUnk, [in] BSTR sTableName,  [in,optional] VARIANT ActionID);
		[id(2), helpstring("method ClearTable")] HRESULT ClearTable([in] BSTR sTableName, [in,optional] VARIANT Filter);
		[id(3), helpstring("method SaveSettings")] HRESULT SaveSettings([in] IUnknown * pUnk );
		[id(4), helpstring("method GetVarsetFromDB")] HRESULT GetVarsetFromDB([in] BSTR sTable, [in,out] IUnknown ** ppVarset, [in,optional] VARIANT ActionID);
		[id(5), helpstring("method GetSettings")] HRESULT GetSettings([in,out] IUnknown ** ppUnk);
		[id(6), helpstring("method SetActionHistory")] HRESULT SetActionHistory([in] long lActionID, [in] IUnknown * pUnk);
		[id(7), helpstring("method GetActionHistory")] HRESULT GetActionHistory([in] long lActionID, [in,out] IUnknown ** ppUnk);
		[id(8), helpstring("method GetNextActionID")] HRESULT GetNextActionID([out] long * pActionID);
		[id(9), helpstring("method SaveMigratedObject")] HRESULT SaveMigratedObject([in] long lActionID, [in] IUnknown * pUnk);
		[id(10), helpstring("method GetMigratedObjects")] HRESULT GetMigratedObjects([in] long lActionID, [in,out] IUnknown ** ppUnk);
		[id(11), helpstring("method GetRSForReport")] HRESULT GetRSForReport([in] BSTR sReport, [out,retval] IUnknown ** pprsData);
		[id(12), helpstring("method SaveSCMPasswords")] HRESULT SaveSCMPasswords([in] IUnknown * pUnk);
		[id(13), helpstring("method GetSCMPasswords")] HRESULT GetSCMPasswords([in,out] IUnknown ** ppUnk);
		[id(14), helpstring("method ClearSCMPasswords")] HRESULT ClearSCMPasswords();
		[id(15), helpstring("method GetCurrentActionID")] HRESULT GetCurrentActionID([out] long * pActionID);
		[id(16), helpstring("method GetAMigratedObject")] HRESULT GetAMigratedObject([in] BSTR sSrcSamName, [in] BSTR sSrcDomain, [in] BSTR sTgtDomain, [in,out] IUnknown ** ppUnk);
		[id(17), helpstring("method GenerateReport")] HRESULT GenerateReport([in] BSTR sReportName, [in] BSTR sFileName, [in] BSTR sSrcDomain, [in] BSTR sTgtDomain, [in] LONG bSourceNT4);
		[id(18), helpstring("method AddDistributedAction")] HRESULT AddDistributedAction([in] BSTR sServerName, [in] BSTR sResultFile, [in] long lStatus, [in] BSTR sText);
		[id(19), helpstring("method GetFailedDistributedActions")] HRESULT GetFailedDistributedActions([in] long lActionID, [in,out] IUnknown ** pUnk);
		[id(20), helpstring("method SetServiceAccount")] HRESULT SetServiceAccount([in] BSTR System, [in] BSTR Service,[in]BSTR ServiceDisplayName, [in] BSTR Account);
		[id(21), helpstring("method GetServiceAccount")] HRESULT GetServiceAccount([in] BSTR Account, [in,out] IUnknown ** pUnk);
		[id(22), helpstring("method SavePasswordAge")] HRESULT SavePasswordAge([in] BSTR sDomain, [in] BSTR sComp, [in] BSTR sDesc, [in] long lAge);
		[id(23), helpstring("method GetPasswordAge")] HRESULT GetPasswordAge([in] BSTR sDomain, [in] BSTR sComp, [out] BSTR * sDesc, [out] long * lAge, [out] long *lTime);
		[id(24), helpstring("method SetServiceAcctEntryStatus")] HRESULT SetServiceAcctEntryStatus([in] BSTR sComp, [in] BSTR sSvc, [in] BSTR sAcct, [in] long Status);
		[id(25), helpstring("method SetDistActionStatus")] HRESULT SetDistActionStatus([in] long lActionID, [in] BSTR sComp, [in] long lStatus, [in] BSTR sText);
		[id(26), helpstring("method CancelDistributedAction")] HRESULT CancelDistributedAction([in] long lActionID, [in] BSTR sComp);
		[id(27), helpstring("method AddAcctRef")] HRESULT AddAcctRef([in] BSTR sDomain, [in] BSTR sAcct, [in] BSTR sAcctSid, [in] BSTR sComp, [in] long lCount, [in] BSTR sType);
		[id(28), helpstring("method GetAMigratedObjectToAnyDomain")] HRESULT GetAMigratedObjectToAnyDomain([in] BSTR sSrcSamName, [in] BSTR sSrcDomain, [in,out] IUnknown ** ppUnk);
		[id(29), helpstring("method AddSourceObject")] HRESULT AddSourceObject([in] BSTR sDomain, [in] BSTR sSAMName, [in] BSTR sType, [in] BSTR sRDN, [in] BSTR sCanonicalName, [in] LONG bSource);
		[id(30), helpstring("method OpenAccountsTable")] HRESULT OpenAccountsTable([in] LONG bSource);
		[id(31), helpstring("method CloseAccountsTable")] HRESULT CloseAccountsTable();
		[id(32), helpstring("method AreThereAnyMigratedObjects")] HRESULT AreThereAnyMigratedObjects([out] long * count);
		[id(33), helpstring("method GetActionHistoryKey")] HRESULT GetActionHistoryKey([in] long lActionID, [in] BSTR sKeyName, [in,out] VARIANT * pVar);
		[id(34), helpstring("method GetMigratedObjectBySourceDN")] HRESULT GetMigratedObjectBySourceDN([in] BSTR sSourceDN, [in,out] IUnknown ** ppUnk);
		[id(35), helpstring("method SaveUserProps")] HRESULT SaveUserProps([in] IUnknown * pVs);
		[id(36), helpstring("method GetUserProps")] HRESULT GetUserProps([in] BSTR sDom, [in] BSTR sSam, [in,out] IUnknown ** ppVs);
		[id(37), helpstring("method SrcSidColumnInMigratedObjectsTable")] HRESULT SrcSidColumnInMigratedObjectsTable([out, retval] VARIANT_BOOL * pbFound);
		[id(38), helpstring("method GetMigratedObjectsFromOldMOT")] HRESULT GetMigratedObjectsFromOldMOT([in] long lActionID, [in,out] IUnknown ** ppUnk);
		[id(39), helpstring("method CreateSrcSidColumnInMOT")] HRESULT CreateSrcSidColumnInMOT([out, retval] VARIANT_BOOL * pbCreated);
		[id(40), helpstring("method PopulateSrcSidColumnByDomain")] HRESULT PopulateSrcSidColumnByDomain([in] BSTR sDomainName, [in] BSTR sSid, [out, retval] VARIANT_BOOL * pbPopulated);
		[id(41), helpstring("method DeleteSrcSidColumnInMOT")] HRESULT DeleteSrcSidColumnInMOT([out, retval] VARIANT_BOOL * pbDeleted);
		[id(42), helpstring("method GetMigratedObjectsWithSSid")] HRESULT GetMigratedObjectsWithSSid([in] long lActionID, [in,out] IUnknown ** ppUnk);
		[id(43), helpstring("method CreateSidColumnInAR")] HRESULT CreateSidColumnInAR();
		[id(44), helpstring("method SidColumnInARTable")] HRESULT SidColumnInARTable([out, retval] VARIANT_BOOL * pbFound);
		[id(45), helpstring("method GetMigratedObjectByType")] HRESULT GetMigratedObjectByType([in] long lActionID, [in] BSTR sSrcDomain, [in] BSTR sType, [in,out] IUnknown ** ppUnk);
		[id(46), helpstring("method GetAMigratedObjectBySidAndRid")] HRESULT GetAMigratedObjectBySidAndRid([in] BSTR sSrcDomainSid, [in] BSTR sRid, [in,out] IUnknown ** ppUnk);
    };

[
#ifdef OFA
   uuid(C7A0EFF0-E144-4dca-95EE-95F1CF78B47E),
#else
	uuid(91BA75E0-2A83-11D3-8C8E-0090270D48D1),
#endif
	version(1.0),
	helpstring("DBManager 1.0 Type Library")
]
library DBMANAGERLib
{
	importlib("stdole32.tlb");
	importlib("stdole2.tlb");

	[
#ifdef OFA
      uuid(BAFDBF5C-82E0-4285-A461-7CD1B32BD9F5),
#else
		uuid(D49F9C30-2A83-11D3-8C8E-0090270D48D1),
#endif
		helpstring("IManageDB Class")
	]
	coclass IManageDB
	{
		[default] interface IIManageDB;
	};
};
