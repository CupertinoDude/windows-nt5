*****************************************************************************************************************/
/*****************************************************************************************************************/
/*****************************************************************************************************************/
/*****************************************************************************************************************/
/*****************************************************************************************************************/
/*****************************************************************************************************************/
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
//can't do
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*int doUndo();
int doRedo();
int doGroup();


int  doGroup()
{
	PROPSHEETPAGE	psp =		{0}; //defines the property sheet pages
	HPROPSHEETPAGE	ahpsp[10] =	{0}; //an array to hold the page's HPROPSHEETPAGE handles
	PROPSHEETHEADER	psh =		{0}; //defines the property sheet
	SHAREDWIZDATA wizdata =		{0}; //the shared data structure

	psp.pfnDlgProc =	IntroDlgProc;
	intropage(ahpsp,psp,IDD_GROUP_INTRO,0,wizdata,IDS_ACCOUNT_TITLE);

	psp.pfnDlgProc =	IntGeneralProc; definepage(ahpsp,psp,IDS_FOR_REAL,IDS_FOR_REAL_SUB,IDD_FOR_REAL,1,IDS_ACCOUNT_TITLE);
	psp.pfnDlgProc =	IntGeneralProc; definepage(ahpsp,psp,IDS_DOMAIN,IDS_DOMAIN_SUB,IDD_DOMAIN_SELECTION,2,IDS_ACCOUNT_TITLE);
	psp.pfnDlgProc =	IntGeneralProc; definepage(ahpsp,psp,IDS_CREDENTIALS,IDS_CREDENTIALS_SUB,IDD_CREDENTIALS,3,IDS_ACCOUNT_TITLE);
	psp.pfnDlgProc =	IntGeneralProc; definepage(ahpsp,psp,IDS_SID_HISTORY,IDS_SID_HISTORY_SUB,IDD_SID_HISTORY,4,IDS_ACCOUNT_TITLE);
	psp.pfnDlgProc =	IntGeneralProc; definepage(ahpsp,psp,IDS_USER_RIGHTS,IDS_USER_RIGHTS_SUB,IDD_USER_RIGHTS,5,IDS_ACCOUNT_TITLE);
	psp.pfnDlgProc =	IntGeneralProc; definepage(ahpsp,psp,IDS_RENAMING,IDS_RENAMING_SUB,IDD_RENAMING,6,IDS_ACCOUNT_TITLE);
	psp.pfnDlgProc =	IntGeneralProc; definepage(ahpsp,psp,IDS_REPLACE_EXISTING,IDS_REPLACE_EXISTING_SUB,IDD_REPLACE_EXISTING_GROUP_MEMBERS,9,IDS_ACCOUNT_TITLE);
	psp.pfnDlgProc =	IntGeneralProc; definepage(ahpsp,psp,IDS_OU_SELECTION,IDS_OU_SELECTION_SUB,IDD_OU_SELECTION,7,IDS_ACCOUNT_TITLE);
	psp.pfnDlgProc =	IntSelectionProc; definepage(ahpsp,psp,IDS_GROUP,IDS_GROUP_SUB,IDD_GROUP_SELECTION,8,IDS_ACCOUNT_TITLE);

	psp.pfnDlgProc =	EndDlgProc; 
	endpage(ahpsp,psp,IDD_GROUP_END,10,IDS_ACCOUNT_TITLE);

	defineSheet(ahpsp,psh,11,wizdata,10);
	return 0;
}

int doUndo()
{
	PROPSHEETPAGE	psp =		{0}; //defines the property sheet pages
	HPROPSHEETPAGE	ahpsp[3] =	{0}; //an array to hold the page's HPROPSHEETPAGE handles
	PROPSHEETHEADER	psh =		{0}; //defines the property sheet
	SHAREDWIZDATA wizdata =		{0}; //the shared data structure
	
	intropage(ahpsp,psp,IDD_INTRO_UNDO,0,wizdata,IDS_ACCOUNT_TITLE);

	psp.pfnDlgProc =	IntGeneralProc; definepage(ahpsp,psp,IDS_UNDO,IDS_UNDO_SUB,IDD_UNDO,1,IDS_ACCOUNT_TITLE);

	psp.pfnDlgProc =	EndDlgProc; 
	endpage(ahpsp,psp,IDD_END_UNDO,2,IDS_ACCOUNT_TITLE);

	defineSheet(ahpsp,psh,3,wizdata,5);
	return 0;

}


int doRedo()
{
	PROPSHEETPAGE	psp =		{0}; //defines the property sheet pages
	HPROPSHEETPAGE	ahpsp[3] =	{0}; //an array to hold the page's HPROPSHEETPAGE handles
	PROPSHEETHEADER	psh =		{0}; //defines the property sheet
	SHAREDWIZDATA wizdata =		{0}; //the shared data structure

	psp.pfnDlgProc =	IntroDlgProc;
	intropage(ahpsp,psp,IDD_INTRO_REDO,0,wizdata,IDS_ACCOUNT_TITLE);

	psp.pfnDlgProc =	IntGeneralProc; definepage(ahpsp,psp,IDS_REDO,IDS_REDO_SUB,IDD_REDO,1,IDS_ACCOUNT_TITLE);

	psp.pfnDlgProc =	EndDlgProc; 
	endpage(ahpsp,psp,IDD_END_REDO,2,IDS_ACCOUNT_TITLE);
	defineSheet(ahpsp,psh,3,wizdata,6);
	return 0;
}

						
BOOL CALLBACK IntClosedProc (
						HWND hwndDlg,
						UINT uMsg,
						WPARAM wParam,
						LPARAM lParam
						)
{

	//Process messages from the second interior page

	//Retrieve the shared user data from GWL_USERDATA

//	LPSHAREDWIZDATA pdata = (LPSHAREDWIZDATA) GetWindowLong(hwndDlg, GWL_USERDATA);
	LPSHAREDWIZDATA pdata = (LPSHAREDWIZDATA) GetWindowLongPtr(hwndDlg, GWLP_USERDATA);

	switch (uMsg)
	{
	case WM_INITDIALOG :
		{ 
			//Get the PROPSHEETPAGE lParam value and load it into
			//DWL_USERDATA

			pdata = (LPSHAREDWIZDATA) ((LPPROPSHEETPAGE) lParam) -> lParam;
//			SetWindowLong(hwndDlg, GWL_USERDATA, (long) pdata);
			SetWindowLongPtr(hwndDlg, GWLP_USERDATA, (LONG_PTR) pdata);
			break;
		}

	case WM_NOTIFY :
		{
		LPNMHDR lpnm = (LPNMHDR) lParam;

		switch (lpnm->code)
			{
			case PSN_SETACTIVE : //Enable the Next and Back buttons

				PropSheet_SetWizButtons(GetParent(hwndDlg), PSWIZB_BACK | PSWIZB_NEXT);
				break;

			case PSN_WIZNEXT :
				//Handle a Next button click, if necessary

				break;

			case PSN_WIZBACK :
				break;

			case PSN_RESET :
				//Handle a Cancel button click, if necessary
				break;

			default :
				break;
			}
		}
		break;

	default:
		break;
	}
	return 0;
}
*/