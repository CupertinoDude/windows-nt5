//***************************************************************************
//
// Copyright (c) 1997-1999 Microsoft Corporation
//
// testCOM.IDL
//
//
//***************************************************************************
import "oaidl.idl";
import "wbemcli.idl";


	/****************************************************************************
	* This interface supports functions implemented by a WMI to XML Convertor
	* The purpose of this interface is to convert WMI entities (objects, object paths,
	* object names etc.) to their XML representation
	*****************************************************************************/
	[
		local,
		helpstring("WMI TO XML CONVERTOR"),
		uuid(FA8D73D7-CD4E-11d3-93FC-00805F853771)

	]
	interface IWbemXMLConvertor : IUnknown
	{
		//***************************************************************
		// Functions for Conversion to XML
		//***************************************************************
		[
			helpstring("Converts a WMI Object to XML in a stream")
		]
		HRESULT MapObjectToXML(
			[in] IWbemClassObject *pObject, // The WMI Object to be converted to XML
			[in] BSTR *ppPropertyList,		// Optional, only the subset of properties that need to be converted
			[in] DWORD dwNumProperties,		// The number of elements in the above array
			[in] IWbemContext *pInputFlags, // An IWbemContext object for any flags
			[in] IStream *pOutputStream,	// The stream on to which the XML encoding is written
			[in] BSTR strClassBasis);		// Optinal Class Basis, if any. This is used during enumerations

		[
			helpstring("Converts a specific property in a WMI Object to XML in a stream")
		]
		HRESULT MapPropertyToXML(
			[in] IWbemClassObject *pObject, // The WMI Object that has the property to be converted to XML
			[in] BSTR strPropertyName,		// The name of the property to be converted
			[in] IWbemContext *pInputFlags, // An IWbemContext object for any flags
			[in] IStream *pOutputStream);	// The stream on to which the XML encoding is written

		[
			helpstring("Maps an instance name into the stream")
		]
		HRESULT MapInstanceNameToXML(
			[in] BSTR strInstanceName,		// The Instance Name in WMI Object Path format to be convert to XML
			[in] IWbemContext *pInputFlags, // An IWbemContext object for any flags
			[in] IStream *pOutputStream);	// The stream on to which the XML encoding is written

		[
			helpstring("Maps a class name into the stream")
		]
		HRESULT MapClassNameToXML(
			[in] BSTR strClassName,			// The Class Name in WMI Object Path format to be convert to XML 
			[in] IWbemContext *pInputFlags, // An IWbemContext object for any flags 
			[in] IStream *pOutputStream);	// The stream on to which the XML encoding is written

		[
			helpstring("Maps an instance name into the stream")
		]
		HRESULT MapInstancePathToXML(
			[in] BSTR strInstancePath,		// The Instance Path in WMI Object Path format to be convert to XML 
			[in] IWbemContext *pInputFlags, // An IWbemContext object for any flags  
			[in] IStream *pOutputStream);	// The stream on to which the XML encoding is written

		[
			helpstring("Maps a class name into the stream")
		]
		HRESULT MapClassPathToXML(
			[in] BSTR strClassPath,			// The Class Path in WMI Object Path format to be convert to XML  
			[in] IWbemContext *pInputFlags, // An IWbemContext object for any flags   
			[in] IStream *pOutputStream);	// The stream on to which the XML encoding is written

		[
			helpstring("Maps a method result from WMI into the XML stream")
		]
		HRESULT MapMethodResultToXML(
			[in] IWbemClassObject *pMethodResult,	// The IWbemClassObject resulting from an ExecMethod() call
			[in] IWbemContext *pInputFlags,			// An IWbemContext object for any flags    
			[in] IStream *pOutputStream);			// The stream on to which the XML encoding is written
	};

	/****************************************************************************
	* This interface supports functions implemented by an XML to WMI Convertor
	* The purpose of this interface is to convert XML representation of WMI
	* entities (objects, object paths, object names etc.) to actual WMI entities
	* (IWbemClassObject, BSTR represntation of object paths etc.
	*****************************************************************************/
	[
		local,
		helpstring("XML TO WMI CONVERTOR"),
		uuid(EDB74710-4EC6-4cda-85CB-8CFD218B03D6)
	]
	interface IXMLWbemConvertor : IUnknown
	{
		//***************************************************************
		// Functions for Conversion to WMI
		//***************************************************************
		[
			helpstring("Converts XML in a stream to a WMI Object")
		]
		HRESULT MapObjectToWMI(
			[in] IUnknown *pXmlDOMNode,			// An IXMLDOMNode pointer representing a CLASS or an INSTANCE element
			[in] IWbemContext *pInputFlags, 	// An IWbemContext object for any flags
			[in] BSTR strNamespace,				// Optional, Used to set the __NAMESPACE system property
			[in] BSTR strServer,				// Optional, Used to set the __SERVER system property
			[out] IWbemClassObject **ppObject);	// An IWbemClassObject that is the result of decoding the XML representation

		[
			helpstring("Converts a specific property in an XML fragment to WMI")
		]
		HRESULT MapPropertyToWMI(
			[in] IUnknown *pXmlDOMNode,			// An IXMLDOMNode pointer representing a PROPERTY element 
			[in] IWbemClassObject *pObject,		// The Object in which the above property needs to be set
			[in] BSTR strPropertyName,			// The Name of the Property 
			[in] IWbemContext *pInputFlags); 	// An IWbemContext object for any flags     

		[
			helpstring("Maps an instance name into WMI")
		]
		HRESULT MapInstanceNameToWMI(
			[in] IUnknown *pXmlDOMNode,			// An IXMLDOMNode pointer representing a INSTANCENAME element  
			[in] IWbemContext *pInputFlags, 	// An IWbemContext object for any flags      
			[out] BSTR *pstrInstanceName);		// The resulting WMI representation of the instance name

		[
			helpstring("Maps a class name into WMI")
		]
		HRESULT MapClassNameToWMI(
			[in] IUnknown *pXmlDOMNode,			// An IXMLDOMNode pointer representing a CLASSNAME element   
			[in] IWbemContext *pInputFlags, 	// An IWbemContext object for any flags       
			[out] BSTR *pstrClassName);			// The resulting WMI representation of the class name

		[
			helpstring("Maps an instance Path into WMi")
		]
		HRESULT MapInstancePathToWMI(
			[in] IUnknown *pXmlDOMNode,			// An IXMLDOMNode pointer representing a INSTANCEPATH element  
			[in] IWbemContext *pInputFlags, 	// An IWbemContext object for any flags      
			[out] BSTR *pstrInstancePath);		// The resulting WMI representation of the instance path

		[
			helpstring("Maps a class Path into WMI")
		]
		HRESULT MapClassPathToWMI(
			[in] IUnknown *pXmlDOMNode,			// An IXMLDOMNode pointer representing a CLASSPATH element   
			[in] IWbemContext *pInputFlags, 	// An IWbemContext object for any flags       
			[out] BSTR *pstrClassPath);			// The resulting WMI representation of the class path

	};


