>> NB: look for "TODO" in the source code for other issues.

1. Should we have a configurable value that states whether M-POST and/or POST are allowed?

2. Use thread pool? - DONE

3. Use STA or MTA threads? Probably better if we use MTA but we need the "hack" wrapper
code for the SAX parser if we do. After switching to the thread pool, I use STA threads. 

4. Do context parser implementation (i.e. build an IWbemContext from a SOAP serialization)

5. <Fault>-generation code using extended error objects

6. Semisync operations

7. Async operations

8. When calling the WMIXMLConverter, just pass in the WMI namespace URI as the
    encoder should by default know how to append classnames onto the end of that
	to build schema location values.

9. Logging!

10. Connection cache

11. Chunking support in responses

12. Better URL cracking code (for handling schema GETs) required.

13. Deserializer: This is the code that converts XML to WMI on the server side by 
talking to the local WinMgmt service. I have started work on this in dserlzer.cpp
and the work is around 20% done. This code has 2 more uses besides the SOAP server
side:
	a) Use by the core team to move objects between XML and DCOM transports.
	b) If we ever write an XML Schema compiler, without implementing the SOAP
	server and client, then we can use this piece of code to compile XML Schema
	to WMI using DCOM.


