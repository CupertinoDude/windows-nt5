<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>WMI M3 </title>
</head>

<body bgcolor="#C0C0C0">

<p>&nbsp;</p>

<p><big><u><big><font color="#000080">WMI M3 </font>- Modifications to MOF Compiler for
Localization Support</big></u></big></p>

<p>Rev 1.0, raymcc, 1-Feb-99</p>

<p><strong>1.0&nbsp;&nbsp;&nbsp;&nbsp; Introduction</strong></p>

<p>This document details all revisions to the WMI MOF Compiler for the Win2000 release
(WMI M3).&nbsp; The modifications are centered around localization support.</p>

<p>See also the specification <em>MOF Localization, </em>Rev 1.9 or later.</p>

<p>The primary new behavior concerns the use of <em>amended </em>qualifiers, which are
used to produce separate 'amended' class definitions in child namespaces.&nbsp; The
amended class definition is a modification to a basic CIM class definition, but this
modification only lives in a child namespace of the primary namespace and is not normally
accessed.&nbsp;&nbsp; The MOF Compiler needs to be able to compile CIM class definitions
and separate a MOF into separate MOFs containing primary and amended class definitions in
preparation for localization, and needs to be able to compile a complex class definition
by splitting out the basic and amended portions into two separate class definitions, which
are placed in two separate namespaces.</p>

<p>Note:&nbsp; The development work in this document is covered by by <strong>DCR 43580</strong>.</p>

<p><strong>2.0&nbsp;&nbsp;&nbsp;&nbsp; Command Line Options</strong></p>

<p>The new compiler command-line switch is</p>

<p>&nbsp;&nbsp;&nbsp; <strong>-split:<em>path1,path2</em></strong><br>
</p>

<p>The <strong>_split </strong>switch will parse the MOF and write out two separate MOFs
specified by <em>path1</em> and <em>path2.&nbsp;&nbsp; </em>Any MOF submitted which
contains class definitions with <em>amended </em>qualifiers will be written out into both
MOFs, one written to <em>path1 </em>containing the primary class definition and all
qualifiers except the amended ones, and another MOF written to <em>path2 </em>containing
another copy of the class definition with only the amended qualifiers appearing wherever
they were declared in the primary MOF.&nbsp;&nbsp;&nbsp; Class definitions which contain
no amended qualifiers are simply copied to <em>path1 </em>verbatim.&nbsp;&nbsp;&nbsp; Only
class definitions with a <em>locale </em>qualifier will be written to <em>path2, </em>whether
or not they contain amended qualifiers.</p>

<p>For example, assuming the following MOF:</p>

<blockquote>
  <p><small><font face="Courier New">#pragma namespace(<a href="file://.//root//default">&quot;\\\\.\\root\\default&quot;</a>)</font></small></p>
  <p><small><font face="Courier New">[locale(0x409)]</font></small></p>
  <p><font face="Courier New"><small>class MyClass</small><br>
  <small>{</small><br>
  <small>&nbsp;&nbsp;&nbsp; [key, description(&quot;My Prop&quot;):amended]
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sint32 KeyProp;</small><br>
  <small>&nbsp;&nbsp;&nbsp; [mapping_qual(&quot;xyz&quot;):amended, volatile]
  &nbsp;&nbsp;&nbsp; sint32 OtherProp;</small><br>
  <small>}</small></font></p>
</blockquote>

<p>When compiling the above MOF with the <em>_split </em>switch, two MOFs would be written
out.&nbsp; The first MOF would be identical to the above MOF except that qualifiers of the
<em>amended </em>flavor have been removed:</p>

<blockquote>
  <p><small><font face="Courier New">#pragma namespace(<a href="file://.//root//default">&quot;\\\\.\\root\\default&quot;</a>)</font></small></p>
  <p><small><font face="Courier New">[locale(0x409)]</font></small></p>
  <p><font face="Courier New"><small>class MyClass</small><br>
  <small>{</small><br>
  <small>&nbsp;&nbsp;&nbsp; [key]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sint32 KeyProp;</small><br>
  <small>&nbsp;&nbsp;&nbsp; [volatile] sint32 OtherProp;</small><br>
  <small>}</small></font></p>
</blockquote>

<p>The second MOF contains another copy of the class definition, but with <em>only </em>the
amended qualifiers.&nbsp; Further, this MOF must be targeted at the child namespace
specified by the locale of the class in the first MOF (note the name composition
algorithm, &quot;ms_&quot; + string form of hex locale digits not including the leading
0x):</p>

<blockquote>
  <p><small><font face="Courier New">#pragma namespace(<a href="file://.//root//default">&quot;\\\\.\\root\\default\\ms_409&quot;</a>)</font></small></p>
  <p><small><font face="Courier New">[amendment, locale(0x409)]</font></small></p>
  <p><font face="Courier New"><small>class MyClass</small><br>
  <small>{</small><br>
  <small>&nbsp;&nbsp;&nbsp; [key, description(&quot;My Prop&quot;):amended] sint32 KeyProp;</small><br>
  <small>&nbsp;&nbsp;&nbsp; [mapping_qual(&quot;xyz&quot;):amended]
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sint32 OtherProp;</small><br>
  <small>}</small></font></p>
</blockquote>

<p>The locale qualifier is retained as if it were always <em>amended.&nbsp;&nbsp; </em>And
of course, <em>key </em>is special-cased in WMI, so it would be retained anyway.
&nbsp; Note that <em>volatile, </em>while present on the basic class definition is not in
the amended class definition.&nbsp; Note that the class definition is tagged with the <em>amendment
</em>qualifier, which shows to the user that the class is an add-on to another class
definition. </p>

<p>It is important to note that the <em>_split </em>switch does not load MOFs into the
repository under any circumstances.</p>

<p><strong>&nbsp;</strong></p>

<p>&nbsp;</p>
</body>
</html>
