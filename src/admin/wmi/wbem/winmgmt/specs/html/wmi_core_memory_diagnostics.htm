<html>

<head>
<title>WMI Core Memory Diagnostics</title>
<meta name="GENERATOR" content="Microsoft FrontPage 3.0">
</head>

<body bgcolor="#C0C0C0" text="#000080">

<p><u><big><big>WMI Core Memory Diagnostics</big></big></u></p>

<p>Rev 1.1, raymcc, 15-Jun-99</p>

<p>&nbsp;</p>

<hr>

<p><strong>1.0&nbsp; Introduction</strong></p>

<p>This memo details how to use memory diagnostic functionality within WinMgmt.&nbsp; It
is intended for debugging the M3 builds prior to the Win2000 release.&nbsp; The mechanisms
will be a standard part of the Core drops until we near the end of the M3 release cycle.</p>

<hr>

<p><strong>2.0&nbsp; General</strong></p>

<p>There several types of diagnostics available. 

<ul>
  <li>Memory leak tracking</li>
  <li>Out-of-memory simulation</li>
  <li>On-demand debug break</li>
  <li>Real-time object validation enabling</li>
</ul>

<hr>

<p><strong>3.0&nbsp; Output</strong></p>

<p>The output of the following mechanisms is dumped into <strong>WinMgmt.Mem.Log</strong>
in the LOGS subdirectory.</p>

<hr>

<p><strong>4.0&nbsp; Enabling the Diagnostics</strong></p>

<p>There are several steps involved in turning on the diagnostics.&nbsp; The switches are
controlled by a combination of Win32 events and entries in WMIDBG.INI, a small INI file in
the WBEM directory.</p>

<p>SIGNAL.EXE is provided by the Core Team to turn on/off the various diagnostics. &nbsp;
The WMI Test Team has other mechanisms as well for WMIStress.</p>

<hr>

<p><strong>5.0&nbsp; WMIDBG.INI</strong></p>

<p>The WMIDBG.INI file has the following entries:</p>

<blockquote>
  <p><font face="Courier">[WMI DEBUG]<br>
  DLLNAME=E:\IDW\DBGHELP.DLL<br>
  SYMPATH=D:\WINNT\SYSTEM32\WBEM</font></p>
  <p><font face="Courier">FAIL_ALLOC=ESS</font></p>
  <p><font face="Courier">FAIL_ALLOC_NUM=5<br>
  </font></p>
</blockquote>

<p>The <em>DllName</em> entry points to the Debug Help DLL (imagehlp.dll or dbghelp.dll),
and SYMPATH is where the .PDB symbol files will be located.</p>

<p><em>Fail_Alloc </em>can be set to one of the following</p>

<blockquote>
  <p>ESS = fails memory allocations only in ESS</p>
  <p>FASTOBJ = fails memory allocations only FASTOBJ</p>
  <p>CORE= fails memory allocations only in Core &amp; Query Engine</p>
  <p>REPOSITORY = fails memory allocations on in Repository.</p>
</blockquote>

<p><em>Fail_Alloc_Num, </em>if present, tells which allocation to fail.&nbsp; If 5, for
example, it means fail the 5th allocation, where all prior and following allocations
succeed.&nbsp; This will allow some repeatability of failure in controlled test cases.</p>

<p>The failure scenarios are only enabled if&nbsp; EVENT_WINMGMT_FAIL_ALLOCATOR is
signaled.</p>

<hr>

<p><strong>6.0&nbsp; Leak Tracking</strong></p>

<p>The leak tracking is based on simple overloads of internal memory allocation functions.
&nbsp;&nbsp; As each allocation takes place, the file and line number of the site of the
allocation request is recorded in a record.&nbsp; When the memory is deleted, the record
is also deleted.&nbsp; Over time, any leaking memory allocations will have records which
were not removed.&nbsp; </p>

<p>All of the functionality described can be enabled/disabled using the <strong>signal.exe
</strong>command line utility.</p>

<p>Not all allocations can be tracked via this mechanism, but a number of routine leaks
should be detected by this mechanism.</p>

<p>To turn on leak tracking, an external process should signal the following event:</p>

<p>&nbsp;&nbsp;&nbsp; EVENT_WINMGMT_ENABLE_LEAK_TRACKING</p>

<p>To turn off leak tracking, the following event is signaled:</p>

<p>&nbsp;&nbsp;&nbsp; EVENT_WINMGMT_DISABLE_LEAK_TRACKING</p>

<p>To clear and reset the internal tracking list, signal the following (at any time,
whether leak tracking is enabled or not)</p>

<p>&nbsp;&nbsp;&nbsp; EVENT_WINMGMT_RESET_LEAK_TRACKING</p>

<p>To dump the current list of allocations to a log file, signal:</p>

<p>&nbsp;&nbsp;&nbsp; EVENT_WINMGMT_DUMP_LEAK_TRACKING</p>

<hr>

<p><strong>7.0&nbsp; Out-of-Memory Simulation</strong></p>

<p>All of the functionality described can be enabled/disabled using the <strong>signal.exe
</strong>command line utility.</p>

<p>To simulate an out-of-memory condition for CIMOM, signal</p>

<p>&nbsp;&nbsp;&nbsp; EVENT_WINMGMT_FAIL_ALLOCATOR</p>

<p>All memory allocation attemps after receiving this event will fail.&nbsp; Internal <em>operator
new </em>operations will throw exceptions and VARIANT / BSTR allocations will return NULL.</p>

<p>To restore normal behavior, signal</p>

<p>&nbsp;&nbsp;&nbsp; EVENT_WINMGMT_RESTORE_ALLOCATOR</p>

<p>To fail a single allocation, signal</p>

<p>&nbsp;&nbsp;&nbsp; EVENT_WINMGMT_FAIL_NEXT_ALLOCATION</p>

<p>Tracking how the exception was raised is a useful feature.&nbsp; If the following is
signaled, then information on the allocation at the time the exception was raised will be
logged:</p>

<p>&nbsp;&nbsp;&nbsp; EVENT_WINMGMT_ENABLE_EXCEPTION_TRACKING</p>

<p>To turn off this feature, signal</p>

<p>&nbsp;&nbsp;&nbsp; EVENT_WINMGMT_DISABLE_EXCEPTION_TRACKING</p>

<p>&nbsp;</p>

<hr>

<p><strong>8.0 WinMgmt Signals</strong></p>

<p>If, during normal operation, WinMgmt signals the manual reset event
EVENT_WINMGMT_OUT_OF_MEMORY, this means that WinMgmt believes it has reached a situation
in which there is no more memory available.&nbsp; If it sets the event to a non-signaled
state, then WinMgmt believes it can proceed normally, as memory is again available.</p>

<p>&nbsp;</p>

<hr>

<p><strong>9.0&nbsp; IWbemClassObject Validation</strong></p>

<p>Functions to perform object BLOB validation have been added to WBEMCOMN.DLL.&nbsp; In
Release build, by default, there are tunred off.&nbsp; In Debug builds, they are turned
on.</p>

<p>Internal object validation is turned on by using <strong>signal.exe </strong>with the
/ENABLE_OBJECT_VALIDATION switch or by signalling an event called
&quot;EVENT_WINMGMT_ENABLE_OBJECT_VALIDATION&quot;.</p>

<p>To turn off object validation, using <strong>signal.exe </strong>with the
/DISABLE_OBJECT_VALIDATION switch or signal the event named
&quot;EVENT_WINMGMT_DISABLE_OBJECT_VALIDATION&quot;.</p>

<p>The functions can be enabled/disabled using named events (as per above).</p>

<p>To enable object validation, signal</p>

<p>&nbsp;&nbsp;&nbsp; EVENT_WINMGMT_ENABLE_OBJECT_VALIDATION</p>

<p>To disable object validation, signal:</p>

<p>&nbsp;&nbsp;&nbsp; EVENT_WINMGMT_DISABLE_OBJECT_VALIDATION</p>

<p>Object validation functions are called in the following places:</p>

<p>At the end of: IWbemClassObject::Put, IWbemClassObject::Delete,
IWbemClassObject::PutMethod, IWbemClassObject::DeleteMethod.</p>

<p>We also call validation before Unmerging an object BLOB for storage into the database
(check for storing corrupted objects), and after Merging an object BLOB retrieved from the
database.&nbsp; The calls can be added in other places as necessary.</p>

<p>If validation fails, we call DebugBreak(), which will halt if we are running under a
debugger.</p>

<hr>

<p><strong>10.0&nbsp; Debug Break</strong></p>

<p>Signaling EVENT_WINMGMT_DEBUG_BREAK will cause WinMgmt to execute DebugBreak( )
internally to help break into a debugger.</p>

<p>&nbsp;</p>
</body>
</html>
