<html>

<head>
<title>Finalizing WMI Perf Counters</title>
<meta name="GENERATOR" content="Microsoft FrontPage 3.0">
</head>

<body bgcolor="#D6D6D6" text="#000080">

<p><big><u><big><font color="#004080">WMI Core Team Memo: </font><font color="#008000">Finalizing
WMI and Perf Counters</font></big></u></big></p>

<table border="1" width="23%">
  <tr>
    <td width="24%">To</td>
    <td width="76%">sanjes, a-dcrews</td>
  </tr>
  <tr>
    <td width="24%">Author</td>
    <td width="76%">raymcc</td>
  </tr>
  <tr>
    <td width="24%">Rev</td>
    <td width="76%">1.01, 30-Mar-99</td>
  </tr>
  <tr>
    <td width="24%">Rev</td>
    <td width="76%">1.02, 03-Apr-99 sanjes fleshed out section on ADAP.</td>
  </tr>
  <tr>
    <td width="24%">Rev</td>
    <td width="76%">1.02, 04-Apr-99 sanjes Got section on ADAP more in line with what really
    happens.&nbsp; Fleshed out localization and remote sections.</td>
  </tr>
</table>

<p>&nbsp;</p>

<hr>

<p><big><u><strong>1.0&nbsp; Introduction</strong></u></big></p>

<p>This document summarizes the remaining tasks to complete the integration of WMI
Hi-Performance Providers and NT Perf Counters for the final release of Windows 2000.</p>

<p>The strategic goal for WMI-sourced perf counters in Win2000 is that WMI and SysMon show
exactly the same list of available counters.&nbsp;&nbsp; There should be no counter
available from WMI that is not available from SysMon and vice-versa.&nbsp;&nbsp; The
available counters will be 'raw' mode counters only.&nbsp;&nbsp; Applications using WMI
will have to do their own cooking until the WMI 'Counter Cooker' is available.</p>

<p>For Win2000 RTM &amp; WMI Nova, <u>there is no requirement</u> that PerfMon or
registry-based access of Perf Counters show all counters available from WMI-based
providers.&nbsp; Nor is there a requirement that WMI will 'cook' counters for user-level
applications.</p>

<p>It is important that WMI alone can see every raw counter in the system, whether
provided by the NT4 mechanism or by a WMI provider.</p>

<p>This document does not cover the proposed WMI 'counter cooker', which would be released
after Win2000 RTM.</p>

<hr>

<p><big><u><strong>2.0&nbsp; The Landscape</strong></u></big></p>

<p>In Win2000, SysMon uses PDH.DLL (Performance Data Helper).&nbsp; PDH wraps the
registry-based counter access which accesses low-level 'perflibs'.&nbsp;&nbsp; Perflibs
provide only raw counters. PDH has become the 'counter cooker' for Win2000.</p>

<p>However, purely registry-based perf counters obtained directly from <small>HKEY_PERFORMANCE_DATA</small>
(and not from PDH) are not cooked.&nbsp;&nbsp; The counter values available from WMI are
just like the counter values available from the registry.&nbsp;&nbsp; The application must
perform the counter 'cooking' phase.&nbsp; In past releases of Win2000, applications such
as <em>PerfMon </em>always did their own counter cooking by polling successive raw values
and computing the time-adjusted value.</p>

<p>In Win2000 RTM, SysMon will have two 'data sources', selectable by the user in a
pull-down menu.&nbsp;&nbsp; One will be 'Registry' (the default) and the other will be
WMI.</p>

<p>Note that <strong>PerfMon</strong> is coded to use <small>HKEY_PERFORMANCE_DATA </small>in
the Win32 registry. &nbsp;&nbsp; Since this execution path touches neither PDH nor WMI,
PerfMon will not be able to see any WMI-based counters unless we produce a module which
translates WMI-style counters back into registry format.&nbsp; <u>There are no plans to do
this in 1999.</u></p>

<hr>

<p><big><u><strong>3.0&nbsp; Remaining Tasks for NT Base Team (Bob Watson)</strong></u></big></p>

<p>The only remaining tasks for Bob Watson for Win2000 RTM are enumerated below.&nbsp; The
total effort is very small and quite reasonable.&nbsp; The objective is to remove any
further coding burdens from Bob Watson and perform all the remaining 'hard work' in the
WMI Core Team.</p>

<table border="1" width="75%">
  <tr>
    <td width="18%">LODCTR</td>
    <td width="82%">Modifications to reliably signal WMI of the arrival of new classes, even
    when logon isn't possibly by appropriate registry/log file modifications.</td>
  </tr>
  <tr>
    <td width="18%">UNLODCTR</td>
    <td width="82%">Modifications to remove classes from WMI, or log the attempt.</td>
  </tr>
  <tr>
    <td width="18%">SysMon</td>
    <td width="82%">Pull-down menus to select data source and appropriate runtime calls into
    PDH to select the data source. Persistent the user's selection should probably also be
    done.</td>
  </tr>
  <tr>
    <td width="18%">PDH</td>
    <td width="82%">Modification to entry points to select the data source for PDH.DLL (WMI or
    Registry).</td>
  </tr>
  <tr>
    <td width="18%">Security/Localization</td>
    <td width="82%">Any minor modifications suggested by WMI Team to deal with WMI security
    &amp; localization.</td>
  </tr>
</table>

<p>Bugs need to be filed in NT Raid to deal with these issues after Beta 3 shipment and
the tree is opened for check-ins.</p>

<hr>

<p><big><u><strong>4.0&nbsp; Remaining Tasks for WMI Team</strong></u></big></p>

<table border="1" width="76%">
  <tr>
    <td width="19%">LODCTR</td>
    <td width="81%">Use new tracking code by Watson to keep WMI perf schema up-to-date.</td>
  </tr>
  <tr>
    <td width="19%">UNLODCTR</td>
    <td width="81%">Use new tracking code by Watson to keep WMI perf schema up-to-date.</td>
  </tr>
  <tr>
    <td width="19%">Autodiscovery &amp; Autopurge</td>
    <td width="81%">Write module which scans the registry for new perflibs or perf libs which
    have been removed and keeps the schema up-to-date.&nbsp; In some cases, new perflibs will
    show up and in some cases they will be removed.</td>
  </tr>
  <tr>
    <td width="19%">Autoreconnect</td>
    <td width="81%">Write code which automatically reconnects refreshers which lose their
    connections (so as to not be missing a feature already present in perfmon/sysmon using the
    registry).</td>
  </tr>
  <tr>
    <td width="19%">Security</td>
    <td width="81%">Properly integrate PDH &amp; WMI security models.</td>
  </tr>
  <tr>
    <td width="19%">Localization</td>
    <td width="81%">Properly integrate PDH &amp; WMI localization models.</td>
  </tr>
</table>

<p>&nbsp;</p>

<p><strong>4.1&nbsp; LODCTR and UNLODCTR</strong></p>

<p>LODCTR.EXE reads INI files describing perf counters and installs them on the local
machine by populating various registry entries.&nbsp; At the same time it needs to create
MOF definitions for the counters with the corresponding IDs it assigned to the registry
and install them into WMI. </p>

<p>Deinstallation via UNLODCTR.EXE is the inverse process.&nbsp; UNLODCTR needs to find
the registry entries it created and remove them and deinstall the corresponding WMI
classes.</p>

<p><strong>4.2&nbsp; ADAP Module (AutoDiscovery / AutoPurge)</strong></p>

<p>Since users may in fact directly populate the registry, WMI needs to periodically scan
the registry in order to discover if new perf objects have been installed which need WMI
backing.&nbsp; Likewise, the registry needs to be scanned to see if anything has been
removed so that the corresponding WMI class can be removed.</p>

<p>A module which reconciles WMI and Perf needs to be written and added to CIMOM.</p>

<p>&lt;Lodctr&gt; needs to independently log what it did just in case it couldn't reach
CIMOM or else write the MOF somewhere.</p>

<p>The module can be accessed by running WINMGMT with a command line switch of /RESYNCPERF
(this will be undocumented).&nbsp; This is mostly so that we can protect WINMGMT from
crashing due to a badly behaved performance library.&nbsp; The intervals that will be
scheduled in WINMGMT for this to happenn have yet to be decided.&nbsp; LODCTR/UNLODCTR
will be able to force the ADAP module to be run by signalling a Systemwide named event.</p>

<p>The perf counter classes will now derive from CIM_StatisticalInformation and reside in
the CIMV2 namespace.&nbsp; Localized classes will reside in the appropriate localization
sub-namespaces.</p>

<p>When the module runs, it will connect to root\cimv2, and ensure that the provider
instances are defined in that namespace.&nbsp; It will also ensure that the base classes,
Win32_Perf and Win32_PerfRawData are defined in that namespace.&nbsp; If any of the
classes have been deleted or modified, we will replace the classes and/or instances.
&nbsp; Failures here will cause event log errors to be generated.&nbsp; If the required
info cannot be set in the root\cimv2 namespace or we fail to connect, ADAP will stop.</p>

<p>When the module runs, it will connect to root\cimv2 and perform an enumeration of all
classes deriving from Win32Perf_RawData. &nbsp; Once this enumeration has returned, we
will sort the objects by classname, filtering out all objects that are not provided by the
PerfCtr provider.&nbsp; An object that is provided by the PercfCtr provider will have a
reserved qualifier of &quot;genperfctr&quot; set to TRUE.&nbsp; Objects that do not meet
this criteria are assumed to be handled by other providers.</p>

<p>We will also need to open all the existing localization subnamespaces.&nbsp; For each
localized name database, designated via the primary laguage id (e.g. 009 for english, 007
for German), there will need to be a corresponding namespace.&nbsp; The corresponding
namespace will need an LCID, which will basically consist of the default sublanguage and
sort combined with the primary language since we have no way of actually obtaining more
specific sublanguage and sort information.&nbsp; This means that &quot;007&quot; would map
to &quot;MS_407&quot;, &quot;011&quot; would map to &quot;MS_411&quot;, etc.&nbsp; If the
namespaces do not exist, an event will be logged to the event log, but standard operation
we will not halt the module.&nbsp; We will also verify and if necessary, repair Win32_Perf
and Win32_PerfRawData in the namespace.&nbsp; Once again, failures here will cause an
event log error to be generated, but the ADAP module should not halt.</p>

<p>The list of objects remaining will represent a snapshot of the current WMI PerfCtr
objects.</p>

<p>Next, the module will traverse the HKLM\CurrentControlSet\Services key looking for all
subkeys that contain a Performance subkey.&nbsp; For each one of these entries, there must
be a &quot;First Counter&quot; and &quot;Last Counter&quot; value or an &quot;Object
List&quot; value for us to consider the perflib to be active.</p>

<p>The ADAP module will then call the Open/Collect/Close functions in the DLL.&nbsp; If
Open returns an error, or we don't get back any objects, we will assume that the library
is inactive.&nbsp; If any of the Open/Collect/Close calls take over a minute to perform,
we will determine that the library is inactive.&nbsp; If any of the calls throw an
exception, or the Collect returns bad data or corrupts our buffer, we will mark the
library as bad, by placing a WBEMADAPFail value in the performance, along with a value
WBEMADAPFailInfo, containg the filesize and creation date.&nbsp; If the value is -1 and
file info has not changed, then we will from this point on, always ignore this
library.&nbsp; Otherwise, if the file has changed, we will retry calling it. The Collect
call will occur twice.&nbsp; Once for &quot;Global&quot; data and once for
&quot;Costly&quot; data.</p>

<p>While we are calling into the library, we will set a WBEMADAPStatus flag to 1.&nbsp; If
anything destructive happens while we run (e.g. a blue screen), we will know that the
process died the last time we ran.&nbsp; If we see it the next time, through, we will
increment the value.&nbsp; If we hit the status flag three times over a 1 day period ), we
will mark the WBEMADAPFail valuepewr the above info.&nbsp; By using the status flag, we
effectively reduce the chances that a user accidentally terminating us in mid-operation is
interpreted as a critical failure (the likelihood of us cancelling in exactly the same
place three times in a row, is pretty slim).</p>

<p>We will now walk both the &quot;Global&quot; and &quot;Costly&quot; BLOBs for objects.
&nbsp; For each object, we will try to create a class with the appropriate properties and
qualifiers.&nbsp; If an object index shows up in both the &quot;Global&quot; and
&quot;Costly&quot; blobs, it will be ignored during processing of the costly BLOB. &nbsp;
It is illegal to have objects in both &quot;Global&quot; and &quot;Costly&quot; blobs have
different object indexes, but the same class name.&nbsp; To prevent conflicts between
objects in &quot;Global&quot; and &quot;Costly&quot; BLOBS, objects in &quot;Costly&quot;
will have the word &quot;_Costly&quot; appended to their class names.</p>

<p>When building property names, it is illegal to have two properties of the same name.
&nbsp; If we encounter two different property indexes with the same name, we will fail the
class.&nbsp; The exception to this rule is the case of a numerator and base pair.&nbsp; In
this case, the numerator counter uses the base counter for cooking.&nbsp; In this case,
the base counter type will have the PERF_COUNTER_BASE flag set.&nbsp; The name of the base
property will be the name of the preceding counter, with &quot;_Base&quot; appended to the
name, so one can easily tell which property a base value corresponds to.&nbsp; If we
encounter two or more base counters in a row, we will fail the class.&nbsp; When creating
property and class names, we will remove all whitespace, and non-alphanum characters with
the exceptions of '%' will become &quot;Percent&quot;, '/' will become &quot;Per&quot;,
'@' will become &quot;At&quot;, '&amp;' will become &quot;And&quot; and '#' will become
&quot;Number&quot;.</p>

<p>Class and property names from the english name database (&quot;009&quot;).&nbsp; We
will standardize on English for naming, since the &quot;009&quot; name database is always
installed. We will also build localized versions of the class for each language we
find.&nbsp; In order to avoid duplicate names, we will prepend the object title name with
the name of the service (e.g. Win32Perf_Raw_Perfproc_Process).</p>

<p>When building property names, it is illegal to have two properties of the same name.
&nbsp; If we encounter two different property indexes with the same name, we will fail the
class.&nbsp; If we encounter more than one property index of the same value, only one can
be displayed (all others should be marked with a &quot;NO_DISPLAY&quot; flag).&nbsp; How
we will handle naming in these cases is still TO BE DECIDED.&nbsp; When creating property
and class names, we will remove all whitespace, and non-alphanum characters with the
exceptions of '%' will become &quot;Percent&quot;, '/' will become &quot;Per&quot;, '@'
will become &quot;At&quot;, '&amp;' will become &quot;And&quot; and '#' will become
&quot;Number&quot;.</p>

<p>The localized classes will contain a minimal set of qualifiers (e.g.
&quot;genperfctr&quot;), and a localized &quot;DisplayName&quot; qualifier.&nbsp; If we
are unable to locate a localized index, we will use the name from &quot;009&quot;.</p>

<p>If we are unable to build all classes for a perflib, we will not perform any WMI
updates for the perflib.&nbsp; Appropriate events will be logged.&nbsp; Existing classes
will not be updated or deleted.</p>

<p>Once all classes has been built, we will search for a corresponding class name in our
class list.&nbsp; If we do not find a matching class name, we will add the new definition
a into the corresponding namespace.</p>

<p>If we find a matching classname, we will compare the class definitions using the
IWbemClassObject::CompareTo function (not comparing namespace data, of course).&nbsp; If
we do not get a match, we will replace the existing class definition in the corresponding
namespace.&nbsp; If we get a match in the root namespace, then we will perform the
comparison in each of the localized namespaces, replacing or adding definitions as
needed.&nbsp; Once we have handled the classname, we will mark the class as handled in the
appropriate list.</p>

<p>The above operations will be performed in the ROOT\CIMV2 namespace as well as its
sub-namespaces.</p>

<p>If we fail to Add or modify any existing classes, we will log an appropriate event,
stop processing the perflib and ensure that we do not delete any existing classes. &nbsp;
This should only happen if something is seriously wrong on the workstation (out of memory,
out of disk space, COM fails, etc.).</p>

<p>Finally, we will check if any class object definitions are left unhandled WMI
enumeration lists.&nbsp; If so, we will then query each object in the main namespace for
its registry service name (one of the qualifiers).&nbsp; We will then check the registry
for a Performance subkey, and unless it exists and contains First Counter/Last Counter or
&nbsp; ObjectList values, we will remove the objects from WMI.</p>

<p>It is important to note that if, while processing a perflib, we encounter any errors,
the ADAP module should NEVER delete any existing classes, the rationale being that once
the data is in WMI, unless we determine that a perflib has been uninstalled (performance
key is removed, or FirstCounter/LastCounter and/or ObjectList values are not present), the
data should stay in WMI.&nbsp; Note that failure to retrieve a performance key value due
to an Access-Denied error should also NOT delete classes.</p>

<p><strong>c.&nbsp; Localization</strong></p>

<p>The WMI localization scheme is somewhat different from the NT Perf Counter scheme.
&nbsp; The main class definition will ALWAYS reside in ROOT\CIMV2.&nbsp; For each
localized name database in WINMGMT, we will look for a corresponding localization
namespace in ROOT\CIMV2.&nbsp; For example, 009 will map to MS_409, 007 to MS_407, etc.
&nbsp; Amended class definitions will be placed in these namespaces.&nbsp; These will
contain a minimal qualifier set, plus a localized &quot;DisplayName&quot; qualifier.</p>

<p>The refresher code has also been modified to support WBEM_FLAG_USE_AMENDED_QUALIFIERS
in AddObjectByPath() and AddEnum().&nbsp; Under the covers, WBEM will load the appropriate
localized class definition and return it to the client.&nbsp; The provider will not need
to perform any special processing.&nbsp; Because refresh operations only replace instance
data, the localized class definitions should be transparent to the data.</p>

<p><strong>d.&nbsp; Security</strong></p>

<p><strong>e.&nbsp; Remoting</strong></p>

<p>During remoting, there is the chance that the network will drop or, the remote machine
will drop.&nbsp; If this happens, WMI will perform as follows.</p>

<p>A new status code WBEM_S_PARTIAL_RESULTS has been added.&nbsp; If multiple datasources
are being queried by a single refresher and during Refresh calls one or more sources fail,
we will return WBEM_S_PARTIAL_RESULTS.&nbsp; If only one data source exists, the error
will be directly returned.&nbsp; If all datasources fail, the first error will be
returned.</p>

<p>If we perform a Remote Refresh or a Remote Delete, and the operation fails with a code
indicating a dead network or missing datasource, we will mark the remote connection as
down and spin off a background thread that will silently attempt to reconnect to the
remote machine.&nbsp; If and when the reconnection successfully occurs, pointers will be
marshaled into streams so the next call to refresh can unmarshal the pointers and rehook
up the refresher.&nbsp; Upon successful reconnection, the reconnect thread will go away.
&nbsp; Remove operations that occur during a disconnected state will not fail.&nbsp; They
will occur locally, but will also be batched up so when we are able to reconnect, we are
then able to perform the proper remove operations.&nbsp; The remote refresher will be
signified by a GUID it generates upon creation.&nbsp; When we reconnect, the GUID for the
remote refresher will be transmitted back to the client and compared against the last one.
&nbsp; If it is the same, we are talking to the same refresher, and only need to perform a
batch remove operation (if any).&nbsp; If it is different, then we need to rebuild the
remote refresher using the data currently stored (e.g. Paths, ids, etc).&nbsp; Because the
client objects should be the same, the client will be none the wiser.&nbsp; Also, since
the id for each object or enumerator the client keeps is different from the remote id, a
changed remote id will be completely transparent to the client.&nbsp; If we are unable to
rebuild any objects or enumerators, we will not return any errors, however the existing
data will no longer be updated.</p>

<hr>

<p><u><strong>4. <em>White Dwarf </em>Modules</strong></u></p>

<p>The <em>White Dwarf </em>project emcompasses post-Nova code which might ship in the NT
Resource Kit or SDK, etc.</p>

<p>There are two new modules contemplated:</p>

<p>(1) </p>

<hr>

<p>&nbsp;</p>

<p>1. Faul-tolerance in refresher.&nbsp;&nbsp; Error objects telling with subobjects in
refresher fail to refresh.&nbsp;&nbsp; WBEM_S_PARTIAL_RESULT</p>

<p>3. WMI errors spit into event log if LODCTR fails.</p>

<p>4. UNLODCTR hooked?</p>

<p>5. All old-style perflibs show up in both systems</p>

<p>6. Security on refresher</p>

<p>7. WBEMPERF optimizations.</p>

<p>8. Performance in PDH vs WBEMPERF vs. other</p>

<p>9. Perf counter ACLs/security.&nbsp;&nbsp; The reg model is 2-acls, we have per-ns
acls.&nbsp;&nbsp; These will mismatch.&nbsp; Will anybody care?</p>

<p>fault tolerance</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>
</body>
</html>
