<html>

<head>
<meta HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1252">
<meta NAME="GENERATOR" CONTENT="Microsoft FrontPage 3.0">
<title>WBEM Core Team Assigned Nova DCRs</title>
<style><!-- 
--></style>
</head>

<body LINK="#0000ff" VLINK="#800080" BGCOLOR="#d3d3d3">

<p><img SRC="microsoft.gif" WIDTH="167" HEIGHT="36" ALT="microsoft.gif (2952 bytes)">&nbsp;&nbsp;&nbsp;
<em>Version 1.06, 7-Aug-98, raymcc</p>

<p></em><big><big><font COLOR="#0000ff">Nova M1</font> Core Team Approved DCRs and
Features</big></big></p>

<p>This document contains all <em>scheduled</em> DCRs and Code Defects.&nbsp; Due to time
off for the team, serious work for all developers starts approximately July 10 and is
complete by August 3, 1998.&nbsp; The new features and fixes fall into one of these
categories: 

<ul>
  <li>Opal-specific DCRs </li>
  <li>LCE Related Work </li>
  <li>Impersonation/Security Related Work </li>
  <li>Preparatory Work for Native COM Methods </li>
  <li>Important V1 Deferred Code Defects </li>
  <li>Critical NT5 Perf Counter Issues </li>
</ul>

<p>Remaining Opal-Specific Issues: 

<ul>
  <li>21531 - Ordering of Selected Columns </li>
  <li>27990 - Support UNION keyword </li>
  <li>11863 - Post-processing of JOINed instances </li>
  <li>21360 - Instance-encoding reduction </li>
  <li>17095 - MOF &#145;autorecover&#146; pragma </li>
  <li>23365, 23897 - Incorrect prototype results (__GENERIC instances with JOINs) </li>
  <li>21267 - Cancel Async Calls for Providers </li>
  <li>21180 - UNSECAPP Doesn&#146;t Terminate Correctly </li>
  <li>28229&nbsp;-WQL: Conditional queries against array properties of embedded objects should
    return in an error message </li>
</ul>

<hr>

<p><strong><big>10311&nbsp;&nbsp;&nbsp; DCR&nbsp;&nbsp;&nbsp; 2&nbsp;&nbsp;&nbsp; CIMOM
and satisfying event registrations</big><br>
<big><br>
</big><font color="#008000">Status: Completed (Lev)</font></p>
</strong>

<p>This is a behavorial problem in the way that we disallow certain kinds of event
registrations.&nbsp; Here is the text from RAID by Roger Booth:</p>

<blockquote>
  <font FACE="Arial"><small><p>When attempting to register for a __ClassCreationEvent (as in
  select * from __ClassCreationEvent)<br>
  CIMOM rejects the registration if there are any dynamic class providers that are loaded.
  It does this <br>
  working on the principle that at the time of registratiion it knows that it may not be
  able to &quot;fully satisfy&quot; the <br>
  query, because of the possible limitations of one or more dynamic class providers. <br>
  <br>
  I think this is the wrong approach for 2 reasons. The first is that if I wish to write an
  application <br>
  that listens for class creation events, but that I don't mind if there are some classes
  which I am not<br>
  notified on at creation. For example I may wish to write a browser that dynamically
  updates when a class<br>
  is created. It may not matter that it misses some. CIMOM should allow the registration to
  go ahead<br>
  but return a warning code that says that the query may not be fully satisfied. Currently I
  am prevented<br>
  from writing any application at all. <br>
  <br>
  The second reason is that I may have lodged the registration prior to the introduction of
  a dynamic <br>
  class provider. What then happens to my registration ? Do I suddenly stop receiving all
  class creation <br>
  events simply because I introduced a dynamic class provider. This would seem strange. <br>
  </small></p>
</blockquote>
</font>

<p>Importance: Moderate, depends on outcome of LCE work</p>

<hr>

<p><strong><big>11391&nbsp;&nbsp;&nbsp; DCR&nbsp;&nbsp;&nbsp;&nbsp; CIMOM DCR -
Impersonation providers</big></p>
<font COLOR="#00ffff">

<p></font><font color="#008000">Status: Completed (RayMcc)</font></p>

<p>Importance: Critical</p>
</strong>

<p>This is a general cover DCR for making provider threads directly impersonate the
client.</p>

<hr>

<p><strong><big>RAID 11863 &#150; Postprocessing of Joined Instances</big></p>
<font COLOR="#00ffff">

<p></font><font color="#008000">Status: Completed (a-davj)</font></p>
</strong>

<p><b>Problem</b></p>

<p>This involves trimming out the unselected properties of embedded objects in a select
statement. CIMOM already does this to a certain extent, but not for embedded objects. We
at least have to add to logic to ensure that the objects embedded within __GENERIC joined
instances are properly trimmed. Otherwise, the semantics of select statements are not
correctly observed and SMS client code becomes confused.</p>

<p>This has not yet been investigated as of Opal Beta 2. It may turn out that we already
have enough implemented for SMS Opal.<i><b>&nbsp;</p>
</b></i>

<hr>

<p><strong><big>14808, 19380, 28710&nbsp;&nbsp;&nbsp; CIMOM DCR - 64 bit conversion for
Merced</big></p>
<font COLOR="#00ffff">

<p></font><font color="#008000">Status: Completed to within limits of the tools (PaulAll)</font></p>
</strong>

<p>Importance: High, required by Frank Artale.</p>

<p>This covers the 64-bit 'compile error' scenario only, not actual 64-bit validation.</p>

<p>Importance: Critical</p>

<hr>

<p><b><big>RAID 17095 &#150; MOF &#145;<em>autorecover</em>&#146; pragma</big></p>
</b><strong><font COLOR="#008000">

<p>Status: Completed (a-davj)</p>
</font></strong><b>

<p>Problem</p>
</b>

<p>This is being requested as a MOF Compiler extension. In 503, WBEM can autorecover MOFs
based on registry locations, but SMS Team is requesting that the MOF compiler perform this
automatically by doing the registry work as part of the compilation.</p>
<b>

<p>Implementation</p>
</b>

<p>A new &quot;autorecover&quot; prama has been added to the mof syntax. By using this
pragma, the full name of the mof file is added to the &quot;Autorecover MOFs
(recovered)&quot; value in the registry. This value is a registry multi-string and is
located at &quot;HKEY_LOCAL_MACHINE\software\microsoft\wbem\cimom&quot;.</p>

<p>Before adding the file name, both the &quot;Autorecover MOFs (empty)&quot; and
&quot;Autorecover MOFs (recovered)&quot; values are checked for the file&#146;s path. If
it is found in either, then nothing more is done. If it isn&#146;t in either, it is added
as the last string in &quot;Autorecover MOFs (recovered)&quot;.</p>

<p>Example MOF;</p>
<font FACE="Courier New" SIZE="2">

<blockquote>
  <p>#pragma autorecover</p>
</blockquote>

<blockquote>
  <p>class a<br>
  {<br>
  &nbsp;&nbsp; [key]string s;<br>
  };</p>
</blockquote>
</font>

<p>Note: We may have to extend this to deal with the perf counter case with much more
reliable recovery.</p>

<p>&nbsp;</p>

<hr>

<p><strong><big>RAID 17343 &#150; Queries with NULL</big></p>
<font COLOR="#008000">

<p>Status: Completed</p>
</font></strong>

<p>Some uses of the NULL keyword are broken in query evaluation. Should be an easy fix.</p>
<b>

<p>Resolution/Implementation</p>
</b>

<p>Previously, the following query worked:</p>
<font FACE="Courier">

<p>&nbsp; query 1: select * from win32_computersystem where nameformat = NULL</p>
</font>

<p>However this query didn&#146;t work:</p>

<p>&nbsp;&nbsp;&nbsp; <font FACE="Courier">query 2: select * from win32_computersystem
where NULL = nameformat</p>
</font>

<p>The WQL parser was modified to treat a NULL on the left side of the operator as a
constant. </p>

<hr>

<p><strong><big>18465&nbsp;&nbsp;&nbsp; Code Defect&nbsp;&nbsp;&nbsp; CIMOM Auto-restart
not operational on Memphis</big></p>
<font COLOR="#00ffff">

<p></font><font color="#008000">Status: Completed (a-davj)</font></p>
</strong>

<p>Dave has coded a test build with fixes.&nbsp; </p>

<hr>

<p><strong><big>18473 Code Defect - Class saved without a name</big></p>
<font COLOR="#00ffff">

<p></font><font color="#008000">Status: Completed (sanjeev)</font></p>
</strong>

<p>Importance: Moderate</p>

<hr>

<p><strong><big>19015&nbsp;&nbsp;&nbsp; Code Defect&nbsp;&nbsp;&nbsp; CIMOM Diagnostics
are Terrible when providers can't be found</big></p>
<font COLOR="#00ffff">

<p></font><font color="#008000">Status: Completed (paulall)</font></p>
</strong>

<p>Unless we fix this, we and SMS PSS are going to get flooded with support calls. &nbsp;
Currently, if any kind of dynamic provider doesn't load, we have practically no clue as to
why not.&nbsp;&nbsp; We are going to fix our error object strategy in general to be very
sophisticated.</p>

<p>See <strong>28393.&nbsp; </strong>Subsumed under that DCR.</p>

<hr>

<p><b><big>RAID 21204 &#150; Queries with BOOL types</big></p>
</b><strong><font COLOR="#008000">

<p>Status: Completed</p>
</font></strong>

<p>Queries against <i>boolean</i> properties are not being interpreted correctly. This is
because VARIANT_FALSE is actually 0 and VARIANT_TRUE is 0xFFFFFFFF and not 1. We need to
extend the parser to allow a reasonable interpretation of boolean constants in many cases.
Whether to use nonzero, 1, -1, or all of them, and/or the TRUE/FALSE keywords needs to be
discussed.</p>

<p>TRUE and FALSE are not SQL keywords and adding them will reduce the set of valid
identifiers.</p>
<b>

<p>Implementation Notes</p>
</b>

<p>TRUE and FALSE are already treated as special constants in our code. Also, the code
treats false as 0 and anything else as true. I also put in some code so that we support</p>

<p>&nbsp;&nbsp;&nbsp; Select x from y where b = true</p>

<p>Or</p>

<p>&nbsp;&nbsp;&nbsp; Select x from y where true = b</p>

<hr>

<p><b><big>DCR 21180 &#150; UNSECAPP Doesn&#146;t Terminate Correctly</big></p>
</b><strong><font COLOR="#008000">

<p>Status: Complete</p>
</font></strong>

<p>The USECAPP.EXE is left running even when all connections are terminated. This is
believed to cause certain GPFs in SMS client code and will cause the same problems with
all WBEM clients using it.</p>
<strong>

<p>Resolution<br>
</strong>It appears that the OS is to blame for this one. This occurs only when going
remote and only when using UDP. Unsecapp does get released, but this takes about 10
minutes. There is a NT bug number 144954 that covers this. By switching the preferred
protocol to TCP/IP, the problem no longer occurs.</p>

<hr>

<p><b><big>DCR 21267 &#150; Cancel Async Calls for Providers</big></p>
</b><strong><font COLOR="#008000">

<p>Status: Completed, Untested</p>
</font></strong><b>

<p>Problem</p>
</b>

<p>In 503, WBEM does not propagate cancellation of asynchronous calls to providers. We
need to implement a propagation of CancelAsyncCall or else an equivalent asynchronous
mechanism so that providers can detect a cancelation as soon as possible.</p>

<p>SMS Team cites as a scenario a query involving a lengthy join. If this query is
canceled before the first row in the result set is delivered, the provider cannot cancel
the query, even though the user has. This can result in hours of wasted SQL execution.</p>

<p>WBEM Core Team will implement the cancelation as a direct progation to the
provider&#146;s <i>CancelAsyncCall </i>implementation. </p>
<b>

<p>Implementation Notes</p>
<sup><i>

<p>&lt;TBD&gt;</p>

<p>1 dev day for further checking</p>
</i></sup></b>

<hr>

<p><strong><big>21360&nbsp;&nbsp;&nbsp; DCR&nbsp;&nbsp; CIMOM - Instance encoding results
in objects which are too large; client memory consumption excessive</big></p>
<font COLOR="#00ffff">

<p></font><font color="#008000">Status: Completed (sanjeev, a-davj)</font></p>
</strong>

<p>Importance: High</p>

<p>This DCR covers the decoupling of class definitions from instances so that multiple
instances can share the same class part.&nbsp; Sanjeev is working on this.</p>

<p>Currently, WBEM transmits each instances with a class definition attached. Internally,
we are able to separate class and instance parts,which we do for static db storage.
Clearly, when marshaling large numbers of objects back, we would need to implement some
kind of logic to decompose the class and instance parts so that the class definition is
transmitted once and the instance parts transmitted separately.</p>

<p>In essence, the object sink or enumerator proxy would keep a cache of class definitions
transmitted, and the object sink/enum stub would actually keep a cache of class
definitions. Then, when instances are transmitted, only the instance parts are sent, under
the assumption that the class part is already available. This requires that on arrival the
class part remain permanently separated from the instance part and that instances contain
back-pointers to class parts, which involves a fairly serious object encoding change.</p>

<p>Because the proxy / stub alterations would make the network wire format incompatible
with WBEM V1, we can only implement local caches. In essence, we will transmit class and
instance parts simultaneously with each instance, as in M9, but decompose them on arrival,
and have one shared class def for all instances transmitted, where each instance has the
back pointer, as described previously.</p>

<p>Estimated Time : 2 dev weeks for encoding change, unknown for wire-protocol change</p>
<sup><i><b>

<p>&nbsp;</p>
</b></i></sup>

<hr>

<p><b><big>RAID 21531 &#150; Ordering of selected columns</big></p>
</b><strong><font COLOR="#008000">

<p>Status: Completed</p>
</font></strong><b>

<p>Problem</p>
</b>

<p>WBEM does not preserve the order of columns as they appeared in the select statement.
SQL does in fact preserve the order. WBEM objects are sequenced by the original class
declaration, and not by the query. We need to tag each property with a qualifier
indicating its position in the select clause, or otherwise change the implementation so as
to allow some indication of the original select sequence, to preserve SQL semantics and
assist in formatted output. </p>

<p>WBEM Team&#146;s work here may be limited to prototype objects and specifications,
since we do not directly produce the instances in any case. However, this extension should
be applied to all WBEM queries and not just SMS-specific ones.</p>

<p>Mark Osborne agreed that tagging the prototype object is the preferred technique, not
the actual instances.</p>
<b>

<p>Implementation</p>
</b>

<p>In the interest of efficiency, this is only implemented for prototypes. Each non-system
property is tagged with a qualifier name &quot;Order&quot; which is a VT_I4 array. An
array is used since a property might appear more than once in the list. As properties are
added to the projection filter, a running count is used to indicate the position in the
select clause. So for the simple case of:</p>

<p>&nbsp;&nbsp;&nbsp; select zip, zap, zip from ClassA</p>

<p>This would return an object with a zip and zap properties and zip would have an Order
qualifier with values {0,2} while zap would have the Order qualifier with value of {1}</p>

<p>In the case where all the properties of a class are included by virtue of a
&#145;*&#146;, then the order still counts and is based on the alphabetic position with in
the class. In the case where several classes are being joined, a single count is used. For
example, suppose there are two classes; &quot;FIRST&quot; and &quot;SECOND&quot; which has
4 non system properties;</p>

<p>&nbsp;&nbsp;&nbsp; Select FIRST.zip, SECOND.*, FIRST.zap from FIRST, SECOND &#133;..</p>

<p>The returned instance of __GENERIC (the prototype) would be:</p>
<font FACE="Courier New" SIZE="2">

<blockquote>
  <p>Instance of __generic<br>
  {<br>
  &nbsp;&nbsp;&nbsp; instance of FIRST<br>
  &nbsp;&nbsp;&nbsp; {<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [Order{0}] sint32 zip;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [Order{5}] sint32 zap;<br>
  &nbsp;&nbsp;&nbsp; };</p>
</blockquote>

<blockquote>
  <p>&nbsp;&nbsp;&nbsp; instance of SECOND<br>
  &nbsp;&nbsp;&nbsp; {<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [Order{1}] string a;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [Order{2}] string b;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [Order{3}] string c;<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [Order{4}] string c;<br>
  &nbsp;&nbsp;&nbsp; };<br>
  };</p>
</blockquote>
</font>

<hr>

<p><b><big>RAID 23365 (and 23897) &#150; Incorrect prototype results</big></p>
</b><strong><font COLOR="#008000">

<p>Status: Completed</font></strong> - <strong>This may be reactivated by virtue of the
UNION keyword change</p>
</strong>

<p>When the select clause implies returning an object from a single class, in spite of the
use of joins for correlation, then __GENERIC should not be returned, but rather the simple
class definition itself. In other words, the <i>select </i>clause determines the nature of
the result set, not the rest of the query. This has a sound theoretical basis.</p>
<b>

<p>Implementation </p>
</b>

<p>Consider the following query which joins two classes and returns properties from both:</p>

<p>&nbsp;&nbsp;&nbsp; select coll.name, site.sitename from sms_site as site inner join
sms_Collection as coll ON site.sitename != coll.name</p>

<p>It returns an object such as:</p>
<font FACE="Courier New" SIZE="2">

<blockquote>
  <p>instance of __GENERIC<br>
  {<br>
  &nbsp;&nbsp;&nbsp; coll =&nbsp; instance of SMS_Collection<br>
  &nbsp;&nbsp;&nbsp; {<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [Order{0}] Name;<br>
  &nbsp;&nbsp;&nbsp; };<br>
  &nbsp;&nbsp;&nbsp; site = instance of SMS_Site<br>
  &nbsp;&nbsp;&nbsp; {<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [Order{1}] SiteName;<br>
  &nbsp;&nbsp;&nbsp; };<br>
  };</p>
</blockquote>
</font>

<p>The next query is a bit different in that only properties from one of the classes being
joined are to be returned.</p>

<p>select site.sitename from sms_site as site inner join sms_Collection as coll ON
site.sitename != coll.name</p>

<p>It returns a simple object such as:</p>
<font FACE="Courier New" SIZE="2">

<blockquote>
  <p>instance of SMS_Site<br>
  {<br>
  &nbsp;&nbsp;&nbsp; [Order{0}] SiteName;<br>
  };</p>
</blockquote>
</font>

<p>This change applies to both query prototypes and actual queries.</p>

<hr>

<p><b><big>RAID 24691 &#150; Provider Initialization Timeout</big></p>
</b><strong><font COLOR="#00ffff">

<p></font><font color="#008000">Status: Nova Fix Completed</font></p>
</strong>

<p>WBEM 503 currently limits providers to 60 seconds of initialization time. We need to
determine if this should be extended, changed to INFINITE, or be configurable. The SMS
Provider does not appear to initialize consistently within 60 seconds.</p>

<p>Of course, any arbitrary limit may break any given provider. However, INFINITE waits
may allow a provider to timeout CIMOM itself, which is also undesirable.</p>
<b>

<p>Current Implementation </p>
</b>

<p>Currently, the timeout has been bumped up to 5 minuest.&nbsp; We will document what we
have for now.</p>
<b>

<p>Nova Plans </p>
</b>

<p>We are investigating per-provider timeouts or other solutions.</p>

<hr>

<p><b><big>RAID 25549 &#150; Semi-sync Enumeration Fix</big></p>
</b><strong><font COLOR="#008000">

<p>Status: Completed, Untested</p>
</font></strong><b>

<p>IEnumWbemClassObject::NextAsync</b> allows the client of a semi-synchronous enumerator
to request to receive the next <i>n </i>objects in a truly asynchronous fashion ---
through a sink. In the past, there was no easy way of telling when there are no more
objects in the enumerator.</p>

<p>In the new implementation (available in V1), NextAsync returns WBEM_S_FALSE if there
are no more objects to enumerate, instead of WBEM_S_NO_ERROR that it returns otherwise.</p>

<p>Note: if any errors occur during the original operation, they will be returned via
IWbemObjectSink::SetStatus call on the sink provided in the last NextAsync call. This is
not a change, just a clarification.</p>

<hr>

<p><strong><big>26749&nbsp;&nbsp;&nbsp; DCR&nbsp;&nbsp;&nbsp; CIMOM DCR - Service Name
Change</big></p>
<font COLOR="#00ffff">

<p></font><font color="#008000">Status: Completed (paulall)</font></p>
</strong>

<p>Importance: Moderate</p>

<p>In the shipped version 1.0 of the WBEM SDK, the long service name was changed to
&quot;Windows Management&quot; and the short name is now &quot;WinMgmt&quot;. The
executable name is still CIMOM.EXE.</p>

<p>We will rename CIMOM.EXE to WINMGMT.EXE during this cycle as well.</p>

<p>2 dev-days for Paul Allen.</p>

<hr>

<p><strong><big>29225&nbsp;&nbsp;&nbsp;CIMOM - New Error Code For Unsupported Put
Extensions</big></p>
<font COLOR="#00ffff">

<p></font><font color="#008000">Status: In progress ( core portion is done but Kevin needs
to update another resource file)</font></p>
</strong>

<p>Importance: High</p>

<p>Whenever providers encounter <em>put</em> extensions, such as per-property puts which
they cannot support, a new error code is required to communicate to the client the reason
for failure.&nbsp;&nbsp; WBEM_E_PROVIDER_NOT_CAPABLE implies that Put operations are not
generally supported, whereas the provider wants to communicate that a particular atomic
put call isn't supported, but that puts generally are supported.</p>

<p>The new error code is WBEM_E_SUPPORTED_PUT_EXTENSION, returned by the provider in these
cases.</p>

<hr>

<p><strong><big>29229&nbsp; BBT for CIMOM</big></strong><br>
<br>
<strong><font color="#008000">Status: Completed (paulall)</font><font COLOR="#00ffff"></p>
</font></strong>

<p>Paul is handling this.</p>

<hr>
</body>
</html>
