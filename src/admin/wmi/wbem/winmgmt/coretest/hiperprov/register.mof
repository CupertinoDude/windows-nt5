qualifier vendor:ToInstance;
qualifier guid:ToInstance;
qualifier locale:ToInstance;
qualifier displayname:ToInstance;
qualifier perfindex:ToInstance;
qualifier helpindex:ToInstance;
qualifier perfdetail:ToInstance;
qualifier countertype:ToInstance;
qualifier perfdefault:ToInstance;
qualifier defaultscale:ToInstance;

[abstract]
class Win32_Perf
{
};

[abstract]
class Win32_PerfRawData : Win32_Perf
{
};

//[ 
//  dynamic,
//  provider("HiPerfCounter_v1"),
//  displayname("Simple WBEM Perf Counter")
//]
[abstract]
class Win32_HiPerfCounter  : Win32_PerfRawData
{
	[key] sint32 ID = 0;
	
	sint32 type = 10;

// Signed Counters
// ===============

    [
     displayname("CounterS8"),
     countertype(0x10000),
     defaultscale(0),
     perfdetail(100)
    ]
    sint8 CounterS8 = 0;

    [
     displayname("CounterS16"),
     countertype(0x10000),
     defaultscale(0),
     perfdetail(100)
    ]
    sint16 CounterS16 = 0;

    [
     displayname("CounterS32"),
     countertype(0x10000),
     defaultscale(0),
     perfdetail(100)
    ]
    sint32 CounterS32 = 0;

    [
     displayname("CounterS64"),
     countertype(0x10000),
     defaultscale(0),
    perfdetail(100)
    ]
    sint64 CounterS64 = 0;


// Unsigned Counters
// =================

    [
     displayname("CounterU8"),
     countertype(0x10000),
     defaultscale(0),
     perfdetail(100)
    ]
    uint8 CounterU8 = 0;

    [
     displayname("CounterU16"),
     countertype(0x10000),
     defaultscale(0),
     perfdetail(100)
    ]
    uint16 CounterU16 = 0;

    [
     displayname("CounterU32"),
     countertype(0x10000),
     defaultscale(0),
     perfdetail(100)
    ]
    uint32 CounterU32 = 0;

    [
     displayname("CounterU64"),
     countertype(0x10000),
     defaultscale(0),
     perfdetail(100)
    ]
    uint64 CounterU64 = 0;


// Floating Point counters
// =======================

    [
     displayname("CounterR32"),
     countertype(0x10000),
     defaultscale(0),
     perfdetail(100)
    ]
    real32 CounterR32 = 0;

    [
     displayname("CounterR64"),
     countertype(0x10000),
     defaultscale(0),
     perfdetail(100)
    ]
    real64 CounterR64 = 0;


// String counters
// ===============

    [
     displayname("CounterStr"),
     countertype(0x10000),
     defaultscale(0),
     perfdetail(100)
    ]
    string CounterStr = "0";
};

[ 
  dynamic,
  provider("HiPerfCounter_v1"),
  displayname("Simple WBEM Perf Counter")
]
class Win32_HPC0 : Win32_HiPerfCounter
{
	sint32 type = 0;
};

[ 
  dynamic,
  provider("HiPerfCounter_v1"),
  displayname("Simple WBEM Perf Counter")
]
class Win32_HPC1 : Win32_HiPerfCounter
{
	sint32 type = 1;
};

[ 
  dynamic,
  provider("HiPerfCounter_v1"),
  displayname("Simple WBEM Perf Counter")
]
class Win32_HPC2 : Win32_HiPerfCounter
{
	sint32 type = 2;
};

[ 
  dynamic,
  provider("HiPerfCounter_v1"),
  displayname("Simple WBEM Perf Counter")
]
class Win32_HPC3 : Win32_HiPerfCounter
{
	sint32 type = 3;
};

[ 
  dynamic,
  provider("HiPerfCounter_v1"),
  displayname("Simple WBEM Perf Counter")
]
class Win32_HPC4 : Win32_HiPerfCounter
{
	sint32 type = 4;
};

[ 
  dynamic,
  provider("HiPerfCounter_v1"),
  displayname("Simple WBEM Perf Counter")
]
class Win32_HPC5 : Win32_HiPerfCounter
{
	sint32 type = 5;
};

[ 
  dynamic,
  provider("HiPerfCounter_v1"),
  displayname("Simple WBEM Perf Counter")
]
class Win32_HPC6 : Win32_HiPerfCounter
{
	sint32 type = 6;
};

[ 
  dynamic,
  provider("HiPerfCounter_v1"),
  displayname("Simple WBEM Perf Counter")
]
class Win32_HPC7 : Win32_HiPerfCounter
{
	sint32 type = 7;
};

[ 
  dynamic,
  provider("HiPerfCounter_v1"),
  displayname("Simple WBEM Perf Counter")
]
class Win32_HPC8 : Win32_HiPerfCounter
{
	sint32 type = 8;
};

[ 
  dynamic,
  provider("HiPerfCounter_v1"),
  displayname("Simple WBEM Perf Counter")
]
class Win32_HPC9 : Win32_HiPerfCounter
{
	sint32 type = 9;
};


// Registration of the providers.


// HiPerfProvider:

instance of __Win32Provider as $P
{
    Name="HiPerfCounter_v1";
    CLSID="{33F5CBF8-6519-11d2-B722-00104B703E46}";
    ClientLoadableCLSID="{33F5CBF8-6519-11d2-B722-00104B703E46}";
};

instance of __InstanceProviderRegistration
{
    Provider = $P;
    SupportsGet = TRUE;
    SupportsEnumeration = TRUE;
};
