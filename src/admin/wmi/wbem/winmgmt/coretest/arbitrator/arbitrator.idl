// Arbitrator.idl : IDL source for Arbitrator.dll
//

// This file will be processed by the MIDL tool to
// produce the type library (Arbitrator.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";


[object, local, uuid(ac062f20-9935-4aae-98eb-0532fb17147a)]
interface _IWmiCoreHandle : IUnknown
{
    HRESULT GetHandleType([out] ULONG *puType);

	HRESULT UpdateMemoryUsage	( LONG ulMemUsage ) ;
	HRESULT GetMemoryUsage		( ULONG* )			;
	HRESULT GetTotalSleepTime	( ULONG* )			;
	HRESULT GetTaskStatus		( )					;
	HRESULT GetStartTime		( )					;
	HRESULT GetEndTime			( )					;

	HRESULT UpdateTotalSleepTime	( ULONG ulSlpTime ) ;
	HRESULT UpdateTaskStatus		( ULONG ulStatus )	;

};


[object, local, uuid(6d8d984b-9965-4023-921a-610b348ee54e)]
interface _IWmiUserHandle : _IWmiCoreHandle
{
};


[object, local,uuid(67429ED7-F52F-4773-B9BB-30302B0270DE)]
interface _IWmiArbitrator : IUnknown
{
    HRESULT RegisterTask(
        [in] _IWmiCoreHandle **phTask
        );

    HRESULT UnregisterTask(
        [in] _IWmiCoreHandle *phTask
        );

    HRESULT RegisterUser(
        [in] _IWmiCoreHandle *phUser
        );

    HRESULT UnregisterUser(
        [in] _IWmiCoreHandle *phUser
        );

    HRESULT CheckTask(
        [in] ULONG uFlags,
        [in] _IWmiCoreHandle *phTask
        );

    HRESULT TaskStateChange(
        [in] ULONG uNewState,               // Duplicate of the state in the task handle itself
        [in] _IWmiCoreHandle *phTask
        );

    HRESULT CancelTasksBySink(
        [in] ULONG uFlags,
        [in] REFIID riid,
        [in, iid_is(riid)] LPVOID pSink        // IWbemObjectSink or IWbemObjectSinkEx
        );

    HRESULT CheckThread(
        [in] ULONG uFlags
        );

    HRESULT CheckUser(
        [in] ULONG uFlags,
        [in] _IWmiUserHandle *phUser
        );

    HRESULT CancelTask(
        [in] ULONG uFlags,
        [in] _IWmiCoreHandle *phTtask
        );

    HRESULT RegisterThreadForTask(
        [in] _IWmiCoreHandle *phTask
        );

    HRESULT UnregisterThreadForTask(
        [in] _IWmiCoreHandle *phTask
        );

    HRESULT Maintenance();

    //HRESULT RegisterFinalizer(
    //    [in] ULONG uFlags,
    //    [in] _IWmiCoreHandle *phTask,
    //    [in] _IWmiFinalizer *pFinal
    //    );

    HRESULT RegisterNamespace(
        [in] _IWmiCoreHandle *phNamespace
        );

    HRESULT UnregisterNamespace(
        [in] _IWmiCoreHandle *phNamespace
        );

    HRESULT ReportMemoryUsage(
        [in] LONG uBackLog,
        [in] _IWmiCoreHandle *phTask
        );

//    HRESULT Shutdown();
};


typedef [v1_enum] enum tag_ARBSTATUS
{
    ARB_NO_ERROR = 0,
    ARB_S_NO_ERROR = 0,


    // Errors.
    // =======

    ARB_E_FAILED                           = 0x80041001,
    ARB_E_CANCELLED_TASK                   = 0x80041002,
	ARB_E_CANCELLED_TASK_MAX_SLEEP         = 0x80041003,

} ARBSTATUS;

typedef [v1_enum] enum tag_TASKSTATUS
{
    TASK_RUNNING = 0,
    TASK_SLEEPING = 1,
    TASK_COMPLETED = 2,
	TASK_CANCELLED = 3


} TASKSTATUS;
