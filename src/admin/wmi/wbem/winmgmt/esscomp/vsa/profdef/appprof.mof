// Microsoft-AppProfSettingProvider-V1.0.MOF
// Copyright (c) Microsoft Corporation
// Generated by Microsoft WBEM Code Generation Engine
//
//===================================================================

//*************************************************************
//***   Registers Framework Provider                        ***
//*************************************************************

#pragma namespace ("\\\\.\\root\\cimv2")


instance of __Win32Provider as $P
{
    Name = "Microsoft|AppProfSettingProvider|V1.0";
    ClsId = "{745FE21D-2E74-4f8b-BE22-894446A9F1CD}";
    ImpersonationLevel = 1;
    PerUserInitialization = TRUE;
    HostingModel = "NetworkServiceHost";
};

instance of __InstanceProviderRegistration
{
    Provider = $P;
    SupportsGet = TRUE;
    SupportsPut = TRUE;
    SupportsDelete = TRUE;
    SupportsEnumeration = TRUE;
};



// MOF file that contains application profiling metadata end event classes

qualifier description: amended;
qualifier values: amended;


[Locale (0x409),
Description (
"Metadata for application profiling event providers. These are event providers "
"that generate events subclassed from MSFT_AppProfApplicationProfilingEvent. "
"These events are used for profiling and tracing applications. This metadata is "
"necessary in order to collect the events using Visual Studio Analyzer."),  
Dynamic, Provider("Microsoft|AppProfSettingProvider|V1.0")]

class MSFT_AppProfEventProviderSetting : CIM_Setting
{
	[Description (
	"This is a GUID generated by the provider for unique identification."),
	key]

	String ProviderGUID;

	[Description ("Textual name for the provider.")]

	String ProviderName;

	[Description (
	"List of events that can be generated by this provider. "
	"The list should only contain the names of the event classes.")]

	String EventList[];

	[Description (
	"Indicates if this event provider is generating events via WMI or "
	"Visual Studio Analyzer. This fields doesn't have to be filled in "
	"by WMI event providers."),
	ValueMap{"WMI", "VSA"}, Values{"WMI", "VSA"}]

	string Infrastructure;
};


[Locale (0x409),
Description (
"Metadata for application profiling events which are events subclassed from "
"MSFT_AppProfApplicationProfilingEvent. These events should be used for profiling "
"and tracing applications. This metadata is necessary in order to collect "
"the events using Visual Studio Analyzer. There should be a MSFT_AppProfEventSetting "
"instance for every TERMINAL class under MSFT_AppProfApplicationProfilingEvent."),
Dynamic, provider("Microsoft|AppProfSettingProvider|V1.0")]

class MSFT_AppProfEventSetting : CIM_Setting
{
	[Description (
	"The event name that will be used in Analyer for "
	"filtering purposes."),
	key]

	String ClassName;

	[Description ("GUID that identifies this event.")]

	String GUID;

	[Description ("Description for this event.")]

	String Description;

	[Description (
	"The GUID for the provider that created this event. It should match "
	"the property ProviderGUID in MSFT_AppProfEventProvider.")]

	String ProviderGUID;

	[Description (
	"The GUID for the category that this event belongs to. It should match "
	"a Category in MSFT_AppProfCategorySetting.")]

	String Category;

	[Description (
	"Indicates the event type. Inbound and outbound events "
	"are used to indicate the communication between components. Outbound "
	"events describe the calling of a function or starting of a database query "
	"and inbound events describe the returning of a value or result set "
	"from a function or database query. "
	"Begin and end events are used to mark the beginning and end "
	"of some activity. Measured events describe "
	"a measurement of an item such as CPU usage, which is taken at intervals. " 
	"Generic and default events are equivalent and can be used for all other events."), 
	ValueMap {"inbound", "outbound", "begin", "end", "generic", "default", "measured"},
	Values {"inbound", "outbound", "begin", "end", "generic", "default", "measured"}]

	String Type;


	[Description (
	"File that contains an icon which should be associated to the event. "
	"This feature is currently not supported by Visual Studio Analyzer.")]

	String IconFile;


	[Description (
	"Index for the event icon within the file specified in IconFile.")]

	String IconIndex;
};


[Locale (0x409),
Description(
"Metadata for application profiling events which are events subclassed from "
"MSFT_AppProfApplicationProfilingEvent. These events should be used for profiling "
"and tracing applications. This metadata is necessary in order to "
"collect the events using Visual Studio Analyzer. There should be a "
"MSFT_AppProfCategorySetting instance for every NON-TERMINAL class under "
"MSFT_AppProfApplicationProfilingEvent."),
Dynamic, Provider("Microsoft|AppProfSettingProvider|V1.0")]

class MSFT_AppProfCategorySetting : CIM_Setting
{
	[Description (
	"The class name for the application profiling event that "
	"is being described by this metadata."),
	key]

	String ClassName; 


	[Description ("GUID that identifies this event.")]

	String GUID;

	[Description ("Description for the event.")]

	String Description;


	[Description (
	"The GUID for the provider that created this event. It should match "
	"the property ProviderGUID in MSFT_AppProfEventProvider.")]

	String ProviderGUID;


	[Description (
	"The GUID for the parent category to this category. It should match "
	"a Category in MSFT_AppProfCategorySetting.")]

	String ParentCategory;

	[Description (
	"File that contains an icon which should be associated to the event. "
	"This feature is currently not supported by Visual Studio Analyzer.")]

	String IconFile;


	[Description (
	"Index for the event icon within the file specified in IconFile.")]

	String IconIndex;
};


// Base application profiling event class

[Locale (0x409),
Description (
"This is the base class for all application profiling events. "
"These events should be used for profiling and tracing applications.")]

class MSFT_AppProfApplicationProfilingEvent : __ExtrinsicEvent 
{
	[Description (
	"GenericParamNames contains a list of event field names. This property is used "
	"by WMI when converting events from Visual Studio Analyzer. "
	"Since VS Analyzer doesn't have an event schema, there might be additional fields "
	"that are not in the MSFT_AppProfApplicationProfilingEvent schema.")]

	string GenericParamNames[];


	[Description (
	"GenericParamValues contains a list of values for the event fields specified in "
	"GenericParamNames. This property is used by WMI when converting events from "
	"Visual Studio Analyzer. Since VS Analyzer doesn't have an event schema, "
	"there might be additional fields that are not in the "
	"MSFT_AppProfApplicationProfilingEvent schema.")]

	string GenericParamValues[];


	[Description (
	"The GUID for the provider that is generating this event. It should match "
	"the property ProviderGUID in MSFT_AppProfEventProvider.")]

	string ProviderGUID;


	[Description (
	"For events that indicate the communication between components, the SourceComponent "
	"should contain the GUID of the provider that initiated the communication (source "
	"provider).")]

	string SourceComponent;


	[Description (
	"For events that indicate the communication between components, the TargetComponent "
	"should contain the GUID of the provider that was called (target provider).")]

	string TargetComponent;


	[Description (
	"The SourceMachine should contain the machine name of source provider. "
	"If your provider is the source, you can default this property by "
	"using the application profiling event services interface IMSFTAppProfEventService.")]

	string SourceMachine;


	[Description (
	"The TargetMachine should contain the machine name of the target provider. "
	"If your provider is the target, you can default this property by using the "
	"application profiling event services interface IMSFTAppProfEventService.")]

	string TargetMachine;

	
	[Description (
	"The SourceProcessName should be the process name of the source provider. "
	"If your provider is the source, you can default this property by "
	"using the application profiling event services interface IMSFTAppProfEventService.")]

	string SourceProcessName;


	[Description (
	"The TargetProcessName should be the process name of the target provider. "
	"If your provider is the target, you can default this property by using the "
	"application profiling event services interface IMSFTAppProfEventService.")]

	string TargetProcessName;


	[Description (
	"The SourceProcessId should be the process Id of the source provider. "
	"If your provider is the source, you can default this property by "
	"using the application profiling event services interface IMSFTAppProfEventService.")]

	uint32 SourceProcessId;


	[Description (
	"The process Id of the target provider. If your provider is the target, "
	"you can default this property by using the application profiling event services "
	"interface IMSFTAppProfEventService.")]

	uint32 TargetProcessId;

	[Description (
	"The thread Id of the source provider. If your provider is "
	"the source, you can default this property by using the application profiling event "
	"services interface IMSFTAppProfEventService.")]

	uint32 SourceThreadId;


	[Description (
	"The thread Id of the target provider. If your provider is the target, "
	"you can default this property by using the application profiling event services "
	"interface IMSFTAppProfEventService.")]

	uint32 TargetThreadId;


	[Description (
	"The Session name of the source provider. The session can be any string and it is "
	"used to differentiate among instances of the same provider that "
	"can be running on the same machine and the same process.")]

	string SourceSession;


	[Description (
	"The Session name of the target provider. The session can be any string and it is "
	"used to differentiate among instances of the same provider that "
	"can be running on the same machine and the same process.")]

	string TargetSession;


	[Description (
	"If the source information is not known, the SourceHandle can be used to uniquely identify "
	"the source instance.")]

	string SourceHandle;


	[Description (
	"If the Target information is not known, the TargetHandle can be used to uniquely identify "
	"the target instance.")]

	string TargetHandle;	


	[Description (
	"Causality ID identifies COM calls that are part of the same logical chain of execution. "
	"This property should be defaulted by using the IMSFTAppProfEventService.")]

	string CausalityId;


	[Description (
	"Correlation is used to match related pairs of inbound and outbound events or begin and "
	"end events.")]

	string CorrelationId; 


	[Description (
	"The user that the provider is running as. This property "
	"should be defaulted by using the IMSFTAppProfEventService.")]

	string SecurityIdentity; 
};


//////////////////////////////////////////////////////////////////////////////////
// Regular Events

[Locale (0x409),
Description ("Events that are aperiodic and represent an occurence.")]

class MSFT_AppProfRegularEvent : MSFT_AppProfApplicationProfilingEvent
{
};


[Locale (0x409),
Description (
"Events that represent the communication between two components of "
"adistributed application.")]

class MSFT_AppProfCallAndReturn : MSFT_AppProfRegularEvent
{
	[Description("Arguments passed in the method call.")]

	String Arguments;


	[Description("Exception returned from the method call.")]		

	String Exception;


	[Description("Value returned from the method call.")]

	String ReturnValue;
};


[Locale (0x409),
Description ("Events generated due to database activity.")]

class MSFT_AppProfDatabase : MSFT_AppProfRegularEvent
{
	[Description("Query sent to the database.")]

	String Arguments;

	
	[Description("Exception resulted from the query.")]

	String Exception;


	[Description("Query result.")]

	String ReturnValue;
};


[Locale (0x409),
Description ("Events generated due to object activation. ")]

Class MSFT_AppProfObjectActivation : MSFT_AppProfRegularEvent
{
};


[Locale (0x409),
Description ("Events that indicate the startup and shutdown of components.")]

class MSFT_AppProfStartupAndShutdown : MSFT_AppProfRegularEvent
{
};


[Locale (0x409),
Description ("Events related to database transactions.")]

class MSFT_AppProfTransaction : MSFT_AppProfRegularEvent
{
};


/////////////////////////////////////////////////////////////////////////////
// Call and Return

[Locale (0x409),
Description ("Event generated on a function call.")]

class MSFT_AppProfCall : MSFT_AppProfCallAndReturn 
{
};


[Locale (0x409),
Description (
"Event generated if additional data is sent to support a function call.")]

class MSFT_AppProfCallData : MSFT_AppProfCallAndReturn 
{
};


[Locale (0x409),
Description (
"Event generated on function enter (after any time spent on the network)")]

class MSFT_AppProfEnter : MSFT_AppProfCallAndReturn
{
};


[Locale (0x409),
Description (
"Event generated if additional data is sent to support a function enter "
"(after any time spent on the network)")]

class MSFT_AppProfEnterData : MSFT_AppProfCallAndReturn
{
};


[Locale (0x409),
Description (
"Event generated if additional data is sent before control flow returns "
"(before any time spent on the network).")]

class MSFT_AppProfLeaveData : MSFT_AppProfCallAndReturn
{
};


[Locale (0x409),
Description (
"Event generated if an exception is thrown (before any time "
"spent on the network).")]

class MSFT_AppProfLeaveException : MSFT_AppProfCallAndReturn
{
};


[Locale (0x409),
Description (
"Event generated on a normal return of control "
"(before any time spent on the network).")]

class MSFT_AppProfLeaveNormal : MSFT_AppProfCallAndReturn
{
};


[Locale (0x409),
Description ("Event generated on a normal return of control.")]

class MSFT_AppProfReturn : MSFT_AppProfCallAndReturn
{
};


[Locale (0x409),
Description (
"Event generated if additional data is sent before control "
"flow returns.")]

class MSFT_AppProfReturnData : MSFT_AppProfCallAndReturn
{
};


[Locale (0x409),
Description ("Event generated if an exception occurs.")]

class MSFT_AppProfReturnException : MSFT_AppProfCallAndReturn
{
};


[Locale (0x409),
Description ("Event generated on a normal return of control.")]

class MSFT_AppProfReturnNormal : MSFT_AppProfCallAndReturn
{
};


//////////////////////////////////////////////////////////////////////////////////
// Database Events

[Locale (0x409),
Description (
"Event generated on the server side when a query is received from a client "
"(after any time spent on the network).")]

Class MSFT_AppProfQueryEnter : MSFT_AppProfDatabase
{
};


[Locale (0x409),
Description (
"Event generated on the server side when a query is returned to a client "
"(before any time spent on the network)")]

Class MSFT_AppProfQueryLeave : MSFT_AppProfDatabase
{
};


[Locale (0x409),
Description (
"Event generated on the client side when the result of a query is returned "
"from the server.")]

Class MSFT_AppProfQueryResult : MSFT_AppProfDatabase
{
};


[Locale (0x409),
Description (
"Event generated on the client side when a query is sent to the server.")]

Class MSFT_AppProfQuerySend : MSFT_AppProfDatabase
{
};


//////////////////////////////////////////////////////////////////////////////////
// Startup and Shutdown Events

[Locale (0x409),
Description("Event generated by provider when it starts.")]

Class MSFT_AppProfComponentStart : MSFT_AppProfStartUpAndShutDown
{
};


[Locale (0x409),
Description("Event generated by provider when it shuts down.")]

Class MSFT_AppProfComponentStop : MSFT_AppProfStartUpAndShutDown
{
};


[Locale (0x409),
Description(
"Event generated by VS Analyzer when events are dropped.")]

Class MSFT_AppProfEventOverflow : MSFT_AppProfStartUpAndShutDown
{
};


//////////////////////////////////////////////////////////////////////////////////
// Transaction Events

[Locale (0x409),
Description ("Event generated when a transaction is committed.")]

Class MSFT_AppProfTransactionCommit : MSFT_AppProfTransaction
{
};


[Locale (0x409),
Description ("Event generated when a transaction is cancelled.")]

Class MSFT_AppProfTransactionRollback : MSFT_AppProfTransaction
{
};


[Locale (0x409),
Description ("Event generated when a transaction begins.")]

Class MSFT_AppProfTransactionStart : MSFT_AppProfTransaction
{
};









