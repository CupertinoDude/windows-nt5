/////////////////////////////////////////////////////////////////////////////
//
//  SQL Level 1 Syntax (LL1)
//
//  a-raymcc    21-Jun-96       Created        
//  a-raymcc    01-Jul-96       Instrinsic functions on constants
//  pkenny      27-May-99       Support for Update, Insert, and Delete
//
/////////////////////////////////////////////////////////////////////////////

<parse> ::= SELECT <select_statement>;
<parse> ::= UPDATE <update_statement>;
<parse> ::= DELETE <delete_statement>;
<parse> ::= INSERT <insert_statement>;

<select_statement> ::= <prop_list> FROM <class_name> <tolerance> <opt_where> 
                       <opt_aggregation>;

<update_statement> ::= <class_name> SET <assign_list> <opt_where>;

<delete_statement> ::= FROM <class_name> <opt_where>;
<delete_statement> ::= <class_name> <opt_where>;

<insert_statement> ::= INTO <class_name> <prop_spec> <value_spec>;
<insert_statement> ::= <class_name> <prop_spec> <value_spec>;

<prop_spec> ::= OPEN_PAREN <prop_list> CLOSE_PAREN;
<value_spec> ::= OPEN_PAREN <value_list> CLOSE_PAREN;

<value_list> ::= <trailing_or_null> <value_list2>;
<value_list2> ::= COMMA <value_list>;
<value_list2> ::= <>;

<assign_list> ::= <property_name> EQUALS <assign_expr> <assign_list2>;
<assign_list2> ::= COMMA <assign_list>;
<assign_list2> ::= <>;

<assign_expr> ::= NULL;
<assign_expr> ::= <add_expr>;

<add_expr> ::= <mult_expr> <add_expr2>;
<add_expr2> ::= PLUS <mult_expr> <add_expr2>;
<add_expr2> ::= MINUS <mult_expr> <add_expr2>;
<add_expr2> ::= <>;

<mult_expr> ::= <secondary_expr> <mult_expr2>;
<mult_expr2> ::= MULT <secondary_expr> <mult_expr2>;
<mult_expr2> ::= DIV <secondary_expr> <mult_expr2>;
<mult_expr2> ::= MOD <secondary_expr> <mult_expr2>;
<mult_expr2> ::= <>;

<secondary_expr> ::= <primary_expr>;
<secondary_expr> ::= PLUS <primary_expr>;
<secondary_expr> ::= MINUS <primary_expr>; 

<primary_expr> ::= <trailing_const_expr>;
<primary_expr> ::= OPEN_PAREN <add_expr> CLOSE_PAREN;
 
<opt_where> ::= WHERE <expr>;
<opt_where> ::= <>;

<prop_list> ::= <property_name> <prop_list_2>;
<prop_list_2> ::= COMMA <prop_list>;
<prop_list_2> ::= <>;

<property_name> ::= ASTERISK;
<property_name> ::= IDENTIFIER <property_name_2>;
<property_name_2> ::= <>;
<property_name_2> ::= DOT IDENTIFIER <property_name_2>;

<class_name> ::= IDENTIFIER;
<tolerance> ::= <>;
<tolerance> ::= WITHIN <duration>;

<duration> ::= DOUBLE;

// Subexpression nesting.  This particular sequence gives
// a series of AND clauses precedence over OR clauses.

<expr> ::= <term> <expr2>;
<expr2> ::= OR <term> <expr2>;
<expr2> ::= <>;

<term> ::= <simple_expr> <term2>;
<term2> ::= AND <simple_expr> <term2>;
<term2> ::= <>;

// Simple expression types.
// ========================

<simple_expr> ::= NOT <expr>;
<simple_expr> ::= OPEN_PAREN <expr> CLOSE_PAREN;
<simple_expr> ::= <property_name> <leading_ident_expr> <finalize>;
<simple_expr> ::= VARIANT <rel_operator> <trailing_prop_expr> <finalize>;

<trailing_prop_expr> ::=  <property_name>; 

<leading_ident_expr> ::= <comp_operator> <trailing_const_expr>;
<leading_ident_expr> ::= <equiv_operator> <trailing_or_null>;
<leading_ident_expr> ::= <is_operator> NULL;

<trailing_or_null> ::= NULL;
<trailing_or_null> ::= <trailing_const_expr>;

<trailing_const_expr> ::= <typed_constant>;
<trailing_const_expr> ::= <trailing_ident_expr>;

<trailing_ident_expr> ::= <property_name>;

<typed_constant> ::= VARIANT; // VT_R8, VT_I4, VT_BSTR
<typed_constant> ::= TRUE; 
<typed_constant> ::= FALSE; 

<finalize> ::= <>; 
    // This is just a semantic production in the parser to allow
    // all the important code to be located in one place.

<rel_operator> ::= <equiv_operator>;
<rel_operator> ::= <comp_operator>;

<equiv_operator> ::= EQUIVALENT_OPERATOR; // =, !=
<comp_operator> ::=  COMPARE_OPERATOR;  // <=, >=, <, >, like
<is_operator> ::=  ISNOT_OPERATOR;  // IS, IS NOT

<opt_aggregation> ::= <>;
<opt_aggregation> ::= GROUP <aggregation_params> <opt_having>;
<aggregation_params> ::= <aggregate_by> <opt_aggregate_within>;
<aggregation_params> ::= <aggregate_within> <opt_aggregate_by>;

<opt_aggregate_by> ::= <>;
<opt_aggregate_by> ::= BY <aggregate_by>;

<opt_aggregate_within> ::= <>;
<opt_aggregate_within> ::= WITHIN <aggregate_within>;

<aggregate_within> ::= <duration>;
<aggregate_by> ::= <aggregate_prop_list>;

<aggregate_prop_list> ::= <prop_list>;

<opt_having> ::= <>;
<opt_having> ::= HAVING <expr>;



