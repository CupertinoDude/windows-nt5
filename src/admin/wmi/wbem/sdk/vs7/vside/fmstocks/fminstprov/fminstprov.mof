// **************************************************************************
// Copyright (c) 2000 Microsoft Corporation
//
// File        : FMInstProv.mof
//
// Description : MOF file for WMI Instance Provider for F & M Stocks 2000
//
// History     : Initial Version
//
// **************************************************************************

/////////////////////////////////////////////////////////////////////
// Declare an instance of the __Win32Provider so as to "register" the
// F & M Stocks 2000 provider
#pragma namespace("\\\\.\\root\\cimv2")

instance of __Win32Provider as $P
{
    Name    = "FMStocks_InstProv" ;
    ClsId   = "{C329212F-5D9F-4ed1-8B14-0F57FF248F29}" ;
} ;    

instance of __MethodProviderRegistration
{
    Provider = $P;
};

instance of __InstanceProviderRegistration
{
    Provider = $P;
    SupportsPut = FALSE;
    SupportsGet = TRUE;
    SupportsDelete = FALSE;
    SupportsEnumeration = TRUE;
};

/////////////////////////////////////////////////////////////////////
//
// Declare a class whose dynamic instances are provided by the 
// F & M Stocks 2000 provider.

[dynamic, provider("FMStocks_InstProv"),singleton]
class FMStocks_InstProv
{
	[read] String DBVersion;
	[read] String DBCompName;
	[read] String DBProvider;
	[read] String DBDataSource;
	[read] String DBName; 
	[read] String DBUserId;
	[read] String DBPassword;
	[read] String BusVersion;
	[read] String BusCompName;
	[read] String GAMServerName; 
	[read] String GAMUserName;
	[read] String GAMPassword;
	[read] String GAMPlugin;

	[Implemented, static, Description("This method Updates the username and password in the connection string for accounts module")]
    void UpdateAccountString([in] string strUserId, [in] String strPassword);

	[Implemented, static, Description("This method Updates the servername, username and password for the GAM")]
    void UpdateGAMStrings([in] String strServerName, [in] string strUserId, [in] String strPassword);

	[Implemented, static, Description("This method generates a Login Fail Event")]
    void GenerateLoginFailure([in] String strUserName);

	[Implemented, static, Description("This method returns the number of Login Fail Events")]
    uint32 GetNumberofLoginFails();

	[Implemented, static, Description("This method clears the Login Fail Events")]
    void ClearLoginFailEvents();
	
	[Implemented, static, Description("This method generates a Login Fail Event")]
    void GetLoginFailStrings([in] uint32 Index,[out] String strUserName,[out] String strDateTime);

	[Implemented, static, Description("This method stores the lookuptime in the shared memory")]
    void SetLookupTime([in] uint32 LookupTime);
};

#pragma namespace("\\\\.\\root\\default")

// Event Generation
// create an instance of a PseudoProvider to represent our provider
instance of Win32PseudoProvider
{
    // name is the key - it must be unique in the namespace
    Name = "FMStocks_EventProv";
};

// create an event type
class FMStocks_Event : __ExtrinsicEvent
{
	string UserName = "Unknown";
};

// register your provider
instance of __EventProviderRegistration
{
    // path to our provider
    Provider = "Win32PseudoProvider.Name=\"FMStocks_EventProv\"";

    // list those queries that we support
    EventQueryList = {"select * from FMStocks_Event"};
};
