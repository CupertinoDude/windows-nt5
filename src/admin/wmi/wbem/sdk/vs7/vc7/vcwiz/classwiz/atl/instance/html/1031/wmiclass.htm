<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><HTML 
dir=ltr><HEAD>
<TITLE>WMI-Instanzanbieter-Assistent</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
	<STYLE TYPE="text/css">@import url();</STYLE>
	<SCRIPT>
		var strURL = "../../../../../";
		strURL += window.external.GetHostLocale();
		strURL += "/NewStyles.css";
		document.styleSheets(0).imports(0).href = strURL;
	</SCRIPT>
</HEAD>
<BODY onkeydown=OnKey(); ONKEYPRESS=OnPress(); bottomMargin=0 bgColor=buttonface leftMargin=0 
topMargin=0 onload=InitDocument(document); rightMargin=0>
<TABLE class=ONE cellSpacing=0 cellPadding=0 border=0>
  <colgroup>
  <COL width="100%">
  <TR vAlign=top>
    <TD height=79>
	<!--OPEN OF ALL ENCOMPASSING TABLE ROW ONE//-->
      <TABLE class=TWO cellSpacing=0 cellPadding=0 border=0>
        <colgroup>
        <COL width=12>
        <COL>
        <COL width=12>
        <TR>
          <TD vAlign=top width=12 height=12>&nbsp; </TD>
          <TD vAlign=top height=12>&nbsp; </TD>
          <TD vAlign=top width=12 height=12>&nbsp; </TD>
          <TD class=IMAGE vAlign=bottom width=110 rowSpan=2>
            <DIV id=Layer0><IMG class=SMALLEST height=63 alt="" src="../../Images/WmiInstance.ico" width=63 border=0 ></IMG> </DIV></TD>
          <TD vAlign=top width=6 height=12 rowSpan=2 
            >&nbsp; </TD></TR>
        <TR>
          <TD vAlign=top width=12 height=65>&nbsp; </TD>
          <TD vAlign=top height=65>
            <H1 class=HEAD id=HEAD>Wählen Sie eine WMI-Klasse, für die Sie Informationen angegeben möchten.</H1>
            <P class=SUBHEAD id=SUBHEAD>Informationen bezüglich der Klassenauswahl werden hier zukünftig angezeigt.</P></TD>
          <TD vAlign=top width=12 height=65>&nbsp; </TD></TR>
        <TR>
          <TD class=RULE vAlign=top colSpan=5 height=2>
            <TABLE height=1 cellSpacing=0 cellPadding=0 width="100%" border=0 
            >
              <TR vAlign=top>
                <TD width="100%" bgColor=buttonshadow height=1 
                ><IMG height=1 alt="" src="../../Images/spacer.gif" width=1 ></TD>
                <TD width=1 bgColor=window height=1><IMG height=1 alt="" src="../../Images/spacer.gif" width=1 ></TD></TR></TABLE></TD></TR></TABLE>
	 
	<!--CLOSE OF ALL ENCOMPASSING TABLE ROW ONE//--></TD></TR>
  <TR vAlign=top>
    <TD height="100%">
	<!--OPEN OF ALL ENCOMPASSING TABLE ROW TWO//-->
      <TABLE class=ONE cellSpacing=0 cellPadding=0 border=0>
        <colgroup>
        <COL width=178>
        <COL>
        <TR>
          <TD class=THREE 
          style="BACKGROUND-IMAGE: url(../../Images/ATL_Server_Background.gif)" 
          vAlign=top width=178 height="100%">
	   <!--OPEN OF NAVIGATION TABLE//-->
            <TABLE class=THREE cellSpacing=0 cellPadding=0 border=0 
            >
              <colgroup>
              <COL width=12>
              <COL width=166>
              <COL width=1>
              <TR>
                <TD vAlign=top colSpan=3 height=12>&nbsp; 
                </TD></TR>
              <TR>
                <TD vAlign=top width=12 height="100%" 
                  >&nbsp; </TD>
                <TD vAlign=top width=165 height="100%">
	   	  <!--OPEN OF NAVIGATIONAL LINKS//-->
                  <DIV class=LINK>
                  <TABLE class=LINKTEXT height=28 cellSpacing=0 cellPadding=0 
                  width=160 border=0>
                    <TR vAlign=center>
                      <TD width=156><SPAN 
                        class=ACTIVELINK id=Default title="" 
                        onclick="Next(document, 'Default.htm');" tabIndex=1 
                        ><id id=idLocDefault>Namen</id></SPAN> </TD>
                      <TD width=4><IMG height=1 src="../../Images/spacer.gif" width=4 > 
                  </TD></TR></TABLE></DIV>
                  <DIV class=LINKSELECTED><SPAN 
                  class=VERTLINE1><IMG height=1 alt="" src="../../Images/spacer.gif" width=1 border=0 > 
                  </SPAN><SPAN class=HORILINE1>
                  <TABLE height="100%" cellSpacing=0 cellPadding=0 width=167 
                  border=0>
                    <TR vAlign=top>
                      <TD class=DOTTEDLINE height=1></TD></TR>
                    <TR vAlign=top>
                      <TD height="100%"><IMG height=1 alt="" src="../../Images/spacer.gif" width=28 border=0 > </TD></TR>
                    <TR vAlign=top>
                      <TD class=DOTTEDLINE height=1 
                    ></TD></TR></TABLE></SPAN>
                  <TABLE class=LINKTEXTSELECTED height=28 cellSpacing=0 
                  cellPadding=0 width=160 border=0>
                    <TR vAlign=center>
                      <TD width=156><SPAN id=WMIClass 
                        title=""><id id=idLocWmiClass>WMI-Klasse</id></SPAN> </TD>
                      <TD width=4><IMG height=1 src="../../Images/spacer.gif" width=4 > 
                  </TD></TR></TABLE></DIV>
                  <DIV class=LINK>
                  <TABLE class=LINKTEXT height=28 cellSpacing=0 cellPadding=0 
                  width=166 border=0>
                    <TR vAlign=center>
                      <TD width=162><SPAN 
                        class=ACTIVELINK id=Attributes title="" 
                        onclick="Next(document, 'Attributes.htm');" tabIndex=1 
                        ><id id=idLocAttributes>Attribute</id></SPAN> </TD>
                      <TD width=4><IMG height=1 src="../../Images/spacer.gif" width=4 > 
                  </TD></TR></TABLE></DIV>
			
	   	  <!--CLOSE OF NAVIGATIONAL LINKS//--></TD>
                <TD width=1>
                  <DIV class=VERTLINE><IMG height=1 alt="" src="../../Images/spacer.gif" width=1 border=0 > 
                  </DIV></TD></TR></TABLE>
			
	   <!--CLOSE OF NAVIGATION TABLE//--></TD>
          <TD vAlign=top height="100%">
	   <!--OPEN OF CONTENT AND BUTTON TABLE//-->
            <TABLE class=ONE cellSpacing=0 cellPadding=0 border=0 
            >
              <colgroup>
              <COL width="100%">
              <TBODY>
              <TR vAlign=top>
                <TD height="100%">
	   	  <!--OPEN OF CONTENT AND BUTTON TABLE//-->
                  <TABLE class=ONE cellSpacing=0 cellPadding=0 border=0 
                  >
                    <colgroup>
                    <COL width="100%">
                    <TR vAlign=top>
                      <TD height="100%">
	   	  <!--OPEN OF CONTENT//-->
                        <TABLE class=CONTENT cellSpacing=0 cellPadding=0 
                        border=0>
                          <colgroup>
                          <COL width=12>
                          <COL width=398><!--<COL WIDTH="12"><COL WIDTH="193">-->
                          <COL width=12>
                          <TBODY>
                          <TR>
                            <TD vAlign=top colSpan=5 height=12 
                            >&nbsp; </TD></TR>
                          <TR>
                            <TD vAlign=top width=12 
                              >&nbsp; </TD>
                            <TD style="WIDTH: 454px" vAlign=top 
                            >
                              <TABLE class=CONTENT2 cellSpacing=0 cellPadding=0 
                              border=0>
                                <TR>
                                <TD style="WIDTH: 396px" vAlign=top 
                                >
  	  			  
  	  		<!-- invisible controls to store ns, classname and methods--><input 
                                class=itemText id=NAMESPACE 
                                style="DISPLAY: none" name=NAMESPACE 
                                > </input><input 
                                class=itemText id=WMICLASSNAME 
                                style="DISPLAY: none" name=WMICLASSNAME 
                                ></input> <input 
                                id=HAS_IMPL_METHODS style="DISPLAY: none" 
                                type=radio CHECKED name=HAS_IMPL_METHODS 
                                ></input> 
                                <P class=ElementSpacer 
                                >&nbsp;</P><SPAN ID="SELECT_NAMESPACE"
                                class=itemText><b 
                                ><id id=idLocSelectNS>Wählen Sie einen <u>N</u>amespace: </id></b>
                                <P class=Spacer 
                                >&nbsp;</P>
                                <select 
                                class=itemText id=NSPICKER 
                                style="WIDTH: 390px" accessKey=n 
                                onchange=OnChangeNS() align=left size=1 
                                name=NSPICKER 
                                TYPE="SELECT-ONE"> <option value=1 selected >root</option></select> 
                                <br 
                                ></SPAN>
                                <P class=ElementSpacer 
                                >&nbsp;</P><SPAN ID="SELECT_CLASS"
                                class=itemText><b 
                                ><id id=idLocSelectClass>Wählen Sie eine K<u>l</u>asse:</id></b> 
                                <P class=Spacer 
                                >&nbsp;</P>
                                
                                 <input 
                                class=itemText oncut=OnInputKeyPress() 
                                onpaste=OnInputKeyPress() id=CLASSINPUT 
                                style="WIDTH: 390px" align=left size=390 
                                name=CLASSINPUT onkeypress="OnInputKeyPress()"> 
                                </SPAN><br> 
                                
                                <SPAN 
                                class=itemText><SELECT 
                                class=sideBtn3 id=CLASSPICKER 
                                ondblclick=OnClassDblClick(); 
                                style="WIDTH: 390px" accessKey=L 
                                onchange=OnChangeSelection(); size=6 
                                name=CLASSPICKER 
                                TYPE="SELECT-ONE"></SELECT> </SPAN>
                                
                                <br>
                                <P class=Spacer>&nbsp;</P>
                                <P class=Spacer 
                                >&nbsp;</P><button 
                                class=button id=Clear accessKey=z 
                                onclick='CURRENTSELECTION.value = "";CURRENTSELECTION.test = "";WMICLASSNAME.value = ""' 
                                type=button><u>Z</u>urücksetzen</button> 
                                &nbsp;<button class=button id=Select accessKey=s 
                                onclick=OnClassDblClick() type=button 
                                >Au<u>s</u>wählen</button> <br 
                                >
                                <P class=Spacer>&nbsp;</P>
                                <P class=Spacer>&nbsp;</P>
                                <P class=Spacer 
                                >&nbsp;</P>
                                
                                <SPAN id="CURRENT_SELECTION"
                                class=itemText><b 
                                ><id id=idLocCurrentSelection>Akutelle Auswahl: </id></b>
                                <P class=Spacer>&nbsp;</P>
                                <textarea class=itemText id=CURRENTSELECTION style="OVERFLOW: visible; WIDTH: 390px; BACKGROUND-COLOR: inactiveborder" readOnly></textarea> 
                                </SPAN></TD></TR></TABLE></TD>
                            <TD vAlign=top width=12 
                              >&nbsp; 
                        </TD></TD></TR></TABLE>	
  			  
  		
			
	   	  <!--CLOSE OF CONTENT//--></TD></TR>
                    <TR vAlign=bottom>
                      <TD height=48>
	   	<!--OPEN OF BUTTON HTML//-->
                        <TABLE class=ONE height=48 cellSpacing=0 cellPadding=0 
                        border=0>
                          <colgroup>
                          <COL width=12>
                          <COL>
                          <COL width=75>
                          <COL width=4>
                          <COL width=75>
                          <COL width=4>
                          <COL width=75>
                          <COL width=12>
                          <TR>
                            <TD class=RULE vAlign=top colSpan=8 height=1 
                            >
                              <TABLE height=1 cellSpacing=0 cellPadding=0 
                              width="100%" border=0>
                                <TR vAlign=top>
                                <TD width="100%" bgColor=buttonshadow height=1 
                                ><IMG height=1 alt="" src="../../Images/spacer.gif" width=1 ></TD>
                                <TD width=1 bgColor=window height=1 
                                ><IMG height=1 alt="" src="../../Images/spacer.gif" width=1 ></TD></TR></TABLE></TD></TR>
                          <TR>
                            <TD vAlign=top colSpan=8 height=11 
                            >&nbsp; </TD></TR>
                          <TR>
                            <TD vAlign=center width=12 height=23 
                            >&nbsp; </TD>
                            <TD vAlign=top height=23 
                              >&nbsp; </TD>
                            <TD vAlign=center width=75 height=23 
                            ><BUTTON class=BUTTONS 
                              id=FinishBtn accessKey=F onclick=OnFinish(this); 
                              type=button><U>F</U>ertig stellen</BUTTON> </TD>
                            <TD vAlign=center width=4 height=23 
                            >&nbsp; </TD>
                            <TD vAlign=center width=75 height=23 
                            ><BUTTON class=BUTTONS 
                              id=CancelBtn accessKey=A 
                              onclick="window.external.Finish(document, 'cancel');" 
                              type=button>
                              <U>A</U>bbrechen</BUTTON> </TD>
                            <TD vAlign=center width=4 height=23 
                            >&nbsp; </TD>
                            <TD vAlign=center width=75 height=23 
                            ><BUTTON class=BUTTONS 
                              id=HelpBtn accessKey=H 
                              onClick="window.external.OnHelp('vc.codewiz.wmi.atl.instance.wmiclass');"
                              type=button>
                              <U>H</U>ilfe                              
                              </BUTTON> </TD>
                            <TD vAlign=center width=12 height=23 
                            >&nbsp; </TD></TR>
                          <TR>
                            <TD vAlign=top colSpan=8 height=12 
                            >&nbsp; </TD></TR></TABLE>
			
	   	  <!--CLOSE OF BUTTON HTML//--></TD></TR></TBODY></TABLE>
	
	   <!--CLOSE OF CONTENT AND BUTTON TABLE//--></TD></TR></TABLE>
	
	<!--CLOSE OF ALL ENCOMPASSING TABLE ROW TWO//--></TD></TR></TABLE>
      <SCRIPT language=jscript>

var tab_array = new Array();
tab_array[0] = Default;
tab_array[1] = WMIClass;
tab_array[2] = Attributes;
//tab_array[3] = Properties;

var arCodeComments = new Array();
arCodeComments[0] = "//Aktion: Geben Sie den zutreffenden Wert hier ein.";
arCodeComments[1] = "//Vergewissern Sie sich, dass der Klassenname im Pfad richtig ist.";
arCodeComments[2] = "//Pfadparserobjekt erstellen";
arCodeComments[3] = "";
arCodeComments[4] = "//Durchsuchen Sie den Pfad nach der Instanz für die Methodenausführung.";
arCodeComments[5] = "//Werte für Schlüsseleigenschaften abrufen:";
arCodeComments[6] = "//Aktion: Speichern Sie vValue für eine spätere Verwendung.";
arCodeComments[7] = "//Aktion: Suchen Sie in der Datenquelle nach dem übereinstimmenden Objekt.";
arCodeComments[8] = "//Eingabeparameter abrufen:";
arCodeComments[9] = "//Aktion: Speichern Sie den Wert des Eingabeparameters.";
arCodeComments[10] = "//Diese Methode enthält keine Eingabeparameter.";
arCodeComments[11] = "//Aktion: Fügen Sie Code hinzu, um die Methode an dieser Stelle auszuführen.";
arCodeComments[12] = "//Ausgabeparameterklasse abrufen";
arCodeComments[13] = "//Ausgabeparameter auffüllen";
arCodeComments[14] = "//Aktion: Füllen Sie die Variante mit dem zutreffenden Wert auf.";
arCodeComments[15] = "// Ausgabeobjekt zurück an den Client über die Datensenke senden";
arCodeComments[16] = "//Diese Methode enthält keine Ausgabeparameter.";
arCodeComments[17] = "//Eigenschaften des Eingabeparameterobjekts:";
arCodeComments[18] = "//Eigenschaften des Ausgabeparameterobjekts:";


var locator;
var services;
var classSink = InternalGetObject("WbemScripting.SWbemSink");
var arClassNames; 
var dictLookup;  
var bRestoreClassSelection;
var bFirstLoad;

var dictCIM2VT = new ActiveXObject("Scripting.Dictionary");
dictCIM2VT.Add("2", "VT_I2"); 	//wbemCimtypeSint16
dictCIM2VT.Add("3", "VT_I4"); 	//wbemCimtypeSint32
dictCIM2VT.Add("4", "VT_R4"); 	//wbemCimtypeReal32
dictCIM2VT.Add("5", "VT_R8"); 	//wbemCimtypeReal64
dictCIM2VT.Add("8", "VT_BSTR"); 	//wbemCimtypeString
dictCIM2VT.Add("11", "VT_BOOL"); 	//wbemCimtypeBoolean
dictCIM2VT.Add("13", "VT_UNKNOWN"); //wbemCimtypeObject
dictCIM2VT.Add("16", "VT_I2"); 	//wbemCimtypeSint8	
dictCIM2VT.Add("17", "VT_UI1"); //wbemCimtypeUint8
dictCIM2VT.Add("18", "VT_I4"); 	//wbemCimtypeUint16 
dictCIM2VT.Add("19", "VT_I4"); 	//wbemCimtypeUint32 
dictCIM2VT.Add("20", "VT_BSTR"); 	//wbemCimtypeSint64 
dictCIM2VT.Add("21", "VT_BSTR"); 	//wbemCimtypeUint64 
dictCIM2VT.Add("101", "VT_BSTR"); //wbemCimtypeDatetime	
dictCIM2VT.Add("102", "VT_BSTR"); //wbemCimtypeReference 
dictCIM2VT.Add("103", "VT_I2"); //wbemCimtypeChar16 

var propPrefix = 	"s_pProp";
var methPrefix = 	"s_pMeth";
var inparmPrefix = 	"s_pIn";
var outparmPrefix = "s_pOut";

function InitDocument(document)
{
	try
	{
		bFirstLoad = window.external.FindSymbol("DOCUMENT_FIRST_LOAD");
		if (bFirstLoad)
		{
			window.external.SetDefaults(document);		
		}
		window.external.Load(document);
		
		locator = InternalGetObject("WbemScripting.SWbemLocator"); 
				
		EnumNamespaces("root", 1);
		
		CURRENTSELECTION.value = "";
		
		bRestoreClassSelection = true;
						
		//force selection of the last selected namespace and class
		//or the first elements in both listboxes
		RestoreNSSelection();
				
		OnChangeNS();	
	}
	catch (e)
	{
		window.external.ReportError("Ausnahme: " + e.description + " in InitDocument()");
	}		
}

function EnumNamespaces(name, num)
//recursively adds namespaces to the drop-down box
{
	
	try
	{			
		try
		{
			services = locator.ConnectServer("", name);	
		}
		catch (e)
		{
			return;
		}
		
	
		var instances = new Enumerator(services.InstancesOf("__NAMESPACE"));

		for (; !instances.atEnd(); instances.moveNext() )
		{
			num++;
			var oOption = document.createElement("OPTION");
		
			NSPICKER.options.add(oOption);

			var NameOut;
			if (name != "")
			{
				NameOut = name + "\\" + instances.item().Name;
			}
			else
			{
				NameOut = instances.item().Name;
			} 
	
			oOption.innerText = NameOut;
			oOption.Value = num;
		
			EnumNamespaces(NameOut, num);							
		}
	}
	catch (e)
	{
		window.external.ReportError("Ausnahme: " + e.description + " in EnumNamespaces()");
		return;
	}	
}


function OnChangeNS()
//clear array and dictionary, then call asynchronous class enumeration
{
	try
	{
		//clear CLASSPICKER and CLASSINPUT first
		while (CLASSPICKER.options.length > 0)
		{
			CLASSPICKER.options.remove(0);
		}				
		CLASSINPUT.value = "";		
		
		//clear class names array and dictionary
		arClassNames = ""; 
		arClassNames = new Array();
		dictLookup = "";
		dictLookup = new ActiveXObject("Scripting.Dictionary");
		
		//Display "Loading classes..." in the class list box
		var oOption = document.createElement("OPTION");		
		CLASSPICKER.options.add(oOption);							
		oOption.innerText = "Klassen werden geladen...";			
		oOption.Value = 1;
		
		var strNS = NSPICKER[NSPICKER.selectedIndex].innerText;
		services = locator.ConnectServer("", strNS);
						
		document.body.style.cursor = 'wait';
		//services.SubclassesOfAsync(classSink); 
		
		var enumClasses = new Enumerator(services.SubclassesOf("",
										0, //wbemFlagReturnWhenComplete+wbemFlagQueryDeep,
										null)); 

		for (; !enumClasses.atEnd(); enumClasses.moveNext() )
		{		
		
			//Put each qualifying object's class name into an array (in the uppercase) 
			//and a dictionary, mapping uppercase and case-preservant names
	
			//Filter out abstract, system  and event classes.
			//Luckily, all event classes are abstract :)
			if (CheckBoolQualifier(enumClasses.item(), "abstract") || IsSystem(enumClasses.item()))
			{
				continue;
			}
					
			var NameOut = enumClasses.item().Path_.RelPath;
			arClassNames[arClassNames.length] = NameOut.toUpperCase();
			dictLookup.Add (NameOut.toUpperCase(), NameOut);									
		
		}	
		
		//sort the uppercase array; pull case-preservant names from the dictionary 
		//and display them
	
		//clear "Loading..." text from CLASSPICKER		
		while (CLASSPICKER.options.length > 0)
		{
			CLASSPICKER.options.remove(0);
		}
	
		arClassNames.sort();
		
		for (i = 0; i < arClassNames.length; i++)		
		{			
			var oOption = document.createElement("OPTION");		
			CLASSPICKER.options.add(oOption);	
									
			oOption.innerText = dictLookup.Item(arClassNames[i]);			
			oOption.Value = i + 1;					
		}

		if (bRestoreClassSelection)		//first enumeration after InitDocument()
		{
			RestoreClassSelection();
			bRestoreClassSelection = false;
		}
		else
		{
			//force selection of the first class in the list
			CLASSPICKER.selectedIndex = 0;			
			OnChangeSelection();	
		}	
		
		document.body.style.cursor = 'default';
								
	}
	catch (e)
	{
		window.external.ReportError("Ausnahme: " + e.description + " in OnChangeNS()");		
	}	
}


function OnInputKeyPress()
//selects best-matching class in the listbox
{    
	//update text immediately
	//CLASSINPUT.value += String.fromCharCode(event.keyCode);
		
	try
	{
		var strInput = CLASSINPUT.value.toUpperCase(); // + String.fromCharCode(event.keyCode).toUpperCase();
		
		//alert (strInput);
				
		var bLoopThrough = true;
			
		for (i = 0; i < CLASSPICKER.options.length; i++)
		{	
			var strListed = CLASSPICKER.options[i].innerText.toUpperCase();
			//alert (strListed);
					
			if (strListed >= strInput)
			{
				CLASSPICKER.selectedIndex = i;						
				bLoopThrough = false;
				break;
			}
		}		
		if (bLoopThrough)
		{
			//select the last line
			CLASSPICKER.selectedIndex = CLASSPICKER.options.length - 1;
		}
		
		//we already updated text, so no need to add the character again:		
		//event.returnValue=false;
	}
	catch (e)
	{
		window.external.ReportError("Ausnahme: " + e.description + " in OnInputKeyPress()");
	}
}

function OnChangeSelection()
//display selected value in CLASSINPUT box
{
	try
	{	
		if (CLASSPICKER.selectedIndex == -1)
		{
			return;
		}		
		
		var selectionValue = CLASSPICKER[CLASSPICKER.selectedIndex].innerText;
		
		//check to see if the selected string is a class name (i.e., appears in the map)
		if (!dictLookup.Exists(selectionValue.toUpperCase())) 
		{
			return;
		}
		
		CLASSINPUT.value = selectionValue;		
	}
	catch (e)
	{
		window.external.ReportError("Ausnahme: " + e.description + " in OnChangeSelection");		
	}	
}

function OnClassDblClick()
{
	try 
	{	
		if (CLASSPICKER.selectedIndex == -1)
		{
			return;
		}
	
		var selNamespace = NSPICKER[NSPICKER.selectedIndex].innerText;
		var selClassName = CLASSPICKER[CLASSPICKER.selectedIndex].innerText;
		
		//see if the class already has a "provider" qualifier and warn
		var classObj = services.Get(selClassName);	
		var strCurrentProv = GetCurrentProviderName(classObj);
		if (strCurrentProv != "")
		{
			var bReplaceProv = confirm ("Warnung: Diese Klasse verfügt bereits über einen Anbieter: " +
					strCurrentProv + ". Wenn Sie den bestehenden Anbieter ersetzen, könnten schwerwiegende Systemfehler auftreten. Sind Sie sicher, dass Sie den Vorgang fortsetzen möchten?");
			if (!bReplaceProv)
			{
				return;
			}
		}
		
		var selectionValue = selNamespace + " : " +	selClassName;								
		
		//check to see if the selected string is a class name (i.e., appears in the map)
		if (!dictLookup.Exists(selClassName.toUpperCase())) 
			return;
			
		CURRENTSELECTION.value = selectionValue;
		CURRENTSELECTION.test = "";
		NAMESPACE.value = selNamespace;
		WMICLASSNAME.value = selClassName;
				
	}
	catch(e)
	{
		window.external.ReportError("Ausnahme: " + e.description + " in OnClassDblClick");
	}
}


function Next(document, linkto)
{
	GetWMIClassInfo();
	bGetClassInfo = true;
	window.external.Next(document, linkto);
}

function OnFinish(obj)
{
	GetWMIClassInfo();
	bGetClassInfo = true;
	obj.style.cursor='wait';
		
	window.external.Finish(document, "ok"); 
}

function InternalGetObject(progID)
{
	try 
	{
		var broker = new ActiveXObject("WMIScriptUtils.WMIObjectBroker");
		if (broker.CanCreateObject(progID))
		{
			return broker.CreateObject(progID);
		}
		else
		{
			var registrar = new ActiveXObject("WMIScriptUtils.WMIObjectBrokerRegistration");
  			registrar.Register(progID);
  			return broker.CreateObject(progID);
		}
	}
	catch (e)
	{
		window.external.ReportError ("Fehler in InternalGetObject(): " + e.description);
	}	 
}

function RestoreNSSelection()
{
	try 
	{
		//select saved namespace in NSPICKER
		for (i = 0; i < NSPICKER.options.length; i++)
		{	
			var strCurrent = NSPICKER.options[i].innerText;
			if (strCurrent == NAMESPACE.value) 
			{
				NSPICKER.selectedIndex = i;	
				
				//fill CURRENTSELECTION box:
				CURRENTSELECTION.value = NAMESPACE.value + " : ";				
				return;
			}
		}	
		//or, just select the first index
		NSPICKER.selectedIndex = 0;
									
	}
	catch(e)
	{
		window.external.ReportError ("Fehler in RestoreNSSelection(): " + e.description);
	}
}

function RestoreClassSelection()
{
	try
	{
		var bRestored = false;
		
		//select saved class in CLASSPICKER
		for (i = 0; i < CLASSPICKER.options.length; i++)
		{	
			var strCurrent = CLASSPICKER.options[i].innerText;
			if (strCurrent == WMICLASSNAME.value) 
			{
				CLASSPICKER.selectedIndex = i;
				
				//fill CURRENTSELECTION box:
				CURRENTSELECTION.value += WMICLASSNAME.value;	
				
				bRestored = true;				
				break;
			}
		}
		
		//or, just select the first index
		if (!bRestored)
		{
			CLASSPICKER.selectedIndex = 0;
		}
											
		//update CLASSINPUT
		OnChangeSelection();
		
			
	}
	catch(e)
	{
		window.external.ReportError ("Fehler in RestoreClassSelection(): " + e.description);
	}
}



</SCRIPT>

      <script language=JScript>

function classSink::OnObjectReady(objObject, objAsyncContext)
{
//Put each qualifying object's class name into an array (in the uppercase) 
//and a dictionary, mapping uppercase and case-preservant names
	try
	{
		//Filter out abstract, system  and event classes.
		//Luckily, all event classes are abstract :)
		if (CheckBoolQualifier(objObject, "abstract") || IsSystem(objObject))
		{
			return;
		}
				
		var NameOut = objObject.Path_.RelPath;
		arClassNames[arClassNames.length] = NameOut.toUpperCase();
		dictLookup.Add (NameOut.toUpperCase(), NameOut);								
	}
	catch(e)
	{
		window.external.ReportError("Ausnahme " + e.description + " in OnObjectReady()");
	}
}
    
function classSink::OnCompleted(objObject, objAsyncContext)
{
 //sort the uppercase array; pull case-preservant names from the dictionary 
 //and display them
	try
	{
		//clear "Loading..." text from CLASSPICKER		
		while (CLASSPICKER.options.length > 0)
		{
			CLASSPICKER.options.remove(0);
		}
	
		arClassNames.sort();
		
		for (i = 0; i < arClassNames.length; i++)		
		{			
			var oOption = document.createElement("OPTION");		
			CLASSPICKER.options.add(oOption);	
									
			oOption.innerText = dictLookup.Item(arClassNames[i]);			
			oOption.Value = i + 1;					
		}

		if (bRestoreClassSelection)		//first enumeration after InitDocument()
		{
			RestoreClassSelection();
			bRestoreClassSelection = false;
		}
		else
		{
			//force selection of the first class in the list
			CLASSPICKER.selectedIndex = 0;			
			OnChangeSelection();	
		}	
		
		document.body.style.cursor = 'default';
	}
	
	catch(e)
	{
		window.external.ReportError ("Ausnahme " + e.description + " in OnCompleted()");
	}
}


function IsSystem(objObject)
{
	try 
	{
		var NameOut = objObject.Path_.RelPath;
				
		return (NameOut.slice(0, 2).toString() == "__");				
	}
	catch(e)
	{
		return false;
	}				
}

function CheckBoolQualifier (obj, qualName)
{
try 
	{
		var qual = obj.Qualifiers_(qualName);	
			
		return (qual.Value);
	}
	catch(e)
	{
		//NOTE that if the qualifier is not present, "Not found" will be returned
		//Return false in this case
		return false;
	}				
}

function GetCurrentProviderName (obj)
{
//checks if the class already has a "provider" qualifier value and returns it.
//if the class doesn't have a "provider" qualifier or its value is empty, an empty string is 
//returned.
try 
	{
		var qual = obj.Qualifiers_("provider");	
					
		return (qual.Value.toString());
	}
	catch(e)
	{
		//NOTE that if the qualifier is not present, "Not found" will be returned
		//Return empty string in this case
		return "";
	}				
}

function GetWMIClassInfo()
{
	try
	{
		if (WMICLASSNAME.value == "")
			return;		
		
		var strStaticDecls = "";
		var strStaticDefs = "";
		var strInstancePopulation = "";
		
		var classObj = services.Get(WMICLASSNAME.value);
				
		var props = new Enumerator (classObj.Properties_);
		var nKeys = 0;
		
		for (; !props.atEnd(); props.moveNext() )
		{
			if (CheckBoolQualifier(props.item(), "key"))
				nKeys++;
			
			strStaticDecls += "extern const WCHAR * " + propPrefix + props.item().Name + ";\n\r";
			strStaticDefs += "const static WCHAR * " + propPrefix + props.item().Name +
										" = L\"" + props.item().Name + "\";\n\r";
										
			var vt = dictCIM2VT.Item(props.item().CIMType.toString());
			if (props.item().IsArray) {
				vt += " | VT_ARRAY";
			}
			
			strInstancePopulation  += "		var.ChangeType(" + vt + ");\n\r";
			strInstancePopulation  += "		//var = <value>; " + arCodeComments[0] + "\n\r";
			strInstancePopulation  += "		hr = pNewInst->Put(CComBSTR(" + propPrefix +
										props.item().Name	+ "), 0, &var, 0);\n\r";
			strInstancePopulation  += "		var.Clear();\n\r\n\r";					
		}	
					
		window.external.AddSymbol("PROPERTY_DEFINITIONS", strStaticDefs);
		window.external.AddSymbol("PROPERTY_DECLARATIONS", strStaticDecls);
		window.external.AddSymbol("POPULATE_INSTANCE", strInstancePopulation);
		window.external.AddSymbol("IS_COMPOUND_KEY", (nKeys > 1).toString());
		
		//find if the object is a singleton
		var bSingleton = CheckBoolQualifier(classObj, "Singleton");
		window.external.AddSymbol("IS_SINGLETON", bSingleton);
		
		GetMethodInfo(classObj);
		
		
	}	
	catch(e)
	{
		window.external.ReportError ("Fehler in GetWMIClassInfo():" + e);
	}
}

function GetMethodInfo(classObj)
{
	try
	{
		if (WMICLASSNAME.value == "")
			return;		
		
		var strMethDeclarations = "";
		var strMethDefinitions = "";
		var strExecMethodBody = "";
		//find if the object has any methods
		var eMeths = new Enumerator (classObj.Methods_);		
		var bStatic, bImplemented, bSingleton;
		
		strExecMethodBody += "	" + arCodeComments[1] + "\n\r";
		strExecMethodBody += "	" + arCodeComments[2] + "\n\r";
		
		strExecMethodBody += "	CComPtr<IWbemPath>pPath;\n\r";
		strExecMethodBody += "	hr = m_pPathFactory->CreateInstance(NULL,\n\r" +
							 "					IID_IWbemPath,\n\r" +
							 "					(void **) &pPath);\n\r";
		strExecMethodBody += "	if (FAILED(hr))\n\r	{\n\r		return WBEM_E_FAILED;\n\r	}\n\r" 
						
        strExecMethodBody += "	pPath->SetText(WBEMPATH_CREATE_ACCEPT_ALL, strObjectPath);\n\r";
        strExecMethodBody += "	long nPathLen = CComBSTR(strObjectPath).Length();\n\r";
        strExecMethodBody += "	ULONG ulBufLen = nPathLen;\n\r";	
		strExecMethodBody += "	WCHAR * wClass = new WCHAR[nPathLen];\n\r";
		strExecMethodBody += "	if (NULL == wClass)\n\r	{\n\r		return WBEM_E_OUT_OF_MEMORY;\n\r	}\n\r";
		strExecMethodBody += "	pPath->GetClassName(&ulBufLen, wClass);\n\r";
		strExecMethodBody += "	if ( _wcsicmp(s_pMyClassName, wClass))\n\r	{\n\r";
		strExecMethodBody += "		delete[] wClass;\n\r";
		strExecMethodBody += "		return WBEM_E_INVALID_PARAMETER;\n\r\	}\n\r";	
		strExecMethodBody += "	delete[] wClass;\n\r";		
					
		for (var nMeths = 0, nImplMeths = 0; !eMeths.atEnd(); eMeths.moveNext(), nMeths++ )
		{
			strMethDeclarations += "\n\r//" + eMeths.item().Name + "\n\r";
			strMethDefinitions +=  "\n\r//" + eMeths.item().Name + "\n\r";
			
			strMethDeclarations += "extern const WCHAR * " + methPrefix + eMeths.item().Name + ";\n\r";
			strMethDefinitions +=  "const static WCHAR * " + methPrefix + eMeths.item().Name +
										" = L\"" + eMeths.item().Name + "\";\n\r";
	
			bImplemented = CheckBoolQualifier(eMeths.item(), "implemented");
			if (bImplemented) 	
				nImplMeths++;
			else
				continue;
				
			bStatic = CheckBoolQualifier(eMeths.item(), "static");
			bSingleton = CheckBoolQualifier(classObj, "singleton");			
						
			strExecMethodBody += "	if (!_wcsicmp (strMethodName, " + methPrefix + 
									eMeths.item().Name + "))\n\r	{\n\r";			
						
			if (!bStatic && !bSingleton) 
			{			
				strExecMethodBody += "		" + arCodeComments[4] + "\n\r";
				
				strExecMethodBody += "		CComPtr<IWbemPathKeyList> pIKeyList;\n\r";
				strExecMethodBody += "		hr = pPath->GetKeyList(&pIKeyList);\n\r";
				strExecMethodBody += "		if (FAILED(hr))\n\r		{\n\r";
				strExecMethodBody += "			return WBEM_E_INVALID_PARAMETER;\n\r		}\n\r";
	
				strExecMethodBody += "		ULONG ulNumKeys;\n\r";
				strExecMethodBody += "		hr = pIKeyList->GetCount(&ulNumKeys);\n\r";

				strExecMethodBody += "		" + arCodeComments[5] + "\n\r"; 
				strExecMethodBody += "		unsigned long uKeyNameBufferSize = nPathLen;\n\r";
				strExecMethodBody += "		WCHAR  * wKeyName = new WCHAR[uKeyNameBufferSize];\n\r";
				strExecMethodBody += "		if (NULL == wKeyName)\n\r	{\n\r		return WBEM_E_OUT_OF_MEMORY;\n\r	}\n\r";
				strExecMethodBody += "		CComVariant vValue;\n\r";				
				strExecMethodBody += "		ULONG ulApparentCimType;\n\r";
				strExecMethodBody += "		for (ULONG i = 0; i < ulNumKeys; i++)\n\r		{\n\r";
				strExecMethodBody += "			hr = pIKeyList->GetKey2(i, 0L, &uKeyNameBufferSize,\n\r"; 				
				strExecMethodBody += "									wKeyName, &vValue, &ulApparentCimType);\n\r";
				strExecMethodBody += "			" + arCodeComments[6] + "\n\r		}\n\r";			
				strExecMethodBody += "		delete[] wKeyName;\n\r";				
				strExecMethodBody += "		" + arCodeComments[7]+ "\n\r\n\r";
        	}   			        
        	      	
							
			strExecMethodBody += "		CComVariant var;\n\r";	
			
			//enumerate properties of the input parameters object
			
			strMethDeclarations += arCodeComments[17] + "\n\r";
			strMethDefinitions +=  arCodeComments[17] + "\n\r";
								
			var oInParams = eMeths.item().InParameters;
			if (oInParams) 
			{																		
				strExecMethodBody += "		" + arCodeComments[8] + "\n\r";					
								
				var inParms = new Enumerator (oInParams.Properties_);
				for (; !inParms.atEnd(); inParms.moveNext() )
				{		
					strMethDeclarations += "extern const WCHAR * " + inparmPrefix + eMeths.item().Name + 
										inParms.item().Name  + ";\n\r";
										
					strMethDefinitions +=  "const static WCHAR * " + inparmPrefix + eMeths.item().Name +
										inParms.item().Name + " = L\"" + inParms.item().Name + "\";\n\r";
													
					strExecMethodBody  += "		hr = pInParams->Get(" + inparmPrefix + 
										eMeths.item().Name + inParms.item().Name +
										", 0, &var, NULL, NULL);\n\r";											
					strExecMethodBody  += "		" + arCodeComments[9] + "\n\r";					
					strExecMethodBody  += "		var.Clear();\n\r\n\r";						
				}
			}			
			else 
			{
				strExecMethodBody  += "		" + arCodeComments[10] + "\n\r";	
				
			}
					
			strExecMethodBody += "		" + arCodeComments[11] + "\n\r\n\r";
									
			//deal with the output parameters object	
			strMethDeclarations += arCodeComments[18] + "\n\r";
			strMethDefinitions +=  arCodeComments[18] + "\n\r";
						
			var oOutParams = eMeths.item().OutParameters;
			if (oOutParams) 
			{
										
				strExecMethodBody += "		" + arCodeComments[12] + "\n\r";
				strExecMethodBody += "		CComPtr<IWbemClassObject> pOutClass;\n\r";
				strExecMethodBody += "		hr = m_pClass->GetMethod(" + methPrefix +
											eMeths.item().Name + 
											", 0, NULL, &pOutClass);\n\r";
	
				strExecMethodBody += "		CComPtr<IWbemClassObject> pOutParams;\n\r";
				strExecMethodBody += "		pOutClass->SpawnInstance(0, &pOutParams);\n\r\n\r";
								
				strExecMethodBody += "		" + arCodeComments[13] + "\n\r";						
								
				var outParms = new Enumerator (oOutParams.Properties_);	
				for (; !outParms.atEnd(); outParms.moveNext() )
				{		
					strMethDeclarations += "extern const WCHAR * " + outparmPrefix + eMeths.item().Name + 
										outParms.item().Name  + ";\n\r";
										
					strMethDefinitions +=  "const static WCHAR * " + outparmPrefix + eMeths.item().Name +
										outParms.item().Name + " = L\"" + outParms.item().Name + "\";\n\r";
							
					var vt = dictCIM2VT.Item(outParms.item().CIMType.toString());
					if (outParms.item().IsArray) {
						vt += " | VT_ARRAY";
					}					
											
					strExecMethodBody  += "		var.ChangeType(" + vt + ");\n\r";
					strExecMethodBody  += "		" + arCodeComments[14] + "\n\r";
					strExecMethodBody  += "		hr = pOutParams->Put(CComBSTR(" + outparmPrefix + 
												eMeths.item().Name + outParms.item().Name	+ 
												"), 0, &var, 0);\n\r";				
					
					strExecMethodBody  += "		var.Clear();\n\r\n\r";						
				}								
				strExecMethodBody  += "		" + arCodeComments[15] + "\n\r"; 
				strExecMethodBody  += "		hr = pResponseHandler->Indicate(1, &(pOutParams.p));\n\r\n\r";								
			}
			else
			{
				strExecMethodBody  += "		" + arCodeComments[16] + "\n\r\n\r";
			}
			strExecMethodBody += "		pResponseHandler->SetStatus(0, WBEM_S_NO_ERROR, NULL, NULL);\n\r";
			strExecMethodBody += "		return WBEM_S_NO_ERROR;\n\r";			
			strExecMethodBody += "	}\n\r";										
		}	
	
		
		strExecMethodBody += "	return WBEM_E_NOT_SUPPORTED;\n\r";
		
		//window.external.ReportError (strExecMethodBody);		
		
		window.external.AddSymbol("HAS_METHODS", (nMeths > 0).toString());
		
		HAS_IMPL_METHODS.checked = (nImplMeths > 0);
		
		window.external.AddSymbol("PROVIDE_METHODS", HAS_IMPL_METHODS.checked);		
						
		window.external.AddSymbol("EXEC_METHOD_BODY", strExecMethodBody);	
		
		window.external.AddSymbol("METHOD_DEFINITIONS", strMethDefinitions);
		window.external.AddSymbol("METHOD_DECLARATIONS", strMethDeclarations);
	}
	
	catch(e)
	{
		window.external.ReportError ("Fehler in GetMethodInfo():" + e);
	}
}

</script>
    </TD></TR></TBODY></TABLE>

</TD></TR></TABLE>



</BODY></HTML>
<SCRIPT ID="INCLUDE_SCRIPT" LANGUAGE="JSCRIPT"></SCRIPT>
<SCRIPT ID="INCLUDE_COMMON" LANGUAGE="JSCRIPT"></SCRIPT>
<SCRIPT>
	var strPath = "../../../../../";
	strPath += window.external.GetHostLocale();
	var strScriptPath = strPath + "/Script.js";
	var strCommonPath = strPath + "/Common.js";
	document.scripts("INCLUDE_SCRIPT").src = strScriptPath;
	document.scripts("INCLUDE_COMMON").src = strCommonPath;
</SCRIPT>
