<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><HTML 
dir=ltr><HEAD>
<TITLE>WMI-Ereignisanbieter-Assistent</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
	<STYLE TYPE="text/css">@import url();</STYLE>
	<SCRIPT>
		var strURL = "../../../../../";
		strURL += window.external.GetHostLocale();
		strURL += "/NewStyles.css";
		document.styleSheets(0).imports(0).href = strURL;
	</SCRIPT>
</HEAD>
<BODY onkeydown=OnKey(); bottomMargin=0 bgColor=buttonface leftMargin=0 
topMargin=0 rightMargin=0 onload="InitDocument(document);" ONKEYDOWN="OnKey();" ONKEYPRESS="OnPress();">
<TABLE class=ONE cellSpacing=0 cellPadding=0 border=0>
  <colgroup>
  <COL width="100%">
  <TR vAlign=top>
    <TD height=79>
	<!--OPEN OF ALL ENCOMPASSING TABLE ROW ONE//-->
      <TABLE class=TWO cellSpacing=0 cellPadding=0 border=0>
        <colgroup>
        <COL width=12>
        <COL>
        <COL width=12>
        <TR>
          <TD vAlign=top width=12 height=12>&nbsp; </TD>
          <TD vAlign=top height=12>&nbsp; </TD>
          <TD vAlign=top width=12 height=12>&nbsp; </TD>
          <TD class=IMAGE vAlign=bottom width=110 rowSpan=2>
            <DIV id=Layer0><IMG class=SMALLEST height=63 alt="" src="../../Images/WMIEvent.ico" width=63 border=0 ></IMG> </DIV></TD>
          <TD vAlign=top width=6 height=12 rowSpan=2 
            >&nbsp; </TD></TR>
        <TR>
          <TD vAlign=top width=12 height=65>&nbsp; </TD>
          <TD vAlign=top height=65>
            <H1 class=HEAD id=HEAD>WMI-Klasse wählen</H1>
            <P class=SUBHEAD id=SUBHEAD>Informationen bezüglich der Klassenauswahl werden hier zukünftig angezeigt.</P></TD>
          <TD vAlign=top width=12 height=65>&nbsp; </TD></TR>
        <TR>
          <TD class=RULE vAlign=top colSpan=5 height=2>
            <TABLE height=1 cellSpacing=0 cellPadding=0 width="100%" border=0 
            >
              <TR vAlign=top>
                <TD width="100%" bgColor=buttonshadow height=1 
                ><IMG height=1 alt="" src="../../Images/spacer.gif" width=1 ></TD>
                <TD width=1 bgColor=window height=1><IMG height=1 alt="" src="../../Images/spacer.gif" width=1 ></TD></TR></TABLE></TD></TR></TABLE>
	 
	<!--CLOSE OF ALL ENCOMPASSING TABLE ROW ONE//--></TD></TR>
  <TR vAlign=top>
    <TD height="100%">
	<!--OPEN OF ALL ENCOMPASSING TABLE ROW TWO//-->
      <TABLE class=ONE cellSpacing=0 cellPadding=0 border=0>
        <colgroup>
        <COL width=178>
        <COL>
        <TR>
          <TD class=THREE 
          style="BACKGROUND-IMAGE: url(../../Images/ATL_Server_Background.gif)" 
          vAlign=top width=178 height="100%">
	   <!--OPEN OF NAVIGATION TABLE//-->
            <TABLE class=THREE cellSpacing=0 cellPadding=0 border=0 
            >
              <colgroup>
              <COL width=12>
              <COL width=166>
              <COL width=1>
              <TR>
                <TD vAlign=top colSpan=3 height=12>&nbsp; 
                </TD></TR>
              <TR>
                <TD vAlign=top width=12 height="100%" 
                  >&nbsp; </TD>
                <TD vAlign=top width=165 height="100%">
	   	  <!--OPEN OF NAVIGATIONAL LINKS//-->
                  <DIV class=LINK>
                  <TABLE class=LINKTEXT height=28 cellSpacing=0 cellPadding=0 
                  width=160 border=0>
                    <TR vAlign=center>
                      <TD width=156><SPAN id=Default
                        class=ACTIVELINK title="" 
                        onclick="Next(document, 'Default.htm');" tabIndex=1 
                        ><id id=idLocDefault>Namen</id></SPAN> </TD>
                      <TD width=4><IMG height=1 src="../../Images/spacer.gif" width=4 > 
                  </TD></TR></TABLE></DIV>
                  <DIV class=LINKSELECTED><SPAN 
                  class=VERTLINE1><IMG height=1 alt="" src="../../Images/spacer.gif" width=1 border=0 > 
                  </SPAN><SPAN class=HORILINE1>
                  <TABLE height="100%" cellSpacing=0 cellPadding=0 width=167 
                  border=0>
                    <TR vAlign=top>
                      <TD class=DOTTEDLINE height=1></TD></TR>
                    <TR vAlign=top>
                      <TD height="100%"><IMG height=1 alt="" src="../../Images/spacer.gif" width=28 border=0 > </TD></TR>
                    <TR vAlign=top>
                      <TD class=DOTTEDLINE height=1 
                    ></TD></TR></TABLE></SPAN>
                  <TABLE class=LINKTEXTSELECTED height=28 cellSpacing=0 
                  cellPadding=0 width=160 border=0>
                    <TR vAlign=center>
                      <TD width=156><SPAN  id=WMIClass
                        title=""><id id=idLocWMIClass>WMI-Klasse</id></SPAN> </TD>
                      <TD width=4><IMG height=1 src="../../Images/spacer.gif" width=4 > 
                  </TD></TR></TABLE></DIV>
                  <DIV class=LINK>
                  <TABLE class=LINKTEXT height=28 cellSpacing=0 cellPadding=0 
                  width=166 border=0>
                    <TR vAlign=center>
                      <TD width=162><SPAN id=Attributes
                        class=ACTIVELINK title="" 
                        onclick="Next(document, 'Attributes.htm');" tabIndex=1 
                        ><id id=idLocAttributes>Attribute</id></SPAN> </TD>
                      <TD width=4><IMG height=1 src="../../Images/spacer.gif" width=4 > 
                  </TD></TR></TABLE></DIV>
			
	   	  <!--CLOSE OF NAVIGATIONAL LINKS//--></TD>
                <TD width=1>
                  <DIV class=VERTLINE><IMG height=1 alt="" src="../../Images/spacer.gif" width=1 border=0 > 
                  </DIV></TD></TR></TABLE>
			
	   <!--CLOSE OF NAVIGATION TABLE//--></TD>
          <TD vAlign=top height="100%">
	   <!--OPEN OF CONTENT AND BUTTON TABLE//-->
            <TABLE class=ONE cellSpacing=0 cellPadding=0 border=0 
            >
              <colgroup>
              <COL width="100%">
              <TBODY>
              <TR vAlign=top>
                <TD height="100%">
	   	  <!--OPEN OF CONTENT AND BUTTON TABLE//-->
                  <TABLE class=ONE cellSpacing=0 cellPadding=0 border=0 
                  >
                    <colgroup>
                    <COL width="100%">
                    <TR vAlign=top>
                      <TD height="100%">
	   	  <!--OPEN OF CONTENT//-->
                        <TABLE class=CONTENT cellSpacing=0 cellPadding=0 
                        border=0>
                          <colgroup>
                          <COL width=12>
                          <COL width=398><!--<COL WIDTH="12"><COL WIDTH="193">-->
                          <COL width=12>
                          <TBODY>
                          <TR>
                            <TD vAlign=top colSpan=5 height=12 
                            >&nbsp; </TD></TR>
                          <TR>
                            <TD vAlign=top width=12 
                              >&nbsp; </TD>
                            <TD style="WIDTH: 454px" vAlign=top 
                            >
                              <TABLE class=CONTENT2 cellSpacing=0 cellPadding=0 
                              border=0>
                                <TR>
                                <TD style="WIDTH: 396px" vAlign=top 
                                >
  	  			  
  	  		<!-- two invisible test boxes to store ns and classname-->
            <input class=itemText 
            id=NAMESPACE name=NAMESPACE style="DISPLAY:none"> </input><input 
            class=itemText id=WMICLASSNAME name=WMICLASSNAME style="DISPLAY:none"> 
            </input>
            
            <P class=ElementSpacer>&nbsp;</P>
                
                  <span class=itemText ID="EVENT_TYPE_LABEL"
                  ><b 
                  ><id id=idLocEventType>Wählen Sie den Ereignstyp:</id></b><br 
                  >
                  <input id=INTRINSIC title="" accessKey=i 
                  onclick=OnChangeNS() type=radio name=eventtype 
                 >        
                 <span title="" 
                  ><LABEL for=INTRINSIC ID="INTRINSIC_LABEL"
                  ><id id=idLocIntrinsicEvents><u>I</u>nnere Ereignisse</id></LABEL></span></span>
                  
                  <span class=itemText 
                  ><input id=EXTRINSIC title="" accessKey=U 
                  onclick=OnChangeNS() type=radio name=eventtype 
                  CHECKED><span title="" 
                  ><LABEL for=EXTRINSIC ID="EXTRINSIC_LABEL">
                  <id id=idLocExtrinsicEvents>
                  Ä<u>u</u>ßere Ereignisse
                  </id></LABEL></span>
                  <br></span></SPAN>                              
                  
                                                        
                                 
                                <SPAN 
                                class=itemText ID="SELECT_NAMESPACE_LABEL">
                                <b><id id=idLocSelectNamespace>Wählen Sie einen <u>N</u>amespace: </id></b>
                                <P class=Spacer 
                                >&nbsp;</P><select 
                                class=itemText id=NSPICKER 
                                style="WIDTH: 390px" accessKey=n 
                                onchange=OnChangeNS() align=left size=1 
                                name=NSPICKER 
                                TYPE="SELECT-ONE"> <option value=1 selected >root</option></select> <br 
                                ></SPAN>
                                <P class=ElementSpacer 
                                >&nbsp;</P>
                                
                                <SPAN 
                                class=itemText ID="SELECT_CLASS_LABEL">
                                <b>
                                <id id=idLocSelectClass>Wählen Sie eine K<u>l</u>asse:</id>
                                </b> 
                                <P class=Spacer 
                                >&nbsp;</P>
                                
                                <input 
                                class=itemText oncut=OnInputKeyPress() 
                                onpaste=OnInputKeyPress() id=CLASSINPUT 
                                style="WIDTH: 390px" align=left size=390 
                                name=CLASSINPUT onkeypress="OnInputKeyPress()"> </SPAN><br 
                                > 
                                
                                <SPAN 
                                class=itemText><SELECT 
                                class=sideBtn3 id=CLASSPICKER 
                                ondblclick=OnClassDblClick(); 
                                style="WIDTH: 390px" accessKey=K 
                                onchange=OnChangeSelection(); size=2 
                                name=CLASSPICKER 
                                TYPE="SELECT-ONE"></SELECT> </SPAN><br 
                                >
                                <P class=Spacer>&nbsp;</P>
                                <P class=Spacer 
                                >&nbsp;</P>
                                
                                <button 
                                class=button id=CLEARBTN accessKey=z 
                                onclick='CURRENTSELECTION.value = "";CURRENTSELECTION.test = "";WMICLASSNAME.value = ""' 
                                type=button><u>Z</u>urücksetzen</button> 
                                &nbsp;
                                <button class=button id=SELECTBTN accessKey=s onclick=OnClassDblClick() type=button 
                                >Au<u>s</u>wählen</button> <br>
                                
                                <P class=Spacer>&nbsp;</P>
                                <P class=Spacer>&nbsp;</P>
                                <P class=Spacer 
                                >&nbsp;</P>
                                
                                <SPAN 
                                class=itemText ID="CURRENT_SELECTION_LABEL">
                                <b><id id=idLocCurrentSelection>Akutelle Auswahl: </id></b>
                                <P class=Spacer>&nbsp;</P>
                                <textarea class=itemText id=CURRENTSELECTION style="OVERFLOW: visible; WIDTH: 390px; BACKGROUND-COLOR: inactiveborder" readOnly></textarea> 
                                </SPAN></TD></TR></TABLE></TD>
                            <TD vAlign=top width=12 
                              >&nbsp; 
                        </TD></TD></TR></TABLE>	
  			  
  		
			
	   	  <!--CLOSE OF CONTENT//--></TD></TR>
                    <TR vAlign=bottom>
                      <TD height=48>
	   	<!--OPEN OF BUTTON HTML//-->
                        <TABLE class=ONE height=48 cellSpacing=0 cellPadding=0 
                        border=0>
                          <colgroup>
                          <COL width=12>
                          <COL>
                          <COL width=75>
                          <COL width=4>
                          <COL width=75>
                          <COL width=4>
                          <COL width=75>
                          <COL width=12>
                          <TR>
                            <TD class=RULE vAlign=top colSpan=8 height=1 
                            >
                              <TABLE height=1 cellSpacing=0 cellPadding=0 
                              width="100%" border=0>
                                <TR vAlign=top>
                                <TD width="100%" bgColor=buttonshadow height=1 
                                ><IMG height=1 alt="" src="../../Images/spacer.gif" width=1 ></TD>
                                <TD width=1 bgColor=window height=1 
                                ><IMG height=1 alt="" src="../../Images/spacer.gif" width=1 ></TD></TR></TABLE></TD></TR>
                          <TR>
                            <TD vAlign=top colSpan=8 height=11 
                            >&nbsp; </TD></TR>
                          <TR>
                            <TD vAlign=center width=12 height=23 
                            >&nbsp; </TD>
                            <TD vAlign=top height=23 
                              >&nbsp; </TD>
                            <TD vAlign=center width=75 height=23 
                            ><BUTTON class=BUTTONS 
                              id=Button1 accessKey=F onclick=OnFinish(this); 
                              type=button>
                              <U>F</U>ertig stellen</BUTTON> </TD>
                            <TD vAlign=center width=4 height=23 
                            >&nbsp; </TD>
                            <TD vAlign=center width=75 height=23 
                            ><BUTTON class=BUTTONS 
                              id=Button2 accessKey=A 
                              onclick="window.external.Finish(document, 'cancel');" 
                              type=button><U>A</U>bbrechen</BUTTON> </TD>
                            <TD vAlign=center width=4 height=23 
                            >&nbsp; </TD>
                            <TD vAlign=center width=75 height=23 
                            ><BUTTON class=BUTTONS 
                              id=Button3 accessKey=H                               
                              onclick="window.external.OnHelp('vc.codewiz.wmi.atl.event.wmiclass');" 
                              type=button>
                              <U>H</U>ilfe                               
                              </BUTTON> </TD>
                            <TD vAlign=center width=12 height=23 
                            >&nbsp; </TD></TR>
                          <TR>
                            <TD vAlign=top colSpan=8 height=12 
                            >&nbsp; </TD></TR></TABLE>
			
	   	  <!--CLOSE OF BUTTON HTML//--></TD></TR></TBODY></TABLE>
	
	   <!--CLOSE OF CONTENT AND BUTTON TABLE//--></TD></TR></TABLE>
	
	<!--CLOSE OF ALL ENCOMPASSING TABLE ROW TWO//--></TD></TR></TABLE>
<SCRIPT language=jscript>

var tab_array = new Array();
tab_array[0] = Default;
tab_array[1] = WMIClass;
tab_array[2] = Attributes;
//tab_array[3] = Properties;

var arCodeComments = new Array();
arCodeComments[0] = "//Aktion: Geben Sie den zutreffenden Wert hier ein.";


var dictCIM2VT = new ActiveXObject("Scripting.Dictionary");
dictCIM2VT.Add("2", "VT_I2"); 	//wbemCimtypeSint16
dictCIM2VT.Add("3", "VT_I4"); 	//wbemCimtypeSint32
dictCIM2VT.Add("4", "VT_R4"); 	//wbemCimtypeReal32
dictCIM2VT.Add("5", "VT_R8"); 	//wbemCimtypeReal64
dictCIM2VT.Add("8", "VT_BSTR"); 	//wbemCimtypeString
dictCIM2VT.Add("11", "VT_BOOL"); 	//wbemCimtypeBoolean
dictCIM2VT.Add("13", "VT_UNKNOWN"); //wbemCimtypeObject
dictCIM2VT.Add("16", "VT_I2"); 	//wbemCimtypeSint8	
dictCIM2VT.Add("17", "VT_UI1"); //wbemCimtypeUint8
dictCIM2VT.Add("18", "VT_I4"); 	//wbemCimtypeUint16 
dictCIM2VT.Add("19", "VT_I4"); 	//wbemCimtypeUint32 
dictCIM2VT.Add("20", "VT_BSTR"); 	//wbemCimtypeSint64 
dictCIM2VT.Add("21", "VT_BSTR"); 	//wbemCimtypeUint64 
dictCIM2VT.Add("101", "VT_BSTR"); //wbemCimtypeDatetime	
dictCIM2VT.Add("102", "VT_BSTR"); //wbemCimtypeReference 
dictCIM2VT.Add("103", "VT_I2"); //wbemCimtypeChar16 

var propPrefix = 	"s_pProp";

var locator;
var services;
var classSink = InternalGetObject("WbemScripting.SWbemSink");
var arClassNames; 
var dictLookup;  
var bRestoreClassSelection = false;

function InitDocument(document)
{
	try
	{
		var bFirstLoad = window.external.FindSymbol("DOCUMENT_FIRST_LOAD");
		if (bFirstLoad)
		{
			window.external.SetDefaults(document);		
		}
		window.external.Load(document);
		
		locator = InternalGetObject("WbemScripting.SWbemLocator"); 
				
		EnumNamespaces("root", 1);
		
		CURRENTSELECTION.value = "";
		
		bRestoreClassSelection = true;
				
		//force selection of the last selected namespace and class
		//or the first elements in both listboxes
		RestoreNSSelection();
		
		OnChangeNS();	
	}
	catch (e)
	{
		window.external.ReportError("Ausnahme: " + e.description + " in InitDocument()");
	}		
}

function EnumNamespaces(name, num)
//recursively adds namespaces to the drop-down box
{
	
	try
	{			
		try
		{
			services = locator.ConnectServer("", name);	
		}
		catch (e)
		{
			return;
		}	
		
		var instances = new Enumerator(services.InstancesOf("__NAMESPACE"));

		for (; !instances.atEnd(); instances.moveNext() )
		{
			num++;
			var oOption = document.createElement("OPTION");
		
			NSPICKER.options.add(oOption);

			var NameOut;
			if (name != "")
			{
				NameOut = name + "\\" + instances.item().Name;
			}
			else
			{
				NameOut = instances.item().Name;
			} 
	
			oOption.innerText = NameOut;
			oOption.Value = num;
		
			EnumNamespaces(NameOut, num);							
		}
	}
	catch (e)
	{
		window.external.ReportError("Ausnahme: " + e.description + " in EnumNamespaces()");
		return;
	}	
}



function OnChangeNS()
//clear array and dictionary, then call asynchronous class enumeration
{
	try
	{
		//cancel any pending asynchronous requests
		//classSink.Cancel();
		
		//clear CLASSPICKER and CLASSINPUT first
		while (CLASSPICKER.options.length > 0)
		{
			CLASSPICKER.options.remove(0);
		}		
		CLASSINPUT.value = "";							
		
		//clear class names array and dictionary
		arClassNames = ""; 
		arClassNames = new Array();
		dictLookup = "";
		dictLookup = new ActiveXObject("Scripting.Dictionary");
		
		var bIntrinsic = INTRINSIC.checked;
		var bExtrinsic =  EXTRINSIC.checked;		
		
		//Display "Loading classes..." in the class list box
		var oOption = document.createElement("OPTION");		
		CLASSPICKER.options.add(oOption);							
		oOption.innerText = "Klassen werden geladen...";			
		oOption.Value = 1;							
		
		var strNS = NSPICKER[NSPICKER.selectedIndex].innerText;
		services = locator.ConnectServer("", strNS);
						
		document.body.style.cursor = 'wait';
		
		//services.SubclassesOfAsync(classSink); 
		
		
		var enumClasses = new Enumerator(services.SubclassesOf("",
										0, //wbemFlagReturnWhenComplete+wbemFlagQueryDeep,
										null)); 

		for (; !enumClasses.atEnd(); enumClasses.moveNext() )
		{					
		
			//Filter out classes according to event provider type.
			//Put each qualifying object's class name into an array (in the uppercase) 
			//and a dictionary, mapping uppercase and case-preservant names
		
			
			if (bIntrinsic) 
			{
				//filter out abstract, system and event classes
				//NOTE: ALL EVENT CLASSES ARE ABSTRACT
				if (CheckBoolQualifier(enumClasses.item(), "abstract") || IsSystem(enumClasses.item()))
					continue;
			}
			
			if (bExtrinsic) 
			{
				//filter out all classes that are not derived 
				//from __ExtrinsicEvent.  And all system classes, too.
				if (!IsExtrinsicEvent(enumClasses.item()) || IsSystem(enumClasses.item()))
					continue;			
			}
					
			var NameOut = enumClasses.item().Path_.RelPath;
			arClassNames[arClassNames.length] = NameOut.toUpperCase();
			dictLookup.Add (NameOut.toUpperCase(), NameOut);									
		}										
		
		//sort the uppercase array; pull case-preservant names from the dictionary 
		//and display them
	
		//clear "Loading..." text from CLASSPICKER		
		while (CLASSPICKER.options.length > 0)
		{
			CLASSPICKER.options.remove(0);
		}				
		
		arClassNames.sort();
		
		for (i = 0; i < arClassNames.length; i++)		
		{			
			var oOption = document.createElement("OPTION");		
			CLASSPICKER.options.add(oOption);	
									
			oOption.innerText = dictLookup.Item(arClassNames[i]);			
			oOption.Value = i + 1;					
		}

		if (bRestoreClassSelection)		//first enumeration after InitDocument()
		{
			RestoreClassSelection();
			bRestoreClassSelection = false;
		}
		else
		{
			//force selection of the first class in the list
			CLASSPICKER.selectedIndex = 0;			
			OnChangeSelection();	
		}			
		
		document.body.style.cursor = 'default';					

	}
	catch (e)
	{
		window.external.ReportError("Ausnahme: " + e.description + " in OnChangeNS()");		
	}	
}


function OnInputKeyPress()
//selects best-matching class in the listbox
{    
	//update text immediately
	//CLASSINPUT.value += String.fromCharCode(event.keyCode);
		
	try
	{		
	
		var strInput = CLASSINPUT.value.toUpperCase(); // + String.fromCharCode(event.keyCode).toUpperCase();
		
		//alert (strInput);
				
		var bLoopThrough = true;
			
		for (i = 0; i < CLASSPICKER.options.length; i++)
		{	
			var strListed = CLASSPICKER.options[i].innerText.toUpperCase();
			alert (strListed);
					
			if (strListed >= strInput)
			{
				CLASSPICKER.selectedIndex = i;						
				bLoopThrough = false;
				break;
			}
		}		
		if (bLoopThrough)
		{
			//select the last line
			CLASSPICKER.selectedIndex = CLASSPICKER.options.length - 1;
		}
		
		//we already updated text, so no need to add the character again:		
		//event.returnValue=false;
	}
	catch (e)
	{
		window.external.ReportError("Ausnahme: " + e.description + " in OnInputKeyPress()");
	}
}

function OnChangeSelection()
//display selected value in CLASSINPUT box
{
	try
	{			
		if (CLASSPICKER.selectedIndex == -1)
		{
			return;
		}		
		
		var selectionValue = CLASSPICKER[CLASSPICKER.selectedIndex].innerText;
		
		//check to see if the selected string is a class name (i.e., appears in the map)
		if (!dictLookup.Exists(selectionValue.toUpperCase())) 
		{
			return;
		}
		
		CLASSINPUT.value = selectionValue;	
	}
	catch (e)
	{
		window.external.ReportError("Ausnahme: " + e.description + " in OnChangeSelection");		
	}	
}

function OnClassDblClick()
{
	try 
	{	
		var selNamespace = NSPICKER[NSPICKER.selectedIndex].innerText;
		var selClassName = CLASSPICKER[CLASSPICKER.selectedIndex].innerText;
		
		if (EXTRINSIC.checked)
		{
			//see if the class already has a "provider" qualifier and warn
			var classObj = services.Get(selClassName);	
			var strCurrentProv = GetCurrentProviderName(classObj);
			if (strCurrentProv != "")
			{
				var bReplaceProv = confirm ("Warnung: Diese Klasse verfügt bereits über einen Anbieter: " +
						strCurrentProv + ". Wenn Sie den bestehenden Anbieter ersetzen, könnten schwerwiegende Systemfehler auftreten. Sind Sie sicher, dass Sie den Vorgang fortsetzen möchten?");
				if (!bReplaceProv)
				{
					return;
				}
			}
		}
		else
		{
			//BUGBUG(?): there is no easy way to determine if there is an intrinsic event provider.
			//Also, if the class doesn't have one, winmgmt is polling instance data and firing instrinsic
			//events. Registering a provider causes winmgmt to stop polling and so this will break 
			//potential consumers. We will therefore ALWAYS bring up a warning for intrinsic providers:
			
			var bRegisterProv = confirm ("Warnung: Es sei denn Sie haben Klasse \"" + selClassName  + "\" erstellt, sollten Sie auf KEINEN FALL einen Anbieter für ein inneres Ereignis für eine Klasse registrieren. Ansonsten kann dies zu schwerwiegenden Systemfehlern führen. Sind Sie sicher, dass Sie den Vorgang fortsetzen möchten?");
			if (!bRegisterProv)
			{
				return;
			}
		}
						
		var selectionValue = selNamespace + " : " +	selClassName;
								
		//check to see if the selected string is a class name (i.e., appears in the map)
		if (!dictLookup.Exists(selClassName.toUpperCase())) 
			return;
	
		CURRENTSELECTION.value = selectionValue;
		NAMESPACE.value = selNamespace;
		WMICLASSNAME.value = selClassName;
				
	}
	catch(e)
	{
		window.external.ReportError("Ausnahme: " + e.description + " in OnClassDblClick");
	}
}
function OnUnload()
{
	
}

function Next(document, linkto)
{
	GetWMIClassInfo();
	window.external.Next(document, linkto);
}

function OnFinish(obj)
{
	GetWMIClassInfo();
	obj.style.cursor='wait';
	window.external.Finish(document, "ok"); 
}

function InternalGetObject(progID)
{
	try 
	{
		var broker = new ActiveXObject("WMIScriptUtils.WMIObjectBroker");
		if (broker.CanCreateObject(progID))
		{
			return broker.CreateObject(progID);
		}
		else
		{
			var registrar = new ActiveXObject("WMIScriptUtils.WMIObjectBrokerRegistration");
  			registrar.Register(progID);
  			return broker.CreateObject(progID);
		}
	}
	catch (e)
	{
		window.external.ReportError ("Fehler in GetLocator(): " + e.description);
	}	 
}

function RestoreNSSelection()
{
	try 
	{
		//select saved namespace in NSPICKER
		for (i = 0; i < NSPICKER.options.length; i++)
		{	
			var strCurrent = NSPICKER.options[i].innerText;
			if (strCurrent == NAMESPACE.value) 
			{
				NSPICKER.selectedIndex = i;
				
				//fill CURRENTSELECTION box:
				CURRENTSELECTION.value = NAMESPACE.value + " : ";				
				return;
			}
		}	
		
		//or, just select the first index
		NSPICKER.selectedIndex = 0;
		
					
	}
	catch(e)
	{
		window.external.ReportError ("Fehler in RestoreNSSelection(): " + e.description);
	}
}

function RestoreClassSelection()
{
	try
	{
		var bRestored = false;
		
		//select saved class in CLASSPICKER
		for (i = 0; i < CLASSPICKER.options.length; i++)
		{	
			var strCurrent = CLASSPICKER.options[i].innerText;
			if (strCurrent == WMICLASSNAME.value) 
			{
				CLASSPICKER.selectedIndex = i;
				//fill CURRENTSELECTION box:
				CURRENTSELECTION.value += WMICLASSNAME.value;		
				
				bRestored = true;				
				break;
			}
		}
		
		//or, just select the first index
		if (!bRestored)
		{
			CLASSPICKER.selectedIndex = 0;
		}
											
		//update CLASSINPUT
		OnChangeSelection();		
				
	}
	catch(e)
	{
		window.external.ReportError ("Fehler in RestoreClassSelection(): " + e.description);
	}
}



</SCRIPT>

<script language=JScript>

function classSink::OnObjectReady(objObject, objAsyncContext)
{
//Filter out classes according to event provider type.
//Put each qualifying object's class name into an array (in the uppercase) 
//and a dictionary, mapping uppercase and case-preservant names
	try
	{
		
		var bIntrinsic = INTRINSIC.checked;
		var bExtrinsic =  EXTRINSIC.checked;
		
		if (bIntrinsic) 
		{
			//filter out abstract, system and event classes
			//NOTE: ALL EVENT CLASSES ARE ABSTRACT
			if (CheckBoolQualifier(objObject, "abstract") || IsSystem(objObject))
				return;
		}
		
		if (bExtrinsic) 
		{
			//filter out all classes that are not derived 
			//from __ExtrinsicEvent.  And all system classes, too.
			if (!IsExtrinsicEvent(objObject) || IsSystem(objObject))
				return;			
		}
					
		var NameOut = objObject.Path_.RelPath;
		arClassNames[arClassNames.length] = NameOut.toUpperCase();
		dictLookup.Add (NameOut.toUpperCase(), NameOut);								
	}
	catch(e)
	{
		window.external.ReportError("Ausnahme: " + e.description + " in OnObjectReady()");
	}
}
    
function classSink::OnCompleted(objObject, objAsyncContext)
{
 //sort the uppercase array; pull case-preservant names from the dictionary 
 //and display them
	try
	{
		//clear "Loading..." text from CLASSPICKER		
		while (CLASSPICKER.options.length > 0)
		{
			CLASSPICKER.options.remove(0);
		}				
		
		arClassNames.sort();
		
		for (i = 0; i < arClassNames.length; i++)		
		{			
			var oOption = document.createElement("OPTION");		
			CLASSPICKER.options.add(oOption);	
									
			oOption.innerText = dictLookup.Item(arClassNames[i]);			
			oOption.Value = i + 1;					
		}

		if (bRestoreClassSelection)		//first enumeration after InitDocument()
		{
			RestoreClassSelection();
			bRestoreClassSelection = false;
		}
		else
		{
			//force selection of the first class in the list
			CLASSPICKER.selectedIndex = 0;			
			OnChangeSelection();	
		}			
		document.body.style.cursor = 'default';
	}
	
	catch(e)
	{
		window.external.ReportError ("Ausnahme: " + e.description + " in OnCompleted()");
	}
}

function IsExtrinsicEvent(objObject)
{
	try 
	{
		//handle __ExtrinsicEvent class separately, since it is not its own parent
		if (objObject.Path_.RelPath.toString() == "__ExtrinsicEvent")
		{
			return true;
		}
	
		arVB = new VBArray(objObject.Derivation_);
		arJS = arVB.toArray();
		
		for (i =0; i < arJS.length; i++)
		{
			if (arJS[i].toString() == "__ExtrinsicEvent")
			{
				return true;
			}
		}
		return false;
	}
	catch (e)
	{
		window.external.ReportError ("Fehler in IsExtrinsicEvent() " + objObject);
		return false;
	}
		
}

function CheckBoolQualifier (obj, qualName)
{
try 
	{
		var qual = obj.Qualifiers_(qualName);	
			
		return (qual.Value);
	}
	catch(e)
	{
		//NOTE that if the qualifier is not present, "Not found" will be returned
		//Return false in this case
		return false;
	}				
}


function GetCurrentProviderName (obj)
{
//checks if the class already has a "provider" qualifier value and returns it.
//if the class doesn't have a "provider" qualifier or its value is empty, an empty string is 
//returned.
try 
	{
		var qual = obj.Qualifiers_("provider");	
					
		return (qual.Value.toString());
	}
	catch(e)
	{
		//NOTE that if the qualifier is not present, "Not found" will be returned
		//Return empty string in this case
		return "";
	}				
}


function IsSystem(objObject)
{
	try 
	{
		var NameOut = objObject.Path_.RelPath;
		
			
		return (NameOut.slice(0, 2).toString() == "__");
				
	}
	catch(e)
	{
		return false;
	}				
}

function GetWMIClassInfo()
{
	try
	{
		if (WMICLASSNAME.value == "")
			return;
		
		var classObj = services.Get(WMICLASSNAME.value);
		
		if (EXTRINSIC.checked)
		{					
			//Create EXTRINSIC_PUT_BLOCK:
			var strExtrinsicPutBlock = "CComVariant var;\n\r";
			var strExtrPropertyDecls = "";	
			var strExtrPropertyDefs = "";
			
			var props = new Enumerator (classObj.Properties_);	
			for (; !props.atEnd(); props.moveNext() )
			{
				strExtrPropertyDecls += "extern const WCHAR * " + propPrefix + props.item().Name + ";\n\r";
				strExtrPropertyDefs += "const static WCHAR * " + propPrefix + props.item().Name +
										" = L\"" + props.item().Name + "\";\n\r";

				var vt = dictCIM2VT.Item(props.item().CIMType.toString());
				if (props.item().IsArray) {
					vt += " | VT_ARRAY";
				}			
				strExtrinsicPutBlock += "	var.ChangeType(" + vt + ");\n\r";
				strExtrinsicPutBlock += "	//var = <value>;" + arCodeComments[0] +	"\n\r";
				strExtrinsicPutBlock += "	hr = pEvtInstance->Put(" + propPrefix + props.item().Name + 
										", 0, &var, 0);\n\r";
				strExtrinsicPutBlock += "	var.Clear();\n\r\n\r";												
		
			}
			window.external.AddSymbol("EXTRINSIC_PUT_BLOCK", strExtrinsicPutBlock);
			window.external.AddSymbol("EXTR_PROPERTY_DEFINITIONS", strExtrPropertyDefs);
			window.external.AddSymbol("EXTR_PROPERTY_DECLARATIONS", strExtrPropertyDecls);
			
		}		
				
	}
	catch(e)
	{
		window.external.ReportError ("Fehler in GetWMIClassInfo():" + e);
	}
}


</script>
    </TD></TR></TBODY></TABLE>

</TD></TR></TABLE>




</BODY></HTML>

<SCRIPT ID="INCLUDE_SCRIPT" LANGUAGE="JSCRIPT"></SCRIPT>
<SCRIPT ID="INCLUDE_COMMON" LANGUAGE="JSCRIPT"></SCRIPT>
<SCRIPT>
	var strPath = "../../../../../";
	strPath += window.external.GetHostLocale();
	var strScriptPath = strPath + "/Script.js";
	var strCommonPath = strPath + "/Common.js";
	document.scripts("INCLUDE_SCRIPT").src = strScriptPath;
	document.scripts("INCLUDE_COMMON").src = strCommonPath;
</SCRIPT>
