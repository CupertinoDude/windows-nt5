<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd"><HTML 
dir=ltr><HEAD>
<TITLE>WMI イベント プロバイダ ウィザード</TITLE>
	<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=shift_jis">
	<STYLE TYPE="text/css">@import url();</STYLE>
	<SCRIPT>
		var strURL = "../../../../../";
		strURL += window.external.GetHostLocale();
		strURL += "/NewStyles.css";
		document.styleSheets(0).imports(0).href = strURL;
	</SCRIPT>

</HEAD>
<BODY onkeydown=OnKey(); bottomMargin=0 bgColor=buttonface leftMargin=0 
topMargin=0 onload=InitDocument(document); rightMargin=0>
<TABLE class=ONE cellSpacing=0 cellPadding=0 border=0>
  <colgroup>
  <COL width="100%">
  <TR vAlign=top>
    <TD height=79>
	<!--OPEN OF ALL ENCOMPASSING TABLE ROW ONE//-->
      <TABLE class=TWO cellSpacing=0 cellPadding=0 border=0>
        <colgroup>
        <COL width=12>
        <COL>
        <COL width=12>
        <TR>
          <TD vAlign=top width=12 height=12>&nbsp; </TD>
          <TD vAlign=top height=12>&nbsp; </TD>
          <TD vAlign=top width=12 height=12>&nbsp; </TD>
          <TD class=IMAGE vAlign=bottom width=110 rowSpan=2>
            <DIV id=Layer0><IMG class=SMALLEST height=63 alt="" src="../../Images/WMIEvent.ico" width=63 border=0 ></IMG> </DIV></TD>
          <TD vAlign=top width=6 height=12 rowSpan=2 
            >&nbsp; </TD></TR>
        <TR>
          <TD vAlign=top width=12 height=65>&nbsp; </TD>
          <TD vAlign=top height=65>
            <H1 class=HEAD id=HEAD>WMI クラスの選択</H1>
            <P class=SUBHEAD id=SUBHEAD>クラス選択情報がここに表示されます。</P></TD>
          <TD vAlign=top width=12 height=65>&nbsp; </TD></TR>
        <TR>
          <TD class=RULE vAlign=top colSpan=5 height=2>
            <TABLE height=1 cellSpacing=0 cellPadding=0 width="100%" border=0 
            >
              <TR vAlign=top>
                <TD width="100%" bgColor=buttonshadow height=1 
                ><IMG height=1 alt="" src="../../Images/spacer.gif" width=1 ></TD>
                <TD width=1 bgColor=window height=1><IMG height=1 alt="" src="../../Images/spacer.gif" width=1 ></TD></TR></TABLE></TD></TR></TABLE>
	 
	<!--CLOSE OF ALL ENCOMPASSING TABLE ROW ONE//--></TD></TR>
  <TR vAlign=top>
    <TD height="100%">
	<!--OPEN OF ALL ENCOMPASSING TABLE ROW TWO//-->
      <TABLE class=ONE cellSpacing=0 cellPadding=0 border=0>
        <colgroup>
        <COL width=178>
        <COL>
        <TR>
          <TD class=THREE 
          style="BACKGROUND-IMAGE: url(../../Images/ATL_Server_Background.gif)" 
          vAlign=top width=178 height="100%">
	   <!--OPEN OF NAVIGATION TABLE//-->
            <TABLE class=THREE cellSpacing=0 cellPadding=0 border=0 
            >
              <colgroup>
              <COL width=12>
              <COL width=166>
              <COL width=1>
              <TR>
                <TD vAlign=top colSpan=3 height=12>&nbsp; 
                </TD></TR>
              <TR>
                <TD vAlign=top width=12 height="100%" 
                  >&nbsp; </TD>
                <TD vAlign=top width=165 height="100%">
	   	  <!--OPEN OF NAVIGATIONAL LINKS//-->
                  <DIV class=LINK>
                  <TABLE class=LINKTEXT height=28 cellSpacing=0 cellPadding=0 
                  width=160 border=0>
                    <TR vAlign=center>
                      <TD width=156><SPAN id=Default
                        class=ACTIVELINK title="" 
                        onclick="Next(document, 'Default.htm');" tabIndex=1 
                        ><id id=idLocDefault>名前</id></SPAN> </TD>
                      <TD width=4><IMG height=1 src="../../Images/spacer.gif" width=4 > 
                  </TD></TR></TABLE></DIV>
                  <DIV class=LINKSELECTED><SPAN 
                  class=VERTLINE1><IMG height=1 alt="" src="../../Images/spacer.gif" width=1 border=0 > 
                  </SPAN><SPAN class=HORILINE1>
                  <TABLE height="100%" cellSpacing=0 cellPadding=0 width=167 
                  border=0>
                    <TR vAlign=top>
                      <TD class=DOTTEDLINE height=1></TD></TR>
                    <TR vAlign=top>
                      <TD height="100%"><IMG height=1 alt="" src="../../Images/spacer.gif" width=28 border=0 > </TD></TR>
                    <TR vAlign=top>
                      <TD class=DOTTEDLINE height=1 
                    ></TD></TR></TABLE></SPAN>
                  <TABLE class=LINKTEXTSELECTED height=28 cellSpacing=0 
                  cellPadding=0 width=160 border=0>
                    <TR vAlign=center>
                      <TD width=156><SPAN id=WMIClass 
                        title=""><id id=idLocWMIClass>WMI クラス</id></SPAN> </TD>
                      <TD width=4><IMG height=1 src="../../Images/spacer.gif" width=4 > 
                  </TD></TR></TABLE></DIV>
                  <DIV class=LINK>
                  <TABLE class=LINKTEXT height=28 cellSpacing=0 cellPadding=0 
                  width=166 border=0>
                    <TR vAlign=center>
                      <TD width=162><SPAN id=Attributes
                        class=ACTIVELINK title="" 
                        onclick="Next(document, 'Attributes.htm');" tabIndex=1 
                        ><id id=idLocAttributes>属性</id></SPAN> </TD>
                      <TD width=4><IMG height=1 src="../../Images/spacer.gif" width=4 > 
                  </TD></TR></TABLE></DIV>
			
	   	  <!--CLOSE OF NAVIGATIONAL LINKS//--></TD>
                <TD width=1>
                  <DIV class=VERTLINE><IMG height=1 alt="" src="../../Images/spacer.gif" width=1 border=0 > 
                  </DIV></TD></TR></TABLE>
			
	   <!--CLOSE OF NAVIGATION TABLE//--></TD>
          <TD vAlign=top height="100%">
	   <!--OPEN OF CONTENT AND BUTTON TABLE//-->
            <TABLE class=ONE cellSpacing=0 cellPadding=0 border=0 
            >
              <colgroup>
              <COL width="100%">
              <TBODY>
              <TR vAlign=top>
                <TD height="100%">
	   	  <!--OPEN OF CONTENT AND BUTTON TABLE//-->
                  <TABLE class=ONE cellSpacing=0 cellPadding=0 border=0 
                  >
                    <colgroup>
                    <COL width="100%">
                    <TR vAlign=top>
                      <TD height="100%">
	   	  <!--OPEN OF CONTENT//-->
                        <TABLE class=CONTENT cellSpacing=0 cellPadding=0 
                        border=0>
                          <colgroup>
                          <COL width=12>
                          <COL width=398><!--<COL WIDTH="12"><COL WIDTH="193">-->
                          <COL width=12>
                          <TBODY>
                          <TR>
                            <TD vAlign=top colSpan=5 height=12 
                            >&nbsp; </TD></TR>
                          <TR>
                            <TD vAlign=top width=12 
                              >&nbsp; </TD>
                            <TD style="WIDTH: 454px" vAlign=top 
                            >
                              <TABLE class=CONTENT2 cellSpacing=0 cellPadding=0 
                              border=0>
                                <TR>
                                <TD style="WIDTH: 396px" vAlign=top 
                                >
  	  			  
  	  		<!-- two invisible test boxes to store ns and classname-->
            <input class=itemText 
            id=NAMESPACE name=NAMESPACE style="DISPLAY:none"> </input><input 
            class=itemText id=WMICLASSNAME name=WMICLASSNAME style="DISPLAY:none"> 
            </input>
            
            <P class=ElementSpacer>&nbsp;</P>
                
                  <span class=itemText ID="EVENT_TYPE_LABEL"
                  ><b 
                  ><id id=idLocEventType>イベントの種類の選択:</id></b><br 
                  >
                  <input id=INTRINSIC title="" accessKey=i 
                  onclick=OnChangeNS() type=radio name=eventtype 
                 >        
                 <span title="" 
                  ><LABEL for=INTRINSIC ID="INTRINSIC_LABEL"
                  ><id id=idLocIntrinsicEvents>組み込みイベント(<u>I</u>)</id></LABEL></span></span>
                  
                  <span class=itemText 
                  ><input id=EXTRINSIC title="" accessKey=E 
                  onclick=OnChangeNS() type=radio name=eventtype 
                  CHECKED><span title="" 
                  ><LABEL for=EXTRINSIC ID="EXTRINSIC_LABEL">
                  <id id=idLocExtrinsicEvents>
                  外部イベント(<u>E</u>)
                  </id></LABEL></span>
                  <br></span></SPAN>                              
                  
                                                        
                                 
                                <SPAN 
                                class=itemText ID="SELECT_NAMESPACE_LABEL">
                                <b><id id=idLocSelectNamespace>名前空間の選択( <u>N</u>): </id></b>
                                <P class=Spacer 
                                >&nbsp;</P><select 
                                class=itemText id=NSPICKER 
                                style="WIDTH: 390px" accessKey=n 
                                onchange=OnChangeNS() align=left size=1 
                                name=NSPICKER 
                                TYPE="SELECT-ONE"> <option value=1 selected >root</option></select> <br 
                                ></SPAN>
                                <P class=ElementSpacer 
                                >&nbsp;</P>
                                
                                <SPAN 
                                class=itemText ID="SELECT_CLASS_LABEL">
                                <b>
                                <id id=idLocSelectClass>クラスの選択(<u>l</u>):</id>
                                </b> 
                                <P class=Spacer 
                                >&nbsp;</P>
                                
                                <input 
                                class=itemText oncut=OnInputKeyPress() 
                                onpaste=OnInputKeyPress() id=CLASSINPUT 
                                style="WIDTH: 390px" align=left size=390 
                                name=CLASSINPUT onkeypress="OnInputKeyPress()"> </SPAN><br 
                                > 
                                
                                <SPAN 
                                class=itemText><SELECT 
                                class=sideBtn3 id=CLASSPICKER 
                                ondblclick=OnClassDblClick(); 
                                style="WIDTH: 390px" accessKey=L 
                                onchange=OnChangeSelection(); size=2 
                                name=CLASSPICKER 
                                TYPE="SELECT-ONE"></SELECT> </SPAN><br 
                                >
                                <P class=Spacer>&nbsp;</P>
                                <P class=Spacer 
                                >&nbsp;</P>
                                
                                <button 
                                class=button id=CLEARBTN accessKey=e 
                                onclick='CURRENTSELECTION.value = "";CURRENTSELECTION.test = "";WMICLASSNAME.value = ""' 
                                type=button>消去(<u>E</u>)</button> 
                                &nbsp;
                                <button class=button id=SELECTBTN accessKey=s onclick=OnClassDblClick() type=button 
                                >選択(<u>S</u>)</button> <br>
                                
                                <P class=Spacer>&nbsp;</P>
                                <P class=Spacer>&nbsp;</P>
                                <P class=Spacer 
                                >&nbsp;</P>
                                
                                <SPAN 
                                class=itemText ID="CURRENT_SELECTION_LABEL">
                                <b><id id=idLocCurrentSelection>現在の選択: </id></b>
                                <P class=Spacer>&nbsp;</P>
                                <textarea class=itemText id=CURRENTSELECTION style="OVERFLOW: visible; WIDTH: 390px; BACKGROUND-COLOR: inactiveborder" readOnly></textarea> 
                                </SPAN></TD></TR></TABLE></TD>
                            <TD vAlign=top width=12 
                              >&nbsp; 
                        </TD></TD></TR></TABLE>	
  			  
  		
			
	   	  <!--CLOSE OF CONTENT//--></TD></TR>
                    <TR vAlign=bottom>
                      <TD height=48>
	   	<!--OPEN OF BUTTON HTML//-->
                        <TABLE class=ONE height=48 cellSpacing=0 cellPadding=0 
                        border=0>
                          <colgroup>
                          <COL width=12>
                          <COL>
                          <COL width=75>
                          <COL width=4>
                          <COL width=75>
                          <COL width=4>
                          <COL width=75>
                          <COL width=12>
                          <TR>
                            <TD class=RULE vAlign=top colSpan=8 height=1 
                            >
                              <TABLE height=1 cellSpacing=0 cellPadding=0 
                              width="100%" border=0>
                                <TR vAlign=top>
                                <TD width="100%" bgColor=buttonshadow height=1 
                                ><IMG height=1 alt="" src="../../Images/spacer.gif" width=1 ></TD>
                                <TD width=1 bgColor=window height=1 
                                ><IMG height=1 alt="" src="../../Images/spacer.gif" width=1 ></TD></TR></TABLE></TD></TR>
                          <TR>
                            <TD vAlign=top colSpan=8 height=11 
                            >&nbsp; </TD></TR>
                          <TR>
                            <TD vAlign=center width=12 height=23 
                            >&nbsp; </TD>
                            <TD vAlign=top height=23 
                              >&nbsp; </TD>
                            <TD vAlign=center width=75 height=23 
                            ><BUTTON class=BUTTONS 
                              id=Button1 accessKey=F onclick=OnFinish(this); 
                              type=button>
                              完了(<U>F</U>)</BUTTON> </TD>
                            <TD vAlign=center width=4 height=23 
                            >&nbsp; </TD>
                            <TD vAlign=center width=75 height=23 
                            ><BUTTON class=BUTTONS 
                              id=Button2 accessKey=C 
                              onclick="window.external.Finish(document, 'cancel');" 
                              type=button>キャンセル(<U>C</U>)</BUTTON> </TD>
                            <TD vAlign=center width=4 height=23 
                            >&nbsp; </TD>
                            <TD vAlign=center width=75 height=23 
                            ><BUTTON class=BUTTONS 
                              id=Button3 accessKey=H                               
                              onclick="window.external.OnHelp('vc.codewiz.wmi.atl.event.wmiclass');" 
                              type=button>
                              ヘルプ(<U>H</U>)                               
                              </BUTTON> </TD>
                            <TD vAlign=center width=12 height=23 
                            >&nbsp; </TD></TR>
                          <TR>
                            <TD vAlign=top colSpan=8 height=12 
                            >&nbsp; </TD></TR></TABLE>
			
	   	  <!--CLOSE OF BUTTON HTML//--></TD></TR></TBODY></TABLE>
	
	   <!--CLOSE OF CONTENT AND BUTTON TABLE//--></TD></TR></TABLE>
	
	<!--CLOSE OF ALL ENCOMPASSING TABLE ROW TWO//--></TD></TR></TABLE>
<SCRIPT language=jscript>

var tab_array = new Array();
tab_array[0] = Default;
tab_array[1] = WMIClass;
tab_array[2] = Attributes;
//tab_array[3] = Properties;

var arCodeComments = new Array();
arCodeComments[0] = "//TODO: ここに適切な値を入れてください。";


var dictCIM2VT = new ActiveXObject("Scripting.Dictionary");
dictCIM2VT.Add("2", "VT_I2"); 	//wbemCimtypeSint16
dictCIM2VT.Add("3", "VT_I4"); 	//wbemCimtypeSint32
dictCIM2VT.Add("4", "VT_R4"); 	//wbemCimtypeReal32
dictCIM2VT.Add("5", "VT_R8"); 	//wbemCimtypeReal64
dictCIM2VT.Add("8", "VT_BSTR"); 	//wbemCimtypeString
dictCIM2VT.Add("11", "VT_BOOL"); 	//wbemCimtypeBoolean
dictCIM2VT.Add("13", "VT_UNKNOWN"); //wbemCimtypeObject
dictCIM2VT.Add("16", "VT_I2"); 	//wbemCimtypeSint8	
dictCIM2VT.Add("17", "VT_UI1"); //wbemCimtypeUint8
dictCIM2VT.Add("18", "VT_I4"); 	//wbemCimtypeUint16 
dictCIM2VT.Add("19", "VT_I4"); 	//wbemCimtypeUint32 
dictCIM2VT.Add("20", "VT_BSTR"); 	//wbemCimtypeSint64 
dictCIM2VT.Add("21", "VT_BSTR"); 	//wbemCimtypeUint64 
dictCIM2VT.Add("101", "VT_BSTR"); //wbemCimtypeDatetime	
dictCIM2VT.Add("102", "VT_BSTR"); //wbemCimtypeReference 
dictCIM2VT.Add("103", "VT_I2"); //wbemCimtypeChar16 

var propPrefix = 	"s_pProp";

var locator;
var services;
var classSink = InternalGetObject("WbemScripting.SWbemSink");
var arClassNames; 
var dictLookup;  
var bRestoreClassSelection = false;

function InitDocument(document)
{
	try
	{
		var bFirstLoad = window.external.FindSymbol("DOCUMENT_FIRST_LOAD");
		if (bFirstLoad)
		{
			window.external.SetDefaults(document);		
		}
		window.external.Load(document);
		
		locator = InternalGetObject("WbemScripting.SWbemLocator"); 
				
		EnumNamespaces("root", 1);
		
		CURRENTSELECTION.value = "";
		
		bRestoreClassSelection = true;
				
		//最後に選択された名前空間とクラス
		//または両方のリストボックス内の最初の要素の選択を強制します。
		RestoreNSSelection();
		
		OnChangeNS();	
	}
	catch (e)
	{
		window.external.ReportError("例外: " + e.description + " in InitDocument()");
	}		
}

function EnumNamespaces(name, num)
//ドロップダウン ボックスに名前空間を再帰的に加えます。
{
	
	try
	{			
		try
		{
			services = locator.ConnectServer("", name);	
		}
		catch (e)
		{
			return;
		}	
		
		var instances = new Enumerator(services.InstancesOf("__NAMESPACE"));

		for (; !instances.atEnd(); instances.moveNext() )
		{
			num++;
			var oOption = document.createElement("OPTION");
		
			NSPICKER.options.add(oOption);

			var NameOut;
			if (name != "")
			{
				NameOut = name + "\\" + instances.item().Name;
			}
			else
			{
				NameOut = instances.item().Name;
			} 
	
			oOption.innerText = NameOut;
			oOption.Value = num;
		
			EnumNamespaces(NameOut, num);							
		}
	}
	catch (e)
	{
		window.external.ReportError("例外: " + e.description + " in EnumNamespaces()");
		return;
	}	
}

function OnChangeNS()
//clear array and dictionary, then call asynchronous class enumeration
{
	try
	{
		//cancel any pending asynchronous requests
		//classSink.Cancel();
		
		//clear CLASSPICKER and CLASSINPUT first
		while (CLASSPICKER.options.length > 0)
		{
			CLASSPICKER.options.remove(0);
		}		
		CLASSINPUT.value = "";							
		
		//clear class names array and dictionary
		arClassNames = ""; 
		arClassNames = new Array();
		dictLookup = "";
		dictLookup = new ActiveXObject("Scripting.Dictionary");
		
		var bIntrinsic = INTRINSIC.checked;
		var bExtrinsic =  EXTRINSIC.checked;		
		
		//Display "Loading classes..." in the class list box
		var oOption = document.createElement("OPTION");		
		CLASSPICKER.options.add(oOption);							
		oOption.innerText = "クラスを読み込み中...";			
		oOption.Value = 1;							
		
		var strNS = NSPICKER[NSPICKER.selectedIndex].innerText;
		services = locator.ConnectServer("", strNS);
						
		document.body.style.cursor = 'wait';
		
		//services.SubclassesOfAsync(classSink); 
		
		
		var enumClasses = new Enumerator(services.SubclassesOf("",
										0, //wbemFlagReturnWhenComplete+wbemFlagQueryDeep,
										null)); 

		for (; !enumClasses.atEnd(); enumClasses.moveNext() )
		{					
		
			//Filter out classes according to event provider type.
			//Put each qualifying object's class name into an array (in the uppercase) 
			//and a dictionary, mapping uppercase and case-preservant names
		
			
			if (bIntrinsic) 
			{
				//filter out abstract, system and event classes
				//NOTE: ALL EVENT CLASSES ARE ABSTRACT
				if (CheckBoolQualifier(enumClasses.item(), "abstract") || IsSystem(enumClasses.item()))
					continue;
			}
			
			if (bExtrinsic) 
			{
				//filter out all classes that are not derived 
				//from __ExtrinsicEvent.  And all system classes, too.
				if (!IsExtrinsicEvent(enumClasses.item()) || IsSystem(enumClasses.item()))
					continue;			
			}
					
			var NameOut = enumClasses.item().Path_.RelPath;
			arClassNames[arClassNames.length] = NameOut.toUpperCase();
			dictLookup.Add (NameOut.toUpperCase(), NameOut);									
		}										
		
		//sort the uppercase array; pull case-preservant names from the dictionary 
		//and display them
	
		//clear "Loading..." text from CLASSPICKER		
		while (CLASSPICKER.options.length > 0)
		{
			CLASSPICKER.options.remove(0);
		}				
		
		arClassNames.sort();
		
		for (i = 0; i < arClassNames.length; i++)		
		{			
			var oOption = document.createElement("OPTION");		
			CLASSPICKER.options.add(oOption);	
									
			oOption.innerText = dictLookup.Item(arClassNames[i]);			
			oOption.Value = i + 1;					
		}

		if (bRestoreClassSelection)		//first enumeration after InitDocument()
		{
			RestoreClassSelection();
			bRestoreClassSelection = false;
		}
		else
		{
			//force selection of the first class in the list
			CLASSPICKER.selectedIndex = 0;			
			OnChangeSelection();	
		}			
		
		document.body.style.cursor = 'default';					

	}
	catch (e)
	{
		window.external.ReportError("例外: " + e.description + " in OnChangeNS()");		
	}	
}

function OnInputKeyPress()
//リストボックスに最も一致するクラスを選択します。
{    
	//テキストを直ちに更新します。
	//CLASSINPUT.value += String.fromCharCode(event.keyCode);
		
	try
	{		
	
		var strInput = CLASSINPUT.value.toUpperCase(); // + String.fromCharCode(event.keyCode).toUpperCase();
		
		//alert (strInput);
				
		var bLoopThrough = true;
			
		for (i = 0; i < CLASSPICKER.options.length; i++)
		{	
			var strListed = CLASSPICKER.options[i].innerText.toUpperCase();
			alert (strListed);
					
			if (strListed >= strInput)
			{
				CLASSPICKER.selectedIndex = i;						
				bLoopThrough = false;
				break;
			}
		}		
		if (bLoopThrough)
		{
			//最後の行を選択します。
			CLASSPICKER.selectedIndex = CLASSPICKER.options.length - 1;
		}
		
		//テキストは既に更新しているので、再度文字を追加する必要はありません:		
		//event.returnValue=false;
	}
	catch (e)
	{
		window.external.ReportError("例外: " + e.description + " in OnInputKeyPress()");
	}
}

function OnChangeSelection()
//選択された値を CLASSINPUT ボックスに表示します。 
{
	try
	{			
		if (CLASSPICKER.selectedIndex == -1)
		{
			return;
		}		
		
		var selectionValue = CLASSPICKER[CLASSPICKER.selectedIndex].innerText;
		
		//選択された文字列がクラス名かどうか確認します。(例、マップ内に出現します。）
		if (!dictLookup.Exists(selectionValue.toUpperCase())) 
		{
			return;
		}
		
		CLASSINPUT.value = selectionValue;	
	}
	catch (e)
	{
		window.external.ReportError("例外: " + e.description + " in OnChangeSelection");		
	}	
}

function OnClassDblClick()
{
	try 
	{	
		var selNamespace = NSPICKER[NSPICKER.selectedIndex].innerText;
		var selClassName = CLASSPICKER[CLASSPICKER.selectedIndex].innerText;
		
		if (EXTRINSIC.checked)
		{
			//クラスに既に "プロバイダ" 修飾子があるかどうかを検索して警告します。
			var classObj = services.Get(selClassName);	
			var strCurrentProv = GetCurrentProviderName(classObj);
			if (strCurrentProv != "")
			{
				var bReplaceProv = confirm ("警告: このクラスには既にプロバイダがあります: " +
						strCurrentProv + "。既存のプロバイダを置き換えることは危険です。この作業を行いますか?");
				if (!bReplaceProv)
				{
					return;
				}
			}
		}
		else
		{
			//BUGBUG(?): 組み込みイベント プロバイダがあるかどうかを判断する簡単な方法はありません。
			//また、クラスにプロバイダがない場合、winmgmt はインスタンス データをポーリングして組み込みイベントを開始します。
			//プロバイダを登録すると winmgmt がポーリングを停止することになり、可能性のある
			// コンシューマを壊すことになります。このため、組み込みプロバイダに対しては常に警告メッセージを出します:
			
			var bRegisterProv = confirm ("警告:  クラス \"" + selClassName  + "\" を作成しない限り、組み込みイベント プロバイダを登録しないことを強く推奨します。登録すると、システムに重大な影響を及ぼす可能性があります。登録を行いますか?");
			if (!bRegisterProv)
			{
				return;
			}
		}
						
		var selectionValue = selNamespace + " : " +	selClassName;
								
		//選択された文字列がクラス名かどうかを確認します (例、マップに現れます)。
		if (!dictLookup.Exists(selClassName.toUpperCase())) 
			return;
	
		CURRENTSELECTION.value = selectionValue;
		NAMESPACE.value = selNamespace;
		WMICLASSNAME.value = selClassName;
				
	}
	catch(e)
	{
		window.external.ReportError("例外: " + e.description + " in OnClassDblClick");
	}
}
function OnUnload()
{
	
}

function Next(document, linkto)
{
	GetWMIClassInfo();
	window.external.Next(document, linkto);
}

function OnFinish(obj)
{
	GetWMIClassInfo();
	obj.style.cursor='wait';
	window.external.Finish(document, "ok"); 
}

function InternalGetObject(progID)
{
	try 
	{
		var broker = new ActiveXObject("WMIScriptUtils.WMIObjectBroker");
		if (broker.CanCreateObject(progID))
		{
			return broker.CreateObject(progID);
		}
		else
		{
			var registrar = new ActiveXObject("WMIScriptUtils.WMIObjectBrokerRegistration");
  			registrar.Register(progID);
  			return broker.CreateObject(progID);
		}
	}
	catch (e)
	{
		window.external.ReportError ("GetLocator() でエラー: " + e.description);
	}	 
}

function RestoreNSSelection()
{
	try 
	{
		//NSPICKER に保存された名前空間を選択します。
		for (i = 0; i < NSPICKER.options.length; i++)
		{	
			var strCurrent = NSPICKER.options[i].innerText;
			if (strCurrent == NAMESPACE.value) 
			{
				NSPICKER.selectedIndex = i;
				
				//CURRENTSELECTION ボックスに入力します:
				CURRENTSELECTION.value = NAMESPACE.value + " : ";				
				return;
			}
		}	
		
		//または、最初のインデックスを選択します。
		NSPICKER.selectedIndex = 0;
		
					
	}
	catch(e)
	{
		window.external.ReportError ("RestoreNSSelection() でエラー: " + e.description);
	}
}

function RestoreClassSelection()
{
	try
	{
		var bRestored = false;
		
		//CLASSPICKER に保存されたクラスを選択します。
		for (i = 0; i < CLASSPICKER.options.length; i++)
		{	
			var strCurrent = CLASSPICKER.options[i].innerText;
			if (strCurrent == WMICLASSNAME.value) 
			{
				CLASSPICKER.selectedIndex = i;
				//CURRENTSELECTION ボックスに入力します:
				CURRENTSELECTION.value += WMICLASSNAME.value;		
				
				bRestored = true;				
				break;
			}
		}
		
		//または、最初のインデックスを選択します。
		if (!bRestored)
		{
			CLASSPICKER.selectedIndex = 0;
		}
											
		//CLASSINPUT を更新します。
		OnChangeSelection();		
				
	}
	catch(e)
	{
		window.external.ReportError ("RestoreClassSelection() でエラー: " + e.description);
	}
}



</SCRIPT>

<script language=JScript>

function classSink::OnObjectReady(objObject, objAsyncContext)
{
//イベント プロバイダの種類によりクラスをフィルタ処理します。
//条件に合うオブジェクトのクラス名を、大文字と文字を維持した名前にマップして、
//配列（大文字で）と辞書内に入れます。
	try
	{
		
		var bIntrinsic = INTRINSIC.checked;
		var bExtrinsic =  EXTRINSIC.checked;
		
		if (bIntrinsic) 
		{
			//抽象型、システム、イベント クラスをフィルタ処理します。
			//注: すべてのイベント クラスは抽象型です。
			if (CheckBoolQualifier(objObject, "abstract") || IsSystem(objObject))
				return;
		}
		
		if (bExtrinsic) 
		{
			//__ExtrinsicEvent から派生されていないすべてのクラスをフィルタ処理します。
			//すべてのシステム クラスもフィルタ処理します。
			if (!IsExtrinsicEvent(objObject) || IsSystem(objObject))
				return;			
		}
					
		var NameOut = objObject.Path_.RelPath;
		arClassNames[arClassNames.length] = NameOut.toUpperCase();
		dictLookup.Add (NameOut.toUpperCase(), NameOut);								
	}
	catch(e)
	{
		window.external.ReportError("例外 " + e.description + " in OnObjectReady()");
	}
}
    
function classSink::OnCompleted(objObject, objAsyncContext)
{
 //大文字の配列を並べ替えます; 辞書からケースを維持した名前を取り
 //表示します。
	try
	{
		//CLASSPICKER から "読み込み中..." テキストを消去します。		
		while (CLASSPICKER.options.length > 0)
		{
			CLASSPICKER.options.remove(0);
		}				
		
		arClassNames.sort();
		
		for (i = 0; i < arClassNames.length; i++)		
		{			
			var oOption = document.createElement("OPTION");		
			CLASSPICKER.options.add(oOption);	
									
			oOption.innerText = dictLookup.Item(arClassNames[i]);			
			oOption.Value = i + 1;					
		}

		if (bRestoreClassSelection)		//InitDocument() 後の最初の列挙です。
		{
			RestoreClassSelection();
			bRestoreClassSelection = false;
		}
		else
		{
			//一覧の最初のクラスの選択を強制します。
			CLASSPICKER.selectedIndex = 0;			
			OnChangeSelection();	
		}			
		document.body.style.cursor = 'default';
	}
	
	catch(e)
	{
		window.external.ReportError ("例外 " + e.description + " in OnCompleted()");
	}
}

function IsExtrinsicEvent(objObject)
{
	try 
	{
		//__ExtrinsicEvent のクラスは、それ自身の親ではないので別に処理します。
		if (objObject.Path_.RelPath.toString() == "__ExtrinsicEvent")
		{
			return true;
		}
	
		arVB = new VBArray(objObject.Derivation_);
		arJS = arVB.toArray();
		
		for (i =0; i < arJS.length; i++)
		{
			if (arJS[i].toString() == "__ExtrinsicEvent")
			{
				return true;
			}
		}
		return false;
	}
	catch (e)
	{
		window.external.ReportError ("IsExtrinsicEvent() でエラー" + objObject);
		return false;
	}
		
}

function CheckBoolQualifier (obj, qualName)
{
try 
	{
		var qual = obj.Qualifiers_(qualName);	
			
		return (qual.Value);
	}
	catch(e)
	{
		//修飾子が存在しない場合、"見つかりません" が返されることに注意してください。
		//このケースは false を返します。
		return false;
	}				
}


function GetCurrentProviderName (obj)
{
//クラスに既に "プロバイダ" 修飾子の値があるかどうか確認して返してください。
//クラスに "プロバイダ" 修飾子がないか、その値が空の場合は、空の文字列が 
//返ります。
try 
	{
		var qual = obj.Qualifiers_("provider");	
					
		return (qual.Value.toString());
	}
	catch(e)
	{
		//修飾子が存在しない場合は、"見つかりません" が返されることに注意してください。
		//この場合は空の文字列を返します。
		return "";
	}				
}


function IsSystem(objObject)
{
	try 
	{
		var NameOut = objObject.Path_.RelPath;
		
			
		return (NameOut.slice(0, 2).toString() == "__");
				
	}
	catch(e)
	{
		return false;
	}				
}

function GetWMIClassInfo()
{
	try
	{
		if (WMICLASSNAME.value == "")
			return;
		
		var classObj = services.Get(WMICLASSNAME.value);
		
		if (EXTRINSIC.checked)
		{					
			// EXTRINSIC_PUT_BLOCK を作成します:
			var strExtrinsicPutBlock = "CComVariant var;\n\r";
			var strExtrPropertyDecls = "";	
			var strExtrPropertyDefs = "";
			
			var props = new Enumerator (classObj.Properties_);	
			for (; !props.atEnd(); props.moveNext() )
			{
				strExtrPropertyDecls += "extern const WCHAR * " + propPrefix + props.item().Name + ";\n\r";
				strExtrPropertyDefs += "const static WCHAR * " + propPrefix + props.item().Name +
										" = L\"" + props.item().Name + "\";\n\r";

				var vt = dictCIM2VT.Item(props.item().CIMType.toString());
				if (props.item().IsArray) {
					vt += " | VT_ARRAY";
				}			
				strExtrinsicPutBlock += "	var.ChangeType(" + vt + ");\n\r";
				strExtrinsicPutBlock += "	//var = <value>;" + arCodeComments[0] +	"\n\r";
				strExtrinsicPutBlock += "	hr = pEvtInstance->Put(" + propPrefix + props.item().Name + 
										", 0, &var, 0);\n\r";
				strExtrinsicPutBlock += "	var.Clear();\n\r\n\r";												
		
			}
			window.external.AddSymbol("EXTRINSIC_PUT_BLOCK", strExtrinsicPutBlock);
			window.external.AddSymbol("EXTR_PROPERTY_DEFINITIONS", strExtrPropertyDefs);
			window.external.AddSymbol("EXTR_PROPERTY_DECLARATIONS", strExtrPropertyDecls);
			
		}		
				
	}
	catch(e)
	{
		window.external.ReportError ("GetWMIClassInfo() でエラー:" + e);
	}
}


</script>
    </TD></TR></TBODY></TABLE>

</TD></TR></TABLE>

<SCRIPT ID="INCLUDE_SCRIPT" LANGUAGE="JSCRIPT"></SCRIPT>
<SCRIPT ID="INCLUDE_COMMON" LANGUAGE="JSCRIPT"></SCRIPT>
<SCRIPT>
	var strPath = "../../../../../";
	strPath += window.external.GetHostLocale();
	var strScriptPath = strPath + "/Script.js";
	var strCommonPath = strPath + "/Common.js";
	document.scripts("INCLUDE_SCRIPT").src = strScriptPath;
	document.scripts("INCLUDE_COMMON").src = strCommonPath;
</SCRIPT>


</BODY></HTML>
