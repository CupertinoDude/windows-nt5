<!- Copyright (c) 1999-2001 Microsoft Corporation, All Rights Reserved ->
<html>
<!-------------------------------------------------------------------------
 
	This sample illustrates the use of the WMI Scripting API within
   HTML, using VBScript.  In conjunction with the ActiveX WMI Controls,
   it displays property information for classes.
   
   NB:
   In order to create the WbemScripting.SWbemLocator control it is necessary 
   to configure the web browser not to disable controls marked unsafe for
   scripting in the appropriate security zone.

---------------------------------------------------------------------------->

<head>
<title>WMI Scripting HTML Sample - Property Browser (VBScript Version)</title>
<script LANGUAGE="VBScript">
<!--
	'Declare the Globals we will need for this sample
	Dim Locator
	Dim Service

Sub window_onload() 
	'Create the scriptable locator
	Set Locator = CreateObject ("WbemScripting.SWbemLocator")
	
	'Once we have created the Locator, we can now notify the
	'WMI Class Navigation control that may start firing events
	ClassNav.OnReadySignal ()
	
	'Hide the Property table until we have a class selected
	TableHeader.style.visibility = "hidden"
End Sub

'*****************************************************************
' This function converts the numerical CIMType code into
' a human-readable string
'*****************************************************************
Function TypeAsString (Property)
	TypeAsString = "uint32"
	
	select case Property.cimType
		Case 16
			TypeAsString = "sint8"
		Case 17
			TypeAsString = "uint8"
		Case 2
			TypeAsString = "sint16"
		Case 18
			TypeAsString = "uint16"
		Case 3
			TypeAsString = "uint32"
		Case 20
			TypeAsString = "sint64"
		Case 21
			TypeAsString = "uint64"
		Case 4
			TypeAsString = "real32"
		Case 5
			TypeAsString = "real64"
		Case 11
			TypeAsString = "boolean"
		Case 8
			TypeAsString = "string"
		Case 101
			TypeAsString = "datetime"
		Case 102
			TypeAsString = "ref"
			Set Qualifier = Property.Qualifiers_("cimtype")
			StrongRefArray = Split(Qualifier.Value,":")

			if (UBound(StrongRefArray) > 0) then
				TypeAsString = TypeAsString & " " & StrongRefArray(1)
			end if 
		Case 103
			TypeAsString = "char16"
		Case 13
			TypeAsString = "object"
			Set Qualifier = Property.Qualifiers_("cimtype")
			StrongObjArray = Split(Qualifier.Value,":")

			if (UBound(StrongObjArray) > 0) then
				TypeAsString = TypeAsString & " " & StrongObjArray(1)
			end if 
	end select

	if Property.isArray = true then
		TypeAsString = TypeAsString & " []"
	end if
	
End Function 

'*****************************************************************
' This handles the WMI ActiveX Class Navigator event that informs
' the container that a Class has been selected.  We display the
' Properties of the Class in an HTML table
'*****************************************************************
Sub ClassNav_EditExistingClass(selObj)
	on error resume next
	Dim classStr
	Dim Property
	Dim CIMClass
	
	ErrorMessage.innerText = ""
	
	' Clear the table (apart from the first title row)
	TableHeader.style.visibility = "hidden"
	while (ClassTable.rows.length > 1)
		ClassTable.deleteRow()
	wend
	
	' Extract the Class using the Scripting connection 
	' to the Namespace
	Set CIMClass = Service.Get (selObj)
	
	' Display the class name
	ClassName.innerText = CIMClass.Path_.Class
	
	' Build the property table by iterating through
	' the property collection of this class
	for each Property in CIMClass.Properties_
		Set row = ClassTable.insertRow
		row.insertCell().innerText = Property.Name
		row.insertCell().innerText = TypeAsString (Property)
		row.insertCell().innerText = Property.Origin
	next
		
	ClassTable.refresh
	TableHeader.style.visibility = "visible"
	
	if err <> 0 then
		ErrorMessage.innerText = "Error: " & Err.description & " - " & Err.source
	end if
End Sub

'*****************************************************************
' This handles the WMI ActiveX Class Navigator event that informs
' the container that a Namespace has been opened.  We make a 
' corresponding scripting connection to the same Namespace that we
' will use in the EditExistingClass event handler (above).
'*****************************************************************
Sub ClassNav_NotifyOpenNameSpace(theNameSpace)
	
	' The Class Navigator control will pass us an absolute Namespace
	' Path of the form \\<server>\<relative_namespace>. We must ensure
	' that we split off the server from the Namespace path before passing
	' to the Scripting API ConnectServer call.

	Dim Server
	Dim Namespace
	
	if Left (theNamespace, 2) = "\\" then
		' Extract Server name
		x = InStr (3, theNamespace, "\")
		
		if x <> 0 then
			Server = Mid(theNamespace, 3, x - 3)
			Namespace = Mid(theNamespace, x + 1)
		else
			Server = Mid(theNamespace, 3)
		end if 
		
	else
		Namespace = theNamespace
	end if 
	
	' Now make a scripting connection to WMI
	Set Service = Locator.ConnectServer (Server,Namespace)
	
End Sub

'*****************************************************************
' This handles the WMI ActiveX Class Navigator event that informs
' the container that a Namespace must been opened.  We delegate
' this request to the WMI ActiveX Login control.
'*****************************************************************
Sub ClassNav_GetIWbemServices(lpctstrNamespace, bUpdatePointer, lpsc, lppServices, lpbUserCancel)
	Login.GetIWbemServices lpctstrNamespace, bUpdatePointer, lpsc, lppServices, lpbUserCancel
End Sub

-->
</script>
</head>

<body LANGUAGE="javascript" onload="return window_onload()" bgColor="silver">

<p align="center"><strong><font face="Verdana" size="5">WMI ActiveX Control &amp;
Scripting Demo</font></strong> </p>

<p><font color="darkgreen" face="Verdana" size="5">Select a Class:</font> </p>

<p><!-- The WMI ActiveX Class Navigator Control --> 
<object classid="clsid:C587B673-0103-11D0-8CA2-00AA006D010A" height="304" id="ClassNav"
codebase="http://localhost/wbem/WBEMTool.cab#Version=-1,-1,-1,-1"
style="HEIGHT: 304px; LEFT: 0px; TOP: 0px; WIDTH: 808px" width="97.35%" VIEWASTEXT>
  <param name="_Version" value="65536">
  <param name="_ExtentX" value="21379">
  <param name="_ExtentY" value="8043">
  <param name="_StockProps" value="0">
</object>
<!-- The WMI ActiveX Login Control --><object classid="clsid:9C3497D6-ED98-11D0-9647-00C04FD9B15B" id="Login" width="14"
height="14" codebase="http://localhost/wbem/WBEMTool.cab#Version=-1,-1,-1,-1">
  <param name="_Version" value="65536">
  <param name="_ExtentX" value="0">
  <param name="_ExtentY" value="0">
  <param name="_StockProps" value="0">
  <param name="LoginComponent" value="ActiveXSuite">
</object>
</p>
<div ID="TableHeader" style="VISIBILITY: hidden">

<p><font color="darkgreen" face="Verdana" size="5">Property Table for <span ID="ClassName"></span></font></p>
<!-- The table used to display Property information for a selected class -->

<table ID="ClassTable" align="left" bgColor="tan" border="1" borderColor="saddlebrown"
cellPadding="1" cellSpacing="1" width="100%">
<THEAD>
  <tr>
    <td align="middle"><em>Property Name</em></td>
    <td align="middle"><em>Property Type</em></td>
    <td align="middle"><em>Property Origin</em></td>
  </tr>
</THEAD>
<TBODY>
</TBODY>
</table>
</div>
</body>
</html>
