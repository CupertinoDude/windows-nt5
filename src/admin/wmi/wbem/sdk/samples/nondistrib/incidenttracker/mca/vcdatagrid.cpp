// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

//

// Copyright (c) 1997-2001 Microsoft Corporation, All Rights Reserved
//
// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "vcdatagrid.h"


/////////////////////////////////////////////////////////////////////////////
// CVcDataGrid properties

/////////////////////////////////////////////////////////////////////////////
// CVcDataGrid operations

short CVcDataGrid::GetColumnCount()
{
	short result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
	return result;
}

void CVcDataGrid::SetColumnCount(short nNewValue)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

short CVcDataGrid::GetColumnLabelCount()
{
	short result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
	return result;
}

void CVcDataGrid::SetColumnLabelCount(short nNewValue)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

short CVcDataGrid::GetRowLabelCount()
{
	short result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
	return result;
}

void CVcDataGrid::SetRowLabelCount(short nNewValue)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

short CVcDataGrid::GetRowCount()
{
	short result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
	return result;
}

void CVcDataGrid::SetRowCount(short nNewValue)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

void CVcDataGrid::DeleteColumns(short Column, short Count)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Column, Count);
}

void CVcDataGrid::InsertColumns(short Column, short Count)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Column, Count);
}

void CVcDataGrid::DeleteColumnLabels(short LabelIndex, short Count)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 LabelIndex, Count);
}

void CVcDataGrid::InsertColumnLabels(short LabelIndex, short Count)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 LabelIndex, Count);
}

void CVcDataGrid::DeleteRows(short Row, short Count)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Row, Count);
}

void CVcDataGrid::InsertRows(short Row, short Count)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0xa, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Row, Count);
}

void CVcDataGrid::DeleteRowLabels(short LabelIndex, short Count)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0xb, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 LabelIndex, Count);
}

void CVcDataGrid::InsertRowLabels(short LabelIndex, short Count)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 LabelIndex, Count);
}

void CVcDataGrid::RandomDataFill()
{
	InvokeHelper(0xd, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CVcDataGrid::SetSize(short RowLabelCount, short ColumnLabelCount, short DataRowCount, short DataColumnCount)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0xe, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 RowLabelCount, ColumnLabelCount, DataRowCount, DataColumnCount);
}

void CVcDataGrid::InitializeLabels()
{
	InvokeHelper(0xf, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CVcDataGrid::RandomFillColumns(short Column, short Count)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x10, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Column, Count);
}

void CVcDataGrid::RandomFillRows(short Row, short Count)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x11, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Row, Count);
}

void CVcDataGrid::MoveData(short Top, short Left, short Bottom, short Right, short OverOffset, short DownOffset)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x12, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Top, Left, Bottom, Right, OverOffset, DownOffset);
}

void CVcDataGrid::GetData(short Row, short Column, double* DataPoint, short* nullFlag)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_PR8 VTS_PI2;
	InvokeHelper(0x13, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Row, Column, DataPoint, nullFlag);
}

void CVcDataGrid::SetData(short Row, short Column, double DataPoint, short nullFlag)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_R8 VTS_I2;
	InvokeHelper(0x14, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Row, Column, DataPoint, nullFlag);
}

CString CVcDataGrid::GetColumnLabel(short Column, short LabelIndex)
{
	CString result;
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x15, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		Column, LabelIndex);
	return result;
}

void CVcDataGrid::SetColumnLabel(short Column, short LabelIndex, LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_BSTR;
	InvokeHelper(0x15, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Column, LabelIndex, lpszNewValue);
}

CString CVcDataGrid::GetCompositeColumnLabel(short Column)
{
	CString result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x16, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		Column);
	return result;
}

CString CVcDataGrid::GetCompositeRowLabel(short Row)
{
	CString result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x17, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		Row);
	return result;
}

CString CVcDataGrid::GetRowLabel(short Row, short LabelIndex)
{
	CString result;
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x18, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		Row, LabelIndex);
	return result;
}

void CVcDataGrid::SetRowLabel(short Row, short LabelIndex, LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_BSTR;
	InvokeHelper(0x18, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Row, LabelIndex, lpszNewValue);
}
