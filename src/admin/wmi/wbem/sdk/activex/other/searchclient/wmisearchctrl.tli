// Created by Microsoft (R) C/C++ Compiler Version 12.00.8168.0 (f616ff50).
//
// WMISearchCtrl.tli
//
// Wrapper implementations for Win32 type library ..\WMISearchCtrl\WMISearchCtrl.tlb
// compiler-generated file created 06/28/99 at 18:20:00 - DO NOT EDIT!

#pragma once

//
// interface IEnumWbemClassObject wrapper method implementations
//

inline HRESULT IEnumWbemClassObject::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEnumWbemClassObject::Next ( long lTimeout, unsigned long uCount, struct IWbemClassObject * * apObjects, unsigned long * puReturned ) {
    HRESULT _hr = raw_Next(lTimeout, uCount, apObjects, puReturned);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEnumWbemClassObject::NextAsync ( unsigned long uCount, struct IWbemObjectSink * pSink ) {
    HRESULT _hr = raw_NextAsync(uCount, pSink);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEnumWbemClassObject::Clone ( struct IEnumWbemClassObject * * ppEnum ) {
    HRESULT _hr = raw_Clone(ppEnum);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IEnumWbemClassObject::Skip ( long lTimeout, unsigned long nCount ) {
    HRESULT _hr = raw_Skip(lTimeout, nCount);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWbemClassObject wrapper method implementations
//

inline HRESULT IWbemClassObject::GetQualifierSet ( struct IWbemQualifierSet * * ppQualSet ) {
    HRESULT _hr = raw_GetQualifierSet(ppQualSet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWbemClassObject::Get ( LPWSTR wszName, long lFlags, VARIANT * pVal, long * pType, long * plFlavor ) {
    HRESULT _hr = raw_Get(wszName, lFlags, pVal, pType, plFlavor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWbemClassObject::Put ( LPWSTR wszName, long lFlags, VARIANT * pVal, long Type ) {
    HRESULT _hr = raw_Put(wszName, lFlags, pVal, Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWbemClassObject::Delete ( LPWSTR wszName ) {
    HRESULT _hr = raw_Delete(wszName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWbemClassObject::GetNames ( LPWSTR wszQualifierName, long lFlags, VARIANT * pQualifierVal, SAFEARRAY * * pNames ) {
    HRESULT _hr = raw_GetNames(wszQualifierName, lFlags, pQualifierVal, pNames);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWbemClassObject::BeginEnumeration ( long lEnumFlags ) {
    HRESULT _hr = raw_BeginEnumeration(lEnumFlags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWbemClassObject::Next ( long lFlags, BSTR * strName, VARIANT * pVal, long * pType, long * plFlavor ) {
    HRESULT _hr = raw_Next(lFlags, strName, pVal, pType, plFlavor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWbemClassObject::EndEnumeration ( ) {
    HRESULT _hr = raw_EndEnumeration();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWbemClassObject::GetPropertyQualifierSet ( LPWSTR wszProperty, struct IWbemQualifierSet * * ppQualSet ) {
    HRESULT _hr = raw_GetPropertyQualifierSet(wszProperty, ppQualSet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWbemClassObject::Clone ( struct IWbemClassObject * * ppCopy ) {
    HRESULT _hr = raw_Clone(ppCopy);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWbemClassObject::GetObjectText ( long lFlags, BSTR * pstrObjectText ) {
    HRESULT _hr = raw_GetObjectText(lFlags, pstrObjectText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWbemClassObject::SpawnDerivedClass ( long lFlags, struct IWbemClassObject * * ppNewClass ) {
    HRESULT _hr = raw_SpawnDerivedClass(lFlags, ppNewClass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWbemClassObject::SpawnInstance ( long lFlags, struct IWbemClassObject * * ppNewInstance ) {
    HRESULT _hr = raw_SpawnInstance(lFlags, ppNewInstance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWbemClassObject::CompareTo ( long lFlags, struct IWbemClassObject * pCompareTo ) {
    HRESULT _hr = raw_CompareTo(lFlags, pCompareTo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWbemClassObject::GetPropertyOrigin ( LPWSTR wszName, BSTR * pstrClassName ) {
    HRESULT _hr = raw_GetPropertyOrigin(wszName, pstrClassName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWbemClassObject::InheritsFrom ( LPWSTR strAncestor ) {
    HRESULT _hr = raw_InheritsFrom(strAncestor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWbemClassObject::GetMethod ( LPWSTR wszName, long lFlags, struct IWbemClassObject * * ppInSignature, struct IWbemClassObject * * ppOutSignature ) {
    HRESULT _hr = raw_GetMethod(wszName, lFlags, ppInSignature, ppOutSignature);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWbemClassObject::PutMethod ( LPWSTR wszName, long lFlags, struct IWbemClassObject * pInSignature, struct IWbemClassObject * pOutSignature ) {
    HRESULT _hr = raw_PutMethod(wszName, lFlags, pInSignature, pOutSignature);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWbemClassObject::DeleteMethod ( LPWSTR wszName ) {
    HRESULT _hr = raw_DeleteMethod(wszName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWbemClassObject::BeginMethodEnumeration ( long lEnumFlags ) {
    HRESULT _hr = raw_BeginMethodEnumeration(lEnumFlags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWbemClassObject::NextMethod ( long lFlags, BSTR * pstrName, struct IWbemClassObject * * ppInSignature, struct IWbemClassObject * * ppOutSignature ) {
    HRESULT _hr = raw_NextMethod(lFlags, pstrName, ppInSignature, ppOutSignature);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWbemClassObject::EndMethodEnumeration ( ) {
    HRESULT _hr = raw_EndMethodEnumeration();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWbemClassObject::GetMethodQualifierSet ( LPWSTR wszMethod, struct IWbemQualifierSet * * ppQualSet ) {
    HRESULT _hr = raw_GetMethodQualifierSet(wszMethod, ppQualSet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWbemClassObject::GetMethodOrigin ( LPWSTR wszMethodName, BSTR * pstrClassName ) {
    HRESULT _hr = raw_GetMethodOrigin(wszMethodName, pstrClassName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWbemQualifierSet wrapper method implementations
//

inline HRESULT IWbemQualifierSet::Get ( LPWSTR wszName, long lFlags, VARIANT * pVal, long * plFlavor ) {
    HRESULT _hr = raw_Get(wszName, lFlags, pVal, plFlavor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWbemQualifierSet::Put ( LPWSTR wszName, VARIANT * pVal, long lFlavor ) {
    HRESULT _hr = raw_Put(wszName, pVal, lFlavor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWbemQualifierSet::Delete ( LPWSTR wszName ) {
    HRESULT _hr = raw_Delete(wszName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWbemQualifierSet::GetNames ( long lFlags, SAFEARRAY * * pNames ) {
    HRESULT _hr = raw_GetNames(lFlags, pNames);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWbemQualifierSet::BeginEnumeration ( long lFlags ) {
    HRESULT _hr = raw_BeginEnumeration(lFlags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWbemQualifierSet::Next ( long lFlags, BSTR * pstrName, VARIANT * pVal, long * plFlavor ) {
    HRESULT _hr = raw_Next(lFlags, pstrName, pVal, plFlavor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWbemQualifierSet::EndEnumeration ( ) {
    HRESULT _hr = raw_EndEnumeration();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWbemObjectSink wrapper method implementations
//

inline HRESULT IWbemObjectSink::Indicate ( long lObjectCount, struct IWbemClassObject * * apObjArray ) {
    HRESULT _hr = raw_Indicate(lObjectCount, apObjArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWbemObjectSink::SetStatus ( long lFlags, HRESULT hResult, _bstr_t strParam, struct IWbemClassObject * pObjParam ) {
    HRESULT _hr = raw_SetStatus(lFlags, hResult, strParam, pObjParam);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ISeeker wrapper method implementations
//

inline HRESULT ISeeker::Search ( struct IWbemServices * pSvc, long lFlags, _bstr_t pattern, struct IEnumWbemClassObject * * pEnumResult ) {
    HRESULT _hr = raw_Search(pSvc, lFlags, pattern, pEnumResult);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWbemServices wrapper method implementations
//

inline HRESULT IWbemServices::OpenNamespace ( _bstr_t strNamespace, long lFlags, struct IWbemContext * pCtx, struct IWbemServices * * ppWorkingNamespace, struct IWbemCallResult * * ppResult ) {
    HRESULT _hr = raw_OpenNamespace(strNamespace, lFlags, pCtx, ppWorkingNamespace, ppResult);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWbemServices::CancelAsyncCall ( struct IWbemObjectSink * pSink ) {
    HRESULT _hr = raw_CancelAsyncCall(pSink);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWbemServices::QueryObjectSink ( long lFlags, struct IWbemObjectSink * * ppResponseHandler ) {
    HRESULT _hr = raw_QueryObjectSink(lFlags, ppResponseHandler);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWbemServices::GetObject ( _bstr_t strObjectPath, long lFlags, struct IWbemContext * pCtx, struct IWbemClassObject * * ppObject, struct IWbemCallResult * * ppCallResult ) {
    HRESULT _hr = raw_GetObject(strObjectPath, lFlags, pCtx, ppObject, ppCallResult);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWbemServices::GetObjectAsync ( _bstr_t strObjectPath, long lFlags, struct IWbemContext * pCtx, struct IWbemObjectSink * pResponseHandler ) {
    HRESULT _hr = raw_GetObjectAsync(strObjectPath, lFlags, pCtx, pResponseHandler);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWbemServices::PutClass ( struct IWbemClassObject * pObject, long lFlags, struct IWbemContext * pCtx, struct IWbemCallResult * * ppCallResult ) {
    HRESULT _hr = raw_PutClass(pObject, lFlags, pCtx, ppCallResult);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWbemServices::PutClassAsync ( struct IWbemClassObject * pObject, long lFlags, struct IWbemContext * pCtx, struct IWbemObjectSink * pResponseHandler ) {
    HRESULT _hr = raw_PutClassAsync(pObject, lFlags, pCtx, pResponseHandler);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWbemServices::DeleteClass ( _bstr_t strClass, long lFlags, struct IWbemContext * pCtx, struct IWbemCallResult * * ppCallResult ) {
    HRESULT _hr = raw_DeleteClass(strClass, lFlags, pCtx, ppCallResult);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWbemServices::DeleteClassAsync ( _bstr_t strClass, long lFlags, struct IWbemContext * pCtx, struct IWbemObjectSink * pResponseHandler ) {
    HRESULT _hr = raw_DeleteClassAsync(strClass, lFlags, pCtx, pResponseHandler);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWbemServices::CreateClassEnum ( _bstr_t strSuperclass, long lFlags, struct IWbemContext * pCtx, struct IEnumWbemClassObject * * ppEnum ) {
    HRESULT _hr = raw_CreateClassEnum(strSuperclass, lFlags, pCtx, ppEnum);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWbemServices::CreateClassEnumAsync ( _bstr_t strSuperclass, long lFlags, struct IWbemContext * pCtx, struct IWbemObjectSink * pResponseHandler ) {
    HRESULT _hr = raw_CreateClassEnumAsync(strSuperclass, lFlags, pCtx, pResponseHandler);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWbemServices::PutInstance ( struct IWbemClassObject * pInst, long lFlags, struct IWbemContext * pCtx, struct IWbemCallResult * * ppCallResult ) {
    HRESULT _hr = raw_PutInstance(pInst, lFlags, pCtx, ppCallResult);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWbemServices::PutInstanceAsync ( struct IWbemClassObject * pInst, long lFlags, struct IWbemContext * pCtx, struct IWbemObjectSink * pResponseHandler ) {
    HRESULT _hr = raw_PutInstanceAsync(pInst, lFlags, pCtx, pResponseHandler);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWbemServices::DeleteInstance ( _bstr_t strObjectPath, long lFlags, struct IWbemContext * pCtx, struct IWbemCallResult * * ppCallResult ) {
    HRESULT _hr = raw_DeleteInstance(strObjectPath, lFlags, pCtx, ppCallResult);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWbemServices::DeleteInstanceAsync ( _bstr_t strObjectPath, long lFlags, struct IWbemContext * pCtx, struct IWbemObjectSink * pResponseHandler ) {
    HRESULT _hr = raw_DeleteInstanceAsync(strObjectPath, lFlags, pCtx, pResponseHandler);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWbemServices::CreateInstanceEnum ( _bstr_t strClass, long lFlags, struct IWbemContext * pCtx, struct IEnumWbemClassObject * * ppEnum ) {
    HRESULT _hr = raw_CreateInstanceEnum(strClass, lFlags, pCtx, ppEnum);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWbemServices::CreateInstanceEnumAsync ( _bstr_t strClass, long lFlags, struct IWbemContext * pCtx, struct IWbemObjectSink * pResponseHandler ) {
    HRESULT _hr = raw_CreateInstanceEnumAsync(strClass, lFlags, pCtx, pResponseHandler);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWbemServices::ExecQuery ( _bstr_t strQueryLanguage, _bstr_t strQuery, long lFlags, struct IWbemContext * pCtx, struct IEnumWbemClassObject * * ppEnum ) {
    HRESULT _hr = raw_ExecQuery(strQueryLanguage, strQuery, lFlags, pCtx, ppEnum);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWbemServices::ExecQueryAsync ( _bstr_t strQueryLanguage, _bstr_t strQuery, long lFlags, struct IWbemContext * pCtx, struct IWbemObjectSink * pResponseHandler ) {
    HRESULT _hr = raw_ExecQueryAsync(strQueryLanguage, strQuery, lFlags, pCtx, pResponseHandler);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWbemServices::ExecNotificationQuery ( _bstr_t strQueryLanguage, _bstr_t strQuery, long lFlags, struct IWbemContext * pCtx, struct IEnumWbemClassObject * * ppEnum ) {
    HRESULT _hr = raw_ExecNotificationQuery(strQueryLanguage, strQuery, lFlags, pCtx, ppEnum);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWbemServices::ExecNotificationQueryAsync ( _bstr_t strQueryLanguage, _bstr_t strQuery, long lFlags, struct IWbemContext * pCtx, struct IWbemObjectSink * pResponseHandler ) {
    HRESULT _hr = raw_ExecNotificationQueryAsync(strQueryLanguage, strQuery, lFlags, pCtx, pResponseHandler);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWbemServices::ExecMethod ( _bstr_t strObjectPath, _bstr_t strMethodName, long lFlags, struct IWbemContext * pCtx, struct IWbemClassObject * pInParams, struct IWbemClassObject * * ppOutParams, struct IWbemCallResult * * ppCallResult ) {
    HRESULT _hr = raw_ExecMethod(strObjectPath, strMethodName, lFlags, pCtx, pInParams, ppOutParams, ppCallResult);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWbemServices::ExecMethodAsync ( _bstr_t strObjectPath, _bstr_t strMethodName, long lFlags, struct IWbemContext * pCtx, struct IWbemClassObject * pInParams, struct IWbemObjectSink * pResponseHandler ) {
    HRESULT _hr = raw_ExecMethodAsync(strObjectPath, strMethodName, lFlags, pCtx, pInParams, pResponseHandler);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWbemContext wrapper method implementations
//

inline HRESULT IWbemContext::Clone ( struct IWbemContext * * ppNewCopy ) {
    HRESULT _hr = raw_Clone(ppNewCopy);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWbemContext::GetNames ( long lFlags, SAFEARRAY * * pNames ) {
    HRESULT _hr = raw_GetNames(lFlags, pNames);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWbemContext::BeginEnumeration ( long lFlags ) {
    HRESULT _hr = raw_BeginEnumeration(lFlags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWbemContext::Next ( long lFlags, BSTR * pstrName, VARIANT * pValue ) {
    HRESULT _hr = raw_Next(lFlags, pstrName, pValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWbemContext::EndEnumeration ( ) {
    HRESULT _hr = raw_EndEnumeration();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWbemContext::SetValue ( LPWSTR wszName, long lFlags, VARIANT * pValue ) {
    HRESULT _hr = raw_SetValue(wszName, lFlags, pValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWbemContext::GetValue ( LPWSTR wszName, long lFlags, VARIANT * pValue ) {
    HRESULT _hr = raw_GetValue(wszName, lFlags, pValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWbemContext::DeleteValue ( LPWSTR wszName, long lFlags ) {
    HRESULT _hr = raw_DeleteValue(wszName, lFlags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWbemContext::DeleteAll ( ) {
    HRESULT _hr = raw_DeleteAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IWbemCallResult wrapper method implementations
//

inline HRESULT IWbemCallResult::GetResultObject ( long lTimeout, struct IWbemClassObject * * ppResultObject ) {
    HRESULT _hr = raw_GetResultObject(lTimeout, ppResultObject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWbemCallResult::GetResultString ( long lTimeout, BSTR * pstrResultString ) {
    HRESULT _hr = raw_GetResultString(lTimeout, pstrResultString);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWbemCallResult::GetResultServices ( long lTimeout, struct IWbemServices * * ppServices ) {
    HRESULT _hr = raw_GetResultServices(lTimeout, ppServices);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IWbemCallResult::GetCallStatus ( long lTimeout, long * plStatus ) {
    HRESULT _hr = raw_GetCallStatus(lTimeout, plStatus);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface __CreateEnumWbemClassObject wrapper method implementations
//

inline HRESULT __CreateEnumWbemClassObject::Init ( ) {
    HRESULT _hr = raw_Init();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT __CreateEnumWbemClassObject::GetCount ( unsigned long * pCount ) {
    HRESULT _hr = raw_GetCount(pCount);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT __CreateEnumWbemClassObject::AddItem ( struct IWbemClassObject * pObj ) {
    HRESULT _hr = raw_AddItem(pObj);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}
