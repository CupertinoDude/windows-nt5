//

// Copyright (c) 1997-2001 Microsoft Corporation, All Rights Reserved
//
#ifndef SIMC_ERROR_MESSAGE_H
#define SIC_ERROR_MESSAGE_H



// Models an error message generated by the various components of
// the SNMP Compiler
class SIMCErrorMessage
{
		// The text of the message
		char *_message;

		char *_inputStreamName; // Need not be a file name. Could be anything that the 
								// creator of this error message
								// thinks appropriate. Like "Standard Input".
		// The severity level, both a number as well as a
		// string representation are used. Example
		// 1 - "Fatal"
		// 2 - "Warning"
		char *_severityString;
		int _severityLevel;


		// Column and line numbers
		long _columnNumber;
		long _lineNumber;
		// An indication whether column and line numbers are valid in this
		// message. Example, for global messages, this may be true
		BOOL _lineAndColumnValid;

		// A unique ID for the message. May be used in documenting
		// errors.
		int _errorId;

	public:
		// Construct an empty error message
		SIMCErrorMessage()
		{
			_message = _inputStreamName = _severityString = NULL;
			_lineNumber = _columnNumber = _severityLevel = _errorId = 0;
			_lineAndColumnValid = TRUE;
		}

		// Construct a loaded error message
		SIMCErrorMessage(const char * const inputStreamName, 
				const char * const message,
				const char * const severityString,
				int errorId,
				int severityLevel,
				long lineNumber = 0, long columnNumber = 0 );
				
		// And a copy constructor)
		SIMCErrorMessage (const SIMCErrorMessage& rhs	);

		// Assigment of error messages
		const SIMCErrorMessage& operator = (const SIMCErrorMessage&);

		// Checking equality of errors
		BOOL operator == (const SIMCErrorMessage& rhs) const
		{
			return  _lineNumber == rhs._lineNumber &&
					_columnNumber == rhs._columnNumber &&
					_severityLevel == rhs._severityLevel &&
					_errorId == rhs._errorId &&
					strcmp(_severityString, rhs._severityString) == 0 &&
					strcmp(_message, rhs._message) == 0 &&
					strcmp(_inputStreamName, rhs._inputStreamName) == 0 ;
		}

		virtual ~SIMCErrorMessage();
		
		// Various get and set functions
		const char * GetMessage() const
		{
			return _message;
		}
		const char *GetInputStreamName() const
		{
			return _inputStreamName;
		}
		const char *GetSeverityString() const
		{
			return _severityString;
		}
		long GetLineNumber() const
		{
			return _lineNumber;
		}
		long GetColumnNumber() const
		{
			return _columnNumber;
		}

		int GetSeverityLevel() const
		{
			return _severityLevel;
		}

		int GetErrorId() const
		{
			return _errorId;
		}

		BOOL SetMessage( const char * const message);
		BOOL SetInputStreamName ( const char * const inputStreamName);
		BOOL SetSeverityString ( const char * const severityString);
		void SetLineNumber( const long lineNumber)
		{
			_lineNumber = lineNumber;
		}

		void SetColumnNumber( const long columnNumber)
		{
			_columnNumber = columnNumber;
		}

		void SetSeverityLevel( const int severityLevel)
		{
			_severityLevel = severityLevel;
		}

		void SetErrorId( const int errorId)
		{
			_errorId = errorId;
		}
	 
		void SetLineAndColumnValidity(BOOL value)
		{
			_lineAndColumnValid =  value;
		}

		// And a default output of the error message
		friend ostream& operator << 
			( ostream& outStream, const SIMCErrorMessage& errorMessage) ;
};

#endif // SIMC_ERROR_MESSAGE_H

