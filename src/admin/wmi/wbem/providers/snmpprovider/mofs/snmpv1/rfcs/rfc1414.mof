// Copyright (c) 1997-2001 Microsoft Corporation, All Rights Reserved
//	MOF Generated for module "RFC1414-MIB" by smi2smir version 1.10.635.0000
qualifier write:ToInstance ToSubClass;
qualifier read:ToInstance ToSubClass;
qualifier provider:ToInstance ToSubClass;
qualifier singleton:ToInstance ToSubClass;
qualifier dynamic:ToInstance ToSubClass;
qualifier textual_convention:ToInstance ToSubClass;
qualifier object_identifier:ToInstance ToSubClass;
qualifier encoding:ToInstance ToSubClass;
qualifier object_syntax:ToInstance ToSubClass;
qualifier status:ToInstance ToSubClass;
qualifier fixed_length:ToInstance ToSubClass;
qualifier variable_length:ToInstance ToSubClass;
qualifier variable_value:ToInstance ToSubClass;
qualifier bits:ToInstance ToSubClass;
qualifier key_order:ToInstance ToSubClass;
qualifier enumeration:ToInstance ToSubClass;
qualifier bits:ToInstance ToSubClass;
qualifier description:ToInstance ToSubClass;
qualifier display_hint:ToInstance ToSubClass;
qualifier defval:ToInstance ToSubClass;
qualifier units:ToInstance ToSubClass;
qualifier reference:ToInstance ToSubClass;
qualifier virtual_key:ToInstance ToSubClass;
qualifier rowstatus:ToInstance ToSubClass;
qualifier module_name:ToInstance ToSubClass;
qualifier module_imports:ToInstance ToSubClass;
qualifier group_objectid:ToInstance ToSubClass;

[abstract]
class SnmpMacro
{
};

[abstract]
class SnmpObjectType:SnmpMacro
{
};

class SnmpNotifyStatus:__ExtendedStatus
{
[write] sint32 SnmpStatusCode;
[write] string Description;
};

[description("A table containing user information for TCP\n                      connections.\n\n                      Note that this table contains entries for all TCP\n                      connections on a managed system.  The\n                      corresponding instance of tcpConnState (defined in\n                      MIB-II) indicates the state of a particular\n                      connection.\nUser information about a particular TCP\n                      connection."), module_name("RFC1414-MIB"), group_objectid("1.3.6.1.2.1.24.1"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_RFC1414_MIB_identTable : SnmpObjectType
{
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("OCTETSTRING"), variable_length("0..40"), object_identifier("1.3.6.1.2.1.24.1.1.1.2"), read, description("Indicates the type of operating system in use.\n                      In addition to identifying an operating system,\n                      each assignment made for this purpose also\n                      (implicitly) identifies the textual format and\n                      maximum size of the corresponding identUserid and\n                      identMisc objects.\n\n                      The legal values for the `indentOpSys' strings\n                      are those listed in the SYSTEM NAMES section of\n                      the most recent edition of the ASSIGNED NUMBERS\n                      RFC [8]."), status("mandatory")] string identOpSys;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("OCTETSTRING"), variable_length("0..255"), object_identifier("1.3.6.1.2.1.24.1.1.1.4"), read, description("Indicates the user's identity.  Interpretation of\n                      this object requires examination of the\n                      corresponding value of the identOpSys and\n                      identCharset objects."), status("mandatory")] string identUserid;
	[textual_convention("EnumeratedINTEGER"), enumeration("noError(1),unknownError(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.24.1.1.1.1"), read, description("Indicates whether user information for the\n                      associated TCP connection can be determined.  A\n                      value of `noError(1)' indicates that user\n                      information is available.  A value of\n                      `unknownError(2)' indicates that user information\n                      is not available."), status("mandatory")] string identStatus;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("OCTETSTRING"), variable_length("0..40"), object_identifier("1.3.6.1.2.1.24.1.1.1.3"), read, description("Indicates the repertoire of the corresponding\n                      identUserid and identMisc objects.\n\n                      The legal values for the `identCharset' strings\n                      are those listed in the CHARACTER SET section of\n                      the most recent edition of the ASSIGNED NUMBERS\n                      RFC [8]."), status("mandatory")] string identCharset;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("OCTETSTRING"), variable_length("0..255"), object_identifier("1.3.6.1.2.1.24.1.1.1.5"), read, description("Indicates miscellaneous information about the\n                      user.  Interpretation of this object requires\n                      examination of the corresponding value of the\n                      identOpSys and identCharset objects."), status("mandatory")] string identMisc;
	[textual_convention("IpAddress"), encoding("IpAddress"), object_syntax("IpAddress"), object_identifier("1.3.6.1.2.1.6.13.1.2"), read, description("The local IP address for this TCP connection.  In\n                      the case of a connection in the listen state which\n                      is willing to accept connections for any IP\n                      interface associated with the node, the value\n                      0.0.0.0 is used."), status("mandatory"), virtual_key, key, key_order(1)] string tcpConnLocalAddress;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..65535"), object_identifier("1.3.6.1.2.1.6.13.1.3"), read, description("The local port number for this TCP connection."), status("mandatory"), virtual_key, key, key_order(2)] sint32 tcpConnLocalPort;
	[textual_convention("IpAddress"), encoding("IpAddress"), object_syntax("IpAddress"), object_identifier("1.3.6.1.2.1.6.13.1.4"), read, description("The remote IP address for this TCP connection."), status("mandatory"), virtual_key, key, key_order(3)] string tcpConnRemAddress;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..65535"), object_identifier("1.3.6.1.2.1.6.13.1.5"), read, description("The remote port number for this TCP connection."), status("mandatory"), virtual_key, key, key_order(4)] sint32 tcpConnRemPort;
};

