// Copyright (c) 1997-2001 Microsoft Corporation, All Rights Reserved
//	MOF Generated for module "WINS-MIB" by smi2smir version 1.00.456.0000
qualifier textual_convention:ToInstance ToSubClass;
qualifier object_identifier:ToInstance ToSubClass;
qualifier encoding:ToInstance ToSubClass;
qualifier object_syntax:ToInstance ToSubClass;
qualifier status:ToInstance ToSubClass;
qualifier fixed_length:ToInstance ToSubClass;
qualifier variable_length:ToInstance ToSubClass;
qualifier variable_value:ToInstance ToSubClass;
qualifier bits:ToInstance ToSubClass;
qualifier enumeration:ToInstance ToSubClass;
qualifier bits:ToInstance ToSubClass;
qualifier description:ToInstance ToSubClass;
qualifier display_hint:ToInstance ToSubClass;
qualifier defval:ToInstance ToSubClass;
qualifier units:ToInstance ToSubClass;
qualifier reference:ToInstance ToSubClass;
qualifier virtual_key:ToInstance ToSubClass;
qualifier rowstatus:ToInstance ToSubClass;
qualifier module_name:ToInstance ToSubClass;
qualifier module_imports:ToInstance ToSubClass;
qualifier group_objectid:ToInstance ToSubClass;

[abstract]
class SnmpMacro
{
};

[abstract]
class SnmpObjectType:SnmpMacro
{
};

class SnmpNotifyStatus:__ExtendedStatus
{
[write] sint32 SnmpStatusCode;
[write] string Description;
};

[description(""), module_name("WINS-MIB"), singleton, group_objectid("1.3.6.1.4.1.311.1.2.2"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_WINS_MIB_pull : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.4.1.311.1.2.2.1"), read, write, description("This variable indicates whether pull should be\n\t\t\tdone at WINS invocation and at reconfiguration.\n\t\t\tIf any pull group's mib variable is set, that\n\t\t\tconstitutes reconfiguration"), status("mandatory")] sint32 pullInitTime = 0;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.4.1.311.1.2.2.2"), read, write, description("This variable gives the retry count in\n\t\t\tcase of comm failure when doing pull replication.\n\t\t\tThis is the max. number of retries that will be\n\t\t\tdone at the interval specified for the Partner\n\t\t\tbefore WINS will stop for a certain number (canned) of\n\t\t\treplication time intervals before starting again."), status("mandatory")] sint32 pullCommRetryCount = 0;
};
[description("A list of Partners with which pull replication needs\n\t\t       to be done\nThis is the row corresponding to a partner"), module_name("WINS-MIB"), group_objectid("1.3.6.1.4.1.311.1.2.2"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_WINS_MIB_pullPnrTable : SnmpObjectType
{
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.4.1.311.1.2.2.3.1.6"), read, description("The number of times replication was unsuccessful with\n\t\t   the WINS due to comm. failure (after invocation or reset \n\t\t   of counters"), status("mandatory")] uint32 pullPnrNoOfCommFails = 0;
	[textual_convention("IpAddress"), encoding("IpAddress"), object_syntax("IpAddress"), object_identifier("1.3.6.1.4.1.311.1.2.2.3.1.1"), read, write, description("This is the address of the remote WINS partner"), status("mandatory"), key, key_order(1)] string pullPnrAdd = "0.0.0.0";
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.4.1.311.1.2.2.3.1.7"), read, description("The low word of the highest vers. no found in records\n\t\t   owned by this WINS."), status("mandatory")] uint32 pullPnrVersNoLowWord = 0;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.4.1.311.1.2.2.3.1.8"), read, description("The high word of the highest vers. no found in records\n\t\t   owned by this WINS."), status("mandatory")] uint32 pullPnrVersNoHighWord = 0;
	[textual_convention("DisplayString"), encoding("OCTETSTRING"), object_syntax("DisplayString"), display_hint("255a"), object_identifier("1.3.6.1.4.1.311.1.2.2.3.1.2"), read, write, description("This variable gives the specific time at which \n\t\t\t pull replication should occur"), status("mandatory")] string pullPnrSpTime = "";
	[textual_convention("EnumeratedINTEGER"), enumeration("low(0),high(1)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.4.1.311.1.2.2.3.1.4"), read, write, description("This is the precedence to be given to members of \n\t\t   the special group pulled from the WINS. Note:\n\t\t   the precedence of locally registered members of a \n\t\t   special group is more than any replicas pulled in"), status("mandatory")] string pullPnrMemberPrec = "low";
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.4.1.311.1.2.2.3.1.5"), read, description("The number of times replication was successful with\n\t\t   the WINS after invocation or reset of counters"), status("mandatory")] uint32 pullPnrNoOfSuccRpls = 0;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.4.1.311.1.2.2.3.1.3"), read, write, description("This variable gives the time interval for \n\t\t\tpull replication"), status("mandatory")] sint32 pullPnrTimeInterval = 0;
};
[description(""), module_name("WINS-MIB"), singleton, group_objectid("1.3.6.1.4.1.311.1.2.1"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_WINS_MIB_par : SnmpObjectType
{
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.4.1.311.1.2.1.23"), read, write, description("This variable indicates the low word of the\n\t\t\tversion counter that WINS should start with"), status("mandatory")] uint32 parVersCounterStartValLowWord = 0;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.4.1.311.1.2.1.21"), read, write, description("This variable indicates the tombstone timeout.\n\t\t\t Unit is in milliseconds"), status("mandatory")] sint32 parTombstoneTimeout = 0;
	[textual_convention("DisplayString"), encoding("OCTETSTRING"), object_syntax("DisplayString"), variable_length("1..30"), object_identifier("1.3.6.1.4.1.311.1.2.1.5"), read, description("Most recent data and time at which revalidation of\n\t\t       old active replicas took place"), status("mandatory")] string parLastVerifyScvTime = "";
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.4.1.311.1.2.1.24"), read, write, description("This variable indicates the High word of the\n\t\t\tversion counter that WINS should start with"), status("mandatory")] uint32 parVersCounterStartValHighWord = 0;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.4.1.311.1.2.1.20"), read, write, description("This variable indicates the tombstone interval,\n\t\t\t Unit is in milliseconds"), status("mandatory")] sint32 parTombstoneInterval = 0;
	[textual_convention("EnumeratedINTEGER"), enumeration("no(0),yes(1)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.4.1.311.1.2.1.31"), read, write, description("This variable specifies whether static records\n                         in the wins database should be treated as\n                         dynamic records during conflicts with new\n                         dynamic registrations."), status("mandatory")] string parMigrateOn = "no";
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.4.1.311.1.2.1.16"), read, description("This variable indicates the number of\n\t\t\t releases that failed"), status("mandatory")] uint32 parWinsTotalNoOfFailRel = 0;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.4.1.311.1.2.1.15"), read, description("This variable indicates the number of\n\t\t\t releases that succeeded"), status("mandatory")] uint32 parWinsTotalNoOfSuccRel = 0;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.4.1.311.1.2.1.13"), read, description("This variable indicates the number of\n\t\t\t queries received"), status("mandatory")] uint32 parWinsTotalNoOfQueries = 0;
	[textual_convention("DisplayString"), encoding("OCTETSTRING"), object_syntax("DisplayString"), variable_length("1..30"), object_identifier("1.3.6.1.4.1.311.1.2.1.11"), read, description("Most recent data and time at which the local counters\n\t\t       were initialized to zero"), status("mandatory")] string parLastCounterResetTime = "";
	[textual_convention("DisplayString"), encoding("OCTETSTRING"), object_syntax("DisplayString"), display_hint("255a"), object_identifier("1.3.6.1.4.1.311.1.2.1.28"), read, write, description("This variable gives the path to the log file"), status("mandatory")] string parLogFileName = "";
	[textual_convention("DisplayString"), encoding("OCTETSTRING"), object_syntax("DisplayString"), variable_length("1..30"), object_identifier("1.3.6.1.4.1.311.1.2.1.2"), read, description("Most recent date and time at which planned scavenging \n\t\t       took place.  Planned scavenging happens at intervals\n\t\t       specified in the registry.  Scavenging involves\n\t\t       changing owned non-refreshed entries to the released\n\t\t       state. Further, replicas may be changed to tombstones,\n\t\t       tombstones maye be deleted and revalidation of old\n\t\t       replicas may take place"), status("mandatory")] string parLastPScvTime = "";
	[textual_convention("DisplayString"), encoding("OCTETSTRING"), object_syntax("DisplayString"), variable_length("1..30"), object_identifier("1.3.6.1.4.1.311.1.2.1.6"), read, description("Most recent data and time at which planned replication\n\t\t       took place.  Planned replication happens at intervals\n\t\t       specified in the registry"), status("mandatory")] string parLastPRplTime = "";
	[textual_convention("DisplayString"), encoding("OCTETSTRING"), object_syntax("DisplayString"), variable_length("1..30"), object_identifier("1.3.6.1.4.1.311.1.2.1.3"), read, description("Most recent data and time at which scavenging as a\n\t\t       result of administrative action took place"), status("mandatory")] string parLastATScvTime = "";
	[textual_convention("DisplayString"), encoding("OCTETSTRING"), object_syntax("DisplayString"), variable_length("1..30"), object_identifier("1.3.6.1.4.1.311.1.2.1.7"), read, description("Most recent data and time at which administrator\n\t\t       triggered replication took place."), status("mandatory")] string parLastATRplTime = "";
	[textual_convention("DisplayString"), encoding("OCTETSTRING"), object_syntax("DisplayString"), variable_length("1..30"), object_identifier("1.3.6.1.4.1.311.1.2.1.8"), read, description("Most recent data and time at which network triggered\n\t\t       replication took place.  Network triggered replication \n\t\t       happens as a result of an update notification message\n\t\t       from a remote WINS"), status("mandatory")] string parLastNTRplTime = "";
	[textual_convention("DisplayString"), encoding("OCTETSTRING"), object_syntax("DisplayString"), display_hint("255a"), object_identifier("1.3.6.1.4.1.311.1.2.1.29"), read, write, description("This variable gives the path to the backup dir"), status("mandatory")] string parBackupDirPath = "";
	[textual_convention("DisplayString"), encoding("OCTETSTRING"), object_syntax("DisplayString"), variable_length("1..30"), object_identifier("1.3.6.1.4.1.311.1.2.1.9"), read, description("Most recent data and time at which address change\n\t\t       triggered replication took place.  Address change\n\t\t       triggered replication happens when the address of\n\t\t       an owned name changes due to a new registration"), status("mandatory")] string parLastACTRplTime = "";
	[textual_convention("DisplayString"), encoding("OCTETSTRING"), object_syntax("DisplayString"), variable_length("1..30"), object_identifier("1.3.6.1.4.1.311.1.2.1.1"), read, description("Wins start time"), status("mandatory")] string parWinsStartTime = "";
	[textual_convention("DisplayString"), encoding("OCTETSTRING"), object_syntax("DisplayString"), variable_length("1..30"), object_identifier("1.3.6.1.4.1.311.1.2.1.10"), read, description("Most recent data and time at which the local database\n\t\t       was populated statically from one or more data files"), status("mandatory")] string parLastInitDbTime = "";
	[textual_convention("EnumeratedINTEGER"), enumeration("no(0),yes(1)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.4.1.311.1.2.1.30"), read, write, description("This variable specifies whether WINS should do \n                         backup on termination. Setting it 1 holds no\n                         meaning unless parBackupDirPath is set also"), status("mandatory")] string parDoBackupOnTerm = "no";
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.4.1.311.1.2.1.26"), read, write, description("This variable indicates whether Static data should \n\t\t\t be read in at initialization and reconfiguration time.\n\t\t\t Update of any mib variable in the parameters group\n\t\t\t constitutes reconfigurations "), status("mandatory")] sint32 parStaticDataInit = 0;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.4.1.311.1.2.1.18"), read, description("This variable indicates the number of\n\t\t\t queries that failed"), status("mandatory")] uint32 parWinsTotalNoOfFailQueries = 0;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.4.1.311.1.2.1.17"), read, description("This variable indicates the number of\n\t\t\t queries that succeeded"), status("mandatory")] uint32 parWinsTotalNoOfSuccQueries = 0;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.4.1.311.1.2.1.22"), read, write, description("This variable indicates the verify interval\n\t\t\t Unit is in milliseconds."), status("mandatory")] sint32 parVerifyInterval = 0;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.4.1.311.1.2.1.25"), read, write, description("This variable indicates whether or not  \n\t\t\treplication should be done with non-configures pnrs.\n\t\t\tIf not set to zero, replication will be done only with\n\t\t\tpartners listed in the registry (except when an\n\t\t\tupdate notification comes in)"), status("mandatory")] sint32 parRplOnlyWCnfPnrs = 0;
	[textual_convention("DisplayString"), encoding("OCTETSTRING"), object_syntax("DisplayString"), variable_length("1..30"), object_identifier("1.3.6.1.4.1.311.1.2.1.4"), read, description("Most recent data and time at which replica tombstone\n\t\t       scavenging took place"), status("mandatory")] string parLastTombScvTime = "";
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.4.1.311.1.2.1.19"), read, write, description("This variable indicates the refresh interval.\n\t\t\t Unit is in milliseconds"), status("mandatory")] sint32 parRefreshInterval = 0;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.4.1.311.1.2.1.12"), read, description("This variable indicates the number of\n\t\t\t registrations received"), status("mandatory")] uint32 parWinsTotalNoOfReg = 0;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.4.1.311.1.2.1.14"), read, description("This variable indicates the number of\n\t\t\t releases received"), status("mandatory")] uint32 parWinsTotalNoOfRel = 0;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.4.1.311.1.2.1.27"), read, write, description("This variable indicates whether logging should be\n\t\t\t done. Default behaviour is to do logging"), status("mandatory")] sint32 parLogFlag = 0;
};
[description(""), module_name("WINS-MIB"), singleton, group_objectid("1.3.6.1.4.1.311.1.2.3"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_WINS_MIB_push : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.4.1.311.1.2.3.1"), read, write, description("This variable indicates whether a push (i.e. \n\t\t\tnotification message) should be done at invocation."), status("mandatory")] sint32 pushInitTime = 0;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.4.1.311.1.2.3.2"), read, write, description("This variable indicates whether  a notification \n\t\t\t message  should be sent when address changes"), status("mandatory")] sint32 pushRplOnAddChg = 0;
};
[description("A list of WINS Partners with which push\n\t\t       replication is to be initiated\nThis is the row corresponding to the WINS pnr"), module_name("WINS-MIB"), group_objectid("1.3.6.1.4.1.311.1.2.3"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_WINS_MIB_pushPnrTable : SnmpObjectType
{
	[textual_convention("IpAddress"), encoding("IpAddress"), object_syntax("IpAddress"), object_identifier("1.3.6.1.4.1.311.1.2.3.3.1.1"), read, write, description("Address of the WINS partner"), status("mandatory"), key, key_order(1)] string pushPnrAdd = "0.0.0.0";
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.4.1.311.1.2.3.3.1.2"), read, write, description("This variable indicates the # of updates that\n\t\t\t should result in a push message"), status("mandatory")] sint32 pushPnrUpdateCount = 0;
};
[description(""), module_name("WINS-MIB"), singleton, group_objectid("1.3.6.1.4.1.311.1.2.5"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_WINS_MIB_cmd : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.4.1.311.1.2.5.12"), read, description("The low word of the version number counter of the WINS"), status("mandatory")] sint32 cmdWinsVersNoLowWord = 0;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.4.1.311.1.2.5.13"), read, description("The high word of the version number counter of the WINS"), status("mandatory")] sint32 cmdWinsVersNoHighWord = 0;
	[textual_convention("IpAddress"), encoding("IpAddress"), object_syntax("IpAddress"), object_identifier("1.3.6.1.4.1.311.1.2.5.3"), read, write, description("This variable when set will cause all information\n\t\t\t pertaining to a WINS (data records, context \n\t\t\t information to be deleted from the local WINS.\n\t\t\t Use this only when owner-address mapping table is\n\t\t\t getting to near capacity. NOTE: deletion of all \n\t\t\t information pertaining to the managed WINS is not\n\t\t\t permitted"), status("mandatory")] string cmdDeleteWins = "0.0.0.0";
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..4"), object_identifier("1.3.6.1.4.1.311.1.2.5.6"), read, write, description("Sets the number of worker threads in WINS"), status("mandatory")] sint32 cmdNoOfWrkThds = 0;
	[textual_convention("IpAddress"), encoding("IpAddress"), object_syntax("IpAddress"), object_identifier("1.3.6.1.4.1.311.1.2.5.1"), read, write, description("This variable when set will cause the WINS to\n\t\t\t pull from the remote WINS identified by the IpAddress"), status("mandatory")] string cmdPullTrigger = "0.0.0.0";
	[textual_convention("IpAddress"), encoding("IpAddress"), object_syntax("IpAddress"), object_identifier("1.3.6.1.4.1.311.1.2.5.2"), read, write, description("This variable when set will cause the WINS to\n\t\t\t push a notification message to the remote WINS \n\t\t\tidentified by the IpAddress"), status("mandatory")] string cmdPushTrigger = "0.0.0.0";
	[textual_convention("IpAddress"), encoding("IpAddress"), object_syntax("IpAddress"), object_identifier("1.3.6.1.4.1.311.1.2.5.9"), read, write, description("This variable when set will cause all date records \n\t\t\t pertaining to a WINS to be deleted from the local WINS.\n\t\t\t Note: Only data records are deleted."), status("mandatory")] string cmdDeleteDbRecs = "0.0.0.0";
	[textual_convention("DisplayString"), encoding("OCTETSTRING"), object_syntax("DisplayString"), display_hint("255a"), object_identifier("1.3.6.1.4.1.311.1.2.5.5"), read, write, description("When set WINS will do static initialization\n\t\t\t using the file specified as the value.  If\n\t\t\t 0 is specified, WINS will do static \n\t\t\t initialization using the files specified\n\t\t\t in the registry (can be read-written using\n\t\t\t Datafile table"), status("mandatory")] string cmdDoStaticInit = "";
	[textual_convention("EnumeratedINTEGER"), enumeration("no(0),yes(1)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.4.1.311.1.2.5.4"), read, write, description("This variable when set will cause WINS to do\n\t\t\t scavenging."), status("mandatory")] string cmdDoScavenging = "no";
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.4.1.311.1.2.5.8"), read, write, description("Reset the counters. Value is ignored"), status("mandatory")] sint32 cmdResetCounters = 0;
	[textual_convention("EnumeratedINTEGER"), enumeration("normal(0),high(1)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.4.1.311.1.2.5.7"), read, write, description("Set the priority class of WINS to normal or high"), status("mandatory")] string cmdPriorityClass = "normal";
	[textual_convention("IpAddress"), encoding("IpAddress"), object_syntax("IpAddress"), object_identifier("1.3.6.1.4.1.311.1.2.5.10"), read, write, description("This variable can set to retrieve records of\n\t\t\t a WINS whose Ip address is provided. When set\n\t\t\t the table is populated right-away"), status("mandatory")] string cmdDRPopulateTable = "0.0.0.0";
};
[description("This is the table that stores the data records\n\t\t\t The records are sorted lexicographically by name  \n\t\t\t Note: the table is cached (to save on overhead on WINS)\n\t\t\t To repopulate the table, set cmdDRDataRecordsTable\n\t\t\t mib var\ndata record owned by WINS whose address\n\t\t\t    was specified when CmdDRRecordsTable was\n\t\t\t    set"), module_name("WINS-MIB"), group_objectid("1.3.6.1.4.1.311.1.2.5"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_WINS_MIB_cmdDRDataRecordsTable : SnmpObjectType
{
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("OCTETSTRING"), variable_length("1..255"), object_identifier("1.3.6.1.4.1.311.1.2.5.11.1.1"), read, description("Name in the record"), status("mandatory"), key, key_order(1)] string cmdDRRecordName = "";
	[textual_convention("EnumeratedINTEGER"), enumeration("unique(0),normalgroup(1),specialgroup(2),multihomed(3)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.4.1.311.1.2.5.11.1.3"), read, description("Type of the record"), status("mandatory")] string cmdDRRecordType = "unique";
	[textual_convention("EnumeratedINTEGER"), enumeration("active(0),released(1),tombstone(2),deleted(3)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.4.1.311.1.2.5.11.1.5"), read, description("State of the record."), status("mandatory")] string cmdDRRecordState = "active";
	[textual_convention("EnumeratedINTEGER"), enumeration("static(0),dynamic(1)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.4.1.311.1.2.5.11.1.4"), read, description("Persistence type of the record"), status("mandatory")] string cmdDRRecordPersistenceType = "static";
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("OCTETSTRING"), object_identifier("1.3.6.1.4.1.311.1.2.5.11.1.2"), read, description("Address(es) of the record.  If the record is\n\t\t\t a multihomed record or a special group, the\n\t\t\t addresses are returned sequentially in pairs.\n\t\t\t Each pair is comprised of the address of the\n\t\t         owner wins followed by the address of the \n\t\t\t machine (multihomed)/member (special group).\n\t\t\t Note: Following snmp's convention, the records\n\t\t\t are always returned in network byte order"), status("mandatory")] string cmdDRRecordAddress = "";
};
[description("A list of datafiles specified under the Datafiles\n\t\t       key in the registry.  These files are used for\n\t\t       statically initialization of the WINS database\ndata file name"), module_name("WINS-MIB"), group_objectid("1.3.6.1.4.1.311.1.2.4"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_WINS_MIB_dfDatafilesTable : SnmpObjectType
{
	[textual_convention("DisplayString"), encoding("OCTETSTRING"), object_syntax("DisplayString"), display_hint("255a"), object_identifier("1.3.6.1.4.1.311.1.2.4.1.1.2"), read, write, description("Name of the datafile to use for static initialization"), status("mandatory")] string dfDatafileName = "";
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.4.1.311.1.2.4.1.1.1"), read, description("Used for indexing entries in the datafiles table.\n\t\t\tIt has no other use"), status("mandatory"), virtual_key, key, key_order(1)] sint32 dfDatafileIndex = 0;
};

