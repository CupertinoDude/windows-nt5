// Copyright (c) 1997-2001 Microsoft Corporation, All Rights Reserved
//	MOF Generated for module "MAU-MIB" by smi2smir version 1.10.635.0000
qualifier write:ToInstance ToSubClass;
qualifier read:ToInstance ToSubClass;
qualifier provider:ToInstance ToSubClass;
qualifier singleton:ToInstance ToSubClass;
qualifier dynamic:ToInstance ToSubClass;
qualifier textual_convention:ToInstance ToSubClass;
qualifier object_identifier:ToInstance ToSubClass;
qualifier encoding:ToInstance ToSubClass;
qualifier object_syntax:ToInstance ToSubClass;
qualifier status:ToInstance ToSubClass;
qualifier fixed_length:ToInstance ToSubClass;
qualifier variable_length:ToInstance ToSubClass;
qualifier variable_value:ToInstance ToSubClass;
qualifier bits:ToInstance ToSubClass;
qualifier key_order:ToInstance ToSubClass;
qualifier enumeration:ToInstance ToSubClass;
qualifier bits:ToInstance ToSubClass;
qualifier description:ToInstance ToSubClass;
qualifier display_hint:ToInstance ToSubClass;
qualifier defval:ToInstance ToSubClass;
qualifier units:ToInstance ToSubClass;
qualifier reference:ToInstance ToSubClass;
qualifier virtual_key:ToInstance ToSubClass;
qualifier rowstatus:ToInstance ToSubClass;
qualifier module_name:ToInstance ToSubClass;
qualifier module_imports:ToInstance ToSubClass;
qualifier group_objectid:ToInstance ToSubClass;

[abstract]
class SnmpMacro
{
};

[abstract]
class SnmpObjectType:SnmpMacro
{
};

class SnmpNotifyStatus:__ExtendedStatus
{
[write] sint32 SnmpStatusCode;
[write] string Description;
};

[description("Table of descriptive and status information about\n                    the MAU(s) attached to an interface.\nAn entry in the table, containing information\n                    about a single MAU."), module_name("MAU-MIB"), group_objectid("1.3.6.1.2.1.26.2"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_MAU_MIB_ifMauTable : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..9"), object_identifier("1.3.6.1.2.1.26.2.1.1.2"), read, description("This variable uniquely identifies the MAU\n                    connected to interface ifMauIfIndex that is\n                    described by this entry."), reference("Reference IEEE 802.3 MAU Mgt, 20.2.3.2, aMAUID."), status("mandatory"), key, key_order(2)] sint32 ifMauIndex;
	[textual_convention("EnumeratedINTEGER"), enumeration("other(1),unknown(2),operational(3),standby(4),shutdown(5),reset(6)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.26.2.1.1.4"), read, write, description("The current state of the MAU.  This object may be\n                    implemented as a read-only object by those agents\n                    and MAUs that do not implement software control of\n                    the MAU state.  Some agents may not support\n                    setting the value of this object to some of the\n                    enumerated values.\n\n                    The value other(1) is returned if the MAU is in a\n                    state other than one of the states 2 through 6.\n\n\n\n\n\n                    The value unknown(2) is returned when the MAU's\n                    true state is unknown; for example, when it is\n                    being initialized.\n\n                    A MAU in the operational(3) state is fully\n                    functional, operates, and passes signals to its\n                    attached DTE or repeater port in accordance to its\n                    specification.\n\n                    A MAU in standby(4) state forces DI and CI and the\n                    media transmitter to idle.  Standby(4) mode only\n                    applies to link type MAUs.  The state of\n                    ifMauMediaAvailable is unaffected.\n\n                    A MAU in shutdown(5) state assumes the same\n                    condition on DI, CI, and the media transmitter as\n                    though it were powered down.  The MAU may return\n                    other(1) value for the mauJabber and\n                    ifMauMediaAvailable objects when it is in this\n                    state.  For an AUI, this state will remove power\n                    from the AUI.\n\n                    Setting this variable to the value reset(6) resets\n                    the MAU in the same manner as a power-off, power-\n     
               on cycle of at least one-half second would.  The\n                    agent is not required to return the value reset\n                    (6).\n\n                    Setting this variable to the value operational(3),\n                    standby(4), or shutdown(5) causes the MAU to\n                    assume the respective state except that setting a\n                    mixing-type MAU or an AUI to standby(4) will cause\n                    the MAU to enter the shutdown state."), reference("Reference IEEE 802.3 MAU Mgt, 20.2.3.2,\n                    aMAUAdminState, and 20.2.3.3, acMAUAdminControl\n                    and acResetMAUAction."), status("mandatory")] string ifMauStatus;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.26.2.1.1.1"), read, description("This variable uniquely identifies the interface\n                    to which the MAU described by this entry is\n                    connected."), reference("Reference RFC 1213, ifIndex."), status("mandatory"), key, key_order(1)] sint32 ifMauIfIndex;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.26.2.1.1.8"), read, description("A count of the number of times that\n                    ifMauJabberState for this MAU instance enters the\n                    state jabbering(4).  For a MAU of type\n                    dot3MauTypeAUI, this counter will always indicate\n\n\n\n\n\n                    zero."), reference("Reference IEEE 802.3 MAU Mgt, 20.2.3.2,\n                    aJabber.jabberCounter."), status("mandatory")] uint32 ifMauJabberingStateEnters;
	[textual_convention("EnumeratedINTEGER"), enumeration("other(1),unknown(2),noJabber(3),jabbering(4)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.26.2.1.1.7"), read, description("The value other(1) is returned if the jabber\n                    state is not 2, 3, or 4.  The agent must always\n                    return other(1) for MAU type dot3MauTypeAUI.\n\n                    The value unknown(2) is returned when the MAU's\n                    true state is unknown; for example, when it is\n                    being initialized.\n\n                    If the MAU is not jabbering the agent returns\n                    noJabber(3).  This is the 'normal' state.\n\n                    If the MAU is in jabber state the agent returns\n                    the jabbering(4) value."), reference("Reference IEEE 802.3 MAU Mgt, 20.2.3.2,\n                    aJabber.jabberFlag."), status("mandatory")] string ifMauJabberState;
	[textual_convention("EnumeratedINTEGER"), enumeration("other(1),unknown(2),available(3),notAvailable(4),remoteFault(5),invalidSignal(6)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.26.2.1.1.5"), read, description("If the MAU is a link or fiber type (FOIRL,\n                    10BASE-T, 10BASE-F) then this is equivalent to the\n                    link test fail state/low light function.  For an\n                    AUI or a coax (including broadband) MAU this\n                    indicates whether or not loopback is detected on\n                    the DI circuit.  The value of this attribute\n                    persists between packets for MAU types AUI,\n                    10BASE5, 10BASE2, 10BROAD36, and 10BASE-FP.\n\n                    The value other(1) is returned if the\n                    mediaAvailable state is not one of 2 through 6.\n\n                    The value unknown(2) is returned when the MAU's\n                    true state is unknown; for example, when it is\n                    being initialized.  At power-up or following a\n                    reset, the value of this attribute will be unknown\n                    for AUI, coax, and 10BASE-FP MAUs.  For these MAUs\n                    loopback will be tested on each transmission\n                    during which no collision is detected.  If DI is\n                    receiving input when DO returns to IDL after a\n                    transmission and there has been no collision\n                    during the transmission then loopback will be\n                    detected.  The value of this attribute will only\n                    change during non-collided transmissions for AUI,\n                    coax, and 10BASE-FP MAUs.\n\n                    The value available(3) indicates that the link,\n                    light, or loopback is normal.  The value\n                    notAvailable(4) indicates link loss, low light, or\n                    no loopback.\n\n                   
 The value remoteFault(5) indicates that a fault\n                    has been detected at the remote end of the link.\n                    The value invalidSignal(6) indicates that an\n                    invalid signal has been received from the other\n                    end of the link.  Both remoteFault(5) and\n                    invalidSignal(6) apply only to MAUs of type\n                    10BASE-FB."), reference("Reference IEEE 802.3 MAU Mgt, 20.2.3.2,\n                    aMediaAvailable."), status("mandatory")] string ifMauMediaAvailable;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.26.2.1.1.6"), read, description("A count of the number of times that\n                    ifMauMediaAvailable for this MAU instance leaves\n                    the state available(3)."), reference("Reference IEEE 802.3 MAU Mgt, 20.2.3.2,\n                    lostMediaCount."), status("mandatory")] uint32 ifMauMediaAvailableStateExits;
	[textual_convention("OBJECTIDENTIFIER"), encoding("OBJECTIDENTIFIER"), object_syntax("OBJECTIDENTIFIER"), object_identifier("1.3.6.1.2.1.26.2.1.1.3"), read, description("This object identifies the 10 Mb/s baseband or\n                    broadband MAU type.  An initial set of MAU types\n                    are defined above.  The assignment of OBJECT\n                    IDENTIFIERs to new types of MAUs is managed by the\n                    IANA.  If the MAU type is unknown, the object\n                    identifier\n\n                        unknownMauType OBJECT IDENTIFIER ::= { 0 0 }\n\n                    is returned.  Note that unknownMauType is a\n                    syntactically valid object identifier, and any\n                    conformant implementation of ASN.1 and the BER\n                    must be able to generate and recognize this\n                    value."), reference("Reference IEEE 802.3 MAU Mgt, 20.2.3.2,\n                    aMAUType."), status("mandatory")] string ifMauType;
};
[description("Table of descriptive and status information about\n                    the MAU(s) attached to the ports of a repeater.\nAn entry in the table, containing information\n                    about a single MAU."), module_name("MAU-MIB"), group_objectid("1.3.6.1.2.1.26.1"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_MAU_MIB_rpMauTable : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..9"), object_identifier("1.3.6.1.2.1.26.1.1.1.3"), read, description("This variable uniquely identifies the MAU\n                    connected to port rpMauPortIndex within group\n                    rpMauGroupIndex that is described by this entry."), reference("Reference IEEE 802.3 MAU Mgt, 20.2.3.2, aMAUID."), status("mandatory"), key, key_order(3)] sint32 rpMauIndex;
	[textual_convention("EnumeratedINTEGER"), enumeration("other(1),unknown(2),operational(3),standby(4),shutdown(5),reset(6)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.26.1.1.1.5"), read, write, description("The current state of the MAU.  This object may be\n                    implemented as a read-only object by those agents\n                    and MAUs that do not implement software control of\n                    the MAU state.  Some agents may not support\n                    setting the value of this object to some of the\n                    enumerated values.\n\n                    The value other(1) is returned if the MAU is in a\n                    state other than one of the states 2 through 6.\n\n                    The value unknown(2) is returned when the MAU's\n                    true state is unknown; for example, when it is\n                    being initialized.\n\n                    A MAU in the operational(3) state is fully\n                    functional, operates, and passes signals to its\n                    attached DTE or repeater port in accordance to its\n                    specification.\n\n                    A MAU in standby(4) state forces DI and CI and the\n                    media transmitter to idle.  Standby(4) mode only\n                    applies to link type MAUs.  The state of\n                    rpMauMediaAvailable is unaffected.\n\n                    A MAU in shutdown(5) state assumes the same\n                    condition on DI, CI, and the media transmitter as\n                    though it were powered down.  The MAU may return\n                    other(1) value for the mauJabber and\n                    rpMauMediaAvailable objects when it is in this\n                    state.  For an AUI, this state will remove power\n                    from the AUI.\n\n                    Setting this variable to the value reset(6) resets\n                    the MAU in the same manner as a power-off, power-\n             
       on cycle of at least one-half second would.  The\n                    agent is not required to return the value reset\n                    (6).\n\n\n\n\n\n                    Setting this variable to the value operational(3),\n                    standby(4), or shutdown(5) causes the MAU to\n                    assume the respective state except that setting a\n                    mixing-type MAU or an AUI to standby(4) will cause\n                    the MAU to enter the shutdown state."), reference("Reference IEEE 802.3 MAU Mgt, 20.2.3.2,\n                    aMAUAdminState, and 20.2.3.3, acMAUAdminControl\n                    and acResetMAUAction."), status("mandatory")] string rpMauStatus;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..1024"), object_identifier("1.3.6.1.2.1.26.1.1.1.2"), read, description("This variable uniquely identifies the repeater\n                    port within group rpMauGroupIndex to which the MAU\n                    described by this entry is connected."), reference("Reference RFC 1368, rptrPortIndex."), status("mandatory"), key, key_order(2)] sint32 rpMauPortIndex;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..1024"), object_identifier("1.3.6.1.2.1.26.1.1.1.1"), read, description("This variable uniquely identifies the repeater\n                    group containing the port to which the MAU\n                    described by this entry is connected."), reference("Reference RFC1368, rptrGroupIndex."), status("mandatory"), key, key_order(1)] sint32 rpMauGroupIndex;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.26.1.1.1.9"), read, description("A count of the number of times that\n                    rpMauJabberState for this MAU instance enters the\n                    state jabbering(4).  For a MAU of type\n                    dot3MauTypeAUI, this counter will always indicate\n                    zero."), reference("Reference IEEE 802.3 MAU Mgt, 20.2.3.2,\n                    aJabber.jabberCounter."), status("mandatory")] uint32 rpMauJabberingStateEnters;
	[textual_convention("EnumeratedINTEGER"), enumeration("other(1),unknown(2),noJabber(3),jabbering(4)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.26.1.1.1.8"), read, description("The value other(1) is returned if the jabber\n                    state is not 2, 3, or 4.  The agent must always\n                    return other(1) for MAU type dot3MauTypeAUI.\n\n                    The value unknown(2) is returned when the MAU's\n                    true state is unknown; for example, when it is\n                    being initialized.\n\n\n\n\n\n\n                    If the MAU is not jabbering the agent returns\n                    noJabber(3).  This is the 'normal' state.\n\n                    If the MAU is in jabber state the agent returns\n                    the jabbering(4) value."), reference("Reference IEEE 802.3 MAU Mgt, 20.2.3.2,\n                    aJabber.jabberFlag."), status("mandatory")] string rpMauJabberState;
	[textual_convention("EnumeratedINTEGER"), enumeration("other(1),unknown(2),available(3),notAvailable(4),remoteFault(5),invalidSignal(6)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.26.1.1.1.6"), read, description("If the MAU is a link or fiber type (FOIRL,\n                    10BASE-T, 10BASE-F) then this is equivalent to the\n                    link test fail state/low light function.  For an\n                    AUI or a coax (including broadband) MAU this\n                    indicates whether or not loopback is detected on\n                    the DI circuit.  The value of this attribute\n                    persists between packets for MAU types AUI,\n                    10BASE5, 10BASE2, 10BROAD36, and 10BASE-FP.\n\n                    The value other(1) is returned if the\n                    mediaAvailable state is not one of 2 through 6.\n\n                    The value unknown(2) is returned when the MAU's\n                    true state is unknown; for example, when it is\n                    being initialized.  At power-up or following a\n                    reset, the value of this attribute will be unknown\n                    for AUI, coax, and 10BASE-FP MAUs.  For these MAUs\n                    loopback will be tested on each transmission\n                    during which no collision is detected.  If DI is\n                    receiving input when DO returns to IDL after a\n                    transmission and there has been no collision\n                    during the transmission then loopback will be\n                    detected.  The value of this attribute will only\n                    change during non-collided transmissions for AUI,\n                    coax, and 10BASE-FP MAUs.\n\n\n\n\n\n                    The value available(3) indicates that the link,\n                    light, or loopback is normal.  The value\n                    notAvailable(4) indicates link loss, low light, or\n                    no loopback.\n\n           
         The value remoteFault(5) indicates that a fault\n                    has been detected at the remote end of the link.\n                    The value invalidSignal(6) indicates that an\n                    invalid signal has been received from the other\n                    end of the link.  Both remoteFault(5) and\n                    invalidSignal(6) apply only to MAUs of type\n                    10BASE-FB."), reference("Reference IEEE 802.3 MAU Mgt, 20.2.3.2,\n                    aMediaAvailable."), status("mandatory")] string rpMauMediaAvailable;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.26.1.1.1.7"), read, description("A count of the number of times that\n                    rpMauMediaAvailable for this MAU instance leaves\n                    the state available(3)."), reference("Reference IEEE 802.3 MAU Mgt, 20.2.3.2,\n                    lostMediaCount."), status("mandatory")] uint32 rpMauMediaAvailableStateExits;
	[textual_convention("OBJECTIDENTIFIER"), encoding("OBJECTIDENTIFIER"), object_syntax("OBJECTIDENTIFIER"), object_identifier("1.3.6.1.2.1.26.1.1.1.4"), read, description("This object identifies the 10 Mb/s baseband MAU\n                    type.  An initial set of MAU types are defined\n                    above.  The assignment of OBJECT IDENTIFIERs to\n                    new types of MAUs is managed by the IANA.  If the\n                    MAU type is unknown, the object identifier\n\n                        unknownMauType OBJECT IDENTIFIER ::= { 0 0 }\n\n                    is returned.  Note that unknownMauType is a\n                    syntactically valid object identifier, and any\n                    conformant implementation of ASN.1 and the BER\n                    must be able to generate and recognize this\n                    value."), reference("Reference IEEE 802.3 MAU Mgt, 20.2.3.2,\n                    aMAUType."), status("mandatory")] string rpMauType;
};
[description("Table of descriptive and status information about\n                    the broadband MAUs connected to interfaces.\nAn entry in the table, containing information\n                    about a single broadband MAU."), module_name("MAU-MIB"), group_objectid("1.3.6.1.2.1.26.3"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_MAU_MIB_broadMauBasicTable : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.26.3.1.1.4"), read, description("This variable indicates the transmit carrier\n                    frequency of the 10BROAD36 MAU in MHz/4; that is,\n                    in units of 250 kHz."), reference("Reference IEEE 802.3 MAU Mgt, 20.2.3.2,\n                    aBroadbandFrequencies.xmitCarrierFrequency."), status("mandatory")] sint32 broadMauXmtCarrierFreq;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..9"), object_identifier("1.3.6.1.2.1.26.3.1.1.2"), read, description("This variable uniquely identifies the MAU\n                    connected to interface broadMauIfIndex that is\n                    described by this entry."), reference("Reference IEEE 802.3 MAU Mgt, 20.2.3.2, aMAUID."), status("mandatory"), key, key_order(2)] sint32 broadMauIndex;
	[textual_convention("EnumeratedINTEGER"), enumeration("other(1),single(2),dual(3)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.26.3.1.1.3"), read, description("This object indicates the type of frequency\n                    multiplexing/cabling system used to separate the\n                    transmit and receive paths for the 10BROAD36 MAU.\n\n                    The value other(1) is returned if the split type\n                    is not either single or dual.\n\n                    The value single(2) indicates a single cable\n                    system.  The value dual(3) indicates a dual cable\n                    system, offset normally zero."), reference("Reference IEEE 802.3 MAU Mgt, 20.2.3.2,\n                    aBbMAUXmitRcvSplitType."), status("mandatory")] string broadMauXmtRcvSplitType;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.26.3.1.1.5"), read, description("This variable indicates the translation offset\n                    frequency of the 10BROAD36 MAU in MHz/4; that is,\n                    in units of 250 kHz."), reference("Reference IEEE 802.3 MAU Mgt, 20.2.3.2,\n                    aBroadbandFrequencies.translationFrequency."), status("mandatory")] sint32 broadMauTranslationFreq;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.26.3.1.1.1"), read, description("This variable uniquely identifies the interface\n                    to which the MAU described by this entry is\n                    connected."), reference("Reference RFC 1213, ifIndex."), status("mandatory"), key, key_order(1)] sint32 broadMauIfIndex;
};

