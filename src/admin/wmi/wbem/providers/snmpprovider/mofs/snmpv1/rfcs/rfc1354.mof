// Copyright (c) 1997-2001 Microsoft Corporation, All Rights Reserved
//	MOF Generated for module "RFC1354-MIB" by smi2smir version 1.10.635.0000
qualifier write:ToInstance ToSubClass;
qualifier read:ToInstance ToSubClass;
qualifier provider:ToInstance ToSubClass;
qualifier singleton:ToInstance ToSubClass;
qualifier dynamic:ToInstance ToSubClass;
qualifier textual_convention:ToInstance ToSubClass;
qualifier object_identifier:ToInstance ToSubClass;
qualifier encoding:ToInstance ToSubClass;
qualifier object_syntax:ToInstance ToSubClass;
qualifier status:ToInstance ToSubClass;
qualifier fixed_length:ToInstance ToSubClass;
qualifier variable_length:ToInstance ToSubClass;
qualifier variable_value:ToInstance ToSubClass;
qualifier bits:ToInstance ToSubClass;
qualifier key_order:ToInstance ToSubClass;
qualifier enumeration:ToInstance ToSubClass;
qualifier bits:ToInstance ToSubClass;
qualifier description:ToInstance ToSubClass;
qualifier display_hint:ToInstance ToSubClass;
qualifier defval:ToInstance ToSubClass;
qualifier units:ToInstance ToSubClass;
qualifier reference:ToInstance ToSubClass;
qualifier virtual_key:ToInstance ToSubClass;
qualifier rowstatus:ToInstance ToSubClass;
qualifier module_name:ToInstance ToSubClass;
qualifier module_imports:ToInstance ToSubClass;
qualifier group_objectid:ToInstance ToSubClass;

[abstract]
class SnmpMacro
{
};

[abstract]
class SnmpObjectType:SnmpMacro
{
};

class SnmpNotifyStatus:__ExtendedStatus
{
[write] sint32 SnmpStatusCode;
[write] string Description;
};

[description(""), module_name("RFC1354-MIB"), singleton, group_objectid("1.3.6.1.2.1.4.24"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_RFC1354_MIB_ipForward : SnmpObjectType
{
	[textual_convention("Gauge"), encoding("Gauge"), object_syntax("Gauge"), object_identifier("1.3.6.1.2.1.4.24.1"), read, description("The number of current  ipForwardTable  entries\n                that are not invalid."), status("mandatory")] uint32 ipForwardNumber;
};
[description("This entity's IP Routing table.\nA particular route to  a  particular  destina-\n                tion, under a particular policy."), module_name("RFC1354-MIB"), group_objectid("1.3.6.1.2.1.4.24"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_RFC1354_MIB_ipForwardTable : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.4.24.2.1.8"), read, description("The number of seconds  since  this  route  was\n                last  updated  or  otherwise  determined  to be\n                correct.  Note that no semantics of  `too  old'\n                can  be implied except through knowledge of the\n                routing  protocol  by  which  the   route   was\n                learned."), status("mandatory"), defval("0")] sint32 ipForwardAge;
	[textual_convention("OBJECTIDENTIFIER"), encoding("OBJECTIDENTIFIER"), object_syntax("OBJECTIDENTIFIER"), object_identifier("1.3.6.1.2.1.4.24.2.1.9"), read, write, description("A reference to MIB definitions specific to the\n                particular  routing protocol which is responsi-\n                ble for this route, as determined by the  value\n                specified  in the route's ipForwardProto value.\n                If this information is not present,  its  value\n                should be set to the OBJECT IDENTIFIER { 0 0 },\n                which is a syntactically valid object  identif-\n                ier, and any implementation conforming to ASN.1\n                and the Basic Encoding Rules must  be  able  to\n                generate and recognize this value."), status("mandatory"), defval("0.0")] string ipForwardInfo;
	[textual_convention("IpAddress"), encoding("IpAddress"), object_syntax("IpAddress"), object_identifier("1.3.6.1.2.1.4.24.2.1.2"), read, write, description("Indicate the mask to be logical-ANDed with the\n                destination  address  before  being compared to\n                the value  in  the  ipForwardDest  field.   For\n                those  systems  that  do  not support arbitrary\n                subnet masks, an agent constructs the value  of\n                the  ipForwardMask  by  reference to the IP Ad-\n                dress Class.\n\n                Any assignment (implicit or  otherwise)  of  an\n                instance  of  this  object to a value x must be\n                rejected if the bitwise logical-AND of  x  with\n                the  value of the corresponding instance of the\n                ipForwardDest object is not equal to ipForward-\n                Dest."), status("mandatory"), defval("00000000")] string ipForwardMask;
	[textual_convention("IpAddress"), encoding("IpAddress"), object_syntax("IpAddress"), object_identifier("1.3.6.1.2.1.4.24.2.1.1"), read, description("The destination IP address of this route.   An\n                entry  with  a value of 0.0.0.0 is considered a\n                default route.\n\n                This object may not take a Multicast (Class  D)\n                address value.\n\n                Any assignment (implicit or  otherwise)  of  an\n                instance  of  this  object to a value x must be\n                rejected if the bitwise logical-AND of  x  with\n                the  value of the corresponding instance of the\n                ipForwardMask object is not equal to x."), status("mandatory"), key, key_order(1)] string ipForwardDest;
	[textual_convention("EnumeratedINTEGER"), enumeration("other(1),invalid(2),local(3),remote(4)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.4.24.2.1.6"), read, write, description("The type of route.  Note that local(3)  refers\n                to  a route for which the next hop is the final\n                destination; remote(4) refers to  a  route  for\n                which  the  next  hop is not the final destina-\n                tion.\n\n                Setting this object to the value invalid(2) has\n                the  effect  of  invalidating the corresponding\n                entry in the ipForwardTable object.   That  is,\n                it  effectively  disassociates  the destination\n                identified with said entry from the route iden-\n                tified    with    said   entry.    It   is   an\n                implementation-specific matter  as  to  whether\n                the agent removes an invalidated entry from the\n                table.  Accordingly, management  stations  must\n                be prepared to receive tabular information from\n                agents that corresponds to entries not current-\n                ly  in  use.  Proper interpretation of such en-\n                tries requires examination of the relevant  ip-\n                ForwardType object."), status("mandatory"), defval("2")] string ipForwardType;
	[textual_convention("EnumeratedINTEGER"), enumeration("other(1),local(2),netmgmt(3),icmp(4),egp(5),ggp(6),hello(7),rip(8),is-is(9),es-is(10),ciscoIgrp(11),bbnSpfIgp(12),ospf(13),bgp(14),idpr(15)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.4.24.2.1.7"), read, description("The routing mechanism via which this route was\n                learned.  Inclusion of values for gateway rout-\n                ing protocols is not  intended  to  imply  that\n                hosts should support those protocols."), status("mandatory"), key, key_order(2)] string ipForwardProto;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.4.24.2.1.3"), read, description("The general set of conditions that would cause\n                the  selection  of  one multipath route (set of\n                next hops for a given destination) is  referred\n                to as 'policy'.\n\n                Unless the mechanism indicated by ipForwardPro-\n                to specifies otherwise, the policy specifier is\n                the IP TOS Field.  The encoding of IP TOS is as\n                specified  by  the  following convention.  Zero\n                indicates the default path if no more  specific\n                policy applies.\n\n                +-----+-----+-----+-----+-----+-----+-----+-----+\n                |                 |                       |     |\n                |   PRECEDENCE    |    TYPE OF SERVICE    |  0  |\n                |                 |                       |     |\n                +-----+-----+-----+-----+-----+-----+-----+-----+\n\n                         IP TOS                IP TOS\n                    Field     Policy      Field     Policy\n                    Contents    Code      Contents    Code\n                    0 0 0 0  ==>   0      0 0 0 1  ==>   2\n                    0 0 1 0  ==>   4      0 0 1 1  ==>   6\n                    0 1 0 0  ==>   8      0 1 0 1  ==>  10\n                    0 1 1 0  ==>  12      0 1 1 1  ==>  14\n                    1 0 0 0  ==>  16      1 0 0 1  ==>  18\n                    1 0 1 0  ==>  20      1 0 1 1  ==>  22\n                    1 1 0 0  ==>  24      1 1 0 1  ==>  26\n                    1 1 1 0  ==>  28      1 1 1 1  ==>  30\n\n                Protocols defining 'policy' otherwise must  ei-\n                ther define a set of values which are valid for\n                this  object  or  must  implement  an  integer-\n                instanced  policy table for which this object's\n                value acts as an index."), status("mandatory"), key, key_o
rder(3)] sint32 ipForwardPolicy;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.4.24.2.1.11"), read, write, description("The primary routing  metric  for  this  route.\n                The  semantics of this metric are determined by\n                the routing-protocol specified in  the  route's\n                ipForwardProto  value.   If  this metric is not\n                used, its value should be set to -1."), status("mandatory"), defval("-1")] sint32 ipForwardMetric1;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.4.24.2.1.12"), read, write, description("An alternate routing metric  for  this  route.\n                The  semantics of this metric are determined by\n                the routing-protocol specified in  the  route's\n                ipForwardProto  value.   If  this metric is not\n                used, its value should be set to -1."), status("mandatory"), defval("-1")] sint32 ipForwardMetric2;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.4.24.2.1.13"), read, write, description("An alternate routing metric  for  this  route.\n                The  semantics of this metric are determined by\n                the routing-protocol specified in  the  route's\n                ipForwardProto  value.   If  this metric is not\n                used, its value should be set to -1."), status("mandatory"), defval("-1")] sint32 ipForwardMetric3;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.4.24.2.1.14"), read, write, description("An alternate routing metric  for  this  route.\n                The  semantics of this metric are determined by\n                the routing-protocol specified in  the  route's\n                ipForwardProto  value.   If  this metric is not\n                used, its value should be set to -1."), status("mandatory"), defval("-1")] sint32 ipForwardMetric4;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.4.24.2.1.15"), read, write, description("An alternate routing metric  for  this  route.\n                The  semantics of this metric are determined by\n                the routing-protocol specified in  the  route's\n                ipForwardProto  value.   If  this metric is not\n                used, its value should be set to -1."), status("mandatory"), defval("-1")] sint32 ipForwardMetric5;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.4.24.2.1.5"), read, write, description("The ifIndex value which identifies  the  local\n                interface  through  which  the next hop of this\n                route should be reached."), status("mandatory"), defval("0")] sint32 ipForwardIfIndex;
	[textual_convention("IpAddress"), encoding("IpAddress"), object_syntax("IpAddress"), object_identifier("1.3.6.1.2.1.4.24.2.1.4"), read, description("On remote routes, the address of the next sys-\n                tem en route; Otherwise, 0.0.0.0."), status("mandatory"), key, key_order(4)] string ipForwardNextHop;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.4.24.2.1.10"), read, write, description("The Autonomous System Number of the Next  Hop.\n                When  this  is  unknown  or not relevant to the\n                protocol indicated by ipForwardProto, zero."), status("mandatory"), defval("0")] sint32 ipForwardNextHopAS;
};

