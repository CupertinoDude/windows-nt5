// Copyright (c) 1999-2001 Microsoft Corporation, All Rights Reserved
//	MOF Generated for module "DECNET-PHIV-MIB" by smi2smir version 1.10.635.0000
qualifier write:ToInstance ToSubClass;
qualifier read:ToInstance ToSubClass;
qualifier provider:ToInstance ToSubClass;
qualifier singleton:ToInstance ToSubClass;
qualifier dynamic:ToInstance ToSubClass;
qualifier textual_convention:ToInstance ToSubClass;
qualifier object_identifier:ToInstance ToSubClass;
qualifier encoding:ToInstance ToSubClass;
qualifier object_syntax:ToInstance ToSubClass;
qualifier status:ToInstance ToSubClass;
qualifier fixed_length:ToInstance ToSubClass;
qualifier variable_length:ToInstance ToSubClass;
qualifier variable_value:ToInstance ToSubClass;
qualifier bits:ToInstance ToSubClass;
qualifier key_order:ToInstance ToSubClass;
qualifier enumeration:ToInstance ToSubClass;
qualifier bits:ToInstance ToSubClass;
qualifier description:ToInstance ToSubClass;
qualifier display_hint:ToInstance ToSubClass;
qualifier defval:ToInstance ToSubClass;
qualifier units:ToInstance ToSubClass;
qualifier reference:ToInstance ToSubClass;
qualifier virtual_key:ToInstance ToSubClass;
qualifier rowstatus:ToInstance ToSubClass;
qualifier module_name:ToInstance ToSubClass;
qualifier module_imports:ToInstance ToSubClass;
qualifier group_objectid:ToInstance ToSubClass;

[abstract]
class SnmpMacro
{
};

[abstract]
class SnmpObjectType:SnmpMacro
{
};

class SnmpNotifyStatus:__ExtendedStatus
{
[write] sint32 SnmpStatusCode;
[write] string Description;
};

[description("The Adjacent Node Table.\nThere is one entry in the table for each adjacency."), module_name("DECNET-PHIV-MIB"), group_objectid("1.3.6.1.2.1.18.11"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_DECNET_PHIV_MIB_phivAdjNodeTable : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.18.11.2.1.3"), read, description("This read-only parameter is the block size that was\n            negotiated with the adjacent Routing layer during Routing\n            initialization over a particular circuit. It includes the\n            routing header, but excludes the data link header. This\n            parameter is qualified by ADJACENT NODE."), status("mandatory")] sint32 phivAdjNodeBlockSize;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("PhivAddr"), fixed_length(2), object_identifier("1.3.6.1.2.1.18.11.2.1.2"), read, description("The address of the adjacent node."), status("mandatory"), key, key_order(2)] string phivAdjAddr;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.18.11.2.1.4"), read, description("This value determines the maximum number of seconds\n            allowed to elapse before Routing receives some message\n            (either a Hello message or a user message) from the\n            adjacent node on the circuit. It was agreed during\n            Routing initialization with the adjacent Routing layer.\n            This parameter is qualified by ADJACENT NODE."), status("mandatory")] sint32 phivAdjNodeListenTimer;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.18.11.2.1.1"), read, description("A unique index value for each known circuit.  This\n            value is the same as phivCircuitIndex and identifies the\n            circuit over which the adjacency is realized."), status("mandatory"), key, key_order(1)] sint32 phivAdjNodeCircuitIndex;
	[textual_convention("EnumeratedINTEGER"), enumeration("routing-III(1),nonrouting-III(2),area(3),routing-IV(4),nonrouting-IV(5)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.18.11.2.1.6"), read, description("This parameter indicates the type of adjacency.\n\n            For adjacent nodes, this is a read-only parameter that\n            indicates the type of the reachable adjacent node.\n            NOTE: The routing-III and nonrouting-III values are\n            incremented by one compared to the standard DECnet\n            values in order to maintain compliance with RFC 1155)"), status("mandatory")] string phivAdjNodeType;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("OCTETSTRING"), fixed_length(6), object_identifier("1.3.6.1.2.1.18.11.2.1.5"), read, description("This parameter indicates the Ethernet physical address\n            of an adjacent node that is being serviced on this\n            circuit. This parameter is a qualifier for SERVICE\n            SUBSTATE."), status("mandatory")] string phivAdjNodeCircuitEtherServPhysAddr;
	[textual_convention("EnumeratedINTEGER"), enumeration("initializing(1),up(2),run(3),circuit-rejected(4),data-link-start(5),routing-layer-initialize(6),routing-layer-verify(7),routing-layer-complete(8),off(9),halt(10)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.18.11.2.1.7"), read, description("This value indicates the state of a router adjacency.\n            On adjacencies over a circuit of type\n            (phivCircuitCommonType) Ethernet, CI, or FDDI, with an\n            adjacent node of type (phivAdjNodeType) ROUTING IV or AREA,\n            this variable is the state of the Ethernet\n            Initialization Layer for this adjacency, and can have\n            values INITIALIZING or UP. (See Section 9.1.1 of\n            DECnet Phase IV Routing Layer Functional Specification.)\n\n            On adjacencies over a circuit of type\n            (phivCircuitCommonType) Ethernet, CI, or FDDI, with an\n            adjacent node of type (phivAdjNodeType) NONROUTING IV,\n            this variable will always take on the value UP.\n\n            On adjacencies over a circuit of type\n            (phivCircuitCommonType) DDCMP POINT, DDCMP CONTROL,\n            DDCMP TRIBUTARY, DDCMP DMC, or X.25, this variable is\n            the state of the Routing Layer Initialization Circuit\n            State. (See section 7.3, ibid.)  It can have values\n            between RUN and HALT.\n\n            On adjacencies over a circuit of type\n            (phivCircuitCommonType) OTHER, this variable may be\n            used in a manner consistent with the Initialization\n            Layer used on that circuit."), status("mandatory")] string phivAdjNodeState;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..255"), object_identifier("1.3.6.1.2.1.18.11.2.1.8"), read, description("Priority assigned by the adjacent node for this\n            circuit."), status("mandatory")] sint32 phivAdjNodePriority;
};
[description("The Adjacency Table.\nThere is one entry in the table for each adjacency."), module_name("DECNET-PHIV-MIB"), group_objectid("1.3.6.1.2.1.18.11"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_DECNET_PHIV_MIB_phivAdjTable : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.18.11.1.1.1"), read, description("A unique index value for each known circuit."), status("obsolete"), virtual_key, key, key_order(1)] sint32 phivAdjCircuitIndex;
};
[description(""), module_name("DECNET-PHIV-MIB"), singleton, group_objectid("1.3.6.1.2.1.18.3"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_DECNET_PHIV_MIB_session : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..65535"), object_identifier("1.3.6.1.2.1.18.3.3"), read, write, description("This value represents the duration between the time the\n            executor requests a connect and the time that connect is\n            acknowledged by the destination node. If the connect is\n            not acknowledged within the number of seconds\n            specified, Session Control returns an error.  A value of 0\n            indicates no timer is running."), status("mandatory")] sint32 phivSessionOutTimer;
	[textual_convention("DisplayString"), encoding("OCTETSTRING"), object_syntax("DisplayString"), variable_length("0..6"), object_identifier("1.3.6.1.2.1.18.3.1"), read, description("Name to be associated with the node identification.\n            Only one name can be assigned to a node address or a\n            circuit identification. No name should be used more than\n            once in a DECnet network. Node-name is one to six upper\n            case alphanumeric characters with at least one alpha\n            character. A length of 0 indicates no name."), status("mandatory")] string phivSessionSystemName;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..65535"), object_identifier("1.3.6.1.2.1.18.3.2"), read, write, description("This value represents the maximum duration between the\n            time a connect is received for a process at the\n            executor node and the time that process accepts or\n            rejects it. If the connect is not accepted or rejected\n            by the user within the number of seconds specified,\n            Session Control rejects it for the user.  A value of 0\n            indicates no timer is running."), status("mandatory")] sint32 phivSessionInTimer;
};
[description(""), module_name("DECNET-PHIV-MIB"), singleton, group_objectid("1.3.6.1.2.1.18.5"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_DECNET_PHIV_MIB_routing : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.18.5.13"), read, write, description("This parameter value determines the maximum size of an\n            end-to-end segment. The size is a decimal integer in\n            the range 1-65535. This size is in bytes. This size\n            includes protocol overhead down to and including the\n            End Communication layer, plus a constant value of 6.\n            (This value of 6 is included to provide compatibility\n            with the BUFFER SIZE parameter definition.) It does not\n            include Routing or Data link overhead (except for the\n            constant value of 6)."), status("mandatory")] sint32 phivRouteSegBuffSize;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.18.5.8"), read, write, description("This value represents the maximum number of Routing\n            circuits that the executor node can know about."), status("mandatory")] sint32 phivRouteMaxCircuits;
	[textual_convention("DisplayString"), encoding("OCTETSTRING"), object_syntax("DisplayString"), variable_length("0..255"), object_identifier("1.3.6.1.2.1.18.5.3"), read, description("This read-only parameter identifies the executor node's\n            Routing version number.  The format is version number,\n            ECO, and user ECO, e.g., 4.1.0"), status("mandatory")] string phivRouteRoutingVers;
	[textual_convention("EnumeratedINTEGER"), enumeration("routing-III(1),nonrouting-III(2),area(3),routing-IV(4),nonrouting-IV(5)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.18.5.25"), read, write, description("This read-write parameter indicates the type of the executor\n            node. The node-type is one of the following:\n\n            routing-III\n            nonrouting-III\n            routing-IV\n            ronrouting-IV\n            area\n\n            A routing node has full routing capability. A\n            nonrouting node contains a subset of the Routing\n            routing modules. The III and IV indicate the DNA\n            phase of the node. Nonrouting nodes can deliver\n            and receive packets to and from any node, but cannot\n            route packets from other nodes through to other nodes.\n            An area node routes between areas. Refer to the Routing\n            specification for details.\n\n            For adjacent nodes, this is a read-only parameter that\n            indicates the type of the reachable adjacent node.\n            NOTE: The ROUTING-III and NONROUTING-III values are\n            incremented by one compared to the standard DECnet\n            values in order to maintain compliance with RFC 1155)"), status("mandatory")] string phivRouteRoutingType;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.18.5.12"), read, write, description("This value determines the maximum time in seconds\n            allowed between Routing updates on non-Ethernet\n\n\n\n\n\n            circuits. When this timer expires before a routing\n            update occurs, a routing update is forced."), status("mandatory")] sint32 phivRouteRoutingTimer;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("PhivAddr"), fixed_length(2), object_identifier("1.3.6.1.2.1.18.5.26"), read, write, description("DECnet Phase IV node address."), status("mandatory")] string phivRouteSystemAddress;
	[textual_convention("EnumeratedINTEGER"), enumeration("other(1),reset(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.18.5.23"), read, write, description("When this value is set to 2, the following objects are\n            set to Zero: phivRouteCountAgedPktLoss,\n            phivRouteCountNodeUnrPktLoss,\n            phivRouteCountOutRngePktLoss,\n            phivRouteCountOverSzePktLoss,\n            phivRouteCountPacketFmtErr,\n            phivRouteCountPtlRteUpdtLoss, and\n            phivRouteCountVerifReject."), status("mandatory")] string phivRouteCountZeroCount;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PhivCounter"), variable_value("0..127"), object_identifier("1.3.6.1.2.1.18.5.15"), read, description("Number of aged packet losses."), status("mandatory")] sint32 phivRouteCountAgedPktLoss;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PhivCounter"), variable_value("0..127"), object_identifier("1.3.6.1.2.1.18.5.21"), read, description("Number of verification rejects."), status("mandatory")] sint32 phivRouteCountVerifReject;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..65535"), object_identifier("1.3.6.1.2.1.18.5.6"), read, write, description("This value represents the maximum total number of\n            routers the executor node can have on its Ethernet\n            circuits."), status("mandatory")] sint32 phivRouteMaxBdcastRouters;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..1023"), object_identifier("1.3.6.1.2.1.18.5.4"), read, write, description("This value represents the largest node number and,\n            therefore, number of nodes that can be known about\n            by the executor node's home area."), status("mandatory")] sint32 phivRouteMaxAddr;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..1022"), object_identifier("1.3.6.1.2.1.18.5.9"), read, write, description("This value represents the maximum total path cost\n            allowed from the executor to any node within an area.\n            The path cost is the sum of the circuit costs along\n            a path between two nodes. This parameter defines the\n            point where the executor node's Routing routing\n            decision algorithm declares another node unreachable\n            because the cost of the least costly path to the\n            other node is excessive. For correct operation, this\n            parameter must not be less than the maximum path cost\n            of the network."), status("mandatory")] sint32 phivRouteMaxCost;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..30"), object_identifier("1.3.6.1.2.1.18.5.10"), read, write, description("This value represents the maximum number of routing hops\n            allowable from the executor to any other reachable node\n            within an area. (A hop is the logical distance over a\n            circuit between two adjacent nodes.) This parameter\n            defines the point where the executor node's Routing\n            routing decision algorithm declares another node\n            unreachable because the length of the shortest path\n            between the two nodes is too long. For correct\n            operation, this parameter must not be less than the\n            network diameter. (The network diameter is the\n            reachability distance between the two nodes of the\n            network having the greatest reachability distance,\n            where reachability distance is the length the shortest\n            path between a given pair of nodes.)"), status("mandatory")] sint32 phivRouteMaxHops;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PhivCounter"), variable_value("0..127"), object_identifier("1.3.6.1.2.1.18.5.19"), read, description("Number of packet format errors."), status("mandatory")] sint32 phivRouteCountPacketFmtErr;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.18.5.7"), read, write, description("This value represents the maximum number of transmit\n            buffers that Routing may use for all circuits."), status("mandatory")] sint32 phivRouteMaxBuffs;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.18.5.2"), read, write, description("This parameter value determines the maximum size of\n             a Routing message. It therefore determines the maximum\n             size message that can be forwarded.  This size includes\n\n\n\n\n\n             protocol overhead down to and including the End\n             Communication layer, plus a constant value of 6. (This\n             value of 6 is included to provide compatibility with\n             the parameter definition in Phase III, which included\n             the Routing overhead.) It does not include Routing or\n             Data link overhead (except for the constant value of\n             6). There is one buffer size for all circuits.\n\n             NOTE: The BUFFER SIZE defines the maximum size messages\n             that the Routing layer can forward. The SEGMENT BUFFER\n             SIZE (defined below) defines the maximum size messages\n             that the End Communication layer can transmit or\n             receive. The SEGMENT BUFFER SIZE is always less than\n             or equal to the BUFFER SIZE. Normally the two\n             parameters will be equal. They may be different to\n             allow the network manager to alter buffer sizes\n             on all nodes without interruption of service. They both\n             include an extra 6 bytes for compatibility with Phase\n             III."), status("mandatory")] sint32 phivRouteBuffSize;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..63"), object_identifier("1.3.6.1.2.1.18.5.11"), read, write, description("This value represents the maximum number of nodes a\n            message coming into the executor node can have visited.\n            If the message is not for this node and the MAXIMUM\n            VISITS number is exceeded, the message is discarded.\n            The MAXIMUM VISITS parameter defines the point where\n            the packet lifetime control algorithm discards\n            a packet that has traversed too many nodes. For correct\n            operation, this parameter must not be less than the\n            maximum path length of the network. (The maximum path\n            length is the routing distance between the two nodes of\n            the network having the greatest routing distance, where\n            routing distance is the length of the least costly\n            path between a given pair of nodes.)"), status("mandatory")] sint32 phivRouteMaxVisits;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PhivCounter"), variable_value("0..65535"), object_identifier("1.3.6.1.2.1.18.5.16"), read, description("Number of node unreachable packet losses."), status("mandatory")] sint32 phivRouteCountNodeUnrPktLoss;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..65535"), object_identifier("1.3.6.1.2.1.18.5.5"), read, write, description("This value represents the maximum total number of\n            nonrouters the executor node can have on its Ethernet\n\n\n\n\n\n            circuits."), status("mandatory")] sint32 phivRouteMaxBdcastNonRouters;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PhivCounter"), variable_value("0..127"), object_identifier("1.3.6.1.2.1.18.5.17"), read, description("Number of node out-of-range packet losses."), status("mandatory")] sint32 phivRouteCountOutRngePktLoss;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PhivCounter"), variable_value("0..127"), object_identifier("1.3.6.1.2.1.18.5.20"), read, description("Number of partial routing update losses."), status("mandatory")] sint32 phivRouteCountPtlRteUpdtLoss;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.18.5.1"), read, write, description("This value determines the maximum time in seconds\n             allowed between Routing updates on Ethernet\n             circuits. When this timer expired before a routing\n             update occurs, a routing update is forced.  With a\n             standard calculation, Routing also uses this timer\n             to enforce a minimum delay between routing updates."), status("mandatory")] sint32 phivRouteBroadcastRouteTimer;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PhivCounter"), variable_value("0..127"), object_identifier("1.3.6.1.2.1.18.5.18"), read, description("Number of Oversized packet losses."), status("mandatory")] sint32 phivRouteCountOverSzePktLoss;
};
[description("Information about the currently known DECnet Phase\n            IV Routes.\nInformation about the currently known DECnet Phase\n            IV Routes."), module_name("DECNET-PHIV-MIB"), group_objectid("1.3.6.1.2.1.18.5"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_DECNET_PHIV_MIB_phivLevel1RouteTable : SnmpObjectType
{
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("PhivAddr"), fixed_length(2), object_identifier("1.3.6.1.2.1.18.5.22.1.1"), read, description("This value is the address of the node about which\n            routing information is contained in this level 1\n            routing table."), status("mandatory"), key, key_order(1)] string phivLevel1RouteNodeAddr;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("PhivAddr"), fixed_length(2), object_identifier("1.3.6.1.2.1.18.5.22.1.5"), read, description("This read-only value indicates the next node on the\n            circuit used to get to the node under scrutiny\n            (next hop)."), status("mandatory")] string phivLevel1RouteNextNode;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.18.5.22.1.2"), read, description("A unique index value for each known circuit. This is\n            the index to the circuit state table and is the same\n            value as phivCircuitIndex."), status("mandatory")] sint32 phivLevel1RouteCircuitIndex;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..65535"), object_identifier("1.3.6.1.2.1.18.5.22.1.3"), read, description("This read-only parameter represents the total cost\n            over the current path to the destination node. Cost is\n            a positive integer value associated with using a\n            circuit. Routing routes messages (data) along the path\n            between two nodes with the smallest cost. COST is kept\n            on a remote node basis."), status("mandatory")] sint32 phivLevel1RouteCost;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..127"), object_identifier("1.3.6.1.2.1.18.5.22.1.4"), read, description("This read-only parameter represents the number of hops\n            over to a destination node. A hop is Routing value\n            representing the logical distance between two nodes in\n            a network. HOPS is kept on a remote node basis."), status("mandatory")] sint32 phivLevel1RouteHops;
};
[description(""), module_name("DECNET-PHIV-MIB"), singleton, group_objectid("1.3.6.1.2.1.18.6"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_DECNET_PHIV_MIB_circuit : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.18.6.3"), read, write, description("This parameter indicates the maximum number of\n            originating packets that may be outstanding on this\n            circuit. This does not include route-thru traffic."), status("mandatory")] sint32 phivCircuitOrigQueueLimit;
	[textual_convention("EnumeratedINTEGER"), enumeration("other(1),reset(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.18.6.4"), read, write, description("When this value is set to 2, all of the counters in the\n            Circuit Counter Table are set to zero."), status("mandatory")] string phivCircuitCountZeroCount;
};
[description("Information about the counters associated with all\n            circuits currently known.\nCounter information about all circuits currently known"), module_name("DECNET-PHIV-MIB"), group_objectid("1.3.6.1.2.1.18.6"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_DECNET_PHIV_MIB_phivCircuitCountTable : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PhivCounter"), variable_value("0..2147483647"), object_identifier("1.3.6.1.2.1.18.6.2.1.7"), read, description("Number of transit packets sent on this circuit."), status("mandatory")] sint32 phivCircuitCountTransitPkSent;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PhivCounter"), variable_value("0..2147483647"), object_identifier("1.3.6.1.2.1.18.6.2.1.15"), read, description("Number of data blocks received on this circuit."), status("mandatory")] sint32 phivCircuitCountDataBlocksRecd;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PhivCounter"), variable_value("0..2147483647"), object_identifier("1.3.6.1.2.1.18.6.2.1.16"), read, description("Number of data blocks sent on this circuit."), status("mandatory")] sint32 phivCircuitCountDataBlocksSent;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PhivCounter"), variable_value("0..2147483647"), object_identifier("1.3.6.1.2.1.18.6.2.1.3"), read, description("Number of originating packets sent on this circuit."), status("mandatory")] sint32 phivCircuitCountOriginPackSent;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PhivCounter"), variable_value("0..2147483647"), object_identifier("1.3.6.1.2.1.18.6.2.1.6"), read, description("Number of Transit packets received on this circuit."), status("mandatory")] sint32 phivCircuitCountTransitPksRecd;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PhivCounter"), variable_value("0..2147483647"), object_identifier("1.3.6.1.2.1.18.6.2.1.2"), read, description("Number of terminating packets received on this circuit."), status("mandatory")] sint32 phivCircuitCountTermPacketsRecd;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PhivCounter"), variable_value("0..65535"), object_identifier("1.3.6.1.2.1.18.6.2.1.12"), read, description("This counter indicates the maximum number of nodes\n            that are up on the circuit."), status("mandatory")] sint32 phivCircuitCountPeakAdj;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PhivCounter"), variable_value("0..2147483647"), object_identifier("1.3.6.1.2.1.18.6.2.1.11"), read, description("This counter indicates the number of adjacency losses\n            that result from any of the following:\n                 Node listener timeout\n                 Invalid data received at node listener\n                 Unexpected control (initialization or verification)\n                     message received\n                 Routing message received with a checksum error\n                 Node identification from a routing message or a\n                 Hello message that is not the one expected Hello\n                 message received indicating that connectivity\n                 became one-way\n                 Adjacency idled."), status("mandatory")] sint32 phivCircuitCountAdjDown;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PhivCounter"), variable_value("0..65535"), object_identifier("1.3.6.1.2.1.18.6.2.1.8"), read, description("Number of transit congestion losses on this circuit."), status("mandatory")] sint32 phivCircuitCountTransitCongestLoss;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PhivCounter"), variable_value("0..2147483647"), object_identifier("1.3.6.1.2.1.18.6.2.1.13"), read, description("Number of bytes received on this circuit."), status("mandatory")] sint32 phivCircuitCountBytesRecd;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PhivCounter"), variable_value("0..2147483647"), object_identifier("1.3.6.1.2.1.18.6.2.1.14"), read, description("Number of bytes sent on this circuit."), status("mandatory")] sint32 phivCircuitCountBytesSent;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PhivCounter"), variable_value("0..65535"), object_identifier("1.3.6.1.2.1.18.6.2.1.17"), read, description("Number of user buffer unavailable errors."), status("mandatory")] sint32 phivCircuitCountUsrBuffUnav;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PhivCounter"), variable_value("0..255"), object_identifier("1.3.6.1.2.1.18.6.2.1.10"), read, description("Number of Initialization failures on this circuit."), status("mandatory")] sint32 phivCircuitCountInitFailure;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PhivCounter"), variable_value("0..255"), object_identifier("1.3.6.1.2.1.18.6.2.1.9"), read, description("Number of circuit downs on this circuit."), status("mandatory")] sint32 phivCircuitCountCircuitDown;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PhivCounter"), variable_value("0..255"), object_identifier("1.3.6.1.2.1.18.6.2.1.5"), read, description("Number of corruption losses on this circuit."), status("mandatory")] sint32 phivCircuitCountCorruptLoss;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PhivCounter"), variable_value("0..65535"), object_identifier("1.3.6.1.2.1.18.6.2.1.4"), read, description("Number of terminating congestion losses on this\n            circuit."), status("mandatory")] sint32 phivCircuitCountTermCongLoss;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PhivCounter"), variable_value("0..65535"), object_identifier("1.3.6.1.2.1.18.6.2.1.1"), read, description("Number of seconds since the circuit counters for this\n            circuit were last zeroed."), status("mandatory")] sint32 phivCircuitCountSecLastZeroed;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.18.6.1.1.1"), read, description("A unique index value for each known circuit."), status("mandatory"), virtual_key, key, key_order(1)] sint32 phivCircuitIndex;
};
[description("Information about the parameters associated with all\n            circuits currently known.\nParameters information about all circuits currently\n             known."), module_name("DECNET-PHIV-MIB"), group_objectid("1.3.6.1.2.1.18.6"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_DECNET_PHIV_MIB_phivCircuitParametersTable : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("InterfaceIndex"), object_identifier("1.3.6.1.2.1.18.6.1.1.2"), read, description("The line on which this circuit is active.  This is\n\n\n\n\n\n             the same as the ifIndex."), status("mandatory")] sint32 phivCircuitLineIndex;
	[textual_convention("DisplayString"), encoding("OCTETSTRING"), object_syntax("DisplayString"), variable_length("0..16"), object_identifier("1.3.6.1.2.1.18.6.1.1.5"), read, description("The name of the circuit entry in the table, for example,\n             SVA-0 or in a level 2 router ASYNC-8 or ETHER-1)."), status("mandatory")] string phivCircuitCommonName;
	[textual_convention("EnumeratedINTEGER"), enumeration("ddcmp-point(1),ddcmp-control(2),ddcmp-tributary(3),x25(4),ddcmp-dmc(5),ethernet(6),ci(7),qp2-dte20(8),bisync(9),other(14),fddi(15)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.18.6.1.1.7"), read, description("Represents the type of the circuit. For X.25 circuits,\n            the value must be set to X25. For DDCMP and Ethernet\n            circuits it is read only and is the same value as the\n            protocol of the associated line.\n            NOTE: Values 1 - 5 are incremented by one compared to the\n            standard DECnet values in order to maintain compliance\n            with RFC 1155."), status("mandatory")] string phivCircuitCommonType;
	[textual_convention("EnumeratedINTEGER"), enumeration("on(1),off(2),service(3),cleared(4)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.18.6.1.1.3"), read, write, description("This value represents the circuit's Network Management\n            operational state. NOTE: These values are incremented\n            by one compared to the standard DECnet values in order\n            to maintain compliance with RFC 1155."), status("mandatory")] string phivCircuitCommonState;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..8191"), object_identifier("1.3.6.1.2.1.18.6.1.1.10"), read, write, description("This value determines the frequency of Routing Hello\n            messages sent to the adjacent node on the circuit."), status("mandatory")] sint32 phivCircuitExecHelloTimer;
	[textual_convention("EnumeratedINTEGER"), enumeration("starting(1),reflecting(2),looping(3),loading(4),dumping(5),triggering(6),autoservice(7),autoloading(8),autodumping(9),autotriggering(10),synchronizing(11),failed(12),running(13)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.18.6.1.1.4"), read, description("This value represents the circuit's Network Management\n            operational and service substate. NOTE: These values are\n            incremented by one compared to the standard DECnet values\n            in order to maintain compliance with RFC 1155."), status("mandatory")] string phivCircuitCommonSubState;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..65535"), object_identifier("1.3.6.1.2.1.18.6.1.1.6"), read, write, description("This parameter represents the minimum number of\n            seconds to wait before restarting the circuit.  A\n            value of 0 indicates not timer is running."), status("mandatory")] sint32 phivCircuitExecRecallTimer;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.18.6.1.1.1"), read, description("A unique index value for each known circuit."), status("mandatory"), key, key_order(1)] sint32 phivCircuitIndex;
	[textual_convention("EnumeratedINTEGER"), enumeration("enabled(1),disabled(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.18.6.1.1.8"), read, write, description("This value indicates whether or not Network Management\n            allows service operations on a circuit. The values for\n            service-control are as follows:\n\n            ENABLED     SERVICE state and/or service functions are\n                        allowed.\n\n            DISABLED    SERVICE state and/or service functions are not\n                        allowed.\n\n            NOTE: These values are incremented by one compared to the\n            standard DECnet values in order to maintain compliance\n            with RFC 1155."), status("mandatory")] string phivCircuitService;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..25"), object_identifier("1.3.6.1.2.1.18.6.1.1.9"), read, write, description("This value represents the routing cost of the circuit.\n            Routing sends messages along the path between two nodes\n            having the smallest cost."), status("mandatory")] sint32 phivCircuitExecCost;
};
[description("Information about DDCMP circuit parameters.\nParameters information about DDCMP circuits currently\n             known."), module_name("DECNET-PHIV-MIB"), group_objectid("1.3.6.1.2.1.18.7"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_DECNET_PHIV_MIB_phivDDCMPCircuitParametersTable : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.18.7.1.1.1"), read, description("A unique index value for each known DDCMP circuit.\n            This is the same value as phivCircuitIndex."), status("mandatory"), key, key_order(1)] sint32 phivDDCMPCircuitIndex;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..255"), object_identifier("1.3.6.1.2.1.18.7.1.1.3"), read, description("This value represents the Data Link physical tributary\n            address of the circuit."), status("mandatory")] sint32 phivDDCMPCircuitTributary;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("PhivAddr"), fixed_length(2), object_identifier("1.3.6.1.2.1.18.7.1.1.2"), read, description("The address of the adjacent node."), status("mandatory")] string phivDDCMPCircuitAdjNodeAddr;
};
[description("Information about the DDCMP counters associated with all\n            circuits currently known.\nCounter information about DDCMP circuits now known"), module_name("DECNET-PHIV-MIB"), group_objectid("1.3.6.1.2.1.18.7"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_DECNET_PHIV_MIB_phivDDCMPCircuitCountTable : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PhivCounter"), variable_value("0..255"), object_identifier("1.3.6.1.2.1.18.7.2.1.6"), read, description("Number of local buffer errors."), status("mandatory")] sint32 phivDDCMPCircuitLocalBuffErrors;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PhivCounter"), variable_value("0..255"), object_identifier("1.3.6.1.2.1.18.7.2.1.3"), read, description("Number of remote reply timeouts."), status("mandatory")] sint32 phivDDCMPCircuitRmteReplyTimeouts;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PhivCounter"), variable_value("0..255"), object_identifier("1.3.6.1.2.1.18.7.2.1.4"), read, description("Number of local Reply timeouts."), status("mandatory")] sint32 phivDDCMPCircuitLocalReplyTimeouts;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PhivCounter"), variable_value("0..65535"), object_identifier("1.3.6.1.2.1.18.7.2.1.7"), read, description("Selection intervals that have elapsed."), status("mandatory")] sint32 phivDDCMPCircuitSelectIntervalsElap;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PhivCounter"), variable_value("0..255"), object_identifier("1.3.6.1.2.1.18.7.2.1.1"), read, description("Number of Data errors inbound."), status("mandatory")] sint32 phivDDCMPCircuitErrorsInbd;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PhivCounter"), variable_value("0..255"), object_identifier("1.3.6.1.2.1.18.7.2.1.2"), read, description("Number of outbound data errors."), status("mandatory")] sint32 phivDDCMPCircuitErrorsOutbd;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PhivCounter"), variable_value("0..255"), object_identifier("1.3.6.1.2.1.18.7.2.1.5"), read, description("Number of remote reply time out errors."), status("mandatory")] sint32 phivDDCMPCircuitRmteBuffErrors;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..255"), object_identifier("1.3.6.1.2.1.18.7.2.1.8"), read, description("Number of selection timeouts."), status("mandatory")] sint32 phivDDCMPCircuitSelectTimeouts;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.18.6.1.1.1"), read, description("A unique index value for each known circuit."), status("mandatory"), virtual_key, key, key_order(1)] sint32 phivCircuitIndex;
};
[description("The DDCMP Line Count Table.\nThere is one entry in the table for each line."), module_name("DECNET-PHIV-MIB"), group_objectid("1.3.6.1.2.1.18.7"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_DECNET_PHIV_MIB_phivDDCMPLineCountTable : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("InterfaceIndex"), object_identifier("1.3.6.1.2.1.18.7.3.1.1"), read, description("The line on which this entry's equivalence is\n            effective. The interface identified by a particular\n            value of this index is the same interface as\n            identified by the same value of phivLineIndex.\n            This value is the ifIndex."), status("mandatory"), key, key_order(1)] sint32 phivDDCMPLineCountIndex;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PhivCounter"), variable_value("0..255"), object_identifier("1.3.6.1.2.1.18.7.3.1.3"), read, description("Number of remote station errors."), status("mandatory")] sint32 phivDDCMPLineCountRmteStationErrs;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PhivCounter"), variable_value("0..255"), object_identifier("1.3.6.1.2.1.18.7.3.1.4"), read, description("Number of local station errors."), status("mandatory")] sint32 phivDDCMPLineCountLocalStationErrs;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PhivCounter"), variable_value("0..255"), object_identifier("1.3.6.1.2.1.18.7.3.1.2"), read, description("Number of data errors inbound."), status("mandatory")] sint32 phivDDCMPLineCountDataErrsIn;
};
[description("The Line Table.\nThere is one entry in the table for each line."), module_name("DECNET-PHIV-MIB"), group_objectid("1.3.6.1.2.1.18.12"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_DECNET_PHIV_MIB_phivLineTable : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..65535"), object_identifier("1.3.6.1.2.1.18.12.1.1.7"), read, description("This value represents the number of receive buffers\n            reserved for the line. It is a decimal number in\n            the range 0-65535.  0 is supported for those vendors\n            that do not reserve buffers on a per line basis and\n            use a pool of buffers that can be used by any line."), status("mandatory")] sint32 phivLineReceiveBuffs;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.18.12.1.1.9"), read, description("This value represents the amount of time in\n            milliseconds allowed to elapse before a Data Link\n            receive request completes while doing service\n            operations."), status("mandatory")] sint32 phivLineServiceTimer;
	[textual_convention("DisplayString"), encoding("OCTETSTRING"), object_syntax("DisplayString"), variable_length("0..16"), object_identifier("1.3.6.1.2.1.18.12.1.1.2"), read, description("The name of the line on this row of the table."), status("mandatory")] string phivLineName;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("InterfaceIndex"), object_identifier("1.3.6.1.2.1.18.12.1.1.1"), read, description("The line on which this entry's equivalence is effective.\n            This is the same as the ifIndex."), status("mandatory"), key, key_order(1)] sint32 phivLineIndex;
	[textual_convention("EnumeratedINTEGER"), enumeration("on(1),off(2),service(3),cleared(4)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.18.12.1.1.3"), read, description("This value represents Network Management operational\n            state.\n            NOTE that these values are incremented by one compared to\n            the standard DECnet values."), status("mandatory")] string phivLineState;
	[textual_convention("DisplayString"), encoding("OCTETSTRING"), object_syntax("DisplayString"), variable_length("0..16"), object_identifier("1.3.6.1.2.1.18.12.1.1.6"), read, description("This value represents the Physical Link device to be\n            used on the line."), status("mandatory")] string phivLineDevice;
	[textual_convention("EnumeratedINTEGER"), enumeration("starting(1),reflecting(2),looping(3),other(4)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.18.12.1.1.5"), read, description("This value represents the line's read-only Network\n            Management service.\n            NOTE that these values are incremented by one compared to\n            the standard DECnet values and OTHER is a new addition."), status("mandatory")] string phivLineService;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.18.12.1.1.10"), read, description("This value represents the Data Link maximum block\n            size on the line."), status("mandatory")] sint32 phivLineMaxBlock;
	[textual_convention("EnumeratedINTEGER"), enumeration("starting(1),reflecting(2),looping(3),loading(4),dumping(5),triggering(6),auto-service(7),auto-loading(8),auto-dumping(9),auto-triggering(10),synchronizing(11),failed(12),running(13)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.18.12.1.1.4"), read, description("This value represents the line's read-only Network\n            Management substate.\n            NOTE that these values are incremented by one compared to\n            the standard DECnet values."), status("mandatory")] string phivLineSubstate;
	[textual_convention("EnumeratedINTEGER"), enumeration("ddcmp-point(1),ddcmp-control(2),ddcmp-tributary(3),reserved(4),ddcmp-dmc(5),olapb(6),ethernet(7),ci(8),qp2(9),other(14),fddi(15)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.18.12.1.1.8"), read, description("This value represents the protocol used on the line\n            device.  Note that these values are incremented by\n            one compared to the standard DECnet values."), status("mandatory")] string phivLineProtocol;
};
[description(""), module_name("DECNET-PHIV-MIB"), singleton, group_objectid("1.3.6.1.2.1.18.15"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_DECNET_PHIV_MIB_area : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..1022"), object_identifier("1.3.6.1.2.1.18.15.2"), read, write, description("This value represents the maximum total path cost\n            allowed from the executor to any other level 2 routing\n            node. The AREA MAXIMUM COST number is decimal in the\n            range 1-1022. This parameter is only applicable if\n            the executor node is of type AREA."), status("mandatory")] sint32 phivAreaMaxCost;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..30"), object_identifier("1.3.6.1.2.1.18.15.3"), read, write, description("This value represents the maximum number of routing hops\n\n\n\n\n\n            allowable from the executor to any other level 2\n            routing node.  This parameter is only applicable if the\n            executor node is of type AREA."), status("mandatory")] sint32 phivAreaMaxHops;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..63"), object_identifier("1.3.6.1.2.1.18.15.4"), read, write, description("This value represents the largest area number and,\n            therefore, number of areas that can be known about\n            by the executor node's Routing. This parameter is only\n            applicable if the executor node is of type AREA."), status("mandatory")] sint32 phivRouteMaxArea;
};
[description("Table of information kept on all areas known to\n            this unit.\nThe area routing information."), module_name("DECNET-PHIV-MIB"), group_objectid("1.3.6.1.2.1.18.15"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_DECNET_PHIV_MIB_phivAreaTable : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.18.15.1.1.6"), read, description("A unique index value for each known circuit."), status("mandatory")] sint32 phivAreaCircuitIndex;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..64"), object_identifier("1.3.6.1.2.1.18.15.1.1.1"), read, description("This value indicates the area number of this entry."), status("mandatory"), key, key_order(1)] sint32 phivAreaNum;
	[textual_convention("Gauge"), encoding("Gauge"), object_syntax("Gauge"), object_identifier("1.3.6.1.2.1.18.15.1.1.3"), read, description("The total cost over the current path to the\n             destination area. Cost is a value associated with\n             using a circuit. Routing routes messages (data)\n             along the path between 2 areas with the smallest\n             cost."), status("mandatory")] uint32 phivAreaCost;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..255"), object_identifier("1.3.6.1.2.1.18.15.1.1.4"), read, description("The number of hops to a destination area. A hop is\n            the routing value representing the logical distance\n            between two areas in network."), status("mandatory")] sint32 phivAreaHops;
	[textual_convention("EnumeratedINTEGER"), enumeration("reachable(4),unreachable(5)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.18.15.1.1.2"), read, description("This value indicates the state of the area"), status("mandatory")] string phivAreaState;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("PhivAddr"), fixed_length(2), object_identifier("1.3.6.1.2.1.18.15.1.1.5"), read, description("The next node on the circuit used to get to the\n            area under scrutiny."), status("mandatory")] string phivAreaNextNode;
};
[description(""), module_name("DECNET-PHIV-MIB"), singleton, group_objectid("1.3.6.1.2.1.18.4"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_DECNET_PHIV_MIB_end : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PhivCounter"), variable_value("0..65535"), object_identifier("1.3.6.1.2.1.18.4.10"), read, write, description("This value represents the high water mark for the\n            number of links that were active at any one time."), status("mandatory")] sint32 phivEndMaxLinksActive;
	[textual_convention("EnumeratedINTEGER"), enumeration("other(1),reset(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.18.4.9"), read, write, description("When this value is set to 2, all of the counters in\n            the End System Counter Table are set to zero."), status("mandatory")] string phivEndCountZeroCount;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.18.4.8"), read, write, description("This value represents the maximum duration of inactivity\n            (no data in either direction) on a logical link before\n            the node checks to see if the logical link still works.\n            If no activity occurs within the minimum number of\n            seconds, End Communication generates artificial\n            traffic to test the link (End Communication\n            specification)."), status("mandatory")] sint32 phivEndInactivityTimer;
	[textual_convention("DisplayString"), encoding("OCTETSTRING"), object_syntax("DisplayString"), variable_length("0..255"), object_identifier("1.3.6.1.2.1.18.4.4"), read, description("This read-only parameter represents the version number\n            of the node End Communication S/W. The format is\n            version number, ECO, and user ECO, e.g., 4.1.0"), status("mandatory")] string phivEndNSPVers;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.18.4.5"), read, write, description("This value represents the maximum number of times the\n            source End Communication at the executor node will\n            restart the retransmission timer when it expires. If\n            the number is exceeded, Session Control disconnects the\n            logical link for the user."), status("mandatory")] sint32 phivEndRetransmitFactor;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.18.4.3"), read, write, description("This value represents the maximum active logical\n            link count allowed for the executor."), status("mandatory")] sint32 phivEndMaxLinks;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..255"), object_identifier("1.3.6.1.2.1.18.4.6"), read, write, description("This is the number by which to multiply one sixteenth\n            of the estimated round trip delay to a node to set the\n            retransmission timer to that node."), status("mandatory")] sint32 phivEndDelayFact;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..255"), object_identifier("1.3.6.1.2.1.18.4.7"), read, write, description("This number represents the weight to apply to a\n            current round trip delay estimate to a remote node\n            when updating the estimated round trip delay to a node.\n            On some systems the number must be 1 less than a power\n            of 2 for computational efficiency."), status("mandatory")] sint32 phivEndDelayWeight;
};
[description("Information about the counters associated with each end\n            system that is known to the entity. These counters\n            reflect totals from the perspective of the executor\n            node.\nInformation about a particular session between two end\n            systems."), module_name("DECNET-PHIV-MIB"), group_objectid("1.3.6.1.2.1.18.4"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_DECNET_PHIV_MIB_phivEndCountTable : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PhivCounter"), variable_value("0..65535"), object_identifier("1.3.6.1.2.1.18.4.2.1.14"), read, description("Number of received connect resource errors."), status("mandatory")] sint32 phivEndCountRecdConnectResErrs;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("PhivAddr"), fixed_length(2), object_identifier("1.3.6.1.2.1.18.4.2.1.1"), read, description("This value is the address of the remote node to be\n            evaluated."), status("mandatory"), key, key_order(1)] string phivEndCountHostNodeID;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PhivCounter"), variable_value("0..2147483647"), object_identifier("1.3.6.1.2.1.18.4.2.1.5"), read, description("Number of user messages received from the target host."), status("mandatory")] sint32 phivEndUCountUsrMessRec;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PhivCounter"), variable_value("0..2147483647"), object_identifier("1.3.6.1.2.1.18.4.2.1.3"), read, description("Number of user bytes received from the target host."), status("mandatory")] sint32 phivEndCountUsrBytesRec;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PhivCounter"), variable_value("0..2147483647"), object_identifier("1.3.6.1.2.1.18.4.2.1.6"), read, description("Number of user messages sent to the target host."), status("mandatory")] sint32 phivEndCountUsrMessSent;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PhivCounter"), variable_value("0..2147483647"), object_identifier("1.3.6.1.2.1.18.4.2.1.9"), read, description("Number of messages received from the target host."), status("mandatory")] sint32 phivEndCountTotalMessRec;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PhivCounter"), variable_value("0..65535"), object_identifier("1.3.6.1.2.1.18.4.2.1.11"), read, description("Number of connects received from the target host."), status("mandatory")] sint32 phivEndCountConnectsRecd;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PhivCounter"), variable_value("0..65535"), object_identifier("1.3.6.1.2.1.18.4.2.1.12"), read, description("Number of connects sent to the target host."), status("mandatory")] sint32 phivEndCountConnectsSent;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PhivCounter"), variable_value("0..2147483647"), object_identifier("1.3.6.1.2.1.18.4.2.1.4"), read, description("Number of user bytes sent to the target host."), status("mandatory")] sint32 phivEndCountUsrBytesSent;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PhivCounter"), variable_value("0..2147483647"), object_identifier("1.3.6.1.2.1.18.4.2.1.7"), read, description("Number of bytes received from the target host."), status("mandatory")] sint32 phivEndCountTotalBytesRec;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PhivCounter"), variable_value("0..2147483647"), object_identifier("1.3.6.1.2.1.18.4.2.1.10"), read, description("Number of messages sent to the target host."), status("mandatory")] sint32 phivEndCountTotalMessSent;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PhivCounter"), variable_value("0..65535"), object_identifier("1.3.6.1.2.1.18.4.2.1.2"), read, description("This value is the number of seconds that have elapsed\n            since the counters for the node in this table row were\n            last set to zero. This counter is located in the\n            network management layer, but is returned with the\n            end system information which follows."), status("mandatory")] sint32 phivEndCountSecsLastZeroed;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PhivCounter"), variable_value("0..2147483647"), object_identifier("1.3.6.1.2.1.18.4.2.1.8"), read, description("Number of bytes sent to the target host."), status("mandatory")] sint32 phivEndCountTotalBytesSent;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PhivCounter"), variable_value("0..65535"), object_identifier("1.3.6.1.2.1.18.4.2.1.13"), read, description("Number of response timeouts."), status("mandatory")] sint32 phivEndCountReponseTimeouts;
};
[description("Information about the state of sessions between the\n            node under study and the nodes found in the table.\nInformation about a particular remote node as seen\n            from the end communication layer."), module_name("DECNET-PHIV-MIB"), group_objectid("1.3.6.1.2.1.18.4"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_DECNET_PHIV_MIB_phivEndRemoteTable : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..65535"), object_identifier("1.3.6.1.2.1.18.4.1.1.5"), read, description("This read-only parameter is the average round trip\n            delay in seconds to the destination node. This\n            parameter is kept on a remote node basis."), status("mandatory")] sint32 phivEndDelay;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("PhivAddr"), fixed_length(2), object_identifier("1.3.6.1.2.1.18.4.1.1.1"), read, description("This value is the address of the remote node to be\n            evaluated."), status("mandatory"), key, key_order(1)] string phivEndRemoteHostNodeID;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..65535"), object_identifier("1.3.6.1.2.1.18.4.1.1.4"), read, description("This read-only parameter represents the number of active\n            logical links from the executor to the destination node."), status("mandatory")] sint32 phivEndActiveLinks;
	[textual_convention("EnumeratedINTEGER"), enumeration("on(1),off(2),shut(3),restricted(4)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.18.4.1.1.2"), read, write, description("This represents the operational state of the remote node\n\n\n\n\n\n            being evaluated.\n            The possible states are:\n\n            ON          Allows logical links.\n            OFF         Allows no new links, terminates existing\n                        links, and stops routing traffic through.\n            SHUT        Allows no new logical links, does not\n                        destroy existing logical links, and goes\n                        to the OFF state when all logical links are\n                        gone.\n            RESTRICTED  Allows no new incoming logical links from\n                        other nodes.\n\n            NOTE: These values are incremented by one compared to\n            the standard DECnet values in order to maintain\n            compliance with RFC 1155."), status("mandatory")] string phivEndRemoteState;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.18.4.1.1.3"), read, description("A unique index value for each known circuit used to\n            communicate with the remote node.  This is the same\n            value as phivCircuitIndex."), status("mandatory")] sint32 phivEndCircuitIndex;
};
[description(""), module_name("DECNET-PHIV-MIB"), singleton, group_objectid("1.3.6.1.2.1.18.8"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_DECNET_PHIV_MIB_control : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.18.8.2"), read, description("This value represents the number of milliseconds\n            between polls of one of the set of dead\n            tributaries."), status("mandatory"), defval("10000")] sint32 phivControlDeadTimer;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("50..65535"), object_identifier("1.3.6.1.2.1.18.8.1"), read, description("This value represents the number of milliseconds\n            between recalculation of tributary polling priorities."), status("mandatory"), defval("200")] sint32 phivControlSchedTimer;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.18.8.3"), read, description("This value represents the minimum number of\n            milliseconds to delay between polls. The delay timer\n            limits the effect of a very fast control station on\n            slow tributaries."), status("mandatory")] sint32 phivControlDelayTimer;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..65535"), object_identifier("1.3.6.1.2.1.18.8.4"), read, description("This value represents the number of milliseconds a\n            tributary or a half duplex remote station is\n            allowed to hold the line.\n\n            NOTE: This parameter can also be applied to\n            half-duplex lines of type DDCMP POINT."), status("mandatory"), defval("6000")] sint32 phivControlStreamTimer;
};
[description("Information about control circuit parameters.\nParameters information about control circuits\n            currently known."), module_name("DECNET-PHIV-MIB"), group_objectid("1.3.6.1.2.1.18.8"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_DECNET_PHIV_MIB_phivControlParametersTable : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..255"), object_identifier("1.3.6.1.2.1.18.8.5.1.5"), read, write, description("This value represents the base priority to which a\n            tributary is reset each time it has been polled. A\n            separate base can be set for each of the indicated\n            polling states. Base is a decimal integer in the range\n            0-255.  If not set, the defaults are: active, 255;\n            inactive, 0; and dying, 0."), status("mandatory")] sint32 phivControlDyingBase;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..65535"), object_identifier("1.3.6.1.2.1.18.8.5.1.12"), read, write, description("This value represents the number of milliseconds to\n            delay between data message transmits. Milliseconds is\n            a decimal integer in the range 0-65535."), status("mandatory"), defval("0")] sint32 phivControlTransTimer;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.18.8.5.1.2"), read, write, description("This value represents the number of milliseconds that a\n            selected tributary or remote half-duplex station is\n            allowed to transmit."), status("mandatory"), defval("6000")] sint32 phivControlBabbleTimer;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.18.8.5.1.1"), read, description("A unique index value for each known multipoint\n            control circuit.\n            This is the same value as phivCircuitIndex."), status("mandatory"), key, key_order(1)] sint32 phivControlCircuitIndex;
	[textual_convention("EnumeratedINTEGER"), enumeration("automatic(1),active(2),inactive(3),dying(4),dead(5)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.18.8.5.1.10"), read, write, description("This value represents the state of the tributary\n            relative to the multipoint polling algorithm.  If not\n            set the default is AUTOMATIC. The possible states are:\n\n\n\n\n\n\n            AUTOMATIC\n\n              The tributary's state is allowed to vary according to\n              the operation of the polling algorithm.\n\n            ACTIVE/INACTIVE/DYING/DEAD\n\n              The tributary is locked in the specified state.\n\n             NOTE: These values are incremented by one compared to\n             the standard DECnet values in order to maintain\n             compliance with RFC 1155."), status("mandatory")] string phivControlPollingState;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..255"), object_identifier("1.3.6.1.2.1.18.8.5.1.4"), read, write, description("This value represents the maximum number of data\n            messages that can be transmitted at one time. Count\n            is a decimal integer in the range 1-255."), status("mandatory"), defval("4")] sint32 phivControlMaxTransmits;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..255"), object_identifier("1.3.6.1.2.1.18.8.5.1.7"), read, write, description("This value represents the number of times to poll the\n            active, inactive, or dying tributary before changing\n            its polling state to dead because of receive timeouts.\n            Count is a decimal integer in the range 0-255."), status("mandatory"), defval("8")] sint32 phivControlDeadThreshold;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..255"), object_identifier("1.3.6.1.2.1.18.8.5.1.9"), read, write, description("This value represents the number of times to poll the\n            active tributary before changing its polling state to\n            inactive because of no data response. Count is a\n            decimal integer in the range\n            0-255."), status("mandatory"), defval("8")] sint32 phivControlInactTreshold;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..255"), object_identifier("1.3.6.1.2.1.18.8.5.1.6"), read, write, description("This value represents the increment added to the\n            tributary priority each time the scheduling timer\n            expires.  If not set, the defaults are: active, 0;\n            inactive, 64; and dying, 16."), status("mandatory")] sint32 phivControlDyingIncrement;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..255"), object_identifier("1.3.6.1.2.1.18.8.5.1.8"), read, write, description("This value represents the number of times to poll the\n            active or inactive tributary before changing its\n            polling state to dying because of receive timeouts.\n            Count is a decimal integer in the range 0-255."), status("mandatory"), defval("2")] sint32 phivControlDyingThreshold;
	[textual_convention("EnumeratedINTEGER"), enumeration("active(1),inactive(2),dying(3),dead(4)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.18.8.5.1.11"), read, description("This value represents the tributary's state as\n            determined by the polling algorithm.  This applies\n            only when the polling state is AUTOMATIC and is\n            read-only to Network Management.  Polling-substate is\n            one of ACTIVE, INACTIVE, DYING, or DEAD.  It is\n            displayed as a tag on the polling state, for example:\n            AUTOMATIC-INACTIVE."), status("mandatory")] string phivControlPollingSubState;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..254"), object_identifier("1.3.6.1.2.1.18.8.5.1.3"), read, write, description("This value represents the maximum number of buffers the\n            tributary can use from a common buffer pool. If not\n            set, there is no common buffer pool and buffers are\n            explicitly supplied by the higher level. Count is a\n            decimal integer in the range 1-254."), status("mandatory")] sint32 phivControlMaxBuffs;
};
[description(""), module_name("DECNET-PHIV-MIB"), singleton, group_objectid("1.3.6.1.2.1.18.1"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_DECNET_PHIV_MIB_phivSystem : SnmpObjectType
{
	[textual_convention("DisplayString"), encoding("OCTETSTRING"), object_syntax("DisplayString"), variable_length("0..32"), object_identifier("1.3.6.1.2.1.18.1.2"), read, write, description("This is a text string that describes the executor node\n            (for example, 'Research Lab').  The string is up to 32\n            characters of any type."), status("mandatory")] string phivExecIdent;
	[textual_convention("EnumeratedINTEGER"), enumeration("on(1),off(2),shut(3),restricted(4)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.18.1.1"), read, write, description("This represents the operational state of the executor\n            node.\n            The possible states are:\n            ON          Allows logical links.\n            OFF         Allows no new links, terminates existing\n                        links, and stops routing traffic through.\n            SHUT        Allows no new logical links, does not\n                        destroy existing logical links, and goes\n                        to the OFF state when all logical links are\n                        gone.\n\n\n\n\n\n            RESTRICTED  Allows no new incoming logical links from\n                        other nodes.\n\n            NOTE: These values are incremented by one compared to\n            the standard DECnet values in order to maintain\n            compliance with RFC 1155)."), status("mandatory")] string phivSystemState;
};
[description("Information about ethernet link counters.\nCounter information about ethernet links currently\n            known."), module_name("DECNET-PHIV-MIB"), group_objectid("1.3.6.1.2.1.18.10"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_DECNET_PHIV_MIB_phivCountersCountTable : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PhivCounter"), variable_value("0..2147483647"), object_identifier("1.3.6.1.2.1.18.10.1.1.10"), read, description("Number of multicast blocks received over this link."), status("mandatory")] sint32 phivCountersCountMcastBlksRecd;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..65535"), object_identifier("1.3.6.1.2.1.18.10.1.1.17"), read, description("Number of unrecognized frame destinations over this\n            link."), status("mandatory")] sint32 phivCountersCountUnrecFrameDest;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PhivCounter"), variable_value("0..65535"), object_identifier("1.3.6.1.2.1.18.10.1.1.6"), read, description("Number of user buffer unavailable errors over this\n            link."), status("mandatory")] sint32 phivCountersCountEthUsrBuffUnav;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PhivCounter"), variable_value("0..2147483647"), object_identifier("1.3.6.1.2.1.18.10.1.1.7"), read, description("Number of multicast bytes received over this link."), status("mandatory")] sint32 phivCountersCountMcastBytesRecd;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..65535"), object_identifier("1.3.6.1.2.1.18.10.1.1.16"), read, description("Number of receive failures over this link."), status("mandatory")] sint32 phivCountersCountReceiveFailure;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PhivCounter"), variable_value("0..2147483647"), object_identifier("1.3.6.1.2.1.18.10.1.1.13"), read, description("Number of blocks sent, multiple collisions over this\n            link."), status("mandatory")] sint32 phivCountersCountBlksSentMultCol;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PhivCounter"), variable_value("0..2147483647"), object_identifier("1.3.6.1.2.1.18.10.1.1.12"), read, description("Number of blocks sent, single collision over this link."), status("mandatory")] sint32 phivCountersCountBlksSentSingleCol;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..65535"), object_identifier("1.3.6.1.2.1.18.10.1.1.15"), read, description("Number of collision detect check failures over this\n             link."), status("mandatory")] sint32 phivCountersCountCollDetectFailure;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..65535"), object_identifier("1.3.6.1.2.1.18.10.1.1.18"), read, description("Number of data overruns over this link."), status("mandatory")] sint32 phivCountersCountDataOver;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PhivCounter"), variable_value("0..2147483647"), object_identifier("1.3.6.1.2.1.18.10.1.1.2"), read, description("Number of bytes received over this link."), status("mandatory")] sint32 phivCountersCountBytesRecd;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PhivCounter"), variable_value("0..2147483647"), object_identifier("1.3.6.1.2.1.18.10.1.1.3"), read, description("Number of bytes sent over this link."), status("mandatory")] sint32 phivCountersCountBytesSent;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("InterfaceIndex"), object_identifier("1.3.6.1.2.1.18.10.1.1.1"), read, description("The interface to which these counters apply.  This is\n            the same interface as identified by the same value of\n            phivLineIndex. This value is the ifIndex."), status("mandatory"), key, key_order(1)] sint32 phivCountersIndex;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PhivCounter"), variable_value("0..2147483647"), object_identifier("1.3.6.1.2.1.18.10.1.1.11"), read, description("Number of blocks sent, initially deferred over this\n            link."), status("mandatory")] sint32 phivCountersCountBlksSentDef;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..65535"), object_identifier("1.3.6.1.2.1.18.10.1.1.14"), read, description("Number of send failures over this link."), status("mandatory")] sint32 phivCountersCountSendFailure;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..65535"), object_identifier("1.3.6.1.2.1.18.10.1.1.20"), read, description("Number of user buffer unavailables."), status("mandatory")] sint32 phivCountersCountUsrBuffUnav;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..65535"), object_identifier("1.3.6.1.2.1.18.10.1.1.19"), read, description("Number of system buffer unavailables over this link."), status("mandatory")] sint32 phivCountersCountSysBuffUnav;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PhivCounter"), variable_value("0..2147483647"), object_identifier("1.3.6.1.2.1.18.10.1.1.8"), read, description("Number of data blocks received over this link."), status("mandatory")] sint32 phivCountersCountDataBlksRecd;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PhivCounter"), variable_value("0..2147483647"), object_identifier("1.3.6.1.2.1.18.10.1.1.9"), read, description("Number of data blocks sent over this link."), status("mandatory")] sint32 phivCountersCountDataBlksSent;
};
[description("The Non Broadcast Table.\nThere is one entry in the table for each\n            Non Broadcast line."), module_name("DECNET-PHIV-MIB"), group_objectid("1.3.6.1.2.1.18.14"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_DECNET_PHIV_MIB_phivNonBroadcastTable : SnmpObjectType
{
	[textual_convention("EnumeratedINTEGER"), enumeration("external(1),internal(2),other(3)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.18.14.1.1.4"), read, description("This value represents the Physical Link hardware clock\n            mode for the line device. The values for clock-mode are:\n\n\n\n\n\n\n            INTERNAL For software controllable loopback use of\n            the clock. On those devices that can support this\n            mode, it causes the device to supply a clock signal\n            such that a transmitted messages can be looped\n            back from outside the device. This may require manual\n            intervention other than the setting of this parameter\n            value. For example, the operator may have to connect\n            a loopback plug in place of the normal line.\n\n            EXTERNAL For normal clock operating mode, where the\n            clock signal is supplied externally to the controller.\n            Note that these values are incremented by one compared to\n            the standard DECnet values."), status("mandatory")] string phivNonBroadcastClock;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("InterfaceIndex"), object_identifier("1.3.6.1.2.1.18.14.1.1.1"), read, description("The Non Broadcast line on which this entry's\n            equivalence is effective.  This is the same value\n            as the ifIndex."), status("mandatory"), key, key_order(1)] sint32 phivNonBroadcastIndex;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.18.14.1.1.5"), read, description("This value represents number of milliseconds before\n            the Data Link retransmits a block on the line. On\n            half-duplex lines, this parameter is the select timer."), status("mandatory"), defval("3000")] sint32 phivNonBroadcastRetransmitTimer;
	[textual_convention("EnumeratedINTEGER"), enumeration("full(1),half(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.18.14.1.1.3"), read, description("This value represents the Physical Link hardware\n            duplex mode of the line device. The possible modes\n            are:\n\n            FULL   Full-duplex\n            HALF   Half-duplex\n\n            Note that these values are incremented by one compared to\n            the standard DECnet values."), status("mandatory")] string phivNonBroadcastDuplex;
	[textual_convention("EnumeratedINTEGER"), enumeration("normal(1),loopback(2),other(3)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.18.14.1.1.2"), read, description("This value represents the Physical Link hardware\n            controller mode for the line device. The values\n            for controller-mode are:\n\n            NORMAL  For normal controller operating mode.\n\n            LOOPBACK For software controllable loopback of the\n            controller. On those devices that can support this\n            mode, it causes all transmitted messages to be looped\n            back from within the controller itself. This is\n            accomplished without any manual intervention other\n            than the setting of this parameter value.\n\n            OTHER indicates function is not supported\n            Note that these values are incremented by one compared to\n            the standard DECnet values."), status("mandatory")] string phivNonBroadcastController;
};
[description(""), module_name("DECNET-PHIV-MIB"), singleton, group_objectid("1.3.6.1.2.1.18.2"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_DECNET_PHIV_MIB_phivManagement : SnmpObjectType
{
	[textual_convention("DisplayString"), encoding("OCTETSTRING"), object_syntax("DisplayString"), variable_length("0..255"), object_identifier("1.3.6.1.2.1.18.2.1"), read, description("This is the read-only Network Management Version,\n            consisting of the version number, the Engineering\n            Change Order (ECO) number, and the user ECO number\n            (for example, 3.0.0). This parameter applies to the\n            executor node only."), status("mandatory")] string phivMgmtMgmtVers;
};
[description("Information about ethernet link parameters.\nParameter information about ethernet links currently\n            known."), module_name("DECNET-PHIV-MIB"), group_objectid("1.3.6.1.2.1.18.9"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_DECNET_PHIV_MIB_phivEthLinkParametersTable : SnmpObjectType
{
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("PhivAddr"), fixed_length(2), object_identifier("1.3.6.1.2.1.18.9.1.1.2"), read, description("This value is the address of the designated router."), status("mandatory")] string phivEthDesigRouterNodeAddr;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.18.9.1.1.1"), read, description("The circuit over which this links information is\n            collected.  This is the same as phivCircuitIndex."), status("mandatory"), key, key_order(1)] sint32 phivEthLinkIndex;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..127"), object_identifier("1.3.6.1.2.1.18.9.1.1.4"), read, write, description("This parameter is the priority that this router is to\n             have in the selection of designated router for the\n             circuit on circuits that are owned by the executor\n             node."), status("mandatory"), defval("64")] sint32 phivEthRouterPri;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..255"), object_identifier("1.3.6.1.2.1.18.9.1.1.3"), read, write, description("This parameter is the maximum number of routers (other\n             than the executor itself) allowed on the circuit by\n             Routing for circuits that are owned by the executor\n             node."), status("mandatory")] sint32 phivEthMaxRouters;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("OCTETSTRING"), fixed_length(6), object_identifier("1.3.6.1.2.1.18.9.1.1.5"), read, description("This read-only parameter is the address that is\n            associated with the line device hardware as seen by\n            the DECnet Software.  This value is not the same as\n            ifPhysAddress."), status("mandatory")] string phivEthHardwareAddr;
};

