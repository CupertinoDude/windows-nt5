// Copyright (c) 1997-2001 Microsoft Corporation, All Rights Reserved
//	MOF Generated for module "RFC1213-MIB" by smi2smir version 1.10.635.0000
qualifier write:ToInstance ToSubClass;
qualifier read:ToInstance ToSubClass;
qualifier provider:ToInstance ToSubClass;
qualifier singleton:ToInstance ToSubClass;
qualifier dynamic:ToInstance ToSubClass;
qualifier textual_convention:ToInstance ToSubClass;
qualifier object_identifier:ToInstance ToSubClass;
qualifier encoding:ToInstance ToSubClass;
qualifier object_syntax:ToInstance ToSubClass;
qualifier status:ToInstance ToSubClass;
qualifier fixed_length:ToInstance ToSubClass;
qualifier variable_length:ToInstance ToSubClass;
qualifier variable_value:ToInstance ToSubClass;
qualifier bits:ToInstance ToSubClass;
qualifier key_order:ToInstance ToSubClass;
qualifier enumeration:ToInstance ToSubClass;
qualifier bits:ToInstance ToSubClass;
qualifier description:ToInstance ToSubClass;
qualifier display_hint:ToInstance ToSubClass;
qualifier defval:ToInstance ToSubClass;
qualifier units:ToInstance ToSubClass;
qualifier reference:ToInstance ToSubClass;
qualifier virtual_key:ToInstance ToSubClass;
qualifier rowstatus:ToInstance ToSubClass;
qualifier module_name:ToInstance ToSubClass;
qualifier module_imports:ToInstance ToSubClass;
qualifier group_objectid:ToInstance ToSubClass;

[abstract]
class SnmpMacro
{
};

[abstract]
class SnmpObjectType:SnmpMacro
{
};

class SnmpNotifyStatus:__ExtendedStatus
{
[write] sint32 SnmpStatusCode;
[write] string Description;
};

[description(""), module_name("RFC1213-MIB"), singleton, group_objectid("1.3.6.1.2.1.11"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_RFC1213_MIB_snmp : SnmpObjectType
{
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.11.28"), read, description("The total number of SNMP Get-Response PDUs which\n                      have been generated by the SNMP protocol entity."), status("mandatory")] uint32 snmpOutGetResponses;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.11.1"), read, description("The total number of Messages delivered to the\n                      SNMP entity from the transport service."), status("mandatory")] uint32 snmpInPkts;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.11.19"), read, description("The total number of SNMP Trap PDUs which have\n                      been accepted and processed by the SNMP protocol\n                      entity."), status("mandatory")] uint32 snmpInTraps;
	[textual_convention("EnumeratedINTEGER"), enumeration("enabled(1),disabled(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.11.30"), read, write, description("Indicates whether the SNMP agent process is\n                      permitted to generate authentication-failure\n                      traps.  The value of this object overrides any\n                      configuration information; as such, it provides a\n                      means whereby all authentication-failure traps may\n                      be disabled.\n\n                      Note that it is strongly recommended that this\n                      object be stored in non-volatile memory so that it\n                      remains constant between re-initializations of the\n                      network management system."), status("mandatory")] string snmpEnableAuthenTraps;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.11.2"), read, description("The total number of SNMP Messages which were\n                      passed from the SNMP protocol entity to the\n                      transport service."), status("mandatory")] uint32 snmpOutPkts;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.11.5"), read, description("The total number of SNMP Messages delivered to\n                      the SNMP protocol entity which represented an SNMP\n                      operation which was not allowed by the SNMP\n                      community named in the Message."), status("mandatory")] uint32 snmpInBadCommunityUses;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.11.29"), read, description("The total number of SNMP Trap PDUs which have\n                      been generated by the SNMP protocol entity."), status("mandatory")] uint32 snmpOutTraps;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.11.12"), read, description("The total number of SNMP PDUs which were\n                      delivered to the SNMP protocol entity and for\n                      which the value of the error-status field is\n                      `genErr'."), status("mandatory")] uint32 snmpInGenErrs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.11.8"), read, description("The total number of SNMP PDUs which were\n                      delivered to the SNMP protocol entity and for\n                      which the value of the error-status field is\n                      `tooBig'."), status("mandatory")] uint32 snmpInTooBigs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.11.4"), read, description("The total number of SNMP Messages delivered to\n                      the SNMP protocol entity which used a SNMP\n                      community name not known to said entity."), status("mandatory")] uint32 snmpInBadCommunityNames;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.11.16"), read, description("The total number of SNMP Get-Next PDUs which have\n                      been accepted and processed by the SNMP protocol\n                      entity."), status("mandatory")] uint32 snmpInGetNexts;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.11.24"), read, description("The total number of SNMP PDUs which were\n                      generated by the SNMP protocol entity and for\n                      which the value of the error-status field is\n                      `genErr'."), status("mandatory")] uint32 snmpOutGenErrs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.11.20"), read, description("The total number of SNMP PDUs which were\n                      generated by the SNMP protocol entity and for\n                      which the value of the error-status field is\n                      `tooBig.'"), status("mandatory")] uint32 snmpOutTooBigs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.11.10"), read, description("The total number of SNMP PDUs which were\n                      delivered to the SNMP protocol entity and for\n                      which the value of the error-status field is\n                      `badValue'."), status("mandatory")] uint32 snmpInBadValues;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.11.11"), read, description("The total number valid SNMP PDUs which were\n                      delivered to the SNMP protocol entity and for\n                      which the value of the error-status field is\n                      `readOnly'.  It should be noted that it is a\n                      protocol error to generate an SNMP PDU which\n                      contains the value `readOnly' in the error-status\n                      field, as such this object is provided as a means\n                      of detecting incorrect implementations of the\n                      SNMP."), status("mandatory")] uint32 snmpInReadOnlys;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.11.26"), read, description("The total number of SNMP Get-Next PDUs which have\n                      been generated by the SNMP protocol entity."), status("mandatory")] uint32 snmpOutGetNexts;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.11.22"), read, description("The total number of SNMP PDUs which were\n                      generated by the SNMP protocol entity and for\n                      which the value of the error-status field is\n                      `badValue'."), status("mandatory")] uint32 snmpOutBadValues;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.11.9"), read, description("The total number of SNMP PDUs which were\n                      delivered to the SNMP protocol entity and for\n                      which the value of the error-status field is\n                      `noSuchName'."), status("mandatory")] uint32 snmpInNoSuchNames;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.11.3"), read, description("The total number of SNMP Messages which were\n                      delivered to the SNMP protocol entity and were for\n                      an unsupported SNMP version."), status("mandatory")] uint32 snmpInBadVersions;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.11.6"), read, description("The total number of ASN.1 or BER errors\n                      encountered by the SNMP protocol entity when\n                      decoding received SNMP Messages."), status("mandatory")] uint32 snmpInASNParseErrs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.11.15"), read, description("The total number of SNMP Get-Request PDUs which\n                      have been accepted and processed by the SNMP\n                      protocol entity."), status("mandatory")] uint32 snmpInGetRequests;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.11.17"), read, description("The total number of SNMP Set-Request PDUs which\n                      have been accepted and processed by the SNMP\n                      protocol entity."), status("mandatory")] uint32 snmpInSetRequests;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.11.21"), read, description("The total number of SNMP PDUs which were\n                      generated by the SNMP protocol entity and for\n                      which the value of the error-status is\n                      `noSuchName'."), status("mandatory")] uint32 snmpOutNoSuchNames;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.11.13"), read, description("The total number of MIB objects which have been\n                      retrieved successfully by the SNMP protocol entity\n                      as the result of receiving valid SNMP Get-Request\n                      and Get-Next PDUs."), status("mandatory")] uint32 snmpInTotalReqVars;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.11.14"), read, description("The total number of MIB objects which have been\n                      altered successfully by the SNMP protocol entity\n                      as the result of receiving valid SNMP Set-Request\n                      PDUs."), status("mandatory")] uint32 snmpInTotalSetVars;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.11.18"), read, description("The total number of SNMP Get-Response PDUs which\n                      have been accepted and processed by the SNMP\n                      protocol entity."), status("mandatory")] uint32 snmpInGetResponses;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.11.25"), read, description("The total number of SNMP Get-Request PDUs which\n                      have been generated by the SNMP protocol entity."), status("mandatory")] uint32 snmpOutGetRequests;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.11.27"), read, description("The total number of SNMP Set-Request PDUs which\n                      have been generated by the SNMP protocol entity."), status("mandatory")] uint32 snmpOutSetRequests;
};
[description(""), module_name("RFC1213-MIB"), singleton, group_objectid("1.3.6.1.2.1.4"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_RFC1213_MIB_ip : SnmpObjectType
{
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.4.18"), read, description("The number of IP datagrams that have been\n                      discarded because they needed to be fragmented at\n                      this entity but could not be, e.g., because their\n                      Don't Fragment flag was set."), status("mandatory")] uint32 ipFragFails;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.4.2"), read, write, description("The default value inserted into the Time-To-Live\n                      field of the IP header of datagrams originated at\n                      this entity, whenever a TTL value is not supplied\n                      by the transport layer protocol."), status("mandatory")] sint32 ipDefaultTTL;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.4.8"), read, description("The number of input IP datagrams for which no\n                      problems were encountered to prevent their\n                      continued processing, but which were discarded\n                      (e.g., for lack of buffer space).  Note that this\n                      counter does not include any datagrams discarded\n                      while awaiting re-assembly."), status("mandatory")] uint32 ipInDiscards;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.4.16"), read, description("The number of failures detected by the IP re-\n                      assembly algorithm (for whatever reason: timed\n                      out, errors, etc).  Note that this is not\n                      necessarily a count of discarded IP fragments\n                      since some algorithms (notably the algorithm in\n                      RFC 815) can lose track of the number of fragments\n                      by combining them as they are received."), status("mandatory")] uint32 ipReasmFails;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.4.3"), read, description("The total number of input datagrams received from\n                      interfaces, including those received in error."), status("mandatory")] uint32 ipInReceives;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.4.9"), read, description("The total number of input datagrams successfully\n                      delivered to IP user-protocols (including ICMP)."), status("mandatory")] uint32 ipInDelivers;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.4.14"), read, description("The number of IP fragments received which needed\n                      to be reassembled at this entity."), status("mandatory")] uint32 ipReasmReqds;
	[textual_convention("EnumeratedINTEGER"), enumeration("forwarding(1),not-forwarding(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.4.1"), read, write, description("The indication of whether this entity is acting\n                      as an IP gateway in respect to the forwarding of\n                      datagrams received by, but not addressed to, this\n                      entity.  IP gateways forward datagrams.  IP hosts\n                      do not (except those source-routed via the host).\n\n                      Note that for some managed nodes, this object may\n                      take on only a subset of the values possible.\n                      Accordingly, it is appropriate for an agent to\n                      return a `badValue' response if a management\n                      station attempts to change this object to an\n                      inappropriate value."), status("mandatory")] string ipForwarding;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.4.19"), read, description("The number of IP datagram fragments that have\n                      been generated as a result of fragmentation at\n                      this entity."), status("mandatory")] uint32 ipFragCreates;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.4.4"), read, description("The number of input datagrams discarded due to\n                      errors in their IP headers, including bad\n                      checksums, version number mismatch, other format\n                      errors, time-to-live exceeded, errors discovered\n                      in processing their IP options, etc."), status("mandatory")] uint32 ipInHdrErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.4.11"), read, description("The number of output IP datagrams for which no\n                      problem was encountered to prevent their\n                      transmission to their destination, but which were\n                      discarded (e.g., for lack of buffer space).  Note\n                      that this counter would include datagrams counted\n                      in ipForwDatagrams if any such packets met this\n                      (discretionary) discard criterion."), status("mandatory")] uint32 ipOutDiscards;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.4.12"), read, description("The number of IP datagrams discarded because no\n                      route could be found to transmit them to their\n                      destination.  Note that this counter includes any\n                      packets counted in ipForwDatagrams which meet this\n                      `no-route' criterion.  Note that this includes any\n                      datagarms which a host cannot route because all of\n                      its default gateways are down."), status("mandatory")] uint32 ipOutNoRoutes;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.4.10"), read, description("The total number of IP datagrams which local IP\n                      user-protocols (including ICMP) supplied to IP in\n                      requests for transmission.  Note that this counter\n                      does not include any datagrams counted in\n                      ipForwDatagrams."), status("mandatory")] uint32 ipOutRequests;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.4.5"), read, description("The number of input datagrams discarded because\n                      the IP address in their IP header's destination\n                      field was not a valid address to be received at\n                      this entity.  This count includes invalid\n                      addresses (e.g., 0.0.0.0) and addresses of\n                      unsupported Classes (e.g., Class E).  For entities\n                      which are not IP Gateways and therefore do not\n                      forward datagrams, this counter includes datagrams\n                      discarded because the destination address was not\n                      a local address."), status("mandatory")] uint32 ipInAddrErrors;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.4.13"), read, description("The maximum number of seconds which received\n                      fragments are held while they are awaiting\n                      reassembly at this entity."), status("mandatory")] sint32 ipReasmTimeout;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.4.6"), read, description("The number of input datagrams for which this\n                      entity was not their final IP destination, as a\n                      result of which an attempt was made to find a\n                      route to forward them to that final destination.\n                      In entities which do not act as IP Gateways, this\n                      counter will include only those packets which were\n                      Source-Routed via this entity, and the Source-\n                      Route option processing was successful."), status("mandatory")] uint32 ipForwDatagrams;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.4.23"), read, description("The number of routing entries which were chosen\n                      to be discarded even though they are valid.  One\n                      possible reason for discarding such an entry could\n                      be to free-up buffer space for other routing\n                      entries."), status("mandatory")] uint32 ipRoutingDiscards;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.4.7"), read, description("The number of locally-addressed datagrams\n                      received successfully but discarded because of an\n                      unknown or unsupported protocol."), status("mandatory")] uint32 ipInUnknownProtos;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.4.17"), read, description("The number of IP datagrams that have been\n                      successfully fragmented at this entity."), status("mandatory")] uint32 ipFragOKs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.4.15"), read, description("The number of IP datagrams successfully re-\n                      assembled."), status("mandatory")] uint32 ipReasmOKs;
};
[description("This entity's IP Routing table.\nA route to a particular destination."), module_name("RFC1213-MIB"), group_objectid("1.3.6.1.2.1.4"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_RFC1213_MIB_ipRouteTable : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.4.21.1.10"), read, write, description("The number of seconds since this route was last\n                      updated or otherwise determined to be correct.\n                      Note that no semantics of `too old' can be implied\n                      except through knowledge of the routing protocol\n                      by which the route was learned."), status("mandatory")] sint32 ipRouteAge;
	[textual_convention("OBJECTIDENTIFIER"), encoding("OBJECTIDENTIFIER"), object_syntax("OBJECTIDENTIFIER"), object_identifier("1.3.6.1.2.1.4.21.1.13"), read, description("A reference to MIB definitions specific to the\n                      particular routing protocol which is responsible\n                      for this route, as determined by the value\n                      specified in the route's ipRouteProto value.  If\n                      this information is not present, its value should\n                      be set to the OBJECT IDENTIFIER { 0 0 }, which is\n                      a syntatically valid object identifier, and any\n                      conformant implementation of ASN.1 and BER must be\n                      able to generate and recognize this value."), status("mandatory")] string ipRouteInfo;
	[textual_convention("IpAddress"), encoding("IpAddress"), object_syntax("IpAddress"), object_identifier("1.3.6.1.2.1.4.21.1.11"), read, write, description("Indicate the mask to be logical-ANDed with the\n                      destination address before being compared to the\n                      value in the ipRouteDest field.  For those systems\n                      that do not support arbitrary subnet masks, an\n                      agent constructs the value of the ipRouteMask by\n                      determining whether the value of the correspondent\n                      ipRouteDest field belong to a class-A, B, or C\n                      network, and then using one of:\n\n                           mask           network\n                           255.0.0.0      class-A\n                           255.255.0.0    class-B\n                           255.255.255.0  class-C\n\n                      If the value of the ipRouteDest is 0.0.0.0 (a\n                      default route), then the mask value is also\n                      0.0.0.0.  It should be noted that all IP routing\n                      subsystems implicitly use this mechanism."), status("mandatory")] string ipRouteMask;
	[textual_convention("IpAddress"), encoding("IpAddress"), object_syntax("IpAddress"), object_identifier("1.3.6.1.2.1.4.21.1.1"), read, write, description("The destination IP address of this route.  An\n                      entry with a value of 0.0.0.0 is considered a\n                      default route.  Multiple routes to a single\n                      destination can appear in the table, but access to\n                      such multiple entries is dependent on the table-\n                      access mechanisms defined by the network\n                      management protocol in use."), status("mandatory"), key, key_order(1)] string ipRouteDest;
	[textual_convention("EnumeratedINTEGER"), enumeration("other(1),invalid(2),direct(3),indirect(4)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.4.21.1.8"), read, write, description("The type of route.  Note that the values\n                      direct(3) and indirect(4) refer to the notion of\n                      direct and indirect routing in the IP\n                      architecture.\n\n                      Setting this object to the value invalid(2) has\n                      the effect of invalidating the corresponding entry\n                      in the ipRouteTable object.  That is, it\n                      effectively dissasociates the destination\n                      identified with said entry from the route\n                      identified with said entry.  It is an\n                      implementation-specific matter as to whether the\n                      agent removes an invalidated entry from the table.\n                      Accordingly, management stations must be prepared\n                      to receive tabular information from agents that\n                      corresponds to entries not currently in use.\n                      Proper interpretation of such entries requires\n                      examination of the relevant ipRouteType object."), status("mandatory")] string ipRouteType;
	[textual_convention("EnumeratedINTEGER"), enumeration("other(1),local(2),netmgmt(3),icmp(4),egp(5),ggp(6),hello(7),rip(8),is-is(9),es-is(10),ciscoIgrp(11),bbnSpfIgp(12),ospf(13),bgp(14)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.4.21.1.9"), read, description("The routing mechanism via which this route was\n                      learned.  Inclusion of values for gateway routing\n                      protocols is not intended to imply that hosts\n                      should support those protocols."), status("mandatory")] string ipRouteProto;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.4.21.1.3"), read, write, description("The primary routing metric for this route.  The\n                      semantics of this metric are determined by the\n                      routing-protocol specified in the route's\n                      ipRouteProto value.  If this metric is not used,\n                      its value should be set to -1."), status("mandatory")] sint32 ipRouteMetric1;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.4.21.1.4"), read, write, description("An alternate routing metric for this route.  The\n                      semantics of this metric are determined by the\n                      routing-protocol specified in the route's\n                      ipRouteProto value.  If this metric is not used,\n                      its value should be set to -1."), status("mandatory")] sint32 ipRouteMetric2;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.4.21.1.5"), read, write, description("An alternate routing metric for this route.  The\n                      semantics of this metric are determined by the\n                      routing-protocol specified in the route's\n                      ipRouteProto value.  If this metric is not used,\n                      its value should be set to -1."), status("mandatory")] sint32 ipRouteMetric3;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.4.21.1.6"), read, write, description("An alternate routing metric for this route.  The\n                      semantics of this metric are determined by the\n                      routing-protocol specified in the route's\n                      ipRouteProto value.  If this metric is not used,\n                      its value should be set to -1."), status("mandatory")] sint32 ipRouteMetric4;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.4.21.1.12"), read, write, description("An alternate routing metric for this route.  The\n                      semantics of this metric are determined by the\n                      routing-protocol specified in the route's\n                      ipRouteProto value.  If this metric is not used,\n                      its value should be set to -1."), status("mandatory")] sint32 ipRouteMetric5;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.4.21.1.2"), read, write, description("The index value which uniquely identifies the\n                      local interface through which the next hop of this\n                      route should be reached.  The interface identified\n                      by a particular value of this index is the same\n                      interface as identified by the same value of\n                      ifIndex."), status("mandatory")] sint32 ipRouteIfIndex;
	[textual_convention("IpAddress"), encoding("IpAddress"), object_syntax("IpAddress"), object_identifier("1.3.6.1.2.1.4.21.1.7"), read, write, description("The IP address of the next hop of this route.\n                      (In the case of a route bound to an interface\n                      which is realized via a broadcast media, the value\n                      of this field is the agent's IP address on that\n                      interface.)"), status("mandatory")] string ipRouteNextHop;
};
[description("The table of addressing information relevant to\n                      this entity's IP addresses.\nThe addressing information for one of this\n                      entity's IP addresses."), module_name("RFC1213-MIB"), group_objectid("1.3.6.1.2.1.4"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_RFC1213_MIB_ipAddrTable : SnmpObjectType
{
	[textual_convention("IpAddress"), encoding("IpAddress"), object_syntax("IpAddress"), object_identifier("1.3.6.1.2.1.4.20.1.1"), read, description("The IP address to which this entry's addressing\n                      information pertains."), status("mandatory"), key, key_order(1)] string ipAdEntAddr;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.4.20.1.2"), read, description("The index value which uniquely identifies the\n                      interface to which this entry is applicable.  The\n                      interface identified by a particular value of this\n                      index is the same interface as identified by the\n                      same value of ifIndex."), status("mandatory")] sint32 ipAdEntIfIndex;
	[textual_convention("IpAddress"), encoding("IpAddress"), object_syntax("IpAddress"), object_identifier("1.3.6.1.2.1.4.20.1.3"), read, description("The subnet mask associated with the IP address of\n                      this entry.  The value of the mask is an IP\n                      address with all the network bits set to 1 and all\n                      the hosts bits set to 0."), status("mandatory")] string ipAdEntNetMask;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.4.20.1.4"), read, description("The value of the least-significant bit in the IP\n                      broadcast address used for sending datagrams on\n                      the (logical) interface associated with the IP\n                      address of this entry.  For example, when the\n                      Internet standard all-ones broadcast address is\n                      used, the value will be 1.  This value applies to\n                      both the subnet and network broadcasts addresses\n                      used by the entity on this (logical) interface."), status("mandatory")] sint32 ipAdEntBcastAddr;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..65535"), object_identifier("1.3.6.1.2.1.4.20.1.5"), read, description("The size of the largest IP datagram which this\n                      entity can re-assemble from incoming IP fragmented\n                      datagrams received on this interface."), status("mandatory")] sint32 ipAdEntReasmMaxSize;
};
[description("The IP Address Translation table used for mapping\n                      from IP addresses to physical addresses.\nEach entry contains one IpAddress to `physical'\n                      address equivalence."), module_name("RFC1213-MIB"), group_objectid("1.3.6.1.2.1.4"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_RFC1213_MIB_ipNetToMediaTable : SnmpObjectType
{
	[textual_convention("IpAddress"), encoding("IpAddress"), object_syntax("IpAddress"), object_identifier("1.3.6.1.2.1.4.22.1.3"), read, write, description("The IpAddress corresponding to the media-\n                      dependent `physical' address."), status("mandatory"), key, key_order(2)] string ipNetToMediaNetAddress;
	[textual_convention("PhysAddress"), encoding("OCTETSTRING"), object_syntax("PhysAddress"), display_hint("1x:"), object_identifier("1.3.6.1.2.1.4.22.1.2"), read, write, description("The media-dependent `physical' address."), status("mandatory")] string ipNetToMediaPhysAddress;
	[textual_convention("EnumeratedINTEGER"), enumeration("other(1),invalid(2),dynamic(3),static(4)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.4.22.1.4"), read, write, description("The type of mapping.\n\n                      Setting this object to the value invalid(2) has\n                      the effect of invalidating the corresponding entry\n                      in the ipNetToMediaTable.  That is, it effectively\n                      dissasociates the interface identified with said\n                      entry from the mapping identified with said entry.\n                      It is an implementation-specific matter as to\n                      whether the agent removes an invalidated entry\n                      from the table.  Accordingly, management stations\n                      must be prepared to receive tabular information\n                      from agents that corresponds to entries not\n                      currently in use.  Proper interpretation of such\n                      entries requires examination of the relevant\n                      ipNetToMediaType object."), status("mandatory")] string ipNetToMediaType;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.4.22.1.1"), read, write, description("The interface on which this entry's equivalence\n                      is effective.  The interface identified by a\n                      particular value of this index is the same\n                      interface as identified by the same value of\n                      ifIndex."), status("mandatory"), key, key_order(1)] sint32 ipNetToMediaIfIndex;
};
[description(""), module_name("RFC1213-MIB"), singleton, group_objectid("1.3.6.1.2.1.2"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_RFC1213_MIB_interfaces : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.2.1"), read, description("The number of network interfaces (regardless of\n                      their current state) present on this system."), status("mandatory")] sint32 ifNumber;
};
[description("A list of interface entries.  The number of\n                      entries is given by the value of ifNumber.\nAn interface entry containing objects at the\n                      subnetwork layer and below for a particular\n                      interface."), module_name("RFC1213-MIB"), group_objectid("1.3.6.1.2.1.2"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_RFC1213_MIB_ifTable : SnmpObjectType
{
	[textual_convention("OBJECTIDENTIFIER"), encoding("OBJECTIDENTIFIER"), object_syntax("OBJECTIDENTIFIER"), object_identifier("1.3.6.1.2.1.2.2.1.22"), read, description("A reference to MIB definitions specific to the\n                      particular media being used to realize the\n                      interface.  For example, if the interface is\n                      realized by an ethernet, then the value of this\n                      object refers to a document defining objects\n                      specific to ethernet.  If this information is not\n                      present, its value should be set to the OBJECT\n                      IDENTIFIER { 0 0 }, which is a syntatically valid\n                      object identifier, and any conformant\n                      implementation of ASN.1 and BER must be able to\n                      generate and recognize this value."), status("mandatory")] string ifSpecific;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.2.2.1.10"), read, description("The total number of octets received on the\n                      interface, including framing characters."), status("mandatory")] uint32 ifInOctets;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.2.2.1.14"), read, description("The number of inbound packets that contained\n                      errors preventing them from being deliverable to a\n                      higher-layer protocol."), status("mandatory")] uint32 ifInErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.2.2.1.16"), read, description("The total number of octets transmitted out of the\n                      interface, including framing characters."), status("mandatory")] uint32 ifOutOctets;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.2.2.1.20"), read, description("The number of outbound packets that could not be\n                      transmitted because of errors."), status("mandatory")] uint32 ifOutErrors;
	[textual_convention("TimeTicks"), encoding("TimeTicks"), object_syntax("TimeTicks"), object_identifier("1.3.6.1.2.1.2.2.1.9"), read, description("The value of sysUpTime at the time the interface\n                      entered its current operational state.  If the\n                      current state was entered prior to the last re-\n                      initialization of the local network management\n                      subsystem, then this object contains a zero\n                      value."), status("mandatory")] uint32 ifLastChange;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.2.2.1.13"), read, description("The number of inbound packets which were chosen\n                      to be discarded even though no errors had been\n                      detected to prevent their being deliverable to a\n                      higher-layer protocol.  One possible reason for\n                      discarding such a packet could be to free up\n                      buffer space."), status("mandatory")] uint32 ifInDiscards;
	[textual_convention("EnumeratedINTEGER"), enumeration("up(1),down(2),testing(3)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.2.2.1.8"), read, description("The current operational state of the interface.\n                      The testing(3) state indicates that no operational\n                      packets can be passed."), status("mandatory")] string ifOperStatus;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.2.2.1.11"), read, description("The number of subnetwork-unicast packets\n                      delivered to a higher-layer protocol."), status("mandatory")] uint32 ifInUcastPkts;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.2.2.1.19"), read, description("The number of outbound packets which were chosen\n                      to be discarded even though no errors had been\n                      detected to prevent their being transmitted.  One\n                      possible reason for discarding such a packet could\n                      be to free up buffer space."), status("mandatory")] uint32 ifOutDiscards;
	[textual_convention("PhysAddress"), encoding("OCTETSTRING"), object_syntax("PhysAddress"), display_hint("1x:"), object_identifier("1.3.6.1.2.1.2.2.1.6"), read, description("The interface's address at the protocol layer\n                      immediately `below' the network layer in the\n                      protocol stack.  For interfaces which do not have\n                      such an address (e.g., a serial line), this object\n                      should contain an octet string of zero length."), status("mandatory")] string ifPhysAddress;
	[textual_convention("EnumeratedINTEGER"), enumeration("up(1),down(2),testing(3)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.2.2.1.7"), read, write, description("The desired state of the interface.  The\n                      testing(3) state indicates that no operational\n                      packets can be passed."), status("mandatory")] string ifAdminStatus;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.2.2.1.12"), read, description("The number of non-unicast (i.e., subnetwork-\n                      broadcast or subnetwork-multicast) packets\n                      delivered to a higher-layer protocol."), status("mandatory")] uint32 ifInNUcastPkts;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.2.2.1.17"), read, description("The total number of packets that higher-level\n                      protocols requested be transmitted to a\n                      subnetwork-unicast address, including those that\n                      were discarded or not sent."), status("mandatory")] uint32 ifOutUcastPkts;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.2.2.1.4"), read, description("The size of the largest datagram which can be\n                      sent/received on the interface, specified in\n                      octets.  For interfaces that are used for\n                      transmitting network datagrams, this is the size\n                      of the largest network datagram that can be sent\n                      on the interface."), status("mandatory")] sint32 ifMtu;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.2.2.1.18"), read, description("The total number of packets that higher-level\n                      protocols requested be transmitted to a non-\n                      unicast (i.e., a subnetwork-broadcast or\n                      subnetwork-multicast) address, including those\n                      that were discarded or not sent."), status("mandatory")] uint32 ifOutNUcastPkts;
	[textual_convention("EnumeratedINTEGER"), enumeration("other(1),regular1822(2),hdh1822(3),ddn-x25(4),rfc877-x25(5),ethernet-csmacd(6),iso88023-csmacd(7),iso88024-tokenBus(8),iso88025-tokenRing(9),iso88026-man(10),starLan(11),proteon-10Mbit(12),proteon-80Mbit(13),hyperchannel(14),fddi(15),lapb(16),sdlc(17),ds1(18),e1(19),basicISDN(20),primaryISDN(21),propPointToPointSerial(22),ppp(23),softwareLoopback(24),eon(25),ethernet-3Mbit(26),nsip(27),slip(28),ultra(29),ds3(30),sip(31),frame-relay(32)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.2.2.1.3"), read, description("The type of interface, distinguished according to\n                      the physical/link protocol(s) immediately `below'\n                      the network layer in the protocol stack."), status("mandatory")] string ifType;
	[textual_convention("Gauge"), encoding("Gauge"), object_syntax("Gauge"), object_identifier("1.3.6.1.2.1.2.2.1.5"), read, description("An estimate of the interface's current bandwidth\n                      in bits per second.  For interfaces which do not\n                      vary in bandwidth or for those where no accurate\n                      estimation can be made, this object should contain\n                      the nominal bandwidth."), status("mandatory")] uint32 ifSpeed;
	[textual_convention("DisplayString"), encoding("OCTETSTRING"), object_syntax("DisplayString"), variable_length("0..255"), object_identifier("1.3.6.1.2.1.2.2.1.2"), read, description("A textual string containing information about the\n                      interface.  This string should include the name of\n                      the manufacturer, the product name and the version\n                      of the hardware interface."), status("mandatory")] string ifDescr;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.2.2.1.1"), read, description("A unique value for each interface.  Its value\n                      ranges between 1 and the value of ifNumber.  The\n                      value for each interface must remain constant at\n                      least from one re-initialization of the entity's\n                      network management system to the next re-\n                      initialization."), status("mandatory"), key, key_order(1)] sint32 ifIndex;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.2.2.1.15"), read, description("The number of packets received via the interface\n                      which were discarded because of an unknown or\n                      unsupported protocol."), status("mandatory")] uint32 ifInUnknownProtos;
	[textual_convention("Gauge"), encoding("Gauge"), object_syntax("Gauge"), object_identifier("1.3.6.1.2.1.2.2.1.21"), read, description("The length of the output packet queue (in\n                      packets)."), status("mandatory")] uint32 ifOutQLen;
};
[description(""), module_name("RFC1213-MIB"), singleton, group_objectid("1.3.6.1.2.1.5"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_RFC1213_MIB_icmp : SnmpObjectType
{
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.5.1"), read, description("The total number of ICMP messages which the\n                      entity received.  Note that this counter includes\n                      all those counted by icmpInErrors."), status("mandatory")] uint32 icmpInMsgs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.5.24"), read, description("The number of ICMP Timestamp Reply messages\n                      sent."), status("mandatory")] uint32 icmpOutTimestampReps;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.5.8"), read, description("The number of ICMP Echo (request) messages\n                      received."), status("mandatory")] uint32 icmpInEchos;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.5.14"), read, description("The total number of ICMP messages which this\n                      entity attempted to send.  Note that this counter\n                      includes all those counted by icmpOutErrors."), status("mandatory")] uint32 icmpOutMsgs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.5.21"), read, description("The number of ICMP Echo (request) messages sent."), status("mandatory")] uint32 icmpOutEchos;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.5.2"), read, description("The number of ICMP messages which the entity\n                      received but determined as having ICMP-specific\n                      errors (bad ICMP checksums, bad length, etc.)."), status("mandatory")] uint32 icmpInErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.5.15"), read, description("The number of ICMP messages which this entity did\n                      not send due to problems discovered within ICMP\n                      such as a lack of buffers.  This value should not\n                      include errors discovered outside the ICMP layer\n                      such as the inability of IP to route the resultant\n                      datagram.  In some implementations there may be no\n                      types of error which contribute to this counter's\n                      value."), status("mandatory")] uint32 icmpOutErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.5.9"), read, description("The number of ICMP Echo Reply messages received."), status("mandatory")] uint32 icmpInEchoReps;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.5.12"), read, description("The number of ICMP Address Mask Request messages\n                      received."), status("mandatory")] uint32 icmpInAddrMasks;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.5.4"), read, description("The number of ICMP Time Exceeded messages\n                      received."), status("mandatory")] uint32 icmpInTimeExcds;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.5.5"), read, description("The number of ICMP Parameter Problem messages\n                      received."), status("mandatory")] uint32 icmpInParmProbs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.5.22"), read, description("The number of ICMP Echo Reply messages sent."), status("mandatory")] uint32 icmpOutEchoReps;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.5.7"), read, description("The number of ICMP Redirect messages received."), status("mandatory")] uint32 icmpInRedirects;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.5.25"), read, description("The number of ICMP Address Mask Request messages\n                      sent."), status("mandatory")] uint32 icmpOutAddrMasks;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.5.6"), read, description("The number of ICMP Source Quench messages\n                      received."), status("mandatory")] uint32 icmpInSrcQuenchs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.5.17"), read, description("The number of ICMP Time Exceeded messages sent."), status("mandatory")] uint32 icmpOutTimeExcds;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.5.18"), read, description("The number of ICMP Parameter Problem messages\n                      sent."), status("mandatory")] uint32 icmpOutParmProbs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.5.20"), read, description("The number of ICMP Redirect messages sent.  For a\n                      host, this object will always be zero, since hosts\n                      do not send redirects."), status("mandatory")] uint32 icmpOutRedirects;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.5.10"), read, description("The number of ICMP Timestamp (request) messages\n                      received."), status("mandatory")] uint32 icmpInTimestamps;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.5.19"), read, description("The number of ICMP Source Quench messages sent."), status("mandatory")] uint32 icmpOutSrcQuenchs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.5.13"), read, description("The number of ICMP Address Mask Reply messages\n                      received."), status("mandatory")] uint32 icmpInAddrMaskReps;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.5.23"), read, description("The number of ICMP Timestamp (request) messages\n                      sent."), status("mandatory")] uint32 icmpOutTimestamps;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.5.3"), read, description("The number of ICMP Destination Unreachable\n                      messages received."), status("mandatory")] uint32 icmpInDestUnreachs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.5.26"), read, description("The number of ICMP Address Mask Reply messages\n                      sent."), status("mandatory")] uint32 icmpOutAddrMaskReps;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.5.16"), read, description("The number of ICMP Destination Unreachable\n                      messages sent."), status("mandatory")] uint32 icmpOutDestUnreachs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.5.11"), read, description("The number of ICMP Timestamp Reply messages\n                      received."), status("mandatory")] uint32 icmpInTimestampReps;
};
[description(""), module_name("RFC1213-MIB"), singleton, group_objectid("1.3.6.1.2.1.6"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_RFC1213_MIB_tcp : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.6.4"), read, description("The limit on the total number of TCP connections\n                      the entity can support.  In entities where the\n                      maximum number of connections is dynamic, this\n                      object should contain the value -1."), status("mandatory")] sint32 tcpMaxConn;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.6.11"), read, description("The total number of segments sent, including\n                      those on current connections but excluding those\n                      containing only retransmitted octets."), status("mandatory")] uint32 tcpOutSegs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.6.15"), read, description("The number of TCP segments sent containing the\n                      RST flag."), status("mandatory")] uint32 tcpOutRsts;
	[textual_convention("Gauge"), encoding("Gauge"), object_syntax("Gauge"), object_identifier("1.3.6.1.2.1.6.9"), read, description("The number of TCP connections for which the\n                      current state is either ESTABLISHED or CLOSE-\n                      WAIT."), status("mandatory")] uint32 tcpCurrEstab;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.6.5"), read, description("The number of times TCP connections have made a\n                      direct transition to the SYN-SENT state from the\n                      CLOSED state."), status("mandatory")] uint32 tcpActiveOpens;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.6.8"), read, description("The number of times TCP connections have made a\n                      direct transition to the CLOSED state from either\n                      the ESTABLISHED state or the CLOSE-WAIT state."), status("mandatory")] uint32 tcpEstabResets;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.6.12"), read, description("The total number of segments retransmitted - that\n                      is, the number of TCP segments transmitted\n                      containing one or more previously transmitted\n                      octets."), status("mandatory")] uint32 tcpRetransSegs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.6.7"), read, description("The number of times TCP connections have made a\n                      direct transition to the CLOSED state from either\n                      the SYN-SENT state or the SYN-RCVD state, plus the\n                      number of times TCP connections have made a direct\n                      transition to the LISTEN state from the SYN-RCVD\n                      state."), status("mandatory")] uint32 tcpAttemptFails;
	[textual_convention("EnumeratedINTEGER"), enumeration("other(1),constant(2),rsre(3),vanj(4)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.6.1"), read, description("The algorithm used to determine the timeout value\n                      used for retransmitting unacknowledged octets."), status("mandatory")] string tcpRtoAlgorithm;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.6.6"), read, description("The number of times TCP connections have made a\n                      direct transition to the SYN-RCVD state from the\n                      LISTEN state."), status("mandatory")] uint32 tcpPassiveOpens;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.6.10"), read, description("The total number of segments received, including\n                      those received in error.  This count includes\n                      segments received on currently established\n                      connections."), status("mandatory")] uint32 tcpInSegs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.6.14"), read, description("The total number of segments received in error\n                      (e.g., bad TCP checksums)."), status("mandatory")] uint32 tcpInErrs;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.6.2"), read, description("The minimum value permitted by a TCP\n                      implementation for the retransmission timeout,\n                      measured in milliseconds.  More refined semantics\n                      for objects of this type depend upon the algorithm\n                      used to determine the retransmission timeout.  In\n                      particular, when the timeout algorithm is rsre(3),\n                      an object of this type has the semantics of the\n                      LBOUND quantity described in RFC 793."), status("mandatory")] sint32 tcpRtoMin;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.6.3"), read, description("The maximum value permitted by a TCP\n                      implementation for the retransmission timeout,\n                      measured in milliseconds.  More refined semantics\n                      for objects of this type depend upon the algorithm\n                      used to determine the retransmission timeout.  In\n                      particular, when the timeout algorithm is rsre(3),\n                      an object of this type has the semantics of the\n                      UBOUND quantity described in RFC 793."), status("mandatory")] sint32 tcpRtoMax;
};
[description("A table containing TCP connection-specific\n                      information.\nInformation about a particular current TCP\n                      connection.  An object of this type is transient,\n                      in that it ceases to exist when (or soon after)\n                      the connection makes the transition to the CLOSED\n                      state."), module_name("RFC1213-MIB"), group_objectid("1.3.6.1.2.1.6"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_RFC1213_MIB_tcpConnTable : SnmpObjectType
{
	[textual_convention("EnumeratedINTEGER"), enumeration("closed(1),listen(2),synSent(3),synReceived(4),established(5),finWait1(6),finWait2(7),closeWait(8),lastAck(9),closing(10),timeWait(11),deleteTCB(12)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.6.13.1.1"), read, write, description("The state of this TCP connection.\n\n                      The only value which may be set by a management\n                      station is deleteTCB(12).  Accordingly, it is\n                      appropriate for an agent to return a `badValue'\n                      response if a management station attempts to set\n                      this object to any other value.\n\n                      If a management station sets this object to the\n                      value deleteTCB(12), then this has the effect of\n                      deleting the TCB (as defined in RFC 793) of the\n                      corresponding connection on the managed node,\n                      resulting in immediate termination of the\n                      connection.\n\n                      As an implementation-specific option, a RST\n                      segment may be sent from the managed node to the\n                      other TCP endpoint (note however that RST segments\n                      are not sent reliably)."), status("mandatory")] string tcpConnState;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..65535"), object_identifier("1.3.6.1.2.1.6.13.1.5"), read, description("The remote port number for this TCP connection."), status("mandatory"), key, key_order(4)] sint32 tcpConnRemPort;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..65535"), object_identifier("1.3.6.1.2.1.6.13.1.3"), read, description("The local port number for this TCP connection."), status("mandatory"), key, key_order(2)] sint32 tcpConnLocalPort;
	[textual_convention("IpAddress"), encoding("IpAddress"), object_syntax("IpAddress"), object_identifier("1.3.6.1.2.1.6.13.1.4"), read, description("The remote IP address for this TCP connection."), status("mandatory"), key, key_order(3)] string tcpConnRemAddress;
	[textual_convention("IpAddress"), encoding("IpAddress"), object_syntax("IpAddress"), object_identifier("1.3.6.1.2.1.6.13.1.2"), read, description("The local IP address for this TCP connection.  In\n                      the case of a connection in the listen state which\n                      is willing to accept connections for any IP\n                      interface associated with the node, the value\n                      0.0.0.0 is used."), status("mandatory"), key, key_order(1)] string tcpConnLocalAddress;
};
[description(""), module_name("RFC1213-MIB"), singleton, group_objectid("1.3.6.1.2.1.8"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_RFC1213_MIB_egp : SnmpObjectType
{
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.8.3"), read, description("The total number of locally generated EGP\n                      messages."), status("mandatory")] uint32 egpOutMsgs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.8.2"), read, description("The number of EGP messages received that proved\n                      to be in error."), status("mandatory")] uint32 egpInErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.8.4"), read, description("The number of locally generated EGP messages not\n                      sent due to resource limitations within an EGP\n                      entity."), status("mandatory")] uint32 egpOutErrors;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.8.6"), read, description("The autonomous system number of this EGP entity."), status("mandatory")] sint32 egpAs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.8.1"), read, description("The number of EGP messages received without\n                      error."), status("mandatory")] uint32 egpInMsgs;
};
[description("The EGP neighbor table.\nInformation about this entity's relationship with\n                      a particular EGP neighbor."), module_name("RFC1213-MIB"), group_objectid("1.3.6.1.2.1.8"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_RFC1213_MIB_egpNeighTable : SnmpObjectType
{
	[textual_convention("EnumeratedINTEGER"), enumeration("start(1),stop(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.8.5.1.15"), read, write, description("A control variable used to trigger operator-\n                      initiated Start and Stop events.  When read, this\n                      variable always returns the most recent value that\n                      egpNeighEventTrigger was set to.  If it has not\n                      been set since the last initialization of the\n                      network management subsystem on the node, it\n                      returns a value of `stop'.\n\n                      When set, this variable causes a Start or Stop\n                      event on the specified neighbor, as specified on\n                      pages 8-10 of RFC 904.  Briefly, a Start event\n                      causes an Idle peer to begin neighbor acquisition\n                      and a non-Idle peer to reinitiate neighbor\n                      acquisition.  A stop event causes a non-Idle peer\n                      to return to the Idle state until a Start event\n                      occurs, either via egpNeighEventTrigger or\n                      otherwise."), status("mandatory")] string egpNeighEventTrigger;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.8.5.1.13"), read, description("The interval between EGP poll command\n                      retransmissions (in hundredths of a second).  This\n                      represents the t3 timer as defined in RFC 904."), status("mandatory")] sint32 egpNeighIntervalPoll;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.8.5.1.12"), read, description("The interval between EGP Hello command\n                      retransmissions (in hundredths of a second).  This\n                      represents the t1 timer as defined in RFC 904."), status("mandatory")] sint32 egpNeighIntervalHello;
	[textual_convention("IpAddress"), encoding("IpAddress"), object_syntax("IpAddress"), object_identifier("1.3.6.1.2.1.8.5.1.2"), read, description("The IP address of this entry's EGP neighbor."), status("mandatory"), key, key_order(1)] string egpNeighAddr;
	[textual_convention("EnumeratedINTEGER"), enumeration("active(1),passive(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.8.5.1.14"), read, description("The polling mode of this EGP entity, either\n                      passive or active."), status("mandatory")] string egpNeighMode;
	[textual_convention("EnumeratedINTEGER"), enumeration("idle(1),acquisition(2),down(3),up(4),cease(5)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.8.5.1.1"), read, description("The EGP state of the local system with respect to\n                      this entry's EGP neighbor.  Each EGP state is\n                      represented by a value that is one greater than\n                      the numerical value associated with said state in\n                      RFC 904."), status("mandatory")] string egpNeighState;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.8.5.1.4"), read, description("The number of EGP messages received without error\n                      from this EGP peer."), status("mandatory")] uint32 egpNeighInMsgs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.8.5.1.5"), read, description("The number of EGP messages received from this EGP\n                      peer that proved to be in error (e.g., bad EGP\n                      checksum)."), status("mandatory")] uint32 egpNeighInErrs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.8.5.1.6"), read, description("The number of locally generated EGP messages to\n                      this EGP peer."), status("mandatory")] uint32 egpNeighOutMsgs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.8.5.1.7"), read, description("The number of locally generated EGP messages not\n                      sent to this EGP peer due to resource limitations\n                      within an EGP entity."), status("mandatory")] uint32 egpNeighOutErrs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.8.5.1.10"), read, description("The number of EGP state transitions to the UP\n                      state with this EGP peer."), status("mandatory")] uint32 egpNeighStateUps;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.8.5.1.8"), read, description("The number of EGP-defined error messages received\n                      from this EGP peer."), status("mandatory")] uint32 egpNeighInErrMsgs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.8.5.1.9"), read, description("The number of EGP-defined error messages sent to\n                      this EGP peer."), status("mandatory")] uint32 egpNeighOutErrMsgs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.8.5.1.11"), read, description("The number of EGP state transitions from the UP\n                      state to any other state with this EGP peer."), status("mandatory")] uint32 egpNeighStateDowns;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.8.5.1.3"), read, description("The autonomous system of this EGP peer.  Zero\n                      should be specified if the autonomous system\n                      number of the neighbor is not yet known."), status("mandatory")] sint32 egpNeighAs;
};
[description(""), module_name("RFC1213-MIB"), singleton, group_objectid("1.3.6.1.2.1.7"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_RFC1213_MIB_udp : SnmpObjectType
{
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.7.2"), read, description("The total number of received UDP datagrams for\n                      which there was no application at the destination\n                      port."), status("mandatory")] uint32 udpNoPorts;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.7.3"), read, description("The number of received UDP datagrams that could\n                      not be delivered for reasons other than the lack\n                      of an application at the destination port."), status("mandatory")] uint32 udpInErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.7.1"), read, description("The total number of UDP datagrams delivered to\n                      UDP users."), status("mandatory")] uint32 udpInDatagrams;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.7.4"), read, description("The total number of UDP datagrams sent from this\n                      entity."), status("mandatory")] uint32 udpOutDatagrams;
};
[description("A table containing UDP listener information.\nInformation about a particular current UDP\n                      listener."), module_name("RFC1213-MIB"), group_objectid("1.3.6.1.2.1.7"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_RFC1213_MIB_udpTable : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..65535"), object_identifier("1.3.6.1.2.1.7.5.1.2"), read, description("The local port number for this UDP listener."), status("mandatory"), key, key_order(2)] sint32 udpLocalPort;
	[textual_convention("IpAddress"), encoding("IpAddress"), object_syntax("IpAddress"), object_identifier("1.3.6.1.2.1.7.5.1.1"), read, description("The local IP address for this UDP listener.  In\n                      the case of a UDP listener which is willing to\n                      accept datagrams for any IP interface associated\n                      with the node, the value 0.0.0.0 is used."), status("mandatory"), key, key_order(1)] string udpLocalAddress;
};
[description(""), module_name("RFC1213-MIB"), singleton, group_objectid("1.3.6.1.2.1.1"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_RFC1213_MIB_system : SnmpObjectType
{
	[textual_convention("DisplayString"), encoding("OCTETSTRING"), object_syntax("DisplayString"), variable_length("0..255"), object_identifier("1.3.6.1.2.1.1.4"), read, write, description("The textual identification of the contact person\n                      for this managed node, together with information\n                      on how to contact this person."), status("mandatory")] string sysContact;
	[textual_convention("OBJECTIDENTIFIER"), encoding("OBJECTIDENTIFIER"), object_syntax("OBJECTIDENTIFIER"), object_identifier("1.3.6.1.2.1.1.2"), read, description("The vendor's authoritative identification of the\n                      network management subsystem contained in the\n                      entity.  This value is allocated within the SMI\n                      enterprises subtree (1.3.6.1.4.1) and provides an\n                      easy and unambiguous means for determining `what\n                      kind of box' is being managed.  For example, if\n                      vendor `Flintstones, Inc.' was assigned the\n                      subtree 1.3.6.1.4.1.4242, it could assign the\n                      identifier 1.3.6.1.4.1.4242.1.1 to its `Fred\n                      Router'."), status("mandatory")] string sysObjectID;
	[textual_convention("DisplayString"), encoding("OCTETSTRING"), object_syntax("DisplayString"), variable_length("0..255"), object_identifier("1.3.6.1.2.1.1.6"), read, write, description("The physical location of this node (e.g.,\n                      `telephone closet, 3rd floor')."), status("mandatory")] string sysLocation;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..127"), object_identifier("1.3.6.1.2.1.1.7"), read, description("A value which indicates the set of services that\n                      this entity primarily offers.\n\n                      The value is a sum.  This sum initially takes the\n                      value zero, Then, for each layer, L, in the range\n                      1 through 7, that this node performs transactions\n                      for, 2 raised to (L - 1) is added to the sum.  For\n                      example, a node which performs primarily routing\n                      functions would have a value of 4 (2^(3-1)).  In\n                      contrast, a node which is a host offering\n                      application services would have a value of 72\n                      (2^(4-1) + 2^(7-1)).  Note that in the context of\n                      the Internet suite of protocols, values should be\n                      calculated accordingly:\n\n                           layer  functionality\n                               1  physical (e.g., repeaters)\n                               2  datalink/subnetwork (e.g., bridges)\n                               3  internet (e.g., IP gateways)\n                               4  end-to-end  (e.g., IP hosts)\n                               7  applications (e.g., mail relays)\n\n                      For systems including OSI protocols, layers 5 and\n                      6 may also be counted."), status("mandatory")] sint32 sysServices;
	[textual_convention("DisplayString"), encoding("OCTETSTRING"), object_syntax("DisplayString"), variable_length("0..255"), object_identifier("1.3.6.1.2.1.1.5"), read, write, description("An administratively-assigned name for this\n                      managed node.  By convention, this is the node's\n                      fully-qualified domain name."), status("mandatory")] string sysName;
	[textual_convention("DisplayString"), encoding("OCTETSTRING"), object_syntax("DisplayString"), variable_length("0..255"), object_identifier("1.3.6.1.2.1.1.1"), read, description("A textual description of the entity.  This value\n                      should include the full name and version\n                      identification of the system's hardware type,\n                      software operating-system, and networking\n                      software.  It is mandatory that this only contain\n                      printable ASCII characters."), status("mandatory")] string sysDescr;
	[textual_convention("TimeTicks"), encoding("TimeTicks"), object_syntax("TimeTicks"), object_identifier("1.3.6.1.2.1.1.3"), read, description("The time (in hundredths of a second) since the\n                      network management portion of the system was last\n                      re-initialized."), status("mandatory")] uint32 sysUpTime;
};
[description("The Address Translation tables contain the\n                      NetworkAddress to `physical' address equivalences.\n                      Some interfaces do not use translation tables for\n                      determining address equivalences (e.g., DDN-X.25\n                      has an algorithmic method); if all interfaces are\n                      of this type, then the Address Translation table\n                      is empty, i.e., has zero entries.\nEach entry contains one NetworkAddress to\n                      `physical' address equivalence."), module_name("RFC1213-MIB"), group_objectid("1.3.6.1.2.1.3"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_RFC1213_MIB_atTable : SnmpObjectType
{
	[textual_convention("NetworkAddress"), encoding("NetworkAddress"), object_syntax("NetworkAddress"), object_identifier("1.3.6.1.2.1.3.1.1.3"), read, write, description("The NetworkAddress (e.g., the IP address)\n                      corresponding to the media-dependent `physical'\n                      address."), status("deprecated"), key, key_order(2)] string atNetAddress;
	[textual_convention("PhysAddress"), encoding("OCTETSTRING"), object_syntax("PhysAddress"), display_hint("1x:"), object_identifier("1.3.6.1.2.1.3.1.1.2"), read, write, description("The media-dependent `physical' address.\n\n                      Setting this object to a null string (one of zero\n                      length) has the effect of invaliding the\n                      corresponding entry in the atTable object.  That\n                      is, it effectively dissasociates the interface\n                      identified with said entry from the mapping\n                      identified with said entry.  It is an\n                      implementation-specific matter as to whether the\n                      agent removes an invalidated entry from the table.\n                      Accordingly, management stations must be prepared\n                      to receive tabular information from agents that\n                      corresponds to entries not currently in use.\n                      Proper interpretation of such entries requires\n                      examination of the relevant atPhysAddress object."), status("deprecated")] string atPhysAddress;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.3.1.1.1"), read, write, description("The interface on which this entry's equivalence\n                      is effective.  The interface identified by a\n                      particular value of this index is the same\n                      interface as identified by the same value of\n                      ifIndex."), status("deprecated"), key, key_order(1)] sint32 atIfIndex;
};

