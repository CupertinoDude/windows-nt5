// Copyright (c) 1997-2001 Microsoft Corporation, All Rights Reserved
//	MOF Generated for module "RFC1231-MIB" by smi2smir version 1.10.635.0000
qualifier write:ToInstance ToSubClass;
qualifier read:ToInstance ToSubClass;
qualifier provider:ToInstance ToSubClass;
qualifier singleton:ToInstance ToSubClass;
qualifier dynamic:ToInstance ToSubClass;
qualifier textual_convention:ToInstance ToSubClass;
qualifier object_identifier:ToInstance ToSubClass;
qualifier encoding:ToInstance ToSubClass;
qualifier object_syntax:ToInstance ToSubClass;
qualifier status:ToInstance ToSubClass;
qualifier fixed_length:ToInstance ToSubClass;
qualifier variable_length:ToInstance ToSubClass;
qualifier variable_value:ToInstance ToSubClass;
qualifier bits:ToInstance ToSubClass;
qualifier key_order:ToInstance ToSubClass;
qualifier enumeration:ToInstance ToSubClass;
qualifier bits:ToInstance ToSubClass;
qualifier description:ToInstance ToSubClass;
qualifier display_hint:ToInstance ToSubClass;
qualifier defval:ToInstance ToSubClass;
qualifier units:ToInstance ToSubClass;
qualifier reference:ToInstance ToSubClass;
qualifier virtual_key:ToInstance ToSubClass;
qualifier rowstatus:ToInstance ToSubClass;
qualifier module_name:ToInstance ToSubClass;
qualifier module_imports:ToInstance ToSubClass;
qualifier group_objectid:ToInstance ToSubClass;

[abstract]
class SnmpMacro
{
};

[abstract]
class SnmpObjectType:SnmpMacro
{
};

class SnmpNotifyStatus:__ExtendedStatus
{
[write] sint32 SnmpStatusCode;
[write] string Description;
};

[description("This table contains Token Ring interface\n                             timer values, one entry per 802.5\n\n\n\n\n\n                             interface.\nA list of Token Ring timer values for an\n                             802.5 interface."), module_name("RFC1231-MIB"), group_objectid("1.3.6.1.3.4"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_RFC1231_MIB_dot5TimerTable : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.3.4.5.1.9"), read, description("The time-out value which determines how\n                             often a station shall send a Report Error\n                             MAC frame to report its error counters,\n                             in units of 100 micro-seconds.\n                                 Implementors are encouraged to provide\n                             read-write access to this object if that is\n                             possible/useful in their system, but giving\n                             due consideration to the dangers of\n                             write-able timers."), status("mandatory")] sint32 dot5TimerErrorReport;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.3.4.5.1.2"), read, description("The time-out value used to ensure the\n                             interface will return to Repeat State, in\n                             units of 100 micro-seconds.  The value\n                             should be greater than the maximum ring\n                             latency.\n                                 Implementors are encouraged to provide\n                             read-write access to this object if that is\n                             possible/useful in their system, but giving\n                             due consideration to the dangers of\n                             write-able timers."), status("mandatory")] sint32 dot5TimerReturnRepeat;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.3.4.5.1.11"), read, description("The time-out value which determines how\n                             long a station shall receive Beacon\n                             frames from its downstream neighbor\n                             before entering the Bypass state, in\n                             units of 100 micro-seconds.\n                                 Implementors are encouraged to provide\n                             read-write access to this object if that is\n                             possible/useful in their system, but giving\n                             due consideration to the dangers of\n                             write-able timers."), status("mandatory")] sint32 dot5TimerBeaconReceive;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.3.4.5.1.5"), read, description("The time-out value used by the active\n                             monitor to detect the absence of valid\n                             transmissions, in units of 100\n                             micro-seconds.\n                                 Implementors are encouraged to provide\n                             read-write access to this object if that is\n                             possible/useful in their system, but giving\n                             due consideration to the dangers of\n                             write-able timers."), status("mandatory")] sint32 dot5TimerValidTransmit;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.3.4.5.1.10"), read, description("The time-out value which determines how\n                             long a station shall remain in the state\n\n\n\n\n\n                             of transmitting Beacon frames before\n                             entering the Bypass state, in units of\n                             100 micro-seconds.\n                                 Implementors are encouraged to provide\n                             read-write access to this object if that is\n                             possible/useful in their system, but giving\n                             due consideration to the dangers of\n                             write-able timers."), status("mandatory")] sint32 dot5TimerBeaconTransmit;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.3.4.5.1.1"), read, description("The value of this object identifies the\n                              802.5 interface for which this entry\n                              contains timer values.  The value of\n                              this object for a particular interface\n\n\n\n\n\n                              has the same value as the ifIndex\n                              object, defined in [4,6], for the same\n                              interface."), status("mandatory"), key, key_order(1)] sint32 dot5TimerIfIndex;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.3.4.5.1.6"), read, description("The time-out value used to recover from\n                             various-related error situations [9].\n                             If N is the maximum number of stations on\n                             the ring, the value of this timer is\n                             normally:\n                             dot5TimerReturnRepeat + N*dot5TimerHolding.\n                                 Implementors are encouraged to provide\n                             read-write access to this object if that is\n                             possible/useful in their system, but giving\n                             due consideration to the dangers of\n                             write-able timers."), status("mandatory")] sint32 dot5TimerNoToken;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.3.4.5.1.3"), read, description("Maximum period of time a station is\n                             permitted to transmit frames after capturing\n                             a token, in units of 100 micro-seconds.\n                                 Implementors are encouraged to provide\n                             read-write access to this object if that is\n                             possible/useful in their system, but giving\n                             due consideration to the dangers of\n                             write-able timers."), status("mandatory")] sint32 dot5TimerHolding;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.3.4.5.1.4"), read, description("The time-out value for enqueuing of an SMP\n                             PDU after reception of an AMP or SMP\n                             frame in which the A and C bits were\n                             equal to 0, in units of 100\n                             micro-seconds.\n                                 Implementors are encouraged to provide\n\n\n\n\n\n                             read-write access to this object if that is\n                             possible/useful in their system, but giving\n                             due consideration to the dangers of\n                             write-able timers."), status("mandatory")] sint32 dot5TimerQueuePDU;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.3.4.5.1.7"), read, description("The time-out value used by the active\n                             monitor to stimulate the enqueuing of an\n                             AMP PDU for transmission, in units of\n\n\n\n\n\n                             100 micro-seconds.\n                                 Implementors are encouraged to provide\n                             read-write access to this object if that is\n                             possible/useful in their system, but giving\n                             due consideration to the dangers of\n                             write-able timers."), status("mandatory")] sint32 dot5TimerActiveMon;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.3.4.5.1.8"), read, description("The time-out value used by the stand-by\n                             monitors to ensure that there is an active\n                             monitor on the ring and to detect a\n                             continuous stream of tokens, in units of\n                             100 micro-seconds.\n                                 Implementors are encouraged to provide\n                             read-write access to this object if that is\n                             possible/useful in their system, but giving\n                             due consideration to the dangers of\n                             write-able timers."), status("mandatory")] sint32 dot5TimerStandbyMon;
};
[description("A table containing Token Ring statistics,\n                             one entry per 802.5 interface.\n                                 All the statistics are defined using\n                             the syntax Counter as 32-bit wrap around\n                             counters.  Thus, if an interface's\n                             hardware maintains these statistics in\n                             16-bit counters, then the agent must read\n                             the hardware's counters frequently enough\n                             to prevent loss of significance, in order\n                             to maintain 32-bit counters in software.\nAn entry contains the 802.5 statistics\n                              for a particular interface."), module_name("RFC1231-MIB"), group_objectid("1.3.6.1.3.4"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_RFC1231_MIB_dot5StatsTable : SnmpObjectType
{
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.4.2.1.10"), read, description("This counter is incremented when a station\n                             acting as the active monitor recognizes an\n                             error condition that needs a token\n                             transmitted."), status("mandatory")] uint32 dot5StatsTokenErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.4.2.1.3"), read, description("This counter is incremented when a station\n                             detects the absence of transitions for five\n                             half-bit timers (burst-five error)."), status("mandatory")] uint32 dot5StatsBurstErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.4.2.1.6"), read, description("This counter is incremented when a station\n                             recognizes an internal error."), status("mandatory")] uint32 dot5StatsInternalErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.4.2.1.7"), read, description("This counter is incremented when a station\n                             is transmitting and its TRR timer expires.\n                             This condition denotes a condition where a\n                             transmitting station in strip mode does not\n                             receive the trailer of the frame before the\n                             TRR timer goes off."), status("mandatory")] uint32 dot5StatsLostFrameErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.4.2.1.14"), read, description("The number of times this interface has\n                             transmitted a beacon frame."), status("mandatory")] uint32 dot5StatsTransmitBeacons;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.4.2.1.5"), read, description("This counter is incremented when a station\n                             transmits an abort delimiter while\n                             transmitting."), status("mandatory")] uint32 dot5StatsAbortTransErrors;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.3.4.2.1.1"), read, description("The value of this object identifies the\n                             802.5 interface for which this entry\n                             contains management information.  The\n                             value of this object for a particular\n                             interface has the same value as the\n                             ifIndex object, defined in [4,6], for\n                             the same interface."), status("mandatory"), key, key_order(1)] sint32 dot5StatsIfIndex;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.4.2.1.9"), read, description("This counter is incremented when a station\n                             recognizes a frame addressed to its\n                             specific address and detects that the FS\n                             field A bits are set to 1 indicating a\n                             possible line hit or duplicate address."), status("mandatory")] uint32 dot5StatsFrameCopiedErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.4.2.1.18"), read, description("The number of times the interface has\n                             sensed that it is the only station on the\n                             ring.  This will happen if the interface\n                             is the first one up on a ring, or if\n                             there is a hardware problem."), status("mandatory")] uint32 dot5StatsSingles;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.4.2.1.17"), read, description("The number of times the interface has\n                             received a Remove Ring Station MAC frame\n                             request.  When this frame is received\n                             the interface will enter the close state\n                             and dot5RingState will signify this\n                             condition."), status("mandatory")] uint32 dot5StatsRemoves;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.4.2.1.4"), read, description("This counter is incremented when a station\n                             receives an AMP or SMP frame in which A is\n                             equal to C is equal to 0, and then receives\n                             another SMP frame with A is equal to C is\n\n\n\n\n\n                             equal to 0 without first receiving an AMP\n                             frame. It denotes a station that cannot set\n                             the AC bits properly."), status("mandatory")] uint32 dot5StatsACErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.4.2.1.8"), read, description("This counter is incremented when a station\n                             recognizes a frame addressed to its\n                             specific address, but has no available\n                             buffer space indicating that the station\n                             is congested."), status("mandatory")] uint32 dot5StatsReceiveCongestions;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.4.2.1.16"), read, description("The number of times the interface has\n                             detected an open or short circuit in the\n                             lobe data path.  The adapter will be closed\n                             and dot5RingState will signify this\n                             condition."), status("mandatory")] uint32 dot5StatsLobeWires;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.4.2.1.15"), read, description("The number of Claim Token MAC frames\n                             received or transmitted after the interface\n                             has received a Ring Purge MAC frame.  This\n                             counter signifies the number of times the\n                             ring has been purged and is being recovered\n                             back into a normal operating state."), status("mandatory")] uint32 dot5StatsRecoverys;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.4.2.1.12"), read, description("The number of times this interface has\n                             detected an immediately recoverable\n                             fatal error.  It denotes the number of\n                             times this interface is either\n                             transmitting or receiving beacon MAC\n                             frames."), status("mandatory")] uint32 dot5StatsHardErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.4.2.1.13"), read, description("The number of times this interface has\n                             detected the loss of signal condition from\n                             the ring."), status("mandatory")] uint32 dot5StatsSignalLoss;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.4.2.1.2"), read, description("This counter is incremented when a frame\n                             or token is copied or repeated by a\n                             station, the E bit is zero in the frame\n                             or token and one of the following\n                             conditions exists: 1) there is a\n                             non-data bit (J or K bit) between the SD\n                             and the ED of the frame or token, or\n                             2) there is an FCS error in the frame."), status("mandatory")] uint32 dot5StatsLineErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.4.2.1.19"), read, description("The number of times the interface has\n                             detected that the frequency of the\n                             incoming signal differs from the expected\n                             frequency by more than that specified by\n                             the IEEE 802.5 standard, see chapter 7\n                             in [10]."), status("optional")] uint32 dot5StatsFreqErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.4.2.1.11"), read, description("The number of Soft Errors the interface\n                             has detected. It directly corresponds to\n                             the number of Report Error MAC frames\n                             that this interface has transmitted.\n                             Soft Errors are those which are\n                             recoverable by the MAC layer protocols."), status("mandatory")] uint32 dot5StatsSoftErrors;
};
[description("This table contains Token Ring interface\n                             parameters and state variables, one entry\n                             per 802.5 interface.\nA list of Token Ring status and parameter\n                              values for an 802.5 interface."), module_name("RFC1231-MIB"), group_objectid("1.3.6.1.3.4"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_RFC1231_MIB_dot5Table : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.3.4.1.1.1"), read, description("The value of this object identifies the\n\n\n\n\n\n                              802.5 interface for which this entry\n                              contains management information.  The\n                              value of this object for a particular\n                              interface has the same value as the\n                              ifIndex object, defined in [4,6],\n                              for the same interface."), status("mandatory"), key, key_order(1)] sint32 dot5IfIndex;
	[textual_convention("EnumeratedINTEGER"), enumeration("true(1),false(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.3.4.1.1.8"), read, write, description("If this object has a value of true(1) then\n\n\n\n\n\n                             this interface will participate in the\n                             active monitor selection process.  If the\n                             value is false(2) then it will not.\n                             Setting this object might not have an\n                             effect until the next time the interface\n                             is opened."), status("mandatory")] string dot5ActMonParticipate;
	[textual_convention("MacAddress"), encoding("OCTETSTRING"), object_syntax("MacAddress"), display_hint("1x:"), object_identifier("1.3.6.1.3.4.1.1.7"), read, description("The MAC-address of the up stream neighbor\n                              station in the ring."), status("mandatory")] string dot5UpStream;
	[textual_convention("EnumeratedINTEGER"), enumeration("no-op(1),open(2),reset(3),close(4)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.3.4.1.1.2"), read, write, description("When this object is set to the value of\n                              open(2), the station should go into the\n                              open state.  The progress and success of\n                              the open is given by the values of the\n                              objects dot5RingState and\n                              dot5RingOpenStatus.\n                                  When this object is set to the value\n                              of reset(3), then the station should do\n                              a reset.  On a reset, all MIB counters\n                              should retain their values, if possible.\n                              Other side affects are dependent on the\n                              hardware chip set.\n                                  When this object is set to the value\n                              of close(4), the station should go into\n                              the stopped state by removing itself\n                              from the ring.\n                                  Setting this object to a value of\n                              no-op(1) has no effect.\n                                  When read, this object always has a\n                              value of no-op(1)."), status("mandatory")] string dot5Commands;
	[textual_convention("EnumeratedINTEGER"), enumeration("unknown(1),oneMegabit(2),fourMegabit(3),sixteenMegabit(4)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.3.4.1.1.6"), read, write, description("The ring's bandwidth."), status("mandatory")] string dot5RingSpeed;
	[textual_convention("EnumeratedINTEGER"), enumeration("opened(1),closed(2),opening(3),closing(4),openFailure(5),ringFailure(6)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.3.4.1.1.4"), read, description("The current interface state with respect\n                             to entering or leaving the ring."), status("mandatory")] string dot5RingState;
	[textual_convention("MacAddress"), encoding("OCTETSTRING"), object_syntax("MacAddress"), display_hint("1x:"), object_identifier("1.3.6.1.3.4.1.1.9"), read, write, description("The bit mask of all Token Ring functional\n                             addresses for which this interface will\n                             accept frames."), status("mandatory")] string dot5Functional;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.3.4.1.1.3"), read, description("The current interface status which can\n                             be used to diagnose fluctuating problems\n                             that can occur on token rings, after a\n\n\n\n\n\n                             station has successfully been added to\n                             the ring.\n                                Before an open is completed, this\n                             object has the value for the 'no status'\n                             condition.  The dot5RingState and\n                             dot5RingOpenStatus objects provide for\n                             debugging problems when the station\n                             can not even enter the ring.\n                                 The object's value is a sum of\n                             values, one for each currently applicable\n                             condition.  The following values are\n                             defined for various conditions:\n\n                                     0 = No Problems detected\n                                    32 = Ring Recovery\n                                    64 = Single Station\n                                   256 = Remove Received\n                                   512 = reserved\n                                  1024 = Auto-Removal Error\n                                  2048 = Lobe Wire Fault\n                                  4096 = Transmit Beacon\n                                  8192 = Soft Error\n                                 16384 = Hard Error\n                                 32768 = Signal Loss\n                                131072 = no status, open not completed."), status("mandatory")] sint32 dot5RingStatus;
	[textual_convention("EnumeratedINTEGER"), enumeration("noOpen(1),badParam(2),lobeFailed(3),signalLoss(4),insertionTimeout(5),ringFailed(6),beaconing(7),duplicateMAC(8),requestFailed(9),removeReceived(10),open(11)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.3.4.1.1.5"), read, description("This object indicates the success, or the\n                             reason for failure, of the station's most\n                             recent attempt to enter the ring."), status("mandatory")] string dot5RingOpenStatus;
};

