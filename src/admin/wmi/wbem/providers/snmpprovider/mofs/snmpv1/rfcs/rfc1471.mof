// Copyright (c) 1997-2001 Microsoft Corporation, All Rights Reserved
//	MOF Generated for module "PPP-LCP-MIB" by smi2smir version 1.10.635.0000
qualifier write:ToInstance ToSubClass;
qualifier read:ToInstance ToSubClass;
qualifier provider:ToInstance ToSubClass;
qualifier singleton:ToInstance ToSubClass;
qualifier dynamic:ToInstance ToSubClass;
qualifier textual_convention:ToInstance ToSubClass;
qualifier object_identifier:ToInstance ToSubClass;
qualifier encoding:ToInstance ToSubClass;
qualifier object_syntax:ToInstance ToSubClass;
qualifier status:ToInstance ToSubClass;
qualifier fixed_length:ToInstance ToSubClass;
qualifier variable_length:ToInstance ToSubClass;
qualifier variable_value:ToInstance ToSubClass;
qualifier bits:ToInstance ToSubClass;
qualifier key_order:ToInstance ToSubClass;
qualifier enumeration:ToInstance ToSubClass;
qualifier bits:ToInstance ToSubClass;
qualifier description:ToInstance ToSubClass;
qualifier display_hint:ToInstance ToSubClass;
qualifier defval:ToInstance ToSubClass;
qualifier units:ToInstance ToSubClass;
qualifier reference:ToInstance ToSubClass;
qualifier virtual_key:ToInstance ToSubClass;
qualifier rowstatus:ToInstance ToSubClass;
qualifier module_name:ToInstance ToSubClass;
qualifier module_imports:ToInstance ToSubClass;
qualifier group_objectid:ToInstance ToSubClass;

[abstract]
class SnmpMacro
{
};

[abstract]
class SnmpObjectType:SnmpMacro
{
};

class SnmpNotifyStatus:__ExtendedStatus
{
[write] sint32 SnmpStatusCode;
[write] string Description;
};

[description("A table containing the LCP configuration\n                         parameters for this PPP Link. These variables\n                         represent the initial configuration of the PPP\n\n\n\n\n\n                         Link. The actual values of the parameters may\n                         be changed when the link is brought up via the\n                         LCP options negotiation mechanism.\nConfiguration information about a particular\n                         PPP Link."), module_name("PPP-LCP-MIB"), group_objectid("1.3.6.1.2.1.10.23.1.1"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_PPP_LCP_MIB_pppLinkConfigTable : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..128"), object_identifier("1.3.6.1.2.1.10.23.1.1.2.1.5"), read, write, description("The size of the FCS, in bits, the local node\n                         will attempt to negotiate for use with the\n                         remote node. Regardless of the value of this\n                         object, the local node will comply with any FCS\n                         size negotiations initiated by the remote node,\n                         per the PPP specification. Changing this object\n                         will have effect when the link is next\n                         restarted."), status("mandatory"), defval("16")] sint32 pppLinkConfigFcsSize;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..2147483647"), object_identifier("1.3.6.1.2.1.10.23.1.1.2.1.1"), read, write, description("The initial Maximum Receive Unit (MRU) that\n                         the local PPP entity will advertise to the\n                         remote entity. If the value of this variable is\n                         0 then the local PPP entity will not advertise\n                         any MRU to the remote entity and the default\n                         MRU will be assumed. Changing this object will\n                         have effect when the link is next restarted."), reference("Section 7.2, Maximum Receive Unit of RFC1331."), status("mandatory"), defval("1500")] sint32 pppLinkConfigInitialMRU;
	[textual_convention("EnumeratedINTEGER"), enumeration("false(1),true(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.23.1.1.2.1.4"), read, write, description("If true(2) then the local node will attempt to\n                         perform Magic Number negotiation with the\n                         remote node. If false(1) then this negotiation\n                         is not performed. In any event, the local node\n                         will comply with any magic number negotiations\n                         attempted by the remote node, per the PPP\n                         specification. Changing this object will have\n                         effect when the link is next restarted."), reference("Section 7.6, Magic Number, of RFC1331."), status("mandatory"), defval("1")] string pppLinkConfigMagicNumber;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("OCTETSTRING"), fixed_length(4), object_identifier("1.3.6.1.2.1.10.23.1.1.2.1.2"), read, write, description("The Asynchronous-Control-Character-Map (ACC)\n                         that the local PPP entity requires for use on\n                         its receive side. In effect, this is the ACC\n                         Map that is required in order to ensure that\n                         the local modem will successfully receive all\n                         characters. The actual ACC map used on the\n                         receive side of the link will be a combination\n                         of the local node's pppLinkConfigReceiveACCMap\n                         and the remote node's\n                         pppLinkConfigTransmitACCMap. Changing this\n                         object will have effect when the link is next\n                         restarted."), reference("Section 7.3, page 4, Async-Control-Character-\n                         Map of RFC1331."), status("mandatory"), defval("ffffffff")] string pppLinkConfigReceiveACCMap;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("OCTETSTRING"), fixed_length(4), object_identifier("1.3.6.1.2.1.10.23.1.1.2.1.3"), read, write, description("The Asynchronous-Control-Character-Map (ACC)\n                         that the local PPP entity requires for use on\n                         its transmit side. In effect, this is the ACC\n                         Map that is required in order to ensure that\n                         all characters can be successfully transmitted\n                         through the local modem.  The actual ACC map\n                         used on the transmit side of the link will be a\n                         combination of the local node's\n                         pppLinkConfigTransmitACCMap and the remote\n                         node's pppLinkConfigReceiveACCMap. Changing\n                         this object will have effect when the link is\n                         next restarted."), reference("Section 7.3, page 4, Async-Control-Character-\n                         Map of RFC1331."), status("mandatory"), defval("ffffffff")] string pppLinkConfigTransmitACCMap;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.2.2.1.1"), read, description("A unique value for each interface.  Its value\n                      ranges between 1 and the value of ifNumber.  The\n                      value for each interface must remain constant at\n                      least from one re-initialization of the entity's\n                      network management system to the next re-\n                      initialization."), status("mandatory"), virtual_key, key, key_order(1)] sint32 ifIndex;
};
[description("A table containing PPP-link specific variables\n                         for this PPP implementation.\nManagement information about a particular PPP\n                         Link."), module_name("PPP-LCP-MIB"), group_objectid("1.3.6.1.2.1.10.23.1.1"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_PPP_LCP_MIB_pppLinkStatusTable : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..2147483648"), object_identifier("1.3.6.1.2.1.10.23.1.1.1.1.6"), read, description("The current value of the MRU for the local PPP\n                         Entity. This value is the MRU that the remote\n                         entity is using when sending packets to the\n                         local PPP entity. The value of this object is\n                         meaningful only when the link has reached the\n                         open state (ifOperStatus is up)."), status("mandatory")] sint32 pppLinkStatusLocalMRU;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..2147483648"), object_identifier("1.3.6.1.2.1.10.23.1.1.1.1.7"), read, description("The current value of the MRU for the remote\n                         PPP Entity. This value is the MRU that the\n                         local entity is using when sending packets to\n                         the remote PPP entity. The value of this object\n                         is meaningful only when the link has reached\n                         the open state (ifOperStatus is up)."), status("mandatory")] sint32 pppLinkStatusRemoteMRU;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.10.23.1.1.1.1.3"), read, description("The number of packets received on this link\n                         with an incorrect Control Field. This counter\n                         is a component of the ifInErrors variable that\n                         is associated with the interface that\n                         represents this PPP Link."), reference("Section 3.1, Control Field, of RFC1331."), status("mandatory")] uint32 pppLinkStatusBadControls;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.10.23.1.1.1.1.2"), read, description("The number of packets received with an\n                         incorrect Address Field. This counter is a\n                         component of the ifInErrors variable that is\n                         associated with the interface that represents\n                         this PPP Link."), reference("Section 3.1, Address Field, of RFC1331."), status("mandatory")] uint32 pppLinkStatusBadAddresses;
	[textual_convention("EnumeratedINTEGER"), enumeration("enabled(1),disabled(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.23.1.1.1.1.11"), read, description("Indicates whether the remote PPP entity will\n                         use Protocol Compression when transmitting\n                         packets to the local PPP entity. The value of\n                         this object is meaningful only when the link\n                         has reached the open state (ifOperStatus is\n                         up)."), status("mandatory")] string pppLinkStatusRemoteToLocalProtocolCompression;
	[textual_convention("EnumeratedINTEGER"), enumeration("enabled(1),disabled(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.23.1.1.1.1.10"), read, description("Indicates whether the local PPP entity will\n\n\n\n\n\n                         use Protocol Compression when transmitting\n                         packets to the remote PPP entity. The value of\n                         this object is meaningful only when the link\n                         has reached the open state (ifOperStatus is\n                         up)."), status("mandatory")] string pppLinkStatusLocalToRemoteProtocolCompression;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..2147483647"), object_identifier("1.3.6.1.2.1.10.23.1.1.1.1.1"), read, description("The value of ifIndex that identifies the\n                         lower-level interface over which this PPP Link\n                         is operating. This interface would usually be\n                         an HDLC or RS-232 type of interface. If there\n                         is no lower-layer interface element, or there\n                         is no ifEntry for the element, or the element\n                         can not be identified, then the value of this\n                         object is 0.  For example, suppose that PPP is\n                         operating over a serial port. This would use\n                         two entries in the ifTable. The PPP could be\n                         running over `interface' number 123 and the\n                         serial port could be running over `interface'\n                         number 987.  Therefore, ifSpecific.123 would\n                         contain the OBJECT IDENTIFIER ppp\n                         pppLinkStatusPhysicalIndex.123 would contain\n                         987, and ifSpecific.987 would contain the\n                         OBJECT IDENTIFIER for the serial-port's media-\n                         specific MIB."), status("mandatory")] sint32 pppLinkStatusPhysicalIndex;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..128"), object_identifier("1.3.6.1.2.1.10.23.1.1.1.1.15"), read, description("The size of the Frame Check Sequence (FCS) in\n                         bits that the remote node will generate when\n                         sending packets to the local node. The value of\n                         this object is meaningful only when the link\n                         has reached the open state (ifOperStatus is\n                         up)."), status("mandatory")] sint32 pppLinkStatusReceiveFcsSize;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.10.23.1.1.1.1.4"), read, description("The number of received packets that have been\n                         discarded because their length exceeded the\n                         MRU. This counter is a component of the\n                         ifInErrors variable that is associated with the\n                         interface that represents this PPP Link. NOTE,\n                         packets which are longer than the MRU but which\n                         are successfully received and processed are NOT\n                         included in this count."), status("mandatory")] uint32 pppLinkStatusPacketTooLongs;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..128"), object_identifier("1.3.6.1.2.1.10.23.1.1.1.1.14"), read, description("The size of the Frame Check Sequence (FCS) in\n                         bits that the local node will generate when\n                         sending packets to the remote node. The value\n                         of this object is meaningful only when the link\n                         has reached the open state (ifOperStatus is\n                         up)."), status("mandatory")] sint32 pppLinkStatusTransmitFcsSize;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("OCTETSTRING"), fixed_length(4), object_identifier("1.3.6.1.2.1.10.23.1.1.1.1.9"), read, description("The ACC Map used by the remote PPP entity when\n                         transmitting packets to the local PPP entity.\n                         The value of this object is meaningful only\n                         when the link has reached the open state\n                         (ifOperStatus is up)."), status("mandatory")] string pppLinkStatusPeerToLocalACCMap;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("OCTETSTRING"), fixed_length(4), object_identifier("1.3.6.1.2.1.10.23.1.1.1.1.8"), read, description("The current value of the ACC Map used for\n                         sending packets from the local PPP entity to\n                         the remote PPP entity. The value of this object\n                         is meaningful only when the link has reached\n                         the open state (ifOperStatus is up)."), status("mandatory")] string pppLinkStatusLocalToPeerACCMap;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.10.23.1.1.1.1.5"), read, description("The number of received packets that have been\n                         discarded due to having an incorrect FCS. This\n                         counter is a component of the ifInErrors\n                         variable that is associated with the interface\n                         that represents this PPP Link."), status("mandatory")] uint32 pppLinkStatusBadFCSs;
	[textual_convention("EnumeratedINTEGER"), enumeration("enabled(1),disabled(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.23.1.1.1.1.13"), read, description("Indicates whether the remote PPP entity will\n                         use Address and Control Compression when\n                         transmitting packets to the local PPP entity.\n                         The value of this object is meaningful only\n                         when the link has reached the open state\n                         (ifOperStatus is up)."), status("mandatory")] string pppLinkStatusRemoteToLocalACCompression;
	[textual_convention("EnumeratedINTEGER"), enumeration("enabled(1),disabled(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.23.1.1.1.1.12"), read, description("Indicates whether the local PPP entity will\n                         use Address and Control Compression when\n                         transmitting packets to the remote PPP entity.\n                         The value of this object is meaningful only\n                         when the link has reached the open state\n                         (ifOperStatus is up)."), status("mandatory")] string pppLinkStatusLocalToRemoteACCompression;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.2.2.1.1"), read, description("A unique value for each interface.  Its value\n                      ranges between 1 and the value of ifNumber.  The\n                      value for each interface must remain constant at\n                      least from one re-initialization of the entity's\n                      network management system to the next re-\n                      initialization."), status("mandatory"), virtual_key, key, key_order(1)] sint32 ifIndex;
};
[description("Table containing the LQR parameters and\n                         statistics for the local PPP entity.\nLQR information for a particular PPP link. A\n                         PPP link will have an entry in this table if\n                         and only if LQR Quality Monitoring has been\n                         successfully negotiated for said link."), module_name("PPP-LCP-MIB"), group_objectid("1.3.6.1.2.1.10.23.1.2"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_PPP_LCP_MIB_pppLqrTable : SnmpObjectType
{
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.10.23.1.2.1.1.6"), read, description("The value of the InLQRs counter on the local\n                         node for the link identified by ifIndex."), reference("Section 2.2, Counters, of RFC1333."), status("mandatory")] uint32 pppLqrInLQRs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.10.23.1.2.1.1.5"), read, description("The value of the OutLQRs counter on the local\n                         node for the link identified by ifIndex."), reference("Section 2.2, Counters, of RFC1333."), status("mandatory")] uint32 pppLqrOutLQRs;
	[textual_convention("EnumeratedINTEGER"), enumeration("good(1),bad(2),not-determined(3)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.23.1.2.1.1.1"), read, description("The current quality of the link as declared by\n                         the local PPP entity's Link-Quality Management\n                         modules. No effort is made to define good or\n                         bad, nor the policy used to determine it. The\n\n\n\n\n\n                         not-determined value indicates that the entity\n                         does not actually evaluate the link's quality.\n                         This value is used to disambiguate the\n                         `determined to be good' case from the `no\n                         determination made and presumed to be good'\n                         case."), status("mandatory")] string pppLqrQuality;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..2147483648"), object_identifier("1.3.6.1.2.1.10.23.1.2.1.1.3"), read, description("The LQR reporting period, in hundredths of a\n                         second that is in effect for the local PPP\n                         entity."), reference("Section 2.5, Configuration Option Format, of\n                         RFC1333."), status("mandatory")] sint32 pppLqrLocalPeriod;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.10.23.1.2.1.1.2"), read, description("The LQR InGoodOctets counter for this link."), reference("Section 2.2, Counters, of RFC1333."), status("mandatory")] uint32 pppLqrInGoodOctets;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..2147483648"), object_identifier("1.3.6.1.2.1.10.23.1.2.1.1.4"), read, description("The LQR reporting period, in hundredths of a\n                         second, that is in effect for the remote PPP\n                         entity."), reference("Section 2.5, Configuration Option Format, of\n                         RFC1333."), status("mandatory")] sint32 pppLqrRemotePeriod;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.2.2.1.1"), read, description("A unique value for each interface.  Its value\n                      ranges between 1 and the value of ifNumber.  The\n                      value for each interface must remain constant at\n                      least from one re-initialization of the entity's\n                      network management system to the next re-\n                      initialization."), status("mandatory"), virtual_key, key, key_order(1)] sint32 ifIndex;
};
[description("Table containing additional LQR information\n                         for the local PPP entity.\nExtended LQR information for a particular PPP\n                         link. Assuming that this group has been\n                         implemented, a PPP link will have an entry in\n                         this table if and only if LQR Quality\n                         Monitoring has been successfully negotiated for\n                         said link."), module_name("PPP-LCP-MIB"), group_objectid("1.3.6.1.2.1.10.23.1.2"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_PPP_LCP_MIB_pppLqrExtnsTable : SnmpObjectType
{
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("OCTETSTRING"), fixed_length(68), object_identifier("1.3.6.1.2.1.10.23.1.2.3.1.1"), read, description("This object contains the most recently\n                         received LQR packet.  The format of the packet\n                         is as described in the LQM Protocol\n                         specificiation. All fields of the packet,\n                         including the `save' fields, are stored in this\n                         object.\n\n                         The LQR packet is stored in network byte order.\n                         The LAP-B and PPP headers are not stored in\n                         this object; the first four octets of this\n                         variable contain the Magic-Number field, the\n                         second four octets contain the LastOutLQRs\n                         field and so on. The last four octets of this\n                         object contain the SaveInOctets field of the\n                         LQR packet."), reference("Section 2.6, Packet Format, of RFC1333"), status("mandatory")] string pppLqrExtnsLastReceivedLqrPacket;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.2.2.1.1"), read, description("A unique value for each interface.  Its value\n                      ranges between 1 and the value of ifNumber.  The\n                      value for each interface must remain constant at\n                      least from one re-initialization of the entity's\n                      network management system to the next re-\n                      initialization."), status("mandatory"), virtual_key, key, key_order(1)] sint32 ifIndex;
};
[description("Table containing the LQR Configuration\n                         parameters for the local PPP entity.\nLQR configuration information for a particular\n                         PPP link."), module_name("PPP-LCP-MIB"), group_objectid("1.3.6.1.2.1.10.23.1.2"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_PPP_LCP_MIB_pppLqrConfigTable : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..2147483647"), object_identifier("1.3.6.1.2.1.10.23.1.2.2.1.1"), read, write, description("The LQR Reporting Period that the local PPP\n                         entity will attempt to negotiate with the\n                         remote entity, in units of hundredths of a\n                         second. Changing this object will have effect\n                         when the link is next restarted."), reference("Section 2.5, Configuration Option Format, of\n                         RFC1333."), status("mandatory"), defval("0")] sint32 pppLqrConfigPeriod;
	[textual_convention("EnumeratedINTEGER"), enumeration("disabled(1),enabled(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.23.1.2.2.1.2"), read, write, description("If enabled(2) then the local node will attempt\n                         to perform LQR negotiation with the remote\n                         node. If disabled(1) then this negotiation is\n                         not performed. In any event, the local node\n                         will comply with any magic number negotiations\n                         attempted by the remote node, per the PPP\n                         specification. Changing this object will have\n                         effect when the link is next restarted.\n                         Setting this object to the value disabled(1)\n                         has the effect of invalidating the\n                         corresponding entry in the pppLqrConfigTable\n                         object. It is an implementation-specific matter\n                         as to whether the agent removes an invalidated\n                         entry from the table. Accordingly, management\n                         stations must be prepared to receive tabular\n                         information from agents that corresponds to\n                         entries not currently in use."), reference("Section 7.6, Magic Number, of RFC1331."), status("mandatory"), defval("2")] string pppLqrConfigStatus;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.2.2.1.1"), read, description("A unique value for each interface.  Its value\n                      ranges between 1 and the value of ifNumber.  The\n                      value for each interface must remain constant at\n                      least from one re-initialization of the entity's\n                      network management system to the next re-\n                      initialization."), status("mandatory"), virtual_key, key, key_order(1)] sint32 ifIndex;
};

