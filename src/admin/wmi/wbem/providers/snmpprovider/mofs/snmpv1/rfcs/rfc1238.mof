// Copyright (c) 1997-2001 Microsoft Corporation, All Rights Reserved
//	MOF Generated for module "CLNS-MIB" by smi2smir version 1.10.635.0000
qualifier write:ToInstance ToSubClass;
qualifier read:ToInstance ToSubClass;
qualifier provider:ToInstance ToSubClass;
qualifier singleton:ToInstance ToSubClass;
qualifier dynamic:ToInstance ToSubClass;
qualifier textual_convention:ToInstance ToSubClass;
qualifier object_identifier:ToInstance ToSubClass;
qualifier encoding:ToInstance ToSubClass;
qualifier object_syntax:ToInstance ToSubClass;
qualifier status:ToInstance ToSubClass;
qualifier fixed_length:ToInstance ToSubClass;
qualifier variable_length:ToInstance ToSubClass;
qualifier variable_value:ToInstance ToSubClass;
qualifier bits:ToInstance ToSubClass;
qualifier key_order:ToInstance ToSubClass;
qualifier enumeration:ToInstance ToSubClass;
qualifier bits:ToInstance ToSubClass;
qualifier description:ToInstance ToSubClass;
qualifier display_hint:ToInstance ToSubClass;
qualifier defval:ToInstance ToSubClass;
qualifier units:ToInstance ToSubClass;
qualifier reference:ToInstance ToSubClass;
qualifier virtual_key:ToInstance ToSubClass;
qualifier rowstatus:ToInstance ToSubClass;
qualifier module_name:ToInstance ToSubClass;
qualifier module_imports:ToInstance ToSubClass;
qualifier group_objectid:ToInstance ToSubClass;

[abstract]
class SnmpMacro
{
};

[abstract]
class SnmpObjectType:SnmpMacro
{
};

class SnmpNotifyStatus:__ExtendedStatus
{
[write] sint32 SnmpStatusCode;
[write] string Description;
};

[description(""), module_name("CLNS-MIB"), singleton, group_objectid("1.3.6.1.3.1.4"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_CLNS_MIB_es_is : SnmpObjectType
{
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.4.5"), read, description("The number of RDU PDUs received by this entity."), status("mandatory")] uint32 esisRDUins;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.4.2"), read, description("The number of ESH PDUs sent by this entity."), status("mandatory")] uint32 esisESHouts;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.4.4"), read, description("The number of ISH PDUs sent by this entity."), status("mandatory")] uint32 esisISHouts;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.4.6"), read, description("The number of RDU PDUs sent by this entity."), status("mandatory")] uint32 esisRDUouts;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.4.1"), read, description("The number of ESH PDUs received by this entity."), status("mandatory")] uint32 esisESHins;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.4.3"), read, description("The number of ISH PDUs received by this entity."), status("mandatory")] uint32 esisISHins;
};
[description(""), module_name("CLNS-MIB"), singleton, group_objectid("1.3.6.1.3.1.2"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_CLNS_MIB_error : SnmpObjectType
{
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.2.11"), read, description("The number of unreachable destination CLNP Error\n                      PDUs received by this entity."), status("mandatory")] uint32 clnpInErrUnreachDsts;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.2.36"), read, description("The number of source route syntax CLNP Error PDUs\n                      sent by this entity."), status("mandatory")] uint32 clnpOutErrSRSyntaxes;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.2.40"), read, description("The number of hop count exceeded while\n                      reassembling CLNP Error PDUs sent by this entity."), status("mandatory")] uint32 clnpOutErrHopReassms;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.2.12"), read, description("The number of unknown destination CLNP Error PDUs\n                      received by this entity."), status("mandatory")] uint32 clnpInErrUnknownDsts;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.2.20"), read, description("The number of version mismatch CLNP Error PDUs\n                      received by this entity."), status("mandatory")] uint32 clnpInErrUnsVersions;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.2.41"), read, description("The number of unsupported option CLNP Error PDUs\n\n\n\n\n\n                      sent by this entity."), status("mandatory")] uint32 clnpOutErrUnsOptions;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.2.33"), read, description("The number of unreachable destination CLNP Error\n                      PDUs sent by this entity."), status("mandatory")] uint32 clnpOutErrUnreachDsts;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.2.34"), read, description("The number of unknown destination CLNP Error PDUs\n                      sent by this entity."), status("mandatory")] uint32 clnpOutErrUnknownDsts;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.2.42"), read, description("The number of version mismatch CLNP Error PDUs\n                      sent by this entity."), status("mandatory")] uint32 clnpOutErrUnsVersions;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.2.1"), read, description("The number of CLNP Error PDUs received by this\n                      entity."), status("mandatory")] uint32 clnpInErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.2.24"), read, description("The number of reassembly interference CLNP Error\n                      PDUs received by this entity."), status("mandatory")] uint32 clnpInErrInterferences;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.2.21"), read, description("The number of unsupported security option CLNP\n                      Error PDUs received by this entity."), status("mandatory")] uint32 clnpInErrUnsSecurities;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.2.7"), read, description("The number of header syntax CLNP Error PDUs\n                      received by this entity."), status("mandatory")] uint32 clnpInErrHdrs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.2.8"), read, description("The number of segmentation disallowed CLNP Error\n                      PDUs received by this entity."), status("mandatory")] uint32 clnpInErrSegs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.2.17"), read, description("The number of hop count exceeded CLNP Error PDUs\n                      received by this entity."), status("mandatory")] uint32 clnpInErrHops;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.2.10"), read, description("The number of duplicate option CLNP Error PDUs\n                      received by this entity."), status("mandatory")] uint32 clnpInErrDups;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.2.2"), read, description("The number of CLNP Error PDUs sent by this\n                      entity."), status("mandatory")] uint32 clnpOutErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.2.46"), read, description("The number of reassembly interference CLNP Error\n                      PDUs sent by this entity."), status("mandatory")] uint32 clnpOutErrInterferences;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.2.43"), read, description("The number of unsupported security option CLNP\n                      Error PDUs sent by this entity."), status("mandatory")] uint32 clnpOutErrUnsSecurities;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.2.4"), read, description("The number of protocol procedure CLNP Error PDUs\n                      received by this entity."), status("mandatory")] uint32 clnpInErrProcs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.2.29"), read, description("The number of header syntax CLNP Error PDUs sent\n                      by this entity."), status("mandatory")] uint32 clnpOutErrHdrs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.2.30"), read, description("The number of segmentation disallowed CLNP Error\n                      PDUs sent by this entity."), status("mandatory")] uint32 clnpOutErrSegs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.2.39"), read, description("The number of hop count exceeded CLNP Error PDUs\n                      sent by this entity."), status("mandatory")] uint32 clnpOutErrHops;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.2.32"), read, description("The number of duplicate option CLNP Error PDUs\n                      sent by this entity."), status("mandatory")] uint32 clnpOutErrDups;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.2.23"), read, description("The number of unsupported record route option\n                      CLNP Error PDUs received by this entity."), status("mandatory")] uint32 clnpInErrUnsRRs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.2.22"), read, description("The number of unsupported source route option\n                      CLNP Error PDUs received by this entity."), status("mandatory")] uint32 clnpInErrUnsSRs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.2.5"), read, description("The number of checksum CLNP Error PDUs received\n                      by this entity."), status("mandatory")] uint32 clnpInErrCksums;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.2.26"), read, description("The number of protocol procedure CLNP Error PDUs\n                      sent by this entity."), status("mandatory")] uint32 clnpOutErrProcs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.2.45"), read, description("The number of unsupported record route option\n                      CLNP Error PDUs sent by this entity."), status("mandatory")] uint32 clnpOutErrUnsRRs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.2.44"), read, description("The number of unsupported source route option\n                      CLNP Error PDUs sent by this entity."), status("mandatory")] uint32 clnpOutErrUnsSRs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.2.9"), read, description("The number of incomplete PDU CLNP Error PDUs\n\n\n\n\n\n                      received by this entity."), status("mandatory")] uint32 clnpInErrIncomps;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.2.3"), read, description("The number of unspecified CLNP Error PDUs\n                      received by this entity."), status("mandatory")] uint32 clnpInErrUnspecs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.2.27"), read, description("The number of checksum CLNP Error PDUs sent by\n                      this entity."), status("mandatory")] uint32 clnpOutErrCksums;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.2.6"), read, description("The number of congestion drop CLNP Error PDUs\n                      received by this entity."), status("mandatory")] uint32 clnpInErrCongests;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.2.31"), read, description("The number of incomplete PDU CLNP Error PDUs sent\n                      by this entity."), status("mandatory")] uint32 clnpOutErrIncomps;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.2.25"), read, description("The number of unspecified CLNP Error PDUs sent by\n                      this entity."), status("mandatory")] uint32 clnpOutErrUnspecs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.2.13"), read, description("The number of unspecified source route CLNP Error\n                      PDUs received by this entity."), status("mandatory")] uint32 clnpInErrSRUnspecs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.2.16"), read, description("The number of source route bad path CLNP Error\n                      PDUs received by this entity."), status("mandatory")] uint32 clnpInErrSRBadPaths;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.2.15"), read, description("The number of source route unknown address CLNP\n                      Error PDUs received by this entity."), status("mandatory")] uint32 clnpInErrSRUnkAddrs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.2.28"), read, description("The number of congestion drop CLNP Error PDUs\n                      sent by this entity."), status("mandatory")] uint32 clnpOutErrCongests;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.2.14"), read, description("The number of source route syntax CLNP Error PDUs\n                      received by this entity."), status("mandatory")] uint32 clnpInErrSRSyntaxes;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.2.18"), read, description("The number of hop count exceeded while\n                      reassembling CLNP Error PDUs received by this\n                      entity."), status("mandatory")] uint32 clnpInErrHopReassms;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.2.35"), read, description("The number of unspecified source route CLNP Error\n                      PDUs sent by this entity."), status("mandatory")] uint32 clnpOutErrSRUnspecs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.2.19"), read, description("The number of unsupported option CLNP Error PDUs\n                      received by this entity."), status("mandatory")] uint32 clnpInErrUnsOptions;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.2.38"), read, description("The number of source route bad path CLNP Error\n                      PDUs sent by this entity."), status("mandatory")] uint32 clnpOutErrSRBadPaths;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.2.37"), read, description("The number of source route unknown address CLNP\n                      Error PDUs sent by this entity."), status("mandatory")] uint32 clnpOutErrSRUnkAddrs;
};
[description(""), module_name("CLNS-MIB"), singleton, group_objectid("1.3.6.1.3.1.1"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_CLNS_MIB_clnp : SnmpObjectType
{
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.1.25"), read, description("The number of CLNP PDU segments that have been\n                      input with options at this entity."), status("mandatory")] uint32 clnpInOpts;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.1.26"), read, description("The number of CLNP PDU segments that have been\n                      generated with options by this entity."), status("mandatory")] uint32 clnpOutOpts;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.1.6"), read, description("The number of input PDUs for which this entity\n                      was not the final destination and which an attempt\n                      was made to forward them onward."), status("mandatory")] uint32 clnpForwPDUs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.1.16"), read, description("The number of CLNP PDUs successfully re-assembled\n                      at this entity."), status("mandatory")] uint32 clnpReasmOKs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.1.19"), read, description("The number of CLNP PDUs that have been discarded\n                      because they needed to be fragmented at this\n                      entity but could not."), status("mandatory")] uint32 clnpSegFails;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.1.9"), read, description("The number of input CLNP PDUs for which no\n                      problems were encountered to prevent their\n                      continued processing, but were discarded (e.g.,\n                      for lack of buffer space).  Note that this counter\n                      does not include any PDUs discarded while awaiting\n                      re-assembly."), status("mandatory")] uint32 clnpInDiscards;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.1.20"), read, description("The number of CLNP PDU segments that have been\n                      generated as a result of segmentation at this\n                      entity."), status("mandatory")] uint32 clnpSegCreates;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.1.17"), read, description("The number of failures detected by the CLNP\n                      reassembly algorithm (for any reason: timed out,\n                      buffer size, etc)."), status("mandatory")] uint32 clnpReasmFails;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.1.3"), read, description("The total number of input PDUs received from all\n                      connected network interfaces running CLNP,\n                      including errors."), status("mandatory")] uint32 clnpInReceives;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.1.10"), read, description("The total number of input PDUs successfully\n                      delivered to the CLNS transport user."), status("mandatory")] uint32 clnpInDelivers;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.1.15"), read, description("The number of CLNP segments received which needed\n                      to be reassembled at this entity."), status("mandatory")] uint32 clnpReasmReqds;
	[textual_convention("EnumeratedINTEGER"), enumeration("is(1),es(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.3.1.1.1"), read, write, description("The indication of whether this entity is active\n                      as an intermediate or end system.  Only\n                      intermediate systems will forward PDUs onward that\n                      are not addressed to them."), status("mandatory")] string clnpForwarding;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.1.4"), read, description("The number of input PDUs discarded due to errors\n                      in the CLNP header, including bad checksums,\n                      version mismatch, lifetime exceeded, errors\n                      discovered in processing options, etc."), status("mandatory")] uint32 clnpInHdrErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.1.12"), read, description("The number of output CLNP PDUs for which no other\n                      problem was encountered to prevent their\n                      transmission but were discarded (e.g., for lack of\n                      buffer space).  Note this counter includes PDUs\n                      counted in clnpForwPDUs."), status("mandatory")] uint32 clnpOutDiscards;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.1.13"), read, description("The number of CLNP PDUs discarded because no\n                      route could be found to transmit them to their\n                      destination.  This counter includes any PDUs\n                      counted in clnpForwPDUs."), status("mandatory")] uint32 clnpOutNoRoutes;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.1.11"), read, description("The total number of CLNP PDUs which local CLNS\n                      user protocols supplied to CLNP for transmission\n                      requests.  This counter does not include any PDUs\n                      counted in clnpForwPDUs."), status("mandatory")] uint32 clnpOutRequests;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.1.5"), read, description("The number of input PDUs discarded because the\n                      NSAP address in the CLNP header's destination\n                      field was not a valid NSAP to be received at this\n                      entity.  This count includes addresses not\n                      understood.  For end systems, this is a count of\n                      PDUs which arrived with a destination NSAP which\n                      was not local."), status("mandatory")] uint32 clnpInAddrErrors;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.3.1.1.14"), read, description("The maximum number of seconds which received\n                      segments are held while they are awaiting\n                      reassembly at this entity."), status("mandatory")] sint32 clnpReasmTimeout;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.1.7"), read, description("The number of locally-addressed PDUs successfully\n                      received but discarded because the network layer\n                      protocol was unknown or unsupported (e.g., not\n                      CLNP or ES-IS)."), status("mandatory")] uint32 clnpInUnknownNLPs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.1.8"), read, description("The number of locally-addressed PDUs successfully\n                      received but discarded because the upper layer\n                      protocol was unknown or unsupported (e.g., not\n                      TP4)."), status("mandatory")] uint32 clnpInUnknownULPs;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.3.1.1.2"), read, write, description("The default value inserted into the Lifetime\n                      field of the CLNP PDU header of PDUs sourced by\n                      this entity."), status("mandatory")] sint32 clnpDefaultLifeTime;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.1.18"), read, description("The number of CLNP PDUs that have been\n                      successfully segmented at this entity."), status("mandatory")] uint32 clnpSegOKs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.3.1.1.27"), read, description("The number of routing entries which were chosen\n                      to be discarded even though they are valid.  One\n                      possible reason for discarding such an entry could\n                      be to free-up buffer space for other routing\n                      entries."), status("mandatory")] uint32 clnpRoutingDiscards;
};
[description("The CLNP Address Translation table used for\n\n\n\n\n\n                      mapping from physical addresses to CLNP\n                      addresses.\nEach entry contains on ClnpAddress to `physical'\n                      address equivalence."), module_name("CLNS-MIB"), group_objectid("1.3.6.1.3.1.1"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_CLNS_MIB_clnpMediaToNetTable : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.3.1.1.24.1.1"), read, write, description("The interface on which this entry's equivalence\n                      is effective.  The interface identified by a\n                      particular value of this index is the same\n                      interface as identified by the same value of\n                      ifIndex."), status("mandatory"), key, key_order(1)] sint32 clnpMediaToNetIfIndex;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("ClnpAddress"), variable_length("1..21"), object_identifier("1.3.6.1.3.1.1.24.1.2"), read, write, description("The ClnpAddress corresponding to the media-\n\n\n\n\n\n                      dependent `physical' address."), status("mandatory")] string clnpMediaToNetAddress;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.3.1.1.24.1.6"), read, write, description("The time in seconds this entry will be valid.\n                      Static entries should always report this field as\n                      -1."), status("mandatory")] sint32 clnpMediaToNetHoldTime;
	[textual_convention("PhysAddress"), encoding("OCTETSTRING"), object_syntax("PhysAddress"), display_hint("1x:"), object_identifier("1.3.6.1.3.1.1.24.1.3"), read, write, description("The media-dependent `physical' address."), status("mandatory"), key, key_order(2)] string clnpMediaToNetPhysAddress;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.3.1.1.24.1.5"), read, write, description("The number of seconds since this entry was last\n                      updated or otherwise determined to be correct.\n                      Note that no semantics of `too old' can be implied\n                      except through knowledge of the type of entry."), status("mandatory")] sint32 clnpMediaToNetAge;
	[textual_convention("EnumeratedINTEGER"), enumeration("other(1),invalid(2),dynamic(3),static(4)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.3.1.1.24.1.4"), read, write, description("The type of mapping.\n\n                      Setting this object to the value invalid(2) has\n                      the effect of invalidating the corresponding entry\n                      in the clnpMediaToNetTable.  That is, it\n                      effectively dissassociates the interface\n                      identified with said entry from the mapping\n                      identified with said entry.  It is an\n                      implementation-specific matter as to whether the\n                      agent removes an invalidated entry from the table.\n                      Accordingly, management stations must be prepared\n                      to receive tabular information from agents that\n                      corresponds to entries not currently in use.\n                      Proper interpretation of such entries requires\n                      examination of the relevant clnpMediaToNetType\n                      object."), status("mandatory")] string clnpMediaToNetType;
};
[description("The CLNP Address Translation table used for\n                      mapping from CLNP addresses to physical\n                      addresses.\nEach entry contains one CLNP address to\n                      `physical' address equivalence."), module_name("CLNS-MIB"), group_objectid("1.3.6.1.3.1.1"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_CLNS_MIB_clnpNetToMediaTable : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.3.1.1.23.1.1"), read, write, description("The interface on which this entry's equivalence\n                      is effective.  The interface identified by a\n                      particular value of this index is the same\n                      interface as identified by the same value of\n                      ifIndex."), status("mandatory"), key, key_order(1)] sint32 clnpNetToMediaIfIndex;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.3.1.1.23.1.6"), read, write, description("The time in seconds this entry will be valid.\n                      Static entries should always report this field as\n                      -1."), status("mandatory")] sint32 clnpNetToMediaHoldTime;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("ClnpAddress"), variable_length("1..21"), object_identifier("1.3.6.1.3.1.1.23.1.3"), read, write, description("The CLNP address corresponding to the media-\n                      dependent `physical' address."), status("mandatory"), key, key_order(2)] string clnpNetToMediaNetAddress;
	[textual_convention("PhysAddress"), encoding("OCTETSTRING"), object_syntax("PhysAddress"), display_hint("1x:"), object_identifier("1.3.6.1.3.1.1.23.1.2"), read, write, description("The media-dependent `physical' address."), status("mandatory")] string clnpNetToMediaPhysAddress;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.3.1.1.23.1.5"), read, write, description("The number of seconds since this entry was last\n                      updated or otherwise determined to be correct.\n                      Note that no semantics of `too old' can be implied\n                      except through knowledge of the type of entry."), status("mandatory")] sint32 clnpNetToMediaAge;
	[textual_convention("EnumeratedINTEGER"), enumeration("other(1),invalid(2),dynamic(3),static(4)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.3.1.1.23.1.4"), read, write, description("The type of mapping.\n\n                      Setting this object to the value invalid(2) has\n                      the effect of invalidating the corresponding entry\n                      in the clnpNetToMediaTable.  That is, it\n                      effectively dissassociates the interface\n                      identified with said entry from the mapping\n                      identified with said entry.  It is an\n                      implementation-specific matter as to whether the\n                      agent removes an invalidated entry from the table.\n                      Accordingly, management stations must be prepared\n                      to receive tabular information from agents that\n                      corresponds to entries not currently in use.\n                      Proper interpretation of such entries requires\n                      examination of the relevant clnpNetToMediaType\n                      object."), status("mandatory")] string clnpNetToMediaType;
};
[description("The table of addressing information relevant to\n                      this entity's CLNP addresses.  \nThe addressing information for one of this\n                      entity's CLNP addresses."), module_name("CLNS-MIB"), group_objectid("1.3.6.1.3.1.1"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_CLNS_MIB_clnpAddrTable : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..65535"), object_identifier("1.3.6.1.3.1.1.21.1.3"), read, description("The size of the largest CLNP PDU which this\n                      entity can re-assemble from incoming CLNP\n                      segmented PDUs received on this interface."), status("mandatory")] sint32 clnpAdEntReasmMaxSize;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("ClnpAddress"), variable_length("1..21"), object_identifier("1.3.6.1.3.1.1.21.1.1"), read, description("The CLNP address to which this entry's addressing\n\n\n\n\n\n                      information pertains."), status("mandatory"), key, key_order(1)] string clnpAdEntAddr;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.3.1.1.21.1.2"), read, description("The index value which uniquely identifies the\n                      interface to which this entry is applicable.  The\n                      interface identified by a particular value of this\n                      index is the same interface as identified by the\n                      same value of ifIndex."), status("mandatory")] sint32 clnpAdEntIfIndex;
};
[description("This entity's CLNP routing table.\nA route to a particular destination."), module_name("CLNS-MIB"), group_objectid("1.3.6.1.3.1.1"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_CLNS_MIB_clnpRoutingTable : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.3.1.1.22.1.10"), read, write, description("The number of seconds since this route was last\n                      updated or otherwise determined to be correct.\n                      Note that no semantics of `too old' can be implied\n                      except through knowledge of the routing protocol\n                      by which the route was learned."), status("mandatory")] sint32 clnpRouteAge;
	[textual_convention("OBJECTIDENTIFIER"), encoding("OBJECTIDENTIFIER"), object_syntax("OBJECTIDENTIFIER"), object_identifier("1.3.6.1.3.1.1.22.1.12"), read, description("A reference to MIB definitions specific to the\n                      particular routing protocol which is responsible\n                      for this route, as determined by the value\n                      specified in the route's clnpRouteProto value.  If\n                      this information is not present, its value should\n                      be set to the OBJECT IDENTIFIER { 0 0 }, which is\n                      a syntatically valid object identifier, and any\n                      conformant implementation of ASN.1 and BER must be\n                      able to generate and recognize this value."), status("mandatory")] string clnpRouteInfo;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("ClnpAddress"), variable_length("1..21"), object_identifier("1.3.6.1.3.1.1.22.1.1"), read, write, description("The destination CLNP address of this route."), status("mandatory"), key, key_order(1)] string clnpRouteDest;
	[textual_convention("EnumeratedINTEGER"), enumeration("other(1),invalid(2),direct(3),remote(4)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.3.1.1.22.1.8"), read, write, description("The type of route.\n\n                      Setting this object to the value invalid(2) has\n                      the effect of invaliding the corresponding entry\n                      in the clnpRoutingTable.  That is, it effectively\n                      dissasociates the destination identified with said\n                      entry from the route identified with said entry.\n                      It is an implementation-specific matter as to\n                      whether the agent removes an invalidated entry\n                      from the table.  Accordingly, management stations\n                      must be prepared to receive tabular information\n                      from agents that corresponds to entries not\n                      currently in use.  Proper interpretation of such\n                      entries requires examination of the relevant\n                      clnpRouteType object."), status("mandatory")] string clnpRouteType;
	[textual_convention("EnumeratedINTEGER"), enumeration("other(1),local(2),netmgmt(3),is-is(9),ciscoIgrp(11),bbnSpfIgp(12),ospf(13),bgp(14)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.3.1.1.22.1.9"), read, description("The routing mechanism via which this route was\n                      learned.  Inclusion of values for gateway routing\n                      protocols is not intended to imply that hosts\n                      should support those protocols."), status("mandatory")] string clnpRouteProto;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.3.1.1.22.1.3"), read, write, description("The primary routing metric for this route.  The\n                      semantics of this metric are determined by the\n                      routing-protocol specified in the route's\n                      clnpRouteProto value.  If this metric is not used,\n                      its value should be set to -1."), status("mandatory")] sint32 clnpRouteMetric1;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.3.1.1.22.1.4"), read, write, description("An alternate routing metric for this route.  The\n                      semantics of this metric are determined by the\n                      routing-protocol specified in the route's\n                      clnpRouteProto value.  If this metric is not used,\n                      its value should be set to -1."), status("mandatory")] sint32 clnpRouteMetric2;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.3.1.1.22.1.5"), read, write, description("An alternate routing metric for this route.  The\n                      semantics of this metric are determined by the\n                      routing-protocol specified in the route's\n                      clnpRouteProto value.  If this metric is not used,\n                      its value should be set to -1."), status("mandatory")] sint32 clnpRouteMetric3;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.3.1.1.22.1.6"), read, write, description("An alternate routing metric for this route.  The\n                      semantics of this metric are determined by the\n                      routing-protocol specified in the route's\n                      clnpRouteProto value.  If this metric is not used,\n                      its value should be set to -1."), status("mandatory")] sint32 clnpRouteMetric4;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.3.1.1.22.1.11"), read, write, description("An alternate routing metric for this route.  The\n                      semantics of this metric are determined by the\n                      routing-protocol specified in the route's\n                      clnpRouteProto value.  If this metric is not used,\n                      its value should be set to -1."), status("mandatory")] sint32 clnpRouteMetric5;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.3.1.1.22.1.2"), read, write, description("The index value which uniquely identifies the\n                      local interface through which the next hop of this\n                      route should be reached.  The interface identified\n                      by a particular value of this index is the same as\n                      identified by the same value of ifIndex."), status("mandatory")] sint32 clnpRouteIfIndex;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("ClnpAddress"), variable_length("1..21"), object_identifier("1.3.6.1.3.1.1.22.1.7"), read, write, description("The CLNP address of the next hop of this route."), status("mandatory")] string clnpRouteNextHop;
};

