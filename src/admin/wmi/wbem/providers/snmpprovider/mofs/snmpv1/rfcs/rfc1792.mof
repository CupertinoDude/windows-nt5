// Copyright (c) 1997-2001 Microsoft Corporation, All Rights Reserved
//	MOF Generated for module "TCPIPX-MIB" by smi2smir version 1.10.635.0000
qualifier write:ToInstance ToSubClass;
qualifier read:ToInstance ToSubClass;
qualifier provider:ToInstance ToSubClass;
qualifier singleton:ToInstance ToSubClass;
qualifier dynamic:ToInstance ToSubClass;
qualifier textual_convention:ToInstance ToSubClass;
qualifier object_identifier:ToInstance ToSubClass;
qualifier encoding:ToInstance ToSubClass;
qualifier object_syntax:ToInstance ToSubClass;
qualifier status:ToInstance ToSubClass;
qualifier fixed_length:ToInstance ToSubClass;
qualifier variable_length:ToInstance ToSubClass;
qualifier variable_value:ToInstance ToSubClass;
qualifier bits:ToInstance ToSubClass;
qualifier key_order:ToInstance ToSubClass;
qualifier enumeration:ToInstance ToSubClass;
qualifier bits:ToInstance ToSubClass;
qualifier description:ToInstance ToSubClass;
qualifier display_hint:ToInstance ToSubClass;
qualifier defval:ToInstance ToSubClass;
qualifier units:ToInstance ToSubClass;
qualifier reference:ToInstance ToSubClass;
qualifier virtual_key:ToInstance ToSubClass;
qualifier rowstatus:ToInstance ToSubClass;
qualifier module_name:ToInstance ToSubClass;
qualifier module_imports:ToInstance ToSubClass;
qualifier group_objectid:ToInstance ToSubClass;

[abstract]
class SnmpMacro
{
};

[abstract]
class SnmpObjectType:SnmpMacro
{
};

class SnmpNotifyStatus:__ExtendedStatus
{
[write] sint32 SnmpStatusCode;
[write] string Description;
};

[description("A table containing information specific on\n                       TCP connection over IPX network layer.\nInformation about a particular current TCP\n                       connection over IPX  An object of this type is\n                       transient, in that it ceases to exist when (or\n                       soon after) the connection makes the transition\n                       to the CLOSED state."), module_name("TCPIPX-MIB"), group_objectid("1.3.6.1.4.1.23.2.29.1"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_TCPIPX_MIB_tcpIpxConnTable : SnmpObjectType
{
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("IpxAddress"), fixed_length(10), object_identifier("1.3.6.1.4.1.23.2.29.1.1.1.4"), read, description("The remote IPX address for this TCP connection."), status("mandatory"), key, key_order(3)] string tcpIpxConnRemAddress;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("IpxAddress"), fixed_length(10), object_identifier("1.3.6.1.4.1.23.2.29.1.1.1.2"), read, description("The local IPX address for this TCP connection.\n                       In the case of a connection in the listen state\n                       which is willing to accept connections for any\n                       interface, the value 00000000:000000000000 is\n                       used.  See tcpUnspecConnTable for connections in\n                       the listen  state which is willing to accept\n                       connects for any IP interface associated with\n                       the node."), status("mandatory"), key, key_order(1)] string tcpIpxConnLocalAddress;
	[textual_convention("EnumeratedINTEGER"), enumeration("closed(1),listen(2),synSent(3),synReceived(4),established(5),finWait1(6),finWait2(7),closeWait(8),lastAck(9),closing(10),timeWait(11),deleteTCB(12)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.4.1.23.2.29.1.1.1.1"), read, write, description("The state of this TCP connection.\n\n                       The only value which may be set by a management\n                       station is deleteTCB(12).  Accordingly, it is\n                       appropriate for an agent to return a `badValue'\n                       response if a management station attempts to set\n                       this object to any other value.\n\n                       If a management station sets this object to the\n                       value deleteTCB(12), then this has the effect of\n                       deleting the TCB (as defined in RFC 793) of the\n                       corresponding connection on the managed node,\n                       resulting in immediate termination of the\n                       connection.\n\n                       As an implementation-specific option, a RST\n                       segment may be sent from the managed node to the\n                       other TCP endpoint (note however that RST\n\n\n\n\n\n                       segments are not sent reliably)."), status("mandatory")] string tcpIpxConnState;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..65535"), object_identifier("1.3.6.1.4.1.23.2.29.1.1.1.5"), read, description("The remote port number for this TCP connection."), status("mandatory"), key, key_order(4)] sint32 tcpIpxConnRemPort;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..65535"), object_identifier("1.3.6.1.4.1.23.2.29.1.1.1.3"), read, description("The local port number for this TCP connection."), status("mandatory"), key, key_order(2)] sint32 tcpIpxConnLocalPort;
};
[description("A table containing information specific on\n                       TCP connection over unspecified network layer.\nInformation about a particular current TCP\n                       connection over unspecified network layer.  An\n                       object of this type is transient, in that it\n                       ceases to exist when the connection makes\n                       transition beyond LISTEN state, or when (or\n                       soon after) the connection makes transition\n                       to the CLOSED state,"), module_name("TCPIPX-MIB"), group_objectid("1.3.6.1.4.1.23.2.29.1"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_TCPIPX_MIB_tcpUnspecConnTable : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..65535"), object_identifier("1.3.6.1.4.1.23.2.29.1.2.1.2"), read, description("The local port number for this TCP connection."), status("mandatory"), key, key_order(1)] sint32 tcpUnspecConnLocalPort;
	[textual_convention("EnumeratedINTEGER"), enumeration("closed(1),listen(2),deleteTCB(12)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.4.1.23.2.29.1.2.1.1"), read, write, description("The state of this TCP connection.\n\n                       Since the TCP connection can belong to this table\n                       only when its state is less than SYN_SENT, only\n                       closed and listen state apply.\n\n                       The only value which may be set by a management\n                       station is deleteTCB(12).  Accordingly, it is\n                       appropriate for an agent to return a `badValue'\n                       response if a management station attempts to set\n                       this object to any other value.\n\n                       If a management station sets this object to the\n                       value deleteTCB(12), then this has the effect of\n                       deleting the TCB (as defined in RFC 793) of the\n                       corresponding connection on the managed node,\n                       resulting in immediate termination of the\n                       connection.\n\n                       As an implementation-specific option, a RST\n                       segment may be sent from the managed node to the\n                       other TCP endpoint (note however that RST\n                       segments are not sent reliably)."), status("mandatory")] string tcpUnspecConnState;
};
[description("A table containing UDP listener information.\nInformation about a particular current UDP\n                       listener."), module_name("TCPIPX-MIB"), group_objectid("1.3.6.1.4.1.23.2.29.2"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_TCPIPX_MIB_udpIpxTable : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..65535"), object_identifier("1.3.6.1.4.1.23.2.29.2.1.1.2"), read, description("The local port number for this UDP listener."), status("mandatory"), key, key_order(2)] sint32 udpIpxLocalPort;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("IpxAddress"), fixed_length(10), object_identifier("1.3.6.1.4.1.23.2.29.2.1.1.1"), read, description("The local IPX address for this UDP listener.  In\n                       the case of a UDP listener which is willing to\n                       accept datagrams for any interface, the value\n                       00000000:000000000000 is used.  See\n                       udpUnspecTable for UDP listener which is\n                       willing to accept datagrams from any network\n                       layer."), status("mandatory"), key, key_order(1)] string udpIpxLocalAddress;
};
[description("A table containing UDP listener information.\nInformation about a particular current UDP\n                       listener."), module_name("TCPIPX-MIB"), group_objectid("1.3.6.1.4.1.23.2.29.2"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_TCPIPX_MIB_udpUnspecTable : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..65535"), object_identifier("1.3.6.1.4.1.23.2.29.2.2.1.1"), read, description("The local port number for this UDP listener."), status("mandatory"), key, key_order(1)] sint32 udpUnspecLocalPort;
};

