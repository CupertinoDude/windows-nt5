// Copyright (c) 1997-2001 Microsoft Corporation, All Rights Reserved
//	MOF Generated for module "RFC1315-MIB" by smi2smir version 1.10.635.0000
qualifier write:ToInstance ToSubClass;
qualifier read:ToInstance ToSubClass;
qualifier provider:ToInstance ToSubClass;
qualifier singleton:ToInstance ToSubClass;
qualifier dynamic:ToInstance ToSubClass;
qualifier textual_convention:ToInstance ToSubClass;
qualifier object_identifier:ToInstance ToSubClass;
qualifier encoding:ToInstance ToSubClass;
qualifier object_syntax:ToInstance ToSubClass;
qualifier status:ToInstance ToSubClass;
qualifier fixed_length:ToInstance ToSubClass;
qualifier variable_length:ToInstance ToSubClass;
qualifier variable_value:ToInstance ToSubClass;
qualifier bits:ToInstance ToSubClass;
qualifier key_order:ToInstance ToSubClass;
qualifier enumeration:ToInstance ToSubClass;
qualifier bits:ToInstance ToSubClass;
qualifier description:ToInstance ToSubClass;
qualifier display_hint:ToInstance ToSubClass;
qualifier defval:ToInstance ToSubClass;
qualifier units:ToInstance ToSubClass;
qualifier reference:ToInstance ToSubClass;
qualifier virtual_key:ToInstance ToSubClass;
qualifier rowstatus:ToInstance ToSubClass;
qualifier module_name:ToInstance ToSubClass;
qualifier module_imports:ToInstance ToSubClass;
qualifier group_objectid:ToInstance ToSubClass;

[abstract]
class SnmpMacro
{
};

[abstract]
class SnmpObjectType:SnmpMacro
{
};

class SnmpNotifyStatus:__ExtendedStatus
{
[write] sint32 SnmpStatusCode;
[write] string Description;
};

[description("A table containing information about Errors on the\n            Frame Relay interface.\nThe error information for a single frame relay\n                interface."), module_name("RFC1315-MIB"), group_objectid("1.3.6.1.2.1.10.32"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_RFC1315_MIB_frErrTable : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("Index"), object_identifier("1.3.6.1.2.1.10.32.3.1.1"), read, description("The ifIndex Value of the  corresponding  ifEn-\n                try."), status("mandatory"), key, key_order(1)] sint32 frErrIfIndex;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("OCTETSTRING"), object_identifier("1.3.6.1.2.1.10.32.3.1.3"), read, description("An octet string containing as much of the  er-\n                ror  packet as possible.  As a minimum, it must\n                contain the Q.922 Address or  as  much  as  was\n                delivered.   It is desirable to include all in-\n                formation up to the PDU."), status("mandatory")] string frErrData;
	[textual_convention("TimeTicks"), encoding("TimeTicks"), object_syntax("TimeTicks"), object_identifier("1.3.6.1.2.1.10.32.3.1.4"), read, description("The value of sysUpTime at which the error  was\n                detected."), status("mandatory")] uint32 frErrTime;
	[textual_convention("EnumeratedINTEGER"), enumeration("unknownError(1),receiveShort(2),receiveLong(3),illegalDLCI(4),unknownDLCI(5),dlcmiProtoErr(6),dlcmiUnknownIE(7),dlcmiSequenceErr(8),dlcmiUnknownRpt(9),noErrorSinceReset(10)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.32.3.1.2"), read, description("The type of error that was last seen  on  this\n                interface."), status("mandatory")] string frErrType;
};
[description("A table containing information about specific Data\n            Link Connection Identifiers and corresponding virtual\n            circuits.\nThe information regarding a single  Data  Link\n                Connection Identifier."), module_name("RFC1315-MIB"), group_objectid("1.3.6.1.2.1.10.32"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_RFC1315_MIB_frCircuitTable : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.10.32.2.1.14"), read, write, description("Throughput is the average number of 'Frame Re-\n                lay  Information  Field'  bits  transferred per\n                second across a user network interface  in  one\n                direction, measured over the measurement inter-\n                val.\n\n                If the  configured  committed  burst  rate  and\n                throughput  are  both non-zero, the measurement\n                interval\n                T=frCircuitCommittedBurst/frCircuitThroughput.\n\n                If the  configured  committed  burst  rate  and\n                throughput  are  both zero, the measurement in-\n                terval\n                       T=frCircuitExcessBurst/ifSpeed."), reference("Draft American National  Standard  T1.617-1991,\n               Section 6.5.19"), status("mandatory"), defval("0")] sint32 frCircuitThroughput;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.10.32.2.1.13"), read, write, description("This variable indicates the maximum amount  of\n                uncommitted data bits that the network will at-\n                tempt to deliver over the measurement interval.\n\n                By default, if not configured when creating the\n                entry, the Excess Information Burst Size is set\n                to the value of ifSpeed."), reference("Draft American National  Standard  T1.617-1991,\n               Section 6.5.19"), status("mandatory")] sint32 frCircuitExcessBurst;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.10.32.2.1.5"), read, description("Number of frames received from the network in-\n                dicating  backward congestion since the virtual\n                circuit was created."), reference("Draft American National  Standard  T1.618-1991,\n               Section 3.3.4"), status("mandatory")] uint32 frCircuitReceivedBECNs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.10.32.2.1.4"), read, description("Number of frames received from the network in-\n                dicating  forward  congestion since the virtual\n                circuit was created."), reference("Draft American National  Standard  T1.618-1991,\n               Section 3.3.3"), status("mandatory")] uint32 frCircuitReceivedFECNs;
	[textual_convention("TimeTicks"), encoding("TimeTicks"), object_syntax("TimeTicks"), object_identifier("1.3.6.1.2.1.10.32.2.1.10"), read, description("The value of sysUpTime when the  virtual  cir-\n                cuit was created, whether by the Data Link Con-\n                nection Management Interface  or  by  a  SetRe-\n                quest."), status("mandatory")] uint32 frCircuitCreationTime;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("DLCI"), object_identifier("1.3.6.1.2.1.10.32.2.1.2"), read, description("The Data Link Connection Identifier  for  this\n                virtual circuit."), reference("Draft American National  Standard  T1.618-1991,\n               Section 3.3.6"), status("mandatory"), key, key_order(2)] sint32 frCircuitDlci;
	[textual_convention("TimeTicks"), encoding("TimeTicks"), object_syntax("TimeTicks"), object_identifier("1.3.6.1.2.1.10.32.2.1.11"), read, description("The value of sysUpTime when last there  was  a\n                change in the virtual circuit state"), status("mandatory")] uint32 frCircuitLastTimeChange;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.10.32.2.1.8"), read, description("Number of frames received  over  this  virtual\n                circuit since it was created."), status("mandatory")] uint32 frCircuitReceivedFrames;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.10.32.2.1.9"), read, description("Number of octets received  over  this  virtual\n                circuit since it was created."), status("mandatory")] uint32 frCircuitReceivedOctets;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.10.32.2.1.12"), read, write, description("This variable indicates the maximum amount  of\n                data,  in  bits,  that  the  network  agrees to\n                transfer under normal  conditions,  during  the\n                measurement interval."), reference("Draft American National  Standard  T1.617-1991,\n               Section 6.5.19"), status("mandatory"), defval("0")] sint32 frCircuitCommittedBurst;
	[textual_convention("EnumeratedINTEGER"), enumeration("invalid(1),active(2),inactive(3)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.32.2.1.3"), read, write, description("Indicates whether the particular virtual  cir-\n                cuit  is operational.  In the absence of a Data\n                Link Connection Management  Interface,  virtual\n                circuit  entries  (rows) may be created by set-\n                ting virtual  circuit  state  to  'active',  or\n                deleted by changing Circuit state to 'invalid'.\n                Whether or not the row actually  disappears  is\n                left  to the implementation, so this object may\n                actually read as 'invalid' for  some  arbitrary\n                length  of  time.   It is also legal to set the\n                state of a virtual  circuit  to  'inactive'  to\n                temporarily disable a given circuit."), status("mandatory"), defval("2")] string frCircuitState;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("Index"), object_identifier("1.3.6.1.2.1.10.32.2.1.1"), read, description("The ifIndex Value of the ifEntry this  virtual\n                circuit is layered onto."), status("mandatory"), key, key_order(1)] sint32 frCircuitIfIndex;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.10.32.2.1.6"), read, description("The number of frames sent  from  this  virtual\n                circuit since it was created."), status("mandatory")] uint32 frCircuitSentFrames;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.10.32.2.1.7"), read, description("The number of octets sent  from  this  virtual\n                circuit since it was created."), status("mandatory")] uint32 frCircuitSentOctets;
};
[description("The Parameters for the Data Link Connection Management\n            Interface for the frame relay service on this\n            interface.\nThe Parameters for a particular Data Link Con-\n                nection Management Interface."), module_name("RFC1315-MIB"), group_objectid("1.3.6.1.2.1.10.32"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_RFC1315_MIB_frDlcmiTable : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..10"), object_identifier("1.3.6.1.2.1.10.32.1.1.7"), read, write, description("This  is  the  maximum  number  of  unanswered\n                Status Enquiries the equipment shall accept be-\n                fore declaring the interface down."), reference("Draft American National  Standard  T1.617-1991,\n               Section D.5.1 Counter N392."), status("mandatory"), defval("3")] sint32 frDlcmiErrorThreshold;
	[textual_convention("EnumeratedINTEGER"), enumeration("noLmiConfigured(1),lmiRev1(2),ansiT1-617-D(3),ansiT1-617-B(4)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.32.1.1.2"), read, write, description("This variable states which Data  Link  Connec-\n                tion Management scheme is active (and by impli-\n                cation, what DLCI it uses) on the  Frame  Relay\n                interface."), reference("Draft American National Standard T1.617-1991"), status("mandatory")] string frDlcmiState;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.10.32.1.1.9"), read, write, description("The maximum number of Virtual Circuits allowed\n                for  this  interface.   Usually dictated by the\n                Frame Relay network.\n\n                In response to a SET, if a value less than zero\n                or  higher  than the agent's maximal capability\n                is configured, the agent  should  respond  bad-\n                Value"), status("mandatory")] sint32 frDlcmiMaxSupportedVCs;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("5..30"), object_identifier("1.3.6.1.2.1.10.32.1.1.5"), read, write, description("This is the number of seconds between  succes-\n                sive status enquiry messages."), reference("Draft American National  Standard  T1.617-1991,\n               Section D.7 Timer T391."), status("mandatory"), defval("10")] sint32 frDlcmiPollingInterval;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..10"), object_identifier("1.3.6.1.2.1.10.32.1.1.8"), read, write, description("This is the number of status polling intervals\n                over which the error threshold is counted.  For\n                example, if within 'MonitoredEvents' number  of\n                events  the  station  receives 'ErrorThreshold'\n                number of errors, the interface  is  marked  as\n                down."), reference("Draft American National  Standard  T1.617-1991,\n               Section D.5.2 Counter N393."), status("mandatory"), defval("4")] sint32 frDlcmiMonitoredEvents;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("Index"), object_identifier("1.3.6.1.2.1.10.32.1.1.1"), read, description("The ifIndex value of the  corresponding  ifEn-\n                try."), status("mandatory"), key, key_order(1)] sint32 frDlcmiIfIndex;
	[textual_convention("EnumeratedINTEGER"), enumeration("q921(1),q922March90(2),q922November90(3),q922(4)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.32.1.1.3"), read, write, description("This variable states which address  format  is\n                in use on the Frame Relay interface."), status("mandatory")] string frDlcmiAddress;
	[textual_convention("EnumeratedINTEGER"), enumeration("nonBroadcast(1),broadcast(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.32.1.1.10"), read, write, description("This indicates whether the Frame Relay  inter-\n                face is using a multicast service."), status("mandatory")] string frDlcmiMulticast;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..255"), object_identifier("1.3.6.1.2.1.10.32.1.1.6"), read, write, description("Number of status enquiry intervals  that  pass\n                before  issuance  of a full status enquiry mes-\n                sage."), reference("Draft American National  Standard  T1.617-1991,\n               Section D.7 Counter N391."), status("mandatory"), defval("6")] sint32 frDlcmiFullEnquiryInterval;
	[textual_convention("EnumeratedINTEGER"), enumeration("two-octets(2),three-octets(3),four-octets(4)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.32.1.1.4"), read, write, description("This variable states which address  length  in\n                octets.  In the case of Q922 format, the length\n                indicates the entire length of the address  in-\n                cluding the control portion."), status("mandatory")] string frDlcmiAddressLen;
};
[description(""), module_name("RFC1315-MIB"), singleton, group_objectid("1.3.6.1.2.1.10.32.4"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_RFC1315_MIB_frame_relay_globals : SnmpObjectType
{
	[textual_convention("EnumeratedINTEGER"), enumeration("enabled(1),disabled(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.32.4.1"), read, write, description("This variable  indicates  whether  the  system\n                produces the frDLCIStatusChange trap."), status("mandatory"), defval("2")] string frTrapState;
};

