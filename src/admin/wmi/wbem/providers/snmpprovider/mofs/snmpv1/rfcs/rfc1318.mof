// Copyright (c) 1997-2001 Microsoft Corporation, All Rights Reserved
//	MOF Generated for module "RFC1318-MIB" by smi2smir version 1.10.635.0000
qualifier write:ToInstance ToSubClass;
qualifier read:ToInstance ToSubClass;
qualifier provider:ToInstance ToSubClass;
qualifier singleton:ToInstance ToSubClass;
qualifier dynamic:ToInstance ToSubClass;
qualifier textual_convention:ToInstance ToSubClass;
qualifier object_identifier:ToInstance ToSubClass;
qualifier encoding:ToInstance ToSubClass;
qualifier object_syntax:ToInstance ToSubClass;
qualifier status:ToInstance ToSubClass;
qualifier fixed_length:ToInstance ToSubClass;
qualifier variable_length:ToInstance ToSubClass;
qualifier variable_value:ToInstance ToSubClass;
qualifier bits:ToInstance ToSubClass;
qualifier key_order:ToInstance ToSubClass;
qualifier enumeration:ToInstance ToSubClass;
qualifier bits:ToInstance ToSubClass;
qualifier description:ToInstance ToSubClass;
qualifier display_hint:ToInstance ToSubClass;
qualifier defval:ToInstance ToSubClass;
qualifier units:ToInstance ToSubClass;
qualifier reference:ToInstance ToSubClass;
qualifier virtual_key:ToInstance ToSubClass;
qualifier rowstatus:ToInstance ToSubClass;
qualifier module_name:ToInstance ToSubClass;
qualifier module_imports:ToInstance ToSubClass;
qualifier group_objectid:ToInstance ToSubClass;

[abstract]
class SnmpMacro
{
};

[abstract]
class SnmpObjectType:SnmpMacro
{
};

class SnmpNotifyStatus:__ExtendedStatus
{
[write] sint32 SnmpStatusCode;
[write] string Description;
};

[description(""), module_name("RFC1318-MIB"), singleton, group_objectid("1.3.6.1.2.1.10.34"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_RFC1318_MIB_para : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.10.34.1"), read, description("The number of ports (regardless of their current\n                    state) in the Parallel-printer-like port table."), status("mandatory")] sint32 paraNumber;
};
[description("A list of port entries.  The number of entries is\n                    given by the value of paraNumber.\nStatus and parameter values for a port."), module_name("RFC1318-MIB"), group_objectid("1.3.6.1.2.1.10.34"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_RFC1318_MIB_paraPortTable : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.10.34.2.1.4"), read, description("The number of output signals for the port in the\n                    output signal table (paraPortOutSigTable).  The\n                    table contains entries only for those signals the\n                    software can assert."), status("mandatory")] sint32 paraPortOutSigNumber;
	[textual_convention("EnumeratedINTEGER"), enumeration("other(1),centronics(2),dataproducts(3)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.34.2.1.2"), read, description("The port's hardware type."), status("mandatory")] string paraPortType;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.10.34.2.1.1"), read, description("A unique value for each port.  Its value ranges\n                    between 1 and the value of paraNumber.  By\n                    convention and if possible, hardware port numbers\n                    map directly to external connectors.  The value for\n                    each port must remain constant at least from one\n                    re-initialization of the network management agent to\n                    the next."), status("mandatory"), key, key_order(1)] sint32 paraPortIndex;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.10.34.2.1.3"), read, description("The number of input signals for the port in the\n                    input signal table (paraPortInSigTable).  The table\n                    contains entries only for those signals the software\n                    can detect."), status("mandatory")] sint32 paraPortInSigNumber;
};
[description("A list of port input control signal entries.\nInput control signal status for a hardware port."), module_name("RFC1318-MIB"), group_objectid("1.3.6.1.2.1.10.34"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_RFC1318_MIB_paraInSigTable : SnmpObjectType
{
	[textual_convention("EnumeratedINTEGER"), enumeration("power(1),online(2),busy(3),paperout(4),fault(5)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.34.3.1.2"), read, description("Identification of a hardware signal."), status("mandatory"), key, key_order(2)] string paraInSigName;
	[textual_convention("EnumeratedINTEGER"), enumeration("none(1),on(2),off(3)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.34.3.1.3"), read, description("The current signal state."), status("mandatory")] string paraInSigState;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.10.34.3.1.4"), read, description("The number of times the signal has changed from\n                    'on' to 'off' or from 'off' to 'on'."), status("mandatory")] uint32 paraInSigChanges;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.10.34.3.1.1"), read, description("The value of paraPortIndex for the port to which\n                    this entry belongs."), status("mandatory"), key, key_order(1)] sint32 paraInSigPortIndex;
};
[description("A list of port output control signal entries.\nOutput control signal status for a hardware port."), module_name("RFC1318-MIB"), group_objectid("1.3.6.1.2.1.10.34"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_RFC1318_MIB_paraOutSigTable : SnmpObjectType
{
	[textual_convention("EnumeratedINTEGER"), enumeration("power(1),online(2),busy(3),paperout(4),fault(5)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.34.4.1.2"), read, description("Identification of a hardware signal."), status("mandatory"), key, key_order(2)] string paraOutSigName;
	[textual_convention("EnumeratedINTEGER"), enumeration("none(1),on(2),off(3)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.34.4.1.3"), read, description("The current signal state."), status("mandatory")] string paraOutSigState;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.10.34.4.1.4"), read, description("The number of times the signal has changed from\n                    'on' to 'off' or from 'off' to 'on'."), status("mandatory")] uint32 paraOutSigChanges;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.10.34.4.1.1"), read, description("The value of paraPortIndex for the port to which\n                    this entry belongs."), status("mandatory"), key, key_order(1)] sint32 paraOutSigPortIndex;
};

