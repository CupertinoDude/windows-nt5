// Copyright (c) 1997-2001 Microsoft Corporation, All Rights Reserved
//	MOF Generated for module "PPP-BRIDGE-NCP-MIB" by smi2smir version 1.10.635.0000
qualifier write:ToInstance ToSubClass;
qualifier read:ToInstance ToSubClass;
qualifier provider:ToInstance ToSubClass;
qualifier singleton:ToInstance ToSubClass;
qualifier dynamic:ToInstance ToSubClass;
qualifier textual_convention:ToInstance ToSubClass;
qualifier object_identifier:ToInstance ToSubClass;
qualifier encoding:ToInstance ToSubClass;
qualifier object_syntax:ToInstance ToSubClass;
qualifier status:ToInstance ToSubClass;
qualifier fixed_length:ToInstance ToSubClass;
qualifier variable_length:ToInstance ToSubClass;
qualifier variable_value:ToInstance ToSubClass;
qualifier bits:ToInstance ToSubClass;
qualifier key_order:ToInstance ToSubClass;
qualifier enumeration:ToInstance ToSubClass;
qualifier bits:ToInstance ToSubClass;
qualifier description:ToInstance ToSubClass;
qualifier display_hint:ToInstance ToSubClass;
qualifier defval:ToInstance ToSubClass;
qualifier units:ToInstance ToSubClass;
qualifier reference:ToInstance ToSubClass;
qualifier virtual_key:ToInstance ToSubClass;
qualifier rowstatus:ToInstance ToSubClass;
qualifier module_name:ToInstance ToSubClass;
qualifier module_imports:ToInstance ToSubClass;
qualifier group_objectid:ToInstance ToSubClass;

[abstract]
class SnmpMacro
{
};

[abstract]
class SnmpObjectType:SnmpMacro
{
};

class SnmpNotifyStatus:__ExtendedStatus
{
[write] sint32 SnmpStatusCode;
[write] string Description;
};

[description("Table containing the parameters and statistics\n\n\n\n\n\n                         for the local PPP entity that are related to\n                         the operation of Bridging over the PPP.\nBridging Configuration information for a\n                         particular PPP link."), module_name("PPP-BRIDGE-NCP-MIB"), group_objectid("1.3.6.1.2.1.10.23.4"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_PPP_BRIDGE_NCP_MIB_pppBridgeConfigTable : SnmpObjectType
{
	[textual_convention("EnumeratedINTEGER"), enumeration("false(1),true(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.23.4.2.1.4"), read, write, description("If false then the local PPP Entity is not to\n                         initiate a Line Identification Option\n                         negotiation. If true then the local PPP entity\n                         will intiate this negotiation. This MIB object\n                         is relevant only if the interface is for 802.5\n                         Token Ring bridging."), reference("Section 6.5, IEEE 802.5 Line Identification\n                         Option, of RFC1220"), status("mandatory"), defval("1")] string pppBridgeConfigLineId;
	[textual_convention("EnumeratedINTEGER"), enumeration("false(1),true(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.23.4.2.1.3"), read, write, description("If false then the local PPP Entity will not\n                         initiate a Remote Ring Identification Option\n                         negotiation. If true then the local PPP entity\n                         will intiate this negotiation. This MIB object\n                         is relevant only if the interface is for 802.5\n                         Token Ring bridging."), reference("Section 6.4, IEEE 802.5 Remote Ring\n                         Identification Option, of RFC1220"), status("mandatory"), defval("1")] string pppBridgeConfigRingId;
	[textual_convention("EnumeratedINTEGER"), enumeration("false(1),true(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.23.4.2.1.2"), read, write, description("If false then the local BNCP entity will not\n                         initiate the Tinygram Compression Option\n                         Negotiation. If true then the local BNCP entity\n                         will initiate negotiation of this option."), reference("Section 6.7, Tinygram Compression Option, of\n                         RFC1220"), status("mandatory"), defval("2")] string pppBridgeConfigTinygram;
	[textual_convention("EnumeratedINTEGER"), enumeration("open(1),close(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.23.4.2.1.1"), read, write, description("The immediate desired status of the Bridging\n                         network protocol. Setting this object to open\n                         will inject an administrative open event into\n                         the Bridging network protocol's finite state\n                         machine. Setting this object to close will\n                         inject an administrative close event into the\n                         Bridging network protocol's finite state\n                         machine."), status("mandatory")] string pppBridgeConfigAdminStatus;
	[textual_convention("EnumeratedINTEGER"), enumeration("false(1),true(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.23.4.2.1.5"), read, write, description("If false then the local BNCP entity will not\n                         initiate the LAN Identification Option\n                         Negotiation. If true then the local BNCP entity\n                         will initiate negotiation of this option."), reference("Section 6.8, LAN Identification Option, of\n                         RFC1220"), status("mandatory"), defval("1")] string pppBridgeConfigLanId;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.2.2.1.1"), read, description("A unique value for each interface.  Its value\n                      ranges between 1 and the value of ifNumber.  The\n                      value for each interface must remain constant at\n                      least from one re-initialization of the entity's\n                      network management system to the next re-\n                      initialization."), status("mandatory"), virtual_key, key, key_order(1)] sint32 ifIndex;
};
[description("Table identifying which MAC media types are\n                         enabled for the Bridging NCPs.\nStatus of a specific MAC Type for a specific\n                         PPP Link."), module_name("PPP-BRIDGE-NCP-MIB"), group_objectid("1.3.6.1.2.1.10.23.4"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_PPP_BRIDGE_NCP_MIB_pppBridgeMediaTable : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..2147483647"), object_identifier("1.3.6.1.2.1.10.23.4.3.1.1"), read, description("The MAC type for which this entry in the\n                         pppBridgeMediaTable is providing status\n                         information. Valid values for this object are\n                         defined in Section 6.6 MAC Type Support\n                         Selection of RFC1220 (Bridging Point-to-Point\n                         Protocol)."), reference("Section 6.6, MAC Type Support Selection, of\n                         RFC1212."), status("mandatory"), key, key_order(2)] sint32 pppBridgeMediaMacType;
	[textual_convention("EnumeratedINTEGER"), enumeration("accept(1),dont-accept(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.23.4.3.1.2"), read, description("Indicates whether the local PPP Bridging\n                         Entity will accept packets of the protocol type\n                         identified in pppBridgeMediaMacType on the PPP\n                         link identified by ifIndex or not. If this\n                         object is accept then any packets of the\n                         indicated MAC type will be received and\n                         properly processed. If this object is dont-\n                         accept then received packets of the indicated\n                         MAC type will not be properly processed."), reference("Section 6.6, MAC Type Support Selection, of\n                         RFC1212."), status("mandatory")] string pppBridgeMediaLocalStatus;
	[textual_convention("EnumeratedINTEGER"), enumeration("accept(1),dont-accept(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.23.4.3.1.3"), read, description("Indicates whether the local PPP Bridging\n                         Entity believes that the remote PPP Bridging\n                         Entity will accept packets of the protocol type\n                         identified in pppBridgeMediaMacType on the PPP\n\n\n\n\n\n                         link identified by ifIndex or not."), reference("Section 6.6, MAC Type Support Selection, of\n                         RFC1212."), status("mandatory")] string pppBridgeMediaRemoteStatus;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.2.2.1.1"), read, description("A unique value for each interface.  Its value\n                      ranges between 1 and the value of ifNumber.  The\n                      value for each interface must remain constant at\n                      least from one re-initialization of the entity's\n                      network management system to the next re-\n                      initialization."), status("mandatory"), virtual_key, key, key_order(1)] sint32 ifIndex;
};
[description("Table identifying which MAC media types are\n                         enabled for the Bridging NCPs.\nStatus of a specific MAC Type for a specific\n                         PPP Link."), module_name("PPP-BRIDGE-NCP-MIB"), group_objectid("1.3.6.1.2.1.10.23.4"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_PPP_BRIDGE_NCP_MIB_pppBridgeMediaConfigTable : SnmpObjectType
{
	[textual_convention("EnumeratedINTEGER"), enumeration("accept(1),dont-accept(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.23.4.4.1.2"), read, write, description("Indicates whether the local PPP Bridging\n                         Entity should accept packets of the protocol\n                         type identified in pppBridgeMediaConfigMacType\n                         on the PPP link identified by ifIndex or not.\n                         Setting this object to the value dont-accept\n                         has the affect of invalidating the\n                         corresponding entry in the\n                         pppBridgeMediaConfigTable object. It is an\n                         implementation-specific matter as to whether\n                         the agent removes an invalidated entry from the\n                         table. Accordingly, management stations must be\n                         prepared to receive tabular information from\n                         agents that corresponds to entries not\n                         currently in use. Changing this object will\n                         have effect when the link is next restarted."), reference("Section 6.6, MAC Type Support Selection, of\n                         RFC1212."), status("mandatory")] string pppBridgeMediaConfigLocalStatus;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..2147483647"), object_identifier("1.3.6.1.2.1.10.23.4.4.1.1"), read, write, description("The MAC type for which this entry in the\n                         pppBridgeMediaConfigTable is providing status\n                         information. Valid values for this object are\n\n\n\n\n\n                         defined in Section 6.6 MAC Type Support\n                         Selection of RFC1220 (Bridging Point-to-Point\n                         Protocol)."), reference("Section 6.6, MAC Type Support Selection, of\n                         RFC1212."), status("mandatory"), key, key_order(2)] sint32 pppBridgeMediaConfigMacType;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.2.2.1.1"), read, description("A unique value for each interface.  Its value\n                      ranges between 1 and the value of ifNumber.  The\n                      value for each interface must remain constant at\n                      least from one re-initialization of the entity's\n                      network management system to the next re-\n                      initialization."), status("mandatory"), virtual_key, key, key_order(1)] sint32 ifIndex;
};
[description("Table containing the parameters and statistics\n                         for the local PPP entity that are related to\n                         the operation of Bridging over the PPP.\nBridging information for a particular PPP\n                         link."), module_name("PPP-BRIDGE-NCP-MIB"), group_objectid("1.3.6.1.2.1.10.23.4"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_PPP_BRIDGE_NCP_MIB_pppBridgeTable : SnmpObjectType
{
	[textual_convention("EnumeratedINTEGER"), enumeration("false(1),true(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.23.4.1.1.3"), read, description("If false(1) then the remote entity is not\n                         expected to perform Tinygram Compression. If\n                         true then the remote entity is expected to\n                         perform Tinygram Compression. The value of this\n                         object is meaningful only when the link has\n                         reached the open state (pppBridgeOperStatus is\n                         opened)."), reference("Section 6.7, Tinygram Compression Option, of\n                         RFC1220"), status("mandatory")] string pppBridgeRemoteToLocalTinygramCompression;
	[textual_convention("EnumeratedINTEGER"), enumeration("false(1),true(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.23.4.1.1.2"), read, description("Indicates whether the local node will perform\n                         Tinygram Compression when sending packets to\n                         the remote entity. If false then the local\n                         entity will not perform Tinygram Compression.\n                         If true then the local entity will perform\n                         Tinygram Compression. The value of this object\n                         is meaningful only when the link has reached\n                         the open state (pppBridgeOperStatus is\n                         opened)."), reference("Section 6.7, Tinygram Compression Option, of\n                         RFC1220"), status("mandatory")] string pppBridgeLocalToRemoteTinygramCompression;
	[textual_convention("EnumeratedINTEGER"), enumeration("false(1),true(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.23.4.1.1.5"), read, description("Indicates whether the remote node has\n                         indicated that it will include the LAN\n                         Identification field in transmitted packets or\n                         not. If false(1) then the field will not be\n                         transmitted, if true(2) then the field will be\n                         transmitted. The value of this object is\n                         meaningful only when the link has reached the\n                         open state (pppBridgeOperStatus is opened)."), reference("Section 6.8, LAN Identification Option, of\n                         RFC1220"), status("mandatory")] string pppBridgeRemoteToLocalLanId;
	[textual_convention("EnumeratedINTEGER"), enumeration("false(1),true(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.23.4.1.1.4"), read, description("Indicates whether the local node will include\n                         the LAN Identification field in transmitted\n                         packets or not. If false(1) then the local node\n                         will not transmit this field, true(2) means\n                         that the field will be transmitted. The value\n                         of this object is meaningful only when the link\n                         has reached the open state (pppBridgeOperStatus\n                         is opened)."), reference("Section 6.8, LAN Identification Option, of\n                         RFC1220"), status("mandatory")] string pppBridgeLocalToRemoteLanId;
	[textual_convention("EnumeratedINTEGER"), enumeration("opened(1),not-opened(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.23.4.1.1.1"), read, description("The operational status of the Bridge network\n                         protocol. If the value of this object is up\n                         then the finite state machine for the Bridge\n                         network protocol has reached the Opened state."), status("mandatory")] string pppBridgeOperStatus;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.2.2.1.1"), read, description("A unique value for each interface.  Its value\n                      ranges between 1 and the value of ifNumber.  The\n                      value for each interface must remain constant at\n                      least from one re-initialization of the entity's\n                      network management system to the next re-\n                      initialization."), status("mandatory"), virtual_key, key, key_order(1)] sint32 ifIndex;
};

