// Copyright (c) 1997-2001 Microsoft Corporation, All Rights Reserved
//	MOF Generated for module "TOKEN-RING-RMON-MIB" by smi2smir version 1.10.635.0000
qualifier write:ToInstance ToSubClass;
qualifier read:ToInstance ToSubClass;
qualifier provider:ToInstance ToSubClass;
qualifier singleton:ToInstance ToSubClass;
qualifier dynamic:ToInstance ToSubClass;
qualifier textual_convention:ToInstance ToSubClass;
qualifier object_identifier:ToInstance ToSubClass;
qualifier encoding:ToInstance ToSubClass;
qualifier object_syntax:ToInstance ToSubClass;
qualifier status:ToInstance ToSubClass;
qualifier fixed_length:ToInstance ToSubClass;
qualifier variable_length:ToInstance ToSubClass;
qualifier variable_value:ToInstance ToSubClass;
qualifier bits:ToInstance ToSubClass;
qualifier key_order:ToInstance ToSubClass;
qualifier enumeration:ToInstance ToSubClass;
qualifier bits:ToInstance ToSubClass;
qualifier description:ToInstance ToSubClass;
qualifier display_hint:ToInstance ToSubClass;
qualifier defval:ToInstance ToSubClass;
qualifier units:ToInstance ToSubClass;
qualifier reference:ToInstance ToSubClass;
qualifier virtual_key:ToInstance ToSubClass;
qualifier rowstatus:ToInstance ToSubClass;
qualifier module_name:ToInstance ToSubClass;
qualifier module_imports:ToInstance ToSubClass;
qualifier group_objectid:ToInstance ToSubClass;

#pragma namespace("\\\\.\\root\\snmp")
class SMIR:__namespace
{
[read] string Name="SMIR";
};

instance of SMIR
{
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[abstract]
class SnmpMacro
{
};

[abstract]
class SnmpObjectType:SnmpMacro
{
};

class SnmpNotifyStatus:__ExtendedStatus
{
[write] sint32 SnmpStatusCode;
[write] string Description;
};

class SnmpNotification:__ExtrinsicEvent
{
[textual_convention("TimeTicks"):ToInstance ToSubClass DisableOverride,encoding("TimeTicks"):ToInstance ToSubClass DisableOverride,object_syntax("TimeTicks"):ToInstance ToSubClass DisableOverride,read,object_identifier("1.3.6.1.2.1.1.3"):ToInstance ToSubClass DisableOverride,description("The time (in hundredths of a second) since the network management portion of the agent was last re-initialized."):ToInstance ToSubClass DisableOverride] uint32 TimeStamp;
[textual_convention("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, encoding("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, object_syntax("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, read, object_identifier("1.3.6.1.6.3.1.1.4.1"):ToInstance ToSubClass DisableOverride,description("The authoratative identification of this notification."):ToInstance ToSubClass DisableOverride] string Identification;
[read, description("The network address of the entity that created this notification."):ToInstance ToSubClass DisableOverride] string AgentAddress;
[read, description("The network address of the entity that sent this notification. This may be a proxy for the original entity."):ToInstance ToSubClass DisableOverride] string AgentTransportAddress;
[read, description("The transport protocol used by the sending entity."):ToInstance ToSubClass DisableOverride] string AgentTransportProtocol;
[read, description("The security context used to send this notification."):ToInstance ToSubClass DisableOverride] string Community;
};

class SnmpExtendedNotification:__ExtrinsicEvent
{
[textual_convention("TimeTicks"):ToInstance ToSubClass DisableOverride,encoding("TimeTicks"):ToInstance ToSubClass DisableOverride,object_syntax("TimeTicks"):ToInstance ToSubClass DisableOverride,read,object_identifier("1.3.6.1.2.1.1.3"):ToInstance ToSubClass DisableOverride,description("The time (in hundredths of a second) since the network management portion of the agent was last re-initialized."):ToInstance ToSubClass DisableOverride] uint32 TimeStamp;
[textual_convention("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, encoding("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, object_syntax("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, read, object_identifier("1.3.6.1.6.3.1.1.4.1"):ToInstance ToSubClass DisableOverride,description("The authoratative identification of this notification."):ToInstance ToSubClass DisableOverride] string Identification;
[read, description("The network address of the entity that created this notification."):ToInstance ToSubClass DisableOverride] string AgentAddress;
[read, description("The network address of the entity that sent this notification. This may be a proxy for the original entity."):ToInstance ToSubClass DisableOverride] string AgentTransportAddress;
[read, description("The transport protocol used by the sending entity."):ToInstance ToSubClass DisableOverride] string AgentTransportProtocol;
[read, description("The security context used to send this notification."):ToInstance ToSubClass DisableOverride] string Community;
};

class NotificationMapper
{
[read, key] string SnmpTrapOID;
[read] string EventClassName;
};

class ExtendedNotificationMapper
{
[read, key] string SnmpTrapOID;
[read] string EventClassName;
};

class SNMP_MODULE:__namespace
{
[read] string Name;
[read] string Module_Oid;
[read] string Module_Identity;
[read] string Organization;
[read] string Contact_Inf;
[read] string Description;
[read] string Revision;
[read] string Last_Updated;
[read] sint32 Snmp_Version;
[read] string Module_Imports;
};

[Association]
class ModuleToClassAssociator
{
[read, key] string AssocName;
[read] object ref SmirClass;
[read] object ref SmirModule;
};

[Association]
class GroupToClassAssociator
{
[read, key] string AssocName;
[read] object ref SmirClass;
[read] object ref SmirGroup;
};

[Association]
class ModToNotificationClassAssociator
{
[read, key] string AssocName;
[read] object ref SmirClass;
[read] object ref SmirModule;
};

[Association]
class ModToExtNotificationClassAssociator
{
[read, key] string AssocName;
[read] object ref SmirClass;
[read] object ref SmirModule;
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
instance of SNMP_MODULE
{
Name="TOKEN_RING_RMON_MIB";
Module_Oid="1.3.6.1.2.1.16.10";
Module_Identity="tokenringrmonmibV1ModuleIdentity";
Organization="";
Contact_Inf="";
Description="TOKEN-RING-RMON-MIB";
Revision="";
Last_Updated="0000000000Z";
Snmp_Version=1;
Module_Imports="RFC1155-SMI,RFC-1212,RFC1271-MIB";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR\\TOKEN_RING_RMON_MIB")
class SNMP_GROUP:__namespace
{
[read] string Name;
[read] string Group_Id;
[read] string Status;
[read] string Description;
[read] string Reference;
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR\\TOKEN_RING_RMON_MIB")
instance of SNMP_GROUP
{
Name="tokenRingV1ObjectGroup";
Group_Id="1.3.6.1.2.1.16.10";
Status="current";
Description="";
Reference="";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description("A list of source routing statistics entries.\nA collection of source routing statistics kept\n                      for a particular Token Ring interface."), module_name("TOKEN-RING-RMON-MIB"), group_objectid("1.3.6.1.2.1.16.10"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_TOKEN_RING_RMON_MIB_sourceRoutingStatsTable : SnmpObjectType
{
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.10.6.1.21"), read, description("The total number of frames received whose route\n                      had 8 hops, were not All Route Broadcast Frames,\n                      and whose source or destination were on this ring\n                      (i.e. frames that had a RIF field and had this\n                      ring number in the first or last entry of the RIF\n                      field)."), status("mandatory")] uint32 sourceRoutingStats8HopsFrames;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.10.6.1.13"), read, description("The total number of frames received who had no\n                      RIF field (or had a RIF field that only included\n                      the local ring's number) and were not All Route\n                      Broadcast Frames."), status("mandatory")] uint32 sourceRoutingStatsLocalLLCFrames;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.10.6.1.5"), read, description("The count of frames sent from another ring,\n                      through this ring, to another ring."), status("mandatory")] uint32 sourceRoutingStatsThroughFrames;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.10.6.1.10"), read, description("The count of octets in good frames sent another\n                      ring, through this ring, to another ring."), status("mandatory")] uint32 sourceRoutingStatsThroughOctets;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.10.6.1.6"), read, description("The total number of good frames received that\n                      were All Routes Broadcast."), status("mandatory")] uint32 sourceRoutingStatsAllRoutesBroadcastFrames;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.10.6.1.11"), read, description("The total number of octets in good frames\n                      received that were All Routes Broadcast."), status("mandatory")] uint32 sourceRoutingStatsAllRoutesBroadcastOctets;
	[textual_convention("DisplayString"), encoding("OCTETSTRING"), object_syntax("OwnerString"), object_identifier("1.3.6.1.2.1.16.10.6.1.23"), read, write, description("The entity that configured this entry and is\n                      therefore using the resources assigned to it."), status("mandatory")] string sourceRoutingStatsOwner;
	[textual_convention("EnumeratedINTEGER"), enumeration("valid(1),createRequest(2),underCreation(3),invalid(4)"), encoding("INTEGER"), object_syntax("EntryStatus"), object_identifier("1.3.6.1.2.1.16.10.6.1.24"), read, write, description("The status of this sourceRoutingStats entry."), status("mandatory")] string sourceRoutingStatsStatus;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.10.6.1.7"), read, description("The total number of good frames received that\n                      were Single Route Broadcast."), status("mandatory")] uint32 sourceRoutingStatsSingleRouteBroadcastFrames;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.16.10.6.1.1"), read, description("The value of this object uniquely identifies the\n                      interface on this remote network monitoring device\n                      on which source routing statistics will be\n                      detected.  The interface identified by a\n                      particular value of this object is the same\n                      interface as identified by the same value of the\n                      ifIndex object, defined in MIB-II [3]."), status("mandatory"), key, key_order(1)] sint32 sourceRoutingStatsIfIndex;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.10.6.1.3"), read, description("The count of frames sent into this ring from\n                      another ring."), status("mandatory")] uint32 sourceRoutingStatsInFrames;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.10.6.1.12"), read, description("The total number of octets in good frames\n                      received that were Single Route Broadcast."), status("mandatory")] uint32 sourceRoutingStatsSingleRoutesBroadcastOctets;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.10.6.1.8"), read, description("The count of octets in good frames sent into this\n                      ring from another ring."), status("mandatory")] uint32 sourceRoutingStatsInOctets;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.10.6.1.22"), read, description("The total number of frames received whose route\n                      had more than 8 hops, were not All Route Broadcast\n                      Frames, and whose source or destination were on\n                      this ring (i.e. frames that had a RIF field and\n                      had this ring number in the first or last entry of\n                      the RIF field)."), status("mandatory")] uint32 sourceRoutingStatsMoreThan8HopsFrames;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.10.6.1.4"), read, description("The count of frames sent from this ring to\n                      another ring."), status("mandatory")] uint32 sourceRoutingStatsOutFrames;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.10.6.1.9"), read, description("The count of octets in good frames sent from this\n                      ring to another ring."), status("mandatory")] uint32 sourceRoutingStatsOutOctets;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.10.6.1.14"), read, description("The total number of frames received whose route\n                      had 1 hop, were not All Route Broadcast Frames,\n                      and whose source or destination were on this ring\n                      (i.e. frames that had a RIF field and had this\n                      ring number in the first or last entry of the RIF\n                      field)."), status("mandatory")] uint32 sourceRoutingStats1HopFrames;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.16.10.6.1.2"), read, description("The ring number of the ring monitored by this\n                      entry.  When any object in this entry is created,\n                      the probe will attempt to discover the ring\n                      number.  Only after the ring number is discovered\n                      will this object be created.  After creating an\n                      object in this entry, the management station\n                      should poll this object to detect when it is\n                      created.  Only after this object is created can\n                      the management station set the\n                      sourceRoutingStatsStatus entry to valid(1)."), status("mandatory")] sint32 sourceRoutingStatsRingNumber;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.10.6.1.15"), read, description("The total number of frames received whose route\n                      had 2 hops, were not All Route Broadcast Frames,\n                      and whose source or destination were on this ring\n                      (i.e. frames that had a RIF field and had this\n                      ring number in the first or last entry of the RIF\n                      field)."), status("mandatory")] uint32 sourceRoutingStats2HopsFrames;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.10.6.1.16"), read, description("The total number of frames received whose route\n                      had 3 hops, were not All Route Broadcast Frames,\n                      and whose source or destination were on this ring\n                      (i.e. frames that had a RIF field and had this\n                      ring number in the first or last entry of the RIF\n                      field)."), status("mandatory")] uint32 sourceRoutingStats3HopsFrames;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.10.6.1.17"), read, description("The total number of frames received whose route\n                      had 4 hops, were not All Route Broadcast Frames,\n                      and whose source or destination were on this ring\n                      (i.e. frames that had a RIF field and had this\n                      ring number in the first or last entry of the RIF\n                      field)."), status("mandatory")] uint32 sourceRoutingStats4HopsFrames;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.10.6.1.18"), read, description("The total number of frames received whose route\n                      had 5 hops, were not All Route Broadcast Frames,\n                      and whose source or destination were on this ring\n                      (i.e. frames that had a RIF field and had this\n                      ring number in the first or last entry of the RIF\n                      field)."), status("mandatory")] uint32 sourceRoutingStats5HopsFrames;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.10.6.1.19"), read, description("The total number of frames received whose route\n                      had 6 hops, were not All Route Broadcast Frames,\n                      and whose source or destination were on this ring\n                      (i.e. frames that had a RIF field and had this\n                      ring number in the first or last entry of the RIF\n                      field)."), status("mandatory")] uint32 sourceRoutingStats6HopsFrames;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.10.6.1.20"), read, description("The total number of frames received whose route\n                      had 7 hops, were not All Route Broadcast Frames,\n                      and whose source or destination were on this ring\n                      (i.e. frames that had a RIF field and had this\n                      ring number in the first or last entry of the RIF\n                      field)."), status("mandatory")] uint32 sourceRoutingStats7HopsFrames;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_TOKEN_RING_RMON_MIB_sourceRoutingStatsTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"TOKEN_RING_RMON_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_TOKEN_RING_RMON_MIB_sourceRoutingStatsTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_TOKEN_RING_RMON_MIB_sourceRoutingStatsTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\TOKEN_RING_RMON_MIB:SNMP_GROUP.Name=\"tokenRingV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_TOKEN_RING_RMON_MIB_sourceRoutingStatsTable";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description("A list of configuration entries for stations on a\n                      ring monitored by this probe.\nA collection of statistics for a particular\n                      station that has been discovered on a ring\n                      monitored by this probe."), module_name("TOKEN-RING-RMON-MIB"), group_objectid("1.3.6.1.2.1.16.10"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_TOKEN_RING_RMON_MIB_ringStationConfigTable : SnmpObjectType
{
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("OCTETSTRING"), fixed_length(4), object_identifier("1.3.6.1.2.1.16.10.5.1.6"), read, description("The low-order 4 octets of the group address\n                      recognized by this station."), status("mandatory")] string ringStationConfigGroupAddress;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.16.10.5.1.1"), read, description("The value of this object uniquely identifies the\n\n\n\n\n\n                      interface on this remote network monitoring device\n                      on which this station was detected.  The interface\n                      identified by a particular value of this object is\n                      the same interface as identified by the same value\n                      of the ifIndex object, defined in MIB-II [3]."), status("mandatory"), key, key_order(1)] sint32 ringStationConfigIfIndex;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("OCTETSTRING"), fixed_length(4), object_identifier("1.3.6.1.2.1.16.10.5.1.7"), read, description("the functional addresses recognized by this\n                      station."), status("mandatory")] string ringStationConfigFunctionalAddress;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("OCTETSTRING"), fixed_length(4), object_identifier("1.3.6.1.2.1.16.10.5.1.4"), read, description("The assigned physical location of this station."), status("mandatory")] string ringStationConfigLocation;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("OCTETSTRING"), fixed_length(10), object_identifier("1.3.6.1.2.1.16.10.5.1.5"), read, description("The microcode EC level of this station."), status("mandatory")] string ringStationConfigMicrocode;
	[textual_convention("MacAddress"), encoding("OCTETSTRING"), object_syntax("MacAddress"), display_hint("1x:"), object_identifier("1.3.6.1.2.1.16.10.5.1.2"), read, description("The physical address of this station."), status("mandatory"), key, key_order(2)] string ringStationConfigMacAddress;
	[textual_convention("TimeTicks"), encoding("TimeTicks"), object_syntax("TimeTicks"), object_identifier("1.3.6.1.2.1.16.10.5.1.3"), read, description("The value of sysUpTime at the time this\n                      configuration information was last updated\n                      (completely)."), status("mandatory")] uint32 ringStationConfigUpdateTime;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_TOKEN_RING_RMON_MIB_ringStationConfigTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"TOKEN_RING_RMON_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_TOKEN_RING_RMON_MIB_ringStationConfigTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_TOKEN_RING_RMON_MIB_ringStationConfigTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\TOKEN_RING_RMON_MIB:SNMP_GROUP.Name=\"tokenRingV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_TOKEN_RING_RMON_MIB_ringStationConfigTable";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description("A list of ring station entries.  An entry will\n                      exist for each station that is now or has\n\n\n\n\n\n                      previously been detected as physically present on\n                      this ring.\nA collection of statistics for a particular\n                      station that has been discovered on a ring\n                      monitored by this device."), module_name("TOKEN-RING-RMON-MIB"), group_objectid("1.3.6.1.2.1.16.10"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_TOKEN_RING_RMON_MIB_ringStationTable : SnmpObjectType
{
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.10.2.1.7"), read, description("The number of times this station experienced a\n                      duplicate address error."), status("mandatory")] uint32 ringStationDuplicateAddresses;
	[textual_convention("MacAddress"), encoding("OCTETSTRING"), object_syntax("MacAddress"), display_hint("1x:"), object_identifier("1.3.6.1.2.1.16.10.2.1.2"), read, description("The physical address of this station."), status("mandatory"), key, key_order(2)] string ringStationMacAddress;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.10.2.1.22"), read, description("The number of times the probe detected this\n                      station inserting onto the ring."), status("mandatory")] uint32 ringStationInsertions;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.10.2.1.14"), read, description("The total number of abort delimiters reported by\n                      this station in error reporting packets detected\n                      by the probe."), status("mandatory")] uint32 ringStationAbortErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.10.2.1.19"), read, description("The total number of token errors reported by this\n                      station in error reporting frames detected by the\n                      probe."), status("mandatory")] uint32 ringStationTokenErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.10.2.1.8"), read, description("The total number of line errors reported by this\n                      station in error reporting packets detected by the\n                      probe."), status("mandatory")] uint32 ringStationInLineErrors;
	[textual_convention("TimeTicks"), encoding("TimeTicks"), object_syntax("TimeTicks"), object_identifier("1.3.6.1.2.1.16.10.2.1.6"), read, description("The value of sysUpTime at the time the probe\n                      detected that this station last exited the ring.\n                      If the time is unknown, this value shall be zero."), status("mandatory")] uint32 ringStationLastExitTime;
	[textual_convention("TimeTicks"), encoding("TimeTicks"), object_syntax("TimeTicks"), object_identifier("1.3.6.1.2.1.16.10.2.1.5"), read, description("The value of sysUpTime at the time this station\n                      last entered the ring.  If the time is unknown,\n                      this value shall be zero."), status("mandatory")] uint32 ringStationLastEnterTime;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.10.2.1.9"), read, description("The total number of line errors reported in error\n                      reporting packets sent by the nearest active\n                      downstream neighbor of this station and detected\n                      by the probe."), status("mandatory")] uint32 ringStationOutLineErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.10.2.1.11"), read, description("The total number of burst errors reported by this\n                      station in error reporting packets detected by the\n                      probe."), status("mandatory")] uint32 ringStationInBurstErrors;
	[textual_convention("EnumeratedINTEGER"), enumeration("active(1),inactive(2),forcedRemoval(3)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.16.10.2.1.4"), read, description("The status of this station on the ring."), status("mandatory")] string ringStationStationStatus;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.10.2.1.20"), read, description("The total number of beacon frames sent by this\n                      station and detected by the probe."), status("mandatory")] uint32 ringStationInBeaconErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.10.2.1.10"), read, description("The total number of adapter internal errors\n                      reported by this station in error reporting\n                      packets detected by the probe."), status("mandatory")] uint32 ringStationInternalErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.10.2.1.12"), read, description("The total number of burst errors reported in\n                      error reporting packets sent by the nearest active\n                      downstream neighbor of this station and detected\n                      by the probe."), status("mandatory")] uint32 ringStationOutBurstErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.10.2.1.21"), read, description("The total number of beacon frames detected by the\n                      probe that name this station as the NAUN."), status("mandatory")] uint32 ringStationOutBeaconErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.10.2.1.15"), read, description("The total number of lost frame errors reported by\n                      this station in error reporting packets detected\n                      by the probe."), status("mandatory")] uint32 ringStationLostFrameErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.10.2.1.18"), read, description("The total number of frequency errors reported by\n                      this station in error reporting packets detected\n                      by the probe."), status("mandatory")] uint32 ringStationFrequencyErrors;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.16.10.2.1.1"), read, description("The value of this object uniquely identifies the\n                      interface on this remote network monitoring device\n                      on which this station was detected.  The interface\n                      identified by a particular value of this object is\n                      the same interface as identified by the same value\n                      of the ifIndex object, defined in MIB-II [3]."), status("mandatory"), key, key_order(1)] sint32 ringStationIfIndex;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.10.2.1.16"), read, description("The total number of receive congestion errors\n                      reported by this station in error reporting\n                      packets detected by the probe."), status("mandatory")] uint32 ringStationCongestionErrors;
	[textual_convention("MacAddress"), encoding("OCTETSTRING"), object_syntax("MacAddress"), display_hint("1x:"), object_identifier("1.3.6.1.2.1.16.10.2.1.3"), read, description("The physical address of last known NAUN of this\n                      station."), status("mandatory")] string ringStationLastNAUN;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.10.2.1.17"), read, description("The total number of frame copied errors reported\n                      by this station in error reporting packets\n                      detected by the probe."), status("mandatory")] uint32 ringStationFrameCopiedErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.10.2.1.13"), read, description("The total number of AC (Address Copied) errors\n                      reported in error reporting packets sent by the\n                      nearest active downstream neighbor of this station\n                      and detected by the probe."), status("mandatory")] uint32 ringStationACErrors;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_TOKEN_RING_RMON_MIB_ringStationTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"TOKEN_RING_RMON_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_TOKEN_RING_RMON_MIB_ringStationTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_TOKEN_RING_RMON_MIB_ringStationTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\TOKEN_RING_RMON_MIB:SNMP_GROUP.Name=\"tokenRingV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_TOKEN_RING_RMON_MIB_ringStationTable";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description("A list of ring station configuration control\n                      entries.\nThis entry controls active management of stations\n                      by the probe.  One entry exists in this table for\n                      each active station in the ringStationTable."), module_name("TOKEN-RING-RMON-MIB"), group_objectid("1.3.6.1.2.1.16.10"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_TOKEN_RING_RMON_MIB_ringStationConfigControlTable : SnmpObjectType
{
	[textual_convention("EnumeratedINTEGER"), enumeration("stable(1),removing(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.16.10.4.1.3"), read, write, description("Setting this object to `removing(2)' causes a\n                      Remove Station MAC frame to be sent.  The agent\n                      will set this object to `stable(1)' after\n                      processing the request."), status("mandatory")] string ringStationConfigControlRemove;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.16.10.4.1.1"), read, description("The value of this object uniquely identifies the\n\n\n\n\n\n                      interface on this remote network monitoring device\n                      on which this station was detected.  The interface\n                      identified by a particular value of this object is\n                      the same interface as identified by the same value\n                      of the ifIndex object, defined in MIB-II [3]."), status("mandatory"), key, key_order(1)] sint32 ringStationConfigControlIfIndex;
	[textual_convention("MacAddress"), encoding("OCTETSTRING"), object_syntax("MacAddress"), display_hint("1x:"), object_identifier("1.3.6.1.2.1.16.10.4.1.2"), read, description("The physical address of this station."), status("mandatory"), key, key_order(2)] string ringStationConfigControlMacAddress;
	[textual_convention("EnumeratedINTEGER"), enumeration("stable(1),updating(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.16.10.4.1.4"), read, write, description("Setting this object to `updating(2)' causes the\n                      configuration information associate with this\n                      entry to be updated.  The agent will set this\n                      object to `stable(1)' after processing the\n                      request."), status("mandatory")] string ringStationConfigControlUpdateStats;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_TOKEN_RING_RMON_MIB_ringStationConfigControlTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"TOKEN_RING_RMON_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_TOKEN_RING_RMON_MIB_ringStationConfigControlTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_TOKEN_RING_RMON_MIB_ringStationConfigControlTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\TOKEN_RING_RMON_MIB:SNMP_GROUP.Name=\"tokenRingV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_TOKEN_RING_RMON_MIB_ringStationConfigControlTable";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description("A list of ringStation table control entries.\nA list of parameters that set up the discovery of\n                      stations on a particular interface and the\n                      collection of statistics about these stations."), module_name("TOKEN-RING-RMON-MIB"), group_objectid("1.3.6.1.2.1.16.10"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_TOKEN_RING_RMON_MIB_ringStationControlTable : SnmpObjectType
{
	[textual_convention("MacAddress"), encoding("OCTETSTRING"), object_syntax("MacAddress"), display_hint("1x:"), object_identifier("1.3.6.1.2.1.16.10.1.1.5"), read, description("The address of the sender of the last beacon\n                      frame received by the probe on this ring.  If no\n                      beacon frames have been received, this object\n                      shall be equal to six octets of zero."), status("mandatory")] string ringStationControlBeaconSender;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.10.1.1.8"), read, description("The number of add and delete events in the\n                      ringStationOrderTable optionally associated with\n                      this ringStationControlEntry."), status("mandatory")] uint32 ringStationControlOrderChanges;
	[textual_convention("MacAddress"), encoding("OCTETSTRING"), object_syntax("MacAddress"), display_hint("1x:"), object_identifier("1.3.6.1.2.1.16.10.1.1.7"), read, description("The address of the Active Monitor on this\n                      segment.  If this address is unknown, this object\n                      shall be equal to six octets of zero."), status("mandatory")] string ringStationControlActiveMonitor;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.16.10.1.1.3"), read, description("The number of active ringStationEntries in the\n                      ringStationTable associated with this\n                      ringStationControlEntry."), status("mandatory")] sint32 ringStationControlActiveStations;
	[textual_convention("DisplayString"), encoding("OCTETSTRING"), object_syntax("OwnerString"), object_identifier("1.3.6.1.2.1.16.10.1.1.9"), read, write, description("The entity that configured this entry and is\n                      therefore using the resources assigned to it."), status("mandatory")] string ringStationControlOwner;
	[textual_convention("EnumeratedINTEGER"), enumeration("valid(1),createRequest(2),underCreation(3),invalid(4)"), encoding("INTEGER"), object_syntax("EntryStatus"), object_identifier("1.3.6.1.2.1.16.10.1.1.10"), read, write, description("The status of this ringStationControl entry.\n\n                      If this object is not equal to valid(1), all\n                      associated entries in the ringStationTable shall\n                      be deleted by the agent."), status("mandatory")] string ringStationControlStatus;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.16.10.1.1.1"), read, description("The value of this object uniquely identifies the\n                      interface on this remote network monitoring device\n                      from which ringStation data is collected.  The\n                      interface identified by a particular value of this\n                      object is the same interface as identified by the\n                      same value of the ifIndex object, defined in MIB-\n                      II [3]."), status("mandatory"), key, key_order(1)] sint32 ringStationControlIfIndex;
	[textual_convention("MacAddress"), encoding("OCTETSTRING"), object_syntax("MacAddress"), display_hint("1x:"), object_identifier("1.3.6.1.2.1.16.10.1.1.6"), read, description("The address of the NAUN in the last beacon frame\n                      received by the probe on this ring.  If no beacon\n                      frames have been received, this object shall be\n                      equal to six octets of zero."), status("mandatory")] string ringStationControlBeaconNAUN;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.16.10.1.1.2"), read, description("The number of ringStationEntries in the\n                      ringStationTable associated with this\n                      ringStationControlEntry."), status("mandatory")] sint32 ringStationControlTableSize;
	[textual_convention("EnumeratedINTEGER"), enumeration("normalOperation(1),ringPurgeState(2),claimTokenState(3),beaconFrameStreamingState(4),beaconBitStreamingState(5),beaconRingSignalLossState(6),beaconSetRecoveryModeState(7)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.16.10.1.1.4"), read, description("The current status of this ring."), status("mandatory")] string ringStationControlRingState;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_TOKEN_RING_RMON_MIB_ringStationControlTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"TOKEN_RING_RMON_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_TOKEN_RING_RMON_MIB_ringStationControlTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_TOKEN_RING_RMON_MIB_ringStationControlTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\TOKEN_RING_RMON_MIB:SNMP_GROUP.Name=\"tokenRingV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_TOKEN_RING_RMON_MIB_ringStationControlTable";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description("A list of ring station entries for stations in\n                      the ring poll, ordered by their ring-order.\nA collection of statistics for a particular\n\n\n\n\n\n                      station that is active on a ring monitored by this\n                      device.  This table will contain information for\n                      every interface that has a\n                      ringStationControlStatus equal to valid."), module_name("TOKEN-RING-RMON-MIB"), group_objectid("1.3.6.1.2.1.16.10"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_TOKEN_RING_RMON_MIB_ringStationOrderTable : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.16.10.3.1.1"), read, description("The value of this object uniquely identifies the\n                      interface on this remote network monitoring device\n                      on which this station was detected.  The interface\n                      identified by a particular value of this object is\n                      the same interface as identified by the same value\n                      of the ifIndex object, defined in MIB-II [3]."), status("mandatory"), key, key_order(1)] sint32 ringStationOrderIfIndex;
	[textual_convention("MacAddress"), encoding("OCTETSTRING"), object_syntax("MacAddress"), display_hint("1x:"), object_identifier("1.3.6.1.2.1.16.10.3.1.3"), read, description("The physical address of this station."), status("mandatory")] string ringStationOrderMacAddress;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.16.10.3.1.2"), read, description("This index denotes the location of this station\n                      with respect to other stations on the ring.  This\n                      index is one more than the number of hops\n                      downstream that this station is from the rmon\n                      probe.  The rmon probe itself gets the value one."), status("mandatory"), key, key_order(2)] sint32 ringStationOrderOrderIndex;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_TOKEN_RING_RMON_MIB_ringStationOrderTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"TOKEN_RING_RMON_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_TOKEN_RING_RMON_MIB_ringStationOrderTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_TOKEN_RING_RMON_MIB_ringStationOrderTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\TOKEN_RING_RMON_MIB:SNMP_GROUP.Name=\"tokenRingV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_TOKEN_RING_RMON_MIB_ringStationOrderTable";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR\\TOKEN_RING_RMON_MIB")
instance of SNMP_GROUP
{
Name="historyV1ObjectGroup";
Group_Id="1.3.6.1.2.1.16.2";
Status="current";
Description="";
Reference="";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description("A list of Mac-Layer Token Ring statistics\n\n\n\n\n\n                      entries.\nA collection of Mac-Layer statistics kept for a\n                      particular Token Ring interface."), module_name("TOKEN-RING-RMON-MIB"), group_objectid("1.3.6.1.2.1.16.2"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_TOKEN_RING_RMON_MIB_tokenRingMLHistoryTable : SnmpObjectType
{
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.2.3.1.24"), read, description("The total number of token errors reported in\n                      error reporting packets detected by the probe\n                      during this sampling interval."), status("mandatory")] uint32 tokenRingMLHistoryTokenErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.2.3.1.17"), read, description("The total number of burst errors reported in\n                      error reporting packets detected by the probe\n                      during this sampling interval."), status("mandatory")] uint32 tokenRingMLHistoryBurstErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.2.3.1.9"), read, description("The total number of times that the ring enters a\n                      beaconing state (beaconFrameStreamingState,\n                      beaconBitStreamingState,\n                      beaconSetRecoveryModeState, or\n                      beaconRingSignalLossState) during this sampling\n                      interval.  Note that a change of the source\n                      address of the beacon packet does not constitute a\n                      new beacon event."), status("mandatory")] uint32 tokenRingMLHistoryBeaconEvents;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.2.3.1.8"), read, description("The total number of Ring Purge MAC packets\n                      detected by the probe during this sampling\n\n\n\n\n\n                      interval."), status("mandatory")] uint32 tokenRingMLHistoryRingPurgePkts;
	[textual_convention("TimeTicks"), encoding("TimeTicks"), object_syntax("TimeTicks"), object_identifier("1.3.6.1.2.1.16.2.3.1.3"), read, description("The value of sysUpTime at the start of the\n                      interval over which this sample was measured.  If\n                      the probe keeps track of the time of day, it\n                      should start the first sample of the history at a\n                      time such that when the next hour of the day\n                      begins, a sample is started at that instant.  Note\n                      that following this rule may require the probe to\n                      delay collecting the first sample of the history,\n                      as each sample must be of the same interval.  Also\n                      note that the sample which is currently being\n                      collected is not accessible in this table until\n                      the end of its interval."), status("mandatory")] uint32 tokenRingMLHistoryIntervalStart;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.2.3.1.13"), read, description("The total number of claim token MAC packets\n                      detected by the probe during this sampling\n                      interval."), status("mandatory")] uint32 tokenRingMLHistoryClaimTokenPkts;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.2.3.1.26"), read, description("The total number of ring poll events detected by\n                      the probe during this sampling interval."), status("mandatory")] uint32 tokenRingMLHistoryRingPollEvents;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.16.2.3.1.27"), read, description("The maximum number of active stations on the ring\n                      detected by the probe during this sampling\n\n\n\n\n\n                      interval."), status("mandatory")] sint32 tokenRingMLHistoryActiveStations;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.2.3.1.16"), read, description("The total number of adapter internal errors\n                      reported in error reporting packets detected by\n                      the probe during this sampling interval."), status("mandatory")] uint32 tokenRingMLHistoryInternalErrors;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.16.2.3.1.1"), read, description("The history of which this entry is a part.  The\n                      history identified by a particular value of this\n                      index is the same history as identified by the\n                      same value of historyControlIndex."), status("mandatory"), key, key_order(1)] sint32 tokenRingMLHistoryIndex;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.2.3.1.7"), read, description("The total number of times that the ring entered\n                      the ring purge state from normal ring state during\n                      this sampling interval.  The ring purge state that\n                      comes from the claim token or beacon state is not\n                      counted."), status("mandatory")] uint32 tokenRingMLHistoryRingPurgeEvents;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.2.3.1.20"), read, description("The total number of lost frame errors reported in\n                      error reporting packets detected by the probe\n                      during this sampling interval."), status("mandatory")] uint32 tokenRingMLHistoryLostFrameErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.2.3.1.23"), read, description("The total number of frequency errors reported in\n                      error reporting packets detected by the probe\n                      during this sampling interval."), status("mandatory")] uint32 tokenRingMLHistoryFrequencyErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.2.3.1.12"), read, description("The total number of times that the ring enters\n                      the claim token state from normal ring state or\n                      ring purge state during this sampling interval.\n                      The claim token state that comes from the beacon\n                      state is not counted."), status("mandatory")] uint32 tokenRingMLHistoryClaimTokenEvents;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.2.3.1.25"), read, description("The total number of soft error report frames\n                      detected by the probe during this sampling\n                      interval."), status("mandatory")] uint32 tokenRingMLHistorySoftErrorReports;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.2.3.1.21"), read, description("The total number of receive congestion errors\n                      reported in error reporting packets detected by\n                      the probe during this sampling interval."), status("mandatory")] uint32 tokenRingMLHistoryCongestionErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.2.3.1.6"), read, description("The total number of MAC packets (excluding those\n                      that were not good frames) received during this\n                      sampling interval."), status("mandatory")] uint32 tokenRingMLHistoryMacPkts;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.2.3.1.22"), read, description("The total number of frame copied errors reported\n                      in error reporting packets detected by the probe\n                      during this sampling interval."), status("mandatory")] uint32 tokenRingMLHistoryFrameCopiedErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.2.3.1.18"), read, description("The total number of AC (Address Copied) errors\n                      reported in error reporting packets detected by\n                      the probe during this sampling interval."), status("mandatory")] uint32 tokenRingMLHistoryACErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.2.3.1.5"), read, description("The total number of octets of data in MAC packets\n                      (excluding those that were not good frames)\n                      received on the network during this sampling\n                      interval (excluding framing bits but including FCS\n                      octets)."), status("mandatory")] uint32 tokenRingMLHistoryMacOctets;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("TimeInterval"), variable_value("0..2147483647"), object_identifier("1.3.6.1.2.1.16.2.3.1.10"), read, description("The amount of time that the ring has been in the\n                      beaconing state during this sampling interval."), status("mandatory")] sint32 tokenRingMLHistoryBeaconTime;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.2.3.1.11"), read, description("The total number of beacon MAC packets detected\n                      by the probe during this sampling interval."), status("mandatory")] uint32 tokenRingMLHistoryBeaconPkts;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.2.3.1.14"), read, description("The total number of NAUN changes detected by the\n                      probe during this sampling interval."), status("mandatory")] uint32 tokenRingMLHistoryNAUNChanges;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.2.3.1.15"), read, description("The total number of line errors reported in error\n                      reporting packets detected by the probe during\n                      this sampling interval."), status("mandatory")] uint32 tokenRingMLHistoryLineErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.2.3.1.4"), read, description("The total number of events in which packets were\n\n\n\n\n\n                      dropped by the probe due to lack of resources\n                      during this sampling interval.  Note that this\n                      number is not necessarily the number of packets\n                      dropped, it is just the number of times this\n                      condition has been detected."), status("mandatory")] uint32 tokenRingMLHistoryDropEvents;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.16.2.3.1.2"), read, description("An index that uniquely identifies the particular\n                      Mac-Layer sample this entry represents among all\n                      Mac-Layer samples associated with the same\n                      historyControlEntry.  This index starts at 1 and\n                      increases by one as each new sample is taken."), status("mandatory"), key, key_order(2)] sint32 tokenRingMLHistorySampleIndex;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.2.3.1.19"), read, description("The total number of abort delimiters reported in\n                      error reporting packets detected by the probe\n                      during this sampling interval."), status("mandatory")] uint32 tokenRingMLHistoryAbortErrors;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_TOKEN_RING_RMON_MIB_tokenRingMLHistoryTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"TOKEN_RING_RMON_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_TOKEN_RING_RMON_MIB_tokenRingMLHistoryTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_TOKEN_RING_RMON_MIB_tokenRingMLHistoryTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\TOKEN_RING_RMON_MIB:SNMP_GROUP.Name=\"historyV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_TOKEN_RING_RMON_MIB_tokenRingMLHistoryTable";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description("A list of promiscuous Token Ring statistics\n                      entries.\nA collection of promiscuous statistics kept for a\n                      particular Token Ring interface."), module_name("TOKEN-RING-RMON-MIB"), group_objectid("1.3.6.1.2.1.16.2"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_TOKEN_RING_RMON_MIB_tokenRingPHistoryTable : SnmpObjectType
{
	[textual_convention("TimeTicks"), encoding("TimeTicks"), object_syntax("TimeTicks"), object_identifier("1.3.6.1.2.1.16.2.4.1.3"), read, description("The value of sysUpTime at the start of the\n                      interval over which this sample was measured.  If\n                      the probe keeps track of the time of day, it\n                      should start the first sample of the history at a\n                      time such that when the next hour of the day\n                      begins, a sample is started at that instant.  Note\n                      that following this rule may require the probe to\n                      delay collecting the first sample of the history,\n                      as each sample must be of the same interval.  Also\n                      note that the sample which is currently being\n                      collected is not accessible in this table until\n                      the end of its interval."), status("mandatory")] uint32 tokenRingPHistoryIntervalStart;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.16.2.4.1.1"), read, description("The history of which this entry is a part.  The\n                      history identified by a particular value of this\n                      index is the same history as identified by the\n                      same value of historyControlIndex."), status("mandatory"), key, key_order(1)] sint32 tokenRingPHistoryIndex;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.2.4.1.7"), read, description("The total number of good non-MAC frames received\n                      during this sampling interval that were directed\n                      to an LLC broadcast address (0xFFFFFFFFFFFF or\n                      0xC000FFFFFFFF)."), status("mandatory")] uint32 tokenRingPHistoryDataBroadcastPkts;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.2.4.1.8"), read, description("The total number of good non-MAC frames received\n                      during this sampling interval that were directed\n                      to a local or global multicast or functional\n                      address.  Note that this number does not include\n                      packets directed to the broadcast address."), status("mandatory")] uint32 tokenRingPHistoryDataMulticastPkts;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.2.4.1.18"), read, description("The total number of good non-MAC frames received\n                      during this sampling interval that were greater\n                      than 18000 octets in length, excluding framing\n                      bits but including FCS octets."), status("mandatory")] uint32 tokenRingPHistoryDataPktsGreaterThan18000Octets;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.2.4.1.6"), read, description("The total number of good non-MAC frames received\n                      during this sampling interval."), status("mandatory")] uint32 tokenRingPHistoryDataPkts;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.2.4.1.9"), read, description("The total number of good non-MAC frames received\n                      during this sampling interval that were between 18\n                      and 63 octets in length inclusive, excluding\n                      framing bits but including FCS octets."), status("mandatory")] uint32 tokenRingPHistoryDataPkts18to63Octets;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.2.4.1.10"), read, description("The total number of good non-MAC frames received\n                      during this sampling interval that were between 64\n                      and 127 octets in length inclusive, excluding\n                      framing bits but including FCS octets."), status("mandatory")] uint32 tokenRingPHistoryDataPkts64to127Octets;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.2.4.1.12"), read, description("The total number of good non-MAC frames received\n                      during this sampling interval that were between\n\n\n\n\n\n                      256 and 511 octets in length inclusive, excluding\n                      framing bits but including FCS octets."), status("mandatory")] uint32 tokenRingPHistoryDataPkts256to511Octets;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.2.4.1.11"), read, description("The total number of good non-MAC frames received\n                      during this sampling interval that were between\n                      128 and 255 octets in length inclusive, excluding\n                      framing bits but including FCS octets."), status("mandatory")] uint32 tokenRingPHistoryDataPkts128to255Octets;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.2.4.1.13"), read, description("The total number of good non-MAC frames received\n                      during this sampling interval that were between\n                      512 and 1023 octets in length inclusive, excluding\n                      framing bits but including FCS octets."), status("mandatory")] uint32 tokenRingPHistoryDataPkts512to1023Octets;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.2.4.1.5"), read, description("The total number of octets of data in good frames\n                      received on the network (excluding framing bits\n                      but including FCS octets) in non-MAC packets\n                      during this sampling interval."), status("mandatory")] uint32 tokenRingPHistoryDataOctets;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.2.4.1.4"), read, description("The total number of events in which packets were\n                      dropped by the probe due to lack of resources\n                      during this sampling interval.  Note that this\n                      number is not necessarily the number of packets\n                      dropped, it is just the number of times this\n                      condition has been detected."), status("mandatory")] uint32 tokenRingPHistoryDropEvents;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.2.4.1.14"), read, description("The total number of good non-MAC frames received\n                      during this sampling interval that were between\n                      1024 and 2047 octets in length inclusive,\n                      excluding framing bits but including FCS octets."), status("mandatory")] uint32 tokenRingPHistoryDataPkts1024to2047Octets;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.2.4.1.15"), read, description("The total number of good non-MAC frames received\n                      during this sampling interval that were between\n                      2048 and 4095 octets in length inclusive,\n                      excluding framing bits but including FCS octets."), status("mandatory")] uint32 tokenRingPHistoryDataPkts2048to4095Octets;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.2.4.1.16"), read, description("The total number of good non-MAC frames received\n                      during this sampling interval that were between\n                      4096 and 8191 octets in length inclusive,\n                      excluding framing bits but including FCS octets."), status("mandatory")] uint32 tokenRingPHistoryDataPkts4096to8191Octets;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.2.4.1.17"), read, description("The total number of good non-MAC frames received\n                      during this sampling interval that were between\n                      8192 and 18000 octets in length inclusive,\n                      excluding framing bits but including FCS octets."), status("mandatory")] uint32 tokenRingPHistoryDataPkts8192to18000Octets;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.16.2.4.1.2"), read, description("An index that uniquely identifies the particular\n                      sample this entry represents among all samples\n                      associated with the same historyControlEntry.\n                      This index starts at 1 and increases by one as\n                      each new sample is taken."), status("mandatory"), key, key_order(2)] sint32 tokenRingPHistorySampleIndex;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_TOKEN_RING_RMON_MIB_tokenRingPHistoryTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"TOKEN_RING_RMON_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_TOKEN_RING_RMON_MIB_tokenRingPHistoryTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_TOKEN_RING_RMON_MIB_tokenRingPHistoryTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\TOKEN_RING_RMON_MIB:SNMP_GROUP.Name=\"historyV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_TOKEN_RING_RMON_MIB_tokenRingPHistoryTable";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description("A list of history control entries.\nA list of parameters that set up a periodic\n                  sampling of statistics."), module_name("RFC1271-MIB"), group_objectid("1.3.6.1.2.1.16.2"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_RFC1271_MIB_historyControlTable : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.16.2.1.1.1"), read, description("An index that uniquely identifies an entry in the\n                  historyControl table.  Each such entry defines a\n                  set of samples at a particular interval for an\n                  interface on the device."), status("mandatory"), key, key_order(1)] sint32 historyControlIndex;
	[textual_convention("DisplayString"), encoding("OCTETSTRING"), object_syntax("OwnerString"), object_identifier("1.3.6.1.2.1.16.2.1.1.6"), read, write, description("The entity that configured this entry and is therefore\n                  using the resources assigned to it."), status("mandatory")] string historyControlOwner;
	[textual_convention("EnumeratedINTEGER"), enumeration("valid(1),createRequest(2),underCreation(3),invalid(4)"), encoding("INTEGER"), object_syntax("EntryStatus"), object_identifier("1.3.6.1.2.1.16.2.1.1.7"), read, write, description("The status of this historyControl entry.\n\n                  Each instance of the media-specific table associated\n                  with this historyControlEntry will be deleted by the\n                  agent if this historyControlEntry is not equal to\n                  valid(1)."), status("mandatory")] string historyControlStatus;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.16.2.1.1.3"), read, write, description("The requested number of discrete time intervals\n                  over which data is to be saved in the part of the\n                  media-specific table associated with this\n                  historyControl entry.\n\n                  When this object is created or modified, the probe\n                  should set historyControlBucketsGranted as closely to\n                  this object as is possible for the particular probe\n                  implementation and available resources."), status("mandatory"), defval("50")] sint32 historyControlBucketsRequested;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..3600"), object_identifier("1.3.6.1.2.1.16.2.1.1.5"), read, write, description("The interval in seconds over which the data is\n                  sampled for each bucket in the part of the\n                  media-specific table associated with this\n                  historyControl entry.  This interval can\n                  be set to any number of seconds between 1 and\n\n\n\n\n\n                  3600 (1 hour).\n\n                  Because the counters in a bucket may overflow at their\n                  maximum value with no indication, a prudent manager\n                  will take into account the possibility of overflow\n                  in any of the associated counters.  It is important\n                  to consider the minimum time in which any counter\n                  could overflow on a particular media type and set\n                  the historyControlInterval object to a value less\n                  than this interval.  This is typically most\n                  important for the 'octets' counter in any\n                  media-specific table.  For example, on an Ethernet\n                  network, the etherHistoryOctets counter could overflow\n                  in about one hour at the Ethernet's maximum\n                  utilization.\n\n                  This object may not be modified if the associated\n                  historyControlStatus object is equal to valid(1)."), status("mandatory"), defval("1800")] sint32 historyControlInterval;
	[textual_convention("OBJECTIDENTIFIER"), encoding("OBJECTIDENTIFIER"), object_syntax("OBJECTIDENTIFIER"), object_identifier("1.3.6.1.2.1.16.2.1.1.2"), read, write, description("This object identifies the source of the data for\n                  which historical data was collected and\n                  placed in a media-specific table on behalf of this\n                  historyControlEntry.  This source can be any\n                  interface on this device.  In order to identify\n                  a particular interface, this object shall identify\n                  the instance of the ifIndex object, defined\n                  in [4,6], for the desired interface.  For example,\n                  if an entry were to receive data from interface #1,\n                  this object would be set to ifIndex.1.\n\n                  The statistics in this group reflect all packets\n                  on the local network segment attached to the\n                  identified interface.\n\n                  This object may not be modified if the associated\n                  historyControlStatus object is equal to valid(1)."), status("mandatory")] string historyControlDataSource;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.16.2.1.1.4"), read, description("The number of discrete sampling intervals\n                  over which data shall be saved in the part of\n\n\n\n\n\n                  the media-specific table associated with this\n                  historyControl entry.\n\n                  When the associated historyControlBucketsRequested\n                  object is created or modified, the probe\n                  should set this object as closely to the requested\n                  value as is possible for the particular\n                  probe implementation and available resources.  The\n                  probe must not lower this value except as a result\n                  of a modification to the associated\n                  historyControlBucketsRequested object.\n\n                  There will be times when the actual number of\n                  buckets associated with this entry is less than\n                  the value of this object.  In this case, at the\n                  end of each sampling interval, a new bucket will\n                  be added to the media-specific table.\n\n                  When the number of buckets reaches the value of\n                  this object and a new bucket is to be added to the\n                  media-specific table, the oldest bucket associated\n                  with this historyControlEntry shall be deleted by\n                  the agent so that the new bucket can be added.\n\n                  When the value of this object changes to a value less\n                  than the current value, entries are deleted\n                  from the media-specific table associated with this\n                  historyControlEntry.  Enough of the oldest of these\n                  entries shall be deleted by the agent so that their\n                  number remains less than or equal to the new value of\n                  this object.\n\n                  When the value of this object changes to a value\n                  greater than the current value, the number of\n                  associated media-specific entries may be allowed\n                  to grow."), status("mandatory")] sint32 historyControlBucketsGranted;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_RFC1271_MIB_historyControlTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"TOKEN_RING_RMON_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_RFC1271_MIB_historyControlTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_RFC1271_MIB_historyControlTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\TOKEN_RING_RMON_MIB:SNMP_GROUP.Name=\"historyV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_RFC1271_MIB_historyControlTable";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description("A list of Ethernet history entries.\nAn historical sample of Ethernet statistics on a\n                  particular Ethernet interface.  This sample is\n                  associated with the historyControlEntry which set\n                  up the parameters for a regular collection of these\n                  samples."), module_name("RFC1271-MIB"), group_objectid("1.3.6.1.2.1.16.2"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_RFC1271_MIB_etherHistoryTable : SnmpObjectType
{
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.2.2.1.12"), read, description("The total number of packets received during this\n                  sampling interval that were not an integral\n                  number of octets in length or that\n                  had a bad Frame Check Sequence (FCS), and\n                  were less than 64 octets in length (excluding\n                  framing bits but including FCS octets)."), status("mandatory")] uint32 etherHistoryFragments;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.2.2.1.4"), read, description("The total number of events in which packets\n                  were dropped by the probe due to lack of resources\n                  during this interval.  Note that this number is not\n                  necessarily the number of packets dropped, it is just\n                  the number of times this condition has been detected."), status("mandatory")] uint32 etherHistoryDropEvents;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.2.2.1.14"), read, description("The best estimate of the total number of collisions\n                  on this Ethernet segment during this interval."), status("mandatory")] uint32 etherHistoryCollisions;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.16.2.2.1.2"), read, description("An index that uniquely identifies the particular\n                  sample this entry represents among all samples\n                  associated with the same historyControlEntry.\n                  This index starts at 1 and increases by one\n                  as each new sample is taken."), status("mandatory"), key, key_order(2)] sint32 etherHistorySampleIndex;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..10000"), object_identifier("1.3.6.1.2.1.16.2.2.1.15"), read, description("The best estimate of the mean physical layer\n                  network utilization on this interface during this\n                  interval, in hundredths of a percent."), status("mandatory")] sint32 etherHistoryUtilization;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.2.2.1.11"), read, description("The number of packets received during this\n                  interval that were longer than 1518 octets\n                  (excluding framing bits but including FCS\n                  octets) but were otherwise well formed."), status("mandatory")] uint32 etherHistoryOversizePkts;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.2.2.1.7"), read, description("The number of good packets received during this\n                  sampling interval that were directed to the\n                  broadcast address."), status("mandatory")] uint32 etherHistoryBroadcastPkts;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.2.2.1.9"), read, description("The number of packets received during this\n                  sampling interval that had a length (excluding\n                  framing bits but including FCS octets) between\n                  64 and 1518 octets, inclusive, but were not an\n                  integral number of octets in length or had a\n                  bad Frame Check Sequence (FCS)."), status("mandatory")] uint32 etherHistoryCRCAlignErrors;
	[textual_convention("TimeTicks"), encoding("TimeTicks"), object_syntax("TimeTicks"), object_identifier("1.3.6.1.2.1.16.2.2.1.3"), read, description("The value of sysUpTime at the start of the interval\n                  over which this sample was measured.  If the probe\n                  keeps track of the time of day, it should start\n                  the first sample of the history at a time such that\n                  when the next hour of the day begins, a sample is\n                  started at that instant.  Note that following this\n                  rule may require the probe to delay collecting the\n                  first sample of the history, as each sample must be\n                  of the same interval.  Also note that the sample which\n                  is currently being collected is not accessible in this\n                  table until the end of its interval."), status("mandatory")] uint32 etherHistoryIntervalStart;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.2.2.1.8"), read, description("The number of good packets received during this\n                  sampling interval that were directed to a\n                  multicast address.  Note that this number does not\n                  include packets addressed to the broadcast address."), status("mandatory")] uint32 etherHistoryMulticastPkts;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.2.2.1.10"), read, description("The number of packets received during this\n                  interval that were less than 64 octets long\n                  (excluding framing bits but including FCS\n                  octets) and were otherwise well formed."), status("mandatory")] uint32 etherHistoryUndersizePkts;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.2.2.1.6"), read, description("The number of packets (including error packets)\n                  received during this sampling interval."), status("mandatory")] uint32 etherHistoryPkts;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.16.2.2.1.1"), read, description("The history of which this entry is a part.  The\n                  history identified by a particular value of this\n                  index is the same history as identified\n                  by the same value of historyControlIndex."), status("mandatory"), key, key_order(1)] sint32 etherHistoryIndex;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.2.2.1.5"), read, description("The total number of octets of data (including\n\n\n\n\n\n                  those in bad packets) received on the\n                  network (excluding framing bits but including\n                  FCS octets)."), status("mandatory")] uint32 etherHistoryOctets;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.2.2.1.13"), read, description("The number of packets received during this\n                  interval that were longer than 1518 octets\n                  (excluding framing bits but including FCS octets),\n                  and were not an integral number of octets in\n                  length or had a bad Frame Check Sequence (FCS)."), status("mandatory")] uint32 etherHistoryJabbers;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_RFC1271_MIB_etherHistoryTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"TOKEN_RING_RMON_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_RFC1271_MIB_etherHistoryTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_RFC1271_MIB_etherHistoryTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\TOKEN_RING_RMON_MIB:SNMP_GROUP.Name=\"historyV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_RFC1271_MIB_etherHistoryTable";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR\\TOKEN_RING_RMON_MIB")
instance of SNMP_GROUP
{
Name="statisticsV1ObjectGroup";
Group_Id="1.3.6.1.2.1.16.1";
Status="current";
Description="";
Reference="";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description("A list of promiscuous Token Ring statistics\n                      entries.\nA collection of promiscuous statistics kept for\n                      non-MAC packets on a particular Token Ring\n                      interface."), module_name("TOKEN-RING-RMON-MIB"), group_objectid("1.3.6.1.2.1.16.1"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_TOKEN_RING_RMON_MIB_tokenRingPStatsTable : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.16.1.3.1.1"), read, description("The value of this object uniquely identifies this\n                      tokenRingPStats entry."), status("mandatory"), key, key_order(1)] sint32 tokenRingPStatsIndex;
	[textual_convention("DisplayString"), encoding("OCTETSTRING"), object_syntax("OwnerString"), object_identifier("1.3.6.1.2.1.16.1.3.1.18"), read, write, description("The entity that configured this entry and is\n                      therefore using the resources assigned to it."), status("mandatory")] string tokenRingPStatsOwner;
	[textual_convention("EnumeratedINTEGER"), enumeration("valid(1),createRequest(2),underCreation(3),invalid(4)"), encoding("INTEGER"), object_syntax("EntryStatus"), object_identifier("1.3.6.1.2.1.16.1.3.1.19"), read, write, description("The status of this tokenRingPStats entry."), status("mandatory")] string tokenRingPStatsStatus;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.1.3.1.6"), read, description("The total number of good non-MAC frames received\n                      that were directed to an LLC broadcast address\n                      (0xFFFFFFFFFFFF or 0xC000FFFFFFFF)."), status("mandatory")] uint32 tokenRingPStatsDataBroadcastPkts;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.1.3.1.7"), read, description("The total number of good non-MAC frames received\n                      that were directed to a local or global multicast\n                      or functional address.  Note that this number does\n                      not include packets directed to the broadcast\n                      address."), status("mandatory")] uint32 tokenRingPStatsDataMulticastPkts;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.1.3.1.17"), read, description("The total number of good non-MAC frames received\n                      that were greater than 18000 octets in length,\n                      excluding framing bits but including FCS octets."), status("mandatory")] uint32 tokenRingPStatsDataPktsGreaterThan18000Octets;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.1.3.1.5"), read, description("The total number of non-MAC packets in good\n                      frames.  received."), status("mandatory")] uint32 tokenRingPStatsDataPkts;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.1.3.1.8"), read, description("The total number of good non-MAC frames received\n                      that were between 18 and 63 octets in length\n                      inclusive, excluding framing bits but including\n                      FCS octets."), status("mandatory")] uint32 tokenRingPStatsDataPkts18to63Octets;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.1.3.1.9"), read, description("The total number of good non-MAC frames received\n                      that were between 64 and 127 octets in length\n                      inclusive, excluding framing bits but including\n                      FCS octets."), status("mandatory")] uint32 tokenRingPStatsDataPkts64to127Octets;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.1.3.1.11"), read, description("The total number of good non-MAC frames received\n                      that were between 256 and 511 octets in length\n                      inclusive, excluding framing bits but including\n                      FCS octets."), status("mandatory")] uint32 tokenRingPStatsDataPkts256to511Octets;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.1.3.1.10"), read, description("The total number of good non-MAC frames received\n                      that were between 128 and 255 octets in length\n                      inclusive, excluding framing bits but including\n                      FCS octets."), status("mandatory")] uint32 tokenRingPStatsDataPkts128to255Octets;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.1.3.1.12"), read, description("The total number of good non-MAC frames received\n                      that were between 512 and 1023 octets in length\n                      inclusive, excluding framing bits but including\n                      FCS octets."), status("mandatory")] uint32 tokenRingPStatsDataPkts512to1023Octets;
	[textual_convention("OBJECTIDENTIFIER"), encoding("OBJECTIDENTIFIER"), object_syntax("OBJECTIDENTIFIER"), object_identifier("1.3.6.1.2.1.16.1.3.1.2"), read, write, description("This object identifies the source of the data\n                      that this tokenRingPStats entry is configured to\n                      analyze.  This source can be any tokenRing\n                      interface on this device.  In order to identify a\n                      particular interface, this object shall identify\n                      the instance of the ifIndex object, defined in\n                      MIB-II [3], for the desired interface.  For\n                      example, if an entry were to receive data from\n                      interface #1, this object would be set to\n                      ifIndex.1.\n\n                      The statistics in this group reflect all non-MAC\n                      packets on the local network segment attached to\n                      the identified interface.\n\n                      This object may not be modified if the associated\n                      tokenRingPStatsStatus object is equal to\n                      valid(1)."), status("mandatory")] string tokenRingPStatsDataSource;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.1.3.1.4"), read, description("The total number of octets of data in good frames\n                      received on the network (excluding framing bits\n                      but including FCS octets) in non-MAC packets."), status("mandatory")] uint32 tokenRingPStatsDataOctets;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.1.3.1.3"), read, description("The total number of events in which packets were\n                      dropped by the probe due to lack of resources.\n                      Note that this number is not necessarily the\n                      number of packets dropped; it is just the number\n                      of times this condition has been detected.  This\n                      value is the same as the corresponding\n                      tokenRingMLStatsDropEvents"), status("mandatory")] uint32 tokenRingPStatsDropEvents;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.1.3.1.13"), read, description("The total number of good non-MAC frames received\n                      that were between 1024 and 2047 octets in length\n                      inclusive, excluding framing bits but including\n                      FCS octets."), status("mandatory")] uint32 tokenRingPStatsDataPkts1024to2047Octets;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.1.3.1.14"), read, description("The total number of good non-MAC frames received\n                      that were between 2048 and 4095 octets in length\n                      inclusive, excluding framing bits but including\n                      FCS octets."), status("mandatory")] uint32 tokenRingPStatsDataPkts2048to4095Octets;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.1.3.1.15"), read, description("The total number of good non-MAC frames received\n                      that were between 4096 and 8191 octets in length\n                      inclusive, excluding framing bits but including\n                      FCS octets."), status("mandatory")] uint32 tokenRingPStatsDataPkts4096to8191Octets;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.1.3.1.16"), read, description("The total number of good non-MAC frames received\n                      that were between 8192 and 18000 octets in length\n                      inclusive, excluding framing bits but including\n                      FCS octets."), status("mandatory")] uint32 tokenRingPStatsDataPkts8192to18000Octets;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_TOKEN_RING_RMON_MIB_tokenRingPStatsTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"TOKEN_RING_RMON_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_TOKEN_RING_RMON_MIB_tokenRingPStatsTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_TOKEN_RING_RMON_MIB_tokenRingPStatsTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\TOKEN_RING_RMON_MIB:SNMP_GROUP.Name=\"statisticsV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_TOKEN_RING_RMON_MIB_tokenRingPStatsTable";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description("A list of Mac-Layer Token Ring statistics\n\n\n\n\n\n                      entries.\nA collection of Mac-Layer statistics kept for a\n                      particular Token Ring interface."), module_name("TOKEN-RING-RMON-MIB"), group_objectid("1.3.6.1.2.1.16.1"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_TOKEN_RING_RMON_MIB_tokenRingMLStatsTable : SnmpObjectType
{
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.1.2.1.12"), read, description("The total number of claim token MAC packets\n                      detected by the probe."), status("mandatory")] uint32 tokenRingMLStatsClaimTokenPkts;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.1.2.1.25"), read, description("The total number of ring poll events detected by\n                      the probe (i.e. the number of ring polls initiated\n                      by the active monitor that were detected)."), status("mandatory")] uint32 tokenRingMLStatsRingPollEvents;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.1.2.1.15"), read, description("The total number of adapter internal errors\n                      reported in error reporting packets detected by\n                      the probe."), status("mandatory")] uint32 tokenRingMLStatsInternalErrors;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.16.1.2.1.1"), read, description("The value of this object uniquely identifies this\n                      tokenRingMLStats entry."), status("mandatory"), key, key_order(1)] sint32 tokenRingMLStatsIndex;
	[textual_convention("DisplayString"), encoding("OCTETSTRING"), object_syntax("OwnerString"), object_identifier("1.3.6.1.2.1.16.1.2.1.26"), read, write, description("The entity that configured this entry and is\n                      therefore using the resources assigned to it."), status("mandatory")] string tokenRingMLStatsOwner;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.1.2.1.6"), read, description("The total number of times that the ring enters\n                      the ring purge state from normal ring state.  The\n                      ring purge state that comes in response to the\n                      claim token or beacon state is not counted."), status("mandatory")] uint32 tokenRingMLStatsRingPurgeEvents;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.1.2.1.19"), read, description("The total number of lost frame errors reported in\n                      error reporting packets detected by the probe."), status("mandatory")] uint32 tokenRingMLStatsLostFrameErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.1.2.1.22"), read, description("The total number of frequency errors reported in\n                      error reporting packets detected by the probe."), status("mandatory")] uint32 tokenRingMLStatsFrequencyErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.1.2.1.11"), read, description("The total number of times that the ring enters\n                      the claim token state from normal ring state or\n                      ring purge state.  The claim token state that\n                      comes in response to a beacon state is not\n                      counted."), status("mandatory")] uint32 tokenRingMLStatsClaimTokenEvents;
	[textual_convention("EnumeratedINTEGER"), enumeration("valid(1),createRequest(2),underCreation(3),invalid(4)"), encoding("INTEGER"), object_syntax("EntryStatus"), object_identifier("1.3.6.1.2.1.16.1.2.1.27"), read, write, description("The status of this tokenRingMLStats entry."), status("mandatory")] string tokenRingMLStatsStatus;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.1.2.1.24"), read, description("The total number of soft error report frames\n                      detected by the probe."), status("mandatory")] uint32 tokenRingMLStatsSoftErrorReports;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.1.2.1.20"), read, description("The total number of receive congestion errors\n                      reported in error reporting packets detected by\n                      the probe."), status("mandatory")] uint32 tokenRingMLStatsCongestionErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.1.2.1.5"), read, description("The total number of MAC packets (excluding\n                      packets that were not good frames) received."), status("mandatory")] uint32 tokenRingMLStatsMacPkts;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.1.2.1.21"), read, description("The total number of frame copied errors reported\n                      in error reporting packets detected by the probe."), status("mandatory")] uint32 tokenRingMLStatsFrameCopiedErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.1.2.1.17"), read, description("The total number of AC (Address Copied)  errors\n                      reported in error reporting packets detected by\n                      the probe."), status("mandatory")] uint32 tokenRingMLStatsACErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.1.2.1.4"), read, description("The total number of octets of data in MAC packets\n                      (excluding those that were not good frames)\n                      received on the network (excluding framing bits\n                      but including FCS octets)."), status("mandatory")] uint32 tokenRingMLStatsMacOctets;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("TimeInterval"), variable_value("0..2147483647"), object_identifier("1.3.6.1.2.1.16.1.2.1.9"), read, description("The total amount of time that the ring has been\n                      in the beaconing state."), status("mandatory")] sint32 tokenRingMLStatsBeaconTime;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.1.2.1.10"), read, description("The total number of beacon MAC packets detected\n                      by the probe."), status("mandatory")] uint32 tokenRingMLStatsBeaconPkts;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.1.2.1.13"), read, description("The total number of NAUN changes detected by the\n                      probe."), status("mandatory")] uint32 tokenRingMLStatsNAUNChanges;
	[textual_convention("OBJECTIDENTIFIER"), encoding("OBJECTIDENTIFIER"), object_syntax("OBJECTIDENTIFIER"), object_identifier("1.3.6.1.2.1.16.1.2.1.2"), read, write, description("This object identifies the source of the data\n                      that this tokenRingMLStats entry is configured to\n                      analyze.  This source can be any tokenRing\n                      interface on this device.  In order to identify a\n                      particular interface, this object shall identify\n                      the instance of the ifIndex object, defined in\n                      MIB-II [3], for the desired interface.  For\n                      example, if an entry were to receive data from\n                      interface #1, this object would be set to\n                      ifIndex.1.\n\n                      The statistics in this group reflect all error\n                      reports on the local network segment attached to\n                      the identified interface.\n\n                      This object may not be modified if the associated\n                      tokenRingMLStatsStatus object is equal to\n                      valid(1)."), status("mandatory")] string tokenRingMLStatsDataSource;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.1.2.1.14"), read, description("The total number of line errors reported in error\n                      reporting packets detected by the probe."), status("mandatory")] uint32 tokenRingMLStatsLineErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.1.2.1.3"), read, description("The total number of events in which packets were\n                      dropped by the probe due to lack of resources.\n                      Note that this number is not necessarily the\n                      number of packets dropped; it is just the number\n                      of times this condition has been detected.  This\n                      value is the same as the corresponding\n                      tokenRingPStatsDropEvents."), status("mandatory")] uint32 tokenRingMLStatsDropEvents;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.1.2.1.18"), read, description("The total number of abort delimiters reported in\n                      error reporting packets detected by the probe."), status("mandatory")] uint32 tokenRingMLStatsAbortErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.1.2.1.23"), read, description("The total number of token errors reported in\n                      error reporting packets detected by the probe."), status("mandatory")] uint32 tokenRingMLStatsTokenErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.1.2.1.16"), read, description("The total number of burst errors reported in\n                      error reporting packets detected by the probe."), status("mandatory")] uint32 tokenRingMLStatsBurstErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.1.2.1.8"), read, description("The total number of times that the ring enters a\n                      beaconing state (beaconFrameStreamingState,\n                      beaconBitStreamingState,\n\n\n\n\n\n                      beaconSetRecoveryModeState, or\n                      beaconRingSignalLossState) from a non-beaconing\n                      state.  Note that a change of the source address\n                      of the beacon packet does not constitute a new\n                      beacon event."), status("mandatory")] uint32 tokenRingMLStatsBeaconEvents;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.1.2.1.7"), read, description("The total number of ring purge MAC packets\n                      detected by probe."), status("mandatory")] uint32 tokenRingMLStatsRingPurgePkts;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_TOKEN_RING_RMON_MIB_tokenRingMLStatsTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"TOKEN_RING_RMON_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_TOKEN_RING_RMON_MIB_tokenRingMLStatsTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_TOKEN_RING_RMON_MIB_tokenRingMLStatsTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\TOKEN_RING_RMON_MIB:SNMP_GROUP.Name=\"statisticsV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_TOKEN_RING_RMON_MIB_tokenRingMLStatsTable";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description("A list of Ethernet statistics entries.\nA collection of statistics kept for a particular\n                  Ethernet interface."), module_name("RFC1271-MIB"), group_objectid("1.3.6.1.2.1.16.1"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_RFC1271_MIB_etherStatsTable : SnmpObjectType
{
	[textual_convention("OBJECTIDENTIFIER"), encoding("OBJECTIDENTIFIER"), object_syntax("OBJECTIDENTIFIER"), object_identifier("1.3.6.1.2.1.16.1.1.1.2"), read, write, description("This object identifies the source of the data that\n                  this etherStats entry is configured to analyze.  This\n                  source can be any ethernet interface on this device.\n                  In order to identify a particular interface, this\n                  object shall identify the instance of the ifIndex\n                  object, defined in [4,6], for the desired interface.\n                  For example, if an entry were to receive data from\n                  interface #1, this object would be set to ifIndex.1.\n\n                  The statistics in this group reflect all packets\n                  on the local network segment attached to the\n                  identified interface.\n\n                  This object may not be modified if the associated\n                  etherStatsStatus object is equal to valid(1)."), status("mandatory")] string etherStatsDataSource;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.1.1.1.3"), read, description("The total number of events in which packets\n                  were dropped by the probe due to lack of resources.\n                  Note that this number is not necessarily the number of\n                  packets dropped; it is just the number of times this\n                  condition has been detected."), status("mandatory")] uint32 etherStatsDropEvents;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.1.1.1.13"), read, description("The best estimate of the total number of collisions\n                  on this Ethernet segment."), status("mandatory")] uint32 etherStatsCollisions;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.1.1.1.14"), read, description("The total number of packets (including error\n                  packets) received that were 64 octets in length\n                  (excluding framing bits but including FCS octets)."), status("mandatory")] uint32 etherStatsPkts64Octets;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.1.1.1.10"), read, description("The total number of packets received that were\n                  longer than 1518 octets (excluding framing bits,\n                  but including FCS octets) and were otherwise\n                  well formed."), status("mandatory")] uint32 etherStatsOversizePkts;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.1.1.1.6"), read, description("The total number of good packets received that were\n                  directed to the broadcast address."), status("mandatory")] uint32 etherStatsBroadcastPkts;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.1.1.1.8"), read, description("The total number of packets received that\n                  had a length (excluding framing bits, but\n                  including FCS octets) of between 64 and 1518\n                  octets, inclusive, but were not an integral number\n                  of octets in length or had a bad Frame Check\n                  Sequence (FCS)."), status("mandatory")] uint32 etherStatsCRCAlignErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.1.1.1.7"), read, description("The total number of good packets received that were\n                  directed to a multicast address.  Note that this\n                  number does not include packets directed to the\n                  broadcast address."), status("mandatory")] uint32 etherStatsMulticastPkts;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.1.1.1.9"), read, description("The total number of packets received that were\n                  less than 64 octets long (excluding framing bits,\n                  but including FCS octets) and were otherwise well\n                  formed."), status("mandatory")] uint32 etherStatsUndersizePkts;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.1.1.1.5"), read, description("The total number of packets (including error packets)\n                  received."), status("mandatory")] uint32 etherStatsPkts;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.16.1.1.1.1"), read, description("The value of this object uniquely identifies this\n                  etherStats entry."), status("mandatory"), key, key_order(1)] sint32 etherStatsIndex;
	[textual_convention("DisplayString"), encoding("OCTETSTRING"), object_syntax("OwnerString"), object_identifier("1.3.6.1.2.1.16.1.1.1.20"), read, write, description("The entity that configured this entry and is\n                  therefore using the resources assigned to it."), status("mandatory")] string etherStatsOwner;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.1.1.1.15"), read, description("The total number of packets (including error\n                  packets) received that were between\n                  65 and 127 octets in length inclusive\n                  (excluding framing bits but including FCS octets)."), status("mandatory")] uint32 etherStatsPkts65to127Octets;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.1.1.1.17"), read, description("The total number of packets (including error\n                  packets) received that were between\n                  256 and 511 octets in length inclusive\n                  (excluding framing bits but including FCS octets)."), status("mandatory")] uint32 etherStatsPkts256to511Octets;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.1.1.1.16"), read, description("The total number of packets (including error\n                  packets) received that were between\n                  128 and 255 octets in length inclusive\n                  (excluding framing bits but including FCS octets)."), status("mandatory")] uint32 etherStatsPkts128to255Octets;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.1.1.1.18"), read, description("The total number of packets (including error\n                  packets) received that were between\n                  512 and 1023 octets in length inclusive\n                  (excluding framing bits but including FCS octets)."), status("mandatory")] uint32 etherStatsPkts512to1023Octets;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.1.1.1.4"), read, description("The total number of octets of data (including\n                  those in bad packets) received on the\n                  network (excluding framing bits but including\n                  FCS octets)."), status("mandatory")] uint32 etherStatsOctets;
	[textual_convention("EnumeratedINTEGER"), enumeration("valid(1),createRequest(2),underCreation(3),invalid(4)"), encoding("INTEGER"), object_syntax("EntryStatus"), object_identifier("1.3.6.1.2.1.16.1.1.1.21"), read, write, description("The status of this etherStats entry."), status("mandatory")] string etherStatsStatus;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.1.1.1.19"), read, description("The total number of packets (including error\n                  packets) received that were between\n                  1024 and 1518 octets in length inclusive\n                  (excluding framing bits but including FCS octets)."), status("mandatory")] uint32 etherStatsPkts1024to1518Octets;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.1.1.1.12"), read, description("The total number of packets received that were\n                  longer than 1518 octets (excluding framing bits,\n                  but including FCS octets), and were not an\n                  integral number of octets in length or had\n                  a bad Frame Check Sequence (FCS)."), status("mandatory")] uint32 etherStatsJabbers;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.1.1.1.11"), read, description("The total number of packets received that were not an\n                  integral number of octets in length or that had a bad\n                  Frame Check Sequence (FCS), and were less than 64\n                  octets in length (excluding framing bits but\n                  including FCS octets)."), status("mandatory")] uint32 etherStatsFragments;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_RFC1271_MIB_etherStatsTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"TOKEN_RING_RMON_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_RFC1271_MIB_etherStatsTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_RFC1271_MIB_etherStatsTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\TOKEN_RING_RMON_MIB:SNMP_GROUP.Name=\"statisticsV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_RFC1271_MIB_etherStatsTable";
};


