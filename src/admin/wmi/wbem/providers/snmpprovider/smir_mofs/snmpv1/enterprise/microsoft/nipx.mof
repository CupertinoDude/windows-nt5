// Copyright (c) 1997-2001 Microsoft Corporation, All Rights Reserved
//	MOF Generated for module "IPX" by smi2smir version 1.00.456.0000
qualifier textual_convention:ToInstance ToSubClass;
qualifier object_identifier:ToInstance ToSubClass;
qualifier encoding:ToInstance ToSubClass;
qualifier object_syntax:ToInstance ToSubClass;
qualifier status:ToInstance ToSubClass;
qualifier fixed_length:ToInstance ToSubClass;
qualifier variable_length:ToInstance ToSubClass;
qualifier variable_value:ToInstance ToSubClass;
qualifier bits:ToInstance ToSubClass;
qualifier enumeration:ToInstance ToSubClass;
qualifier bits:ToInstance ToSubClass;
qualifier description:ToInstance ToSubClass;
qualifier display_hint:ToInstance ToSubClass;
qualifier defval:ToInstance ToSubClass;
qualifier units:ToInstance ToSubClass;
qualifier reference:ToInstance ToSubClass;
qualifier virtual_key:ToInstance ToSubClass;
qualifier rowstatus:ToInstance ToSubClass;
qualifier module_name:ToInstance ToSubClass;
qualifier module_imports:ToInstance ToSubClass;
qualifier group_objectid:ToInstance ToSubClass;

#pragma namespace("\\\\.\\root\\default")
class SMIR:__namespace
{
[read] string Name="SMIR";
};

instance of SMIR
{
};

#pragma namespace("\\\\.\\root\\default\\SMIR")
[abstract]
class SnmpMacro
{
};

[abstract]
class SnmpObjectType:SnmpMacro
{
};

class SnmpNotifyStatus:__ExtendedStatus
{
[write] sint32 SnmpStatusCode;
[write] string Description;
};

class SnmpNotification:__ExtrinsicEvent
{
[textual_convention("TimeTicks"):ToInstance ToSubClass DisableOverride,encoding("TimeTicks"):ToInstance ToSubClass DisableOverride,object_syntax("TimeTicks"):ToInstance ToSubClass DisableOverride,read,object_identifier("1.3.6.1.2.1.1.3"):ToInstance ToSubClass DisableOverride,description("The time (in hundredths of a second) since the network management portion of the agent was last re-initialized."):ToInstance ToSubClass DisableOverride] uint32 TimeStamp;
[textual_convention("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, encoding("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, object_syntax("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, read, object_identifier("1.3.6.1.6.3.1.1.4.1"):ToInstance ToSubClass DisableOverride,description("The authoratative identification of this notification."):ToInstance ToSubClass DisableOverride] string Identification;
[read, description("The network address of the entity that created this notification."):ToInstance ToSubClass DisableOverride] string AgentAddress;
[read, description("The network address of the entity that sent this notification. This may be a proxy for the original entity."):ToInstance ToSubClass DisableOverride] string AgentTransportAddress;
[read, description("The transport protocol used by the sending entity."):ToInstance ToSubClass DisableOverride] string AgentTransportProtocol;
[read, description("The security context used to send this notification."):ToInstance ToSubClass DisableOverride] string Community;
};

class SnmpExtendedNotification:__ExtrinsicEvent
{
[textual_convention("TimeTicks"):ToInstance ToSubClass DisableOverride,encoding("TimeTicks"):ToInstance ToSubClass DisableOverride,object_syntax("TimeTicks"):ToInstance ToSubClass DisableOverride,read,object_identifier("1.3.6.1.2.1.1.3"):ToInstance ToSubClass DisableOverride,description("The time (in hundredths of a second) since the network management portion of the agent was last re-initialized."):ToInstance ToSubClass DisableOverride] uint32 TimeStamp;
[textual_convention("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, encoding("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, object_syntax("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, read, object_identifier("1.3.6.1.6.3.1.1.4.1"):ToInstance ToSubClass DisableOverride,description("The authoratative identification of this notification."):ToInstance ToSubClass DisableOverride] string Identification;
[read, description("The network address of the entity that created this notification."):ToInstance ToSubClass DisableOverride] string AgentAddress;
[read, description("The network address of the entity that sent this notification. This may be a proxy for the original entity."):ToInstance ToSubClass DisableOverride] string AgentTransportAddress;
[read, description("The transport protocol used by the sending entity."):ToInstance ToSubClass DisableOverride] string AgentTransportProtocol;
[read, description("The security context used to send this notification."):ToInstance ToSubClass DisableOverride] string Community;
};

class NotificationMapper
{
[read, key] string SnmpTrapOID;
[read] string EventClassName;
};

class ExtendedNotificationMapper
{
[read, key] string SnmpTrapOID;
[read] string EventClassName;
};

class SNMP_MODULE:__namespace
{
[read] string Name;
[read] string Module_Oid;
[read] string Module_Identity;
[read] string Organization;
[read] string Contact_Inf;
[read] string Description;
[read] string Object_Identity;
[read] string Revision;
[read] string Last_Updated;
[read] sint32 Snmp_Version;
[read] string Module_Imports;
};

[assoc]
class ModuleToClassAssociator
{
[read, key] string AssocName;
[read] object ref SmirClass;
[read] object ref SmirModule;
};

[assoc]
class GroupToClassAssociator
{
[read, key] string AssocName;
[read] object ref SmirClass;
[read] object ref SmirGroup;
};

[assoc]
class ModToNotificationClassAssociator
{
[read, key] string AssocName;
[read] object ref SmirClass;
[read] object ref SmirModule;
};

[assoc]
class ModToExtNotificationClassAssociator
{
[read, key] string AssocName;
[read] object ref SmirClass;
[read] object ref SmirModule;
};

#pragma namespace("\\\\.\\root\\default\\SMIR")
instance of SNMP_MODULE
{
Name="IPX";
Module_Oid="1.3.6.1.4.1.23.2.5.4";
Module_Identity="ipxV1ModuleIdentity";
Organization="";
Contact_Inf="";
Description="IPX";
Object_Identity="";
Revision="";
Last_Updated="0000000000Z";
Snmp_Version=1;
Module_Imports="RFC1155-SMI,RFC-1212";
};

#pragma namespace("\\\\.\\root\\default\\SMIR\\IPX")
class SNMP_GROUP:__namespace
{
[read] string Name;
[read] string Group_Id;
[read] string Status;
[read] string Description;
[read] string Reference;
};

#pragma namespace("\\\\.\\root\\default\\SMIR\\IPX")
instance of SNMP_GROUP
{
Name="ipxServicesV1ObjectGroup";
Group_Id="1.3.6.1.4.1.23.2.5.4";
Status="current";
Description="";
Reference="";
};

#pragma namespace("\\\\.\\root\\default\\SMIR")
[description("The table of services, indexed by address, name,\n\t\t\t\tand type.\nEach entry corresponds to one service."), module_name("IPX"), group_objectid("1.3.6.1.4.1.23.2.5.4"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_IPX_ipxDestServTable : SnmpObjectType
{
	[textual_convention("EnumeratedINTEGER"), enumeration("other(1),local(2),nlsp(4),static(5),sap(6)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.4.1.23.2.5.4.2.1.7"), read, description("The protocol from which knowledge of this service was\n\t\t\t\tobtained."), status("mandatory")] string ipxDestServProtocol = "other";
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.4.1.23.2.5.4.2.1.1"), read, description("The unique identifier of the instance of IPX\n\t\t\t\tto which this entry corresponds."), status("mandatory"), key, key_order(1)] sint32 ipxDestServSysInstance = 0;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("OCTETSTRING"), variable_length("1..48"), object_identifier("1.3.6.1.4.1.23.2.5.4.2.1.5"), read, description("The service name."), status("mandatory"), key, key_order(5)] string ipxDestServName = "";
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("OCTETSTRING"), fixed_length(6), object_identifier("1.3.6.1.4.1.23.2.5.4.2.1.3"), read, description("The node portion of the IPX address of the service."), status("mandatory"), key, key_order(3)] string ipxDestServNode = "";
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("OCTETSTRING"), fixed_length(2), object_identifier("1.3.6.1.4.1.23.2.5.4.2.1.6"), read, description("The service type."), status("mandatory"), key, key_order(6)] string ipxDestServType = "";
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("NetNumber"), fixed_length(4), object_identifier("1.3.6.1.4.1.23.2.5.4.2.1.2"), read, description("The IPX network number portion of the IPX address of the\n\t\t\t\tservice."), status("mandatory"), key, key_order(2)] string ipxDestServNetNum = "";
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("OCTETSTRING"), fixed_length(2), object_identifier("1.3.6.1.4.1.23.2.5.4.2.1.4"), read, description("The socket portion of the IPX address of the service."), status("mandatory"), key, key_order(4)] string ipxDestServSocket = "";
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.4.1.23.2.5.4.2.1.8"), read, description("The number of hops to the service."), status("mandatory")] sint32 ipxDestServHopCount = 0;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_IPX_ipxDestServTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\default\\SMIR:SNMP_MODULE.Name=\"IPX\"";
SmirClass="\\\\.\\root\\default\\SMIR:SNMP_IPX_ipxDestServTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_IPX_ipxDestServTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\default\\SMIR\\IPX:SNMP_GROUP.Name=\"ipxServicesV1ObjectGroup\"";
SmirClass="\\\\.\\root\\default\\SMIR:SNMP_IPX_ipxDestServTable";
};

#pragma namespace("\\\\.\\root\\default\\SMIR")
[description("The table of services, indexed by name and type.\nEach entry corresponds to one service."), module_name("IPX"), group_objectid("1.3.6.1.4.1.23.2.5.4"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_IPX_ipxServTable : SnmpObjectType
{
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("OCTETSTRING"), variable_length("1..48"), object_identifier("1.3.6.1.4.1.23.2.5.4.1.1.3"), read, description("The service name."), status("mandatory"), key, key_order(3)] string ipxServName = "";
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("OCTETSTRING"), fixed_length(6), object_identifier("1.3.6.1.4.1.23.2.5.4.1.1.6"), read, description("The node portion of the IPX address of the service."), status("mandatory")] string ipxServNode = "";
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("OCTETSTRING"), fixed_length(2), object_identifier("1.3.6.1.4.1.23.2.5.4.1.1.2"), read, description("The service type."), status("mandatory"), key, key_order(2)] string ipxServType = "";
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("NetNumber"), fixed_length(4), object_identifier("1.3.6.1.4.1.23.2.5.4.1.1.5"), read, description("The IPX network number portion of the IPX address of the\n\t\t\t\tservice."), status("mandatory")] string ipxServNetNum = "";
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("OCTETSTRING"), fixed_length(2), object_identifier("1.3.6.1.4.1.23.2.5.4.1.1.7"), read, description("The socket portion of the IPX address of the service."), status("mandatory")] string ipxServSocket = "";
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.4.1.23.2.5.4.1.1.8"), read, description("The number of hops to the service."), status("mandatory")] sint32 ipxServHopCount = 0;
	[textual_convention("EnumeratedINTEGER"), enumeration("other(1),local(2),nlsp(4),static(5),sap(6)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.4.1.23.2.5.4.1.1.4"), read, description("The protocol from which knowledge of this service was\n\t\t\t\tobtained."), status("mandatory")] string ipxServProtocol = "other";
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.4.1.23.2.5.4.1.1.1"), read, description("The unique identifier of the instance of IPX\n\t\t\t\tto which this entry corresponds."), status("mandatory"), key, key_order(1)] sint32 ipxServSysInstance = 0;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_IPX_ipxServTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\default\\SMIR:SNMP_MODULE.Name=\"IPX\"";
SmirClass="\\\\.\\root\\default\\SMIR:SNMP_IPX_ipxServTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_IPX_ipxServTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\default\\SMIR\\IPX:SNMP_GROUP.Name=\"ipxServicesV1ObjectGroup\"";
SmirClass="\\\\.\\root\\default\\SMIR:SNMP_IPX_ipxServTable";
};

#pragma namespace("\\\\.\\root\\default\\SMIR")
[description("The Static Services table contains information about\n\t\t\t\tall services reached via statically configured routes.\nEach entry corresponds to one service."), module_name("IPX"), group_objectid("1.3.6.1.4.1.23.2.5.4"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_IPX_ipxStaticServTable : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.4.1.23.2.5.4.3.1.9"), read, write, description("The number of hops to the service."), status("mandatory")] sint32 ipxStaticServHopCount = 0;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.4.1.23.2.5.4.3.1.2"), read, write, description("The circuit used to reach this service."), status("mandatory"), key, key_order(2)] sint32 ipxStaticServCircIndex = 0;
	[textual_convention("EnumeratedINTEGER"), enumeration("off(1),on(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.4.1.23.2.5.4.3.1.5"), read, write, description("The validity of this static service.  Entries with the\n\t\t\t\tvalue set to off may be deleted from the table at the\n\t\t\t\timplementation's discretion."), status("mandatory")] string ipxStaticServExistState = "off";
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.4.1.23.2.5.4.3.1.1"), read, write, description("The unique identifier of the instance of IPX to which\n\t\t\t\tthis entry corresponds."), status("mandatory"), key, key_order(1)] sint32 ipxStaticServSysInstance = 0;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("OCTETSTRING"), variable_length("1..48"), object_identifier("1.3.6.1.4.1.23.2.5.4.3.1.3"), read, write, description("The service name."), status("mandatory"), key, key_order(3)] string ipxStaticServName = "";
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("OCTETSTRING"), fixed_length(6), object_identifier("1.3.6.1.4.1.23.2.5.4.3.1.7"), read, write, description("The node portion of the IPX address of the service."), status("mandatory")] string ipxStaticServNode = "";
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("OCTETSTRING"), fixed_length(2), object_identifier("1.3.6.1.4.1.23.2.5.4.3.1.4"), read, write, description("The service type."), status("mandatory"), key, key_order(4)] string ipxStaticServType = "";
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("NetNumber"), fixed_length(4), object_identifier("1.3.6.1.4.1.23.2.5.4.3.1.6"), read, write, description("The IPX network number portion of the IPX address of the\n\t\t\t\tservice."), status("mandatory")] string ipxStaticServNetNum = "";
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("OCTETSTRING"), fixed_length(2), object_identifier("1.3.6.1.4.1.23.2.5.4.3.1.8"), read, write, description("The socket portion of the IPX address of the service."), status("mandatory")] string ipxStaticServSocket = "";
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_IPX_ipxStaticServTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\default\\SMIR:SNMP_MODULE.Name=\"IPX\"";
SmirClass="\\\\.\\root\\default\\SMIR:SNMP_IPX_ipxStaticServTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_IPX_ipxStaticServTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\default\\SMIR\\IPX:SNMP_GROUP.Name=\"ipxServicesV1ObjectGroup\"";
SmirClass="\\\\.\\root\\default\\SMIR:SNMP_IPX_ipxStaticServTable";
};

#pragma namespace("\\\\.\\root\\default\\SMIR\\IPX")
instance of SNMP_GROUP
{
Name="ipxForwardingV1ObjectGroup";
Group_Id="1.3.6.1.4.1.23.2.5.3";
Status="current";
Description="";
Reference="";
};

#pragma namespace("\\\\.\\root\\default\\SMIR")
[description("The Static Routes table contains information about all\n\t\t\t\tdestinations reached via statically configured routes.\nEach entry corresponds to one static route."), module_name("IPX"), group_objectid("1.3.6.1.4.1.23.2.5.3"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_IPX_ipxStaticRouteTable : SnmpObjectType
{
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("NetNumber"), fixed_length(4), object_identifier("1.3.6.1.4.1.23.2.5.3.2.1.3"), read, write, description("The IPX network number of the route's destination."), status("mandatory"), key, key_order(3)] string ipxStaticRouteNetNum = "";
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.4.1.23.2.5.3.2.1.6"), read, write, description("The number of hops necessary to reach the destination."), status("mandatory")] sint32 ipxStaticRouteHopCount = 0;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.4.1.23.2.5.3.2.1.2"), read, write, description("The unique identifier of the circuit used to\n\t\t\t\treach the first hop in the static route."), status("mandatory"), key, key_order(2)] sint32 ipxStaticRouteCircIndex = 0;
	[textual_convention("EnumeratedINTEGER"), enumeration("off(1),on(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.4.1.23.2.5.3.2.1.4"), read, write, description("The validity of this static route.  Entries with the\n\t\t\t\tvalue set to off may be deleted from the table at the\n\t\t\t\timplementation's discretion."), status("mandatory")] string ipxStaticRouteExistState = "off";
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.4.1.23.2.5.3.2.1.1"), read, write, description("The unique identifier of the instance of IPX to\n\t\t\t\twhich this row corresponds."), status("mandatory"), key, key_order(1)] sint32 ipxStaticRouteSysInstance = 0;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.4.1.23.2.5.3.2.1.5"), read, write, description("The delay, in ticks, to reach the route's destination."), status("mandatory")] sint32 ipxStaticRouteTicks = 0;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_IPX_ipxStaticRouteTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\default\\SMIR:SNMP_MODULE.Name=\"IPX\"";
SmirClass="\\\\.\\root\\default\\SMIR:SNMP_IPX_ipxStaticRouteTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_IPX_ipxStaticRouteTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\default\\SMIR\\IPX:SNMP_GROUP.Name=\"ipxForwardingV1ObjectGroup\"";
SmirClass="\\\\.\\root\\default\\SMIR:SNMP_IPX_ipxStaticRouteTable";
};

#pragma namespace("\\\\.\\root\\default\\SMIR")
[description("The Destination table contains information about all\n\t\t\t\tknown destinations.\nEach entry corresponds to one destination."), module_name("IPX"), group_objectid("1.3.6.1.4.1.23.2.5.3"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_IPX_ipxDestTable : SnmpObjectType
{
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("NetNumber"), fixed_length(4), object_identifier("1.3.6.1.4.1.23.2.5.3.1.1.8"), read, description("The IPX network number of the next hop."), status("mandatory")] string ipxDestNextHopNetNum = "";
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.4.1.23.2.5.3.1.1.4"), read, description("The delay in ticks to reach this destination."), status("mandatory")] sint32 ipxDestTicks = 0;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.4.1.23.2.5.3.1.1.6"), read, description("The unique identifier of the circuit used to reach the \n\t\t\t\tnext hop."), status("mandatory")] sint32 ipxDestNextHopCircIndex = 0;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("NetNumber"), fixed_length(4), object_identifier("1.3.6.1.4.1.23.2.5.3.1.1.2"), read, description("The IPX network number of the destination."), status("mandatory"), key, key_order(2)] string ipxDestNetNum = "";
	[textual_convention("PhysAddress"), encoding("OCTETSTRING"), object_syntax("PhysAddress"), display_hint("1x:"), object_identifier("1.3.6.1.4.1.23.2.5.3.1.1.7"), read, description("The NIC address of the next hop."), status("mandatory")] string ipxDestNextHopNICAddress = "";
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.4.1.23.2.5.3.1.1.5"), read, description("The number of hops necessary to reach the destination."), status("mandatory")] sint32 ipxDestHopCount = 0;
	[textual_convention("EnumeratedINTEGER"), enumeration("other(1),local(2),rip(3),nlsp(4),static(5)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.4.1.23.2.5.3.1.1.3"), read, description("The routing protocol from which knowledge of this\n\t\t\t\tdestination was obtained."), status("mandatory")] string ipxDestProtocol = "other";
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.4.1.23.2.5.3.1.1.1"), read, description("The unique identifier of the instance of IPX\n\t\t\t\tto which this row corresponds."), status("mandatory"), key, key_order(1)] sint32 ipxDestSysInstance = 0;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_IPX_ipxDestTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\default\\SMIR:SNMP_MODULE.Name=\"IPX\"";
SmirClass="\\\\.\\root\\default\\SMIR:SNMP_IPX_ipxDestTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_IPX_ipxDestTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\default\\SMIR\\IPX:SNMP_GROUP.Name=\"ipxForwardingV1ObjectGroup\"";
SmirClass="\\\\.\\root\\default\\SMIR:SNMP_IPX_ipxDestTable";
};

#pragma namespace("\\\\.\\root\\default\\SMIR\\IPX")
instance of SNMP_GROUP
{
Name="ipxSystemV1ObjectGroup";
Group_Id="1.3.6.1.4.1.23.2.5.1";
Status="current";
Description="";
Reference="";
};

#pragma namespace("\\\\.\\root\\default\\SMIR")
[description("The IPX System table - basic information.\nEach entry corresponds to one instance of IPX running\n\t\t\t\ton the system."), module_name("IPX"), group_objectid("1.3.6.1.4.1.23.2.5.1"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_IPX_ipxBasicSysTable : SnmpObjectType
{
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("NetNumber"), fixed_length(4), object_identifier("1.3.6.1.4.1.23.2.5.1.1.1.3"), read, write, description("The network number portion of the IPX address of this\n\t\t\t\tsystem."), status("mandatory")] string ipxBasicSysNetNumber = "";
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.4.1.23.2.5.1.1.1.9"), read, description("The number of IPX packets received but discarded due to\n\t\t\t\treasons other than those accounted for by \n\t\t\t\tipxBasicSysInHdrErrors, ipxBasicSysInUnknownSockets,\n\t\t\t\tipxAdvSysInDiscards, and ipxAdvSysInCompressDiscards."), status("mandatory")] uint32 ipxBasicSysInDiscards = 0;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.4.1.23.2.5.1.1.1.6"), read, description("The total number of IPX packets received, including\n\t\t\t\tthose received in error."), status("mandatory")] uint32 ipxBasicSysInReceives = 0;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.4.1.23.2.5.1.1.1.11"), read, description("The total number of IPX packets delivered locally,\n\t\t\t\tincluding packets from local applications."), status("mandatory")] uint32 ipxBasicSysInDelivers = 0;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.4.1.23.2.5.1.1.1.16"), read, description("The total number of IPX packets transmitted."), status("mandatory")] uint32 ipxBasicSysOutPackets = 0;
	[textual_convention("EnumeratedINTEGER"), enumeration("off(1),on(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.4.1.23.2.5.1.1.1.2"), read, write, description("The validity of this entry in the IPX system table.\n\t\t\t\tSetting this field to off indicates that this entry may be\n\t\t\t\tdeleted from the system table at the IPX implementation's\n\t\t\t\tdiscretion."), status("mandatory")] string ipxBasicSysExistState = "off";
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.4.1.23.2.5.1.1.1.14"), read, description("The number of IPX packets supplied locally that contained\n\t\t\t\terrors in their structure."), status("mandatory")] uint32 ipxBasicSysOutMalformedRequests = 0;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.4.1.23.2.5.1.1.1.7"), read, description("The number of IPX packets discarded due to errors in\n\t\t\t\ttheir headers, including any IPX packet with a size less\n\t\t\t\tthan the minimum of 30 bytes."), status("mandatory")] uint32 ipxBasicSysInHdrErrors = 0;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.4.1.23.2.5.1.1.1.15"), read, description("The number of outgoing IPX packets discarded due to\n\t\t\t\treasons other than those accounted for in\n\t\t\t\tipxBasicSysOutMalformedRequests, ipxAdvSysOutFiltered,\n\t\t\t\tand ipxAdvSysOutCompressDiscards."), status("mandatory")] uint32 ipxBasicSysOutDiscards = 0;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.4.1.23.2.5.1.1.1.13"), read, description("The number of IPX packets supplied locally for\n\t\t\t\ttransmission, not including any packets counted in\n\t\t\t\tipxAdvForwPackets."), status("mandatory")] uint32 ipxBasicSysOutRequests = 0;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.4.1.23.2.5.1.1.1.17"), read, description("The configured maximum number of IPX sockets that may be\n\t\t\t\topen at one time."), status("mandatory")] sint32 ipxBasicSysConfigSockets = 0;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.4.1.23.2.5.1.1.1.10"), read, description("The number of IPX packets received with incorrect\n\t\t\t\tchecksums."), status("mandatory")] uint32 ipxBasicSysInBadChecksums = 0;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("OCTETSTRING"), variable_length("0..48"), object_identifier("1.3.6.1.4.1.23.2.5.1.1.1.5"), read, write, description("The readable name for this system."), status("mandatory")] string ipxBasicSysName = "";
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("OCTETSTRING"), fixed_length(6), object_identifier("1.3.6.1.4.1.23.2.5.1.1.1.4"), read, write, description("The node number portion of the IPX address of this\n\t\t\t\tsystem."), status("mandatory")] string ipxBasicSysNode = "";
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.4.1.23.2.5.1.1.1.18"), read, description("The number of IPX socket open calls which failed."), status("mandatory")] uint32 ipxBasicSysOpenSocketFails = 0;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.4.1.23.2.5.1.1.1.8"), read, description("The number of IPX packets discarded because the\n\t\t\t\tdestination socket was not open."), status("mandatory")] uint32 ipxBasicSysInUnknownSockets = 0;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.4.1.23.2.5.1.1.1.1"), read, write, description("The unique identifier of the instance of IPX to which this\n\t\t\t\trow corresponds.  This value may be written only when\n\t\t\t\tcreating a new entry in the table."), status("mandatory"), key, key_order(1)] sint32 ipxBasicSysInstance = 0;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.4.1.23.2.5.1.1.1.12"), read, description("The number of times no route to a destination was\n\t\t\t\tfound."), status("mandatory")] uint32 ipxBasicSysNoRoutes = 0;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_IPX_ipxBasicSysTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\default\\SMIR:SNMP_MODULE.Name=\"IPX\"";
SmirClass="\\\\.\\root\\default\\SMIR:SNMP_IPX_ipxBasicSysTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_IPX_ipxBasicSysTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\default\\SMIR\\IPX:SNMP_GROUP.Name=\"ipxSystemV1ObjectGroup\"";
SmirClass="\\\\.\\root\\default\\SMIR:SNMP_IPX_ipxBasicSysTable";
};

#pragma namespace("\\\\.\\root\\default\\SMIR")
[description("The IPX System table - advanced information.\nEach entry corresponds to one instance of IPX running\n                on the system."), module_name("IPX"), group_objectid("1.3.6.1.4.1.23.2.5.1"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_IPX_ipxAdvSysTable : SnmpObjectType
{
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.4.1.23.2.5.1.2.1.9"), read, description("The number of outgoing IPX packets discarded due to\n\t\t\t\tfiltering."), status("mandatory")] uint32 ipxAdvSysOutFiltered = 0;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.4.1.23.2.5.1.2.1.8"), read, description("The number of IPX packets forwarded."), status("mandatory")] uint32 ipxAdvSysForwPackets = 0;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.4.1.23.2.5.1.2.1.7"), read, description("The number of NETBIOS packets received."), status("mandatory")] uint32 ipxAdvSysNETBIOSPackets = 0;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.4.1.23.2.5.1.2.1.4"), read, description("The number of IPX packets discarded due to exceeding the\n\t\t\t\tmaximum hop count."), status("mandatory")] uint32 ipxAdvSysInTooManyHops = 0;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..32"), object_identifier("1.3.6.1.4.1.23.2.5.1.2.1.2"), read, write, description("The maximum number of paths with equal routing metric\n\t\t\t\tvalue which this instance of the IPX may split\n\t\t\t\tbetween when forwarding packets."), status("mandatory"), defval("1")] sint32 ipxAdvSysMaxPathSplits = 0;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.4.1.23.2.5.1.2.1.3"), read, write, description("The maximum number of hops a packet may take."), status("mandatory"), defval("64")] sint32 ipxAdvSysMaxHops = 0;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.4.1.23.2.5.1.2.1.1"), read, write, description("The unique identifier of the instance of IPX to which this\n\t\t\t\trow corresponds.  This value may be written only when\n                creating a new entry in the table."), status("mandatory"), key, key_order(1)] sint32 ipxAdvSysInstance = 0;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.4.1.23.2.5.1.2.1.6"), read, description("The number of incoming IPX packets discarded due to\n\t\t\t\tdecompression errors."), status("mandatory")] uint32 ipxAdvSysInCompressDiscards = 0;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.4.1.23.2.5.1.2.1.11"), read, description("The number of circuits known to this instance of IPX."), status("mandatory")] sint32 ipxAdvSysCircCount = 0;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.4.1.23.2.5.1.2.1.12"), read, description("The number of currently reachable destinations known to\n\t\t\t\tthis instance of IPX."), status("mandatory")] sint32 ipxAdvSysDestCount = 0;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.4.1.23.2.5.1.2.1.13"), read, description("The number of services known to this instance of IPX."), status("mandatory")] sint32 ipxAdvSysServCount = 0;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.4.1.23.2.5.1.2.1.10"), read, description("The number of outgoing IPX packets discarded due to\n\t\t\t\tcompression errors."), status("mandatory")] uint32 ipxAdvSysOutCompressDiscards = 0;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.4.1.23.2.5.1.2.1.5"), read, description("The number of incoming IPX packets discarded due to\n\t\t\t\tfiltering."), status("mandatory")] uint32 ipxAdvSysInFiltered = 0;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_IPX_ipxAdvSysTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\default\\SMIR:SNMP_MODULE.Name=\"IPX\"";
SmirClass="\\\\.\\root\\default\\SMIR:SNMP_IPX_ipxAdvSysTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_IPX_ipxAdvSysTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\default\\SMIR\\IPX:SNMP_GROUP.Name=\"ipxSystemV1ObjectGroup\"";
SmirClass="\\\\.\\root\\default\\SMIR:SNMP_IPX_ipxAdvSysTable";
};

#pragma namespace("\\\\.\\root\\default\\SMIR\\IPX")
instance of SNMP_GROUP
{
Name="ipxCircuitV1ObjectGroup";
Group_Id="1.3.6.1.4.1.23.2.5.2";
Status="current";
Description="";
Reference="";
};

#pragma namespace("\\\\.\\root\\default\\SMIR")
[description("The Circuit table.\nEach entry corresponds to one circuit known to the\n\t\t\t\tsystem."), module_name("IPX"), group_objectid("1.3.6.1.4.1.23.2.5.2"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_IPX_ipxCircTable : SnmpObjectType
{
	[textual_convention("EnumeratedINTEGER"), enumeration("off(1),on(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.4.1.23.2.5.2.1.1.10"), read, write, description("The compression state on this circuit.  This value may \n\t\t\t\tbe written only when creating a new entry in the table."), status("mandatory"), defval("1")] string ipxCircCompressState = "off";
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.4.1.23.2.5.2.1.1.11"), read, write, description("The number of compression slots available on this \n\t\t\t\tcircuit.  This value may be written only when creating a\n\t\t\t\tnew entry in the table."), status("mandatory"), defval("16")] sint32 ipxCircCompressSlots = 0;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("OCTETSTRING"), variable_length("0..48"), object_identifier("1.3.6.1.4.1.23.2.5.2.1.1.6"), read, write, description("The readable name for the circuit."), status("mandatory")] string ipxCircName = "";
	[textual_convention("EnumeratedINTEGER"), enumeration("other(1),broadcast(2),ptToPt(3),wanRIP(4),unnumberedRIP(5),dynamic(6),wanWS(7)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.4.1.23.2.5.2.1.1.7"), read, write, description("The type of the circuit."), status("mandatory")] string ipxCircType = "other";
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.4.1.23.2.5.2.1.1.13"), read, description("The number of compressed packets sent."), status("mandatory")] uint32 ipxCircCompressedSent = 0;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.4.1.23.2.5.2.1.1.25"), read, description("The period of time, in milliseconds, that it takes to\n\t\t\t\ttransmit one byte of data, excluding protocol headers,\n\t\t\t\tto a destination on the other end of the circuit, if \n\t\t\t\tthe circuit is free of other traffic."), status("mandatory")] sint32 ipxCircDelay = 0;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.4.1.23.2.5.2.1.1.2"), read, write, description("The identifier of this circuit, unique within the\n\t\t\t\tinstance of IPX.  This value may be written\n\t\t\t\tonly when creating a new entry in the table."), status("mandatory"), key, key_order(2)] sint32 ipxCircIndex = 0;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("OCTETSTRING"), variable_length("0..48"), object_identifier("1.3.6.1.4.1.23.2.5.2.1.1.27"), read, description("The name of the neighboring router on a WAN circuit."), status("mandatory")] string ipxCircNeighRouterName = "";
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.4.1.23.2.5.2.1.1.19"), read, description("The number of compressed packet rejected packets received."), status("mandatory")] uint32 ipxCircCompressedRejectsReceived = 0;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.4.1.23.2.5.2.1.1.5"), read, write, description("The value of ifIndex for the interface used by this\n\t\t\t\tcircuit.  This value may be written only when creating\n\t\t\t\ta new entry in the table."), status("mandatory")] sint32 ipxCircIfIndex = 0;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.4.1.23.2.5.2.1.1.16"), read, description("The number of packets sent without being compressed\n\t\t\t\teven though compression was turned on for this circuit."), status("mandatory")] uint32 ipxCircUncompressedSent = 0;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("OCTETSTRING"), variable_length("0..48"), object_identifier("1.3.6.1.4.1.23.2.5.2.1.1.8"), read, write, description("The symbolic name used to refernce the dialing information\n\t\t\t\tused to create this circuit.  This value may be written \n\t\t\t\tonly when creating a new entry in the table."), status("mandatory")] string ipxCircDialName = "";
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.4.1.23.2.5.2.1.1.9"), read, write, description("The maximum size (including header), in bytes, that the\n\t\t\t\tsystem supports locally on this circuit."), status("mandatory")] sint32 ipxCircLocalMaxPacketSize = 0;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.4.1.23.2.5.2.1.1.17"), read, description("The number of compressed packets received."), status("mandatory")] uint32 ipxCircCompressedReceived = 0;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.4.1.23.2.5.2.1.1.14"), read, description("The number of compression initialization packets sent."), status("mandatory")] uint32 ipxCircCompressedInitSent = 0;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("OCTETSTRING"), fixed_length(2), object_identifier("1.3.6.1.4.1.23.2.5.2.1.1.21"), read, description("The media type used on this circuit."), status("mandatory")] string ipxCircMediaType = "";
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.4.1.23.2.5.2.1.1.24"), read, description("The number of times that initialization of this\n\t\t\t\tcircuit has failed."), status("mandatory")] uint32 ipxCircInitFails = 0;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("NetNumber"), fixed_length(4), object_identifier("1.3.6.1.4.1.23.2.5.2.1.1.22"), read, write, description("The IPX network number of this circuit.  This value may\n\t\t\t\tbe written only when creating a new entry in the table."), status("mandatory")] string ipxCircNetNumber = "";
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("NetNumber"), fixed_length(4), object_identifier("1.3.6.1.4.1.23.2.5.2.1.1.28"), read, description("The internal network number of the neighboring router\n\t\t\t\ton a WAN circuit."), status("mandatory")] string ipxCircNeighInternalNetNum = "";
	[textual_convention("EnumeratedINTEGER"), enumeration("down(1),up(2),sleeping(3)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.4.1.23.2.5.2.1.1.4"), read, write, description("The operational state of the circuit."), status("mandatory")] string ipxCircOperState = "down";
	[textual_convention("EnumeratedINTEGER"), enumeration("off(1),on(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.4.1.23.2.5.2.1.1.3"), read, write, description("The validity of this circuit entry.  A circuit with this\n\t\t\t\tvalue set to off may be deleted from the table at the\n\t\t\t\tIPX implementation's discretion."), status("mandatory")] string ipxCircExistState = "off";
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.4.1.23.2.5.2.1.1.20"), read, description("The number of packets received without having been\n\t\t\t\tcompressed even though compression was turned on for\n\t\t\t\tthis circuit."), status("mandatory")] uint32 ipxCircUncompressedReceived = 0;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.4.1.23.2.5.2.1.1.26"), read, description("The amount of data, in bits per second, that may flow\n\t\t\t\tthrough the circuit if there is no other traffic."), status("mandatory")] sint32 ipxCircThroughput = 0;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.4.1.23.2.5.2.1.1.1"), read, write, description("The unique identifier of the instance of IPX\n\t\t\t\tto which this entry corresponds.  This value may be \n\t\t\t\twritten only when creating a new entry in the table."), status("mandatory"), key, key_order(1)] sint32 ipxCircSysInstance = 0;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.4.1.23.2.5.2.1.1.15"), read, description("The number of compressed packet rejected packets sent."), status("mandatory")] uint32 ipxCircCompressedRejectsSent = 0;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.4.1.23.2.5.2.1.1.23"), read, description("The number of times the circuit has changed state."), status("mandatory")] uint32 ipxCircStateChanges = 0;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.4.1.23.2.5.2.1.1.18"), read, description("The number of compression initialization packets received."), status("mandatory")] uint32 ipxCircCompressedInitReceived = 0;
	[textual_convention("EnumeratedINTEGER"), enumeration("unknown(1),current(2),changed(3),read(4),reading(5),write(6),writing(7)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.4.1.23.2.5.2.1.1.12"), read, write, description("Indicates whether the information about static routes\n\t\t\t\tand services reached via this circuit matches that\n\t\t\t\tsaved in permanent storage (current).  Setting the\n\t\t\t\tvalue to write when it had the value changed will write\n\t\t\t\tthe currently in use information to permanent storage, \n\t\t\t\tif supported.  Setting the value to read when it had\n\t\t\t\tthe value changed will replace any routes and services\n\t\t\t\tcurrently defined for the circuit with those read from\n\t\t\t\tpermanent storage, if supported."), status("mandatory")] string ipxCircStaticStatus = "unknown";
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_IPX_ipxCircTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\default\\SMIR:SNMP_MODULE.Name=\"IPX\"";
SmirClass="\\\\.\\root\\default\\SMIR:SNMP_IPX_ipxCircTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_IPX_ipxCircTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\default\\SMIR\\IPX:SNMP_GROUP.Name=\"ipxCircuitV1ObjectGroup\"";
SmirClass="\\\\.\\root\\default\\SMIR:SNMP_IPX_ipxCircTable";
};


