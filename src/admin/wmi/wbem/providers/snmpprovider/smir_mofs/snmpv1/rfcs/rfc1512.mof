// Copyright (c) 1997-2001 Microsoft Corporation, All Rights Reserved
//	MOF Generated for module "FDDI-SMT73-MIB" by smi2smir version 1.10.635.0000
qualifier write:ToInstance ToSubClass;
qualifier read:ToInstance ToSubClass;
qualifier provider:ToInstance ToSubClass;
qualifier singleton:ToInstance ToSubClass;
qualifier dynamic:ToInstance ToSubClass;
qualifier textual_convention:ToInstance ToSubClass;
qualifier object_identifier:ToInstance ToSubClass;
qualifier encoding:ToInstance ToSubClass;
qualifier object_syntax:ToInstance ToSubClass;
qualifier status:ToInstance ToSubClass;
qualifier fixed_length:ToInstance ToSubClass;
qualifier variable_length:ToInstance ToSubClass;
qualifier variable_value:ToInstance ToSubClass;
qualifier bits:ToInstance ToSubClass;
qualifier key_order:ToInstance ToSubClass;
qualifier enumeration:ToInstance ToSubClass;
qualifier bits:ToInstance ToSubClass;
qualifier description:ToInstance ToSubClass;
qualifier display_hint:ToInstance ToSubClass;
qualifier defval:ToInstance ToSubClass;
qualifier units:ToInstance ToSubClass;
qualifier reference:ToInstance ToSubClass;
qualifier virtual_key:ToInstance ToSubClass;
qualifier rowstatus:ToInstance ToSubClass;
qualifier module_name:ToInstance ToSubClass;
qualifier module_imports:ToInstance ToSubClass;
qualifier group_objectid:ToInstance ToSubClass;

#pragma namespace("\\\\.\\root\\snmp")
class SMIR:__namespace
{
[read] string Name="SMIR";
};

instance of SMIR
{
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[abstract]
class SnmpMacro
{
};

[abstract]
class SnmpObjectType:SnmpMacro
{
};

class SnmpNotifyStatus:__ExtendedStatus
{
[write] sint32 SnmpStatusCode;
[write] string Description;
};

class SnmpNotification:__ExtrinsicEvent
{
[textual_convention("TimeTicks"):ToInstance ToSubClass DisableOverride,encoding("TimeTicks"):ToInstance ToSubClass DisableOverride,object_syntax("TimeTicks"):ToInstance ToSubClass DisableOverride,read,object_identifier("1.3.6.1.2.1.1.3"):ToInstance ToSubClass DisableOverride,description("The time (in hundredths of a second) since the network management portion of the agent was last re-initialized."):ToInstance ToSubClass DisableOverride] uint32 TimeStamp;
[textual_convention("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, encoding("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, object_syntax("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, read, object_identifier("1.3.6.1.6.3.1.1.4.1"):ToInstance ToSubClass DisableOverride,description("The authoratative identification of this notification."):ToInstance ToSubClass DisableOverride] string Identification;
[read, description("The network address of the entity that created this notification."):ToInstance ToSubClass DisableOverride] string AgentAddress;
[read, description("The network address of the entity that sent this notification. This may be a proxy for the original entity."):ToInstance ToSubClass DisableOverride] string AgentTransportAddress;
[read, description("The transport protocol used by the sending entity."):ToInstance ToSubClass DisableOverride] string AgentTransportProtocol;
[read, description("The security context used to send this notification."):ToInstance ToSubClass DisableOverride] string Community;
};

class SnmpExtendedNotification:__ExtrinsicEvent
{
[textual_convention("TimeTicks"):ToInstance ToSubClass DisableOverride,encoding("TimeTicks"):ToInstance ToSubClass DisableOverride,object_syntax("TimeTicks"):ToInstance ToSubClass DisableOverride,read,object_identifier("1.3.6.1.2.1.1.3"):ToInstance ToSubClass DisableOverride,description("The time (in hundredths of a second) since the network management portion of the agent was last re-initialized."):ToInstance ToSubClass DisableOverride] uint32 TimeStamp;
[textual_convention("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, encoding("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, object_syntax("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, read, object_identifier("1.3.6.1.6.3.1.1.4.1"):ToInstance ToSubClass DisableOverride,description("The authoratative identification of this notification."):ToInstance ToSubClass DisableOverride] string Identification;
[read, description("The network address of the entity that created this notification."):ToInstance ToSubClass DisableOverride] string AgentAddress;
[read, description("The network address of the entity that sent this notification. This may be a proxy for the original entity."):ToInstance ToSubClass DisableOverride] string AgentTransportAddress;
[read, description("The transport protocol used by the sending entity."):ToInstance ToSubClass DisableOverride] string AgentTransportProtocol;
[read, description("The security context used to send this notification."):ToInstance ToSubClass DisableOverride] string Community;
};

class NotificationMapper
{
[read, key] string SnmpTrapOID;
[read] string EventClassName;
};

class ExtendedNotificationMapper
{
[read, key] string SnmpTrapOID;
[read] string EventClassName;
};

class SNMP_MODULE:__namespace
{
[read] string Name;
[read] string Module_Oid;
[read] string Module_Identity;
[read] string Organization;
[read] string Contact_Inf;
[read] string Description;
[read] string Revision;
[read] string Last_Updated;
[read] sint32 Snmp_Version;
[read] string Module_Imports;
};

[Association]
class ModuleToClassAssociator
{
[read, key] string AssocName;
[read] object ref SmirClass;
[read] object ref SmirModule;
};

[Association]
class GroupToClassAssociator
{
[read, key] string AssocName;
[read] object ref SmirClass;
[read] object ref SmirGroup;
};

[Association]
class ModToNotificationClassAssociator
{
[read, key] string AssocName;
[read] object ref SmirClass;
[read] object ref SmirModule;
};

[Association]
class ModToExtNotificationClassAssociator
{
[read, key] string AssocName;
[read] object ref SmirClass;
[read] object ref SmirModule;
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
instance of SNMP_MODULE
{
Name="FDDI_SMT73_MIB";
Module_Oid="1.3.6.1.2.1.10.15.73.2";
Module_Identity="fddismt73mibV1ModuleIdentity";
Organization="";
Contact_Inf="";
Description="FDDI-SMT73-MIB";
Revision="";
Last_Updated="0000000000Z";
Snmp_Version=1;
Module_Imports="RFC1155-SMI,RFC-1212";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR\\FDDI_SMT73_MIB")
class SNMP_GROUP:__namespace
{
[read] string Name;
[read] string Group_Id;
[read] string Status;
[read] string Description;
[read] string Reference;
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR\\FDDI_SMT73_MIB")
instance of SNMP_GROUP
{
Name="fddimibMACV1ObjectGroup";
Group_Id="1.3.6.1.2.1.10.15.73.2";
Status="current";
Description="";
Reference="";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description(""), module_name("FDDI-SMT73-MIB"), singleton, group_objectid("1.3.6.1.2.1.10.15.73.2"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_FDDI_SMT73_MIB_fddimibMAC : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..65535"), object_identifier("1.3.6.1.2.1.10.15.73.2.1"), read, description("The total number of MAC implementations (across\n                      all SMTs) on this network management application\n                      entity.  The value for this variable must remain\n                      constant at least from one re-initialization of\n                      the entity's network management system to the next\n                      re-initialization."), status("mandatory")] sint32 fddimibMACNumber;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_FDDI_SMT73_MIB_fddimibMACSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"FDDI_SMT73_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_FDDI_SMT73_MIB_fddimibMAC";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_FDDI_SMT73_MIB_fddimibMACSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\FDDI_SMT73_MIB:SNMP_GROUP.Name=\"fddimibMACV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_FDDI_SMT73_MIB_fddimibMAC";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description("A list of MAC entries.  The number of entries\n                      shall not exceed the value of fddimibMACNumber.\nA MAC entry containing information common to a\n                      given MAC."), module_name("FDDI-SMT73-MIB"), group_objectid("1.3.6.1.2.1.10.15.73.2"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_FDDI_SMT73_MIB_fddimibMACTable : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..7"), object_identifier("1.3.6.1.2.1.10.15.73.2.2.1.4"), read, description("Indicates the MAC's optional Frame Status\n                      processing functions.\n\n                      The value is a sum.  This value initially takes\n                      the value zero, then for each function present, 2\n                      raised to a power is added to the sum.  The powers\n                      are according to the following table:\n\n                           function   Power\n                       fs-repeating     0\n                         fs-setting     1\n                        fs-clearing     2 "), reference("ANSI { fddiMAC 11 }"), status("mandatory")] sint32 fddimibMACFrameStatusFunctions;
	[textual_convention("EnumeratedINTEGER"), enumeration("isolated(1),local(2),secondary(3),primary(4),concatenated(5),thru(6)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.15.73.2.2.1.8"), read, description("Indicates the Path into which this MAC is\n                      currently inserted (refer to ANSI 9.7.7)."), reference("ANSI { fddiMAC 23 }"), status("mandatory")] string fddimibMACCurrentPath;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("FddiMACLongAddressType"), fixed_length(6), object_identifier("1.3.6.1.2.1.10.15.73.2.2.1.9"), read, description("The MAC's upstream neighbor's long individual MAC\n                      address. It has an initial value of the SMT-\n                      Unknown-MAC Address and is only modified as\n\n\n\n\n\n                      specified by the Neighbor Information Frame\n                      protocol (refer to ANSI SMT 7.2.1 and 8.2)."), reference("ANSI { fddiMAC 24 }"), status("mandatory")] string fddimibMACUpstreamNbr;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.10.15.73.2.2.1.23"), read, description("A count that should as closely as possible match\n                      the number of frames transmitted by this MAC\n                      (refer to ANSI MAC 7.5).  Note that this count\n                      does not include MAC frames."), reference("ANSI { fddiMAC 73 }"), status("mandatory")] uint32 fddimibMACTransmitCts;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("FddiTimeNano"), variable_value("0..2147483647"), object_identifier("1.3.6.1.2.1.10.15.73.2.2.1.6"), read, description("Indicates the maximum time value of\n                      fddiMACTvxValue that this MAC can support."), reference("ANSI { fddiMAC 14 }"), status("mandatory")] sint32 fddimibMACTVXCapability;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("FddiMACLongAddressType"), fixed_length(6), object_identifier("1.3.6.1.2.1.10.15.73.2.2.1.10"), read, description("The MAC's downstream neighbor's long individual\n                      MAC address. It has an initial value of the SMT-\n                      Unknown-MAC Address and is only modified as\n                      specified by the Neighbor Information Frame\n                      protocol (refer to ANSI SMT 7.2.1 and 8.2)."), reference("ANSI { fddiMAC 25 }"), status("mandatory")] string fddimibMACDownstreamNbr;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("FddiTimeNano"), variable_value("0..2147483647"), object_identifier("1.3.6.1.2.1.10.15.73.2.2.1.18"), read, description("It is reported as a FddiTimeNano number."), reference("ANSI { fddiMAC 52 }"), status("mandatory")] sint32 fddimibMACTNeg;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("FddiTimeNano"), variable_value("0..2147483647"), object_identifier("1.3.6.1.2.1.10.15.73.2.2.1.19"), read, description("This variable is the T_Max_value passed to the\n                      MAC.  The time value of this variable shall assume\n                      the minimum suported time value which is greater\n                      than or equal to the time value of fddiPATHT-\n                      MaxLowerBound"), reference("ANSI { fddiMAC 53 }"), status("mandatory")] sint32 fddimibMACTMax;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("FddiTimeNano"), variable_value("0..2147483647"), object_identifier("1.3.6.1.2.1.10.15.73.2.2.1.17"), read, description("This variable is the T_Req_value passed to the\n                      MAC.  Without having detected a duplicate, the\n                      time value of this variable shall assume the\n                      maximum supported time value which is less than or\n                      equal to the time value of fddiPATHMaxT-Req.  When\n                      a MAC has an address detected as a duplicate, it\n                      may use a time value for this variable greater\n                      than the time value of fddiPATHTMaxLowerBound.  A\n                      station shall cause claim when the new T_Req may\n                      cause the value of T_Neg to change in the claim\n                      process, (i.e., time value new T_Req < T_Neg, or\n                      old T_Req = T_Neg)."), reference("ANSI { fddiMAC 51 }"), status("mandatory")] sint32 fddimibMACTReq;
	[textual_convention("EnumeratedINTEGER"), enumeration("true(1),false(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.15.73.2.2.1.31"), read, description("Indicates the MAC Frame Error Condition is\n                      present when set. Cleared when the condition\n                      clears and on station initialization."), reference("ANSI { fddiMAC 114 }"), status("mandatory")] string fddimibMACFrameErrorFlag;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("FddiTimeNano"), variable_value("0..2147483647"), object_identifier("1.3.6.1.2.1.10.15.73.2.2.1.5"), read, description("Indicates the maximum time value of fddiMACTMax\n                      that this MAC can support."), reference("ANSI { fddiMAC 13 }"), status("mandatory")] sint32 fddimibMACTMaxCapability;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..7"), object_identifier("1.3.6.1.2.1.10.15.73.2.2.1.7"), read, description("Indicates the paths available for this MAC (refer\n                      to ANSI SMT 9.7.7).\n\n                      The value is a sum.  This value initially takes\n                      the value zero, then for each type of PATH that\n                      this MAC has available, 2 raised to a power is\n                      added to the sum.  The powers are according to the\n                      following table:\n\n                               Path   Power\n                            Primary     0\n                          Secondary     1\n                              Local     2 "), reference("ANSI { fddiMAC 22 }"), status("mandatory")] sint32 fddimibMACAvailablePaths;
	[textual_convention("EnumeratedINTEGER"), enumeration("none(1),pass(2),fail(3)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.15.73.2.2.1.13"), read, description("The Duplicate Address Test flag, Dup_Addr_Test\n                      (refer to ANSI 8.2)."), reference("ANSI { fddiMAC 29 }"), status("mandatory")] string fddimibMACDupAddressTest;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("FddiMACLongAddressType"), fixed_length(6), object_identifier("1.3.6.1.2.1.10.15.73.2.2.1.11"), read, description("The previous value of the MAC's upstream\n                      neighbor's long individual MAC address. It has an\n                      initial value of the SMT-Unknown- MAC Address and\n                      is only modified as specified by the Neighbor\n                      Information Frame protocol (refer to ANSI SMT\n                      7.2.1 and 8.2)."), reference("ANSI { fddiMAC 26 }"), status("mandatory")] string fddimibMACOldUpstreamNbr;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..255"), object_identifier("1.3.6.1.2.1.10.15.73.2.2.1.14"), read, write, description("List of permitted Paths which specifies the\n                      Path(s) into which the MAC may be inserted (refer\n                      to ansi SMT 9.7).\n\n                      The value is a sum which represents the individual\n                      paths that are desired.  This value initially\n                      takes the value zero, then for each type of PATH\n                      that this node is, 2 raised to a power is added to\n                      the sum.  The powers are according to the\n                      following table:\n\n                                         Path   Power\n                                        local     0\n                          secondary-alternate     1\n                            primary-alternate     2\n                       concatenated-alternate     3\n                          secondary-preferred     4\n                            primary-preferred     5\n                       concatenated-preferred     6\n                                         thru     7 "), reference("ANSI { fddiMAC 32 }"), status("mandatory")] sint32 fddimibMACRequestedPaths;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.10.15.73.2.2.1.2"), read, description("Index variable for uniquely identifying the MAC\n                      object instances, which is the same as the\n                      corresponding resource index in SMT."), reference("ANSI { fddiMAC 34 }"), status("mandatory"), key, key_order(2)] sint32 fddimibMACIndex;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..65535"), object_identifier("1.3.6.1.2.1.10.15.73.2.2.1.27"), read, description("This variable is the value of the ratio,\n\n                       ((delta fddiMACLostCts + delta fddiMACErrorCts) /\n                       (delta fddiMACFrameCts + delta fddiMACLostCts ))\n                       * 2**16 "), reference("ANSI { fddiMAC 96 }"), status("mandatory")] sint32 fddimibMACFrameErrorRatio;
	[textual_convention("EnumeratedINTEGER"), enumeration("true(1),false(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.15.73.2.2.1.29"), read, description("The RMT flag Duplicate Address Flag, DA_Flag\n                      (refer to ANSI 10.2.1.2)."), reference("ANSI { fddiMAC 112 }"), status("mandatory")] string fddimibMACDaFlag;
	[textual_convention("EnumeratedINTEGER"), enumeration("true(1),false(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.15.73.2.2.1.34"), read, write, description("This variable determines the value of the\n                      MA_UNITDATA_Enable flag in RMT.  The default and\n                      initial value of this flag is true(1)."), reference("ANSI { fddiMAC 118 }"), status("mandatory")] string fddimibMACMAUnitdataEnable;
	[textual_convention("EnumeratedINTEGER"), enumeration("true(1),false(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.15.73.2.2.1.33"), read, description("This variable indicates the presence of\n\n\n\n\n\n                      underlying hardware support for this MAC object.\n                      If the value of this object is false(2), the\n                      reporting of the objects in this entry may be\n                      handled in an implementation-specific manner."), reference("ANSI { fddiMAC 117 }"), status("mandatory")] string fddimibMACHardwarePresent;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("FddiMACLongAddressType"), fixed_length(6), object_identifier("1.3.6.1.2.1.10.15.73.2.2.1.12"), read, description("The previous value of the MAC's downstream\n                      neighbor's long individual MAC address. It has an\n                      initial value of the SMT- Unknown-MAC Address and\n                      is only modified as specified by the Neighbor\n                      Information Frame protocol (refer to ANSI SMT\n                      7.2.1 and 8.2)."), reference("ANSI { fddiMAC 27 }"), status("mandatory")] string fddimibMACOldDownstreamNbr;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.10.15.73.2.2.1.3"), read, description("The value of the MIB-II ifIndex corresponding to\n                      this MAC.  If none is applicable, 0 is returned."), reference("MIB-II"), status("mandatory")] sint32 fddimibMACIfIndex;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.10.15.73.2.2.1.25"), read, description("A count of the number of instances that this MAC\n                      detected a format error during frame reception\n                      such that the frame was stripped (refer to ANSI\n                      MAC 7.5.3)."), reference("ANSI { fddiMAC 82 }"), status("mandatory")] uint32 fddimibMACLostCts;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.10.15.73.2.2.1.1"), read, description("The value of the SMT index associated with this\n                      MAC."), status("mandatory"), key, key_order(1)] sint32 fddimibMACSMTIndex;
	[textual_convention("EnumeratedINTEGER"), enumeration("rm0(1),rm1(2),rm2(3),rm3(4),rm4(5),rm5(6),rm6(7),rm7(8)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.15.73.2.2.1.28"), read, description("Indicates the current state of the RMT State\n                      Machine (refer to ANSI 10.3.2)."), reference("ANSI { fddiMAC 111 }"), status("mandatory")] string fddimibMACRMTState;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.10.15.73.2.2.1.21"), read, description("A count of the number of frames received by this\n                      MAC (refer to ANSI MAC 7.5.1)."), reference("ANSI { fddiMAC 71 }"), status("mandatory")] uint32 fddimibMACFrameCts;
	[textual_convention("EnumeratedINTEGER"), enumeration("a(1),b(2),s(3),m(4),none(5)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.15.73.2.2.1.15"), read, description("Indicates the PC-Type of the first port that is\n\n\n\n\n\n                      downstream of this MAC (the exit port)."), reference("ANSI { fddiMAC 33 }"), status("mandatory")] string fddimibMACDownstreamPORTType;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.10.15.73.2.2.1.24"), read, description("A count of the number of frames that were\n                      detected in error by this MAC that had not been\n                      detected in error by another MAC (refer to ANSI\n                      MAC 7.5.2)."), reference("ANSI { fddiMAC 81 }"), status("mandatory")] uint32 fddimibMACErrorCts;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("FddiTimeNano"), variable_value("0..2147483647"), object_identifier("1.3.6.1.2.1.10.15.73.2.2.1.20"), read, description("This variable is the TVX_value passed to the MAC.\n                      The time value of this variable shall assume the\n                      minimum suported time value which is greater than\n                      or equal to the time value of\n                      fddiPATHTVXLowerBound."), reference("ANSI { fddiMAC 54 }"), status("mandatory")] sint32 fddimibMACTvxValue;
	[textual_convention("EnumeratedINTEGER"), enumeration("true(1),false(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.15.73.2.2.1.30"), read, description("A flag, UNDA_Flag (refer to ANSI 8.2.2.1), set\n                      when the upstream neighbor reports a duplicate\n                      address condition. Cleared when the condition\n                      clears."), reference("ANSI { fddiMAC 113 }"), status("mandatory")] string fddimibMACUnaDaFlag;
	[textual_convention("EnumeratedINTEGER"), enumeration("true(1),false(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.15.73.2.2.1.32"), read, description("This variable shall take on the value of the\n                      MAC_Avail flag defined in RMT."), reference("ANSI { fddiMAC 116 }"), status("mandatory")] string fddimibMACMAUnitdataAvailable;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.10.15.73.2.2.1.22"), read, description("A count that should as closely as possible match\n                      the number of frames addressed to (A bit set) and\n                      successfully copied into the station's receive\n                      buffers (C bit set) by this MAC (refer to ANSI MAC\n                      7.5). Note that this count does not include MAC\n\n\n\n\n\n                      frames."), reference("ANSI { fddiMAC 72 }"), status("mandatory")] uint32 fddimibMACCopiedCts;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..65535"), object_identifier("1.3.6.1.2.1.10.15.73.2.2.1.26"), read, write, description("A threshold for determining when a MAC Condition\n                      report (see ANSI 8.3.1.1) shall be generated.\n                      Stations not supporting variable thresholds shall\n                      have a value of 0 and a range of (0..0)."), reference("ANSI { fddiMAC 95 }"), status("mandatory")] sint32 fddimibMACFrameErrorThreshold;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("FddiMACLongAddressType"), fixed_length(6), object_identifier("1.3.6.1.2.1.10.15.73.2.2.1.16"), read, description("The 48-bit individual address of the MAC used for\n                      SMT frames."), reference("ANSI { fddiMAC 41 }"), status("mandatory")] string fddimibMACSMTAddress;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_FDDI_SMT73_MIB_fddimibMACTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"FDDI_SMT73_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_FDDI_SMT73_MIB_fddimibMACTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_FDDI_SMT73_MIB_fddimibMACTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\FDDI_SMT73_MIB:SNMP_GROUP.Name=\"fddimibMACV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_FDDI_SMT73_MIB_fddimibMACTable";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR\\FDDI_SMT73_MIB")
instance of SNMP_GROUP
{
Name="fddimibPATHV1ObjectGroup";
Group_Id="1.3.6.1.2.1.10.15.73.4";
Status="current";
Description="";
Reference="";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description(""), module_name("FDDI-SMT73-MIB"), singleton, group_objectid("1.3.6.1.2.1.10.15.73.4"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_FDDI_SMT73_MIB_fddimibPATH : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..65535"), object_identifier("1.3.6.1.2.1.10.15.73.4.1"), read, description("The total number of PATHs possible (across all\n                      SMTs) on this network management application\n                      entity.  The value for this variable must remain\n                      constant at least from one re-initialization of\n                      the entity's network management system to the next\n                      re-initialization."), status("mandatory")] sint32 fddimibPATHNumber;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_FDDI_SMT73_MIB_fddimibPATHSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"FDDI_SMT73_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_FDDI_SMT73_MIB_fddimibPATH";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_FDDI_SMT73_MIB_fddimibPATHSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\FDDI_SMT73_MIB:SNMP_GROUP.Name=\"fddimibPATHV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_FDDI_SMT73_MIB_fddimibPATH";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description("A table of Path configuration entries.  This\n                      table lists all the resources that may be in this\n                      Path.\nA collection of objects containing information\n                      for a given PATH Configuration entry."), module_name("FDDI-SMT73-MIB"), group_objectid("1.3.6.1.2.1.10.15.73.4"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_FDDI_SMT73_MIB_fddimibPATHConfigTable : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.10.15.73.4.3.1.1"), read, description("The value of the SMT index associated with this\n\n\n\n\n\n                      configuration entry."), status("mandatory"), key, key_order(1)] sint32 fddimibPATHConfigSMTIndex;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.10.15.73.4.3.1.2"), read, description("The value of the PATH resource index associated\n                      with this configuration entry."), status("mandatory"), key, key_order(2)] sint32 fddimibPATHConfigPATHIndex;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.10.15.73.4.3.1.3"), read, description("An object associated with Token order for this\n                      entry.  Thus if the token passes resources a, b, c\n                      and d, in that order, then the value of this\n                      object for these resources would be 1, 2, 3 and 4\n                      respectively."), status("mandatory"), key, key_order(3)] sint32 fddimibPATHConfigTokenOrder;
	[textual_convention("EnumeratedINTEGER"), enumeration("isolated(1),local(2),secondary(3),primary(4),concatenated(5),thru(6)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.15.73.4.3.1.6"), read, description("The current insertion status for this resource on\n                      this Path."), status("mandatory")] string fddimibPATHConfigCurrentPath;
	[textual_convention("EnumeratedINTEGER"), enumeration("mac(2),port(4)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.15.73.4.3.1.4"), read, description("The type of resource associated with this\n                      configuration entry."), status("mandatory")] string fddimibPATHConfigResourceType;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.10.15.73.4.3.1.5"), read, description("The value of the SMT resource index used to refer\n                      to the instance of this MAC or Port resource."), status("mandatory")] sint32 fddimibPATHConfigResourceIndex;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_FDDI_SMT73_MIB_fddimibPATHConfigTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"FDDI_SMT73_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_FDDI_SMT73_MIB_fddimibPATHConfigTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_FDDI_SMT73_MIB_fddimibPATHConfigTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\FDDI_SMT73_MIB:SNMP_GROUP.Name=\"fddimibPATHV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_FDDI_SMT73_MIB_fddimibPATHConfigTable";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description("A list of PATH entries.  The number of entries\n                      shall not exceed the value of fddimibPATHNumber.\nA PATH entry containing information common to a\n                      given PATH."), module_name("FDDI-SMT73-MIB"), group_objectid("1.3.6.1.2.1.10.15.73.4"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_FDDI_SMT73_MIB_fddimibPATHTable : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("FddiTimeNano"), variable_value("0..2147483647"), object_identifier("1.3.6.1.2.1.10.15.73.4.2.1.3"), read, write, description("Specifies the minimum time value of\n                      fddiMACTvxValue that shall be used by any MAC that\n                      is configured in this path. The operational value\n                      of fddiMACTvxValue is managed by settting this\n                      variable.  This variable has the time value range\n                      of:\n\n                      0 < fddimibPATHTVXLowerBound < fddimibPATHMaxTReq\n                      Changes to this variable shall either satisfy the\n                      time value relationship:\n\n                      fddimibPATHTVXLowerBound <=\n                      fddimibMACTVXCapability\n\n                      of each of the MACs currently on the path, or be\n                      considered out of range.  The initial value of\n                      fddimibPATHTVXLowerBound shall be 2500 nsec (2.5\n                      ms)."), reference("ANSI { fddiPATH 21 }"), status("mandatory")] sint32 fddimibPATHTVXLowerBound;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("FddiTimeNano"), variable_value("0..2147483647"), object_identifier("1.3.6.1.2.1.10.15.73.4.2.1.4"), read, write, description("Specifies the minimum time value of fddiMACTMax\n                      that shall be used by any MAC that is configured\n                      in this path.  The operational value of\n                      fddiMACTMax is managed by setting this variable.\n                      This variable has the time value range of:\n\n                      fddimibPATHMaxTReq <= fddimibPATHTMaxLowerBound\n\n                      and an absolute time value range of:\n\n                      10000nsec (10 msec) <= fddimibPATHTMaxLowerBound\n\n                      Changes to this variable shall either satisfy the\n                      time value relationship:\n\n                      fddimibPATHTMaxLowerBound <\n                      fddimibMACTMaxCapability\n\n                      of each of the MACs currently on the path, or be\n                      considered out of range.  The initial value of\n                      fddimibPATHTMaxLowerBound shall be 165000 nsec\n                      (165 msec)."), reference("ANSI { fddiPATH 22 }"), status("mandatory")] sint32 fddimibPATHTMaxLowerBound;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..65535"), object_identifier("1.3.6.1.2.1.10.15.73.4.2.1.2"), read, description("Index variable for uniquely identifying the\n                      primary, secondary and local PATH object\n                      instances. Local PATH object instances are\n                      represented with integer values 3 to 255."), reference("ANSI { fddiPATH 11 }"), status("mandatory"), key, key_order(2)] sint32 fddimibPATHIndex;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("FddiTimeNano"), variable_value("0..2147483647"), object_identifier("1.3.6.1.2.1.10.15.73.4.2.1.5"), read, write, description("Specifies the maximum time value of fddiMACT-Req\n                      that shall be used by any MAC that is configured\n                      in this path.  The operational value of fddiMACT-\n                      Req is managed by setting this variable.  This\n                      variable has the time value range of:\n\n                      fddimibPATHTVXLowerBound < fddimibPATHMaxTReq <=\n                                               fddimibPATHTMaxLowerBound.\n\n                      The default value of fddimibPATHMaxTReq is 165000\n                      nsec (165 msec)."), reference("ANSI { fddiPATH 23 }"), status("mandatory")] sint32 fddimibPATHMaxTReq;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.10.15.73.4.2.1.1"), read, description("The value of the SMT index associated with this\n                      PATH."), status("mandatory"), key, key_order(1)] sint32 fddimibPATHSMTIndex;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_FDDI_SMT73_MIB_fddimibPATHTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"FDDI_SMT73_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_FDDI_SMT73_MIB_fddimibPATHTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_FDDI_SMT73_MIB_fddimibPATHTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\FDDI_SMT73_MIB:SNMP_GROUP.Name=\"fddimibPATHV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_FDDI_SMT73_MIB_fddimibPATHTable";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR\\FDDI_SMT73_MIB")
instance of SNMP_GROUP
{
Name="fddimibPORTV1ObjectGroup";
Group_Id="1.3.6.1.2.1.10.15.73.5";
Status="current";
Description="";
Reference="";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description(""), module_name("FDDI-SMT73-MIB"), singleton, group_objectid("1.3.6.1.2.1.10.15.73.5"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_FDDI_SMT73_MIB_fddimibPORT : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..65535"), object_identifier("1.3.6.1.2.1.10.15.73.5.1"), read, description("The total number of PORT implementations (across\n                      all SMTs) on this network management application\n                      entity.  The value for this variable must remain\n                      constant at least from one re-initialization of\n                      the entity's network management system to the next\n                      re-initialization."), status("mandatory")] sint32 fddimibPORTNumber;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_FDDI_SMT73_MIB_fddimibPORTSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"FDDI_SMT73_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_FDDI_SMT73_MIB_fddimibPORT";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_FDDI_SMT73_MIB_fddimibPORTSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\FDDI_SMT73_MIB:SNMP_GROUP.Name=\"fddimibPORTV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_FDDI_SMT73_MIB_fddimibPORT";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description("A list of PORT entries.  The number of entries\n                      shall not exceed the value of fddimibPORTNumber.\nA PORT entry containing information common to a\n                      given PORT."), module_name("FDDI-SMT73-MIB"), group_objectid("1.3.6.1.2.1.10.15.73.5"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_FDDI_SMT73_MIB_fddimibPORTTable : SnmpObjectType
{
	[textual_convention("EnumeratedINTEGER"), enumeration("none(1),m-m(2),otherincompatible(3),pathnotavailable(4)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.15.73.5.2.1.22"), read, description("The value of PC_Withhold (refer to ANSI SMT\n                      9.4.1)."), reference("ANSI { fddiPORT 63 }"), status("mandatory")] string fddimibPORTPCWithhold;
	[textual_convention("EnumeratedINTEGER"), enumeration("tVal9FalseRVal9False(1),tVal9FalseRVal9True(2),tVal9TrueRVal9False(3),tVal9TrueRVal9True(4)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.15.73.5.2.1.6"), read, description("The indications (T_Val(9), R_Val(9)) in PC-\n                      Signalling, of the intent to place a MAC in the\n                      output token path to a PORT (refer to ANSI SMT\n                      9.6.3.2.)."), reference("ANSI { fddiPORT 15 }"), status("mandatory")] string fddimibPORTMACIndicated;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("4..15"), object_identifier("1.3.6.1.2.1.10.15.73.5.2.1.15"), read, description("A long term average link error rate. It ranges\n                      from 10**-4 to 10**-15 and is reported as the\n                      absolute value of the base 10 logarithm (refer to\n                      ANSI SMT 9.4.7.5.)."), reference("ANSI { fddiPORT 51 }"), status("mandatory")] sint32 fddimibPORTLerEstimate;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("FddiResourceId"), variable_value("0..65535"), object_identifier("1.3.6.1.2.1.10.15.73.5.2.1.9"), read, description("Indicates the MAC, if any, whose transmit path\n                      exits the station via this PORT. The value shall\n                      be zero if there is no MAC associated with the\n                      PORT. Otherwise, the MACIndex of the MAC will be\n                      the value of the variable."), reference("ANSI { fddiPORT 18 }"), status("mandatory")] sint32 fddimibPORTMACPlacement;
	[textual_convention("EnumeratedINTEGER"), enumeration("ce0(1),ce1(2),ce2(3),ce3(4),ce4(5),ce5(6)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.15.73.5.2.1.7"), read, description("Indicates the Path(s) into which this PORT is\n                      currently inserted."), reference("ANSI { fddiPORT 16 }"), status("mandatory")] string fddimibPORTCurrentPath;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.10.15.73.5.2.1.16"), read, description("A link error monitoring count of the times that a\n                      link has been rejected."), reference("ANSI { fddiPORT 52 }"), status("mandatory")] uint32 fddimibPORTLemRejectCts;
	[textual_convention("EnumeratedINTEGER"), enumeration("disabled(1),connecting(2),standby(3),active(4)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.15.73.5.2.1.20"), read, description("An indication of the connect state of this PORT\n                      and is equal to the value of Connect_State (refer\n                      to ANSI 9.4.1)"), reference("ANSI { fddiPORT 61 }"), status("mandatory")] string fddimibPORTConnectState;
	[textual_convention("EnumeratedINTEGER"), enumeration("a(1),b(2),s(3),m(4),none(5)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.15.73.5.2.1.4"), read, description("The type of the remote PORT as determined in PCM.\n                      This variable has an initial value of none, and is\n                      only modified in PC_RCode(3)_Actions (refer to\n                      ANSI SMT 9.6.3.2)."), reference("ANSI { fddiPORT 13 }"), status("mandatory")] string fddimibPORTNeighborType;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..3"), object_identifier("1.3.6.1.2.1.10.15.73.5.2.1.12"), read, description("A value that indicates the connection\n                      capabilities of the port. The pc-mac-lct bit\n                      indicates that the station has the capability of\n                      setting the PC_MAC_LCT Flag. The pc-mac-loop bit\n\n\n\n\n\n                      indicates that the station has the capability of\n                      setting the PC_MAC_Loop Flag (refer to ANSI\n                      9.4.3.2).\n\n                      The value is a sum.  This value initially takes\n                      the value zero, then for each capability that this\n                      port has, 2 raised to a power is added to the sum.\n                      The powers are according to the following table:\n\n                         capability   Power\n                         pc-mac-lct     0\n                        pc-mac-loop     1 "), reference("ANSI { fddiPORT 23 }"), status("mandatory")] sint32 fddimibPORTConnectionCapabilities;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..7"), object_identifier("1.3.6.1.2.1.10.15.73.5.2.1.10"), read, description("Indicates the Paths which are available to this\n                      Port. In the absence of faults, the A and B Ports\n                      will always have both the Primary and Secondary\n                      Paths available.\n\n                      The value is a sum.  This value initially takes\n                      the value zero, then for each type of PATH that\n                      this port has available, 2 raised to a power is\n                      added to the sum.  The powers are according to the\n                      following table:\n\n                               Path   Power\n                            Primary     0\n                          Secondary     1\n                              Local     2 "), reference("ANSI { fddiPORT 19 }"), status("mandatory")] sint32 fddimibPORTAvailablePaths;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("OCTETSTRING"), fixed_length(3), object_identifier("1.3.6.1.2.1.10.15.73.5.2.1.8"), read, write, description("This variable is a list of permitted Paths where\n                      each list element defines the Port's permitted\n                      Paths.  The first octet corresponds to 'none', the\n                      second octet to 'tree', and the third octet to\n                      'peer'."), reference("ANSI { fddiPORT 17 }"), status("mandatory")] string fddimibPORTRequestedPaths;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.10.15.73.5.2.1.2"), read, description("A unique value for each PORT within a given SMT,\n                      which is the same as the corresponding resource\n                      index in SMT.  The value for each PORT must remain\n                      constant at least from one re-initialization of\n                      the entity's network management system to the next\n                      re-initialization."), reference("ANSI { fddiPORT 29 }"), status("mandatory"), key, key_order(2)] sint32 fddimibPORTIndex;
	[textual_convention("EnumeratedINTEGER"), enumeration("true(1),false(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.15.73.5.2.1.13"), read, description("This variable assumes the value of the BS_Flag\n                      (refer to ANSI SMT 9.4.3.3)."), reference("ANSI { fddiPORT 33 }"), status("mandatory")] string fddimibPORTBSFlag;
	[textual_convention("EnumeratedINTEGER"), enumeration("true(1),false(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.15.73.5.2.1.24"), read, description("This variable indicates the presence of\n                      underlying hardware support for this Port object.\n                      If the value of this object is false(2), the\n                      reporting of the objects in this entry may be\n                      handled in an implementation-specific manner."), reference("ANSI { fddiPORT 65 }"), status("mandatory")] string fddimibPORTHardwarePresent;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.10.15.73.5.2.1.17"), read, description("The aggregate link error monitor error count, set\n                      to zero only on station initialization."), reference("ANSI { fddiPORT 53 }"), status("mandatory")] uint32 fddimibPORTLemCts;
	[textual_convention("EnumeratedINTEGER"), enumeration("other(1),maintPORT(2),enablePORT(3),disablePORT(4),startPORT(5),stopPORT(6)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.15.73.5.2.1.25"), read, write, description("Causes a Control signal to be generated with a\n                      control_action of 'Signal' and the 'variable'\n                      parameter set with the appropriate value (i.e.,\n                      PC_Maint, PC_Enable, PC_Disable, PC_Start, or\n                      PC_Stop) (refer to ANSI 9.4.2)."), reference("ANSI { fddiPORT 70 }"), status("mandatory")] string fddimibPORTAction;
	[textual_convention("EnumeratedINTEGER"), enumeration("a(1),b(2),s(3),m(4),none(5)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.15.73.5.2.1.3"), read, description("The value of the PORT's PC_Type (refer to ANSI\n                      9.4.1, and 9.6.3.2)."), reference("ANSI { fddiPORT 12 }"), status("mandatory")] string fddimibPORTMyType;
	[textual_convention("EnumeratedINTEGER"), enumeration("true(1),false(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.15.73.5.2.1.23"), read, description("The condition becomes active when the value of\n                      fddiPORTLerEstimate is less than or equal to\n                      fddiPORTLerAlarm. This will be reported with the\n                      Status Report Frames (SRF) (refer to ANSI SMT\n                       7.2.7 and 8.3)."), reference("ANSI { fddiPORT 64 }"), status("mandatory")] string fddimibPORTLerFlag;
	[textual_convention("EnumeratedINTEGER"), enumeration("multimode(1),single-mode1(2),single-mode2(3),sonet(4),low-cost-fiber(5),twisted-pair(6),unknown(7),unspecified(8)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.15.73.5.2.1.11"), read, description("This variable indicates the type of PMD entity\n                      associated with this port."), reference("ANSI { fddiPORT 22 }"), status("mandatory")] string fddimibPORTPMDClass;
	[textual_convention("EnumeratedINTEGER"), enumeration("pc0(1),pc1(2),pc2(3),pc3(4),pc4(5),pc5(6),pc6(7),pc7(8),pc8(9),pc9(10)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.15.73.5.2.1.21"), read, description("The state of this Port's PCM state machine refer\n                      to ANSI SMT 9.6.2)."), reference("ANSI { fddiPORT 62 }"), status("mandatory")] string fddimibPORTPCMState;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.10.15.73.5.2.1.1"), read, description("The value of the SMT index associated with this\n                      PORT."), status("mandatory"), key, key_order(1)] sint32 fddimibPORTSMTIndex;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("4..15"), object_identifier("1.3.6.1.2.1.10.15.73.5.2.1.19"), read, write, description("The link error rate estimate at which a link\n                      connection will generate an alarm. It ranges from\n                      10**-4 to 10**-15 and is reported as the absolute\n                      value of the base 10 logarithm of the estimate\n\n\n\n\n\n                      (default of 8)."), reference("ANSI { fddiPORT 59 }"), status("mandatory")] sint32 fddimibPORTLerAlarm;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..3"), object_identifier("1.3.6.1.2.1.10.15.73.5.2.1.5"), read, write, description("A value representing the PORT's connection\n                      policies desired in the node. The value of pc-\n                      mac-lct is a term used in the PC_MAC_LCT Flag (see\n                      9.4.3.2).  The value of pc-mac-loop is a term used\n                      in the PC_MAC_Loop Flag.\n\n                      The value is a sum.  This value initially takes\n                      the value zero, then for each PORT policy, 2\n                      raised to a power is added to the sum.  The powers\n                      are according to the following table:\n\n                                    Policy   Power\n                                pc-mac-lct     0\n                               pc-mac-loop     1 "), reference("ANSI { fddiPORT 14 }"), status("mandatory")] sint32 fddimibPORTConnectionPolicies;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.10.15.73.5.2.1.14"), read, description("The count of the consecutive times the link\n                      confidence test (LCT) has failed during connection\n                      management (refer to ANSI 9.4.1)."), reference("ANSI { fddiPORT 42 }"), status("mandatory")] uint32 fddimibPORTLCTFailCts;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("4..15"), object_identifier("1.3.6.1.2.1.10.15.73.5.2.1.18"), read, write, description("The link error rate estimate at which a link\n                      connection will be broken. It ranges from 10**-4\n                      to 10**-15 and is reported as the absolute value\n                      of the base 10 logarithm (default of 7)."), reference("ANSI { fddiPORT 58 }"), status("mandatory")] sint32 fddimibPORTLerCutoff;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_FDDI_SMT73_MIB_fddimibPORTTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"FDDI_SMT73_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_FDDI_SMT73_MIB_fddimibPORTTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_FDDI_SMT73_MIB_fddimibPORTTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\FDDI_SMT73_MIB:SNMP_GROUP.Name=\"fddimibPORTV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_FDDI_SMT73_MIB_fddimibPORTTable";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR\\FDDI_SMT73_MIB")
instance of SNMP_GROUP
{
Name="fddimibSMTV1ObjectGroup";
Group_Id="1.3.6.1.2.1.10.15.73.1";
Status="current";
Description="";
Reference="";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description(""), module_name("FDDI-SMT73-MIB"), singleton, group_objectid("1.3.6.1.2.1.10.15.73.1"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_FDDI_SMT73_MIB_fddimibSMT : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..65535"), object_identifier("1.3.6.1.2.1.10.15.73.1.1"), read, description("The number of SMT implementations (regardless of\n                      their current state) on this network management\n                      application entity.  The value for this variable\n                      must remain constant at least from one re-\n                      initialization of the entity's network management\n                      system to the next re-initialization."), status("mandatory")] sint32 fddimibSMTNumber;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_FDDI_SMT73_MIB_fddimibSMTSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"FDDI_SMT73_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_FDDI_SMT73_MIB_fddimibSMT";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_FDDI_SMT73_MIB_fddimibSMTSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\FDDI_SMT73_MIB:SNMP_GROUP.Name=\"fddimibSMTV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_FDDI_SMT73_MIB_fddimibSMT";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description("A list of SMT entries.  The number of entries\n                      shall not exceed the value of fddimibSMTNumber.\nAn SMT entry containing information common to a\n                      given SMT."), module_name("FDDI-SMT73-MIB"), group_objectid("1.3.6.1.2.1.10.15.73.1"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_FDDI_SMT73_MIB_fddimibSMTTable : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.10.15.73.1.2.1.4"), read, description("The highest version of SMT that this station\n                      supports (refer to ANSI 7.1.2.2)."), reference("ANSI { fddiSMT 14 }"), status("mandatory")] sint32 fddimibSMTHiVersionId;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.10.15.73.1.2.1.5"), read, description("The lowest version of SMT that this station\n                      supports (refer to ANSI 7.1.2.2)."), reference("ANSI { fddiSMT 15 }"), status("mandatory")] sint32 fddimibSMTLoVersionId;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.10.15.73.1.2.1.3"), read, description("The version that this station is using for its\n                      operation (refer to ANSI 7.1.2.2). The value of\n                      this variable is 2 for this SMT revision."), reference("ANSI { fddiSMT 13 }"), status("mandatory")] sint32 fddimibSMTOpVersionId;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..65535"), object_identifier("1.3.6.1.2.1.10.15.73.1.2.1.7"), read, description("The version of the FDDI MIB of this station.  The\n                      value of this variable is 1 for this SMT\n                      revision."), reference("ANSI { fddiSMT 18 }"), status("mandatory")] sint32 fddimibSMTMIBVersionId;
	[textual_convention("EnumeratedINTEGER"), enumeration("true(1),false(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.15.73.1.2.1.23"), read, description("This variable assumes the value of the\n                      PeerWrapFlag in CFM (refer to ANSI SMT\n                      9.7.2.4.4)."), reference("ANSI { fddiSMT 46 }"), status("mandatory")] string fddimibSMTPeerWrapFlag;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..2"), object_identifier("1.3.6.1.2.1.10.15.73.1.2.1.9"), read, description("The value of this variable is the number of A, B,\n                      and S ports in this station or concentrator."), reference("ANSI { fddiSMT 22 }"), status("mandatory")] sint32 fddimibSMTNonMasterCts;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..1"), object_identifier("1.3.6.1.2.1.10.15.73.1.2.1.13"), read, write, description("A value that indicates the configuration policies\n                      currently desired in a node.  'Hold' is one of the\n                      terms used for the Hold Flag, an optional ECM flag\n                      used to enable the optional Hold policy.\n\n                      The value is a sum.  This value initially takes\n                      the value zero, then for each of the configuration\n                      policies currently enforced on the node, 2 raised\n                      to a power is added to the sum.  The powers are\n                      according to the following table:\n\n                                     Policy   Power\n                          configurationhold     0 "), reference("ANSI { fddiSMT 26 }"), status("mandatory")] sint32 fddimibSMTConfigPolicy;
	[textual_convention("EnumeratedINTEGER"), enumeration("other(1),connect(2),disconnect(3),path-Test(4),self-Test(5),disable-a(6),disable-b(7),disable-m(8)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.15.73.1.2.1.26"), read, write, description("This object, when read, always returns a value of\n                      other(1).  The behavior of setting this variable\n                      to each of the acceptable values is as follows:\n\n                           other(1): Results in an appropriate error.\n                           connect(2): Generates a Connect signal to ECM\n                                to begin a connection sequence. See ANSI\n                                Ref 9.4.2.\n                           disconnect(3): Generates a Disconnect signal\n                                to ECM. see ANSI Ref 9.4.2.\n                           path-Test(4): Initiates a station Path_Test.\n                                The Path_Test variable (see ANSI Ref\n                                9.4.1) is set to 'Testing'. The results\n                                of this action are not specified in this\n                                standard.\n                           self-Test(5): Initiates a station Self_Test.\n                                The results of this action are not\n                                specified in this standard.\n                           disable-a(6): Causes a PC_Disable on the A\n                                port if the A port mode is peer.\n                           disable-b(7): Causes a PC_Disable on the B\n                                port if the B port mode is peer.\n                           disable-m(8): Causes a PC_Disable on all M\n                                ports.\n\n                      Attempts to set this object to all other values\n                      results in an appropriate error.  The result of\n                      setting this variable to path-Test(4) or self-\n\n\n\n\n\n                      Test(5) is implementation-specific."), reference("ANSI { fddiSMT 60 }"), status("mandatory")] string fddimibSMTStationAction;
	[textual_convention("EnumeratedINTEGER"), enumeration("true(1),false(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.15.73.1.2.1.16"), read, write, description("If true, indicates that the node will generate\n                      Status Reporting Frames for its implemented events\n                      and conditions. It has an initial value of true.\n                      This variable determines the value of the\n                      SR_Enable Flag (refer to ANSI SMT 8.3.2.1)."), reference("ANSI { fddiSMT 30 }"), status("mandatory")] string fddimibSMTStatRptPolicy;
	[textual_convention("EnumeratedINTEGER"), enumeration("true(1),false(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.15.73.1.2.1.18"), read, description("A flag indicating if the station has a bypass on\n                      its AB port pair."), reference("ANSI { fddiSMT 34 }"), status("mandatory")] string fddimibSMTBypassPresent;
	[textual_convention("EnumeratedINTEGER"), enumeration("concatenated(1),separated(2),thru(3)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.15.73.1.2.1.22"), read, description("The current status of the primary and secondary\n                      paths within this station."), reference("ANSI { fddiSMT 45 }"), status("mandatory")] string fddimibSMTStationStatus;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..7"), object_identifier("1.3.6.1.2.1.10.15.73.1.2.1.11"), read, description("A value that indicates the PATH types available\n                      in the station.\n\n                      The value is a sum.  This value initially takes\n                      the value zero, then for each type of PATH that\n                      this node has available, 2 raised to a power is\n                      added to the sum.  The powers are according to the\n                      following table:\n\n                               Path   Power\n                            Primary     0\n                          Secondary     1\n                              Local     2\n\n                      For example, a station having Primary and Local\n                      PATHs available would have a value of 5 (2**0 +\n                      2**2)."), reference("ANSI { fddiSMT 24 }"), status("mandatory")] sint32 fddimibSMTAvailablePaths;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.10.15.73.1.2.1.1"), read, description("A unique value for each SMT.  The value for each\n                      SMT must remain constant at least from one re-\n                      initialization of the entity's network management\n                      system to the next re-initialization."), status("mandatory"), key, key_order(1)] sint32 fddimibSMTIndex;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..255"), object_identifier("1.3.6.1.2.1.10.15.73.1.2.1.8"), read, description("The number of MACs in this station or\n                      concentrator."), reference("ANSI { fddiSMT 21 }"), status("mandatory")] sint32 fddimibSMTMACCts;
	[textual_convention("EnumeratedINTEGER"), enumeration("cf0(1),cf1(2),cf2(3),cf3(4),cf4(5),cf5(6),cf6(7),cf7(8),cf8(9),cf9(10),cf10(11),cf11(12),cf12(13)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.15.73.1.2.1.20"), read, description("The attachment configuration for the station or\n                      concentrator (refer to ANSI SMT 9.7.2.2)."), reference("ANSI { fddiSMT 42 }"), status("mandatory")] string fddimibSMTCFState;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("32768..65535"), object_identifier("1.3.6.1.2.1.10.15.73.1.2.1.14"), read, write, description("A value representing the connection policies in\n                      effect in a node. A station sets the corresponding\n                      bit for each of the connection types that it\n                      rejects. The letter designations, X and Y, in the\n                      'rejectX-Y' names have the following significance:\n                      X represents the PC-Type of the local PORT and Y\n                      represents the PC_Type of the adjacent PORT\n                      (PC_Neighbor). The evaluation of Connection-\n                      Policy (PC-Type, PC-Neighbor) is done to determine\n                      the setting of T- Val(3) in the PC-Signalling\n                      sequence (refer to ANSI 9.6.3). Note that Bit 15,\n                      (rejectM-M), is always set and cannot be cleared.\n\n                      The value is a sum.  This value initially takes\n                      the value zero, then for each of the connection\n                      policies currently enforced on the node, 2 raised\n                      to a power is added to the sum.  The powers are\n                      according to the following table:\n\n                             Policy   Power\n                          rejectA-A     0\n                          rejectA-B     1\n                          rejectA-S     2\n                          rejectA-M     3\n                          rejectB-A     4\n                          rejectB-B     5\n                          rejectB-S     6\n                          rejectB-M     7\n                          rejectS-A     8\n                          rejectS-B     9\n                          rejectS-S     10\n                          rejectS-M     11\n                          rejectM-A     12\n                          rejectM-B     13\n                          rejectM-S     14\n                          rejectM-M     15 "), reference("ANSI { fddiSMT 27 }"), status("mandatory")] sint32 fddimibSMTConnectionPolicy;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("2..30"), object_identifier("1.3.6.1.2.1.10.15.73.1.2.1.15"), read, write, description("The timer, expressed in seconds, used in the\n                      Neighbor Notification protocol. It has a range of\n                      2 seconds to 30 seconds, and its default value is\n                      30 seconds (refer to ANSI SMT 8.2)."), reference("ANSI { fddiSMT 29 }"), status("mandatory")] sint32 fddimibSMTTNotify;
	[textual_convention("EnumeratedINTEGER"), enumeration("ec0(1),ec1(2),ec2(3),ec3(4),ec4(5),ec5(6),ec6(7),ec7(8)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.15.73.1.2.1.19"), read, description("Indicates the current state of the ECM state\n                      machine (refer to ANSI SMT 9.5.2)."), reference("ANSI { fddiSMT 41 }"), status("mandatory")] string fddimibSMTECMState;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("OCTETSTRING"), fixed_length(32), object_identifier("1.3.6.1.2.1.10.15.73.1.2.1.6"), read, write, description("This variable contains 32 octets of user defined\n                      information. The information shall be an ASCII\n                      string."), reference("ANSI { fddiSMT 17 }"), status("mandatory")] string fddimibSMTUserData;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..3"), object_identifier("1.3.6.1.2.1.10.15.73.1.2.1.12"), read, description("A value that indicates the configuration\n                      capabilities of a node. The 'Hold Available' bit\n                      indicates the support of the optional Hold\n                      Function, which is controlled by\n                      fddiSMTConfigPolicy.  The 'CF-Wrap-AB' bit\n                      indicates that the station has the capability of\n                      performing a wrap_ab (refer to ANSI SMT 9.7.2.2).\n\n                      The value is a sum.  This value initially takes\n                      the value zero, then for each of the configuration\n                      policies currently enforced on the node, 2 raised\n                      to a power is added to the sum.  The powers are\n                      according to the following table:\n\n                                 Policy   Power\n                          holdAvailable     0\n                             CF-Wrap-AB     1 "), reference("ANSI { fddiSMT 25 }"), status("mandatory")] sint32 fddimibSMTConfigCapabilities;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("FddiTimeMilli"), variable_value("0..2147483647"), object_identifier("1.3.6.1.2.1.10.15.73.1.2.1.17"), read, write, description("Reference Trace_Max (refer to ANSI SMT\n                      9.4.4.2.2)."), reference("ANSI { fddiSMT 31 }"), status("mandatory")] sint32 fddimibSMTTraceMaxExpiration;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("FddiSMTStationIdType"), fixed_length(8), object_identifier("1.3.6.1.2.1.10.15.73.1.2.1.2"), read, description("Used to uniquely identify an FDDI station."), reference("ANSI { fddiSMT 11 }"), status("mandatory")] string fddimibSMTStationId;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("FddiTimeMilli"), variable_value("0..2147483647"), object_identifier("1.3.6.1.2.1.10.15.73.1.2.1.24"), read, description("This variable assumes the value of TimeStamp\n                      (refer to ANSI SMT 8.3.2.1)."), reference("ANSI { fddiSMT 51 }"), status("mandatory")] sint32 fddimibSMTTimeStamp;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..255"), object_identifier("1.3.6.1.2.1.10.15.73.1.2.1.10"), read, description("The number of M Ports in a node. If the node is\n                      not a concentrator, the value of the variable is\n                      zero."), reference("ANSI { fddiSMT 23 }"), status("mandatory")] sint32 fddimibSMTMasterCts;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("FddiTimeMilli"), variable_value("0..2147483647"), object_identifier("1.3.6.1.2.1.10.15.73.1.2.1.25"), read, description("This variable assumes the value of\n                      TransitionTimeStamp (refer to ANSI SMT 8.3.2.1)."), reference("ANSI { fddiSMT 52 }"), status("mandatory")] sint32 fddimibSMTTransitionTimeStamp;
	[textual_convention("EnumeratedINTEGER"), enumeration("true(1),false(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.15.73.1.2.1.21"), read, description("A flag indicating that the station was remotely\n\n\n\n\n\n                      disconnected from the network as a result of\n                      receiving an fddiSMTAction, disconnect (refer to\n                      ANSI SMT 6.4.5.3) in a Parameter Management Frame.\n                      A station requires a Connect Action to rejoin and\n                      clear the flag (refer to ANSI SMT 6.4.5.2)."), reference("ANSI { fddiSMT 44 }"), status("mandatory")] string fddimibSMTRemoteDisconnectFlag;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_FDDI_SMT73_MIB_fddimibSMTTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"FDDI_SMT73_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_FDDI_SMT73_MIB_fddimibSMTTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_FDDI_SMT73_MIB_fddimibSMTTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\FDDI_SMT73_MIB:SNMP_GROUP.Name=\"fddimibSMTV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_FDDI_SMT73_MIB_fddimibSMTTable";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR\\FDDI_SMT73_MIB")
instance of SNMP_GROUP
{
Name="fddimibMACCountersV1ObjectGroup";
Group_Id="1.3.6.1.2.1.10.15.73.3";
Status="current";
Description="";
Reference="";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description("A list of MAC Counters entries.  The number of\n                      entries shall not exceed the value of\n                      fddimibMACNumber.\nA MAC Counters entry containing information\n                      common to a given MAC."), module_name("FDDI-SMT73-MIB"), group_objectid("1.3.6.1.2.1.10.15.73.3"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_FDDI_SMT73_MIB_fddimibMACCountersTable : SnmpObjectType
{
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.10.15.73.3.1.1.3"), read, description("A count that should as closely as possible match\n                      the number of frames that were addressed to this\n                      MAC but were not copied into its receive buffers\n                      (see ANSI MAC 7.5). For example, this might occur\n                      due to local buffer congestion. Because of\n                      implementation considerations, this count may not\n                      match the actual number of frames not copied. It\n                      is not a requirement that this count be exact.\n                      Note that this count does not include MAC frames."), reference("ANSI { fddiMAC 84 }"), status("mandatory")] uint32 fddimibMACNotCopiedCts;
	[textual_convention("EnumeratedINTEGER"), enumeration("true(1),false(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.15.73.3.1.1.7"), read, description("Indicates that the Not Copied condition is\n                      present when read as true(1).  Set to false(2)\n                      when the condition clears and on station\n                      initialization."), reference("ANSI { fddiMAC 115 }"), status("mandatory")] string fddimibMACNotCopiedFlag;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.10.15.73.3.1.1.2"), read, description("A count that should as closely as possible match\n                      the number of times that TVX has expired."), reference("ANSI { fddiMAC 83 }"), status("mandatory")] uint32 fddimibMACTvxExpiredCts;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..65535"), object_identifier("1.3.6.1.2.1.10.15.73.3.1.1.6"), read, description("This variable is the value of the ratio:\n\n                       (delta fddiMACNotCopiedCts /\n                       (delta fddiMACCopiedCts +\n                         delta fddiMACNotCopiedCts )) * 2**16 "), reference("ANSI { fddiMAC 105 }"), status("mandatory")] sint32 fddimibMACNotCopiedRatio;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.10.15.73.3.1.1.4"), read, description("A count that should as closely as possible match\n                      the number of TRT expirations since this MAC was\n                      reset or a token was received (refer to ANSI MAC\n                      7.4.5)."), reference("ANSI { fddiMAC 85 }"), status("mandatory")] uint32 fddimibMACLateCts;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.10.15.73.3.1.1.1"), read, description("A count that should as closely as possible match\n                      the number of times the station has received a\n                      token (total of non-restricted and restricted) on\n                      this MAC (see ANSI MAC 7.4). This count is\n                      valuable for determination of network load."), reference("ANSI { fddiMAC 74 }"), status("mandatory")] uint32 fddimibMACTokenCts;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..65535"), object_identifier("1.3.6.1.2.1.10.15.73.3.1.1.8"), read, write, description("A threshold for determining when a MAC condition\n                      report shall be generated.  Stations not\n                      supporting variable thresholds shall have a value\n                      of 0 and a range of (0..0)."), reference("ANSI { fddiMAC 103 }"), status("mandatory")] sint32 fddimibMACNotCopiedThreshold;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.10.15.73.3.1.1.5"), read, description("The count of the number of times the ring has\n                      entered the 'Ring_Operational' state from the\n                      'Ring Not Operational' state.  This count is\n                      updated when a SM_MA_STATUS.Indication of a change\n                      in the Ring_Operational status occurs (refer to\n                      ANSI 6.1.4). Because of implementation\n                      considerations, this count may be less than the\n                      actual RingOp_Ct. It is not a requirement that\n                      this count be exact."), reference("ANSI { fddiMAC 86 }"), status("mandatory")] uint32 fddimibMACRingOpCts;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.10.15.73.2.2.1.1"), read, description("The value of the SMT index associated with this\n                      MAC."), status("mandatory"), virtual_key, key, key_order(1)] sint32 fddimibMACSMTIndex;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.10.15.73.2.2.1.2"), read, description("Index variable for uniquely identifying the MAC\n                      object instances, which is the same as the\n                      corresponding resource index in SMT."), reference("ANSI { fddiMAC 34 }"), status("mandatory"), virtual_key, key, key_order(2)] sint32 fddimibMACIndex;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_FDDI_SMT73_MIB_fddimibMACCountersTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"FDDI_SMT73_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_FDDI_SMT73_MIB_fddimibMACCountersTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_FDDI_SMT73_MIB_fddimibMACCountersTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\FDDI_SMT73_MIB:SNMP_GROUP.Name=\"fddimibMACCountersV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_FDDI_SMT73_MIB_fddimibMACCountersTable";
};


