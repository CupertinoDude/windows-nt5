// Copyright (c) 1997-2001 Microsoft Corporation, All Rights Reserved
//	MOF Generated for module "PPP-IP-NCP-MIB" by smi2smir version 1.10.635.0000
qualifier write:ToInstance ToSubClass;
qualifier read:ToInstance ToSubClass;
qualifier provider:ToInstance ToSubClass;
qualifier singleton:ToInstance ToSubClass;
qualifier dynamic:ToInstance ToSubClass;
qualifier textual_convention:ToInstance ToSubClass;
qualifier object_identifier:ToInstance ToSubClass;
qualifier encoding:ToInstance ToSubClass;
qualifier object_syntax:ToInstance ToSubClass;
qualifier status:ToInstance ToSubClass;
qualifier fixed_length:ToInstance ToSubClass;
qualifier variable_length:ToInstance ToSubClass;
qualifier variable_value:ToInstance ToSubClass;
qualifier bits:ToInstance ToSubClass;
qualifier key_order:ToInstance ToSubClass;
qualifier enumeration:ToInstance ToSubClass;
qualifier bits:ToInstance ToSubClass;
qualifier description:ToInstance ToSubClass;
qualifier display_hint:ToInstance ToSubClass;
qualifier defval:ToInstance ToSubClass;
qualifier units:ToInstance ToSubClass;
qualifier reference:ToInstance ToSubClass;
qualifier virtual_key:ToInstance ToSubClass;
qualifier rowstatus:ToInstance ToSubClass;
qualifier module_name:ToInstance ToSubClass;
qualifier module_imports:ToInstance ToSubClass;
qualifier group_objectid:ToInstance ToSubClass;

#pragma namespace("\\\\.\\root\\snmp")
class SMIR:__namespace
{
[read] string Name="SMIR";
};

instance of SMIR
{
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[abstract]
class SnmpMacro
{
};

[abstract]
class SnmpObjectType:SnmpMacro
{
};

class SnmpNotifyStatus:__ExtendedStatus
{
[write] sint32 SnmpStatusCode;
[write] string Description;
};

class SnmpNotification:__ExtrinsicEvent
{
[textual_convention("TimeTicks"):ToInstance ToSubClass DisableOverride,encoding("TimeTicks"):ToInstance ToSubClass DisableOverride,object_syntax("TimeTicks"):ToInstance ToSubClass DisableOverride,read,object_identifier("1.3.6.1.2.1.1.3"):ToInstance ToSubClass DisableOverride,description("The time (in hundredths of a second) since the network management portion of the agent was last re-initialized."):ToInstance ToSubClass DisableOverride] uint32 TimeStamp;
[textual_convention("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, encoding("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, object_syntax("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, read, object_identifier("1.3.6.1.6.3.1.1.4.1"):ToInstance ToSubClass DisableOverride,description("The authoratative identification of this notification."):ToInstance ToSubClass DisableOverride] string Identification;
[read, description("The network address of the entity that created this notification."):ToInstance ToSubClass DisableOverride] string AgentAddress;
[read, description("The network address of the entity that sent this notification. This may be a proxy for the original entity."):ToInstance ToSubClass DisableOverride] string AgentTransportAddress;
[read, description("The transport protocol used by the sending entity."):ToInstance ToSubClass DisableOverride] string AgentTransportProtocol;
[read, description("The security context used to send this notification."):ToInstance ToSubClass DisableOverride] string Community;
};

class SnmpExtendedNotification:__ExtrinsicEvent
{
[textual_convention("TimeTicks"):ToInstance ToSubClass DisableOverride,encoding("TimeTicks"):ToInstance ToSubClass DisableOverride,object_syntax("TimeTicks"):ToInstance ToSubClass DisableOverride,read,object_identifier("1.3.6.1.2.1.1.3"):ToInstance ToSubClass DisableOverride,description("The time (in hundredths of a second) since the network management portion of the agent was last re-initialized."):ToInstance ToSubClass DisableOverride] uint32 TimeStamp;
[textual_convention("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, encoding("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, object_syntax("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, read, object_identifier("1.3.6.1.6.3.1.1.4.1"):ToInstance ToSubClass DisableOverride,description("The authoratative identification of this notification."):ToInstance ToSubClass DisableOverride] string Identification;
[read, description("The network address of the entity that created this notification."):ToInstance ToSubClass DisableOverride] string AgentAddress;
[read, description("The network address of the entity that sent this notification. This may be a proxy for the original entity."):ToInstance ToSubClass DisableOverride] string AgentTransportAddress;
[read, description("The transport protocol used by the sending entity."):ToInstance ToSubClass DisableOverride] string AgentTransportProtocol;
[read, description("The security context used to send this notification."):ToInstance ToSubClass DisableOverride] string Community;
};

class NotificationMapper
{
[read, key] string SnmpTrapOID;
[read] string EventClassName;
};

class ExtendedNotificationMapper
{
[read, key] string SnmpTrapOID;
[read] string EventClassName;
};

class SNMP_MODULE:__namespace
{
[read] string Name;
[read] string Module_Oid;
[read] string Module_Identity;
[read] string Organization;
[read] string Contact_Inf;
[read] string Description;
[read] string Revision;
[read] string Last_Updated;
[read] sint32 Snmp_Version;
[read] string Module_Imports;
};

[Association]
class ModuleToClassAssociator
{
[read, key] string AssocName;
[read] object ref SmirClass;
[read] object ref SmirModule;
};

[Association]
class GroupToClassAssociator
{
[read, key] string AssocName;
[read] object ref SmirClass;
[read] object ref SmirGroup;
};

[Association]
class ModToNotificationClassAssociator
{
[read, key] string AssocName;
[read] object ref SmirClass;
[read] object ref SmirModule;
};

[Association]
class ModToExtNotificationClassAssociator
{
[read, key] string AssocName;
[read] object ref SmirClass;
[read] object ref SmirModule;
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
instance of SNMP_MODULE
{
Name="PPP_IP_NCP_MIB";
Module_Oid="1.3.6.1.2.1.10.23.3";
Module_Identity="pppipncpmibV1ModuleIdentity";
Organization="";
Contact_Inf="";
Description="PPP-IP-NCP-MIB";
Revision="";
Last_Updated="0000000000Z";
Snmp_Version=1;
Module_Imports="RFC1155-SMI,RFC1213-MIB,RFC-1212,PPP-LCP-MIB";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR\\PPP_IP_NCP_MIB")
class SNMP_GROUP:__namespace
{
[read] string Name;
[read] string Group_Id;
[read] string Status;
[read] string Description;
[read] string Reference;
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR\\PPP_IP_NCP_MIB")
instance of SNMP_GROUP
{
Name="pppIpV1ObjectGroup";
Group_Id="1.3.6.1.2.1.10.23.3";
Status="current";
Description="";
Reference="";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description("Table containing the IP parameters and\n                         statistics for the local PPP entity.\nIPCP status information for a particular PPP\n                         link."), module_name("PPP-IP-NCP-MIB"), group_objectid("1.3.6.1.2.1.10.23.3"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_PPP_IP_NCP_MIB_pppIpTable : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..255"), object_identifier("1.3.6.1.2.1.10.23.3.1.1.4"), read, description("The Max-Slot-Id parameter that the remote node\n                         has advertised and that is in use on the link.\n                         If vj-tcp header compression is not in use on\n                         the link then the value of this object shall be\n                         0. The value of this object is meaningful only\n                         when the link has reached the open state\n                         (pppIpOperStatus is opened)."), status("mandatory")] sint32 pppIpRemoteMaxSlotId;
	[textual_convention("EnumeratedINTEGER"), enumeration("opened(1),not-opened(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.23.3.1.1.1"), read, description("The operational status of the IP network\n                         protocol. If the value of this object is up\n                         then the finite state machine for the IP\n                         network protocol has reached the Opened state."), status("mandatory")] string pppIpOperStatus;
	[textual_convention("EnumeratedINTEGER"), enumeration("none(1),vj-tcp(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.23.3.1.1.3"), read, description("The IP compression protocol that the remote\n\n\n\n\n\n                         PPP-IP entity uses when sending packets to the\n                         local PPP-IP entity. The value of this object\n                         is meaningful only when the link has reached\n                         the open state (pppIpOperStatus is opened)."), status("mandatory")] string pppIpRemoteToLocalCompressionProtocol;
	[textual_convention("EnumeratedINTEGER"), enumeration("none(1),vj-tcp(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.23.3.1.1.2"), read, description("The IP compression protocol that the local\n                         PPP-IP entity uses when sending packets to the\n                         remote PPP-IP entity. The value of this object\n                         is meaningful only when the link has reached\n                         the open state (pppIpOperStatus is opened)."), status("mandatory")] string pppIpLocalToRemoteCompressionProtocol;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..255"), object_identifier("1.3.6.1.2.1.10.23.3.1.1.5"), read, description("The Max-Slot-Id parameter that the local node\n                         has advertised and that is in use on the link.\n                         If vj-tcp header compression is not in use on\n                         the link then the value of this object shall be\n                         0. The value of this object is meaningful only\n                         when the link has reached the open state\n                         (pppIpOperStatus is opened)."), status("mandatory")] sint32 pppIpLocalMaxSlotId;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.2.2.1.1"), read, description("A unique value for each interface.  Its value\n                      ranges between 1 and the value of ifNumber.  The\n                      value for each interface must remain constant at\n                      least from one re-initialization of the entity's\n                      network management system to the next re-\n                      initialization."), status("mandatory"), virtual_key, key, key_order(1)] sint32 ifIndex;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_PPP_IP_NCP_MIB_pppIpTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"PPP_IP_NCP_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_PPP_IP_NCP_MIB_pppIpTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_PPP_IP_NCP_MIB_pppIpTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\PPP_IP_NCP_MIB:SNMP_GROUP.Name=\"pppIpV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_PPP_IP_NCP_MIB_pppIpTable";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description("Table containing configuration variables for\n                         the IPCP for the local PPP entity.\nIPCP information for a particular PPP link."), module_name("PPP-IP-NCP-MIB"), group_objectid("1.3.6.1.2.1.10.23.3"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_PPP_IP_NCP_MIB_pppIpConfigTable : SnmpObjectType
{
	[textual_convention("EnumeratedINTEGER"), enumeration("open(1),close(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.23.3.2.1.1"), read, write, description("The immediate desired status of the IP network\n                         protocol. Setting this object to open will\n                         inject an administrative open event into the IP\n                         network protocol's finite state machine.\n                         Setting this object to close will inject an\n                         administrative close event into the IP network\n                         protocol's finite state machine."), status("mandatory")] string pppIpConfigAdminStatus;
	[textual_convention("EnumeratedINTEGER"), enumeration("none(1),vj-tcp(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.23.3.2.1.2"), read, write, description("If none(1) then the local node will not\n                         attempt to negotiate any IP Compression option.\n                         Otherwise, the local node will attempt to\n                         negotiate compression mode indicated by the\n                         enumerated value. Changing this object will\n                         have effect when the link is next restarted."), reference("Section 4.0, Van Jacobson TCP/IP Header\n                         Compression of RFC1332."), status("mandatory"), defval("1")] string pppIpConfigCompression;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.2.2.1.1"), read, description("A unique value for each interface.  Its value\n                      ranges between 1 and the value of ifNumber.  The\n                      value for each interface must remain constant at\n                      least from one re-initialization of the entity's\n                      network management system to the next re-\n                      initialization."), status("mandatory"), virtual_key, key, key_order(1)] sint32 ifIndex;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_PPP_IP_NCP_MIB_pppIpConfigTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"PPP_IP_NCP_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_PPP_IP_NCP_MIB_pppIpConfigTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_PPP_IP_NCP_MIB_pppIpConfigTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\PPP_IP_NCP_MIB:SNMP_GROUP.Name=\"pppIpV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_PPP_IP_NCP_MIB_pppIpConfigTable";
};


