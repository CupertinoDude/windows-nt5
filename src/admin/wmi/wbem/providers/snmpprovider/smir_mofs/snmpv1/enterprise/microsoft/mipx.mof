// Copyright (c) 1997-2001 Microsoft Corporation, All Rights Reserved
//	MOF Generated for module "MSIPX-MIB" by smi2smir version 1.00.456.0000
qualifier textual_convention:ToInstance ToSubClass;
qualifier object_identifier:ToInstance ToSubClass;
qualifier encoding:ToInstance ToSubClass;
qualifier object_syntax:ToInstance ToSubClass;
qualifier status:ToInstance ToSubClass;
qualifier fixed_length:ToInstance ToSubClass;
qualifier variable_length:ToInstance ToSubClass;
qualifier variable_value:ToInstance ToSubClass;
qualifier bits:ToInstance ToSubClass;
qualifier enumeration:ToInstance ToSubClass;
qualifier bits:ToInstance ToSubClass;
qualifier description:ToInstance ToSubClass;
qualifier display_hint:ToInstance ToSubClass;
qualifier defval:ToInstance ToSubClass;
qualifier units:ToInstance ToSubClass;
qualifier reference:ToInstance ToSubClass;
qualifier virtual_key:ToInstance ToSubClass;
qualifier rowstatus:ToInstance ToSubClass;
qualifier module_name:ToInstance ToSubClass;
qualifier module_imports:ToInstance ToSubClass;
qualifier group_objectid:ToInstance ToSubClass;

#pragma namespace("\\\\.\\root\\default")
class SMIR:__namespace
{
[read] string Name="SMIR";
};

instance of SMIR
{
};

#pragma namespace("\\\\.\\root\\default\\SMIR")
[abstract]
class SnmpMacro
{
};

[abstract]
class SnmpObjectType:SnmpMacro
{
};

class SnmpNotifyStatus:__ExtendedStatus
{
[write] sint32 SnmpStatusCode;
[write] string Description;
};

class SnmpNotification:__ExtrinsicEvent
{
[textual_convention("TimeTicks"):ToInstance ToSubClass DisableOverride,encoding("TimeTicks"):ToInstance ToSubClass DisableOverride,object_syntax("TimeTicks"):ToInstance ToSubClass DisableOverride,read,object_identifier("1.3.6.1.2.1.1.3"):ToInstance ToSubClass DisableOverride,description("The time (in hundredths of a second) since the network management portion of the agent was last re-initialized."):ToInstance ToSubClass DisableOverride] uint32 TimeStamp;
[textual_convention("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, encoding("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, object_syntax("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, read, object_identifier("1.3.6.1.6.3.1.1.4.1"):ToInstance ToSubClass DisableOverride,description("The authoratative identification of this notification."):ToInstance ToSubClass DisableOverride] string Identification;
[read, description("The network address of the entity that created this notification."):ToInstance ToSubClass DisableOverride] string AgentAddress;
[read, description("The network address of the entity that sent this notification. This may be a proxy for the original entity."):ToInstance ToSubClass DisableOverride] string AgentTransportAddress;
[read, description("The transport protocol used by the sending entity."):ToInstance ToSubClass DisableOverride] string AgentTransportProtocol;
[read, description("The security context used to send this notification."):ToInstance ToSubClass DisableOverride] string Community;
};

class SnmpExtendedNotification:__ExtrinsicEvent
{
[textual_convention("TimeTicks"):ToInstance ToSubClass DisableOverride,encoding("TimeTicks"):ToInstance ToSubClass DisableOverride,object_syntax("TimeTicks"):ToInstance ToSubClass DisableOverride,read,object_identifier("1.3.6.1.2.1.1.3"):ToInstance ToSubClass DisableOverride,description("The time (in hundredths of a second) since the network management portion of the agent was last re-initialized."):ToInstance ToSubClass DisableOverride] uint32 TimeStamp;
[textual_convention("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, encoding("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, object_syntax("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, read, object_identifier("1.3.6.1.6.3.1.1.4.1"):ToInstance ToSubClass DisableOverride,description("The authoratative identification of this notification."):ToInstance ToSubClass DisableOverride] string Identification;
[read, description("The network address of the entity that created this notification."):ToInstance ToSubClass DisableOverride] string AgentAddress;
[read, description("The network address of the entity that sent this notification. This may be a proxy for the original entity."):ToInstance ToSubClass DisableOverride] string AgentTransportAddress;
[read, description("The transport protocol used by the sending entity."):ToInstance ToSubClass DisableOverride] string AgentTransportProtocol;
[read, description("The security context used to send this notification."):ToInstance ToSubClass DisableOverride] string Community;
};

class NotificationMapper
{
[read, key] string SnmpTrapOID;
[read] string EventClassName;
};

class ExtendedNotificationMapper
{
[read, key] string SnmpTrapOID;
[read] string EventClassName;
};

class SNMP_MODULE:__namespace
{
[read] string Name;
[read] string Module_Oid;
[read] string Module_Identity;
[read] string Organization;
[read] string Contact_Inf;
[read] string Description;
[read] string Object_Identity;
[read] string Revision;
[read] string Last_Updated;
[read] sint32 Snmp_Version;
[read] string Module_Imports;
};

[assoc]
class ModuleToClassAssociator
{
[read, key] string AssocName;
[read] object ref SmirClass;
[read] object ref SmirModule;
};

[assoc]
class GroupToClassAssociator
{
[read, key] string AssocName;
[read] object ref SmirClass;
[read] object ref SmirGroup;
};

[assoc]
class ModToNotificationClassAssociator
{
[read, key] string AssocName;
[read] object ref SmirClass;
[read] object ref SmirModule;
};

[assoc]
class ModToExtNotificationClassAssociator
{
[read, key] string AssocName;
[read] object ref SmirClass;
[read] object ref SmirModule;
};

#pragma namespace("\\\\.\\root\\default\\SMIR")
instance of SNMP_MODULE
{
Name="MSIPX_MIB";
Module_Oid="1.3.6.1.4.1.311.1.8.2";
Module_Identity="msipxmibV1ModuleIdentity";
Organization="";
Contact_Inf="";
Description="MSIPX-MIB";
Object_Identity="";
Revision="";
Last_Updated="0000000000Z";
Snmp_Version=1;
Module_Imports="RFC1155-SMI,RFC-1212,RFC-1215,MSFT-MIB";
};

#pragma namespace("\\\\.\\root\\default\\SMIR\\MSIPX_MIB")
class SNMP_GROUP:__namespace
{
[read] string Name;
[read] string Group_Id;
[read] string Status;
[read] string Description;
[read] string Reference;
};

#pragma namespace("\\\\.\\root\\default\\SMIR\\MSIPX_MIB")
instance of SNMP_GROUP
{
Name="ipxInterfaceV1ObjectGroup";
Group_Id="1.3.6.1.4.1.311.1.8.2";
Status="current";
Description="";
Reference="";
};

#pragma namespace("\\\\.\\root\\default\\SMIR")
[description("The interface table.\nEach entry corresponds to one interface known to the\n\t\t\t\tsystem."), module_name("MSIPX-MIB"), group_objectid("1.3.6.1.4.1.311.1.8.2"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_MSIPX_MIB_ipxIfTable : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.4.1.311.1.8.2.1.1.11"), read, description("The period of time, in microseconds, that it takes to\n\t\t\t\ttransmit one byte of data, excluding protocol headers,\n\t\t\t\tto a destination on the other end of the interface, if\n\t\t\t\tthe interface is free of other traffic."), status("mandatory")] sint32 ipxIfDelay = 0;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.4.1.311.1.8.2.1.1.1"), read, description("The identifier of this interface, unique within the\n\t\t\t\tsystem."), status("mandatory"), key, key_order(1)] sint32 ipxIfIndex = 0;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.4.1.311.1.8.2.1.1.24"), read, description("The total number of IPX Type 20 packets received on this\n\t\t\t\t interface. This includes the Type 20 packets received and\n\t\t\t\t discarded for various reasons."), status("mandatory")] uint32 ipxIfInNetbiosPackets = 0;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.4.1.311.1.8.2.1.1.25"), read, description("The total number of IPX Type 20 packets successfully sent on\n\t\t\t\tthis interface."), status("mandatory")] uint32 ipxIfOutNetbiosPackets = 0;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.4.1.311.1.8.2.1.1.7"), read, description("The maximum size (including header), in bytes, that the\n\t\t\t\tsystem supports locally on this interface."), status("mandatory")] sint32 ipxIfLocalMaxPacketSize = 0;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.4.1.311.1.8.2.1.1.8"), read, description("The media type used on this interface."), status("mandatory")] sint32 ipxIfMediaType = 0;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("NetNumber"), fixed_length(4), object_identifier("1.3.6.1.4.1.311.1.8.2.1.1.9"), read, description("The IPX network number of this interface."), status("mandatory")] string ipxIfNetNumber = "";
	[textual_convention("EnumeratedINTEGER"), enumeration("down(1),up(2),sleeping(3)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.4.1.311.1.8.2.1.1.3"), read, description("The current operational state of the interface.\n\t\t\t\tIf ipxIfAdminState is disabled(1) then\n\t\t\t\tipxIfOperState should be down(1). If ipxIfAdminState is\n\t\t\t\tchanged to enabled(2) then ipxIfOperState should change to\n\t\t\t\tup(2) if the interface is ready to transmit and\n\t\t\t\treceive network traffic; it should change to\n\t\t\t\tsleeping(3) if the interface is waiting for external\n\t\t\t\tactions (such as a serial line waiting for an\n\t\t\t\tincomming connection); it should remain in the down(1)\n\t\t\t\tstate if and only if there is a fault that prevents it\n\t\t\t\tfrom going to the up(2) state."), status("mandatory")] string ipxIfOperState = "down";
	[textual_convention("PhysAddress"), encoding("OCTETSTRING"), object_syntax("PhysAddress"), display_hint("1x:"), object_identifier("1.3.6.1.4.1.311.1.8.2.1.1.10"), read, description("The MAC address of this interface."), status("mandatory")] string ipxIfMacAddress = "";
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.4.1.311.1.8.2.1.1.19"), read, description("The total number of IPX packets received and discarded for any\n\t\t\t\tother reason not counted in ipxIfInHdrErrors,\n\t\t\t\tipxIfInFilterDrops and ipxIfNoRoutes."), status("mandatory")] uint32 ipxIfInDiscards = 0;
	[textual_convention("EnumeratedINTEGER"), enumeration("disabled(1),enabled(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.4.1.311.1.8.2.1.1.2"), read, write, description("The desired state of the interface.Default is enabled(2).\n\t\t\t\tThe interface state can be set to disabled(1) by explicit\n\t\t\t\tmanagement action or by configuration information."), status("mandatory")] string ipxIfAdminState = "disabled";
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.4.1.311.1.8.2.1.1.20"), read, description("The total number of IPX packets successfully received"), status("mandatory")] uint32 ipxIfInDelivers = 0;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.4.1.311.1.8.2.1.1.18"), read, description("The total number of IPX packets received and discarded because\n\t\t\t\tno route was found to forward them to their destination"), status("mandatory")] uint32 ipxIfInNoRoutes = 0;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.4.1.311.1.8.2.1.1.12"), read, description("The amount of data, in bits per second, that may flow\n\t\t\t\tthrough the interface if there is no other traffic."), status("mandatory")] sint32 ipxIfThroughput = 0;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.4.1.311.1.8.2.1.1.16"), read, description("The total number of IPX packets received and discarded due\n\t\t\t\tto errors in their IPX headers, including any packet with\n\t\t\t\ta size less than the minimum 30 bytes, bad checksums,\n\t\t\t\tother format errors, etc."), status("mandatory")] uint32 ipxIfInHdrErrors = 0;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.4.1.311.1.8.2.1.1.22"), read, description("The total number of IPX packets discarded for any\n\t\t\t\tother reason not counted in ipxIfOutFilterDrops."), status("mandatory")] uint32 ipxIfOutDiscards = 0;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.4.1.311.1.8.2.1.1.23"), read, description("The total number of IPX packets successfully sent"), status("mandatory")] uint32 ipxIfOutDelivers = 0;
	[textual_convention("EnumeratedINTEGER"), enumeration("disabled(1),enabled(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.4.1.311.1.8.2.1.1.13"), read, write, description("Enable IPXWAN negotiation."), status("mandatory")] string ipxIfIpxWanEnable = "disabled";
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.4.1.311.1.8.2.1.1.4"), read, description("The value of adapter index for the adapter used by this\n\t\t\t\tinterface. On-demand interfaces in a sleeping state\n\t\t\t\tare not mapped to any adapter."), status("mandatory")] sint32 ipxIfAdapterIndex = 0;
	[textual_convention("EnumeratedINTEGER"), enumeration("disabled(1),enabled(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.4.1.311.1.8.2.1.1.14"), read, write, description("Accept Netbios Broadcast Packets."), status("mandatory")] string ipxIfNetbiosAccept = "disabled";
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.4.1.311.1.8.2.1.1.17"), read, description("The total number of incoming IPX packets discarded\n\t\t\t\tdue to input filtering."), status("mandatory")] uint32 ipxIfInFilterDrops = 0;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("OCTETSTRING"), variable_length("0..48"), object_identifier("1.3.6.1.4.1.311.1.8.2.1.1.5"), read, description("The readable name for the interface."), status("mandatory")] string ipxIfName = "";
	[textual_convention("EnumeratedINTEGER"), enumeration("other(1),lan(2),wanRouter(3),wanWorkstation(4),internal(5),personalWanRouter(6),routerWorkstationDialout(7),standaloneWorkstationDialout(8)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.4.1.311.1.8.2.1.1.6"), read, description("The type of the interface."), status("mandatory")] string ipxIfType = "other";
	[textual_convention("EnumeratedINTEGER"), enumeration("disabled(1),enabled(2),enabledForStaticlySeededNames(3),enabledWhenOperStateUp(4)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.4.1.311.1.8.2.1.1.15"), read, write, description("Deliver Netbios Broadcast Packets."), status("mandatory")] string ipxIfNetbiosDeliver = "disabled";
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.4.1.311.1.8.2.1.1.21"), read, description("The total number of outgoing IPX packets discarded\n\t\t\t\tdue to output filtering."), status("mandatory")] uint32 ipxIfOutFilterDrops = 0;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_MSIPX_MIB_ipxIfTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\default\\SMIR:SNMP_MODULE.Name=\"MSIPX_MIB\"";
SmirClass="\\\\.\\root\\default\\SMIR:SNMP_MSIPX_MIB_ipxIfTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_MSIPX_MIB_ipxIfTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\default\\SMIR\\MSIPX_MIB:SNMP_GROUP.Name=\"ipxInterfaceV1ObjectGroup\"";
SmirClass="\\\\.\\root\\default\\SMIR:SNMP_MSIPX_MIB_ipxIfTable";
};

#pragma namespace("\\\\.\\root\\default\\SMIR\\MSIPX_MIB")
instance of SNMP_GROUP
{
Name="ipxForwardingV1ObjectGroup";
Group_Id="1.3.6.1.4.1.311.1.8.3";
Status="current";
Description="";
Reference="";
};

#pragma namespace("\\\\.\\root\\default\\SMIR")
[description("The Static Routes table contains information about all\n\t\t\t\tdestinations reached via statically configured routes.\nEach entry corresponds to one static route."), module_name("MSIPX-MIB"), group_objectid("1.3.6.1.4.1.311.1.8.3"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_MSIPX_MIB_ipxStaticRouteTable : SnmpObjectType
{
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("NetNumber"), fixed_length(4), object_identifier("1.3.6.1.4.1.311.1.8.3.2.1.2"), read, description("The IPX network number of the route's destination."), status("mandatory"), key, key_order(2)] string ipxStaticRouteNetNum = "";
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.4.1.311.1.8.3.2.1.1"), read, description("The unique identifier of the interface used to\n\t\t\t\treach the first hop in the static route."), status("mandatory"), key, key_order(1)] sint32 ipxStaticRouteIfIndex = 0;
	[textual_convention("PhysAddress"), encoding("OCTETSTRING"), object_syntax("PhysAddress"), display_hint("1x:"), object_identifier("1.3.6.1.4.1.311.1.8.3.2.1.6"), read, write, description("The Mac address of the next hop."), status("mandatory")] string ipxStaticRouteNextHopMacAddress = "";
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.4.1.311.1.8.3.2.1.5"), read, write, description("The number of hops necessary to reach the destination."), status("mandatory")] sint32 ipxStaticRouteHopCount = 0;
	[textual_convention("EnumeratedINTEGER"), enumeration("deleted(1),created(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.4.1.311.1.8.3.2.1.3"), read, write, description("Create/Delete parameter. Default is created.\n\t\t\t\tUsers perform an SNMP SET operation on this\n\t\t\t\tobject in order to create/delete the IPX static route."), status("mandatory")] string ipxStaticRouteEntryStatus = "deleted";
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.4.1.311.1.8.3.2.1.4"), read, write, description("The delay, in ticks, to reach the route's destination."), status("mandatory")] sint32 ipxStaticRouteTicks = 0;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_MSIPX_MIB_ipxStaticRouteTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\default\\SMIR:SNMP_MODULE.Name=\"MSIPX_MIB\"";
SmirClass="\\\\.\\root\\default\\SMIR:SNMP_MSIPX_MIB_ipxStaticRouteTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_MSIPX_MIB_ipxStaticRouteTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\default\\SMIR\\MSIPX_MIB:SNMP_GROUP.Name=\"ipxForwardingV1ObjectGroup\"";
SmirClass="\\\\.\\root\\default\\SMIR:SNMP_MSIPX_MIB_ipxStaticRouteTable";
};

#pragma namespace("\\\\.\\root\\default\\SMIR")
[description("The Destination table contains information about all\n\t\t\t\tknown destinations.\nEach entry corresponds to one destination."), module_name("MSIPX-MIB"), group_objectid("1.3.6.1.4.1.311.1.8.3"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_MSIPX_MIB_ipxDestTable : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.4.1.311.1.8.3.1.1.5"), read, description("The unique identifier of the interface used to reach the\n\t\t\t\tnext hop."), status("mandatory")] sint32 ipxDestNextHopIfIndex = 0;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..3"), object_identifier("1.3.6.1.4.1.311.1.8.3.1.1.7"), read, description("A value that indicates of a special meaning of the route\n\t\t\t\t1 - this route is for a network used for dialing in clients\n\t\t\t\t2 - this route should not be advertised."), status("mandatory")] sint32 ipxDestFlags = 0;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.4.1.311.1.8.3.1.1.3"), read, description("The delay in ticks to reach this destination."), status("mandatory")] sint32 ipxDestTicks = 0;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("NetNumber"), fixed_length(4), object_identifier("1.3.6.1.4.1.311.1.8.3.1.1.1"), read, description("The IPX network number of the destination."), status("mandatory"), key, key_order(1)] string ipxDestNetNum = "";
	[textual_convention("PhysAddress"), encoding("OCTETSTRING"), object_syntax("PhysAddress"), display_hint("1x:"), object_identifier("1.3.6.1.4.1.311.1.8.3.1.1.6"), read, description("The MAC address of the next hop."), status("mandatory")] string ipxDestNextHopMacAddress = "";
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.4.1.311.1.8.3.1.1.4"), read, description("The number of hops necessary to reach the destination."), status("mandatory")] sint32 ipxDestHopCount = 0;
	[textual_convention("EnumeratedINTEGER"), enumeration("other(1),local(2),rip(3),nlsp(4),static(5)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.4.1.311.1.8.3.1.1.2"), read, description("The routing protocol from which knowledge of this\n\t\t\t\tdestination was obtained."), status("mandatory")] string ipxDestProtocol = "other";
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_MSIPX_MIB_ipxDestTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\default\\SMIR:SNMP_MODULE.Name=\"MSIPX_MIB\"";
SmirClass="\\\\.\\root\\default\\SMIR:SNMP_MSIPX_MIB_ipxDestTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_MSIPX_MIB_ipxDestTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\default\\SMIR\\MSIPX_MIB:SNMP_GROUP.Name=\"ipxForwardingV1ObjectGroup\"";
SmirClass="\\\\.\\root\\default\\SMIR:SNMP_MSIPX_MIB_ipxDestTable";
};

#pragma namespace("\\\\.\\root\\default\\SMIR\\MSIPX_MIB")
instance of SNMP_GROUP
{
Name="ipxBaseV1ObjectGroup";
Group_Id="1.3.6.1.4.1.311.1.8.1";
Status="current";
Description="";
Reference="";
};

#pragma namespace("\\\\.\\root\\default\\SMIR")
[description(""), module_name("MSIPX-MIB"), singleton, group_objectid("1.3.6.1.4.1.311.1.8.1"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_MSIPX_MIB_ipxBase : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..32"), object_identifier("1.3.6.1.4.1.311.1.8.1.5"), read, description("The maximum number of paths with equal routing metric\n\t\t\t\tvalue which  this instance of IPX may split between when\n\t\t\t\tforwarding packets."), status("mandatory")] sint32 ipxBaseMaxPathSplits = 0;
	[textual_convention("PhysAddress"), encoding("OCTETSTRING"), object_syntax("PhysAddress"), display_hint("1x:"), object_identifier("1.3.6.1.4.1.311.1.8.1.3"), read, description("The node number portion of the IPX address of this\n\t\t\t\tsystem."), status("mandatory")] string ipxBaseNode = "";
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("NetNumber"), fixed_length(4), object_identifier("1.3.6.1.4.1.311.1.8.1.2"), read, description("The 'internal' network number."), status("mandatory")] string ipxBasePrimaryNetNumber = "";
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.4.1.311.1.8.1.6"), read, description("The number of interfaces known to this instance of IPX."), status("mandatory")] sint32 ipxBaseIfCount = 0;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("OCTETSTRING"), variable_length("0..48"), object_identifier("1.3.6.1.4.1.311.1.8.1.4"), read, description("The readable name for this system."), status("mandatory")] string ipxBaseSysName = "";
	[textual_convention("EnumeratedINTEGER"), enumeration("down(1),up(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.4.1.311.1.8.1.1"), read, description("The current operational state of the software."), status("mandatory")] string ipxBaseOperState = "down";
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.4.1.311.1.8.1.7"), read, description("The number of currently reachable destinations known to\n\t\t\t\tthis instance of IPX."), status("mandatory")] sint32 ipxBaseDestCount = 0;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.4.1.311.1.8.1.8"), read, description("The number of services known to this instance of IPX."), status("mandatory")] sint32 ipxBaseServCount = 0;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_MSIPX_MIB_ipxBaseSMIRModuleAssociation";
SmirModule="\\\\.\\root\\default\\SMIR:SNMP_MODULE.Name=\"MSIPX_MIB\"";
SmirClass="\\\\.\\root\\default\\SMIR:SNMP_MSIPX_MIB_ipxBase";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_MSIPX_MIB_ipxBaseSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\default\\SMIR\\MSIPX_MIB:SNMP_GROUP.Name=\"ipxBaseV1ObjectGroup\"";
SmirClass="\\\\.\\root\\default\\SMIR:SNMP_MSIPX_MIB_ipxBase";
};

#pragma namespace("\\\\.\\root\\default\\SMIR\\MSIPX_MIB")
instance of SNMP_GROUP
{
Name="ipxServicesV1ObjectGroup";
Group_Id="1.3.6.1.4.1.311.1.8.4";
Status="current";
Description="";
Reference="";
};

#pragma namespace("\\\\.\\root\\default\\SMIR")
[description("The Static Services table contains information about\n\t\t\t\tall staticly seeded services.\nEach entry corresponds to one service."), module_name("MSIPX-MIB"), group_objectid("1.3.6.1.4.1.311.1.8.4"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_MSIPX_MIB_ipxStaticServTable : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.4.1.311.1.8.4.2.1.1"), read, description("The interface used to reach this service."), status("mandatory"), key, key_order(1)] sint32 ipxStaticServIfIndex = 0;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.4.1.311.1.8.4.2.1.8"), read, write, description("The number of hops to the service."), status("mandatory")] sint32 ipxStaticServHopCount = 0;
	[textual_convention("EnumeratedINTEGER"), enumeration("deleted(1),created(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.4.1.311.1.8.4.2.1.4"), read, write, description("Create/Delete parameter. Default is created.\n\t\t\t\tUsers perform an SNMP SET operation on this\n\t\t\t\tobject in order to create/delete the IPX static service."), status("mandatory")] string ipxStaticServEntryStatus = "deleted";
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("OCTETSTRING"), variable_length("1..48"), object_identifier("1.3.6.1.4.1.311.1.8.4.2.1.3"), read, description("The service name."), status("mandatory"), key, key_order(3)] string ipxStaticServName = "";
	[textual_convention("PhysAddress"), encoding("OCTETSTRING"), object_syntax("PhysAddress"), display_hint("1x:"), object_identifier("1.3.6.1.4.1.311.1.8.4.2.1.6"), read, write, description("The node portion of the IPX address of the service."), status("mandatory")] string ipxStaticServNode = "";
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("OCTETSTRING"), fixed_length(2), object_identifier("1.3.6.1.4.1.311.1.8.4.2.1.2"), read, description("The service type."), status("mandatory"), key, key_order(2)] string ipxStaticServType = "";
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("NetNumber"), fixed_length(4), object_identifier("1.3.6.1.4.1.311.1.8.4.2.1.5"), read, write, description("The IPX network number portion of the IPX address of the\n\t\t\t\tservice."), status("mandatory")] string ipxStaticServNetNum = "";
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("OCTETSTRING"), fixed_length(2), object_identifier("1.3.6.1.4.1.311.1.8.4.2.1.7"), read, write, description("The socket portion of the IPX address of the service."), status("mandatory")] string ipxStaticServSocket = "";
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_MSIPX_MIB_ipxStaticServTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\default\\SMIR:SNMP_MODULE.Name=\"MSIPX_MIB\"";
SmirClass="\\\\.\\root\\default\\SMIR:SNMP_MSIPX_MIB_ipxStaticServTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_MSIPX_MIB_ipxStaticServTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\default\\SMIR\\MSIPX_MIB:SNMP_GROUP.Name=\"ipxServicesV1ObjectGroup\"";
SmirClass="\\\\.\\root\\default\\SMIR:SNMP_MSIPX_MIB_ipxStaticServTable";
};

#pragma namespace("\\\\.\\root\\default\\SMIR")
[description("The table of services, indexed by name and type.\nEach entry corresponds to one service."), module_name("MSIPX-MIB"), group_objectid("1.3.6.1.4.1.311.1.8.4"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_MSIPX_MIB_ipxServTable : SnmpObjectType
{
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("OCTETSTRING"), variable_length("1..48"), object_identifier("1.3.6.1.4.1.311.1.8.4.1.1.2"), read, description("The service name."), status("mandatory"), key, key_order(2)] string ipxServName = "";
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("OCTETSTRING"), fixed_length(6), object_identifier("1.3.6.1.4.1.311.1.8.4.1.1.5"), read, description("The node portion of the IPX address of the service."), status("mandatory")] string ipxServNode = "";
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("OCTETSTRING"), fixed_length(2), object_identifier("1.3.6.1.4.1.311.1.8.4.1.1.1"), read, description("The service type."), status("mandatory"), key, key_order(1)] string ipxServType = "";
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("NetNumber"), fixed_length(4), object_identifier("1.3.6.1.4.1.311.1.8.4.1.1.4"), read, description("The IPX network number portion of the IPX address of the\n\t\t\t\tservice."), status("mandatory")] string ipxServNetNum = "";
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("OCTETSTRING"), fixed_length(2), object_identifier("1.3.6.1.4.1.311.1.8.4.1.1.6"), read, description("The socket portion of the IPX address of the service."), status("mandatory")] string ipxServSocket = "";
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.4.1.311.1.8.4.1.1.7"), read, description("The number of hops to the service."), status("mandatory")] sint32 ipxServHopCount = 0;
	[textual_convention("EnumeratedINTEGER"), enumeration("other(1),local(2),nlsp(4),static(5),sap(6)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.4.1.311.1.8.4.1.1.3"), read, description("The protocol from which knowledge of this service was\n\t\t\t\tobtained."), status("mandatory")] string ipxServProtocol = "other";
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_MSIPX_MIB_ipxServTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\default\\SMIR:SNMP_MODULE.Name=\"MSIPX_MIB\"";
SmirClass="\\\\.\\root\\default\\SMIR:SNMP_MSIPX_MIB_ipxServTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_MSIPX_MIB_ipxServTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\default\\SMIR\\MSIPX_MIB:SNMP_GROUP.Name=\"ipxServicesV1ObjectGroup\"";
SmirClass="\\\\.\\root\\default\\SMIR:SNMP_MSIPX_MIB_ipxServTable";
};


