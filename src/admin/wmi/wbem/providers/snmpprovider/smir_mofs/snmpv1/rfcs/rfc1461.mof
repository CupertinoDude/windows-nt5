// Copyright (c) 1997-2001 Microsoft Corporation, All Rights Reserved
//	MOF Generated for module "MIOX25-MIB" by smi2smir version 1.10.635.0000
qualifier write:ToInstance ToSubClass;
qualifier read:ToInstance ToSubClass;
qualifier provider:ToInstance ToSubClass;
qualifier singleton:ToInstance ToSubClass;
qualifier dynamic:ToInstance ToSubClass;
qualifier textual_convention:ToInstance ToSubClass;
qualifier object_identifier:ToInstance ToSubClass;
qualifier encoding:ToInstance ToSubClass;
qualifier object_syntax:ToInstance ToSubClass;
qualifier status:ToInstance ToSubClass;
qualifier fixed_length:ToInstance ToSubClass;
qualifier variable_length:ToInstance ToSubClass;
qualifier variable_value:ToInstance ToSubClass;
qualifier bits:ToInstance ToSubClass;
qualifier key_order:ToInstance ToSubClass;
qualifier enumeration:ToInstance ToSubClass;
qualifier bits:ToInstance ToSubClass;
qualifier description:ToInstance ToSubClass;
qualifier display_hint:ToInstance ToSubClass;
qualifier defval:ToInstance ToSubClass;
qualifier units:ToInstance ToSubClass;
qualifier reference:ToInstance ToSubClass;
qualifier virtual_key:ToInstance ToSubClass;
qualifier rowstatus:ToInstance ToSubClass;
qualifier module_name:ToInstance ToSubClass;
qualifier module_imports:ToInstance ToSubClass;
qualifier group_objectid:ToInstance ToSubClass;

#pragma namespace("\\\\.\\root\\snmp")
class SMIR:__namespace
{
[read] string Name="SMIR";
};

instance of SMIR
{
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[abstract]
class SnmpMacro
{
};

[abstract]
class SnmpObjectType:SnmpMacro
{
};

class SnmpNotifyStatus:__ExtendedStatus
{
[write] sint32 SnmpStatusCode;
[write] string Description;
};

class SnmpNotification:__ExtrinsicEvent
{
[textual_convention("TimeTicks"):ToInstance ToSubClass DisableOverride,encoding("TimeTicks"):ToInstance ToSubClass DisableOverride,object_syntax("TimeTicks"):ToInstance ToSubClass DisableOverride,read,object_identifier("1.3.6.1.2.1.1.3"):ToInstance ToSubClass DisableOverride,description("The time (in hundredths of a second) since the network management portion of the agent was last re-initialized."):ToInstance ToSubClass DisableOverride] uint32 TimeStamp;
[textual_convention("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, encoding("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, object_syntax("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, read, object_identifier("1.3.6.1.6.3.1.1.4.1"):ToInstance ToSubClass DisableOverride,description("The authoratative identification of this notification."):ToInstance ToSubClass DisableOverride] string Identification;
[read, description("The network address of the entity that created this notification."):ToInstance ToSubClass DisableOverride] string AgentAddress;
[read, description("The network address of the entity that sent this notification. This may be a proxy for the original entity."):ToInstance ToSubClass DisableOverride] string AgentTransportAddress;
[read, description("The transport protocol used by the sending entity."):ToInstance ToSubClass DisableOverride] string AgentTransportProtocol;
[read, description("The security context used to send this notification."):ToInstance ToSubClass DisableOverride] string Community;
};

class SnmpExtendedNotification:__ExtrinsicEvent
{
[textual_convention("TimeTicks"):ToInstance ToSubClass DisableOverride,encoding("TimeTicks"):ToInstance ToSubClass DisableOverride,object_syntax("TimeTicks"):ToInstance ToSubClass DisableOverride,read,object_identifier("1.3.6.1.2.1.1.3"):ToInstance ToSubClass DisableOverride,description("The time (in hundredths of a second) since the network management portion of the agent was last re-initialized."):ToInstance ToSubClass DisableOverride] uint32 TimeStamp;
[textual_convention("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, encoding("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, object_syntax("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, read, object_identifier("1.3.6.1.6.3.1.1.4.1"):ToInstance ToSubClass DisableOverride,description("The authoratative identification of this notification."):ToInstance ToSubClass DisableOverride] string Identification;
[read, description("The network address of the entity that created this notification."):ToInstance ToSubClass DisableOverride] string AgentAddress;
[read, description("The network address of the entity that sent this notification. This may be a proxy for the original entity."):ToInstance ToSubClass DisableOverride] string AgentTransportAddress;
[read, description("The transport protocol used by the sending entity."):ToInstance ToSubClass DisableOverride] string AgentTransportProtocol;
[read, description("The security context used to send this notification."):ToInstance ToSubClass DisableOverride] string Community;
};

class NotificationMapper
{
[read, key] string SnmpTrapOID;
[read] string EventClassName;
};

class ExtendedNotificationMapper
{
[read, key] string SnmpTrapOID;
[read] string EventClassName;
};

class SNMP_MODULE:__namespace
{
[read] string Name;
[read] string Module_Oid;
[read] string Module_Identity;
[read] string Organization;
[read] string Contact_Inf;
[read] string Description;
[read] string Revision;
[read] string Last_Updated;
[read] sint32 Snmp_Version;
[read] string Module_Imports;
};

[Association]
class ModuleToClassAssociator
{
[read, key] string AssocName;
[read] object ref SmirClass;
[read] object ref SmirModule;
};

[Association]
class GroupToClassAssociator
{
[read, key] string AssocName;
[read] object ref SmirClass;
[read] object ref SmirGroup;
};

[Association]
class ModToNotificationClassAssociator
{
[read, key] string AssocName;
[read] object ref SmirClass;
[read] object ref SmirModule;
};

[Association]
class ModToExtNotificationClassAssociator
{
[read, key] string AssocName;
[read] object ref SmirClass;
[read] object ref SmirModule;
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
instance of SNMP_MODULE
{
Name="MIOX25_MIB";
Module_Oid="1.3.6.1.2.1.10.38.1";
Module_Identity="miox25mibV1ModuleIdentity";
Organization="";
Contact_Inf="";
Description="MIOX25-MIB";
Revision="";
Last_Updated="0000000000Z";
Snmp_Version=1;
Module_Imports="RFC1155-SMI,RFC-1212,RFC1213-MIB,RFC1316-MIB,RFC1382-MIB,RFC1381-MIB";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR\\MIOX25_MIB")
class SNMP_GROUP:__namespace
{
[read] string Name;
[read] string Group_Id;
[read] string Status;
[read] string Description;
[read] string Reference;
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR\\MIOX25_MIB")
instance of SNMP_GROUP
{
Name="mioxPleV1ObjectGroup";
Group_Id="1.3.6.1.2.1.10.38.1";
Status="current";
Description="";
Reference="";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description("This table contains information relative to\n                          an interface to an X.25 Packet Level Entity\n                          (PLE).\nThese objects manage the encapsulation of\n                          other protocols within X.25."), module_name("MIOX25-MIB"), group_objectid("1.3.6.1.2.1.10.38.1"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_MIOX25_MIB_mioxPleTable : SnmpObjectType
{
	[textual_convention("OBJECTIDENTIFIER"), encoding("OBJECTIDENTIFIER"), object_syntax("InstancePointer"), object_identifier("1.3.6.1.2.1.10.38.1.1.1.16"), read, write, description("This identifies the instance of the index\n                          in the mioxPeerTable for the default\n                          parameters to use with this interface.\n\n                          The entry identified by this object may have\n                          a zero length Encapsulation address and a\n                          zero length X.121 address.\n\n                          These default parameters are used with\n                          connections to hosts that do not have\n                          entries in the mioxPeerTable.  Such\n                          connections occur when using ddn-x25 IP-X.25\n                          address mapping or when accepting\n                          connections from other hosts not in the\n                          mioxPeerTable.\n\n                          The mioxPeerEncTable entry with the same\n                          index as the mioxPeerTable entry specifies\n                          the call encapsulation types this PLE will\n                          accept for peers not in the mioxPeerTable.\n                          If the mioxPeerEncTable doesn't contain any\n                          entries, this PLE will not accept calls from\n                          entries not in the mioxPeerTable."), status("mandatory")] string mioxPleDefaultPeerId;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PositiveInteger"), variable_value("0..2147483647"), object_identifier("1.3.6.1.2.1.10.38.1.1.1.14"), read, write, description("The hold down timer in milliseconds.  This\n                          is the minimum amount of time to wait before\n                          trying another call to a host that was\n                          previously unsuccessful.  A value of\n                          2147483647 indicates the host will not be\n                          retried."), status("mandatory"), defval("0")] sint32 mioxPleHoldDownTimer;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("X121Address"), variable_length("0..17"), object_identifier("1.3.6.1.2.1.10.38.1.1.1.10"), read, description("The remote address of the most recent\n                          (last) connection that was closed because of\n                          a Q-bit failure."), status("mandatory")] string mioxPleQbitFailureRemoteAddress;
	[textual_convention("TimeTicks"), encoding("TimeTicks"), object_syntax("TimeTicks"), object_identifier("1.3.6.1.2.1.10.38.1.1.1.11"), read, description("The most recent value of sysUpTime when a\n                          connection was closed because of a Q-bit\n                          failure.  This will also be the last time\n                          that mioxPleQbitFailures was incremented."), status("mandatory")] uint32 mioxPleQbitFailureTime;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("OCTETSTRING"), variable_length("2..128"), object_identifier("1.3.6.1.2.1.10.38.1.1.1.4"), read, description("The last Encapsulated address that failed\n                          to find a corresponding X.121 address and\n                          caused mioxPleEnAddrToX121LkupFlrs to be\n                          incremented.  The first octet of this object\n                          contains the encapsulation type, the\n                          remaining octets contain the address of that\n                          type that failed.  Thus for an IP address,\n                          the length will be five octets, the first\n                          octet will contain 204 (hex CC), and the\n                          last four octets will contain the IP\n                          address.  For a snap encapsulation, the\n                          first byte would be 128 (hex 80) and the\n                          rest of the octet string would have the snap\n                          header."), status("mandatory")] string mioxPleLastFailedEnAddr;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PositiveInteger"), variable_value("0..2147483647"), object_identifier("1.3.6.1.2.1.10.38.1.1.1.13"), read, write, description("The amount of time time in milliseconds\n                          this interface will keep an idle connection\n                          open before closing it.  A value of\n                          2147483647 indicates no timer."), status("mandatory"), defval("10000")] sint32 mioxPleInactivityTimer;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PositiveInteger"), variable_value("0..2147483647"), object_identifier("1.3.6.1.2.1.10.38.1.1.1.12"), read, write, description("The minimum time in milliseconds this\n                          interface will keep a connection open before\n                          allowing it to be closed.  A value of zero\n                          indicates no timer."), status("mandatory"), defval("0")] sint32 mioxPleMinimumOpenTimer;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.10.38.1.1.1.6"), read, description("The number of times the translation from an\n                          X.121 address to an Encapsulated Address\n\n\n\n\n\n                          failed to find a corresponding Encapsulated\n                          Address.  Addresses successfully recognized\n                          by an algorithm do not increment this\n                          counter.  This counter reflects the number\n                          of times call acceptance encountered the\n                          abnormal condition of not recognizing the\n                          peer."), status("mandatory")] uint32 mioxPleX121ToEnAddrLkupFlrs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.10.38.1.1.1.3"), read, description("The number of times a translation from an\n                          Encapsulated Address to an X.121 address\n                          failed to find a corresponding X.121\n                          address.  Encapsulated addresses can be\n                          looked up in the mioxPeerTable or translated\n                          via an algorithm as for the DDN.  Addresses\n                          that are successfully recognized do not\n                          increment this counter.  Addresses that are\n                          not recognized (reflecting an abnormal\n                          packet delivery condition) increment this\n                          counter.\n\n                          If an address translation fails, it may be\n\n\n\n\n\n                          difficult to determine which PLE entry\n                          should count the failure.  In such cases the\n                          first likely entry in this table should be\n                          selected.  Agents should record the failure\n                          even if they are unsure which PLE should be\n                          associated with the failure."), status("mandatory")] uint32 mioxPleEnAddrToX121LkupFlrs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.10.38.1.1.1.2"), read, description("The number of X.25 calls from a remote\n                          systems to this system that were cleared by\n                          this system.  The interface instance should\n                          identify the X.25 interface the call came in\n                          on."), status("mandatory")] uint32 mioxPleRefusedConnections;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("X121Address"), variable_length("0..17"), object_identifier("1.3.6.1.2.1.10.38.1.1.1.7"), read, description("The last X.121 address that caused\n                          mioxPleX121ToEnAddrLkupFlrs to increase."), status("mandatory")] string mioxPleLastFailedX121Address;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PositiveInteger"), variable_value("0..2147483647"), object_identifier("1.3.6.1.2.1.10.38.1.1.1.15"), read, write, description("The Collision Retry Timer in milliseconds.\n                          The time to delay between call attempts when\n                          the maximum number of circuits is exceeded\n                          in a call attempt."), status("mandatory"), defval("0")] sint32 mioxPleCollisionRetryTimer;
	[textual_convention("TimeTicks"), encoding("TimeTicks"), object_syntax("TimeTicks"), object_identifier("1.3.6.1.2.1.10.38.1.1.1.8"), read, description("The most recent value of sysUpTime when the\n                          translation from an X.121 address to an\n                          Encapsulated Address failed to find a\n                          corresponding Encapsulated Address."), status("mandatory")] uint32 mioxPleX121ToEnAddrLkupFlrTime;
	[textual_convention("TimeTicks"), encoding("TimeTicks"), object_syntax("TimeTicks"), object_identifier("1.3.6.1.2.1.10.38.1.1.1.5"), read, description("The most recent value of sysUpTime when the\n                          translation from an Encapsulated Address to\n                          X.121 address failed to find a corresponding\n                          X.121 address."), status("mandatory")] uint32 mioxPleEnAddrToX121LkupFlrTime;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..2147483647"), object_identifier("1.3.6.1.2.1.10.38.1.1.1.1"), read, write, description("The maximum number of X.25 circuits that\n                          can be open at one time for this interface.\n                          A value of zero indicates the interface will\n                          not allow any additional circuits (as it may\n                          soon be shutdown).  A value of 2147483647\n                          allows an unlimited number of circuits."), status("mandatory")] sint32 mioxPleMaxCircuits;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.10.38.1.1.1.9"), read, description("The number of times a connection was closed\n                          because of a Q-bit failure."), status("mandatory")] uint32 mioxPleQbitFailures;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.2.2.1.1"), read, description("A unique value for each interface.  Its value\n                      ranges between 1 and the value of ifNumber.  The\n                      value for each interface must remain constant at\n                      least from one re-initialization of the entity's\n                      network management system to the next re-\n                      initialization."), status("mandatory"), virtual_key, key, key_order(1)] sint32 ifIndex;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_MIOX25_MIB_mioxPleTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"MIOX25_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_MIOX25_MIB_mioxPleTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_MIOX25_MIB_mioxPleTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\MIOX25_MIB:SNMP_GROUP.Name=\"mioxPleV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_MIOX25_MIB_mioxPleTable";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR\\MIOX25_MIB")
instance of SNMP_GROUP
{
Name="mioxPeerV1ObjectGroup";
Group_Id="1.3.6.1.2.1.10.38.2";
Status="current";
Description="";
Reference="";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description("This table contains information about the\n                          possible peers this machine may exchange\n                          packets with.\nPer peer information."), module_name("MIOX25-MIB"), group_objectid("1.3.6.1.2.1.10.38.2"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_MIOX25_MIB_mioxPeerTable : SnmpObjectType
{
	[textual_convention("OBJECTIDENTIFIER"), encoding("OBJECTIDENTIFIER"), object_syntax("InstancePointer"), object_identifier("1.3.6.1.2.1.10.38.2.1.1.6"), read, write, description("The instance of the index object in the\n                          x25CallParmTable from RFC 1382 for the X.25\n                          call parameters used to communicate with the\n                          remote host.  The well known value {0 0}\n                          indicates no call parameters specified."), status("mandatory"), defval("0.0")] string mioxPeerX25CallParamId;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.10.38.2.1.1.5"), read, description("The number of seconds a call to this peer\n                          was active.  This counter will be\n                          incremented by one for every second a\n                          connection to a peer was open.  If two calls\n\n\n\n\n\n                          are open at the same time, one second of\n                          elapsed real time will results in two\n                          seconds of connect time."), status("mandatory")] uint32 mioxPeerConnectSeconds;
	[textual_convention("DisplayString"), encoding("OCTETSTRING"), object_syntax("DisplayString"), variable_length("0..255"), object_identifier("1.3.6.1.2.1.10.38.2.1.1.10"), read, write, description("This object returns any identification\n                          information about the peer.  An agent may\n                          supply the comment information found in the\n                          configuration file entry for this peer.  A\n                          zero length string indicates no information\n                          available."), status("mandatory"), defval("")] string mioxPeerDescr;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PositiveInteger"), variable_value("0..2147483647"), object_identifier("1.3.6.1.2.1.10.38.2.1.1.1"), read, description("An index value that distinguished one entry\n                          from another.  This index is independent of\n                          any other index."), status("mandatory"), key, key_order(1)] sint32 mioxPeerIndex;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("OCTETSTRING"), variable_length("0..128"), object_identifier("1.3.6.1.2.1.10.38.2.1.1.7"), read, write, description("The Encapsulation address of the remote\n                          host mapped by this table entry.  A length\n                          of zero indicates the remote IP address is\n                          unknown or unspecified for use as a PLE\n                          default.\n\n                          The first octet of this object contains the\n                          encapsulation type, the remaining octets\n                          contain an address of that type.  Thus for\n                          an IP address, the length will be five\n                          octets, the first octet will contain 204\n                          (hex CC), and the last four octets will\n                          contain the IP address.  For a snap\n                          encapsulation, the first byte would be 128\n                          (hex 80) and the rest of the octet string\n                          would have the snap header."), status("mandatory"), defval("")] string mioxPeerEnAddr;
	[textual_convention("EnumeratedINTEGER"), enumeration("valid(1),createRequest(2),underCreation(3),invalid(4),clearCall(5),makeCall(6)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.10.38.2.1.1.2"), read, write, description("This reports the status of a peer entry.\n                          A value of valid indicates a normal entry\n                          that is in use by the agent.  A value of\n                          underCreation indicates a newly created\n                          entry which isn't yet in use because the\n                          creating management station is still setting\n                          values.\n\n                          The value of invalid indicates the entry is\n                          no longer in use and the agent is free to\n                          delete the entry at any time.  A management\n                          station is also free to use an entry in the\n                          invalid state.\n\n                          Entries are created by setting a value of\n                          createRequest.  Only non-existent or invalid\n                          entries can be set to createRequest.  Upon\n                          receiving a valid createRequest, the agent\n                          will create an entry in the underCreation\n                          state.  This object can not be set to a\n                          value of underCreation directly, entries can\n\n\n\n\n\n                          only be created by setting a value of\n                          createRequest.  Entries that exist in other\n                          than the invalid state can not be set to\n                          createRequest.\n\n                          Entries with a value of underCreation are\n                          not used by the system and the management\n                          station can change the values of other\n                          objects in the table entry.  Management\n                          stations should also remember to configure\n                          values in the mioxPeerEncTable with the same\n                          peer index value as this peer entry.\n\n                          An entry in the underCreation state can be\n                          set to valid or invalid.  Entries in the\n                          underCreation state will stay in that state\n                          until 1) the agent times them out, 2) they\n                          are set to valid, 3) they are set to\n                          invalid.  If an agent notices an entry has\n                          been in the underCreation state for an\n                          abnormally long time, it may decide the\n                          management station has failed and invalidate\n                          the entry.  A prudent agent will understand\n                          that the management station may need to wait\n                          for human input and will allow for that\n                          possibility in its determination of this\n                          abnormally long period.\n\n                          Once a management station has completed all\n                          fields of an entry, it will set a value of\n                          valid.  This causes the entry to be\n                          activated.\n\n                          Entries in the valid state may also be set\n                          to makeCall or clearCall to make or clear\n                          X.25 calls to the peer.  After such a set\n                          request the entry will still be in the valid\n                          state.  Setting a value of makeCall causes\n                          the agent to initiate an X.25 call request\n                          to the peer specified by the entry.  Setting\n                          a value of clearCall causes the agent to\n                          initiate clearing one X.25 call present to\n                          the peer.  Each set request will initiate\n                          another call or clear request (up to the\n                          maximum allowed); this means that management\n                          stations that fail to get a response to a\n                          set request should query to see if a call\n                          was in fact placed or cleared before\n\n\n\n\n\n                          retrying the request.  Entries not in the\n                          valid state can not be set to makeCall or\n                          clearCall.\n\n                          The values of makeCall and clearCall provide\n                          for circuit control on devices which perform\n                          Ethernet Bridging using static circuit\n                          assignment without address recognition;\n                          other devices which dynamically place calls\n                          based on destination addresses may reject\n                          such requests.\n\n                          An agent that (re)creates a new entry\n                          because of a set with createRequest, should\n                          also (re)create a mioxPeerEncTable entry\n                          with a mioxPeerEncIndex of 1, and a\n                          mioxPeerEncType of 204 (hex CC)."), status("mandatory")] string mioxPeerStatus;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PositiveInteger"), variable_value("0..2147483647"), object_identifier("1.3.6.1.2.1.10.38.2.1.1.4"), read, write, description("The value of the ifIndex object for the\n                          interface to X.25 to use to call the peer."), status("mandatory"), defval("1")] sint32 mioxPeerIfIndex;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("X121Address"), variable_length("0..17"), object_identifier("1.3.6.1.2.1.10.38.2.1.1.8"), read, write, description("The X.25 address of the remote host mapped\n\n\n\n\n\n                          by this table entry.  A zero length string\n                          indicates the X.25 address is unspecified\n                          for use as the PLE default."), status("mandatory"), defval("")] string mioxPeerX121Address;
	[textual_convention("OBJECTIDENTIFIER"), encoding("OBJECTIDENTIFIER"), object_syntax("InstancePointer"), object_identifier("1.3.6.1.2.1.10.38.2.1.1.9"), read, write, description("This object identifies the instance of the\n                          index for the X.25 circuit open to the peer\n                          mapped by this table entry.  The well known\n                          value {0 0} indicates no connection\n                          currently active.  For multiple connections,\n                          this identifies the index of a multiplexing\n                          table entry for the connections.  This can\n                          only be written to configure use of PVCs\n                          which means the identified circuit table\n                          entry for a write must be a PVC."), status("mandatory"), defval("0.0")] string mioxPeerX25CircuitId;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PositiveInteger"), variable_value("0..2147483647"), object_identifier("1.3.6.1.2.1.10.38.2.1.1.3"), read, write, description("The maximum number of X.25 circuits allowed\n                          to this peer."), status("mandatory"), defval("1")] sint32 mioxPeerMaxCircuits;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_MIOX25_MIB_mioxPeerTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"MIOX25_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_MIOX25_MIB_mioxPeerTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_MIOX25_MIB_mioxPeerTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\MIOX25_MIB:SNMP_GROUP.Name=\"mioxPeerV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_MIOX25_MIB_mioxPeerTable";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description("This table contains the list of\n                          encapsulations used to communicate with a\n                          peer.  This table has two indexes, the first\n                          identifies the peer, the second\n                          distinguishes encapsulation types.\n\n                          The first index identifies the corresponding\n                          entry in the mioxPeerTable.  The second\n                          index gives the priority of the different\n                          encapsulations.\n\n                          The encapsulation types are ordered in\n                          priority order.  For calling a peer, the\n                          first entry (mioxPeerEncIndex of 1) is tried\n                          first.  If the call doesn't succeed because\n                          the remote host clears the call due to\n                          incompatible call user data, the next entry\n                          in the list is tried.  Each entry is tried\n                          until the list is exhausted.\n\n                          For answering a call, the encapsulation type\n                          requested by the peer must be found the list\n                          or the call will be refused.  If there are\n                          no entries in this table for a peer, all\n                          call requests from the peer will be refused.\n\n                          Objects in this table can only be set when\n                          the mioxPeerStatus object with the same\n                          index has a value of underCreation.  When\n                          that status object is set to invalid and\n                          deleted, the entry in this table with that\n                          peer index must also be deleted.\nPer connection information."), module_name("MIOX25-MIB"), group_objectid("1.3.6.1.2.1.10.38.2"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_MIOX25_MIB_mioxPeerEncTable : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..256"), object_identifier("1.3.6.1.2.1.10.38.2.2.1.2"), read, write, description("The value of the encapsulation type.  For\n                          IP encapsulation this will have a value of\n                          204 (hex CC).  For SNAP encapsulated\n                          packets, this will have a value of 128 (hex\n                          80).  For CLNP, ISO 8473, this will have a\n                          value of 129 (hex 81).  For ES-ES, ISO 9542,\n                          this will have a value of 130 (hex 82).  A\n                          value of 197 (hex C5) identifies the Blacker\n                          X.25 encapsulation.  A value of 0,\n                          identifies the Null encapsulation.\n\n                          This value can only be written when the\n                          mioxPeerStatus object with the same\n                          mioxPeerIndex has a value of underCreation.\n                          Setting this object to a value of 256\n                          deletes the entry.  When deleting an entry,\n                          all other entries in the mioxPeerEncTable\n                          with the same mioxPeerIndex and with an\n                          mioxPeerEncIndex higher then the deleted\n                          entry, will all have their mioxPeerEncIndex\n                          values decremented by one."), status("mandatory")] sint32 mioxPeerEncType;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PositiveInteger"), variable_value("0..2147483647"), object_identifier("1.3.6.1.2.1.10.38.2.2.1.1"), read, description("The second index in the table which\n                          distinguishes different encapsulation\n                          types."), status("mandatory"), key, key_order(2)] sint32 mioxPeerEncIndex;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("PositiveInteger"), variable_value("0..2147483647"), object_identifier("1.3.6.1.2.1.10.38.2.1.1.1"), read, description("An index value that distinguished one entry\n                          from another.  This index is independent of\n                          any other index."), status("mandatory"), virtual_key, key, key_order(1)] sint32 mioxPeerIndex;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_MIOX25_MIB_mioxPeerEncTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"MIOX25_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_MIOX25_MIB_mioxPeerEncTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_MIOX25_MIB_mioxPeerEncTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\MIOX25_MIB:SNMP_GROUP.Name=\"mioxPeerV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_MIOX25_MIB_mioxPeerEncTable";
};


