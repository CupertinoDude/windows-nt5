// Copyright (c) 1997-2001 Microsoft Corporation, All Rights Reserved
//	MOF Generated for module "HOST-RESOURCES-MIB" by smi2smir version 1.10.635.0000
qualifier write:ToInstance ToSubClass;
qualifier read:ToInstance ToSubClass;
qualifier provider:ToInstance ToSubClass;
qualifier singleton:ToInstance ToSubClass;
qualifier dynamic:ToInstance ToSubClass;
qualifier textual_convention:ToInstance ToSubClass;
qualifier object_identifier:ToInstance ToSubClass;
qualifier encoding:ToInstance ToSubClass;
qualifier object_syntax:ToInstance ToSubClass;
qualifier status:ToInstance ToSubClass;
qualifier fixed_length:ToInstance ToSubClass;
qualifier variable_length:ToInstance ToSubClass;
qualifier variable_value:ToInstance ToSubClass;
qualifier bits:ToInstance ToSubClass;
qualifier key_order:ToInstance ToSubClass;
qualifier enumeration:ToInstance ToSubClass;
qualifier bits:ToInstance ToSubClass;
qualifier description:ToInstance ToSubClass;
qualifier display_hint:ToInstance ToSubClass;
qualifier defval:ToInstance ToSubClass;
qualifier units:ToInstance ToSubClass;
qualifier reference:ToInstance ToSubClass;
qualifier virtual_key:ToInstance ToSubClass;
qualifier rowstatus:ToInstance ToSubClass;
qualifier module_name:ToInstance ToSubClass;
qualifier module_imports:ToInstance ToSubClass;
qualifier group_objectid:ToInstance ToSubClass;

#pragma namespace("\\\\.\\root\\snmp")
class SMIR:__namespace
{
[read] string Name="SMIR";
};

instance of SMIR
{
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[abstract]
class SnmpMacro
{
};

[abstract]
class SnmpObjectType:SnmpMacro
{
};

class SnmpNotifyStatus:__ExtendedStatus
{
[write] sint32 SnmpStatusCode;
[write] string Description;
};

class SnmpNotification:__ExtrinsicEvent
{
[textual_convention("TimeTicks"):ToInstance ToSubClass DisableOverride,encoding("TimeTicks"):ToInstance ToSubClass DisableOverride,object_syntax("TimeTicks"):ToInstance ToSubClass DisableOverride,read,object_identifier("1.3.6.1.2.1.1.3"):ToInstance ToSubClass DisableOverride,description("The time (in hundredths of a second) since the network management portion of the agent was last re-initialized."):ToInstance ToSubClass DisableOverride] uint32 TimeStamp;
[textual_convention("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, encoding("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, object_syntax("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, read, object_identifier("1.3.6.1.6.3.1.1.4.1"):ToInstance ToSubClass DisableOverride,description("The authoratative identification of this notification."):ToInstance ToSubClass DisableOverride] string Identification;
[read, description("The network address of the entity that created this notification."):ToInstance ToSubClass DisableOverride] string AgentAddress;
[read, description("The network address of the entity that sent this notification. This may be a proxy for the original entity."):ToInstance ToSubClass DisableOverride] string AgentTransportAddress;
[read, description("The transport protocol used by the sending entity."):ToInstance ToSubClass DisableOverride] string AgentTransportProtocol;
[read, description("The security context used to send this notification."):ToInstance ToSubClass DisableOverride] string Community;
};

class SnmpExtendedNotification:__ExtrinsicEvent
{
[textual_convention("TimeTicks"):ToInstance ToSubClass DisableOverride,encoding("TimeTicks"):ToInstance ToSubClass DisableOverride,object_syntax("TimeTicks"):ToInstance ToSubClass DisableOverride,read,object_identifier("1.3.6.1.2.1.1.3"):ToInstance ToSubClass DisableOverride,description("The time (in hundredths of a second) since the network management portion of the agent was last re-initialized."):ToInstance ToSubClass DisableOverride] uint32 TimeStamp;
[textual_convention("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, encoding("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, object_syntax("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, read, object_identifier("1.3.6.1.6.3.1.1.4.1"):ToInstance ToSubClass DisableOverride,description("The authoratative identification of this notification."):ToInstance ToSubClass DisableOverride] string Identification;
[read, description("The network address of the entity that created this notification."):ToInstance ToSubClass DisableOverride] string AgentAddress;
[read, description("The network address of the entity that sent this notification. This may be a proxy for the original entity."):ToInstance ToSubClass DisableOverride] string AgentTransportAddress;
[read, description("The transport protocol used by the sending entity."):ToInstance ToSubClass DisableOverride] string AgentTransportProtocol;
[read, description("The security context used to send this notification."):ToInstance ToSubClass DisableOverride] string Community;
};

class NotificationMapper
{
[read, key] string SnmpTrapOID;
[read] string EventClassName;
};

class ExtendedNotificationMapper
{
[read, key] string SnmpTrapOID;
[read] string EventClassName;
};

class SNMP_MODULE:__namespace
{
[read] string Name;
[read] string Module_Oid;
[read] string Module_Identity;
[read] string Organization;
[read] string Contact_Inf;
[read] string Description;
[read] string Revision;
[read] string Last_Updated;
[read] sint32 Snmp_Version;
[read] string Module_Imports;
};

[Association]
class ModuleToClassAssociator
{
[read, key] string AssocName;
[read] object ref SmirClass;
[read] object ref SmirModule;
};

[Association]
class GroupToClassAssociator
{
[read, key] string AssocName;
[read] object ref SmirClass;
[read] object ref SmirGroup;
};

[Association]
class ModToNotificationClassAssociator
{
[read, key] string AssocName;
[read] object ref SmirClass;
[read] object ref SmirModule;
};

[Association]
class ModToExtNotificationClassAssociator
{
[read, key] string AssocName;
[read] object ref SmirClass;
[read] object ref SmirModule;
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
instance of SNMP_MODULE
{
Name="HOST_RESOURCES_MIB";
Module_Oid="1.3.6.1.2.1.25.1";
Module_Identity="hostresourcesmibV1ModuleIdentity";
Organization="";
Contact_Inf="";
Description="HOST-RESOURCES-MIB";
Revision="";
Last_Updated="0000000000Z";
Snmp_Version=1;
Module_Imports="RFC-1212,RFC1213-MIB,RFC1155-SMI";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR\\HOST_RESOURCES_MIB")
class SNMP_GROUP:__namespace
{
[read] string Name;
[read] string Group_Id;
[read] string Status;
[read] string Description;
[read] string Reference;
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR\\HOST_RESOURCES_MIB")
instance of SNMP_GROUP
{
Name="hrSystemV1ObjectGroup";
Group_Id="1.3.6.1.2.1.25.1";
Status="current";
Description="";
Reference="";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description(""), module_name("HOST-RESOURCES-MIB"), singleton, group_objectid("1.3.6.1.2.1.25.1"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_HOST_RESOURCES_MIB_hrSystem : SnmpObjectType
{
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("InternationalDisplayString"), variable_length("0..128"), object_identifier("1.3.6.1.2.1.25.1.4"), read, write, description("This object contains the parameters (e.g. a\n              pathname and parameter) supplied to the load device\n              when requesting the initial operating system\n              configuration from that device."), status("mandatory")] string hrSystemInitialLoadParameters;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..2147483647"), object_identifier("1.3.6.1.2.1.25.1.7"), read, description("The maximum number of process contexts this system\n              can support.  If there is no fixed maximum, the\n              value should be zero.  On systems that have a fixed\n              maximum, this object can help diagnose failures\n              that occur when this maximum is reached."), status("mandatory")] sint32 hrSystemMaxProcesses;
	[textual_convention("DateAndTime"), encoding("OCTETSTRING"), object_syntax("DateAndTime"), display_hint("2d-1d-1d,1d:1d:1d.1d,1a1d:1d"), object_identifier("1.3.6.1.2.1.25.1.2"), read, write, description("The host's notion of the local date and time of\n              day."), status("mandatory")] string hrSystemDate;
	[textual_convention("TimeTicks"), encoding("TimeTicks"), object_syntax("TimeTicks"), object_identifier("1.3.6.1.2.1.25.1.1"), read, description("The amount of time since this host was last\n              initialized.  Note that this is different from\n              sysUpTime in MIB-II [3] because sysUpTime is the\n              uptime of the network management portion of the\n              system."), status("mandatory")] uint32 hrSystemUptime;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..2147483647"), object_identifier("1.3.6.1.2.1.25.1.3"), read, write, description("The index of the hrDeviceEntry for the device from\n              which this host is configured to load its initial\n              operating system configuration."), status("mandatory")] sint32 hrSystemInitialLoadDevice;
	[textual_convention("Gauge"), encoding("Gauge"), object_syntax("Gauge"), object_identifier("1.3.6.1.2.1.25.1.5"), read, description("The number of user sessions for which this host is\n              storing state information.  A session is a\n              collection of processes requiring a single act of\n              user authentication and possibly subject to\n              collective job control."), status("mandatory")] uint32 hrSystemNumUsers;
	[textual_convention("Gauge"), encoding("Gauge"), object_syntax("Gauge"), object_identifier("1.3.6.1.2.1.25.1.6"), read, description("The number of process contexts currently loaded or\n              running on this system."), status("mandatory")] uint32 hrSystemProcesses;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_HOST_RESOURCES_MIB_hrSystemSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"HOST_RESOURCES_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_HOST_RESOURCES_MIB_hrSystem";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_HOST_RESOURCES_MIB_hrSystemSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\HOST_RESOURCES_MIB:SNMP_GROUP.Name=\"hrSystemV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_HOST_RESOURCES_MIB_hrSystem";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR\\HOST_RESOURCES_MIB")
instance of SNMP_GROUP
{
Name="hrStorageV1ObjectGroup";
Group_Id="1.3.6.1.2.1.25.2";
Status="current";
Description="";
Reference="";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description(""), module_name("HOST-RESOURCES-MIB"), singleton, group_objectid("1.3.6.1.2.1.25.2"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_HOST_RESOURCES_MIB_hrStorage : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("KBytes"), variable_value("0..2147483647"), object_identifier("1.3.6.1.2.1.25.2.2"), read, description("The amount of physical main memory contained by\n              the host."), status("mandatory")] sint32 hrMemorySize;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_HOST_RESOURCES_MIB_hrStorageSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"HOST_RESOURCES_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_HOST_RESOURCES_MIB_hrStorage";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_HOST_RESOURCES_MIB_hrStorageSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\HOST_RESOURCES_MIB:SNMP_GROUP.Name=\"hrStorageV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_HOST_RESOURCES_MIB_hrStorage";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description("The (conceptual) table of logical storage areas on\n              the host.\n\n              An entry shall be placed in the storage table for\n              each logical area of storage that is allocated and\n              has fixed resource limits.  The amount of storage\n              represented in an entity is the amount actually\n              usable by the requesting entity, and excludes loss\n              due to formatting or file system reference\n              information.\n\n              These entries are associated with logical storage\n              areas, as might be seen by an application, rather\n              than physical storage entities which are typically\n              seen by an operating system.  Storage such as tapes\n              and floppies without file systems on them are\n              typically not allocated in chunks by the operating\n              system to requesting applications, and therefore\n              shouldn't appear in this table.  Examples of valid\n              storage for this table include disk partitions,\n              file systems, ram (for some architectures this is\n              further segmented into regular memory, extended\n              memory, and so on), backing store for virtual\n              memory (`swap space').\n\n              This table is intended to be a useful diagnostic\n              for `out of memory' and `out of buffers' types of\n              failures.  In addition, it can be a useful\n              performance monitoring tool for tracking memory,\n              disk, or buffer usage.\nA (conceptual) entry for one logical storage area\n              on the host.  As an example, an instance of the\n              hrStorageType object might be named\n              hrStorageType.3"), module_name("HOST-RESOURCES-MIB"), group_objectid("1.3.6.1.2.1.25.2"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_HOST_RESOURCES_MIB_hrStorageTable : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..2147483647"), object_identifier("1.3.6.1.2.1.25.2.3.1.6"), read, description("The amount of the storage represented by this\n              entry that is allocated, in units of\n              hrStorageAllocationUnits."), status("mandatory")] sint32 hrStorageUsed;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..2147483647"), object_identifier("1.3.6.1.2.1.25.2.3.1.5"), read, write, description("The size of the storage represented by this entry,\n              in units of hrStorageAllocationUnits."), status("mandatory")] sint32 hrStorageSize;
	[textual_convention("OBJECTIDENTIFIER"), encoding("OBJECTIDENTIFIER"), object_syntax("OBJECTIDENTIFIER"), object_identifier("1.3.6.1.2.1.25.2.3.1.2"), read, description("The type of storage represented by this entry."), status("mandatory")] string hrStorageType;
	[textual_convention("DisplayString"), encoding("OCTETSTRING"), object_syntax("DisplayString"), display_hint("255a"), object_identifier("1.3.6.1.2.1.25.2.3.1.3"), read, description("A description of the type and instance of the\n              storage described by this entry."), status("mandatory")] string hrStorageDescr;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..2147483647"), object_identifier("1.3.6.1.2.1.25.2.3.1.1"), read, description("A unique value for each logical storage area\n              contained by the host."), status("mandatory"), key, key_order(1)] sint32 hrStorageIndex;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..2147483647"), object_identifier("1.3.6.1.2.1.25.2.3.1.4"), read, description("The size, in bytes, of the data objects allocated\n               from this pool.  If this entry is monitoring\n               sectors, blocks, buffers, or packets, for example,\n               this number will commonly be greater than one.\n               Otherwise this number will typically be one."), status("mandatory")] sint32 hrStorageAllocationUnits;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.25.2.3.1.7"), read, description("The number of requests for storage represented by\n              this entry that could not be honored due to not\n              enough storage.  It should be noted that as this\n              object has a SYNTAX of Counter, that it does not\n              have a defined initial value.  However, it is\n              recommended that this object be initialized to\n              zero."), status("mandatory")] uint32 hrStorageAllocationFailures;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_HOST_RESOURCES_MIB_hrStorageTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"HOST_RESOURCES_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_HOST_RESOURCES_MIB_hrStorageTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_HOST_RESOURCES_MIB_hrStorageTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\HOST_RESOURCES_MIB:SNMP_GROUP.Name=\"hrStorageV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_HOST_RESOURCES_MIB_hrStorageTable";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR\\HOST_RESOURCES_MIB")
instance of SNMP_GROUP
{
Name="hrDeviceV1ObjectGroup";
Group_Id="1.3.6.1.2.1.25.3";
Status="current";
Description="";
Reference="";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description("The (conceptual) table of file systems local to\n               this host or remotely mounted from a file server.\n               File systems that are in only one user's\n               environment on a multi-user system will not be\n               included in this table.\nA (conceptual) entry for one file system local to\n               this host or remotely mounted from a file server.\n               File systems that are in only one user's\n               environment on a multi-user system will not be\n               included in this table.\n\n               As an example of how objects in this table are\n               named, an instance of the hrFSMountPoint object\n               might be named hrFSMountPoint.3"), module_name("HOST-RESOURCES-MIB"), group_objectid("1.3.6.1.2.1.25.3"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_HOST_RESOURCES_MIB_hrFSTable : SnmpObjectType
{
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("InternationalDisplayString"), variable_length("0..128"), object_identifier("1.3.6.1.2.1.25.3.8.1.3"), read, description("A description of the name and/or address of the\n               server that this file system is mounted from.\n               This may also include parameters such as the mount\n               point on the remote file system.  If this is not a\n               remote file system, this string should have a\n               length of zero."), status("mandatory")] string hrFSRemoteMountPoint;
	[textual_convention("DateAndTime"), encoding("OCTETSTRING"), object_syntax("DateAndTime"), display_hint("2d-1d-1d,1d:1d:1d.1d,1a1d:1d"), object_identifier("1.3.6.1.2.1.25.3.8.1.8"), read, write, description("The last date at which this complete file system\n              was copied to another storage device for backup.\n              This information is useful for ensuring that\n              backups are being performed regularly.\n\n              If this information is not known, then this\n              variable shall have the value corresponding to\n              January 1, year 0000, 00:00:00.0, which is encoded\n              as (hex)'00 00 01 01 00 00 00 00'."), status("mandatory")] string hrFSLastFullBackupDate;
	[textual_convention("EnumeratedINTEGER"), enumeration("true(1),false(2)"), encoding("INTEGER"), object_syntax("Boolean"), object_identifier("1.3.6.1.2.1.25.3.8.1.6"), read, description("A flag indicating whether this file system is\n              bootable."), status("mandatory")] string hrFSBootable;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("InternationalDisplayString"), variable_length("0..128"), object_identifier("1.3.6.1.2.1.25.3.8.1.2"), read, description("The path name of the root of this file system."), status("mandatory")] string hrFSMountPoint;
	[textual_convention("DateAndTime"), encoding("OCTETSTRING"), object_syntax("DateAndTime"), display_hint("2d-1d-1d,1d:1d:1d.1d,1a1d:1d"), object_identifier("1.3.6.1.2.1.25.3.8.1.9"), read, write, description("The last date at which a portion of this file\n              system was copied to another storage device for\n              backup.  This information is useful for ensuring\n              that backups are being performed regularly.\n\n              If this information is not known, then this\n              variable shall have the value corresponding to\n              January 1, year 0000, 00:00:00.0, which is encoded\n              as (hex)'00 00 01 01 00 00 00 00'."), status("mandatory")] string hrFSLastPartialBackupDate;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..2147483647"), object_identifier("1.3.6.1.2.1.25.3.8.1.7"), read, description("The index of the hrStorageEntry that represents\n               information about this file system.  If there is\n               no such information available, then this value\n               shall be zero.  The relevant storage entry will be\n               useful in tracking the percent usage of this file\n               system and diagnosing errors that may occur when\n               it runs out of space."), status("mandatory")] sint32 hrFSStorageIndex;
	[textual_convention("OBJECTIDENTIFIER"), encoding("OBJECTIDENTIFIER"), object_syntax("OBJECTIDENTIFIER"), object_identifier("1.3.6.1.2.1.25.3.8.1.4"), read, description("The value of this object identifies the type of\n              this file system."), status("mandatory")] string hrFSType;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..2147483647"), object_identifier("1.3.6.1.2.1.25.3.8.1.1"), read, description("A unique value for each file system local to this\n               host.  The value for each file system must remain\n               constant at least from one re-initialization of\n               the agent to the next re-initialization."), status("mandatory"), key, key_order(1)] sint32 hrFSIndex;
	[textual_convention("EnumeratedINTEGER"), enumeration("readWrite(1),readOnly(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.25.3.8.1.5"), read, description("An indication if this file system is logically\n              configured by the operating system to be readable\n              and writable or only readable.  This does not\n              represent any local access-control policy, except\n              one that is applied to the file system as a whole."), status("mandatory")] string hrFSAccess;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_HOST_RESOURCES_MIB_hrFSTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"HOST_RESOURCES_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_HOST_RESOURCES_MIB_hrFSTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_HOST_RESOURCES_MIB_hrFSTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\HOST_RESOURCES_MIB:SNMP_GROUP.Name=\"hrDeviceV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_HOST_RESOURCES_MIB_hrFSTable";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description("The (conceptual) table of long-term storage\n              devices contained by the host.  In particular, disk\n              devices accessed remotely over a network are not\n              included here.\n\n              Note that this table is potentially sparse: a\n              (conceptual) entry exists only if the correspondent\n              value of the hrDeviceType object is\n              `hrDeviceDiskStorage'.\nA (conceptual) entry for one long-term storage\n              device contained by the host.  The hrDeviceIndex in\n              the index represents the entry in the hrDeviceTable\n              that corresponds to the hrDiskStorageEntry. As an\n              example, an instance of the hrDiskStorageCapacity\n              object might be named hrDiskStorageCapacity.3"), module_name("HOST-RESOURCES-MIB"), group_objectid("1.3.6.1.2.1.25.3"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_HOST_RESOURCES_MIB_hrDiskStorageTable : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("KBytes"), variable_value("0..2147483647"), object_identifier("1.3.6.1.2.1.25.3.6.1.4"), read, description("The total size for this long-term storage device."), status("mandatory")] sint32 hrDiskStorageCapacity;
	[textual_convention("EnumeratedINTEGER"), enumeration("true(1),false(2)"), encoding("INTEGER"), object_syntax("Boolean"), object_identifier("1.3.6.1.2.1.25.3.6.1.3"), read, description("Denotes whether or not the disk media may be\n               removed from the drive."), status("mandatory")] string hrDiskStorageRemoveble;
	[textual_convention("EnumeratedINTEGER"), enumeration("other(1),unknown(2),hardDisk(3),floppyDisk(4),opticalDiskROM(5),opticalDiskWORM(6),opticalDiskRW(7),ramDisk(8)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.25.3.6.1.2"), read, description("An indication of the type of media used in this\n              long-term storage device."), status("mandatory")] string hrDiskStorageMedia;
	[textual_convention("EnumeratedINTEGER"), enumeration("readWrite(1),readOnly(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.25.3.6.1.1"), read, description("An indication if this long-term storage device is\n              readable and writable or only readable.  This\n              should reflect the media type, any write-protect\n              mechanism, and any device configuration that\n              affects the entire device."), status("mandatory")] string hrDiskStorageAccess;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..2147483647"), object_identifier("1.3.6.1.2.1.25.3.2.1.1"), read, description("A unique value for each device contained by the\n              host.  The value for each device must remain\n              constant at least from one re-initialization of the\n              agent to the next re-initialization."), status("mandatory"), virtual_key, key, key_order(1)] sint32 hrDeviceIndex;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_HOST_RESOURCES_MIB_hrDiskStorageTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"HOST_RESOURCES_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_HOST_RESOURCES_MIB_hrDiskStorageTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_HOST_RESOURCES_MIB_hrDiskStorageTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\HOST_RESOURCES_MIB:SNMP_GROUP.Name=\"hrDeviceV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_HOST_RESOURCES_MIB_hrDiskStorageTable";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description("The (conceptual) table of devices contained by the\n              host.\nA (conceptual) entry for one device contained by\n\n\n\n\n\n              the host.  As an example, an instance of the\n              hrDeviceType object might be named hrDeviceType.3"), module_name("HOST-RESOURCES-MIB"), group_objectid("1.3.6.1.2.1.25.3"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_HOST_RESOURCES_MIB_hrDeviceTable : SnmpObjectType
{
	[textual_convention("OBJECTIDENTIFIER"), encoding("OBJECTIDENTIFIER"), object_syntax("OBJECTIDENTIFIER"), object_identifier("1.3.6.1.2.1.25.3.2.1.2"), read, description("An indication of the type of device.\n\n              If this value is `hrDeviceProcessor { hrDeviceTypes\n              3 }' then an entry exists in the hrProcessorTable\n              which corresponds to this device.\n\n              If this value is `hrDeviceNetwork { hrDeviceTypes 4\n              }', then an entry exists in the hrNetworkTable\n              which corresponds to this device.\n\n              If this value is `hrDevicePrinter { hrDeviceTypes 5\n              }', then an entry exists in the hrPrinterTable\n              which corresponds to this device.\n\n              If this value is `hrDeviceDiskStorage {\n              hrDeviceTypes 6 }', then an entry exists in the\n              hrDiskStorageTable which corresponds to this\n              device."), status("mandatory")] string hrDeviceType;
	[textual_convention("DisplayString"), encoding("OCTETSTRING"), object_syntax("DisplayString"), variable_length("0..64"), object_identifier("1.3.6.1.2.1.25.3.2.1.3"), read, description("A textual description of this device, including\n              the device's manufacturer and revision, and\n              optionally, its serial number."), status("mandatory")] string hrDeviceDescr;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..2147483647"), object_identifier("1.3.6.1.2.1.25.3.2.1.1"), read, description("A unique value for each device contained by the\n              host.  The value for each device must remain\n              constant at least from one re-initialization of the\n              agent to the next re-initialization."), status("mandatory"), key, key_order(1)] sint32 hrDeviceIndex;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.25.3.2.1.6"), read, description("The number of errors detected on this device.  It\n               should be noted that as this object has a SYNTAX\n               of Counter, that it does not have a defined\n               initial value.  However, it is recommended that\n               this object be initialized to zero."), status("mandatory")] uint32 hrDeviceErrors;
	[textual_convention("EnumeratedINTEGER"), enumeration("unknown(1),running(2),warning(3),testing(4),down(5)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.25.3.2.1.5"), read, description("The current operational state of the device\n              described by this row of the table.  A value\n              unknown(1) indicates that the current state of the\n              device is unknown.  running(2) indicates that the\n              device is up and running and that no unusual error\n              conditions are known.  The warning(3) state\n              indicates that agent has been informed of an\n              unusual error condition by the operational software\n              (e.g., a disk device driver) but that the device is\n              still 'operational'.  An example would be high\n              number of soft errors on a disk.  A value of\n              testing(4), indicates that the device is not\n              available for use because it is in the testing\n              state.  The state of down(5) is used only when the\n              agent has been informed that the device is not\n              available for any use."), status("mandatory")] string hrDeviceStatus;
	[textual_convention("OBJECTIDENTIFIER"), encoding("OBJECTIDENTIFIER"), object_syntax("ProductID"), object_identifier("1.3.6.1.2.1.25.3.2.1.4"), read, description("The product ID for this device."), status("mandatory")] string hrDeviceID;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_HOST_RESOURCES_MIB_hrDeviceTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"HOST_RESOURCES_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_HOST_RESOURCES_MIB_hrDeviceTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_HOST_RESOURCES_MIB_hrDeviceTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\HOST_RESOURCES_MIB:SNMP_GROUP.Name=\"hrDeviceV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_HOST_RESOURCES_MIB_hrDeviceTable";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description("The (conceptual) table of partitions for long-term\n              storage devices contained by the host.  In\n              particular, partitions accessed remotely over a\n              network are not included here.\nA (conceptual) entry for one partition.  The\n              hrDeviceIndex in the index represents the entry in\n              the hrDeviceTable that corresponds to the\n              hrPartitionEntry.\n\n              As an example of how objects in this table are\n              named, an instance of the hrPartitionSize object\n              might be named hrPartitionSize.3.1"), module_name("HOST-RESOURCES-MIB"), group_objectid("1.3.6.1.2.1.25.3"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_HOST_RESOURCES_MIB_hrPartitionTable : SnmpObjectType
{
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("OCTETSTRING"), object_identifier("1.3.6.1.2.1.25.3.7.1.3"), read, description("A descriptor which uniquely represents this\n              partition to the responsible operating system.  On\n              some systems, this might take on a binary\n              representation."), status("mandatory")] string hrPartitionID;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("KBytes"), variable_value("0..2147483647"), object_identifier("1.3.6.1.2.1.25.3.7.1.4"), read, description("The size of this partition."), status("mandatory")] sint32 hrPartitionSize;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("InternationalDisplayString"), variable_length("0..128"), object_identifier("1.3.6.1.2.1.25.3.7.1.2"), read, description("A textual description of this partition."), status("mandatory")] string hrPartitionLabel;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..2147483647"), object_identifier("1.3.6.1.2.1.25.3.7.1.1"), read, description("A unique value for each partition on this long-\n              term storage device.  The value for each long-term\n              storage device must remain constant at least from\n              one re-initialization of the agent to the next re-\n\n\n\n\n\n              initialization."), status("mandatory"), key, key_order(2)] sint32 hrPartitionIndex;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..2147483647"), object_identifier("1.3.6.1.2.1.25.3.7.1.5"), read, description("The index of the file system mounted on this\n               partition.  If no file system is mounted on this\n               partition, then this value shall be zero.  Note\n               that multiple partitions may point to one file\n               system, denoting that that file system resides on\n               those partitions.  Multiple file systems may not\n               reside on one partition."), status("mandatory")] sint32 hrPartitionFSIndex;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..2147483647"), object_identifier("1.3.6.1.2.1.25.3.2.1.1"), read, description("A unique value for each device contained by the\n              host.  The value for each device must remain\n              constant at least from one re-initialization of the\n              agent to the next re-initialization."), status("mandatory"), virtual_key, key, key_order(1)] sint32 hrDeviceIndex;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_HOST_RESOURCES_MIB_hrPartitionTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"HOST_RESOURCES_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_HOST_RESOURCES_MIB_hrPartitionTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_HOST_RESOURCES_MIB_hrPartitionTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\HOST_RESOURCES_MIB:SNMP_GROUP.Name=\"hrDeviceV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_HOST_RESOURCES_MIB_hrPartitionTable";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description("The (conceptual) table of printers local to the\n              host.\n\n              Note that this table is potentially sparse: a\n              (conceptual) entry exists only if the correspondent\n              value of the hrDeviceType object is\n              `hrDevicePrinter'.\nA (conceptual) entry for one printer local to the\n              host.  The hrDeviceIndex in the index represents\n              the entry in the hrDeviceTable that corresponds to\n              the hrPrinterEntry.\n\n              As an example of how objects in this table are\n              named, an instance of the hrPrinterStatus object\n              might be named hrPrinterStatus.3"), module_name("HOST-RESOURCES-MIB"), group_objectid("1.3.6.1.2.1.25.3"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_HOST_RESOURCES_MIB_hrPrinterTable : SnmpObjectType
{
	[textual_convention("EnumeratedINTEGER"), enumeration("other(1),unknown(2),idle(3),printing(4),warmup(5)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.25.3.5.1.1"), read, description("The current status of this printer device.  When\n               in the idle(1), printing(2), or warmup(3) state,\n               the corresponding hrDeviceStatus should be\n               running(2) or warning(3).  When in the unknown\n               state, the corresponding hrDeviceStatus should be\n               unknown(1)."), status("mandatory")] string hrPrinterStatus;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("OCTETSTRING"), object_identifier("1.3.6.1.2.1.25.3.5.1.2"), read, description("This object represents any error conditions\n               detected by the printer.  The error conditions are\n               encoded as bits in an octet string, with the\n               following definitions:\n\n                    Condition         Bit #    hrDeviceStatus\n\n                    lowPaper          0        warning(3)\n                    noPaper           1        down(5)\n                    lowToner          2        warning(3)\n                    noToner           3        down(5)\n                    doorOpen          4        down(5)\n                    jammed            5        down(5)\n                    offline           6        down(5)\n                    serviceRequested  7        warning(3)\n\n               If multiple conditions are currently detected and\n               the hrDeviceStatus would not otherwise be\n               unknown(1) or testing(4), the hrDeviceStatus shall\n               correspond to the worst state of those indicated,\n               where down(5) is worse than warning(3) which is\n               worse than running(2).\n\n               Bits are numbered starting with the most\n\n\n\n\n\n               significant bit of the first byte being bit 0, the\n               least significant bit of the first byte being bit\n               7, the most significant bit of the second byte\n               being bit 8, and so on.  A one bit encodes that\n               the condition was detected, while a zero bit\n               encodes that the condition was not detected.\n\n               This object is useful for alerting an operator to\n               specific warning or error conditions that may\n               occur, especially those requiring human\n               intervention."), status("mandatory")] string hrPrinterDetectedErrorState;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..2147483647"), object_identifier("1.3.6.1.2.1.25.3.2.1.1"), read, description("A unique value for each device contained by the\n              host.  The value for each device must remain\n              constant at least from one re-initialization of the\n              agent to the next re-initialization."), status("mandatory"), virtual_key, key, key_order(1)] sint32 hrDeviceIndex;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_HOST_RESOURCES_MIB_hrPrinterTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"HOST_RESOURCES_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_HOST_RESOURCES_MIB_hrPrinterTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_HOST_RESOURCES_MIB_hrPrinterTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\HOST_RESOURCES_MIB:SNMP_GROUP.Name=\"hrDeviceV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_HOST_RESOURCES_MIB_hrPrinterTable";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description("The (conceptual) table of network devices\n              contained by the host.\n\n              Note that this table is potentially sparse: a\n              (conceptual) entry exists only if the correspondent\n              value of the hrDeviceType object is\n              `hrDeviceNetwork'.\nA (conceptual) entry for one network device\n              contained by the host.  The hrDeviceIndex in the\n              index represents the entry in the hrDeviceTable\n              that corresponds to the hrNetworkEntry.\n\n              As an example of how objects in this table are\n              named, an instance of the hrNetworkIfIndex object\n              might be named hrNetworkIfIndex.3"), module_name("HOST-RESOURCES-MIB"), group_objectid("1.3.6.1.2.1.25.3"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_HOST_RESOURCES_MIB_hrNetworkTable : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.25.3.4.1.1"), read, description("The value of ifIndex which corresponds to this\n              network device."), status("mandatory")] sint32 hrNetworkIfIndex;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..2147483647"), object_identifier("1.3.6.1.2.1.25.3.2.1.1"), read, description("A unique value for each device contained by the\n              host.  The value for each device must remain\n              constant at least from one re-initialization of the\n              agent to the next re-initialization."), status("mandatory"), virtual_key, key, key_order(1)] sint32 hrDeviceIndex;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_HOST_RESOURCES_MIB_hrNetworkTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"HOST_RESOURCES_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_HOST_RESOURCES_MIB_hrNetworkTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_HOST_RESOURCES_MIB_hrNetworkTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\HOST_RESOURCES_MIB:SNMP_GROUP.Name=\"hrDeviceV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_HOST_RESOURCES_MIB_hrNetworkTable";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description("The (conceptual) table of processors contained by\n              the host.\n\n              Note that this table is potentially sparse: a\n              (conceptual) entry exists only if the correspondent\n              value of the hrDeviceType object is\n              `hrDeviceProcessor'.\nA (conceptual) entry for one processor contained\n              by the host.  The hrDeviceIndex in the index\n              represents the entry in the hrDeviceTable that\n              corresponds to the hrProcessorEntry.\n\n              As an example of how objects in this table are\n              named, an instance of the hrProcessorFrwID object\n              might be named hrProcessorFrwID.3"), module_name("HOST-RESOURCES-MIB"), group_objectid("1.3.6.1.2.1.25.3"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_HOST_RESOURCES_MIB_hrProcessorTable : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..100"), object_identifier("1.3.6.1.2.1.25.3.3.1.2"), read, description("The average, over the last minute, of the\n              percentage of time that this processor was not\n              idle."), status("mandatory")] sint32 hrProcessorLoad;
	[textual_convention("OBJECTIDENTIFIER"), encoding("OBJECTIDENTIFIER"), object_syntax("ProductID"), object_identifier("1.3.6.1.2.1.25.3.3.1.1"), read, description("The product ID of the firmware associated with the\n              processor."), status("mandatory")] string hrProcessorFrwID;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..2147483647"), object_identifier("1.3.6.1.2.1.25.3.2.1.1"), read, description("A unique value for each device contained by the\n              host.  The value for each device must remain\n              constant at least from one re-initialization of the\n              agent to the next re-initialization."), status("mandatory"), virtual_key, key, key_order(1)] sint32 hrDeviceIndex;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_HOST_RESOURCES_MIB_hrProcessorTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"HOST_RESOURCES_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_HOST_RESOURCES_MIB_hrProcessorTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_HOST_RESOURCES_MIB_hrProcessorTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\HOST_RESOURCES_MIB:SNMP_GROUP.Name=\"hrDeviceV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_HOST_RESOURCES_MIB_hrProcessorTable";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR\\HOST_RESOURCES_MIB")
instance of SNMP_GROUP
{
Name="hrSWRunV1ObjectGroup";
Group_Id="1.3.6.1.2.1.25.4";
Status="current";
Description="";
Reference="";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description(""), module_name("HOST-RESOURCES-MIB"), singleton, group_objectid("1.3.6.1.2.1.25.4"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_HOST_RESOURCES_MIB_hrSWRun : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..2147483647"), object_identifier("1.3.6.1.2.1.25.4.1"), read, description("The value of the hrSWRunIndex for the\n               hrSWRunEntry that represents the primary operating\n               system running on this host.  This object is\n               useful for quickly and uniquely identifying that\n               primary operating system."), status("mandatory")] sint32 hrSWOSIndex;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_HOST_RESOURCES_MIB_hrSWRunSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"HOST_RESOURCES_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_HOST_RESOURCES_MIB_hrSWRun";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_HOST_RESOURCES_MIB_hrSWRunSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\HOST_RESOURCES_MIB:SNMP_GROUP.Name=\"hrSWRunV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_HOST_RESOURCES_MIB_hrSWRun";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description("The (conceptual) table of software running on the\n              host.\nA (conceptual) entry for one piece of software\n              running on the host Note that because the installed\n              software table only contains information for\n              software stored locally on this host, not every\n              piece of running software will be found in the\n              installed software table.  This is true of software\n              that was loaded and run from a non-local source,\n              such as a network-mounted file system.\n\n              As an example of how objects in this table are\n              named, an instance of the hrSWRunName object might\n              be named hrSWRunName.1287"), module_name("HOST-RESOURCES-MIB"), group_objectid("1.3.6.1.2.1.25.4"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_HOST_RESOURCES_MIB_hrSWRunTable : SnmpObjectType
{
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("InternationalDisplayString"), variable_length("0..64"), object_identifier("1.3.6.1.2.1.25.4.2.1.2"), read, description("A textual description of this running piece of\n              software, including the manufacturer, revision,\n              and the name by which it is commonly known.  If\n              this software was installed locally, this should be\n              the same string as used in the corresponding\n              hrSWInstalledName."), status("mandatory")] string hrSWRunName;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("InternationalDisplayString"), variable_length("0..128"), object_identifier("1.3.6.1.2.1.25.4.2.1.4"), read, description("A description of the location on long-term storage\n              (e.g. a disk drive) from which this software was\n              loaded."), status("mandatory")] string hrSWRunPath;
	[textual_convention("EnumeratedINTEGER"), enumeration("unknown(1),operatingSystem(2),deviceDriver(3),application(4)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.25.4.2.1.6"), read, description("The type of this software."), status("mandatory")] string hrSWRunType;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..2147483647"), object_identifier("1.3.6.1.2.1.25.4.2.1.1"), read, description("A unique value for each piece of software running\n              on the host.  Wherever possible, this should be the\n              system's native, unique identification number."), status("mandatory"), key, key_order(1)] sint32 hrSWRunIndex;
	[textual_convention("EnumeratedINTEGER"), enumeration("running(1),runnable(2),notRunnable(3),invalid(4)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.25.4.2.1.7"), read, write, description("The status of this running piece of software.\n              Setting this value to invalid(4) shall cause this\n              software to stop running and to be unloaded."), status("mandatory")] string hrSWRunStatus;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("InternationalDisplayString"), variable_length("0..128"), object_identifier("1.3.6.1.2.1.25.4.2.1.5"), read, description("A description of the parameters supplied to this\n              software when it was initially loaded."), status("mandatory")] string hrSWRunParameters;
	[textual_convention("OBJECTIDENTIFIER"), encoding("OBJECTIDENTIFIER"), object_syntax("ProductID"), object_identifier("1.3.6.1.2.1.25.4.2.1.3"), read, description("The product ID of this running piece of software."), status("mandatory")] string hrSWRunID;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_HOST_RESOURCES_MIB_hrSWRunTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"HOST_RESOURCES_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_HOST_RESOURCES_MIB_hrSWRunTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_HOST_RESOURCES_MIB_hrSWRunTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\HOST_RESOURCES_MIB:SNMP_GROUP.Name=\"hrSWRunV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_HOST_RESOURCES_MIB_hrSWRunTable";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR\\HOST_RESOURCES_MIB")
instance of SNMP_GROUP
{
Name="hrSWRunPerfV1ObjectGroup";
Group_Id="1.3.6.1.2.1.25.5";
Status="current";
Description="";
Reference="";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description("The (conceptual) table of running software\n               performance metrics.\nA (conceptual) entry containing software\n               performance metrics.  As an example, an instance\n               of the hrSWRunPerfCPU object might be named\n               hrSWRunPerfCPU.1287"), module_name("HOST-RESOURCES-MIB"), group_objectid("1.3.6.1.2.1.25.5"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_HOST_RESOURCES_MIB_hrSWRunPerfTable : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.25.5.1.1.1"), read, description("The number of centi-seconds of the total system's\n               CPU resources consumed by this process.  Note that\n               on a multi-processor system, this value may\n               increment by more than one centi-second in one\n               centi-second of real (wall clock) time."), status("mandatory")] sint32 hrSWRunPerfCPU;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("KBytes"), variable_value("0..2147483647"), object_identifier("1.3.6.1.2.1.25.5.1.1.2"), read, description("The total amount of real system memory allocated\n               to this process."), status("mandatory")] sint32 hrSWRunPerfMem;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..2147483647"), object_identifier("1.3.6.1.2.1.25.4.2.1.1"), read, description("A unique value for each piece of software running\n              on the host.  Wherever possible, this should be the\n              system's native, unique identification number."), status("mandatory"), virtual_key, key, key_order(1)] sint32 hrSWRunIndex;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_HOST_RESOURCES_MIB_hrSWRunPerfTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"HOST_RESOURCES_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_HOST_RESOURCES_MIB_hrSWRunPerfTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_HOST_RESOURCES_MIB_hrSWRunPerfTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\HOST_RESOURCES_MIB:SNMP_GROUP.Name=\"hrSWRunPerfV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_HOST_RESOURCES_MIB_hrSWRunPerfTable";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR\\HOST_RESOURCES_MIB")
instance of SNMP_GROUP
{
Name="hrSWInstalledV1ObjectGroup";
Group_Id="1.3.6.1.2.1.25.6";
Status="current";
Description="";
Reference="";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description(""), module_name("HOST-RESOURCES-MIB"), singleton, group_objectid("1.3.6.1.2.1.25.6"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_HOST_RESOURCES_MIB_hrSWInstalled : SnmpObjectType
{
	[textual_convention("TimeTicks"), encoding("TimeTicks"), object_syntax("TimeTicks"), object_identifier("1.3.6.1.2.1.25.6.1"), read, description("The value of sysUpTime when an entry in the\n              hrSWInstalledTable was last added, renamed, or\n              deleted.  Because this table is likely to contain\n              many entries, polling of this object allows a\n              management station to determine when re-downloading\n              of the table might be useful."), status("mandatory")] uint32 hrSWInstalledLastChange;
	[textual_convention("TimeTicks"), encoding("TimeTicks"), object_syntax("TimeTicks"), object_identifier("1.3.6.1.2.1.25.6.2"), read, description("The value of sysUpTime when the hrSWInstalledTable\n              was last completely updated.  Because caching of\n              this data will be a popular implementation\n              strategy, retrieval of this object allows a\n              management station to obtain a guarantee that no\n              data in this table is older than the indicated\n              time."), status("mandatory")] uint32 hrSWInstalledLastUpdateTime;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_HOST_RESOURCES_MIB_hrSWInstalledSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"HOST_RESOURCES_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_HOST_RESOURCES_MIB_hrSWInstalled";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_HOST_RESOURCES_MIB_hrSWInstalledSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\HOST_RESOURCES_MIB:SNMP_GROUP.Name=\"hrSWInstalledV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_HOST_RESOURCES_MIB_hrSWInstalled";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description("The (conceptual) table of software installed on\n\n\n\n\n\n              this host.\nA (conceptual) entry for a piece of software\n              installed on this host.\n\n              As an example of how objects in this table are\n              named, an instance of the hrSWInstalledName object\n              might be named hrSWInstalledName.96"), module_name("HOST-RESOURCES-MIB"), group_objectid("1.3.6.1.2.1.25.6"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_HOST_RESOURCES_MIB_hrSWInstalledTable : SnmpObjectType
{
	[textual_convention("OBJECTIDENTIFIER"), encoding("OBJECTIDENTIFIER"), object_syntax("ProductID"), object_identifier("1.3.6.1.2.1.25.6.3.1.3"), read, description("The product ID of this installed piece of\n              software."), status("mandatory")] string hrSWInstalledID;
	[textual_convention("DateAndTime"), encoding("OCTETSTRING"), object_syntax("DateAndTime"), display_hint("2d-1d-1d,1d:1d:1d.1d,1a1d:1d"), object_identifier("1.3.6.1.2.1.25.6.3.1.5"), read, description("The last-modification date of this application as\n              it would appear in a directory listing."), status("mandatory")] string hrSWInstalledDate;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("InternationalDisplayString"), variable_length("0..64"), object_identifier("1.3.6.1.2.1.25.6.3.1.2"), read, description("A textual description of this installed piece of\n              software, including the manufacturer, revision, the\n              name by which it is commonly known, and optionally,\n              its serial number."), status("mandatory")] string hrSWInstalledName;
	[textual_convention("EnumeratedINTEGER"), enumeration("unknown(1),operatingSystem(2),deviceDriver(3),application(4)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.25.6.3.1.4"), read, description("The type of this software."), status("mandatory")] string hrSWInstalledType;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..2147483647"), object_identifier("1.3.6.1.2.1.25.6.3.1.1"), read, description("A unique value for each piece of software\n              installed on the host.  This value shall be in the\n              range from 1 to the number of pieces of software\n              installed on the host."), status("mandatory"), key, key_order(1)] sint32 hrSWInstalledIndex;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_HOST_RESOURCES_MIB_hrSWInstalledTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"HOST_RESOURCES_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_HOST_RESOURCES_MIB_hrSWInstalledTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_HOST_RESOURCES_MIB_hrSWInstalledTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\HOST_RESOURCES_MIB:SNMP_GROUP.Name=\"hrSWInstalledV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_HOST_RESOURCES_MIB_hrSWInstalledTable";
};


