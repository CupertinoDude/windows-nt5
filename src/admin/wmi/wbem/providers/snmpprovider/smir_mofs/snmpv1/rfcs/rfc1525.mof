// Copyright (c) 1997-2001 Microsoft Corporation, All Rights Reserved
//	MOF Generated for module "SOURCE-ROUTING-MIB" by smi2smir version 1.10.635.0000
qualifier write:ToInstance ToSubClass;
qualifier read:ToInstance ToSubClass;
qualifier provider:ToInstance ToSubClass;
qualifier singleton:ToInstance ToSubClass;
qualifier dynamic:ToInstance ToSubClass;
qualifier textual_convention:ToInstance ToSubClass;
qualifier object_identifier:ToInstance ToSubClass;
qualifier encoding:ToInstance ToSubClass;
qualifier object_syntax:ToInstance ToSubClass;
qualifier status:ToInstance ToSubClass;
qualifier fixed_length:ToInstance ToSubClass;
qualifier variable_length:ToInstance ToSubClass;
qualifier variable_value:ToInstance ToSubClass;
qualifier bits:ToInstance ToSubClass;
qualifier key_order:ToInstance ToSubClass;
qualifier enumeration:ToInstance ToSubClass;
qualifier bits:ToInstance ToSubClass;
qualifier description:ToInstance ToSubClass;
qualifier display_hint:ToInstance ToSubClass;
qualifier defval:ToInstance ToSubClass;
qualifier units:ToInstance ToSubClass;
qualifier reference:ToInstance ToSubClass;
qualifier virtual_key:ToInstance ToSubClass;
qualifier rowstatus:ToInstance ToSubClass;
qualifier module_name:ToInstance ToSubClass;
qualifier module_imports:ToInstance ToSubClass;
qualifier group_objectid:ToInstance ToSubClass;

#pragma namespace("\\\\.\\root\\snmp")
class SMIR:__namespace
{
[read] string Name="SMIR";
};

instance of SMIR
{
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[abstract]
class SnmpMacro
{
};

[abstract]
class SnmpObjectType:SnmpMacro
{
};

class SnmpNotifyStatus:__ExtendedStatus
{
[write] sint32 SnmpStatusCode;
[write] string Description;
};

class SnmpNotification:__ExtrinsicEvent
{
[textual_convention("TimeTicks"):ToInstance ToSubClass DisableOverride,encoding("TimeTicks"):ToInstance ToSubClass DisableOverride,object_syntax("TimeTicks"):ToInstance ToSubClass DisableOverride,read,object_identifier("1.3.6.1.2.1.1.3"):ToInstance ToSubClass DisableOverride,description("The time (in hundredths of a second) since the network management portion of the agent was last re-initialized."):ToInstance ToSubClass DisableOverride] uint32 TimeStamp;
[textual_convention("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, encoding("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, object_syntax("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, read, object_identifier("1.3.6.1.6.3.1.1.4.1"):ToInstance ToSubClass DisableOverride,description("The authoratative identification of this notification."):ToInstance ToSubClass DisableOverride] string Identification;
[read, description("The network address of the entity that created this notification."):ToInstance ToSubClass DisableOverride] string AgentAddress;
[read, description("The network address of the entity that sent this notification. This may be a proxy for the original entity."):ToInstance ToSubClass DisableOverride] string AgentTransportAddress;
[read, description("The transport protocol used by the sending entity."):ToInstance ToSubClass DisableOverride] string AgentTransportProtocol;
[read, description("The security context used to send this notification."):ToInstance ToSubClass DisableOverride] string Community;
};

class SnmpExtendedNotification:__ExtrinsicEvent
{
[textual_convention("TimeTicks"):ToInstance ToSubClass DisableOverride,encoding("TimeTicks"):ToInstance ToSubClass DisableOverride,object_syntax("TimeTicks"):ToInstance ToSubClass DisableOverride,read,object_identifier("1.3.6.1.2.1.1.3"):ToInstance ToSubClass DisableOverride,description("The time (in hundredths of a second) since the network management portion of the agent was last re-initialized."):ToInstance ToSubClass DisableOverride] uint32 TimeStamp;
[textual_convention("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, encoding("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, object_syntax("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, read, object_identifier("1.3.6.1.6.3.1.1.4.1"):ToInstance ToSubClass DisableOverride,description("The authoratative identification of this notification."):ToInstance ToSubClass DisableOverride] string Identification;
[read, description("The network address of the entity that created this notification."):ToInstance ToSubClass DisableOverride] string AgentAddress;
[read, description("The network address of the entity that sent this notification. This may be a proxy for the original entity."):ToInstance ToSubClass DisableOverride] string AgentTransportAddress;
[read, description("The transport protocol used by the sending entity."):ToInstance ToSubClass DisableOverride] string AgentTransportProtocol;
[read, description("The security context used to send this notification."):ToInstance ToSubClass DisableOverride] string Community;
};

class NotificationMapper
{
[read, key] string SnmpTrapOID;
[read] string EventClassName;
};

class ExtendedNotificationMapper
{
[read, key] string SnmpTrapOID;
[read] string EventClassName;
};

class SNMP_MODULE:__namespace
{
[read] string Name;
[read] string Module_Oid;
[read] string Module_Identity;
[read] string Organization;
[read] string Contact_Inf;
[read] string Description;
[read] string Revision;
[read] string Last_Updated;
[read] sint32 Snmp_Version;
[read] string Module_Imports;
};

[Association]
class ModuleToClassAssociator
{
[read, key] string AssocName;
[read] object ref SmirClass;
[read] object ref SmirModule;
};

[Association]
class GroupToClassAssociator
{
[read, key] string AssocName;
[read] object ref SmirClass;
[read] object ref SmirGroup;
};

[Association]
class ModToNotificationClassAssociator
{
[read, key] string AssocName;
[read] object ref SmirClass;
[read] object ref SmirModule;
};

[Association]
class ModToExtNotificationClassAssociator
{
[read, key] string AssocName;
[read] object ref SmirClass;
[read] object ref SmirModule;
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
instance of SNMP_MODULE
{
Name="SOURCE_ROUTING_MIB";
Module_Oid="1.3.6.1.2.1.17.10";
Module_Identity="sourceroutingmibV1ModuleIdentity";
Organization="";
Contact_Inf="";
Description="SOURCE-ROUTING-MIB";
Revision="";
Last_Updated="0000000000Z";
Snmp_Version=1;
Module_Imports="RFC1155-SMI,BRIDGE-MIB,RFC-1212";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR\\SOURCE_ROUTING_MIB")
class SNMP_GROUP:__namespace
{
[read] string Name;
[read] string Group_Id;
[read] string Status;
[read] string Description;
[read] string Reference;
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR\\SOURCE_ROUTING_MIB")
instance of SNMP_GROUP
{
Name="dot1dPortPairV1ObjectGroup";
Group_Id="1.3.6.1.2.1.17.10";
Status="current";
Description="";
Reference="";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description(""), module_name("SOURCE-ROUTING-MIB"), singleton, group_objectid("1.3.6.1.2.1.17.10"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_SOURCE_ROUTING_MIB_dot1dPortPair : SnmpObjectType
{
	[textual_convention("Gauge"), encoding("Gauge"), object_syntax("Gauge"), object_identifier("1.3.6.1.2.1.17.10.1"), read, description("The total number of entries in the Bridge Port\n                      Pair Database."), status("mandatory")] uint32 dot1dPortPairTableSize;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_SOURCE_ROUTING_MIB_dot1dPortPairSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"SOURCE_ROUTING_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_SOURCE_ROUTING_MIB_dot1dPortPair";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_SOURCE_ROUTING_MIB_dot1dPortPairSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\SOURCE_ROUTING_MIB:SNMP_GROUP.Name=\"dot1dPortPairV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_SOURCE_ROUTING_MIB_dot1dPortPair";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description("A table that contains information about every\n\n\n\n\n\n                      port pair database entity associated with this\n                      source routing bridge.\nA list of information for each port pair entity\n                      of a bridge."), module_name("SOURCE-ROUTING-MIB"), group_objectid("1.3.6.1.2.1.17.10"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_SOURCE_ROUTING_MIB_dot1dPortPairTable : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.17.10.2.1.1"), read, write, description("The port number of the lower numbered port for\n                      which this entry contains port pair database\n                      information."), status("mandatory"), key, key_order(1)] sint32 dot1dPortPairLowPort;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.17.10.2.1.2"), read, write, description("The port number of the higher numbered port for\n                      which this entry contains port pair database\n                      information."), status("mandatory"), key, key_order(2)] sint32 dot1dPortPairHighPort;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.17.10.2.1.3"), read, write, description("A bridge number that uniquely identifies the path\n                      provided by this source routing bridge between the\n                      segments connected to dot1dPortPairLowPort and\n                      dot1dPortPairHighPort.  The purpose of bridge\n                      number is to disambiguate between multiple paths\n                      connecting the same two LANs."), status("mandatory")] sint32 dot1dPortPairBridgeNum;
	[textual_convention("EnumeratedINTEGER"), enumeration("enabled(1),disabled(2),invalid(3)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.17.10.2.1.4"), read, write, description("The state of dot1dPortPairBridgeNum.  Writing\n                      'invalid(3)' to this object removes the\n                      corresponding entry."), status("mandatory")] string dot1dPortPairBridgeState;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_SOURCE_ROUTING_MIB_dot1dPortPairTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"SOURCE_ROUTING_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_SOURCE_ROUTING_MIB_dot1dPortPairTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_SOURCE_ROUTING_MIB_dot1dPortPairTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\SOURCE_ROUTING_MIB:SNMP_GROUP.Name=\"dot1dPortPairV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_SOURCE_ROUTING_MIB_dot1dPortPairTable";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR\\SOURCE_ROUTING_MIB")
instance of SNMP_GROUP
{
Name="dot1dSrV1ObjectGroup";
Group_Id="1.3.6.1.2.1.17.3";
Status="current";
Description="";
Reference="";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description(""), module_name("SOURCE-ROUTING-MIB"), singleton, group_objectid("1.3.6.1.2.1.17.3"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_SOURCE_ROUTING_MIB_dot1dSr : SnmpObjectType
{
	[textual_convention("EnumeratedINTEGER"), enumeration("mode3(1),mode6(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.17.3.2"), read, write, description("Indicates whether the bridge operates using older\n                      3 bit length negotiation fields or the newer 6 bit\n                      length field in its RIF."), status("mandatory")] string dot1dSrBridgeLfMode;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_SOURCE_ROUTING_MIB_dot1dSrSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"SOURCE_ROUTING_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_SOURCE_ROUTING_MIB_dot1dSr";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_SOURCE_ROUTING_MIB_dot1dSrSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\SOURCE_ROUTING_MIB:SNMP_GROUP.Name=\"dot1dSrV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_SOURCE_ROUTING_MIB_dot1dSr";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description("A table that contains information about every\n                      port that is associated with this source route\n                      bridge.\nA list of information for each port of a source\n                      route bridge."), module_name("SOURCE-ROUTING-MIB"), group_objectid("1.3.6.1.2.1.17.3"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_SOURCE_ROUTING_MIB_dot1dSrPortTable : SnmpObjectType
{
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.17.3.1.1.17"), read, description("The number of duplicate LAN IDs or Tree errors.\n                      This helps in detection of problems in networks\n                      containing older IBM Source Routing Bridges."), status("mandatory")] uint32 dot1dSrPortDupLanIdOrTreeErrors;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.17.3.1.1.1"), read, description("The port number of the port for which this entry\n\n\n\n\n\n                      contains Source Route management information."), status("mandatory"), key, key_order(1)] sint32 dot1dSrPort;
	[textual_convention("EnumeratedINTEGER"), enumeration("auto-span(1),disabled(2),forced(3)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.17.3.1.1.7"), read, write, description("Determines how this port behaves when presented\n                      with a Spanning Tree Explorer frame.  The value\n                      'disabled(2)' indicates that the port will not\n                      accept or send Spanning Tree Explorer packets; any\n                      STE packets received will be silently discarded.\n                      The value 'forced(3)' indicates the port will\n                      always accept and propagate Spanning Tree Explorer\n                      frames.  This allows a manually configured\n                      Spanning Tree for this class of packet to be\n                      configured.  Note that unlike transparent\n                      bridging, this is not catastrophic to the network\n                      if there are loops.  The value 'auto-span(1)' can\n                      only be returned by a bridge that both implements\n                      the Spanning Tree Protocol and has use of the\n                      protocol enabled on this port. The behavior of the\n                      port for Spanning Tree Explorer frames is\n                      determined by the state of dot1dStpPortState.  If\n                      the port is in the 'forwarding' state, the frame\n                      will be accepted or propagated.  Otherwise, it\n                      will be silently discarded."), status("mandatory")] string dot1dSrPortSTESpanMode;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.17.3.1.1.10"), read, description("The number of All Paths Explorer frames, also\n                      referred to as All Routes Explorer frames, that\n                      have been received by this port from its segment."), status("mandatory")] uint32 dot1dSrPortApeInFrames;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.17.3.1.1.12"), read, description("The number of spanning tree explorer frames that\n                      have been received by this port from its segment."), status("mandatory")] uint32 dot1dSrPortSteInFrames;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.17.3.1.1.8"), read, description("The number of Specifically Routed frames, also\n                      referred to as Source Routed Frames, that have\n                      been received from this port's segment."), status("mandatory")] uint32 dot1dSrPortSpecInFrames;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.17.3.1.1.11"), read, description("The number of all Paths Explorer Frames, also\n                      referred to as All Routes Explorer frames, that\n                      have been transmitted by this port on its\n                      segment."), status("mandatory")] uint32 dot1dSrPortApeOutFrames;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.17.3.1.1.6"), read, write, description("The maximum size of the INFO field (LLC and\n                      above) that this port can send/receive.  It does\n                      not include any MAC level (framing) octets.  The\n                      value of this object is used by this bridge to\n                      determine whether a modification of the\n                      LargestFrame (LF, see [14]) field of the Routing\n                      Control field of the Routing Information Field is\n                      necessary.\n\n                      64 valid values are defined by the IEEE 802.5M SRT\n                      Addendum: 516, 635, 754, 873, 993, 1112, 1231,\n                      1350, 1470, 1542, 1615, 1688, 1761, 1833, 1906,\n                      1979, 2052, 2345, 2638, 2932, 3225, 3518, 3812,\n                      4105, 4399, 4865, 5331, 5798, 6264, 6730, 7197,\n                      7663, 8130, 8539, 8949, 9358, 9768, 10178, 10587,\n                      10997, 11407, 12199, 12992, 13785, 14578, 15370,\n                      16163, 16956, 17749, 20730, 23711, 26693, 29674,\n                      32655, 35637, 38618, 41600, 44591, 47583, 50575,\n                      53567, 56559, 59551, and 65535.\n\n                      An illegal value will not be accepted by the\n                      bridge."), status("mandatory")] sint32 dot1dSrPortLargestFrame;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.17.3.1.1.3"), read, write, description("The segment number that uniquely identifies the\n                      segment to which this port is connected. Current\n                      source routing protocols limit this value to the\n                      range: 0 through 4095. (The value 0 is used by\n                      some management applications for special test\n                      cases.) A value of 65535 signifies that no segment\n                      number is assigned to this port."), status("mandatory")] sint32 dot1dSrPortLocalSegment;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.17.3.1.1.13"), read, description("The number of spanning tree explorer frames that\n                      have been transmitted by this port on its\n                      segment."), status("mandatory")] uint32 dot1dSrPortSteOutFrames;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.17.3.1.1.9"), read, description("The number of Specifically Routed frames, also\n                      referred to as Source Routed Frames, that this\n                      port has transmitted on its segment."), status("mandatory")] uint32 dot1dSrPortSpecOutFrames;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.17.3.1.1.5"), read, write, description("The segment number that corresponds to the target\n                      segment this port is considered to be connected to\n                      by the bridge.  Current source routing protocols\n                      limit this value to the range: 0 through 4095.\n\n\n\n\n\n                      (The value 0 is used by some management\n                      applications for special test cases.) A value of\n                      65535 signifies that no target segment is assigned\n                      to this port."), status("mandatory")] sint32 dot1dSrPortTargetSegment;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.17.3.1.1.14"), read, description("The number of explorer frames that have been\n                      discarded by this port because the routing\n                      descriptor field contained an invalid adjacent\n                      segment value."), status("mandatory")] uint32 dot1dSrPortSegmentMismatchDiscards;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.17.3.1.1.16"), read, description("The number of explorer frames that have been\n                      discarded by this port because the Routing\n                      Information Field has exceeded the maximum route\n                      descriptor length."), status("mandatory")] uint32 dot1dSrPortHopCountExceededDiscards;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.17.3.1.1.15"), read, description("The number of frames that have been discarded by\n                      this port because the routing descriptor field\n                      contained a duplicate segment identifier."), status("mandatory")] uint32 dot1dSrPortDuplicateSegmentDiscards;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.17.3.1.1.18"), read, description("The number of ARE and STE frames that were\n                      discarded because the last LAN ID in the routing\n                      information field did not equal the LAN-in ID.\n                      This error can occur in implementations which do\n                      only a LAN-in ID and Bridge Number check instead\n                      of a LAN-in ID, Bridge Number, and LAN-out ID\n                      check before they forward broadcast frames."), status("mandatory")] uint32 dot1dSrPortLanIdMismatches;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.17.3.1.1.2"), read, write, description("The maximum number of routing descriptors allowed\n                      in an All Paths or Spanning Tree Explorer frames."), status("mandatory")] sint32 dot1dSrPortHopCount;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.17.3.1.1.4"), read, write, description("A bridge number uniquely identifies a bridge when\n                      more than one bridge is used to span the same two\n                      segments.  Current source routing protocols limit\n                      this value to the range: 0 through 15. A value of\n                      65535 signifies that no bridge number is assigned\n                      to this bridge."), status("mandatory")] sint32 dot1dSrPortBridgeNum;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_SOURCE_ROUTING_MIB_dot1dSrPortTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"SOURCE_ROUTING_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_SOURCE_ROUTING_MIB_dot1dSrPortTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_SOURCE_ROUTING_MIB_dot1dSrPortTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\SOURCE_ROUTING_MIB:SNMP_GROUP.Name=\"dot1dSrV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_SOURCE_ROUTING_MIB_dot1dSrPortTable";
};


