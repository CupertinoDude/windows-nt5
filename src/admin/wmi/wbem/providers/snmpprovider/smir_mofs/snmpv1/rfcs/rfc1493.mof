// Copyright (c) 1997-2001 Microsoft Corporation, All Rights Reserved
//	MOF Generated for module "BRIDGE-MIB" by smi2smir version 1.10.635.0000
qualifier write:ToInstance ToSubClass;
qualifier read:ToInstance ToSubClass;
qualifier provider:ToInstance ToSubClass;
qualifier singleton:ToInstance ToSubClass;
qualifier dynamic:ToInstance ToSubClass;
qualifier textual_convention:ToInstance ToSubClass;
qualifier object_identifier:ToInstance ToSubClass;
qualifier encoding:ToInstance ToSubClass;
qualifier object_syntax:ToInstance ToSubClass;
qualifier status:ToInstance ToSubClass;
qualifier fixed_length:ToInstance ToSubClass;
qualifier variable_length:ToInstance ToSubClass;
qualifier variable_value:ToInstance ToSubClass;
qualifier bits:ToInstance ToSubClass;
qualifier key_order:ToInstance ToSubClass;
qualifier enumeration:ToInstance ToSubClass;
qualifier bits:ToInstance ToSubClass;
qualifier description:ToInstance ToSubClass;
qualifier display_hint:ToInstance ToSubClass;
qualifier defval:ToInstance ToSubClass;
qualifier units:ToInstance ToSubClass;
qualifier reference:ToInstance ToSubClass;
qualifier virtual_key:ToInstance ToSubClass;
qualifier rowstatus:ToInstance ToSubClass;
qualifier module_name:ToInstance ToSubClass;
qualifier module_imports:ToInstance ToSubClass;
qualifier group_objectid:ToInstance ToSubClass;

#pragma namespace("\\\\.\\root\\snmp")
class SMIR:__namespace
{
[read] string Name="SMIR";
};

instance of SMIR
{
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[abstract]
class SnmpMacro
{
};

[abstract]
class SnmpObjectType:SnmpMacro
{
};

class SnmpNotifyStatus:__ExtendedStatus
{
[write] sint32 SnmpStatusCode;
[write] string Description;
};

class SnmpNotification:__ExtrinsicEvent
{
[textual_convention("TimeTicks"):ToInstance ToSubClass DisableOverride,encoding("TimeTicks"):ToInstance ToSubClass DisableOverride,object_syntax("TimeTicks"):ToInstance ToSubClass DisableOverride,read,object_identifier("1.3.6.1.2.1.1.3"):ToInstance ToSubClass DisableOverride,description("The time (in hundredths of a second) since the network management portion of the agent was last re-initialized."):ToInstance ToSubClass DisableOverride] uint32 TimeStamp;
[textual_convention("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, encoding("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, object_syntax("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, read, object_identifier("1.3.6.1.6.3.1.1.4.1"):ToInstance ToSubClass DisableOverride,description("The authoratative identification of this notification."):ToInstance ToSubClass DisableOverride] string Identification;
[read, description("The network address of the entity that created this notification."):ToInstance ToSubClass DisableOverride] string AgentAddress;
[read, description("The network address of the entity that sent this notification. This may be a proxy for the original entity."):ToInstance ToSubClass DisableOverride] string AgentTransportAddress;
[read, description("The transport protocol used by the sending entity."):ToInstance ToSubClass DisableOverride] string AgentTransportProtocol;
[read, description("The security context used to send this notification."):ToInstance ToSubClass DisableOverride] string Community;
};

class SnmpExtendedNotification:__ExtrinsicEvent
{
[textual_convention("TimeTicks"):ToInstance ToSubClass DisableOverride,encoding("TimeTicks"):ToInstance ToSubClass DisableOverride,object_syntax("TimeTicks"):ToInstance ToSubClass DisableOverride,read,object_identifier("1.3.6.1.2.1.1.3"):ToInstance ToSubClass DisableOverride,description("The time (in hundredths of a second) since the network management portion of the agent was last re-initialized."):ToInstance ToSubClass DisableOverride] uint32 TimeStamp;
[textual_convention("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, encoding("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, object_syntax("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, read, object_identifier("1.3.6.1.6.3.1.1.4.1"):ToInstance ToSubClass DisableOverride,description("The authoratative identification of this notification."):ToInstance ToSubClass DisableOverride] string Identification;
[read, description("The network address of the entity that created this notification."):ToInstance ToSubClass DisableOverride] string AgentAddress;
[read, description("The network address of the entity that sent this notification. This may be a proxy for the original entity."):ToInstance ToSubClass DisableOverride] string AgentTransportAddress;
[read, description("The transport protocol used by the sending entity."):ToInstance ToSubClass DisableOverride] string AgentTransportProtocol;
[read, description("The security context used to send this notification."):ToInstance ToSubClass DisableOverride] string Community;
};

class NotificationMapper
{
[read, key] string SnmpTrapOID;
[read] string EventClassName;
};

class ExtendedNotificationMapper
{
[read, key] string SnmpTrapOID;
[read] string EventClassName;
};

class SNMP_MODULE:__namespace
{
[read] string Name;
[read] string Module_Oid;
[read] string Module_Identity;
[read] string Organization;
[read] string Contact_Inf;
[read] string Description;
[read] string Revision;
[read] string Last_Updated;
[read] sint32 Snmp_Version;
[read] string Module_Imports;
};

[Association]
class ModuleToClassAssociator
{
[read, key] string AssocName;
[read] object ref SmirClass;
[read] object ref SmirModule;
};

[Association]
class GroupToClassAssociator
{
[read, key] string AssocName;
[read] object ref SmirClass;
[read] object ref SmirGroup;
};

[Association]
class ModToNotificationClassAssociator
{
[read, key] string AssocName;
[read] object ref SmirClass;
[read] object ref SmirModule;
};

[Association]
class ModToExtNotificationClassAssociator
{
[read, key] string AssocName;
[read] object ref SmirClass;
[read] object ref SmirModule;
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
instance of SNMP_MODULE
{
Name="BRIDGE_MIB";
Module_Oid="1.3.6.1.2.1.17.2";
Module_Identity="bridgemibV1ModuleIdentity";
Organization="";
Contact_Inf="";
Description="BRIDGE-MIB";
Revision="";
Last_Updated="0000000000Z";
Snmp_Version=1;
Module_Imports="RFC1155-SMI,RFC1213-MIB,RFC-1212,RFC-1215";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR\\BRIDGE_MIB")
class SNMP_GROUP:__namespace
{
[read] string Name;
[read] string Group_Id;
[read] string Status;
[read] string Description;
[read] string Reference;
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR\\BRIDGE_MIB")
instance of SNMP_GROUP
{
Name="dot1dStpV1ObjectGroup";
Group_Id="1.3.6.1.2.1.17.2";
Status="current";
Description="";
Reference="";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description(""), module_name("BRIDGE-MIB"), singleton, group_objectid("1.3.6.1.2.1.17.2"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_BRIDGE_MIB_dot1dStp : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("Timeout"), object_identifier("1.3.6.1.2.1.17.2.11"), read, description("This time value, measured in units of hundredths\n                      of a second, controls how fast a port changes its\n                      spanning state when moving towards the Forwarding\n                      state.  The value determines how long the port\n                      stays in each of the Listening and Learning\n                      states, which precede the Forwarding state.  This\n                      value is also used, when a topology change has\n                      been detected and is underway, to age all dynamic\n                      entries in the Forwarding Database.  [Note that\n                      this value is the one that this bridge is\n                      currently using, in contrast to\n                      dot1dStpBridgeForwardDelay which is the value that\n                      this bridge and all others would start using\n                      if/when this bridge were to become the root.]"), reference("IEEE 802.1D-1990: Section 4.5.3.6"), status("mandatory")] sint32 dot1dStpForwardDelay;
	[textual_convention("TimeTicks"), encoding("TimeTicks"), object_syntax("TimeTicks"), object_identifier("1.3.6.1.2.1.17.2.3"), read, description("The time (in hundredths of a second) since the\n                      last time a topology change was detected by the\n                      bridge entity."), reference("IEEE 802.1D-1990: Section 6.8.1.1.3"), status("mandatory")] uint32 dot1dStpTimeSinceTopologyChange;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("BridgeId"), fixed_length(8), object_identifier("1.3.6.1.2.1.17.2.5"), read, description("The bridge identifier of the root of the spanning\n                      tree as determined by the Spanning Tree Protocol\n                      as executed by this node.  This value is used as\n\n\n\n\n\n                      the Root Identifier parameter in all Configuration\n                      Bridge PDUs originated by this node."), reference("IEEE 802.1D-1990: Section 4.5.3.1"), status("mandatory")] string dot1dStpDesignatedRoot;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("Timeout"), variable_value("100..1000"), object_identifier("1.3.6.1.2.1.17.2.13"), read, write, description("The value that all bridges use for HelloTime when\n                      this bridge is acting as the root.  The\n                      granularity of this timer is specified by 802.1D-\n                      1990 to be 1 second.  An agent may return a\n                      badValue error if a set is attempted to a value\n                      which is not a whole number of seconds."), reference("IEEE 802.1D-1990: Section 4.5.3.9"), status("mandatory")] sint32 dot1dStpBridgeHelloTime;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("Timeout"), object_identifier("1.3.6.1.2.1.17.2.8"), read, description("The maximum age of Spanning Tree Protocol\n                      information learned from the network on any port\n                      before it is discarded, in units of hundredths of\n                      a second.  This is the actual value that this\n                      bridge is currently using."), reference("IEEE 802.1D-1990: Section 4.5.3.4"), status("mandatory")] sint32 dot1dStpMaxAge;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.17.2.10"), read, description("This time value determines the interval length\n                      during which no more than two Configuration bridge\n                      PDUs shall be transmitted by this node, in units\n                      of hundredths of a second."), reference("IEEE 802.1D-1990: Section 4.5.3.14"), status("mandatory")] sint32 dot1dStpHoldTime;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("Timeout"), variable_value("400..3000"), object_identifier("1.3.6.1.2.1.17.2.14"), read, write, description("The value that all bridges use for ForwardDelay\n                      when this bridge is acting as the root.  Note that\n                      802.1D-1990 specifies that the range for this\n                      parameter is related to the value of\n                      dot1dStpBridgeMaxAge.  The granularity of this\n                      timer is specified by 802.1D-1990 to be 1 second.\n                      An agent may return a badValue error if a set is\n                      attempted to a value which is not a whole number\n                      of seconds."), reference("IEEE 802.1D-1990: Section 4.5.3.10"), status("mandatory")] sint32 dot1dStpBridgeForwardDelay;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.17.2.6"), read, description("The cost of the path to the root as seen from\n                      this bridge."), reference("IEEE 802.1D-1990: Section 4.5.3.2"), status("mandatory")] sint32 dot1dStpRootCost;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.17.2.7"), read, description("The port number of the port which offers the\n                      lowest cost path from this bridge to the root\n                      bridge."), reference("IEEE 802.1D-1990: Section 4.5.3.3"), status("mandatory")] sint32 dot1dStpRootPort;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..65535"), object_identifier("1.3.6.1.2.1.17.2.2"), read, write, description("The value of the write-able portion of the Bridge\n                      ID, i.e., the first two octets of the (8 octet\n                      long) Bridge ID.  The other (last) 6 octets of the\n                      Bridge ID are given by the value of\n                      dot1dBaseBridgeAddress."), reference("IEEE 802.1D-1990: Section 4.5.3.7"), status("mandatory")] sint32 dot1dStpPriority;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("Timeout"), object_identifier("1.3.6.1.2.1.17.2.9"), read, description("The amount of time between the transmission of\n                      Configuration bridge PDUs by this node on any port\n                      when it is the root of the spanning tree or trying\n                      to become so, in units of hundredths of a second.\n                      This is the actual value that this bridge is\n                      currently using."), reference("IEEE 802.1D-1990: Section 4.5.3.5"), status("mandatory")] sint32 dot1dStpHelloTime;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.17.2.4"), read, description("The total number of topology changes detected by\n                      this bridge since the management entity was last\n                      reset or initialized."), reference("IEEE 802.1D-1990: Section 6.8.1.1.3"), status("mandatory")] uint32 dot1dStpTopChanges;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("Timeout"), variable_value("600..4000"), object_identifier("1.3.6.1.2.1.17.2.12"), read, write, description("The value that all bridges use for MaxAge when\n                      this bridge is acting as the root.  Note that\n                      802.1D-1990 specifies that the range for this\n                      parameter is related to the value of\n                      dot1dStpBridgeHelloTime. The granularity of this\n                      timer is specified by 802.1D-1990 to be 1 second.\n                      An agent may return a badValue error if a set is\n                      attempted to a value which is not a whole number\n                      of seconds."), reference("IEEE 802.1D-1990: Section 4.5.3.8"), status("mandatory")] sint32 dot1dStpBridgeMaxAge;
	[textual_convention("EnumeratedINTEGER"), enumeration("unknown(1),decLb100(2),ieee8021d(3)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.17.2.1"), read, description("An indication of what version of the Spanning\n                      Tree Protocol is being run.  The value\n                      'decLb100(2)' indicates the DEC LANbridge 100\n                      Spanning Tree protocol.  IEEE 802.1d\n                      implementations will return 'ieee8021d(3)'.  If\n                      future versions of the IEEE Spanning Tree Protocol\n                      are released that are incompatible with the\n                      current version a new value will be defined."), status("mandatory")] string dot1dStpProtocolSpecification;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_BRIDGE_MIB_dot1dStpSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"BRIDGE_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_BRIDGE_MIB_dot1dStp";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_BRIDGE_MIB_dot1dStpSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\BRIDGE_MIB:SNMP_GROUP.Name=\"dot1dStpV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_BRIDGE_MIB_dot1dStp";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description("A table that contains port-specific information\n                      for the Spanning Tree Protocol.\nA list of information maintained by every port\n                      about the Spanning Tree Protocol state for that\n                      port."), module_name("BRIDGE-MIB"), group_objectid("1.3.6.1.2.1.17.2"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_BRIDGE_MIB_dot1dStpPortTable : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.17.2.15.1.5"), read, write, description("The contribution of this port to the path cost of\n                      paths towards the spanning tree root which include\n                      this port.  802.1D-1990 recommends that the\n                      default value of this parameter be in inverse\n                      proportion to the speed of the attached LAN."), reference("IEEE 802.1D-1990: Section 4.5.5.3"), status("mandatory")] sint32 dot1dStpPortPathCost;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..255"), object_identifier("1.3.6.1.2.1.17.2.15.1.2"), read, write, description("The value of the priority field which is\n                      contained in the first (in network byte order)\n                      octet of the (2 octet long) Port ID.  The other\n                      octet of the Port ID is given by the value of\n                      dot1dStpPort."), reference("IEEE 802.1D-1990: Section 4.5.5.1"), status("mandatory")] sint32 dot1dStpPortPriority;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.17.2.15.1.10"), read, description("The number of times this port has transitioned\n                      from the Learning state to the Forwarding state."), status("mandatory")] uint32 dot1dStpPortForwardTransitions;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.17.2.15.1.1"), read, description("The port number of the port for which this entry\n                      contains Spanning Tree Protocol management\n                      information."), reference("IEEE 802.1D-1990: Section 6.8.2.1.2"), status("mandatory"), key, key_order(1)] sint32 dot1dStpPort;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.17.2.15.1.7"), read, description("The path cost of the Designated Port of the\n                      segment connected to this port.  This value is\n                      compared to the Root Path Cost field in received\n\n\n\n\n\n                      bridge PDUs."), reference("IEEE 802.1D-1990: Section 4.5.5.5"), status("mandatory")] sint32 dot1dStpPortDesignatedCost;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("BridgeId"), fixed_length(8), object_identifier("1.3.6.1.2.1.17.2.15.1.6"), read, description("The unique Bridge Identifier of the Bridge\n                      recorded as the Root in the Configuration BPDUs\n                      transmitted by the Designated Bridge for the\n                      segment to which the port is attached."), reference("IEEE 802.1D-1990: Section 4.5.5.4"), status("mandatory")] string dot1dStpPortDesignatedRoot;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("OCTETSTRING"), fixed_length(2), object_identifier("1.3.6.1.2.1.17.2.15.1.9"), read, description("The Port Identifier of the port on the Designated\n                      Bridge for this port's segment."), reference("IEEE 802.1D-1990: Section 4.5.5.7"), status("mandatory")] string dot1dStpPortDesignatedPort;
	[textual_convention("EnumeratedINTEGER"), enumeration("disabled(1),blocking(2),listening(3),learning(4),forwarding(5),broken(6)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.17.2.15.1.3"), read, description("The port's current state as defined by\n                      application of the Spanning Tree Protocol.  This\n                      state controls what action a port takes on\n                      reception of a frame.  If the bridge has detected\n                      a port that is malfunctioning it will place that\n                      port into the broken(6) state.  For ports which\n                      are disabled (see dot1dStpPortEnable), this object\n                      will have a value of disabled(1)."), reference("IEEE 802.1D-1990: Section 4.5.5.2"), status("mandatory")] string dot1dStpPortState;
	[textual_convention("EnumeratedINTEGER"), enumeration("enabled(1),disabled(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.17.2.15.1.4"), read, write, description("The enabled/disabled status of the port."), reference("IEEE 802.1D-1990: Section 4.5.5.2"), status("mandatory")] string dot1dStpPortEnable;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("BridgeId"), fixed_length(8), object_identifier("1.3.6.1.2.1.17.2.15.1.8"), read, description("The Bridge Identifier of the bridge which this\n                      port considers to be the Designated Bridge for\n                      this port's segment."), reference("IEEE 802.1D-1990: Section 4.5.5.6"), status("mandatory")] string dot1dStpPortDesignatedBridge;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_BRIDGE_MIB_dot1dStpPortTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"BRIDGE_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_BRIDGE_MIB_dot1dStpPortTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_BRIDGE_MIB_dot1dStpPortTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\BRIDGE_MIB:SNMP_GROUP.Name=\"dot1dStpV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_BRIDGE_MIB_dot1dStpPortTable";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR\\BRIDGE_MIB")
instance of SNMP_GROUP
{
Name="dot1dTpV1ObjectGroup";
Group_Id="1.3.6.1.2.1.17.4";
Status="current";
Description="";
Reference="";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description(""), module_name("BRIDGE-MIB"), singleton, group_objectid("1.3.6.1.2.1.17.4"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_BRIDGE_MIB_dot1dTp : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("10..1000000"), object_identifier("1.3.6.1.2.1.17.4.2"), read, write, description("The timeout period in seconds for aging out\n                      dynamically learned forwarding information.\n                      802.1D-1990 recommends a default of 300 seconds."), reference("IEEE 802.1D-1990: Section 6.7.1.1.3"), status("mandatory")] sint32 dot1dTpAgingTime;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.17.4.1"), read, description("The total number of Forwarding Database entries,\n                      which have been or would have been learnt, but\n                      have been discarded due to a lack of space to\n                      store them in the Forwarding Database.  If this\n                      counter is increasing, it indicates that the\n                      Forwarding Database is regularly becoming full (a\n                      condition which has unpleasant performance effects\n                      on the subnetwork).  If this counter has a\n                      significant value but is not presently increasing,\n                      it indicates that the problem has been occurring\n                      but is not persistent."), reference("IEEE 802.1D-1990: Section 6.7.1.1.3"), status("mandatory")] uint32 dot1dTpLearnedEntryDiscards;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_BRIDGE_MIB_dot1dTpSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"BRIDGE_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_BRIDGE_MIB_dot1dTp";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_BRIDGE_MIB_dot1dTpSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\BRIDGE_MIB:SNMP_GROUP.Name=\"dot1dTpV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_BRIDGE_MIB_dot1dTp";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description("A table that contains information about every\n                      port that is associated with this transparent\n                      bridge.\nA list of information for each port of a\n                      transparent bridge."), module_name("BRIDGE-MIB"), group_objectid("1.3.6.1.2.1.17.4"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_BRIDGE_MIB_dot1dTpPortTable : SnmpObjectType
{
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.17.4.4.1.4"), read, description("The number of frames that have been transmitted\n                      by this port to its segment.  Note that a frame\n                      transmitted on the interface corresponding to this\n                      port is only counted by this object if and only if\n                      it is for a protocol being processed by the local\n                      bridging function, including bridge management\n                      frames."), reference("IEEE 802.1D-1990: Section 6.6.1.1.3"), status("mandatory")] uint32 dot1dTpPortOutFrames;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.17.4.4.1.5"), read, description("Count of valid frames received which were\n                      discarded (i.e., filtered) by the Forwarding\n                      Process."), reference("IEEE 802.1D-1990: Section 6.6.1.1.3"), status("mandatory")] uint32 dot1dTpPortInDiscards;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.17.4.4.1.1"), read, description("The port number of the port for which this entry\n                      contains Transparent bridging management\n                      information."), status("mandatory"), key, key_order(1)] sint32 dot1dTpPort;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.17.4.4.1.2"), read, description("The maximum size of the INFO (non-MAC) field that\n                      this port will receive or transmit."), status("mandatory")] sint32 dot1dTpPortMaxInfo;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.17.4.4.1.3"), read, description("The number of frames that have been received by\n                      this port from its segment. Note that a frame\n                      received on the interface corresponding to this\n                      port is only counted by this object if and only if\n                      it is for a protocol being processed by the local\n                      bridging function, including bridge management\n                      frames."), reference("IEEE 802.1D-1990: Section 6.6.1.1.3"), status("mandatory")] uint32 dot1dTpPortInFrames;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_BRIDGE_MIB_dot1dTpPortTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"BRIDGE_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_BRIDGE_MIB_dot1dTpPortTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_BRIDGE_MIB_dot1dTpPortTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\BRIDGE_MIB:SNMP_GROUP.Name=\"dot1dTpV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_BRIDGE_MIB_dot1dTpPortTable";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description("A table that contains information about unicast\n                      entries for which the bridge has forwarding and/or\n                      filtering information.  This information is used\n                      by the transparent bridging function in\n                      determining how to propagate a received frame.\nInformation about a specific unicast MAC address\n                      for which the bridge has some forwarding and/or\n                      filtering information."), module_name("BRIDGE-MIB"), group_objectid("1.3.6.1.2.1.17.4"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_BRIDGE_MIB_dot1dTpFdbTable : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.17.4.3.1.2"), read, description("Either the value '0', or the port number of the\n                      port on which a frame having a source address\n                      equal to the value of the corresponding instance\n                      of dot1dTpFdbAddress has been seen.  A value of\n                      '0' indicates that the port number has not been\n                      learned but that the bridge does have some\n                      forwarding/filtering information about this\n                      address (e.g. in the dot1dStaticTable).\n                      Implementors are encouraged to assign the port\n                      value to this object whenever it is learned even\n                      for addresses for which the corresponding value of\n                      dot1dTpFdbStatus is not learned(3)."), status("mandatory")] sint32 dot1dTpFdbPort;
	[textual_convention("EnumeratedINTEGER"), enumeration("other(1),invalid(2),learned(3),self(4),mgmt(5)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.17.4.3.1.3"), read, description("The status of this entry.  The meanings of the\n                      values are:\n\n                        other(1)   : none of the following.  This would\n                                     include the case where some other\n                                     MIB object (not the corresponding\n                                     instance of dot1dTpFdbPort, nor an\n                                     entry in the dot1dStaticTable) is\n                                     being used to determine if and how\n                                     frames addressed to the value of\n                                     the corresponding instance of\n                                     dot1dTpFdbAddress are being\n                                     forwarded.\n\n                        invalid(2) : this entry is not longer valid\n                                     (e.g., it was learned but has since\n                                     aged-out), but has not yet been\n                                     flushed from the table.\n\n                        learned(3) : the value of the corresponding\n                                     instance of dot1dTpFdbPort was\n                                     learned, and is being used.\n\n                        self(4)    : the value of the corresponding\n                                     instance of dot1dTpFdbAddress\n                                     represents one of the bridge's\n                                     addresses.  The corresponding\n                                     instance of dot1dTpFdbPort\n                                     indicates which of the bridge's\n                                     ports has this address.\n\n                        mgmt(5)    : the value of the corresponding\n                 
                    instance of dot1dTpFdbAddress is\n                                     also the value of an existing\n                                     instance of dot1dStaticAddress."), status("mandatory")] string dot1dTpFdbStatus;
	[textual_convention("MacAddress"), encoding("OCTETSTRING"), object_syntax("MacAddress"), display_hint("1x:"), object_identifier("1.3.6.1.2.1.17.4.3.1.1"), read, description("A unicast MAC address for which the bridge has\n                      forwarding and/or filtering information."), reference("IEEE 802.1D-1990: Section 3.9.1, 3.9.2"), status("mandatory"), key, key_order(1)] string dot1dTpFdbAddress;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_BRIDGE_MIB_dot1dTpFdbTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"BRIDGE_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_BRIDGE_MIB_dot1dTpFdbTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_BRIDGE_MIB_dot1dTpFdbTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\BRIDGE_MIB:SNMP_GROUP.Name=\"dot1dTpV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_BRIDGE_MIB_dot1dTpFdbTable";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR\\BRIDGE_MIB")
instance of SNMP_GROUP
{
Name="dot1dStaticV1ObjectGroup";
Group_Id="1.3.6.1.2.1.17.5";
Status="current";
Description="";
Reference="";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description("A table containing filtering information\n                      configured into the bridge by (local or network)\n                      management specifying the set of ports to which\n                      frames received from specific ports and containing\n                      specific destination addresses are allowed to be\n                      forwarded.  The value of zero in this table as the\n                      port number from which frames with a specific\n                      destination address are received, is used to\n                      specify all ports for which there is no specific\n                      entry in this table for that particular\n                      destination address.  Entries are valid for\n                      unicast and for group/broadcast addresses.\nFiltering information configured into the bridge\n                      by (local or network) management specifying the\n                      set of ports to which frames received from a\n                      specific port and containing a specific\n                      destination address are allowed to be forwarded."), module_name("BRIDGE-MIB"), group_objectid("1.3.6.1.2.1.17.5"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_BRIDGE_MIB_dot1dStaticTable : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.17.5.1.1.2"), read, write, description("Either the value '0', or the port number of the\n                      port from which a frame must be received in order\n                      for this entry's filtering information to apply.\n                      A value of zero indicates that this entry applies\n                      on all ports of the bridge for which there is no\n                      other applicable entry."), status("mandatory"), key, key_order(2)] sint32 dot1dStaticReceivePort;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("OCTETSTRING"), object_identifier("1.3.6.1.2.1.17.5.1.1.3"), read, write, description("The set of ports to which frames received from a\n                      specific port and destined for a specific MAC\n\n\n\n\n\n                      address, are allowed to be forwarded.  Each octet\n                      within the value of this object specifies a set of\n                      eight ports, with the first octet specifying ports\n                      1 through 8, the second octet specifying ports 9\n                      through 16, etc.  Within each octet, the most\n                      significant bit represents the lowest numbered\n                      port, and the least significant bit represents the\n                      highest numbered port.  Thus, each port of the\n                      bridge is represented by a single bit within the\n                      value of this object.  If that bit has a value of\n                      '1' then that port is included in the set of\n                      ports; the port is not included if its bit has a\n                      value of '0'.  (Note that the setting of the bit\n                      corresponding to the port from which a frame is\n                      received is irrelevant.)  The default value of\n                      this object is a string of ones of appropriate\n                      length."), status("mandatory")] string dot1dStaticAllowedToGoTo;
	[textual_convention("EnumeratedINTEGER"), enumeration("other(1),invalid(2),permanent(3),deleteOnReset(4),deleteOnTimeout(5)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.17.5.1.1.4"), read, write, description("This object indicates the status of this entry.\n                      The default value is permanent(3).\n\n                           other(1) - this entry is currently in use but\n                                the conditions under which it will\n                                remain so are different from each of the\n                                following values.\n                           invalid(2) - writing this value to the object\n                                removes the corresponding entry.\n                           permanent(3) - this entry is currently in use\n                                and will remain so after the next reset\n                                of the bridge.\n                           deleteOnReset(4) - this entry is currently in\n                                use and will remain so until the next\n                                reset of the bridge.\n                           deleteOnTimeout(5) - this entry is currently\n                                in use and will remain so until it is\n                                aged out."), status("mandatory")] string dot1dStaticStatus;
	[textual_convention("MacAddress"), encoding("OCTETSTRING"), object_syntax("MacAddress"), display_hint("1x:"), object_identifier("1.3.6.1.2.1.17.5.1.1.1"), read, write, description("The destination MAC address in a frame to which\n                      this entry's filtering information applies.  This\n                      object can take the value of a unicast address, a\n                      group address or the broadcast address."), reference("IEEE 802.1D-1990: Section 3.9.1, 3.9.2"), status("mandatory"), key, key_order(1)] string dot1dStaticAddress;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_BRIDGE_MIB_dot1dStaticTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"BRIDGE_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_BRIDGE_MIB_dot1dStaticTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_BRIDGE_MIB_dot1dStaticTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\BRIDGE_MIB:SNMP_GROUP.Name=\"dot1dStaticV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_BRIDGE_MIB_dot1dStaticTable";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR\\BRIDGE_MIB")
instance of SNMP_GROUP
{
Name="dot1dBaseV1ObjectGroup";
Group_Id="1.3.6.1.2.1.17.1";
Status="current";
Description="";
Reference="";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description(""), module_name("BRIDGE-MIB"), singleton, group_objectid("1.3.6.1.2.1.17.1"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_BRIDGE_MIB_dot1dBase : SnmpObjectType
{
	[textual_convention("MacAddress"), encoding("OCTETSTRING"), object_syntax("MacAddress"), display_hint("1x:"), object_identifier("1.3.6.1.2.1.17.1.1"), read, description("The MAC address used by this bridge when it must\n                      be referred to in a unique fashion.   It is\n                      recommended that this be the numerically smallest\n                      MAC address of all ports that belong to this\n                      bridge.  However it is only required to be unique.\n                      When concatenated with dot1dStpPriority a unique\n                      BridgeIdentifier is formed which is used in the\n                      Spanning Tree Protocol."), reference("IEEE 802.1D-1990: Sections 6.4.1.1.3 and 3.12.5"), status("mandatory")] string dot1dBaseBridgeAddress;
	[textual_convention("EnumeratedINTEGER"), enumeration("unknown(1),transparent-only(2),sourceroute-only(3),srt(4)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.17.1.3"), read, description("Indicates what type of bridging this bridge can\n                      perform.  If a bridge is actually performing a\n                      certain type of bridging this will be indicated by\n                      entries in the port table for the given type."), status("mandatory")] string dot1dBaseType;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.17.1.2"), read, description("The number of ports controlled by this bridging\n                      entity."), reference("IEEE 802.1D-1990: Section 6.4.1.1.3"), status("mandatory")] sint32 dot1dBaseNumPorts;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_BRIDGE_MIB_dot1dBaseSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"BRIDGE_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_BRIDGE_MIB_dot1dBase";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_BRIDGE_MIB_dot1dBaseSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\BRIDGE_MIB:SNMP_GROUP.Name=\"dot1dBaseV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_BRIDGE_MIB_dot1dBase";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description("A table that contains generic information about\n                      every port that is associated with this bridge.\n                      Transparent, source-route, and srt ports are\n                      included.\nA list of information for each port of the\n                      bridge."), module_name("BRIDGE-MIB"), group_objectid("1.3.6.1.2.1.17.1"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_BRIDGE_MIB_dot1dBasePortTable : SnmpObjectType
{
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.17.1.4.1.5"), read, description("The number of frames discarded by this port due\n                      to an excessive size.  It is incremented by both\n                      transparent and source route bridges."), reference("IEEE 802.1D-1990: Section 6.6.1.1.3"), status("mandatory")] uint32 dot1dBasePortMtuExceededDiscards;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.17.1.4.1.1"), read, description("The port number of the port for which this entry\n                      contains bridge management information."), status("mandatory"), key, key_order(1)] sint32 dot1dBasePort;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.17.1.4.1.4"), read, description("The number of frames discarded by this port due\n                      to excessive transit delay through the bridge.  It\n                      is incremented by both transparent and source\n                      route bridges."), reference("IEEE 802.1D-1990: Section 6.6.1.1.3"), status("mandatory")] uint32 dot1dBasePortDelayExceededDiscards;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.17.1.4.1.2"), read, description("The value of the instance of the ifIndex object,\n                      defined in MIB-II, for the interface corresponding\n                      to this port."), status("mandatory")] sint32 dot1dBasePortIfIndex;
	[textual_convention("OBJECTIDENTIFIER"), encoding("OBJECTIDENTIFIER"), object_syntax("OBJECTIDENTIFIER"), object_identifier("1.3.6.1.2.1.17.1.4.1.3"), read, description("For a port which (potentially) has the same value\n                      of dot1dBasePortIfIndex as another port on the\n                      same bridge, this object contains the name of an\n                      object instance unique to this port.  For example,\n                      in the case where multiple ports correspond one-\n                      to-one with multiple X.25 virtual circuits, this\n                      value might identify an (e.g., the first) object\n                      instance associated with the X.25 virtual circuit\n                      corresponding to this port.\n\n                      For a port which has a unique value of\n                      dot1dBasePortIfIndex, this object can have the\n                      value { 0 0 }."), status("mandatory")] string dot1dBasePortCircuit;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_BRIDGE_MIB_dot1dBasePortTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"BRIDGE_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_BRIDGE_MIB_dot1dBasePortTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_BRIDGE_MIB_dot1dBasePortTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\BRIDGE_MIB:SNMP_GROUP.Name=\"dot1dBaseV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_BRIDGE_MIB_dot1dBasePortTable";
};


