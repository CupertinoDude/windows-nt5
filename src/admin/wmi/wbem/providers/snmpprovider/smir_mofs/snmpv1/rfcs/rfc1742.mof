// Copyright (c) 1997-2001 Microsoft Corporation, All Rights Reserved
//	MOF Generated for module "APPLETALK-MIB" by smi2smir version 1.10.635.0000
qualifier write:ToInstance ToSubClass;
qualifier read:ToInstance ToSubClass;
qualifier provider:ToInstance ToSubClass;
qualifier singleton:ToInstance ToSubClass;
qualifier dynamic:ToInstance ToSubClass;
qualifier textual_convention:ToInstance ToSubClass;
qualifier object_identifier:ToInstance ToSubClass;
qualifier encoding:ToInstance ToSubClass;
qualifier object_syntax:ToInstance ToSubClass;
qualifier status:ToInstance ToSubClass;
qualifier fixed_length:ToInstance ToSubClass;
qualifier variable_length:ToInstance ToSubClass;
qualifier variable_value:ToInstance ToSubClass;
qualifier bits:ToInstance ToSubClass;
qualifier key_order:ToInstance ToSubClass;
qualifier enumeration:ToInstance ToSubClass;
qualifier bits:ToInstance ToSubClass;
qualifier description:ToInstance ToSubClass;
qualifier display_hint:ToInstance ToSubClass;
qualifier defval:ToInstance ToSubClass;
qualifier units:ToInstance ToSubClass;
qualifier reference:ToInstance ToSubClass;
qualifier virtual_key:ToInstance ToSubClass;
qualifier rowstatus:ToInstance ToSubClass;
qualifier module_name:ToInstance ToSubClass;
qualifier module_imports:ToInstance ToSubClass;
qualifier group_objectid:ToInstance ToSubClass;

#pragma namespace("\\\\.\\root\\snmp")
class SMIR:__namespace
{
[read] string Name="SMIR";
};

instance of SMIR
{
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[abstract]
class SnmpMacro
{
};

[abstract]
class SnmpObjectType:SnmpMacro
{
};

class SnmpNotifyStatus:__ExtendedStatus
{
[write] sint32 SnmpStatusCode;
[write] string Description;
};

class SnmpNotification:__ExtrinsicEvent
{
[textual_convention("TimeTicks"):ToInstance ToSubClass DisableOverride,encoding("TimeTicks"):ToInstance ToSubClass DisableOverride,object_syntax("TimeTicks"):ToInstance ToSubClass DisableOverride,read,object_identifier("1.3.6.1.2.1.1.3"):ToInstance ToSubClass DisableOverride,description("The time (in hundredths of a second) since the network management portion of the agent was last re-initialized."):ToInstance ToSubClass DisableOverride] uint32 TimeStamp;
[textual_convention("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, encoding("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, object_syntax("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, read, object_identifier("1.3.6.1.6.3.1.1.4.1"):ToInstance ToSubClass DisableOverride,description("The authoratative identification of this notification."):ToInstance ToSubClass DisableOverride] string Identification;
[read, description("The network address of the entity that created this notification."):ToInstance ToSubClass DisableOverride] string AgentAddress;
[read, description("The network address of the entity that sent this notification. This may be a proxy for the original entity."):ToInstance ToSubClass DisableOverride] string AgentTransportAddress;
[read, description("The transport protocol used by the sending entity."):ToInstance ToSubClass DisableOverride] string AgentTransportProtocol;
[read, description("The security context used to send this notification."):ToInstance ToSubClass DisableOverride] string Community;
};

class SnmpExtendedNotification:__ExtrinsicEvent
{
[textual_convention("TimeTicks"):ToInstance ToSubClass DisableOverride,encoding("TimeTicks"):ToInstance ToSubClass DisableOverride,object_syntax("TimeTicks"):ToInstance ToSubClass DisableOverride,read,object_identifier("1.3.6.1.2.1.1.3"):ToInstance ToSubClass DisableOverride,description("The time (in hundredths of a second) since the network management portion of the agent was last re-initialized."):ToInstance ToSubClass DisableOverride] uint32 TimeStamp;
[textual_convention("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, encoding("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, object_syntax("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, read, object_identifier("1.3.6.1.6.3.1.1.4.1"):ToInstance ToSubClass DisableOverride,description("The authoratative identification of this notification."):ToInstance ToSubClass DisableOverride] string Identification;
[read, description("The network address of the entity that created this notification."):ToInstance ToSubClass DisableOverride] string AgentAddress;
[read, description("The network address of the entity that sent this notification. This may be a proxy for the original entity."):ToInstance ToSubClass DisableOverride] string AgentTransportAddress;
[read, description("The transport protocol used by the sending entity."):ToInstance ToSubClass DisableOverride] string AgentTransportProtocol;
[read, description("The security context used to send this notification."):ToInstance ToSubClass DisableOverride] string Community;
};

class NotificationMapper
{
[read, key] string SnmpTrapOID;
[read] string EventClassName;
};

class ExtendedNotificationMapper
{
[read, key] string SnmpTrapOID;
[read] string EventClassName;
};

class SNMP_MODULE:__namespace
{
[read] string Name;
[read] string Module_Oid;
[read] string Module_Identity;
[read] string Organization;
[read] string Contact_Inf;
[read] string Description;
[read] string Revision;
[read] string Last_Updated;
[read] sint32 Snmp_Version;
[read] string Module_Imports;
};

[Association]
class ModuleToClassAssociator
{
[read, key] string AssocName;
[read] object ref SmirClass;
[read] object ref SmirModule;
};

[Association]
class GroupToClassAssociator
{
[read, key] string AssocName;
[read] object ref SmirClass;
[read] object ref SmirGroup;
};

[Association]
class ModToNotificationClassAssociator
{
[read, key] string AssocName;
[read] object ref SmirClass;
[read] object ref SmirModule;
};

[Association]
class ModToExtNotificationClassAssociator
{
[read, key] string AssocName;
[read] object ref SmirClass;
[read] object ref SmirModule;
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
instance of SNMP_MODULE
{
Name="APPLETALK_MIB";
Module_Oid="1.3.6.1.2.1.13.17";
Module_Identity="appletalkmibV1ModuleIdentity";
Organization="";
Contact_Inf="";
Description="APPLETALK-MIB";
Revision="";
Last_Updated="0000000000Z";
Snmp_Version=1;
Module_Imports="RFC1155-SMI,RFC1213-MIB,RFC-1212";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR\\APPLETALK_MIB")
class SNMP_GROUP:__namespace
{
[read] string Name;
[read] string Group_Id;
[read] string Status;
[read] string Description;
[read] string Reference;
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR\\APPLETALK_MIB")
instance of SNMP_GROUP
{
Name="zipEndNodeV1ObjectGroup";
Group_Id="1.3.6.1.2.1.13.17";
Status="current";
Description="";
Reference="";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description(""), module_name("APPLETALK-MIB"), singleton, group_objectid("1.3.6.1.2.1.13.17"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_APPLETALK_MIB_zipEndNode : SnmpObjectType
{
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.17.2"), read, description("The number of ZIP packets received by this entity\n                  that were rejected for any error."), status("mandatory")] uint32 zipInErrors;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_APPLETALK_MIB_zipEndNodeSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"APPLETALK_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_APPLETALK_MIB_zipEndNode";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_APPLETALK_MIB_zipEndNodeSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\APPLETALK_MIB:SNMP_GROUP.Name=\"zipEndNodeV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_APPLETALK_MIB_zipEndNode";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description("The table of Net Info packets received by each port\n                  on this entity.\nThe description of the Net Info packets received on\n                  a particular port on this entity.  One such entry\n                  shall exist for each atport on this entity.\n\n                  As an example, an instance of the zipOutGetNetInfos\n                  object might be named zipOutGetNetInfos.2"), module_name("APPLETALK-MIB"), group_objectid("1.3.6.1.2.1.13.17"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_APPLETALK_MIB_zipNetInfoTable : SnmpObjectType
{
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.17.1.1.2"), read, description("The number of ZIP GetNetInfo Reply packets received\n              on this port by this entity."), status("mandatory")] uint32 zipInGetNetInfoReplies;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.17.1.1.1"), read, description("The number of ZIP GetNetInfo packets sent out this\n                  port by this entity."), status("mandatory")] uint32 zipOutGetNetInfos;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.17.1.1.3"), read, description("The number of times this entity has received a ZIP\n                  GetNetInfo Reply with the zone invalid bit set\n                  because the corresponding GetNetInfo Request had an\n                  invalid zone name."), status("mandatory")] uint32 zipZoneInInvalids;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.13.3.1.1.1"), read, description("A unique value for each AppleTalk port.\n                  Its value is between 1 and the total number of\n                  AppleTalk ports.  The value for each port must\n                  remain constant at least from the re-initialization\n                  of the entity's network management system to the\n                  next re-initialization."), status("mandatory"), virtual_key, key, key_order(1)] sint32 atportIndex;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_APPLETALK_MIB_zipNetInfoTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"APPLETALK_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_APPLETALK_MIB_zipNetInfoTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_APPLETALK_MIB_zipNetInfoTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\APPLETALK_MIB:SNMP_GROUP.Name=\"zipEndNodeV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_APPLETALK_MIB_zipNetInfoTable";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR\\APPLETALK_MIB")
instance of SNMP_GROUP
{
Name="adspV1ObjectGroup";
Group_Id="1.3.6.1.2.1.13.13";
Status="current";
Description="";
Reference="";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description(""), module_name("APPLETALK-MIB"), singleton, group_objectid("1.3.6.1.2.1.13.13"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_APPLETALK_MIB_adsp : SnmpObjectType
{
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.13.1"), read, description("The number of ADSP packets received by this entity."), status("mandatory")] uint32 adspInPkts;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.13.2"), read, description("The number of ADSP packets sent by this entity."), status("mandatory")] uint32 adspOutPkts;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.13.3"), read, description("The number of data octets contained in ADSP packets\n                  received by this entity.  Note that this does not\n                  include EOM bits."), status("mandatory")] uint32 adspInOctets;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.13.8"), read, description("The number of times the ADSP on this entity closed a\n                  connection because of too many timeouts."), status("mandatory")] uint32 adspTimeoutCloseErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.13.4"), read, description("The number of data octets contained in ADSP packets\n                  sent by this entity.  Note that this does not include\n                  EOM bits."), status("mandatory")] uint32 adspOutOctets;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.13.5"), read, description("The number of ADSP data packets this entity has\n                  received."), status("mandatory")] uint32 adspInDataPkts;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.13.6"), read, description("The number of ADSP data packets this entity has\n                  sent."), status("mandatory")] uint32 adspOutDataPkts;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.13.7"), read, description("The number of times the ADSP on this entity detected\n                  an expired connection timer."), status("mandatory")] uint32 adspTimeoutErrors;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_APPLETALK_MIB_adspSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"APPLETALK_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_APPLETALK_MIB_adsp";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_APPLETALK_MIB_adspSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\APPLETALK_MIB:SNMP_GROUP.Name=\"adspV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_APPLETALK_MIB_adsp";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description("A list of ADSP connections on this entity.\nA set of information describing an ADSP connection.\n                  As an example, an instance of the adspConnState object\n                  might be named\n                  adspConnState.0.80.220.7.0.80.239.142.31231"), module_name("APPLETALK-MIB"), group_objectid("1.3.6.1.2.1.13.13"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_APPLETALK_MIB_adspConnTable : SnmpObjectType
{
	[textual_convention("EnumeratedINTEGER"), enumeration("open(1),localHalfOpen(2),remoteHalfOpen(3),listening(4),closed(5),invalid(6)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.13.13.9.1.5"), read, write, description("The state of this ADSP connection.  The state is\n                  open if both ends are established.  If only one end\n                  is established, then the state is half-open.  If\n                  neither end is established, then the state is\n                  closed.  If an ADSP server is listening on a socket\n                  and is not yet connected, its state is set to\n                  listening, and the adspConnRemoteAddress,\n                  adspConnRemoteSocket, adspConnRemoteConnID, and\n                  adspConnRemoteWindowSize are all set to zero.\n\n                  Setting this object to the value invalid(6) has the\n                  effect of invalidating the corresponding entry in\n                  the adspConnTable.  That is, it  effectively\n                  disassociates the mapping identified with said\n                  entry.  It is an implementation-specific matter as\n                  to whether the agent removes an invalidated entry\n                  from the table. Accordingly, management stations\n                  must be prepared to receive from agents tabular\n                  information corresponding to entries not currently\n                  in use.  Proper interpretation of such entries\n                  requires examination of the relevant adspConnState\n                  object."), status("mandatory")] string adspConnState;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..65535"), object_identifier("1.3.6.1.2.1.13.13.9.1.4"), read, description("The remote Connection ID of this ADSP connection.\n                  If this entry specifies an ADSP listener, this value\n                  shall be zero."), status("mandatory")] sint32 adspConnRemoteConnID;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("DdpSocketAddress"), fixed_length(4), object_identifier("1.3.6.1.2.1.13.13.9.1.1"), read, description("The local DDP address of this ADSP connection."), status("mandatory"), virtual_key, key, key_order(1)] string adspConnLocalAddress;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("DdpSocketAddress"), fixed_length(4), object_identifier("1.3.6.1.2.1.13.13.9.1.3"), read, description("The remote DDP address of this ADSP connection.  If\n                  this entry specifies an ADSP listener, this value\n                  shall be zero."), status("mandatory"), virtual_key, key, key_order(2)] string adspConnRemoteAddress;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..65535"), object_identifier("1.3.6.1.2.1.13.13.9.1.2"), read, description("The local Connection ID of this ADSP connection.  If\n                  this entry specifies an ADSP listener, this value\n                  shall be zero."), status("mandatory"), virtual_key, key, key_order(3)] sint32 adspConnLocalConnID;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_APPLETALK_MIB_adspConnTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"APPLETALK_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_APPLETALK_MIB_adspConnTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_APPLETALK_MIB_adspConnTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\APPLETALK_MIB:SNMP_GROUP.Name=\"adspV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_APPLETALK_MIB_adspConnTable";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR\\APPLETALK_MIB")
instance of SNMP_GROUP
{
Name="llapV1ObjectGroup";
Group_Id="1.3.6.1.2.1.13.1";
Status="current";
Description="";
Reference="";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description("The list of LLAP entries.\nAn LLAP entry containing objects for the LocalTalk\n                  Link Access Protocol for a particular LocalTalk\n                  interface.\n\n                  As an example, an instance of the llapOutPkts object\n                  might be named llapOutPks.1"), module_name("APPLETALK-MIB"), group_objectid("1.3.6.1.2.1.13.1"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_APPLETALK_MIB_llapTable : SnmpObjectType
{
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.1.1.1.8"), read, description("The total number of times this LocalTalk interface\n                  deferred to other packets."), status("mandatory")] uint32 llapDefers;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.1.1.1.2"), read, description("The total number of good data packets received on\n                  this LocalTalk interface."), status("deprecated")] uint32 llapInPkts;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.13.1.1.1.1"), read, description("The LLAP interface to which this entry pertains.\n                  The interface identified by a particular value of\n                  this index is the same interface as identified\n                  by the same value of ifIndex."), status("mandatory"), key, key_order(1)] sint32 llapIfIndex;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.1.1.1.3"), read, description("The total number of data packets transmitted on\n                  this LocalTalk interface."), status("deprecated")] uint32 llapOutPkts;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.1.1.1.6"), read, description("The total number of packets containing errors received\n                  on this LocalTalk interface."), status("deprecated")] uint32 llapInErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.1.1.1.11"), read, description("The total number of times this LocalTalk interface\n                  received a packet with an FCS (Frame Check Sequence)\n                  error."), status("mandatory")] uint32 llapFCSErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.1.1.1.7"), read, description("The total number of collisions assumed on this\n                  LocalTalk interface due to the lack of a lapCTS reply."), status("mandatory")] uint32 llapCollisions;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.1.1.1.4"), read, description("The total number of good packets received on this\n                  LocalTalk interface for which there was no protocol\n                  handler."), status("deprecated")] uint32 llapInNoHandlers;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.1.1.1.9"), read, description("The total number of times this LocalTalk interface\n                  received a lapRTS packet and expected a data packet,\n                  but did not receive any data packet."), status("mandatory")] uint32 llapNoDataErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.1.1.1.5"), read, description("The total number of packets received on this LocalTalk\n                  interface whose actual length did not match the length\n                  in the header."), status("mandatory")] uint32 llapInLengthErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.1.1.1.10"), read, description("The total number of times this LocalTalk interface\n                  received a lapCTS packet that was not solicited by a\n                  lapRTS packet."), status("mandatory")] uint32 llapRandomCTSErrors;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_APPLETALK_MIB_llapTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"APPLETALK_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_APPLETALK_MIB_llapTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_APPLETALK_MIB_llapTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\APPLETALK_MIB:SNMP_GROUP.Name=\"llapV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_APPLETALK_MIB_llapTable";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR\\APPLETALK_MIB")
instance of SNMP_GROUP
{
Name="nbpV1ObjectGroup";
Group_Id="1.3.6.1.2.1.13.8";
Status="current";
Description="";
Reference="";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description(""), module_name("APPLETALK-MIB"), singleton, group_objectid("1.3.6.1.2.1.13.8"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_APPLETALK_MIB_nbp : SnmpObjectType
{
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.8.5"), read, description("The number of NBP Forward Requests received."), status("mandatory")] uint32 nbpInForwardRequests;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.8.8"), read, description("The number of NBP packets received by this entity\n                  that were rejected for any error."), status("mandatory")] uint32 nbpInErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.8.4"), read, description("The number of NBP Broadcast Requests received."), status("mandatory")] uint32 nbpInBroadcastRequests;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.8.7"), read, description("The number of times this node experienced a failure\n                  in attempting to register an NBP entity."), status("mandatory")] uint32 nbpRegistrationFailures;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.8.3"), read, description("The number of NBP LookUp Replies received."), status("mandatory")] uint32 nbpInLookUpReplies;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.8.6"), read, description("The number of NBP LookUp Replies sent."), status("mandatory")] uint32 nbpOutLookUpReplies;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.8.2"), read, description("The number of NBP LookUp Requests received."), status("mandatory")] uint32 nbpInLookUpRequests;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_APPLETALK_MIB_nbpSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"APPLETALK_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_APPLETALK_MIB_nbp";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_APPLETALK_MIB_nbpSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\APPLETALK_MIB:SNMP_GROUP.Name=\"nbpV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_APPLETALK_MIB_nbp";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description("The table of NBP services registered on this entity.\nThe description of an NBP service registered on this\n                  entity.\n\n                  As an example, an instance of the nbpZone object\n                  might be named nbpZone.2"), module_name("APPLETALK-MIB"), group_objectid("1.3.6.1.2.1.13.8"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_APPLETALK_MIB_nbpTable : SnmpObjectType
{
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("DdpSocketAddress"), fixed_length(4), object_identifier("1.3.6.1.2.1.13.8.1.1.6"), read, write, description("The DDP network, node, and socket number of this\n                  entity. If this is unspecified, for instance if the\n                  registration is on all ports of a multiport device,\n                  this object shall have the value of three octets of\n                  zero, followed by one octet of socket number."), status("mandatory")] string nbpAddress;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..255"), object_identifier("1.3.6.1.2.1.13.8.1.1.7"), read, description("The enumerator assigned to this entity."), status("mandatory")] sint32 nbpEnumerator;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("ATName"), variable_length("0..32"), object_identifier("1.3.6.1.2.1.13.8.1.1.4"), read, write, description("The zone the service described by this entity is\n                  registered in.  This must be the actual zone name,\n                  without any wildcard characters.  When this variable\n                  is changed, the entity should perform an NBP\n                  registration using the new nbpZone."), status("mandatory")] string nbpZone;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("ATName"), variable_length("1..32"), object_identifier("1.3.6.1.2.1.13.8.1.1.3"), read, write, description("The type of the service described by this entity.\n                  When this variable is changed, the entity should\n                  perform an NBP registration using the new nbpType."), status("mandatory")] string nbpType;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.13.8.1.1.1"), read, write, description("The index of this NBP entry.  This index is unique\n                  with respect to the indexes of all other NBP entries,\n                  and shall remain constant throughout the lifetime\n                  of this object."), status("mandatory"), key, key_order(1)] sint32 nbpIndex;
	[textual_convention("EnumeratedINTEGER"), enumeration("valid(1),registering(2),registrationFailed(3),invalid(4)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.13.8.1.1.5"), read, write, description("The state of this NBP entry.\n                  When the registration for an entry in the nbpTable\n                  fails, it is an implementation-specific matter as to\n                  how long the entry will remain in the\n                  registrationFailed(3) state before moving to the\n                  invalid(4) state.  Note that the entry may pass\n                  immediately from the registrationFailed state to\n                  the invalid state.\n\n                  Setting this object to the value invalid(4) has the\n                  effect of invalidating the corresponding entry in the\n                  nbpTable.  That is, it  effectively disassociates the\n                  mapping identified with said entry.  It is an\n                  implementation-specific matter as to whether the agent\n                  removes an invalidated entry from the table.\n                  Accordingly, management stations must be prepared to\n                  receive from agents tabular information corresponding\n                  to entries not currently in use.  Proper\n                  interpretation of such entries requires examination\n                  of the relevant nbpState object."), status("mandatory")] string nbpState;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("ATName"), variable_length("1..32"), object_identifier("1.3.6.1.2.1.13.8.1.1.2"), read, write, description("The name of the service described by this entity.\n                  When this variable is changed, the entity should\n                  perform an NBP registration using the new nbpObject."), status("mandatory")] string nbpObject;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_APPLETALK_MIB_nbpTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"APPLETALK_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_APPLETALK_MIB_nbpTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_APPLETALK_MIB_nbpTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\APPLETALK_MIB:SNMP_GROUP.Name=\"nbpV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_APPLETALK_MIB_nbpTable";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR\\APPLETALK_MIB")
instance of SNMP_GROUP
{
Name="perPortV1ObjectGroup";
Group_Id="1.3.6.1.2.1.13.18";
Status="current";
Description="";
Reference="";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description("The table of per-port statistics for this entity.\nThe statistics available for a particular port on\n                  this entity.\n\n                  As an example, an instance of the perPortAarpInProbes\n                  object might be named perPortAarpInProbes.2"), module_name("APPLETALK-MIB"), group_objectid("1.3.6.1.2.1.13.18"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_APPLETALK_MIB_perPortTable : SnmpObjectType
{
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.18.1.1.7"), read, description("The total number of input datagrams received by DDP\n                  on this port, including those received in error."), status("mandatory")] uint32 perPortDdpInReceives;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.18.1.1.2"), read, description("The total number of AARP Probe packets sent by\n                  this entity on this port."), status("mandatory")] uint32 perPortAarpOutProbes;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.18.1.1.20"), read, description("The number of ZIP Extended Replies received by this\n                  entity on this port."), status("mandatory")] uint32 perPortZipInZipExtendedReplies;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.18.1.1.28"), read, description("The number of times this node experienced a failure\n                  in attempting to register an NBP entity on this\n                  port."), status("mandatory")] uint32 perPortNbpRegistrationFailures;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.18.1.1.14"), read, description("A count of the number of good RTMP data packets\n                  received by this entity on this port."), status("mandatory")] uint32 perPortRtmpInDataPkts;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.18.1.1.19"), read, description("The number of ZIP Replies received by this entity\n                  on this port."), status("mandatory")] uint32 perPortZipInZipReplies;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.18.1.1.15"), read, description("A count of the number of RTMP packets sent by this\n                  entity on this port."), status("mandatory")] uint32 perPortRtmpOutDataPkts;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.18.1.1.18"), read, description("The number of ZIP Queries received by this entity\n                  on this port."), status("mandatory")] uint32 perPortZipInZipQueries;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.18.1.1.13"), read, description("The number of input datagrams on this port for\n                  which this entity was not their final DDP\n                  destination, as a result of which an attempt was\n                  made to find a route to forward them to that final\n                  destination."), status("mandatory")] uint32 perPortDdpForwRequests;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.18.1.1.11"), read, description("The total number of input DDP datagrams on this\n                  port dropped because they exceeded the maximum DDP\n                  datagram size."), status("mandatory")] uint32 perPortDdpTooLongErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.18.1.1.17"), read, description("A count of the number of times RTMP deletes a route\n                  on this port because it was aged out of the table."), status("mandatory")] uint32 perPortRtmpRouteDeletes;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.18.1.1.12"), read, description("The total number of input DDP datagrams on this\n                  port for which this DDP entity was their final\n                  destination, and which were dropped because of a\n                  checksum error."), status("mandatory")] uint32 perPortDdpChecksumErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.18.1.1.10"), read, description("The total number of input DDP datagrams on this\n                  port dropped because the received data length was\n                  less than the data length specified in the DDP\n                  header or the received data length was less than the\n                  length of the expected DDP header."), status("mandatory")] uint32 perPortDdpTooShortErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.18.1.1.16"), read, description("A count of the number of good RTMP Request packets\n                  received by this entity on this port."), status("mandatory")] uint32 perPortRtmpInRequestPkts;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.18.1.1.24"), read, description("The number of NBP LookUp Replies received on this\n\n\n\n\n\n                  port."), status("mandatory")] uint32 perPortNbpInLookUpReplies;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.18.1.1.8"), read, description("The total number of input DDP datagrams on this\n                  port for which this entity was their final DDP\n                  destination."), status("mandatory")] uint32 perPortDdpInLocalDatagrams;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.18.1.1.27"), read, description("The number of NBP LookUp Replies sent on this port."), status("mandatory")] uint32 perPortNbpOutLookUpReplies;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.18.1.1.23"), read, description("The number of NBP LookUp Requests received on this\n                  port."), status("mandatory")] uint32 perPortNbpInLookUpRequests;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.18.1.1.3"), read, description("The total number of AARP Request packets received\n                  by this entity on this port."), status("mandatory")] uint32 perPortAarpInReqs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.18.1.1.5"), read, description("The total number of AARP Response packets received\n                  by this entity on this port."), status("mandatory")] uint32 perPortAarpInRsps;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.18.1.1.26"), read, description("The number of NBP Forward Requests received on this\n                  port."), status("mandatory")] uint32 perPortNbpInForwardRequests;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.18.1.1.31"), read, description("The count of AppleTalk Echo replies received on\n                  this port."), status("mandatory")] uint32 perPortEchoReplies;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.18.1.1.29"), read, description("The number of NBP packets received by this entity\n                  on this port that were rejected for any error."), status("mandatory")] uint32 perPortNbpInErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.18.1.1.4"), read, description("The total number of AARP Request packets sent by\n                  this entity on this port."), status("mandatory")] uint32 perPortAarpOutReqs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.18.1.1.6"), read, description("The total number of AARP Response packets sent by\n                  this entity on this port."), status("mandatory")] uint32 perPortAarpOutRsps;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.18.1.1.22"), read, description("The number of ZIP packets received by this entity\n                  on this port that were rejected for any error."), status("mandatory")] uint32 perPortZipInErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.18.1.1.9"), read, description("The total number of DDP datagrams addressed to this\n                  entity on this port that were addressed to an upper\n                  layer protocol for which no protocol handler\n                  existed."), status("mandatory")] uint32 perPortDdpNoProtocolHandlers;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.18.1.1.21"), read, description("The number of times a conflict has been detected on\n                  this port between this entity's zone information and\n                  another entity's zone information."), status("mandatory")] uint32 perPortZipZoneConflictErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.18.1.1.1"), read, description("The total number of AARP Probe packets received\n                  by this entity on this port."), status("mandatory")] uint32 perPortAarpInProbes;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.18.1.1.30"), read, description("The number of AppleTalk Echo requests received on\n                  this port."), status("mandatory")] uint32 perPortEchoRequests;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.18.1.1.25"), read, description("The number of NBP Broadcast Requests received on\n                  this port."), status("mandatory")] uint32 perPortNbpInBroadcastRequests;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.13.3.1.1.1"), read, description("A unique value for each AppleTalk port.\n                  Its value is between 1 and the total number of\n                  AppleTalk ports.  The value for each port must\n                  remain constant at least from the re-initialization\n                  of the entity's network management system to the\n                  next re-initialization."), status("mandatory"), virtual_key, key, key_order(1)] sint32 atportIndex;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_APPLETALK_MIB_perPortTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"APPLETALK_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_APPLETALK_MIB_perPortTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_APPLETALK_MIB_perPortTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\APPLETALK_MIB:SNMP_GROUP.Name=\"perPortV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_APPLETALK_MIB_perPortTable";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR\\APPLETALK_MIB")
instance of SNMP_GROUP
{
Name="kipV1ObjectGroup";
Group_Id="1.3.6.1.2.1.13.6";
Status="current";
Description="";
Reference="";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description("The table of routing information for KIP networks.\nAn entry in the routing table for KIP networks.\n\n                  As an example, an instance of the kipCore object\n                  might be named kipCore.0.80"), module_name("APPLETALK-MIB"), group_objectid("1.3.6.1.2.1.13.6"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_APPLETALK_MIB_kipTable : SnmpObjectType
{
	[textual_convention("IpAddress"), encoding("IpAddress"), object_syntax("IpAddress"), object_identifier("1.3.6.1.2.1.13.6.1.1.3"), read, write, description("The IP address of the next hop in the route to this\n                  entry's destination network."), status("mandatory")] string kipNextHop;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.13.6.1.1.4"), read, write, description("The number of hops required to reach the destination\n                  network to which this entry pertains."), status("mandatory")] sint32 kipHopCount;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("ATNetworkNumber"), fixed_length(2), object_identifier("1.3.6.1.2.1.13.6.1.1.1"), read, description("The first AppleTalk network address in the range\n                  for this routing entry.  This address is a two octet\n                  DDP network address in network byte order."), status("mandatory"), key, key_order(1)] string kipNetStart;
	[textual_convention("IpAddress"), encoding("IpAddress"), object_syntax("IpAddress"), object_identifier("1.3.6.1.2.1.13.6.1.1.5"), read, write, description("The form of the IP address used to broadcast on this\n                  network."), status("mandatory")] string kipBCastAddr;
	[textual_convention("EnumeratedINTEGER"), enumeration("core(1),notcore(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.13.6.1.1.6"), read, write, description("The status of kipNextHop as a core gateway."), status("mandatory")] string kipCore;
	[textual_convention("IpAddress"), encoding("IpAddress"), object_syntax("IpAddress"), object_identifier("1.3.6.1.2.1.13.6.1.1.10"), read, description("The IP address from which the routing entry was\n                  learned via the AA protocol.  If this entry was not\n                  created via the AA protocol, it should contain IP\n                  address 0.0.0.0."), status("mandatory")] string kipFrom;
	[textual_convention("EnumeratedINTEGER"), enumeration("kipRouter(1),net(2),host(3),other(4),async(5)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.13.6.1.1.7"), read, write, description("The type of the entity that this route points to."), status("mandatory")] string kipType;
	[textual_convention("EnumeratedINTEGER"), enumeration("shared(1),private(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.13.6.1.1.9"), read, write, description("If the information in this entry is propagated to\n                  other routers as part of the AA routing protocol,\n                  the value of this variable is equal to shared(1).\n                  Otherwise its value is private(2)."), status("mandatory")] string kipShare;
	[textual_convention("EnumeratedINTEGER"), enumeration("configured(1),learned(2),invalid(3)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.13.6.1.1.8"), read, write, description("The state of this network entry.\n\n                  Setting this object to the value invalid(3) has the\n                  effect of invalidating the corresponding entry in the\n                  kipTable.  That is, it  effectively disassociates the\n                  mapping identified with said entry.  It is an\n                  implementation-specific matter as to whether the agent\n                  removes an invalidated entry from the table.\n                  Accordingly, management stations must be prepared to\n                  receive from agents tabular information corresponding\n                  to entries not currently in use.  Proper\n                  interpretation of such entries requires examination\n                  of the relevant kipState object."), status("mandatory")] string kipState;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("ATNetworkNumber"), fixed_length(2), object_identifier("1.3.6.1.2.1.13.6.1.1.2"), read, write, description("The last AppleTalk network address in the range for\n                  this routing entry.  This address is a two octet DDP\n                  network address in network byte order.  If the\n                  network to which this AppleTalk port is connected is\n                  a non-extended network, the value for kipNetEnd\n\n\n\n\n\n                  shall be two octets of zero."), status("mandatory")] string kipNetEnd;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_APPLETALK_MIB_kipTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"APPLETALK_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_APPLETALK_MIB_kipTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_APPLETALK_MIB_kipTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\APPLETALK_MIB:SNMP_GROUP.Name=\"kipV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_APPLETALK_MIB_kipTable";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR\\APPLETALK_MIB")
instance of SNMP_GROUP
{
Name="aspV1ObjectGroup";
Group_Id="1.3.6.1.2.1.13.12";
Status="current";
Description="";
Reference="";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description(""), module_name("APPLETALK-MIB"), singleton, group_objectid("1.3.6.1.2.1.13.12"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_APPLETALK_MIB_asp : SnmpObjectType
{
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.12.1"), read, description("The number of ASP requests and replies received by\n                  this entity.  Note that this is not necessarily the\n                  number of packets containing ASP transactions."), status("mandatory")] uint32 aspInputTransactions;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.12.2"), read, description("The number of ASP requests and replies sent by this\n                  entity.  Note that this is not necessarily the number\n                  of packets containing ASP transactions."), status("mandatory")] uint32 aspOutputTransactions;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.12.8"), read, description("The number of times the ASP entity on this node\n                  closed a connection because it didn't receive any\n                  messages from the remote end before its timer\n                  expired."), status("mandatory")] uint32 aspTickleTimeOutCloses;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.12.7"), read, description("The number of times an error condition was returned\n                  because this server implementation could not support\n                  another session."), status("mandatory")] uint32 aspNoMoreSessionsErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.12.3"), read, description("The number of ASP Open Session requests and replies\n                  received by this entity."), status("mandatory")] uint32 aspInOpenSessions;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.12.5"), read, description("The number of ASP Close Session requests and replies\n                  received by this entity."), status("mandatory")] uint32 aspInCloseSessions;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.12.4"), read, description("The number of ASP Open Session requests and replies\n                  sent by this entity."), status("mandatory")] uint32 aspOutOpenSessions;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.12.6"), read, description("The number of ASP Close Session requests and replies\n                  sent by this entity."), status("mandatory")] uint32 aspOutCloseSessions;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_APPLETALK_MIB_aspSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"APPLETALK_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_APPLETALK_MIB_asp";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_APPLETALK_MIB_aspSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\APPLETALK_MIB:SNMP_GROUP.Name=\"aspV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_APPLETALK_MIB_asp";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description("A list of ASP connections on this entity.\nA set of information describing an ASP connection.\n\n                  As an example, an instance of the aspConnState object\n                  might be named\n                  aspConnState.0.80.220.135.0.80.239.119.12"), module_name("APPLETALK-MIB"), group_objectid("1.3.6.1.2.1.13.12"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_APPLETALK_MIB_aspConnTable : SnmpObjectType
{
	[textual_convention("EnumeratedINTEGER"), enumeration("open(1),closed(2),invalid(3)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.13.12.9.1.6"), read, write, description("The state of this ASP connection.\n                  Setting this object to the value invalid(3) has the\n                  effect of invalidating the corresponding entry in the\n                  aspConnTable.  That is, it  effectively disassociates\n                  the mapping identified with said entry.  It is an\n                  implementation-specific matter as to whether the agent\n                  removes an invalidated entry from the table.\n\n\n\n\n\n                  Accordingly, management stations must be prepared to\n                  receive from agents tabular information corresponding\n                  to entries not currently in use.  Proper\n                  interpretation of such entries requires examination\n                  of the relevant aspConnState object."), status("mandatory")] string aspConnState;
	[textual_convention("EnumeratedINTEGER"), enumeration("sss(1),wss(2),sls(3)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.13.12.9.1.5"), read, description("Specifies what mode the local session end is in."), status("mandatory")] string aspConnServerEnd;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.13.12.9.1.4"), read, description("The last request number on this ASP connection.  If\n                  this entry is in the listening mode, this object\n                  shall have a value of zero."), status("mandatory")] sint32 aspConnLastReqNum;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("DdpSocketAddress"), fixed_length(4), object_identifier("1.3.6.1.2.1.13.12.9.1.1"), read, description("The local address of this ASP connection."), status("mandatory"), virtual_key, key, key_order(1)] string aspConnLocalAddress;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("DdpSocketAddress"), fixed_length(4), object_identifier("1.3.6.1.2.1.13.12.9.1.2"), read, description("The remote address of this ASP connection.  If\n                  this entry is in the listening mode, this object\n                  shall have a value of four octets of zero."), status("mandatory"), virtual_key, key, key_order(2)] string aspConnRemoteAddress;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..255"), object_identifier("1.3.6.1.2.1.13.12.9.1.3"), read, description("The remote Connection ID of this ASP connection.  If\n                  this entry is in the listening mode, this object\n                  shall have a value of zero."), status("mandatory"), virtual_key, key, key_order(3)] sint32 aspConnID;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_APPLETALK_MIB_aspConnTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"APPLETALK_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_APPLETALK_MIB_aspConnTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_APPLETALK_MIB_aspConnTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\APPLETALK_MIB:SNMP_GROUP.Name=\"aspV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_APPLETALK_MIB_aspConnTable";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR\\APPLETALK_MIB")
instance of SNMP_GROUP
{
Name="atpV1ObjectGroup";
Group_Id="1.3.6.1.2.1.13.10";
Status="current";
Description="";
Reference="";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description(""), module_name("APPLETALK-MIB"), singleton, group_objectid("1.3.6.1.2.1.13.10"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_APPLETALK_MIB_atp : SnmpObjectType
{
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.10.2"), read, description("The number of ATP packets sent by this entity."), status("mandatory")] uint32 atpOutPkts;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.10.6"), read, description("The number of times the retry count was exceeded,\n                  and an error was returned to the client of ATP."), status("mandatory")] uint32 atpRetryCountExceededs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.10.3"), read, description("The number of times that a timeout occurred and a\n                  Transaction Request packet needed to be\n                  retransmitted by this host."), status("mandatory")] uint32 atpTRequestRetransmissions;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.10.4"), read, description("The number of times a timeout was detected and a\n                  Transaction Response packet needed to be\n                  retransmitted by this host."), status("mandatory")] uint32 atpTResponseRetransmissions;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.10.5"), read, description("The number of times the release timer expired, as a\n                  result of which a Request Control Block had to be\n\n\n\n\n\n                  deleted."), status("mandatory")] uint32 atpReleaseTimerExpiredCounts;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.10.1"), read, description("The number of ATP packets received by this entity."), status("mandatory")] uint32 atpInPkts;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_APPLETALK_MIB_atpSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"APPLETALK_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_APPLETALK_MIB_atp";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_APPLETALK_MIB_atpSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\APPLETALK_MIB:SNMP_GROUP.Name=\"atpV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_APPLETALK_MIB_atp";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description("The atpListenerTable stores information for each ATP\n                  socket that has a listener.\nThis atpListenerEntry contains information about a\n                  particular socket that has a socket listener.\n\n                  As an example, an instance of the atpListenerStatus\n                  object might be named atpListenerStatus.0.80.220.3"), module_name("APPLETALK-MIB"), group_objectid("1.3.6.1.2.1.13.10"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_APPLETALK_MIB_atpListenerTable : SnmpObjectType
{
	[textual_convention("EnumeratedINTEGER"), enumeration("valid(1),invalid(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.13.10.7.1.2"), read, write, description("The status of this socket.\n\n                  Setting this object to the value invalid(2) has the\n                  effect of invalidating the corresponding entry in\n                  the atpListenerTable.  That is, it effectively\n                  disassociates the mapping identified with said\n                  entry.  It is an implementation-specific matter as\n                  to whether the agent removes an invalidated entry\n                  from the table. Accordingly, management stations\n                  must be prepared to receive from agents tabular\n                  information corresponding to entries not currently\n                  in use.  Proper interpretation of such entries\n                  requires examination of the relevant\n                  atpListenerStatus object."), status("mandatory")] string atpListenerStatus;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("DdpSocketAddress"), fixed_length(4), object_identifier("1.3.6.1.2.1.13.10.7.1.1"), read, description("The DDP address that this socket listener is bound\n                  to. If this socket listener isn't bound to a\n                  particular address, for instance if it is intended\n                  for all interfaces, this object shall have the value\n\n\n\n\n\n                  of three octets of zero followed by one octet of\n                  socket number."), status("mandatory"), virtual_key, key, key_order(1)] string atpListenerAddress;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_APPLETALK_MIB_atpListenerTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"APPLETALK_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_APPLETALK_MIB_atpListenerTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_APPLETALK_MIB_atpListenerTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\APPLETALK_MIB:SNMP_GROUP.Name=\"atpV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_APPLETALK_MIB_atpListenerTable";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR\\APPLETALK_MIB")
instance of SNMP_GROUP
{
Name="atportptopV1ObjectGroup";
Group_Id="1.3.6.1.2.1.13.14";
Status="current";
Description="";
Reference="";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description("A list of AppleTalk point-to-point connections for\n                  this entity.\nThe description of one of the AppleTalk\n                  point-to-point connections on this entity.\n\n                  As an example, an instance of the\n                  atportPtoPRemoteAddress object might be named\n                  atportPtoPRemoteAddress.2"), module_name("APPLETALK-MIB"), group_objectid("1.3.6.1.2.1.13.14"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_APPLETALK_MIB_atportPtoPTable : SnmpObjectType
{
	[textual_convention("DisplayString"), encoding("OCTETSTRING"), object_syntax("DisplayString"), display_hint("255a"), object_identifier("1.3.6.1.2.1.13.14.1.1.3"), read, write, description("A text string containing the network node name of the\n                  entity at the other end of the point-to-point link.\n                  If the name is unknown or undefined, then this\n                  string is zero length."), status("mandatory")] string atportPtoPRemoteName;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("OCTETSTRING"), object_identifier("1.3.6.1.2.1.13.14.1.1.4"), read, write, description("The network address of the entity at the other end\n                  of the point-to-point link in network byte order.\n                  The format of this address can be determined\n                  by examinating the atportType corresponding to this\n                  entry.  If the address is unknown or undefined, then\n                  this string is zero length."), status("mandatory")] string atportPtoPRemoteAddress;
	[textual_convention("EnumeratedINTEGER"), enumeration("valid(1),invalid(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.13.14.1.1.6"), read, write, description("The status of this entry in the atportPtoPTable.\n\n                  Setting this object to the value invalid(2) has the\n                  effect of invalidating the corresponding entry in\n                  the atportPtoPTable.  That is, it  effectively\n                  disassociates the mapping identified with said\n                  entry.  It is an implementation-specific matter as\n                  to whether the agent removes an invalidated entry\n                  from the table. Accordingly, management stations\n                  must be prepared to receive from agents tabular\n                  information corresponding to entries not currently\n                  in use.  Proper interpretation of such entries\n                  requires examinationr of the relevant\n                  atportPtoPStatus object."), status("mandatory")] string atportPtoPStatus;
	[textual_convention("OBJECTIDENTIFIER"), encoding("OBJECTIDENTIFIER"), object_syntax("OBJECTIDENTIFIER"), object_identifier("1.3.6.1.2.1.13.14.1.1.2"), read, write, description("The protocol type used over the point-to-point\n                  connection."), status("mandatory")] string atportPtoPProtocol;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.13.14.1.1.5"), read, write, description("The AppleTalk port associated with this\n                  point-to-point connection.  The interface identified\n                  by a particular value of this index is the same\n                  interface as identified by the same value of\n                  atportIndex."), status("mandatory")] sint32 atportPtoPPortIndex;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.13.14.1.1.1"), read, description("A unique value for each AppleTalk point-to-point\n                  connection.  Its value is between 1 and the total\n                  number of AppleTalk point-to-point connections.  The\n                  value for each connection must remain constant at\n                  least from the re-initialization of the entity's\n                  network management system to the next\n\n\n\n\n\n                  re-initialization."), status("mandatory"), virtual_key, key, key_order(1)] sint32 atportPtoPIndex;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_APPLETALK_MIB_atportPtoPTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"APPLETALK_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_APPLETALK_MIB_atportPtoPTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_APPLETALK_MIB_atportPtoPTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\APPLETALK_MIB:SNMP_GROUP.Name=\"atportptopV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_APPLETALK_MIB_atportPtoPTable";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR\\APPLETALK_MIB")
instance of SNMP_GROUP
{
Name="atportV1ObjectGroup";
Group_Id="1.3.6.1.2.1.13.3";
Status="current";
Description="";
Reference="";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description("A list of AppleTalk ports for this entity.\nThe description of one of the AppleTalk\n                  ports on this entity.\n\n                  As an example, an instance of the atportNetFrom object\n                  might be named atportNetFrom.2"), module_name("APPLETALK-MIB"), group_objectid("1.3.6.1.2.1.13.3"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_APPLETALK_MIB_atportTable : SnmpObjectType
{
	[textual_convention("EnumeratedINTEGER"), enumeration("home(1),notHome(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.13.3.1.1.16"), read, description("An indication of whether or not the entity is\n                  homed on this port, that is to say, a port on which\n                  the entity could perform NBP registrations for\n                  services that it chooses to advertise."), status("mandatory")] string atportHome;
	[textual_convention("EnumeratedINTEGER"), enumeration("other(1),localtalk(2),ethertalk1(3),ethertalk2(4),tokentalk(5),iptalk(6),serialPPP(7),serialNonstandard(8),virtual(9),fdditalk(10),arctalk(11),smdstalk(12),aurp(13),frameRelay(14),x25(15),ip(16),osi(17),decnetIV(18),arap(19),isdnInThePacketMode(20),nonAppleTalk3Com(21),ipx(22),arns(23),hdlc(24)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.13.3.1.1.3"), read, write, description("The type of port, distinguished by the protocol\n                  immediately below DDP in the protocol stack."), status("mandatory")] string atportType;
	[textual_convention("DisplayString"), encoding("OCTETSTRING"), object_syntax("DisplayString"), display_hint("255a"), object_identifier("1.3.6.1.2.1.13.3.1.1.2"), read, write, description("A text string containing information about the\n                  port.  This string is intended for presentation\n                  to a human; it must not contain anything but printable\n                  ASCII characters."), status("mandatory")] string atportDescr;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.13.3.1.1.1"), read, description("A unique value for each AppleTalk port.\n                  Its value is between 1 and the total number of\n                  AppleTalk ports.  The value for each port must\n                  remain constant at least from the re-initialization\n                  of the entity's network management system to the\n                  next re-initialization."), status("mandatory"), key, key_order(1)] sint32 atportIndex;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("ATNetworkNumber"), fixed_length(2), object_identifier("1.3.6.1.2.1.13.3.1.1.5"), read, write, description("The last AppleTalk network address in the range\n                  configured for this port.  If the network to which\n                  this AppleTalk port is connected is a non-extended\n                  network, or if it is not a native AppleTalk port,\n                  the value for atportNetEnd shall be two octets of\n                  zero."), status("mandatory")] string atportNetEnd;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.3.1.1.14"), read, description("The number of packets received by this entity on\n                  this port."), status("mandatory")] uint32 atportInPkts;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("OCTETSTRING"), object_identifier("1.3.6.1.2.1.13.3.1.1.18"), read, description("The link-layer address of a device which caused\n                  this entity to set atportStatus to\n                  offDueToConflict(6). If this address is not\n                  available, or if the entity has not set atportStatus\n                  to offDueToConflict, this object shall be a zero\n                  length OCTET STRING."), status("mandatory")] string atportConflictPhysAddr;
	[textual_convention("EnumeratedINTEGER"), enumeration("routing(1),unconfigured(2),off(3),invalid(4),endNode(5),offDueToConflict(6),other(7)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.13.3.1.1.7"), read, write, description("The configuration status of this port.\n\n                  Setting this object to the value invalid(4) has the\n                  effect of invalidating the corresponding entry in the\n                  atportTable.  That is, it effectively disassociates the\n                  mapping identified with said entry.  It is an\n                  implementation-specific matter as to whether the agent\n                  removes an invalidated entry from the table.\n                  Accordingly, management stations must be prepared to\n                  receive from agents tabular information corresponding\n                  to entries not currently in use.  Proper\n                  interpretation of such entries requires examination\n                  of the relevant atportStatus object."), status("mandatory")] string atportStatus;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.13.3.1.1.11"), read, write, description("The physical interface associated with this\n                  AppleTalk port.  The interface identified by a\n                  particular value of this index is the same interface\n\n\n\n\n\n                  as identified by the same value of ifIndex."), status("mandatory")] sint32 atportIfIndex;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("DdpNodeAddress"), fixed_length(3), object_identifier("1.3.6.1.2.1.13.3.1.1.12"), read, description("When atportNetConfig is set to garnered(2), this\n                  variable contains the DDP address of an entity from\n                  which the AppleTalk network number was garnered.\n                  When atportNetConfig is set to\n                  conflictOrientedSeed(1), conflictAverseSeed(5),\n                  or softSeed(6), this variable contains the DDP\n                  address of an entity which confirmed or supplied our\n                  AppleTalk network number, for example by replying to\n                  a ZIP GetNetInfo request.\n\n                  If atportNetConfig is set to guessed(3) or\n                  unconfigured(4), or if the entity has not received\n                  any network number confirmation, this variable\n                  should be set to three octets of zero."), status("mandatory")] string atportNetFrom;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.3.1.1.15"), read, description("The number of packets transmitted by this entity on\n                  this port."), status("mandatory")] uint32 atportOutPkts;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("DdpNodeAddress"), fixed_length(3), object_identifier("1.3.6.1.2.1.13.3.1.1.13"), read, description("When atportZoneConfig is set to garnered(2), this\n                  variable contains the DDP address of an entity from\n                  which the AppleTalk zone list was garnered.\n\n                  When atportZoneConfig is set to\n                  conflictOrientedSeed(1), conflictAverseSeed(5), or\n                  softSeed(6), this variable contains the DDP address\n                  of an entity which confirmed or supplied our\n                  AppleTalk zone information, for example by replying\n                  to a ZIP GetNetInfo request or a ZIP Query.\n\n                  If atportZoneConfig is set to guessed(3) or\n                  unconfigured(4), or if the entity has not received\n                  any zone confirmation, this variable should be set\n                  to three octets of zero."), status("mandatory")] string atportZoneFrom;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("ATNetworkNumber"), fixed_length(2), object_identifier("1.3.6.1.2.1.13.3.1.1.4"), read, write, description("The first AppleTalk network address in the range\n                  configured for this port.  If this port is not a\n                  native AppleTalk port, this object shall have the\n                  value of two octets of zero."), status("mandatory")] string atportNetStart;
	[textual_convention("EnumeratedINTEGER"), enumeration("conflictOrientedSeed(1),garnered(2),guessed(3),unconfigured(4),conflictAverseSeed(5),softSeed(6)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.13.3.1.1.8"), read, write, description("The status of the network information for this port.\n                  If this port is not a native AppleTalk port, this\n                  object shall have the value unconfigured(4)."), status("mandatory")] string atportNetConfig;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("DdpNodeAddress"), fixed_length(3), object_identifier("1.3.6.1.2.1.13.3.1.1.6"), read, write, description("The AppleTalk network address configured for this\n                  port.  In addition, this value may be used as a hint\n                  for an initial node number used during node-finding.\n                  If this port is not a native AppleTalk port, this\n                  object shall have the value of three octets of zero."), status("mandatory")] string atportNetAddress;
	[textual_convention("EnumeratedINTEGER"), enumeration("conflictOrientedSeed(1),garnered(2),guessed(3),unconfigured(4),conflictAverseSeed(5),softSeed(6)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.13.3.1.1.9"), read, write, description("The status of the zone information for this port.\n                  If this port is not a native AppleTalk port, this\n                  object shall have the value unconfigured(4)."), status("mandatory")] string atportZoneConfig;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("ATName"), variable_length("0..32"), object_identifier("1.3.6.1.2.1.13.3.1.1.10"), read, write, description("The name of the default zone for this port.  If\n                  this port only has one zone, that zone is\n                  represented here. If this port is not a native\n                  AppleTalk port, this object shall contain an octet\n                  string of zero length.\n\n                  When this value is changed in a router, the router\n                  must send a zipNotify packet on the associated\n                  network."), status("mandatory")] string atportZoneDefault;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("ATName"), variable_length("0..32"), object_identifier("1.3.6.1.2.1.13.3.1.1.17"), read, write, description("The current zone for the port.  In general, this is\n                  the zone name in which services on this port will\n                  be registered.  If this port is not a native\n                  AppleTalk port, this object shall contain an octet\n                  string of zero length.  Note that modifications to\n                  this object do not affect the nbpTable."), status("mandatory")] string atportCurrentZone;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_APPLETALK_MIB_atportTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"APPLETALK_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_APPLETALK_MIB_atportTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_APPLETALK_MIB_atportTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\APPLETALK_MIB:SNMP_GROUP.Name=\"atportV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_APPLETALK_MIB_atportTable";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description("The table of zone information for non-default\n                  zones on ports.\nAn entry of zone information for a port.\n\n                  As an example, an instance of the atportZoneStatus\n                  object might be named\n                  atportZoneStatus.2.8.84.119.105.108.105.103.104.116"), module_name("APPLETALK-MIB"), group_objectid("1.3.6.1.2.1.13.3"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_APPLETALK_MIB_atportZoneTable : SnmpObjectType
{
	[textual_convention("EnumeratedINTEGER"), enumeration("valid(1),invalid(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.13.3.2.1.3"), read, write, description("The status of this zone entry.\n\n                  Setting this object to the value invalid(2) has the\n                  effect of invalidating the corresponding entry in\n                  the atportZoneTable.  That is, it effectively\n                  disassociates the mapping identified with said\n                  entry.  It is an implementation-specific matter as\n                  to whether the agent removes an invalidated entry\n                  from the table. Accordingly, management stations\n                  must be prepared to receive from agents tabular\n                  information corresponding to entries not currently\n                  in use.  Proper interpretation of such entries\n                  requires examination of the relevant\n                  atportZoneStatus object."), status("mandatory")] string atportZoneStatus;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.13.3.2.1.1"), read, description("An integer representing the port to which this zone\n                  belongs. The port identified by a particular value\n                  of this object is the same port as identified by the\n                  same value of atportIndex."), status("mandatory"), virtual_key, key, key_order(1)] sint32 atportZonePort;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("ATName"), variable_length("1..32"), object_identifier("1.3.6.1.2.1.13.3.2.1.2"), read, description("A zone name configured for the AppleTalk port\n                  referred to in the corresponding entry of\n                  atportZonePort.\n\n                  When this value is changed in a router, the router\n                  must send a zipNotify packet on the associated\n                  network."), status("mandatory"), virtual_key, key, key_order(2)] string atportZoneName;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_APPLETALK_MIB_atportZoneTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"APPLETALK_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_APPLETALK_MIB_atportZoneTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_APPLETALK_MIB_atportZoneTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\APPLETALK_MIB:SNMP_GROUP.Name=\"atportV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_APPLETALK_MIB_atportZoneTable";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR\\APPLETALK_MIB")
instance of SNMP_GROUP
{
Name="aarpV1ObjectGroup";
Group_Id="1.3.6.1.2.1.13.2";
Status="current";
Description="";
Reference="";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description(""), module_name("APPLETALK-MIB"), singleton, group_objectid("1.3.6.1.2.1.13.2"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_APPLETALK_MIB_aarp : SnmpObjectType
{
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.2.2"), read, description("The number of times the AARP cache for this entity\n                  was searched."), status("mandatory")] uint32 aarpLookups;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.2.3"), read, description("The number of times an entry was searched for and\n                  found in the AARP cache for this entity."), status("mandatory")] uint32 aarpHits;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_APPLETALK_MIB_aarpSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"APPLETALK_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_APPLETALK_MIB_aarp";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_APPLETALK_MIB_aarpSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\APPLETALK_MIB:SNMP_GROUP.Name=\"aarpV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_APPLETALK_MIB_aarp";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description("The AppleTalk Address Translation Table contains an\n                  equivalence of AppleTalk Network Addresses to the link\n                  layer physical address.\nEach entry contains one AppleTalk Network Address to\n                  physical address equivalence.\n\n                  As an example, an instance of the aarpPhysAddress\n                  object might be named aarpPhysAddress.1.0.80.234"), module_name("APPLETALK-MIB"), group_objectid("1.3.6.1.2.1.13.2"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_APPLETALK_MIB_aarpTable : SnmpObjectType
{
	[textual_convention("EnumeratedINTEGER"), enumeration("valid(1),invalid(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.13.2.1.1.4"), read, write, description("The status of this AARP entry.\n                  Setting this object to the value invalid(2) has the\n                  effect of invalidating the corresponding entry in the\n                  aarpTable.  That is, it effectively disassociates\n                  the mapping identified with said entry.  It is an\n                  implementation-specific matter as to whether the agent\n                  removes an invalidated entry from the table.\n                  Accordingly, management stations must be prepared to\n                  receive from agents tabular information corresponding\n                  to entries not currently in use.  Proper\n                  interpretation of such entries requires examination\n                  of the relevant aarpStatus object."), status("mandatory")] string aarpStatus;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.13.2.1.1.1"), read, description("The interface on which this entry's equivalence is\n                  effective.  The interface identified by a particular\n                  value of this index is the same interface as\n                  identified by the same value of ifIndex."), status("mandatory"), key, key_order(1)] sint32 aarpIfIndex;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("DdpNodeAddress"), fixed_length(3), object_identifier("1.3.6.1.2.1.13.2.1.1.3"), read, description("The AppleTalk Network Address corresponding to the\n                  media-dependent physical address."), status("mandatory"), key, key_order(2)] string aarpNetAddress;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("OCTETSTRING"), object_identifier("1.3.6.1.2.1.13.2.1.1.2"), read, write, description("The media-dependent physical address."), status("mandatory")] string aarpPhysAddress;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_APPLETALK_MIB_aarpTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"APPLETALK_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_APPLETALK_MIB_aarpTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_APPLETALK_MIB_aarpTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\APPLETALK_MIB:SNMP_GROUP.Name=\"aarpV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_APPLETALK_MIB_aarpTable";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR\\APPLETALK_MIB")
instance of SNMP_GROUP
{
Name="ddpV1ObjectGroup";
Group_Id="1.3.6.1.2.1.13.4";
Status="current";
Description="";
Reference="";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description(""), module_name("APPLETALK-MIB"), singleton, group_objectid("1.3.6.1.2.1.13.4"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_APPLETALK_MIB_ddp : SnmpObjectType
{
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.4.3"), read, description("The total number of long DDP datagrams which were\n                  transmitted from this entity."), status("mandatory")] uint32 ddpOutLongs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.4.7"), read, description("The total number of DDP datagrams addressed to this\n                  entity that were addressed to an upper layer protocol\n\n\n\n\n\n                  for which no protocol handler existed."), status("mandatory")] uint32 ddpNoProtocolHandlers;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.4.2"), read, description("The total number of short DDP datagrams which were\n                  transmitted from this entity."), status("mandatory")] uint32 ddpOutShorts;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.4.4"), read, description("The total number of input datagrams received by\n                  DDP, including those received in error."), status("mandatory")] uint32 ddpInReceives;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.4.8"), read, description("The total number of DDP datagrams dropped because a\n                  route could not be found to their final destination."), status("mandatory")] uint32 ddpOutNoRoutes;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.4.1"), read, description("The total number of DDP datagrams which were\n                  supplied to DDP by local DDP clients in requests for\n\n\n\n\n\n                  transmission.  Note that this counter does not\n                  include any datagrams counted in ddpForwRequests."), status("mandatory")] uint32 ddpOutRequests;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.4.5"), read, description("The number of input datagrams for which this entity\n                  was not their final DDP destination, as a result of\n\n\n\n\n\n                  which an attempt was made to find a route to forward\n                  them to that final destination."), status("mandatory")] uint32 ddpForwRequests;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.4.10"), read, description("The total number of input DDP datagrams dropped\n                  because they exceeded the maximum DDP datagram\n                  size."), status("mandatory")] uint32 ddpTooLongErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.4.12"), read, description("The total number of input DDP datagrams dropped\n                  because this entity was not their final destination\n                  and their type was short DDP."), status("mandatory")] uint32 ddpShortDDPErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.4.13"), read, description("The total number of input DDP datagrams dropped\n                  because this entity was not their final destination\n                  and their hop count would exceed 15."), status("mandatory")] uint32 ddpHopCountErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.4.14"), read, description("The total number of input DDP datagrams for which\n                  this DDP entity was their final destination, and\n                  which were dropped because of a checksum error."), status("mandatory")] uint32 ddpChecksumErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.4.9"), read, description("The total number of input DDP datagrams dropped\n                  because the received data length was less than the\n                  data length specified in the DDP header or the\n                  received data length was less than the length of the\n                  expected DDP header."), status("mandatory")] uint32 ddpTooShortErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.4.18"), read, description("The number of times the entity attempted to add an\n                  entry to the forwarding table but failed due to\n                  overflow."), status("mandatory")] uint32 ddpForwardingTableOverflows;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.4.11"), read, description("The total number of input DDP datagrams dropped\n                  because this entity was not their final destination\n                  and they were addressed to the link level broadcast."), status("mandatory")] uint32 ddpBroadcastErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.4.6"), read, description("The total number of input DDP datagrams for which\n                  this\n                  entity was their final DDP destination."), status("mandatory")] uint32 ddpInLocalDatagrams;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_APPLETALK_MIB_ddpSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"APPLETALK_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_APPLETALK_MIB_ddp";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_APPLETALK_MIB_ddpSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\APPLETALK_MIB:SNMP_GROUP.Name=\"ddpV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_APPLETALK_MIB_ddp";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description("A table of forwarding entries for DDP.  This table\n                  contains a route for each AppleTalk network currently\n                  known to the entity.\nA forwarding entry for a particular AppleTalk\n                  network.\n\n                  As an example, an instance of the ddpForwardingPort\n                  object might be named ddpForwardingPort.0.90"), module_name("APPLETALK-MIB"), group_objectid("1.3.6.1.2.1.13.4"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_APPLETALK_MIB_ddpForwardingTable : SnmpObjectType
{
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("OCTETSTRING"), object_identifier("1.3.6.1.2.1.13.4.16.1.3"), read, description("The next hop in the route to this entry's\n                  destination network.  The format of this address can\n                  be determined by examinating the atportType\n                  corresponding to this entry."), status("mandatory")] string ddpForwardingNextHop;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("ATNetworkNumber"), fixed_length(2), object_identifier("1.3.6.1.2.1.13.4.16.1.2"), read, description("The first network number in the network range\n                  matched by this forwarding entry."), status("mandatory")] string ddpForwardingNetStart;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.4.16.1.6"), read, description("The number of times this entry has been used to\n                  route a packet to the destination network.  Note\n                  that this counter is not cleared when the\n                  corresponding ddpForwardingNextHop variable\n                  changes."), status("mandatory")] uint32 ddpForwardingUseCounts;
	[textual_convention("TimeTicks"), encoding("TimeTicks"), object_syntax("TimeTicks"), object_identifier("1.3.6.1.2.1.13.4.16.1.5"), read, description("The value of sysUpTime at the time of the last\n                  modification to this entry.  The initial value of\n                  ddpForwardingModified time shall be the value of\n                  sysUpTime at the time the entry is created."), status("mandatory")] uint32 ddpForwardingModifiedTime;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.13.4.16.1.7"), read, description("The AppleTalk port through which\n                  ddpForwardingNextHop is reached.  The interface\n                  identified by a particular value of this variable is\n                  the same interface as identified by the same value\n                  of atportIndex."), status("mandatory")] sint32 ddpForwardingPort;
	[textual_convention("OBJECTIDENTIFIER"), encoding("OBJECTIDENTIFIER"), object_syntax("OBJECTIDENTIFIER"), object_identifier("1.3.6.1.2.1.13.4.16.1.4"), read, description("The routing mechanism by which this route was\n                  learned."), status("mandatory")] string ddpForwardingProto;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("ATNetworkNumber"), fixed_length(2), object_identifier("1.3.6.1.2.1.13.4.16.1.1"), read, description("The last network number in the network range\n                  matched by this forwarding entry.  This will not be\n                  zero even if this corresponds to a non-extended\n\n\n\n\n\n                  net."), status("mandatory"), virtual_key, key, key_order(1)] string ddpForwardingNetEnd;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_APPLETALK_MIB_ddpForwardingTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"APPLETALK_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_APPLETALK_MIB_ddpForwardingTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_APPLETALK_MIB_ddpForwardingTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\APPLETALK_MIB:SNMP_GROUP.Name=\"ddpV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_APPLETALK_MIB_ddpForwardingTable";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description("The ddpListenerTable stores information for each\n                  DDP socket that has a listener.\nThis ddpListenerEntry contains information about a\n                  particular socket that has a socket listener.\n\n                  As an example, an instance of the ddpListenerStatus\n                  object might be named ddpListenerStatus.0.80.220.1"), module_name("APPLETALK-MIB"), group_objectid("1.3.6.1.2.1.13.4"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_APPLETALK_MIB_ddpListenerTable : SnmpObjectType
{
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.4.15.1.2"), read, description("The number of packets received for this listener."), status("mandatory")] uint32 ddpListenerInPkts;
	[textual_convention("EnumeratedINTEGER"), enumeration("valid(1),invalid(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.13.4.15.1.3"), read, write, description("The status of this socket listener.\n                  Setting this object to the value invalid(2) has the\n                  effect of invalidating the corresponding entry in the\n                  ddpListenerTable.  That is, it effectively\n                  disassociates the mapping identified with said\n                  entry.  It is an implementation-specific matter as\n                  to whether the agent removes an invalidated entry\n                  from the table. Accordingly, management stations\n                  must be prepared to receive from agents tabular\n                  information corresponding to entries not currently\n                  in use.  Proper interpretation of such entries\n                  requires examination of the relevant\n                  ddpListenerStatus object."), status("mandatory")] string ddpListenerStatus;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("DdpSocketAddress"), fixed_length(4), object_identifier("1.3.6.1.2.1.13.4.15.1.1"), read, description("The DDP address that this socket listener is bound\n                  to.  If this socket listener isn't bound to a\n                  particular address, for instance if it is intended\n                  for all interfaces, this object shall have the value\n                  of three octets of zero followed by one octet of\n                  socket number. The socket number must not equal\n                  zero."), status("mandatory"), virtual_key, key, key_order(1)] string ddpListenerAddress;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_APPLETALK_MIB_ddpListenerTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"APPLETALK_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_APPLETALK_MIB_ddpListenerTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_APPLETALK_MIB_ddpListenerTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\APPLETALK_MIB:SNMP_GROUP.Name=\"ddpV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_APPLETALK_MIB_ddpListenerTable";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR\\APPLETALK_MIB")
instance of SNMP_GROUP
{
Name="rtmpV1ObjectGroup";
Group_Id="1.3.6.1.2.1.13.5";
Status="current";
Description="";
Reference="";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description(""), module_name("APPLETALK-MIB"), singleton, group_objectid("1.3.6.1.2.1.13.5"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_APPLETALK_MIB_rtmp : SnmpObjectType
{
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.5.6"), read, description("A count of the number of times RTMP changes the\n                  Next Internet Router in a routing entry because the\n                  hop count advertised in a routing tuple was less\n                  than the current hop count for a particular network."), status("mandatory")] uint32 rtmpNextIRLessChanges;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.5.5"), read, description("A count of the number of times RTMP changes the\n                  Next Internet Router in a routing entry because the\n                  hop count advertised in a routing tuple was equal to\n                  the current hop count for a particular network."), status("mandatory")] uint32 rtmpNextIREqualChanges;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.5.2"), read, description("A count of the number of good RTMP data packets\n                  received by this entity."), status("mandatory")] uint32 rtmpInDataPkts;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.5.3"), read, description("A count of the number of RTMP packets sent by this\n                  entity."), status("mandatory")] uint32 rtmpOutDataPkts;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.5.8"), read, description("The number of times RTMP attempted to add a route\n                  to the RTMP table but failed due to lack of space."), status("mandatory")] uint32 rtmpRoutingTableOverflows;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.5.7"), read, description("A count of the number of times RTMP deletes a route\n                  because it was aged out of the table.  This can help\n                  to detect routing problems."), status("mandatory")] uint32 rtmpRouteDeletes;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.5.4"), read, description("A count of the number of good RTMP Request packets\n                  received by this entity."), status("mandatory")] uint32 rtmpInRequestPkts;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_APPLETALK_MIB_rtmpSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"APPLETALK_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_APPLETALK_MIB_rtmp";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_APPLETALK_MIB_rtmpSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\APPLETALK_MIB:SNMP_GROUP.Name=\"rtmpV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_APPLETALK_MIB_rtmp";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description("A list of Routing Table Maintenance Protocol\n                  entries for this entity.\nThe route entry to a particular network range.\n\n                  As an example, an instance of the rtmpPort object\n                  might be named rtmpPort.0.80"), module_name("APPLETALK-MIB"), group_objectid("1.3.6.1.2.1.13.5"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_APPLETALK_MIB_rtmpTable : SnmpObjectType
{
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("OCTETSTRING"), object_identifier("1.3.6.1.2.1.13.5.1.1.3"), read, description("The next internet router in the route to this\n                  entry's destination network.  The format of this\n                  address can be determined by examinating the\n                  atportType corresponding to this entry."), status("mandatory")] string rtmpNextHop;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("ATNetworkNumber"), fixed_length(2), object_identifier("1.3.6.1.2.1.13.5.1.1.2"), read, description("The last DDP network address in the network range\n                  to which this routing entry pertains.  This is a two\n                  octet DDP network address in network byte order.  If\n                  the network to which this routing entry pertains is\n\n\n\n\n\n                  a non-extended network, the value for rtmpRangeEnd\n                  shall be two octets of zero."), status("mandatory")] string rtmpRangeEnd;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("ATNetworkNumber"), fixed_length(2), object_identifier("1.3.6.1.2.1.13.5.1.1.1"), read, description("The first DDP network address in the network range\n                  to which this routing entry pertains.  This is a two\n                  octet DDP network address in network byte order."), status("mandatory"), key, key_order(1)] string rtmpRangeStart;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.13.5.1.1.6"), read, description("The number of hops required to reach the\n                  destination network to which this routing entry\n                  pertains."), status("mandatory")] sint32 rtmpHops;
	[textual_convention("EnumeratedINTEGER"), enumeration("other(1),appletalk(2),serialPPP(3),serialNonstandard(4)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.13.5.1.1.4"), read, description("The type of network over which this route points."), status("mandatory")] string rtmpType;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.13.5.1.1.5"), read, description("The AppleTalk port over which this route points.\n                  The interface identified by a particular value of\n                  this variable is the same interface as identified by\n                  the same value of atportIndex."), status("mandatory")] sint32 rtmpPort;
	[textual_convention("EnumeratedINTEGER"), enumeration("good(1),suspect(2),badZero(3),badOne(4),invalid(5)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.13.5.1.1.7"), read, write, description("The status of the information contained in this\n                  route entry.\n\n                  Setting this object to the value invalid(5) has the\n                  effect of invalidating the corresponding entry in\n                  the rtmpTable.  That is, it  effectively\n                  disassociates the mapping identified with said\n                  entry.  It is an implementation-specific matter as\n                  to whether the agent removes an invalidated entry\n                  from the table. Accordingly, management stations\n                  must be prepared to receive from agents tabular\n                  information corresponding to entries not currently\n                  in use.  Proper interpretation of such entries\n                  requires examination of the relevant rtmpState\n                  object."), status("mandatory")] string rtmpState;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_APPLETALK_MIB_rtmpTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"APPLETALK_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_APPLETALK_MIB_rtmpTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_APPLETALK_MIB_rtmpTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\APPLETALK_MIB:SNMP_GROUP.Name=\"rtmpV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_APPLETALK_MIB_rtmpTable";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR\\APPLETALK_MIB")
instance of SNMP_GROUP
{
Name="papV1ObjectGroup";
Group_Id="1.3.6.1.2.1.13.11";
Status="current";
Description="";
Reference="";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description(""), module_name("APPLETALK-MIB"), singleton, group_objectid("1.3.6.1.2.1.13.11"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_APPLETALK_MIB_pap : SnmpObjectType
{
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.11.4"), read, description("The number of PAP Data messages sent by\n                  this entity."), status("mandatory")] uint32 papOutDatas;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.11.7"), read, description("The number of times the PAP entity on this node\n                  closed a connection because it didn't receive a\n                  Tickle message before its timer expired."), status("mandatory")] uint32 papTickleTimeoutCloses;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.11.1"), read, description("The number of PAP Open Connection requests received\n                  by this entity."), status("mandatory")] uint32 papInOpenConns;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.11.5"), read, description("The number of PAP Close Connection requests\n                  received by this entity."), status("mandatory")] uint32 papInCloseConns;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.11.2"), read, description("The number of PAP Open Connection requests sent by\n                  this entity."), status("mandatory")] uint32 papOutOpenConns;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.11.6"), read, description("The number of PAP Close Connection requests sent by\n                  this entity."), status("mandatory")] uint32 papOutCloseConns;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.11.3"), read, description("The number of PAP Data messages received by\n                  this entity."), status("mandatory")] uint32 papInDatas;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_APPLETALK_MIB_papSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"APPLETALK_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_APPLETALK_MIB_pap";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_APPLETALK_MIB_papSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\APPLETALK_MIB:SNMP_GROUP.Name=\"papV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_APPLETALK_MIB_pap";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description("A list of servers on this entity that are\n                  accessible through the Printer Access Protocol.\nA set of information about a particular PAP server's\n                  configuration and performance.\n\n                  As an example, an instance of the papServerStatus\n                  object might be named papServerStatus.1"), module_name("APPLETALK-MIB"), group_objectid("1.3.6.1.2.1.13.11"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_APPLETALK_MIB_papServerTable : SnmpObjectType
{
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.11.8.1.7"), read, description("The number of times this PAP server rejected a job\n                  because the job was not correctly authenticated."), status("mandatory")] uint32 papServerAuthenticationFailures;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.11.8.1.4"), read, description("The number of jobs that have been accepted and\n                  successfully executed by this server."), status("mandatory")] uint32 papServerCompletedJobs;
	[textual_convention("DisplayString"), encoding("OCTETSTRING"), object_syntax("DisplayString"), display_hint("255a"), object_identifier("1.3.6.1.2.1.13.11.8.1.11"), read, description("The last status message that was transmitted by\n                  this server."), status("mandatory")] string papServerLastStatusMsg;
	[textual_convention("EnumeratedINTEGER"), enumeration("valid(1),invalid(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.13.11.8.1.10"), read, write, description("The state of this PAP Server entry.\n\n                  Setting this object to the value invalid(2) has the\n                  effect of invalidating the corresponding entry in\n                  the papServerTable.  That is, it  effectively\n                  disassociates the mapping identified with said\n                  entry.  It is an implementation-specific matter as\n                  to whether the agent removes an invalidated entry\n                  from the table. Accordingly, management stations\n                  must be prepared to receive from agents tabular\n                  information corresponding to entries not currently\n\n\n\n\n\n                  in use.  Proper interpretation of such entries\n                  requires examination of the relevant papServerState\n                  object."), status("mandatory")] string papServerState;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.11.8.1.9"), read, description("The number of times this PAP server rejected a job\n                  for some reason other than authentication or\n                  accounting failures."), status("mandatory")] uint32 papServerGeneralFailures;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("DdpSocketAddress"), fixed_length(4), object_identifier("1.3.6.1.2.1.13.11.8.1.2"), read, write, description("The Server Listening Socket that this PAP server is\n                  listening on."), status("mandatory")] string papServerListeningSocket;
	[textual_convention("DisplayString"), encoding("OCTETSTRING"), object_syntax("DisplayString"), display_hint("255a"), object_identifier("1.3.6.1.2.1.13.11.8.1.3"), read, description("The status string of this server.  This is the\n                  message as it would appear in a PAP Status Reply\n                  from this server."), status("mandatory")] string papServerStatus;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.13.11.8.1.6"), read, description("The minimum number of GetNextJob calls that are\n                  currently waiting for a job."), status("mandatory")] sint32 papServerFreeJobs;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.13.11.8.1.5"), read, description("The number of GetNextJob calls that have accepted\n                  and are currently executing a job."), status("mandatory")] sint32 papServerBusyJobs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.11.8.1.8"), read, description("The number of times this PAP server rejected a job\n                  because the job did not fit some accounting rule,\n                  such as exceeding a quota."), status("mandatory")] uint32 papServerAccountingFailures;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.13.11.8.1.1"), read, description("An unique value for each Printer Access Protocol\n                  Server."), status("mandatory"), virtual_key, key, key_order(1)] sint32 papServerIndex;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_APPLETALK_MIB_papServerTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"APPLETALK_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_APPLETALK_MIB_papServerTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_APPLETALK_MIB_papServerTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\APPLETALK_MIB:SNMP_GROUP.Name=\"papV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_APPLETALK_MIB_papServerTable";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR\\APPLETALK_MIB")
instance of SNMP_GROUP
{
Name="zipRouterV1ObjectGroup";
Group_Id="1.3.6.1.2.1.13.7";
Status="current";
Description="";
Reference="";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description(""), module_name("APPLETALK-MIB"), singleton, group_objectid("1.3.6.1.2.1.13.7"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_APPLETALK_MIB_zipRouter : SnmpObjectType
{
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.7.5"), read, description("The number of times a conflict has been detected\n                  between this entity's zone information and another\n                  entity's zone information."), status("mandatory")] uint32 zipZoneConflictErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.7.4"), read, description("The number of ZIP Extended Replies received by this\n                  entity."), status("mandatory")] uint32 zipInZipExtendedReplies;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.7.6"), read, description("The number of ZIP Takedown or ZIP Bringup packets\n                  received by this entity.  Note that as the ZIP\n                  Takedown and ZIP Bringup packets have been\n                  obsoleted, the receipt of one of these packets\n                  indicates that a node sent it in error."), status("mandatory")] uint32 zipInObsoletes;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.7.3"), read, description("The number of ZIP Replies received by this entity."), status("mandatory")] uint32 zipInZipReplies;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.7.2"), read, description("The number of ZIP Queries received by this entity."), status("mandatory")] uint32 zipInZipQueries;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_APPLETALK_MIB_zipRouterSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"APPLETALK_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_APPLETALK_MIB_zipRouter";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_APPLETALK_MIB_zipRouterSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\APPLETALK_MIB:SNMP_GROUP.Name=\"zipRouterV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_APPLETALK_MIB_zipRouter";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description("The table of zone information for reachable\n                  AppleTalk networks.\nAn entry of zone information for a particular zone\n                  and network combination.\n\n                  As an example, an instance of the zipZoneState object\n                  might be named zipZoneState.0.80.4"), module_name("APPLETALK-MIB"), group_objectid("1.3.6.1.2.1.13.7"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_APPLETALK_MIB_zipTable : SnmpObjectType
{
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("ATName"), variable_length("0..32"), object_identifier("1.3.6.1.2.1.13.7.1.1.1"), read, description("The zone name of this entry.  This is stored in\n                  Mac ASCII format.  If the full zone list for the\n                  entry is not known, the value for zipZoneName shall\n                  be a zero length octet string."), status("mandatory")] string zipZoneName;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("OCTETSTRING"), object_identifier("1.3.6.1.2.1.13.7.1.1.6"), read, description("The address from which this zone name to network\n                  number mapping was learned.  The format of this\n                  address can be determined by examining the\n                  atportType corresponding to this entry.  When this\n                  mapping is learned from the entity itself, this\n                  object shall have the value of three\n                  octets of zero."), status("mandatory")] string zipZoneFrom;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.13.7.1.1.7"), read, description("The AppleTalk port through which this zone name to\n                  network number mapping was learned.  The interface\n                  identified by a particular value of this variable is\n                  the same interface as identified by the same value\n                  of atportIndex."), status("mandatory")] sint32 zipZonePort;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.13.7.1.1.2"), read, description("An integer that is unique to the zipZoneName that\n                  is present in this entry.  For any given zone name,\n                  every zipEntry that has an equal zone name will have\n                  the same zipZoneIndex.  When a zone name is\n                  discovered which is not currently in the table, it\n                  will be assigned an index greater than any\n                  previously assigned index."), status("mandatory"), key, key_order(2)] sint32 zipZoneIndex;
	[textual_convention("EnumeratedINTEGER"), enumeration("valid(1),invalid(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.13.7.1.1.5"), read, write, description("The state of this zip entry.\n\n                  Setting this object to the value invalid(2) has the\n                  effect of invalidating the corresponding entry in\n                  the zipTable.  That is, it  effectively\n                  disassociates the mapping identified with said\n                  entry.  It is an implementation-specific matter as\n                  to whether the agent removes an invalidated entry\n                  from the table. Accordingly, management stations\n                  must be prepared to receive from agents tabular\n                  information corresponding to entries not currently\n                  in use.  Proper interpretation of such entries\n                  requires examination of the relevant zipZoneState\n                  object."), status("mandatory")] string zipZoneState;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("ATNetworkNumber"), fixed_length(2), object_identifier("1.3.6.1.2.1.13.7.1.1.4"), read, description("The network that ends the range for this entry.\n                  This address is a two octet DDP network address in\n                  network byte order.  If the network to which this\n                  zip entry pertains is a non-extended network, the\n                  value for zipZoneNetEnd shall be two octets of\n                  zero."), status("mandatory")] string zipZoneNetEnd;
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("ATNetworkNumber"), fixed_length(2), object_identifier("1.3.6.1.2.1.13.7.1.1.3"), read, description("The network that starts the range for this entry.\n                  This address is a two octet DDP network address in\n                  network byte order."), status("mandatory"), key, key_order(1)] string zipZoneNetStart;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_APPLETALK_MIB_zipTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"APPLETALK_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_APPLETALK_MIB_zipTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_APPLETALK_MIB_zipTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\APPLETALK_MIB:SNMP_GROUP.Name=\"zipRouterV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_APPLETALK_MIB_zipTable";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description("The table of Net Info packets received by each port\n                  on this entity.\nThe description of the Net Info packets received on\n                  a particular port on this entity.  One such entry\n                  shall exist for each atport on this router entity.\n\n                  As an example, an instance of the zipInGetNetInfos\n                  object might be named zipInGetNetInfos.2"), module_name("APPLETALK-MIB"), group_objectid("1.3.6.1.2.1.13.7"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_APPLETALK_MIB_zipRouterNetInfoTable : SnmpObjectType
{
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.7.7.1.2"), read, description("The number of ZIP GetNetInfo Reply packets sent out\n                  this port by this entity."), status("mandatory")] uint32 zipOutGetNetInfoReplies;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.7.7.1.1"), read, description("The number of ZIP GetNetInfo packets received on\n                  this port by this entity."), status("mandatory")] uint32 zipInGetNetInfos;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.7.7.1.4"), read, description("The number of times this entity had to broadcast a\n                  ZIP GetNetInfo Reply because the GetNetInfo Request\n                  had an invalid address."), status("mandatory")] uint32 zipAddressInvalids;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.7.7.1.3"), read, description("The number of times this entity has sent a ZIP\n                  GetNetInfo Reply with the zone invalid bit set in\n                  response to a GetNetInfo Request with an invalid\n                  zone name."), status("mandatory")] uint32 zipZoneOutInvalids;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.13.3.1.1.1"), read, description("A unique value for each AppleTalk port.\n                  Its value is between 1 and the total number of\n                  AppleTalk ports.  The value for each port must\n                  remain constant at least from the re-initialization\n                  of the entity's network management system to the\n                  next re-initialization."), status("mandatory"), virtual_key, key, key_order(1)] sint32 atportIndex;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_APPLETALK_MIB_zipRouterNetInfoTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"APPLETALK_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_APPLETALK_MIB_zipRouterNetInfoTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_APPLETALK_MIB_zipRouterNetInfoTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\APPLETALK_MIB:SNMP_GROUP.Name=\"zipRouterV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_APPLETALK_MIB_zipRouterNetInfoTable";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR\\APPLETALK_MIB")
instance of SNMP_GROUP
{
Name="rtmpStubV1ObjectGroup";
Group_Id="1.3.6.1.2.1.13.16";
Status="current";
Description="";
Reference="";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description(""), module_name("APPLETALK-MIB"), singleton, group_objectid("1.3.6.1.2.1.13.16"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_APPLETALK_MIB_rtmpStub : SnmpObjectType
{
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.16.3"), read, description("A count of the number of RTMP packets received by\n                  this entity that were rejected for an error other\n                  than version mismatch."), status("mandatory")] uint32 rtmpInErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.16.2"), read, description("A count of the number of RTMP packets received by\n                  this entity that were rejected due to a version\n                  mismatch."), status("mandatory")] uint32 rtmpInVersionMismatches;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.16.1"), read, description("A count of the number of RTMP Request packets sent\n                  by this entity."), status("mandatory")] uint32 rtmpOutRequestPkts;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_APPLETALK_MIB_rtmpStubSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"APPLETALK_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_APPLETALK_MIB_rtmpStub";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_APPLETALK_MIB_rtmpStubSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\APPLETALK_MIB:SNMP_GROUP.Name=\"rtmpStubV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_APPLETALK_MIB_rtmpStub";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR\\APPLETALK_MIB")
instance of SNMP_GROUP
{
Name="atechoV1ObjectGroup";
Group_Id="1.3.6.1.2.1.13.9";
Status="current";
Description="";
Reference="";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[description(""), module_name("APPLETALK-MIB"), singleton, group_objectid("1.3.6.1.2.1.13.9"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_APPLETALK_MIB_atecho : SnmpObjectType
{
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.9.2"), read, description("The number of AppleTalk Echo replies sent."), status("mandatory")] uint32 atechoReplies;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.9.1"), read, description("The number of AppleTalk Echo requests received."), status("mandatory")] uint32 atechoRequests;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.9.4"), read, description("The count of AppleTalk Echo replies received."), status("mandatory")] uint32 atechoInReplies;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.13.9.3"), read, description("The count of AppleTalk Echo requests sent."), status("mandatory")] uint32 atechoOutRequests;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_APPLETALK_MIB_atechoSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"APPLETALK_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_APPLETALK_MIB_atecho";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_APPLETALK_MIB_atechoSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\APPLETALK_MIB:SNMP_GROUP.Name=\"atechoV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_APPLETALK_MIB_atecho";
};


