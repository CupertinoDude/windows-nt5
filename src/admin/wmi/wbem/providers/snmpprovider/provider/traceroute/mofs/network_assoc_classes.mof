// Copyright (c) 1999-2001 Microsoft Corporation, All Rights Reserved

qualifier association:(ToInstance,ToDerivedClass) ;

#pragma namespace ("\\root\\network" ) 

[association]
class Subnetwork_ProxySystem_Assoc
{
	[key] Subnetwork ref m_Subnetwork ;
	[key] ProxySystem ref m_ProxySystem ;
} ;

[association]
class Subnetwork_ProxyRmonSystem_Assoc
{
	[key] Subnetwork ref m_Subnetwork ;
	[key] ProxyRmonSystem ref m_ProxyRmonSystem ;
} ;

[
	association,
	dynamic,
	provider("MS_TRACEROUTE_PROVIDER"),
	icon("connectionsrc.ico")
]
class ConnectionSource
{
	[key,read] 
		Connection ref m_Connection ;

	[key,read] 
		Hop ref m_Hop ;
} ;

[
	association,
	dynamic,
	provider("MS_TRACEROUTE_PROVIDER"),
	icon("connectiondst.ico")
]
class ConnectionDestination
{
	[key] 
		Hop ref m_Hop ;

	[key] 
		ProxySystem ref m_ProxySystem ;

	[read]
		String m_RouteAddress ;

	[read]
		String m_RouteMask ;

	[read]
		uint32 m_GatewayInterfaceIndex ;

	[read]
		string m_GatewayIpAddress ;

	[read]
		String m_GatewayIpSubnetAddress ;

	[read]
		String m_GatewayIpSubnetMask ;
} ;


[
	association,
	dynamic,
	provider("MS_TRACEROUTE_PROVIDER"),
	icon("nexthop.ico")
]
class NextHop
{
	[key,read] Hop ref m_Source ;
	[key,read] Hop ref m_Gateway ;

	[read]
		String m_RouteAddress ;

	[read]
		String m_RouteMask ;

	[read]
		uint32 m_GatewayInterfaceIndex ;

	[read]
		string m_GatewayIpAddress ;

	[read]
		String m_GatewayIpSubnetAddress ;

	[read]
		String m_GatewayIpSubnetMask ;

} ;

[
	association,
	dynamic,
	provider("MS_TRACEROUTE_PROVIDER")
]
class HopToSubnetwork_Assoc
{
	[key] Hop ref m_Hop ;
	[key] Subnetwork ref m_Subnetwork ;
} ;

[
	association,
	dynamic,
	provider("MS_TRACEROUTE_PROVIDER")
]
class HopToGatewaySubnetwork_Assoc
{
	[key] Hop ref m_Hop ;
	[key] Subnetwork ref m_Subnetwork ;
} ;

[
	association,
	dynamic,
	provider ( "MS_TRACEROUTE_PROVIDER")
]
class HopToProxySystem_Assoc
{
	[key] Hop ref m_Hop ;
	[key] ProxySystem ref m_ProxySystem ;
} ;

[
	association,
	dynamic,
	provider ( "MS_TRACEROUTE_PROVIDER")
]
class HopToInterfaceTable_Assoc
{
	[key] Hop ref m_Hop ;
	[key] MS_SNMP_RFC1213_MIB_ifTable ref m_InterfaceTable ;
} ;

[
	association,
	dynamic,
	provider ( "MS_TRACEROUTE_PROVIDER")
]
class HopToGatewayInterfaceTable_Assoc
{
	[key] Hop ref m_Hop ;
	[key] MS_SNMP_RFC1213_MIB_ifTable ref m_InterfaceTable ;
} ;

[
	association,
	dynamic,
	provider("MS_TRACEROUTE_PROVIDER")
]
class SubnetworkToTopN_Assoc
{
	[key,read] Subnetwork ref m_Subnet ;
	[key,read] MS_SNMP_RFC1271_MIB_ProvidedhostTopNTable ref m_TopN ;
} ;

#pragma namespace ("\\root\\network\\gatewayp6_1" ) 

[
	association,
	dynamic,
	provider ( "MS_TRACEROUTE_PROVIDER")
]
class Proxy_InterfaceStats_Assoc
{
	[key,read] 
		ProxySystem ref m_Proxy ;
	[key,read] 
		NT_Network_Segment_Statistics ref m_NetworkStats ;
} ;

[
	association,
	dynamic,
	provider ( "MS_TRACEROUTE_PROVIDER")
]
class Proxy_NetworkStats_Assoc
{
	[key,read] 
		ProxySystem ref m_Proxy ;
	[key,read] 
		NT_Network_Interface_Statistics ref m_InterfaceStats ;
} ;

[
	association,
	dynamic,
	provider ( "MS_TRACEROUTE_PROVIDER")
]
class Proxy_Win32Service_Assoc
{
	[key,read] 
		ProxySystem ref m_Proxy ;
	[key,read] 
		Win32Services ref m_Win32Service ;
} ;

[
	association,
	dynamic,
	provider ( "MS_TRACEROUTE_PROVIDER")
]
class Proxy_ProcessStats_Assoc
{
	[key,read] 
		ProxySystem ref m_Proxy ;
	[key,read] 
		NT_Process_Statistics ref m_ProcessStats ;
} ;

[association]
class Proxy_Win32ComputerSystem_Assoc
{
	[key,read] 
		ProxySystem ref m_Proxy ;
	[key,read] 
		Win32ComputerSystem ref m_Win32ComputerSystem;
} ;

[association]
class Proxy_Owner_Assoc
{
	[key,read] 
		ProxySystem ref m_Proxy ;
	[key,read] 
		Owner ref m_Owner ;
} ;

#pragma namespace ("\\root\\network\\rogue" ) 

[
	association,
	dynamic,
	provider ( "MS_TRACEROUTE_PROVIDER")
]
class Proxy_InterfaceStats_Assoc
{
	[key,read] 
		ProxySystem ref m_Proxy ;
	[key,read] 
		NT_Network_Interface_Statistics ref m_InterfaceStats ;
} ;

[
	association,
	dynamic,
	provider ( "MS_TRACEROUTE_PROVIDER")
]
class Proxy_NetworkStats_Assoc
{
	[key,read] 
		ProxySystem ref m_Proxy ;
	[key,read] 
		NT_Network_Segment_Statistics ref m_NetworkStats ;
} ;

[
	association,
	dynamic,
	provider ( "MS_TRACEROUTE_PROVIDER")
]
class Proxy_ProcessStats_Assoc
{
	[key,read] 
		ProxySystem ref m_Proxy ;
	[key,read] 
		NT_Process_Statistics ref m_ProcessStats ;
} ;

[
	association,
	dynamic,
	provider ( "MS_TRACEROUTE_PROVIDER")
]
class Proxy_Win32Service_Assoc
{
	[key,read] 
		ProxySystem ref m_Proxy ;
	[key,read] 
		Win32Services ref m_Win32Service ;
} ;

[association]
class Proxy_Win32ComputerSystem_Assoc
{
	[key,read] 
		ProxySystem ref m_Proxy ;
	[key,read] 
		Win32ComputerSystem ref m_Win32ComputerSystem;
} ;

[association]
class Proxy_Owner_Assoc
{
	[key,read] 
		ProxySystem ref m_Proxy ;
	[key,read] 
		Owner ref m_Owner ;
} ;

#pragma namespace ("\\root\\network\\hpvectra_1" ) 

[
	association,
	dynamic,
	provider ( "MS_TRACEROUTE_PROVIDER")
]
class Proxy_InterfaceStats_Assoc
{
	[key,read] 
		ProxySystem ref m_Proxy ;
	[key,read] 
		NT_Network_Interface_Statistics ref m_InterfaceStats ;
} ;

[
	association,
	dynamic,
	provider ( "MS_TRACEROUTE_PROVIDER")
]
class Proxy_NetworkStats_Assoc
{
	[key,read] 
		ProxySystem ref m_Proxy ;
	[key,read] 
		NT_Network_Segment_Statistics ref m_NetworkStats ;
} ;

[
	association,
	dynamic,
	provider ( "MS_TRACEROUTE_PROVIDER")
]
class Proxy_ProcessStats_Assoc
{
	[key,read] 
		ProxySystem ref m_Proxy ;
	[key,read] 
		NT_Process_Statistics ref m_ProcessStats ;
} ;

[
	association,
	dynamic,
	provider ( "MS_TRACEROUTE_PROVIDER")
]
class Proxy_Win32Service_Assoc
{
	[key,read] 
		ProxySystem ref m_Proxy ;
	[key,read] 
		Win32Services ref m_Win32Service ;
} ;

[association]
class Proxy_Win32ComputerSystem_Assoc
{
	[key,read] 
		ProxySystem ref m_Proxy ;
	[key,read] 
		Win32ComputerSystem ref m_Win32ComputerSystem;
} ;

[association]
class Proxy_Owner_Assoc
{
	[key,read] 
		ProxySystem ref m_Proxy ;
	[key,read] 
		Owner ref m_Owner ;
} ;

#pragma namespace ("\\root\\network\\ibm350_1" ) 

[
	association,
	dynamic,
	provider ( "MS_TRACEROUTE_PROVIDER")
]
class Proxy_InterfaceStats_Assoc
{
	[key,read] 
		ProxySystem ref m_Proxy ;
	[key,read] 
		NT_Network_Interface_Statistics ref m_InterfaceStats ;
} ;

[
	association,
	dynamic,
	provider ( "MS_TRACEROUTE_PROVIDER")
]
class Proxy_NetworkStats_Assoc
{
	[key,read] 
		ProxySystem ref m_Proxy ;
	[key,read] 
		NT_Network_Segment_Statistics ref m_NetworkStats ;
} ;

[
	association,
	dynamic,
	provider ( "MS_TRACEROUTE_PROVIDER")
]
class Proxy_ProcessStats_Assoc
{
	[key,read] 
		ProxySystem ref m_Proxy ;
	[key,read] 
		NT_Process_Statistics ref m_ProcessStats ;
} ;

[
	association,
	dynamic,
	provider ( "MS_TRACEROUTE_PROVIDER")
]
class Proxy_Win32Service_Assoc
{
	[key,read] 
		ProxySystem ref m_Proxy ;
	[key,read] 
		Win32Services ref m_Win32Service ;
} ;

[association]
class ProxyToSubnetwork_Assoc
{
	[key,read] 
		ProxySystem ref m_Proxy ;
	[key,read] 
		Subnetwork ref m_Subnetwork ;
} ;

[association]
class Proxy_Owner_Assoc
{
	[key,read] 
		ProxySystem ref m_Proxy ;
	[key,read] 
		Owner ref m_Owner ;
} ;

[association]
class Proxy_Win32ComputerSystem_Assoc
{
	[key,read] 
		ProxySystem ref m_Proxy ;
	[key,read] 
		Win32ComputerSystem ref m_Win32ComputerSystem;
} ;

#pragma namespace ("\\root\\network\\gatewayp6_2" ) 

[
	association,
	dynamic,
	provider ( "MS_TRACEROUTE_PROVIDER")
]
class Proxy_InterfaceStats_Assoc
{
	[key,read] 
		ProxySystem ref m_Proxy ;
	[key,read] 
		NT_Network_Interface_Statistics ref m_InterfaceStats ;
} ;

[
	association,
	dynamic,
	provider ( "MS_TRACEROUTE_PROVIDER")
]
class Proxy_NetworkStats_Assoc
{
	[key,read] 
		ProxySystem ref m_Proxy ;
	[key,read] 
		NT_Network_Segment_Statistics ref m_NetworkStats ;
} ;

[
	association,
	dynamic,
	provider ( "MS_TRACEROUTE_PROVIDER")
]
class Proxy_NetworkStats_Assoc
{
	[key,read] 
		ProxySystem ref m_Proxy ;
	[key,read] 
		NT_Network_Segment_Statistics ref m_NetworkStats ;
} ;

[
	association,
	dynamic,
	provider ( "MS_TRACEROUTE_PROVIDER")
]
class Proxy_ProcessStats_Assoc
{
	[key,read] 
		ProxySystem ref m_Proxy ;
	[key,read] 
		NT_Process_Statistics ref m_ProcessStats ;
} ;

[
	association,
	dynamic,
	provider ( "MS_TRACEROUTE_PROVIDER")
]
class Proxy_Win32Service_Assoc
{
	[key,read] 
		ProxySystem ref m_Proxy ;
	[key,read] 
		Win32Services ref m_Win32Service ;
} ;

[association]
class Proxy_Win32ComputerSystem_Assoc
{
	[key,read] 
		ProxySystem ref m_Proxy ;
	[key,read] 
		Win32ComputerSystem ref m_Win32ComputerSystem;
} ;

[association]
class Proxy_Owner_Assoc
{
	[key,read] 
		ProxySystem ref m_Proxy ;
	[key,read] 
		Owner ref m_Owner ;
} ;

#pragma namespace ("\\root\\network\\superman" ) 

[association]
class MacAddressToProxy_Assoc
{
	[key,read] MacAddress ref m_MacAddress ;
	[key,read] ProxySystem ref m_Proxy ;
} ;

[
	association,
	dynamic,
	provider("MS_TRACEROUTE_PROVIDER")
]
class TopNToMacAddress_Assoc
{
	[key,read] MS_SNMP_RFC1271_MIB_ProvidedhostTopNTable ref m_TopN ;
	[key,read] MacAddress ref m_MacAddress ;
} ;

[association]
class Proxy_Owner_Assoc
{
	[key,read] 
		ProxySystem ref m_Proxy ;
	[key,read] 
		Owner ref m_Owner ;
} ;

#pragma namespace ("\\root\\network\\supergirl" ) 

[association]
class MacAddressToProxy_Assoc
{
	[key,read] MacAddress ref m_MacAddress ;
	[key,read] ProxySystem ref m_Proxy ;
} ;

[
	association,
	dynamic,
	provider("MS_TRACEROUTE_PROVIDER")
]
class TopNToMacAddress_Assoc
{
	[key,read] MS_SNMP_RFC1271_MIB_ProvidedhostTopNTable ref m_TopN ;
	[key,read] MacAddress ref m_MacAddress ;
} ;

[association]
class Proxy_Owner_Assoc
{
	[key,read] 
		ProxySystem ref m_Proxy ;
	[key,read] 
		Owner ref m_Owner ;
} ;

#pragma namespace ("\\root\\network\\superboy" ) 

[association]
class MacAddressToProxy_Assoc
{
	[key,read] MacAddress ref m_MacAddress ;
	[key,read] ProxySystem ref m_Proxy ;
} ;

[
	association,
	dynamic,
	provider("MS_TRACEROUTE_PROVIDER")
]
class TopNToMacAddress_Assoc
{
	[key,read] MS_SNMP_RFC1271_MIB_ProvidedhostTopNTable ref m_TopN ;
	[key,read] MacAddress ref m_MacAddress ;
} ;


[association]
class Proxy_Owner_Assoc
{
	[key,read] 
		ProxySystem ref m_Proxy ;
	[key,read] 
		Owner ref m_Owner ;
} ;
