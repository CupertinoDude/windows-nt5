// Copyright (c) 1999-2001 Microsoft Corporation, All Rights Reserved
qualifier association:(ToInstance,ToDerivedClass) ;
qualifier icon:(ToInstance,ToDerivedClass) ;

#pragma namespace ("\\root\\network" ) 

[
	icon("proxy.ico"),
	description ("System class for instance of the Proxy system in the proxy namespace" )
]
class ProxySystem
{
	[key] String m_Name ;
} ;

[
	icon("proxyrmon.ico"),
	description ("System class for instance of the Proxy rmon probe system in the proxy namespace" )
]
class ProxyRmonSystem : ProxySystem
{
} ;

[icon("subnet.ico")]
class Subnetwork
{
	[read,key] 
		String m_IpSubnetAddress ;
	[read] 
		String m_IpSubnetMask ;
} ;

[association, icon("connection.ico")]
class Connection
{
	[key,read] 
		string m_Source ;

	[key,read] 
		string m_Destination ;

} ;

[
	dynamic,
	provider("MS_TRACEROUTE_PROVIDER"),
	optimization_flags (1),
	icon("hop.ico")
]
class Hop 
{
	[key,read] 
		String m_IpAddress ;

	[key,read]
		String m_DestinationIpAddress ;

	[read]
		uint32 m_InterfaceIndex ;

	[read] 
		String m_IpSubnetMask ;

	[read] 
		String m_IpSubnetAddress ;

	[read]
		String m_RouteAddress ;

	[read]
		String m_RouteMask ;

	[read]
		uint32 m_GatewayInterfaceIndex ;

	[read]
		string m_GatewayIpAddress ;

	[read]
		String m_GatewayIpSubnetAddress ;

	[read]
		String m_GatewayIpSubnetMask ;

	[read]
		Bool m_IpForwarding ;

} ;

#pragma namespace ("\\root\\network\\gatewayp6_1" ) 

[
	icon("proxy.ico"),
	description ("System class for instance of the Proxy system in the proxy namespace" )
]
class ProxySystem
{
	[key] String m_Name ;
} ;

[singleton, icon("owner.ico")]
class Owner 
{
	string m_Name ;
	string m_Location ;
	string m_Telephone ;
	string m_Manager ;
} ;

#pragma namespace ("\\root\\network\\rogue" ) 

[
	icon("proxy.ico"),
	description ("System class for instance of the Proxy system in the proxy namespace" )
]
class ProxySystem
{
	[key] String m_Name ;
} ;

[singleton, icon("owner.ico")]
class Owner 
{
	string m_Name ;
	string m_Location ;
	string m_Telephone ;
	string m_Manager ;
} ;

#pragma namespace ("\\root\\network\\hpvectra_1" ) 

[
	icon("proxy.ico"),
	description ("System class for instance of the Proxy system in the proxy namespace" )
]
class ProxySystem
{
	[key] String m_Name ;
} ;

[singleton, icon("owner.ico")]
class Owner 
{
	string m_Name ;
	string m_Location ;
	string m_Telephone ;
	string m_Manager ;
} ;

#pragma namespace ("\\root\\network\\ibm350_1" ) 

[
	icon("proxy.ico"),
	description ("System class for instance of the Proxy system in the proxy namespace" )
]
class ProxySystem
{
	[key] String m_Name ;
} ;

[singleton, icon("owner.ico")]
class Owner 
{
	string m_Name ;
	string m_Location ;
	string m_Telephone ;
	string m_Manager ;
} ;

#pragma namespace ("\\root\\network\\gatewayp6_2" ) 

[
	icon("proxy.ico"),
	description ("System class for instance of the Proxy system in the proxy namespace" )
]
class ProxySystem
{
	[key] String m_Name ;
} ;

[singleton, icon("owner.ico")]
class Owner 
{
	string m_Name ;
	string m_Location ;
	string m_Telephone ;
	string m_Manager ;
} ;

#pragma namespace ("\\root\\network\\superman" ) 

[
	icon("proxy.ico"),
	description ("System class for instance of the Proxy system in the proxy namespace" )
]
class ProxySystem
{
	[key] String m_Name ;
} ;

[singleton, icon("owner.ico")]
class Owner 
{
	string m_Name ;
	string m_Location ;
	string m_Telephone ;
	string m_Manager ;
} ;

[
	icon("proxyrmon.ico"),
	description ("System class for instance of the Proxy rmon probe system in the proxy namespace" )
]
class ProxyRmonSystem : ProxySystem
{
} ;

[
description ("System class for instances of host system's MacAdresses in the RMON namespace" ),
icon("macaddr.ico")
]
class MacAddress
{
	[key] String m_MacAddress ;
} ;

class SnmpMacro
{
};
class SnmpObjectType:SnmpMacro
{
};

[
	description("A list of top N host entries.\nA set of statistics for a host that is part of a\ntop N report."),
	module_name("RFC1271-MIB"),
	group_objectid("1.3.6.1.2.1.16.5"),
	dynamic,
	provider("MS_TRACEROUTE_PROVIDER"),
	icon("topn.ico")
]
class MS_SNMP_RFC1271_MIB_ProvidedhostTopNTable : SnmpObjectType
{
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("OCTETSTRING"), object_identifier("1.3.6.1.2.1.16.5.2.1.3"), read, description("The physical address of this host."), status("mandatory")] string hostTopNAddress = "";
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.16.5.2.1.2"), read, description("An index that uniquely identifies an entry in\nthe hostTopN table among those in the same report.\nThis index is between 1 and N, where N is the\nnumber of entries in this table. Increasing values\nof hostTopNIndex shall be assigned to entries with\ndecreasing values of hostTopNRate until index N\nis assigned to the entry with the lowest value of\nhostTopNRate or there are no more hostTopNEntries."), status("mandatory"), key, key_order(2)] sint32 hostTopNIndex = 0;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.16.5.2.1.4"), read, description("The amount of change in the selected variable\nduring this sampling interval. The selected\nvariable is this host's instance of the object\nselected by hostTopNRateBase."), status("mandatory")] sint32 hostTopNRate = 0;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.16.5.2.1.1"), read, description("This object identifies the top N report of which\nthis entry is a part. The set of hosts\nidentified by a particular value of this\nobject is part of the same report as identified\nby the same value of the hostTopNControlIndex object."), status("mandatory"), key, key_order(1)] sint32 hostTopNReport = 0;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.16.4.2.1.3"), read, description("The set of collected host statistics of which\nthis entry is a part. The set of hosts\nidentified by a particular value of this\nindex is associated with the hostControlEntry\nas identified by the same value of hostControlIndex."), status("mandatory")] sint32 hostIndex = 0;	
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.4.2.1.6"), read, description("The number of octets transmitted to this address\nsince it was added to the hostTable (excluding\nframing bits but including FCS octets), except for\nthose octets in packets that contained errors."), status("mandatory")] uint32 hostInOctets = 0;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.4.2.1.4"), read, description("The number of packets without errors transmitted to\nthis address since it was added to the hostTable."), status("mandatory")] uint32 hostInPkts = 0;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.4.2.1.9"), read, description("The number of good packets transmitted by this\naddress that were directed to the broadcast address\nsince this host was added to the hostTable."), status("mandatory")] uint32 hostOutBroadcastPkts = 0;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.4.2.1.8"), read, description("The number of error packets transmitted by this\naddress since this host was added to the hostTable."), status("mandatory")] uint32 hostOutErrors = 0;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.4.2.1.10"), read, description("The number of good packets transmitted by this\naddress that were directed to a multicast address\nsince this host was added to the hostTable.\nNote that this number does not include packets\ndirected to the broadcast address."), status("mandatory")] uint32 hostOutMulticastPkts = 0;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.4.2.1.7"), read, description("The number of octets transmitted by this address\nsince it was added to the hostTable (excluding\nframing bits but including FCS octets), including\nthose octets in packets that contained errors."), status("mandatory")] uint32 hostOutOctets = 0;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.4.2.1.5"), read, description("The number of packets including errors transmitted\nby this address since it was added to the hostTable."), status("mandatory")] uint32 hostOutPkts = 0;
};

[singleton, icon("owner.ico")]
class Owner 
{
	string m_Name ;
	string m_Location ;
	string m_Telephone ;
	string m_Manager ;
} ;

#pragma namespace ("\\root\\network\\supergirl" ) 

[
	icon("proxy.ico"),
	description ("System class for instance of the Proxy system in the proxy namespace" )
]
class ProxySystem
{
	[key] String m_Name ;
} ;

[
	icon("proxyrmon.ico"),
	description ("System class for instance of the Proxy rmon probe system in the proxy namespace" )
]
class ProxyRmonSystem : ProxySystem
{
} ;

[
description ("System class for instances of host system's MacAdresses in the RMON namespace" ),
icon("macaddr.ico")
]
class MacAddress
{
	[key] String m_MacAddress ;
} ;

class SnmpMacro
{
};
class SnmpObjectType:SnmpMacro
{
};

[
	description("A list of top N host entries.\nA set of statistics for a host that is part of a\ntop N report."),
	module_name("RFC1271-MIB"),
	group_objectid("1.3.6.1.2.1.16.5"),
	dynamic,
	provider("MS_TRACEROUTE_PROVIDER"),
	icon("topn.ico")
]
class MS_SNMP_RFC1271_MIB_ProvidedhostTopNTable : SnmpObjectType
{
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("OCTETSTRING"), object_identifier("1.3.6.1.2.1.16.5.2.1.3"), read, description("The physical address of this host."), status("mandatory")] string hostTopNAddress = "";
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.16.5.2.1.2"), read, description("An index that uniquely identifies an entry in\nthe hostTopN table among those in the same report.\nThis index is between 1 and N, where N is the\nnumber of entries in this table. Increasing values\nof hostTopNIndex shall be assigned to entries with\ndecreasing values of hostTopNRate until index N\nis assigned to the entry with the lowest value of\nhostTopNRate or there are no more hostTopNEntries."), status("mandatory"), key, key_order(2)] sint32 hostTopNIndex = 0;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.16.5.2.1.4"), read, description("The amount of change in the selected variable\nduring this sampling interval. The selected\nvariable is this host's instance of the object\nselected by hostTopNRateBase."), status("mandatory")] sint32 hostTopNRate = 0;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.16.5.2.1.1"), read, description("This object identifies the top N report of which\nthis entry is a part. The set of hosts\nidentified by a particular value of this\nobject is part of the same report as identified\nby the same value of the hostTopNControlIndex object."), status("mandatory"), key, key_order(1)] sint32 hostTopNReport = 0;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.16.4.2.1.3"), read, description("The set of collected host statistics of which\nthis entry is a part. The set of hosts\nidentified by a particular value of this\nindex is associated with the hostControlEntry\nas identified by the same value of hostControlIndex."), status("mandatory")] sint32 hostIndex = 0;	
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.4.2.1.6"), read, description("The number of octets transmitted to this address\nsince it was added to the hostTable (excluding\nframing bits but including FCS octets), except for\nthose octets in packets that contained errors."), status("mandatory")] uint32 hostInOctets = 0;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.4.2.1.4"), read, description("The number of packets without errors transmitted to\nthis address since it was added to the hostTable."), status("mandatory")] uint32 hostInPkts = 0;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.4.2.1.9"), read, description("The number of good packets transmitted by this\naddress that were directed to the broadcast address\nsince this host was added to the hostTable."), status("mandatory")] uint32 hostOutBroadcastPkts = 0;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.4.2.1.8"), read, description("The number of error packets transmitted by this\naddress since this host was added to the hostTable."), status("mandatory")] uint32 hostOutErrors = 0;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.4.2.1.10"), read, description("The number of good packets transmitted by this\naddress that were directed to a multicast address\nsince this host was added to the hostTable.\nNote that this number does not include packets\ndirected to the broadcast address."), status("mandatory")] uint32 hostOutMulticastPkts = 0;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.4.2.1.7"), read, description("The number of octets transmitted by this address\nsince it was added to the hostTable (excluding\nframing bits but including FCS octets), including\nthose octets in packets that contained errors."), status("mandatory")] uint32 hostOutOctets = 0;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.4.2.1.5"), read, description("The number of packets including errors transmitted\nby this address since it was added to the hostTable."), status("mandatory")] uint32 hostOutPkts = 0;
};

[singleton, icon("owner.ico")]
class Owner 
{
	string m_Name ;
	string m_Location ;
	string m_Telephone ;
	string m_Manager ;
} ;

#pragma namespace ("\\root\\network\\superboy" ) 

[
	icon("proxy.ico"),
	description ("System class for instance of the Proxy system in the proxy namespace" )
]
class ProxySystem
{
	[key] String m_Name ;
} ;

[
	icon("proxyrmon.ico"),
	description ("System class for instance of the Proxy rmon probe system in the proxy namespace" )
]
class ProxyRmonSystem : ProxySystem
{
} ;

[
description ("System class for instances of host system's MacAdresses in the RMON namespace" ),
icon("macaddr.ico")
]
class MacAddress
{
	[key] String m_MacAddress ;
} ;

class SnmpMacro
{
};
class SnmpObjectType:SnmpMacro
{
};

[
	description("A list of top N host entries.\nA set of statistics for a host that is part of a\ntop N report."),
	module_name("RFC1271-MIB"),
	group_objectid("1.3.6.1.2.1.16.5"),
	dynamic,
	provider("MS_TRACEROUTE_PROVIDER"),
	icon("topn.ico")
]
class MS_SNMP_RFC1271_MIB_ProvidedhostTopNTable : SnmpObjectType
{
	[textual_convention("OCTETSTRING"), encoding("OCTETSTRING"), object_syntax("OCTETSTRING"), object_identifier("1.3.6.1.2.1.16.5.2.1.3"), read, description("The physical address of this host."), status("mandatory")] string hostTopNAddress = "";
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.16.5.2.1.2"), read, description("An index that uniquely identifies an entry in\nthe hostTopN table among those in the same report.\nThis index is between 1 and N, where N is the\nnumber of entries in this table. Increasing values\nof hostTopNIndex shall be assigned to entries with\ndecreasing values of hostTopNRate until index N\nis assigned to the entry with the lowest value of\nhostTopNRate or there are no more hostTopNEntries."), status("mandatory"), key, key_order(2)] sint32 hostTopNIndex = 0;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.16.5.2.1.4"), read, description("The amount of change in the selected variable\nduring this sampling interval. The selected\nvariable is this host's instance of the object\nselected by hostTopNRateBase."), status("mandatory")] sint32 hostTopNRate = 0;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.16.5.2.1.1"), read, description("This object identifies the top N report of which\nthis entry is a part. The set of hosts\nidentified by a particular value of this\nobject is part of the same report as identified\nby the same value of the hostTopNControlIndex object."), status("mandatory"), key, key_order(1)] sint32 hostTopNReport = 0;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("1..65535"), object_identifier("1.3.6.1.2.1.16.4.2.1.3"), read, description("The set of collected host statistics of which\nthis entry is a part. The set of hosts\nidentified by a particular value of this\nindex is associated with the hostControlEntry\nas identified by the same value of hostControlIndex."), status("mandatory")] sint32 hostIndex = 0;	
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.4.2.1.6"), read, description("The number of octets transmitted to this address\nsince it was added to the hostTable (excluding\nframing bits but including FCS octets), except for\nthose octets in packets that contained errors."), status("mandatory")] uint32 hostInOctets = 0;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.4.2.1.4"), read, description("The number of packets without errors transmitted to\nthis address since it was added to the hostTable."), status("mandatory")] uint32 hostInPkts = 0;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.4.2.1.9"), read, description("The number of good packets transmitted by this\naddress that were directed to the broadcast address\nsince this host was added to the hostTable."), status("mandatory")] uint32 hostOutBroadcastPkts = 0;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.4.2.1.8"), read, description("The number of error packets transmitted by this\naddress since this host was added to the hostTable."), status("mandatory")] uint32 hostOutErrors = 0;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.4.2.1.10"), read, description("The number of good packets transmitted by this\naddress that were directed to a multicast address\nsince this host was added to the hostTable.\nNote that this number does not include packets\ndirected to the broadcast address."), status("mandatory")] uint32 hostOutMulticastPkts = 0;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.4.2.1.7"), read, description("The number of octets transmitted by this address\nsince it was added to the hostTable (excluding\nframing bits but including FCS octets), including\nthose octets in packets that contained errors."), status("mandatory")] uint32 hostOutOctets = 0;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.16.4.2.1.5"), read, description("The number of packets including errors transmitted\nby this address since it was added to the hostTable."), status("mandatory")] uint32 hostOutPkts = 0;
};

[singleton, icon("owner.ico")]
class Owner 
{
	string m_Name ;
	string m_Location ;
	string m_Telephone ;
	string m_Manager ;
} ;
