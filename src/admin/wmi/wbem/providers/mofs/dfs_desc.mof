
// (c) 2000-2001 Microsoft Corporation.  All rights reserved.

#pragma autorecover
#pragma classflags("forceupdate")

Qualifier Description : ToSubClass Amended;
Qualifier Values : ToSubClass Amended;
Qualifier DisplayName : Amended;
Qualifier BitValues:ToSubClass Amended ;

Qualifier Aggregate : ToSubClass ;
Qualifier ValueMap : ToSubClass ;
Qualifier Aggregation : ToSubClass ; 
Qualifier ArrayType : ToSubClass ;
Qualifier Association : ToInstance ToSubClass DisableOverride ; 
Qualifier BitMap : ToSubClass ;
Qualifier CIM_Key : ToSubClass ;
Qualifier CIMTYPE : ToSubClass ;
Qualifier Deprecated : ToSubClass ;
Qualifier Enumeration : ToSubClass ;
Qualifier EnumPrivileges : ToSubClass ;
Qualifier ImplementationSource : ToSubClass ;
Qualifier Key : ToInstance ToSubClass DisableOverride ;
Qualifier Locale : ToInstance ;
Qualifier MappingStrings : ToSubClass ;
Qualifier Max : ToSubClass ;
Qualifier MaxLen : ToSubClass ;
Qualifier Min : ToSubClass ;
Qualifier ModelCorrespondence : ToSubClass ;
Qualifier Not_Null : ToSubClass ;
Qualifier Override : Restricted ;
Qualifier Privileges : ToSubClass ; 
Qualifier Propagated : ToSubClass ;
Qualifier provider : ToInstance ;
Qualifier Range : ToSubClass ;
Qualifier Read : ToSubClass ;
Qualifier Schema : ToInstance ;
Qualifier Singleton : ToSubClass ToInstance ;
Qualifier SUBTYPE : ToSubClass ;
Qualifier Units : ToSubClass ;
Qualifier UUID : ToInstance ;
Qualifier Volatile : ToSubClass ; 
Qualifier Weak : ToSubClass ;
Qualifier Write : ToSubClass ;
Qualifier WritePrivileges : ToSubClass ;

#pragma namespace ("\\\\.\\Root\\CIMV2")

instance of __Win32Provider as $DFSprov
{
    Name = "DFSProvider";
    ClsId = "{7F72CC7A-74A0-45b4-909C-14FB8186DD7E}";
	HostingModel = "NetworkServiceHost";
};

instance of __InstanceProviderRegistration
{
    Provider = $DFSprov;
    SupportsGet = TRUE;
    SupportsPut = TRUE;
    SupportsDelete = TRUE;
    SupportsEnumeration = TRUE;
    QuerySupportLevels = {"WQL:UnarySelect"};
};

instance of __MethodProviderRegistration
{
    Provider = $DFSprov;
};


// cleanup of classes whose names were changed
// after Whistler Beta 1
#pragma deleteclass("Win32_DfsReplica", NOFAIL)
#pragma deleteclass("Win32_DfsLink", NOFAIL)
#pragma deleteclass("Win32_DfsLinkReplica", NOFAIL)




	[Description("The Win32_DfsNode class represents a root or a "
	"link of a domain based or a standalone "
	"distributed file system (DFS). "),
	dynamic, provider("DFSProvider"), SupportsCreate, CreateBy("Create"), 
	SupportsDelete, DeleteBy("DeleteInstance"), 
	SupportsUpdate, Locale (0x409)]
class Win32_DfsNode : CIM_LogicalElement
{

		[Description("The Name property is an identifier for the DFS node. It is "
		"same as the entry path of a node, based on the Universal Naming "
		"Convention. \n"
		"It can take one of the following two forms: "
		"\\\\DfsServerName\\ShareName\\PathToLink "
		"where - "
		"DfsServerName is the name of a server that hosts the DFS root volume, "
		"ShareName is the name of the share published on the host server, "
		"PathToLink is the path to the physical share. "
		"The PathToLink is applicable only to nodes that are DFS links."
		"\\\\DomainName\\FtDfsName\\PathToLink "
		"where - "
		"DomainName is the name of the domain that hosts the DFS root volume, "
		"FtDfsName is the name of the fault tolerant DFS root published "
		"in the domain directory service, "
		"PathToLink is the path to the physical share. "
		"The PathToLink is applicable only to nodes that are DFS links."),
		Override("Name"),
		key] 
	string Name;

		[Description("The Root property indicates whether the node is a "
		"DFS root or a link. A value of True indicates that the node "
		"is a root.")]
	boolean Root;

		[Description ( "The State property indicates the status of the node."),
		Values { "Ok", "Inconsistent", "Online", "Offline"},
		ValueMap {"0", "1", "2", "3"}]
	uint32 State;

		[Override("The Description indicates a comment describing the node."),
		Write] 
    string Description ;
        
		[Description("The Timeout property indicates the time in seconds for which the "
		"client caches the referral of this node."),
		Units("Seconds"),
		Write]
	uint32 Timeout;

		[Static, Constructor, Implemented,
		Description("The Create method is used to create a new instance "
		"of the Win32_DfsNode class.\n"
		"The method can return the following values:  \n"
		"0 - Success. \n"
		"Other - For integer values other than those listed above, refer to "
		"Win32 error code documentation."),
		Values{ "Success", "Other" },
		ValueMap{ "0", ".." } ]
	uint32 Create( 

			[In,
			Description("The DfsEntryPath parameter specifies the "
			"path of the DFS root.")]
		string DfsEntryPath,

			[In,
			Description("The ServerName parameter specifies the name "
			"of the server that hosts the share to which the link "
			"is associated. "
			"For example, in order to create a link "
			"associated to a share \"\\\\myserver\\myshare\", the ServerName "
			"parameter should be set to \"\\\\myserver\".")]
		string ServerName,

			[In,
			Description("The ShareName parameter specifies the name "
			"of the share to which the link is associated with. "
			"For example, in order to create a link "
			"associated to a share \"\\\\myserver\\myshare\", the ShareName "
			"parameter should be set to \"myshare\". ")]
		string ShareName,

			[In,
			Optional,
			Description("The Description parameter specifies a comment "
			"describing the node.")] 
		string Description
        
		);
			
};


	[Description("The DfsTarget class represents a target of a DFS link."),
	dynamic, SupportsCreate, CreateBy("PutInstance"), SupportsDelete, 
	DeleteBy("DeleteInstance"), SupportsUpdate, provider("DFSProvider"),
	Locale (0x409)]
class Win32_DfsTarget : CIM_LogicalElement
{
		[Description("The LinkName indicates the entry path of the link "
		"to which this target belongs."),
		Key]
	string	LinkName;

		[Description("The ServerName indicates the name of the server "
		"that the link references."),
		Key] 
	string	ServerName;

		[Description("The ShareName indicates the name of the share that "
		"the link references."),
		Key]
	string ShareName;

		[Write,
		Description ( "The State property indicates the state of the target. "
		"The state is reported as a bit map, where each bit is interpretted "
		"as follows. Note that Offline and Online are mutually exclusive.\n"
		"Offline - The specified computer is offline or unavailable.  \n"
		"Online - The specified computer is available.  \n"
		"Active - The specified computer is to be made the "
		"active machine."),
		BitValues { "Offline", "Online", "Active"},
		BitMap {"0", "1", "2"}]
	uint32 State;

};

	[Description("The Win32_DfsNodeTarget class associates a DFS node to one of "
	"its targets."), 
	dynamic, 
	Provider("DFSProvider"),
	Locale (0x409)]
class Win32_DfsNodeTarget : CIM_Dependency
{

		[Description("The Dependent property references a DFS node."),
		Override("Dependent"),
		Key]
	Win32_DfsNode REF Dependent;

		[Description("The Antecedent property references a target for "
		"a DFS node. A node that is a link has one or more targets. "
		"A node that is a root has one target."),
		Key,
		Override("Antecedent"),
		Min(1)]
	Win32_DfsTarget REF Antecedent;	

};

