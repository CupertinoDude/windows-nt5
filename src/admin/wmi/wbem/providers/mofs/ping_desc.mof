

// (c) 1998-1999 Microsoft Corporation.  All rights reserved.

#pragma autorecover
#pragma classflags("forceupdate")
#pragma Deleteclass("Win32_PingProtocolStatus", NOFAIL)

Qualifier Description : ToSubClass Amended;
Qualifier Values : ToSubClass Amended;
Qualifier DisplayName : Amended;
Qualifier BitValues:ToSubClass Amended ;

Qualifier Aggregate : ToSubClass ;
Qualifier ValueMap : ToSubClass ;
Qualifier Aggregation : ToSubClass ; 
Qualifier ArrayType : ToSubClass ;
Qualifier Association : ToInstance ToSubClass DisableOverride ; 
Qualifier BitMap : ToSubClass ;
Qualifier CIM_Key : ToSubClass ;
Qualifier CIMTYPE : ToSubClass ;
Qualifier Deprecated : ToSubClass ;
Qualifier Enumeration : ToSubClass ;
Qualifier EnumPrivileges : ToSubClass ;
Qualifier ImplementationSource : ToSubClass ;
Qualifier Key : ToInstance ToSubClass DisableOverride ;
Qualifier Locale : ToInstance ;
Qualifier MappingStrings : ToSubClass ;
Qualifier Max : ToSubClass ;
Qualifier MaxLen : ToSubClass ;
Qualifier Min : ToSubClass ;
Qualifier ModelCorrespondence : ToSubClass ;
Qualifier Not_Null : ToSubClass ;
Qualifier Override : Restricted ;
Qualifier Privileges : ToSubClass ; 
Qualifier Propagated : ToSubClass ;
Qualifier provider : ToInstance ;
Qualifier Range : ToSubClass ;
Qualifier Read : ToSubClass ;
Qualifier Schema : ToInstance ;
Qualifier Singleton : ToSubClass ToInstance ;
Qualifier SUBTYPE : ToSubClass ;
Qualifier Units : ToSubClass ;
Qualifier UUID : ToInstance ;
Qualifier Volatile : ToSubClass ; 
Qualifier Weak : ToSubClass ;
Qualifier Write : ToSubClass ;
Qualifier WritePrivileges : ToSubClass ;


#pragma namespace ("\\\\.\\Root\\CIMV2")




instance of __Win32Provider as $WMIPingProvider
{
    Name    = "WMIPingProvider" ;
    ClsId   = "{734AC5AE-68E1-4fb5-B8DA-1D92F7FC6661}" ;
	HostingModel = "NetworkServiceHost";
} ;    

instance of __InstanceProviderRegistration
{
    Provider = $WMIPingProvider;
    SupportsPut = FALSE;
    SupportsGet = TRUE;
    SupportsDelete = FALSE;
    SupportsEnumeration = TRUE;
    QuerySupportLevels = { "WQL:UnarySelect" } ;
};



	[dynamic, provider("WMIPingProvider"), Description ("The "
	"Win32_PingStatus class contains the values returned by the "
	"standard ping command. More information on ping can be found in RFC 791.")]
class Win32_PingStatus
{
		[Read, Key,Description("The Address property holds the value of the address "
		"requested.  This can be either hostname ('wxyz1234') or IP address "
		"('193.128.177.124').")
		]
	String Address;

		[Read, Key,Description("The TimeToLive property indicates the lifespan of "
		"the ping packet in seconds. This is an upper limit and not absolute "
		"as all routers MUST decrement this value by one and hops between "
		"routers rarely take this amount of time.  When this value becomes "
		"zero the packet will be dropped by the router. The default value "
		"is 80 seconds.")
		]
	uint32 TimeToLive = 80 ;

		[Read, Key,Description("The Timeout property indicates the Timeout value in "
		"milliseconds. If a response is not received in this time no response "
		" will be assumed. The default is 4000 milliseconds.")
		]
	uint32 Timeout = 4000 ;

		[Read, Key,Description("The BufferSize property indicates the buffer size sent "
		"with the ping command.  The default value is 32.")
		]
	uint32 BufferSize = 32 ;

		[Read, Key,Description("The NoFragmentation property sets a 'Don't Fragment' on "
		"packets sent.  The default is False, not fragmented.")
		]
	boolean NoFragmentation = FALSE ;

		[Read, Key,Description("the TypeOfService property indicates which type of service "
		"is used.  The default value is 0."), ValueMap { "0", "2", "4", "8", "16"},
		Values{"Normal", "Minimize Monetary Cost", "Maximize Reliability",
			"Maximize Throughput", "Mimimize Delay"}
		]
	uint32 TypeofService = 0 ;

		[Read, Key,Description("The RecordRoute property indicates how many hops "
		"should be recorded while the packet is enroute. The default is zero.")
		]
	uint32 RecordRoute = 0 ;

		[Read, Key,Description("The TimestampRoute property indicates how many hops "
		"should be recorded with time stamp information while the packet is enroute. "
		"A Timestamp is the number of milliseconds that have passed since midnight "
		"UT. If the time is not available in milliseconds or cannot be provided with "
		"respect to midnight UT then any time may be inserted as a timestamp provided "
		"the high order bit of the timestamp field is set to one to indicate the use "
		"of a non-standard value. The default is zero.")
		]
	uint32 TimestampRoute = 0 ;

		[Read, Key,Description("The SourceRouteType property indicates the type of source "
		"route option to be used on host list specified in the SourceRoute property. "
		"If a value outside of the ValueMap is specified 0 is assumed. The default "
		" is zero."), ValueMap{"0", "1", "2"}, Values{"None", "Loose Source Routing",
			"Strict Source Routing"}
		]
	uint32 SourceRouteType = 0 ;

		[Read, Key,Description("The SourceRoute property contais a comma separated list "
		"of valid Source Routes.")
		]
	String SourceRoute = "" ;

		[Read, Key, Description("The ResolveAddressesNames indicates whether or not the "
		"command will resolve address names of output address values.  The default "
		"is False - no resolution.")
		]
	boolean ResolveAddressNames = FALSE ;
	
		[Read, Description("The StatusCode property returns the ping status codes."),
		ValueMap { "0", "11001", "11002", "11003", "11004", "11005", "11006",
		"11007", "11008", "11009", "11010", "11011", "11012", "11013", "11014",
		"11015", "11016", "11017", "11018", "11032", "11050"},
		Values {"Success", "Buffer Too Small", "Destination Net Unreachable",
			"Destination Host Unreachable", "Destination Protocol Unreachable",
			"Destination Port Unreachable", "No Resources", "Bad Option",
			"Hardware Error", "Packet Too Big", "Request Timed Out",
			"Bad Request", "Bad Route", "TimeToLive Expired Transit",
			"TimeToLive Expired Reassembly", "Parameter Problem",
			"Source Quench","Option Too Big", "Bad Destination",
			"Negotiating IPSEC", "General Failure"
			}
		]
	uint32 StatusCode ;

		[Read, Description("The ResponseTime property indicates the time elapsed "
		"to handle the request.")
		]
	uint32 ResponseTime ;

		[Read, Description ("The ResponseTimeToLive property indicates the time "
		"to live from moment the request is received.")
		]
	uint32 ResponseTimeToLive ;

		[Read, Description("The ReplyInconsistency property reports inconsistent "
		"reply data.")
		]
	boolean ReplyInconsistency ;

		[Read, Description("The ReplySize property indicates the size of the "
		"buffer returned.")
		]
	uint32 ReplySize ;

		[Read, Description("The RouteRecord property holds a record of intermediate hops.")
		]	
	String RouteRecord [] ;

		[Read, Description("The RouteRecordResolved property holds the resolved "
		"address corresponding to the RouteRecord entry.")
		]	
	String RouteRecordResolved [] ;

		[Read, Description("The TimeStampRecord property holds a record timestamps for "
		"intermediate hops.")
		]	
	uint32 TimeStampRecord [] ;

		[Read, Description("The TimeStampRecordAddress property holds the intermediate hop "
		"corresponding to the TimeStampRecord entry.")
		]	
	string TimeStampRecordAddress [] ;

		[Read, Description("The TimeStampRecordAddressResolved property holds the resolved "
		"address corresponding to the TimeStampRecordAddress entry.")
		]	
	string TimeStampRecordAddressResolved [] ;

		[Read, MaxLen(4096), Description("The ProtocolAddress property contains the address "
		"that the destination used to reply.")
		]	
	String ProtocolAddress="";
		[Read, MaxLen(4096), Description("The ProtocolAddressResolved property contains the "
		"resolved address corresponding to the ProtocolAddress property")
		]	
	String ProtocolAddressResolved="";
		[Read, Description("The PrimaryAddressResolutionStatus property holds "
		"status information resulting from the gethostbyname call.  This property reports "
		"the status of the resolution of the address value (ie value of the address property) "
		"given in the query. It is not related to any other resolution performed. \n"
		"The property can take the following values:  \n"
		"0 - Success. \n"
		"Other - For integer values other than those listed above, refer to "
		"WinSock error code documentation."),
		Values{ "Success", "Other" },
		ValueMap{ "0", ".." } 
		]
	uint32 PrimaryAddressResolutionStatus;
		
};
