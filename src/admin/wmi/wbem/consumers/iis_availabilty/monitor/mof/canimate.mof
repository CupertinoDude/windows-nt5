#pragma namespace ( "\\\\.\\root\\cimv2" ) 

// CAnimate.mof : mof source for CCAnimate
//
//
// This file will be processed by MOFCOMP utility to
// register the provider with the WMI repository
//
//  TODO: If this class is intended to be created in a namespace 
//        other than the default (root\default), you should add 
//        the #pragma namespace command here.  If these classes 
//        are going into your own namespace, consider creating 
//        the namespace here as well. Also, consider combining
//        this mof with the mof the defines the class that this 
//        provider provides.


instance of __Win32Provider as $P
{
    Name        = "CCAnimate" ;
    
	ClsId   = "{9EF627AF-6CB2-422C-9B28-DA1DFA9EF278}" ;	 //provider GUID
    
	DefaultMachineName = NULL;		 //NULL for local machine
    
	ClientLoadableCLSID = NULL;		 //reserved
    ImpersonationLevel = 0;			 //reserved
	
	InitializationReentrancy = 0;	 //Set of flags that provide information about serialization:
									 //0 = all initialization of this provider must be serialized
									 //1 = all initializations of this provider in the same namespace must be serialized
									 //2 = no initialization serialization is necessary
	InitializeAsAdminFirst = FALSE;	 //Request to be fully initialized as "Admin" before 
									 //initializations begin for users
	
	PerLocaleInitialization = FALSE; //Indicates whether the provider is initialized for each 
									 //locale if a user connects to the same namespace more 
									 //than once using different locales.
	PerUserInitialization = FALSE;   //Indicates whether the provider is initialized once for each actual 
									 //Windows NT/Windows 2000 NTLM user making requests of the provider. 
									 //If set to FALSE, the provider is initialized once for all users
	
	Pure = TRUE;				     //A pure provider exists only to service requests from 
					                 //applications and WMI. Most providers are pure providers
									 //Non-pure providers transition to the role of client after they have 
									 //finished servicing requests. 
    UnloadTimeout = NULL;		     //Currently ignored
								     //Use __CacheControl class in the root namespace to control provider unloading
                                     //A string in the DMTF date/time format that specifies how long WMI 
								     //allows the provider to remain idle before it is unloaded.
								     
} ;    

instance of __EventConsumerProviderRegistration
{
	Provider = $P;
	ConsumerClassNames = {"AnimateConsumer"};
};

class AnimateConsumer : __EventConsumer
{
	[key] String Name ;
	String AnimationScript ;
} ;
