////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) 2000, Microsoft Corporation.
//
//  All rights reserved.
//
//	Module Name:
//
//					wmiadapter_service.h
//
//	Abstract:
//
//					declaration of service module
//
//	History:
//
//					initial		a-marius
//
////////////////////////////////////////////////////////////////////////////////////

#ifndef	__SERVICE_H__
#define	__SERVICE_H__

#if		_MSC_VER > 1000
#pragma once
#endif	_MSC_VER > 1000

class WmiAdapterService
{
	DECLARE_NO_COPY ( WmiAdapterService );

    SERVICE_STATUS_HANDLE	m_hServiceStatus;
    SERVICE_STATUS			m_ServiceStatus;

	CRITICAL_SECTION m_cs;

	BOOL	m_bUsed;

	public:

	///////////////////////////////////////////////////////////////////////////////////////////////
	// construction & destruction
	///////////////////////////////////////////////////////////////////////////////////////////////

	WmiAdapterService() :
		m_hServiceStatus ( NULL ),
		m_bUsed ( FALSE )
	{
		::InitializeCriticalSection ( &m_cs );
	}

	~WmiAdapterService();

	///////////////////////////////////////////////////////////////////////////////////////////////
	// start
	///////////////////////////////////////////////////////////////////////////////////////////////

	BOOL StartService ( void );

	///////////////////////////////////////////////////////////////////////////////////////////////
	// service status
	///////////////////////////////////////////////////////////////////////////////////////////////
	BOOL			SetServiceStatus ( DWORD dwState );
	SERVICE_STATUS* GetServiceStatus ( void ) const;

	void WINAPI ServiceMain		( DWORD dwArgc, LPWSTR* lpszArgv );
    void WINAPI ServiceHandler	( DWORD dwOpcode);

	///////////////////////////////////////////////////////////////////////////////////////////////
	// initialization
	///////////////////////////////////////////////////////////////////////////////////////////////
	HRESULT Init ( void );

	///////////////////////////////////////////////////////////////////////////////////////////////
	// registration
	///////////////////////////////////////////////////////////////////////////////////////////////
	HRESULT	RegisterService ( void );

	///////////////////////////////////////////////////////////////////////////////////////////////
	// unregistration
	///////////////////////////////////////////////////////////////////////////////////////////////
	HRESULT	UnregisterService ( bool bStatus = true );

	///////////////////////////////////////////////////////////////////////////////////////////////
	// MAIN WORK ROUTINE
	///////////////////////////////////////////////////////////////////////////////////////////////
	LONG Work();

	private:

	///////////////////////////////////////////////////////////////////////////////////////////////
	// service initializators
	///////////////////////////////////////////////////////////////////////////////////////////////

	static void WINAPI _ServiceMain		( DWORD dwArgc, LPWSTR* lpszArgv );
	static void WINAPI _ServiceHandler	( DWORD dwOpcode );

	///////////////////////////////////////////////////////////////////////////////////////////////
	// is service installed
	//
	// -1	... internal error
	// 0	... not installed
	// 1	... installed
	//
	///////////////////////////////////////////////////////////////////////////////////////////////

	int IsInstalled ( SC_HANDLE hSC );
};

extern WmiAdapterService _Service;

#endif	__SERVICE_H__