// Created by Microsoft (R) C/C++ Compiler Version 12.00.8472.0 (07da9fa9).
//
// c:\nt\admin\wmi\wbem\shell\atlui\wmicntl\snapin\obj\i386\sysmon.tlh
//
// C++ source equivalent of Win32 type library d:\winnt\system32\sysmon.ocx
// compiler-generated file created 06/20/00 at 11:35:19 - DO NOT EDIT!

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

namespace SystemMonitor {

//
// Forward references and typedefs
//

struct __declspec(uuid("771a9520-ee28-11ce-941e-008029004347"))
/* interface */ ICounterItem;
struct __declspec(uuid("c08c4ff2-0e2e-11cf-942c-008029004347"))
/* dispinterface */ DICounterItem;
struct __declspec(uuid("79167962-28fc-11cf-942f-008029004347"))
/* dual interface */ ICounters;
struct __declspec(uuid("194eb241-c32c-11cf-9398-00aa00a3ddea"))
/* interface */ ISystemMonitor;
struct __declspec(uuid("194eb242-c32c-11cf-9398-00aa00a3ddea"))
/* dispinterface */ DISystemMonitorInternal;
struct __declspec(uuid("13d73d81-c32e-11cf-9398-00aa00a3ddea"))
/* dispinterface */ DISystemMonitor;
struct __declspec(uuid("ee660ea0-4abd-11cf-943a-008029004347"))
/* interface */ ISystemMonitorEvents;
struct __declspec(uuid("84979930-4ab3-11cf-943a-008029004347"))
/* dispinterface */ DISystemMonitorEvents;
struct /* coclass */ SystemMonitor;
struct /* coclass */ CounterItem;
struct /* coclass */ Counters;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(ICounterItem, __uuidof(ICounterItem));
_COM_SMARTPTR_TYPEDEF(DICounterItem, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(ICounters, __uuidof(ICounters));
_COM_SMARTPTR_TYPEDEF(ISystemMonitor, __uuidof(ISystemMonitor));
_COM_SMARTPTR_TYPEDEF(DISystemMonitorInternal, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(DISystemMonitor, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(ISystemMonitorEvents, __uuidof(ISystemMonitorEvents));
_COM_SMARTPTR_TYPEDEF(DISystemMonitorEvents, __uuidof(IDispatch));

//
// Type library items
//

enum DisplayTypeConstants
{
    sysmonLineGraph = 1,
    sysmonHistogram = 2,
    sysmonReport = 3
};

enum ReportValueTypeConstants
{
    sysmonDefaultValue = 0,
    sysmonCurrentValue = 1,
    sysmonAverage = 2,
    sysmonMinimum = 3,
    sysmonMaximum = 4
};

struct __declspec(uuid("771a9520-ee28-11ce-941e-008029004347"))
ICounterItem : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetValue))
    double Value;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetWidth,put=PutWidth))
    int Width;
    __declspec(property(get=GetLineStyle,put=PutLineStyle))
    int LineStyle;
    __declspec(property(get=GetScaleFactor,put=PutScaleFactor))
    int ScaleFactor;
    __declspec(property(get=GetPath))
    _bstr_t Path;

    //
    // Wrapper methods for error-handling
    //

    double GetValue ( );
    void PutColor (
        OLE_COLOR pColor );
    OLE_COLOR GetColor ( );
    void PutWidth (
        int piValue );
    int GetWidth ( );
    void PutLineStyle (
        int piValue );
    int GetLineStyle ( );
    void PutScaleFactor (
        int piValue );
    int GetScaleFactor ( );
    _bstr_t GetPath ( );
    HRESULT GetValue (
        double * Value,
        long * Status );
    HRESULT GetStatistics (
        double * Max,
        double * Min,
        double * Avg,
        long * Status );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Value (
        double * pdblValue ) = 0;
    virtual HRESULT __stdcall put_Color (
        OLE_COLOR pColor ) = 0;
    virtual HRESULT __stdcall get_Color (
        OLE_COLOR * pColor ) = 0;
    virtual HRESULT __stdcall put_Width (
        int piValue ) = 0;
    virtual HRESULT __stdcall get_Width (
        int * piValue ) = 0;
    virtual HRESULT __stdcall put_LineStyle (
        int piValue ) = 0;
    virtual HRESULT __stdcall get_LineStyle (
        int * piValue ) = 0;
    virtual HRESULT __stdcall put_ScaleFactor (
        int piValue ) = 0;
    virtual HRESULT __stdcall get_ScaleFactor (
        int * piValue ) = 0;
    virtual HRESULT __stdcall get_Path (
        BSTR * pstrValue ) = 0;
    virtual HRESULT __stdcall raw_GetValue (
        double * Value,
        long * Status ) = 0;
    virtual HRESULT __stdcall raw_GetStatistics (
        double * Max,
        double * Min,
        double * Avg,
        long * Status ) = 0;
};

struct __declspec(uuid("c08c4ff2-0e2e-11cf-942c-008029004347"))
DICounterItem : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetValue))
    double Value;
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetWidth,put=PutWidth))
    int Width;
    __declspec(property(get=GetLineStyle,put=PutLineStyle))
    int LineStyle;
    __declspec(property(get=GetScaleFactor,put=PutScaleFactor))
    int ScaleFactor;
    __declspec(property(get=GetPath))
    _bstr_t Path;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    double GetValue ( );
    void PutColor (
        OLE_COLOR _arg1 );
    OLE_COLOR GetColor ( );
    void PutWidth (
        int _arg1 );
    int GetWidth ( );
    void PutLineStyle (
        int _arg1 );
    int GetLineStyle ( );
    void PutScaleFactor (
        int _arg1 );
    int GetScaleFactor ( );
    _bstr_t GetPath ( );
    HRESULT GetValue (
        double * Value,
        long * Status );
    HRESULT GetStatistics (
        double * Max,
        double * Min,
        double * Avg,
        long * Status );
};

struct __declspec(uuid("79167962-28fc-11cf-942f-008029004347"))
ICounters : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetItem))
    DICounterItemPtr Item[];
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    DICounterItemPtr GetItem (
        const _variant_t & index );
    DICounterItemPtr Add (
        _bstr_t pathname );
    HRESULT Remove (
        const _variant_t & index );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Count (
        long * pLong ) = 0;
    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * ppIunk ) = 0;
    virtual HRESULT __stdcall get_Item (
        VARIANT index,
        struct DICounterItem * * ppI ) = 0;
    virtual HRESULT __stdcall raw_Add (
        BSTR pathname,
        struct DICounterItem * * ppI ) = 0;
    virtual HRESULT __stdcall raw_Remove (
        VARIANT index ) = 0;
};

struct __declspec(uuid("194eb241-c32c-11cf-9398-00aa00a3ddea"))
ISystemMonitor : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCounters))
    ICountersPtr Counters;
    __declspec(property(get=GetShowVerticalGrid,put=PutShowVerticalGrid))
    VARIANT_BOOL ShowVerticalGrid;
    __declspec(property(get=GetShowHorizontalGrid,put=PutShowHorizontalGrid))
    VARIANT_BOOL ShowHorizontalGrid;
    __declspec(property(get=GetShowLegend,put=PutShowLegend))
    VARIANT_BOOL ShowLegend;
    __declspec(property(get=GetShowScaleLabels,put=PutShowScaleLabels))
    VARIANT_BOOL ShowScaleLabels;
    __declspec(property(get=GetShowValueBar,put=PutShowValueBar))
    VARIANT_BOOL ShowValueBar;
    __declspec(property(get=GetMaximumScale,put=PutMaximumScale))
    int MaximumScale;
    __declspec(property(get=GetBorderStyle,put=PutBorderStyle))
    int BorderStyle;
    __declspec(property(get=GetMinimumScale,put=PutMinimumScale))
    int MinimumScale;
    __declspec(property(get=GetUpdateInterval,put=PutUpdateInterval))
    float UpdateInterval;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    OLE_COLOR BackColor;
    __declspec(property(get=GetDisplayType,put=PutDisplayType))
    enum DisplayTypeConstants DisplayType;
    __declspec(property(get=GetManualUpdate,put=PutManualUpdate))
    VARIANT_BOOL ManualUpdate;
    __declspec(property(get=GetGraphTitle,put=PutGraphTitle))
    _bstr_t GraphTitle;
    __declspec(property(get=GetYAxisLabel,put=PutYAxisLabel))
    _bstr_t YAxisLabel;
    __declspec(property(get=GetBackColorCtl,put=PutBackColorCtl))
    OLE_COLOR BackColorCtl;
    __declspec(property(get=GetLogFileName,put=PutLogFileName))
    _bstr_t LogFileName;
    __declspec(property(get=GetLogViewStart,put=PutLogViewStart))
    DATE LogViewStart;
    __declspec(property(get=GetLogViewStop,put=PutLogViewStop))
    DATE LogViewStop;
    __declspec(property(get=GetGridColor,put=PutGridColor))
    OLE_COLOR GridColor;
    __declspec(property(get=GetTimeBarColor,put=PutTimeBarColor))
    OLE_COLOR TimeBarColor;
    __declspec(property(get=GetHighlight,put=PutHighlight))
    VARIANT_BOOL Highlight;
    __declspec(property(get=GetAppearance,put=PutAppearance))
    int Appearance;
    __declspec(property(get=GetShowToolbar,put=PutShowToolbar))
    VARIANT_BOOL ShowToolbar;
    __declspec(property(get=GetReadOnly,put=PutReadOnly))
    VARIANT_BOOL ReadOnly;
    __declspec(property(get=GetReportValueType,put=PutReportValueType))
    enum ReportValueTypeConstants ReportValueType;
    __declspec(property(get=GetMonitorDuplicateInstances,put=PutMonitorDuplicateInstances))
    VARIANT_BOOL MonitorDuplicateInstances;
    __declspec(property(get=GetForeColor,put=PutForeColor))
    OLE_COLOR ForeColor;

    //
    // Wrapper methods for error-handling
    //

    int GetAppearance ( );
    void PutAppearance (
        int iAppearance );
    OLE_COLOR GetBackColor ( );
    void PutBackColor (
        OLE_COLOR pColor );
    int GetBorderStyle ( );
    void PutBorderStyle (
        int iBorderStyle );
    OLE_COLOR GetForeColor ( );
    void PutForeColor (
        OLE_COLOR pColor );
    IFontDisp * GetFont ( );
    void PutRefFont (
        IFontDisp * ppFont );
    ICountersPtr GetCounters ( );
    void PutShowVerticalGrid (
        VARIANT_BOOL pbState );
    VARIANT_BOOL GetShowVerticalGrid ( );
    void PutShowHorizontalGrid (
        VARIANT_BOOL pbState );
    VARIANT_BOOL GetShowHorizontalGrid ( );
    void PutShowLegend (
        VARIANT_BOOL pbState );
    VARIANT_BOOL GetShowLegend ( );
    void PutShowScaleLabels (
        VARIANT_BOOL pbState );
    VARIANT_BOOL GetShowScaleLabels ( );
    void PutShowValueBar (
        VARIANT_BOOL pbState );
    VARIANT_BOOL GetShowValueBar ( );
    void PutMaximumScale (
        int piValue );
    int GetMaximumScale ( );
    void PutMinimumScale (
        int piValue );
    int GetMinimumScale ( );
    void PutUpdateInterval (
        float pfValue );
    float GetUpdateInterval ( );
    void PutDisplayType (
        enum DisplayTypeConstants peDisplayType );
    enum DisplayTypeConstants GetDisplayType ( );
    void PutManualUpdate (
        VARIANT_BOOL pbState );
    VARIANT_BOOL GetManualUpdate ( );
    void PutGraphTitle (
        _bstr_t pbsTitle );
    _bstr_t GetGraphTitle ( );
    void PutYAxisLabel (
        _bstr_t pbsTitle );
    _bstr_t GetYAxisLabel ( );
    HRESULT CollectSample ( );
    HRESULT UpdateGraph ( );
    HRESULT BrowseCounters ( );
    HRESULT DisplayProperties ( );
    HRESULT Counter (
        int iIndex,
        struct ICounterItem * * ppICounter );
    HRESULT AddCounter (
        _bstr_t bsPath,
        struct ICounterItem * * ppICounter );
    HRESULT DeleteCounter (
        struct ICounterItem * pCtr );
    OLE_COLOR GetBackColorCtl ( );
    void PutBackColorCtl (
        OLE_COLOR pColor );
    void PutLogFileName (
        _bstr_t bsFileName );
    _bstr_t GetLogFileName ( );
    void PutLogViewStart (
        DATE StartTime );
    DATE GetLogViewStart ( );
    void PutLogViewStop (
        DATE StopTime );
    DATE GetLogViewStop ( );
    OLE_COLOR GetGridColor ( );
    void PutGridColor (
        OLE_COLOR pColor );
    OLE_COLOR GetTimeBarColor ( );
    void PutTimeBarColor (
        OLE_COLOR pColor );
    VARIANT_BOOL GetHighlight ( );
    void PutHighlight (
        VARIANT_BOOL pbState );
    VARIANT_BOOL GetShowToolbar ( );
    void PutShowToolbar (
        VARIANT_BOOL pbState );
    HRESULT Paste ( );
    HRESULT Copy ( );
    HRESULT Reset ( );
    void PutReadOnly (
        VARIANT_BOOL pbState );
    VARIANT_BOOL GetReadOnly ( );
    void PutReportValueType (
        enum ReportValueTypeConstants peReportValueType );
    enum ReportValueTypeConstants GetReportValueType ( );
    void PutMonitorDuplicateInstances (
        VARIANT_BOOL pbState );
    VARIANT_BOOL GetMonitorDuplicateInstances ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Appearance (
        int * iAppearance ) = 0;
    virtual HRESULT __stdcall put_Appearance (
        int iAppearance ) = 0;
    virtual HRESULT __stdcall get_BackColor (
        OLE_COLOR * pColor ) = 0;
    virtual HRESULT __stdcall put_BackColor (
        OLE_COLOR pColor ) = 0;
    virtual HRESULT __stdcall get_BorderStyle (
        int * iBorderStyle ) = 0;
    virtual HRESULT __stdcall put_BorderStyle (
        int iBorderStyle ) = 0;
    virtual HRESULT __stdcall get_ForeColor (
        OLE_COLOR * pColor ) = 0;
    virtual HRESULT __stdcall put_ForeColor (
        OLE_COLOR pColor ) = 0;
    virtual HRESULT __stdcall get_Font (
        IFontDisp * * ppFont ) = 0;
    virtual HRESULT __stdcall putref_Font (
        IFontDisp * ppFont ) = 0;
    virtual HRESULT __stdcall get_Counters (
        struct ICounters * * ppICounters ) = 0;
    virtual HRESULT __stdcall put_ShowVerticalGrid (
        VARIANT_BOOL pbState ) = 0;
    virtual HRESULT __stdcall get_ShowVerticalGrid (
        VARIANT_BOOL * pbState ) = 0;
    virtual HRESULT __stdcall put_ShowHorizontalGrid (
        VARIANT_BOOL pbState ) = 0;
    virtual HRESULT __stdcall get_ShowHorizontalGrid (
        VARIANT_BOOL * pbState ) = 0;
    virtual HRESULT __stdcall put_ShowLegend (
        VARIANT_BOOL pbState ) = 0;
    virtual HRESULT __stdcall get_ShowLegend (
        VARIANT_BOOL * pbState ) = 0;
    virtual HRESULT __stdcall put_ShowScaleLabels (
        VARIANT_BOOL pbState ) = 0;
    virtual HRESULT __stdcall get_ShowScaleLabels (
        VARIANT_BOOL * pbState ) = 0;
    virtual HRESULT __stdcall put_ShowValueBar (
        VARIANT_BOOL pbState ) = 0;
    virtual HRESULT __stdcall get_ShowValueBar (
        VARIANT_BOOL * pbState ) = 0;
    virtual HRESULT __stdcall put_MaximumScale (
        int piValue ) = 0;
    virtual HRESULT __stdcall get_MaximumScale (
        int * piValue ) = 0;
    virtual HRESULT __stdcall put_MinimumScale (
        int piValue ) = 0;
    virtual HRESULT __stdcall get_MinimumScale (
        int * piValue ) = 0;
    virtual HRESULT __stdcall put_UpdateInterval (
        float pfValue ) = 0;
    virtual HRESULT __stdcall get_UpdateInterval (
        float * pfValue ) = 0;
    virtual HRESULT __stdcall put_DisplayType (
        enum DisplayTypeConstants peDisplayType ) = 0;
    virtual HRESULT __stdcall get_DisplayType (
        enum DisplayTypeConstants * peDisplayType ) = 0;
    virtual HRESULT __stdcall put_ManualUpdate (
        VARIANT_BOOL pbState ) = 0;
    virtual HRESULT __stdcall get_ManualUpdate (
        VARIANT_BOOL * pbState ) = 0;
    virtual HRESULT __stdcall put_GraphTitle (
        BSTR pbsTitle ) = 0;
    virtual HRESULT __stdcall get_GraphTitle (
        BSTR * pbsTitle ) = 0;
    virtual HRESULT __stdcall put_YAxisLabel (
        BSTR pbsTitle ) = 0;
    virtual HRESULT __stdcall get_YAxisLabel (
        BSTR * pbsTitle ) = 0;
    virtual HRESULT __stdcall raw_CollectSample ( ) = 0;
    virtual HRESULT __stdcall raw_UpdateGraph ( ) = 0;
    virtual HRESULT __stdcall raw_BrowseCounters ( ) = 0;
    virtual HRESULT __stdcall raw_DisplayProperties ( ) = 0;
    virtual HRESULT __stdcall raw_Counter (
        int iIndex,
        struct ICounterItem * * ppICounter ) = 0;
    virtual HRESULT __stdcall raw_AddCounter (
        BSTR bsPath,
        struct ICounterItem * * ppICounter ) = 0;
    virtual HRESULT __stdcall raw_DeleteCounter (
        struct ICounterItem * pCtr ) = 0;
    virtual HRESULT __stdcall get_BackColorCtl (
        OLE_COLOR * pColor ) = 0;
    virtual HRESULT __stdcall put_BackColorCtl (
        OLE_COLOR pColor ) = 0;
    virtual HRESULT __stdcall put_LogFileName (
        BSTR bsFileName ) = 0;
    virtual HRESULT __stdcall get_LogFileName (
        BSTR * bsFileName ) = 0;
    virtual HRESULT __stdcall put_LogViewStart (
        DATE StartTime ) = 0;
    virtual HRESULT __stdcall get_LogViewStart (
        DATE * StartTime ) = 0;
    virtual HRESULT __stdcall put_LogViewStop (
        DATE StopTime ) = 0;
    virtual HRESULT __stdcall get_LogViewStop (
        DATE * StopTime ) = 0;
    virtual HRESULT __stdcall get_GridColor (
        OLE_COLOR * pColor ) = 0;
    virtual HRESULT __stdcall put_GridColor (
        OLE_COLOR pColor ) = 0;
    virtual HRESULT __stdcall get_TimeBarColor (
        OLE_COLOR * pColor ) = 0;
    virtual HRESULT __stdcall put_TimeBarColor (
        OLE_COLOR pColor ) = 0;
    virtual HRESULT __stdcall get_Highlight (
        VARIANT_BOOL * pbState ) = 0;
    virtual HRESULT __stdcall put_Highlight (
        VARIANT_BOOL pbState ) = 0;
    virtual HRESULT __stdcall get_ShowToolbar (
        VARIANT_BOOL * pbState ) = 0;
    virtual HRESULT __stdcall put_ShowToolbar (
        VARIANT_BOOL pbState ) = 0;
    virtual HRESULT __stdcall raw_Paste ( ) = 0;
    virtual HRESULT __stdcall raw_Copy ( ) = 0;
    virtual HRESULT __stdcall raw_Reset ( ) = 0;
    virtual HRESULT __stdcall put_ReadOnly (
        VARIANT_BOOL pbState ) = 0;
    virtual HRESULT __stdcall get_ReadOnly (
        VARIANT_BOOL * pbState ) = 0;
    virtual HRESULT __stdcall put_ReportValueType (
        enum ReportValueTypeConstants peReportValueType ) = 0;
    virtual HRESULT __stdcall get_ReportValueType (
        enum ReportValueTypeConstants * peReportValueType ) = 0;
    virtual HRESULT __stdcall put_MonitorDuplicateInstances (
        VARIANT_BOOL pbState ) = 0;
    virtual HRESULT __stdcall get_MonitorDuplicateInstances (
        VARIANT_BOOL * pbState ) = 0;
};

struct __declspec(uuid("194eb242-c32c-11cf-9398-00aa00a3ddea"))
DISystemMonitorInternal : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCounters))
    ICountersPtr Counters;
    __declspec(property(get=GetShowVerticalGrid,put=PutShowVerticalGrid))
    VARIANT_BOOL ShowVerticalGrid;
    __declspec(property(get=GetShowHorizontalGrid,put=PutShowHorizontalGrid))
    VARIANT_BOOL ShowHorizontalGrid;
    __declspec(property(get=GetShowLegend,put=PutShowLegend))
    VARIANT_BOOL ShowLegend;
    __declspec(property(get=GetShowScaleLabels,put=PutShowScaleLabels))
    VARIANT_BOOL ShowScaleLabels;
    __declspec(property(get=GetShowValueBar,put=PutShowValueBar))
    VARIANT_BOOL ShowValueBar;
    __declspec(property(get=GetMaximumScale,put=PutMaximumScale))
    int MaximumScale;
    __declspec(property(get=GetBorderStyle,put=PutBorderStyle))
    int BorderStyle;
    __declspec(property(get=GetMinimumScale,put=PutMinimumScale))
    int MinimumScale;
    __declspec(property(get=GetUpdateInterval,put=PutUpdateInterval))
    float UpdateInterval;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    OLE_COLOR BackColor;
    __declspec(property(get=GetDisplayType,put=PutDisplayType))
    enum DisplayTypeConstants DisplayType;
    __declspec(property(get=GetManualUpdate,put=PutManualUpdate))
    VARIANT_BOOL ManualUpdate;
    __declspec(property(get=GetGraphTitle,put=PutGraphTitle))
    _bstr_t GraphTitle;
    __declspec(property(get=GetYAxisLabel,put=PutYAxisLabel))
    _bstr_t YAxisLabel;
    __declspec(property(get=GetBackColorCtl,put=PutBackColorCtl))
    OLE_COLOR BackColorCtl;
    __declspec(property(get=GetLogFileName,put=PutLogFileName))
    _bstr_t LogFileName;
    __declspec(property(get=GetLogViewStart,put=PutLogViewStart))
    DATE LogViewStart;
    __declspec(property(get=GetLogViewStop,put=PutLogViewStop))
    DATE LogViewStop;
    __declspec(property(get=GetGridColor,put=PutGridColor))
    OLE_COLOR GridColor;
    __declspec(property(get=GetTimeBarColor,put=PutTimeBarColor))
    OLE_COLOR TimeBarColor;
    __declspec(property(get=GetHighlight,put=PutHighlight))
    VARIANT_BOOL Highlight;
    __declspec(property(get=GetAppearance,put=PutAppearance))
    int Appearance;
    __declspec(property(get=GetShowToolbar,put=PutShowToolbar))
    VARIANT_BOOL ShowToolbar;
    __declspec(property(get=GetReadOnly,put=PutReadOnly))
    VARIANT_BOOL ReadOnly;
    __declspec(property(get=GetReportValueType,put=PutReportValueType))
    enum ReportValueTypeConstants ReportValueType;
    __declspec(property(get=GetMonitorDuplicateInstances,put=PutMonitorDuplicateInstances))
    VARIANT_BOOL MonitorDuplicateInstances;
    __declspec(property(get=GetForeColor,put=PutForeColor))
    OLE_COLOR ForeColor;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    int GetAppearance ( );
    void PutAppearance (
        int _arg1 );
    OLE_COLOR GetBackColor ( );
    void PutBackColor (
        OLE_COLOR _arg1 );
    int GetBorderStyle ( );
    void PutBorderStyle (
        int _arg1 );
    OLE_COLOR GetForeColor ( );
    void PutForeColor (
        OLE_COLOR _arg1 );
    IFontDisp * GetFont ( );
    void PutRefFont (
        IFontDisp * _arg1 );
    ICountersPtr GetCounters ( );
    void PutShowVerticalGrid (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShowVerticalGrid ( );
    void PutShowHorizontalGrid (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShowHorizontalGrid ( );
    void PutShowLegend (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShowLegend ( );
    void PutShowScaleLabels (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShowScaleLabels ( );
    void PutShowValueBar (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShowValueBar ( );
    void PutMaximumScale (
        int _arg1 );
    int GetMaximumScale ( );
    void PutMinimumScale (
        int _arg1 );
    int GetMinimumScale ( );
    void PutUpdateInterval (
        float _arg1 );
    float GetUpdateInterval ( );
    void PutDisplayType (
        enum DisplayTypeConstants _arg1 );
    enum DisplayTypeConstants GetDisplayType ( );
    void PutManualUpdate (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetManualUpdate ( );
    void PutGraphTitle (
        _bstr_t _arg1 );
    _bstr_t GetGraphTitle ( );
    void PutYAxisLabel (
        _bstr_t _arg1 );
    _bstr_t GetYAxisLabel ( );
    HRESULT CollectSample ( );
    HRESULT UpdateGraph ( );
    HRESULT BrowseCounters ( );
    HRESULT DisplayProperties ( );
    HRESULT Counter (
        int iIndex,
        struct ICounterItem * * ppICounter );
    HRESULT AddCounter (
        _bstr_t bsPath,
        struct ICounterItem * * ppICounter );
    HRESULT DeleteCounter (
        struct ICounterItem * pCtr );
    OLE_COLOR GetBackColorCtl ( );
    void PutBackColorCtl (
        OLE_COLOR _arg1 );
    void PutLogFileName (
        _bstr_t _arg1 );
    _bstr_t GetLogFileName ( );
    void PutLogViewStart (
        DATE _arg1 );
    DATE GetLogViewStart ( );
    void PutLogViewStop (
        DATE _arg1 );
    DATE GetLogViewStop ( );
    OLE_COLOR GetGridColor ( );
    void PutGridColor (
        OLE_COLOR _arg1 );
    OLE_COLOR GetTimeBarColor ( );
    void PutTimeBarColor (
        OLE_COLOR _arg1 );
    VARIANT_BOOL GetHighlight ( );
    void PutHighlight (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShowToolbar ( );
    void PutShowToolbar (
        VARIANT_BOOL _arg1 );
    HRESULT Paste ( );
    HRESULT Copy ( );
    HRESULT Reset ( );
    void PutReadOnly (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetReadOnly ( );
    void PutReportValueType (
        enum ReportValueTypeConstants _arg1 );
    enum ReportValueTypeConstants GetReportValueType ( );
    void PutMonitorDuplicateInstances (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetMonitorDuplicateInstances ( );
};

struct __declspec(uuid("13d73d81-c32e-11cf-9398-00aa00a3ddea"))
DISystemMonitor : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAppearance,put=PutAppearance))
    int Appearance;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    OLE_COLOR BackColor;
    __declspec(property(get=GetBorderStyle,put=PutBorderStyle))
    int BorderStyle;
    __declspec(property(get=GetForeColor,put=PutForeColor))
    OLE_COLOR ForeColor;
    __declspec(property(get=GetFont,put=PutFont))
    IFontDisp * Font;
    __declspec(property(get=GetShowVerticalGrid,put=PutShowVerticalGrid))
    VARIANT_BOOL ShowVerticalGrid;
    __declspec(property(get=GetShowHorizontalGrid,put=PutShowHorizontalGrid))
    VARIANT_BOOL ShowHorizontalGrid;
    __declspec(property(get=GetShowLegend,put=PutShowLegend))
    VARIANT_BOOL ShowLegend;
    __declspec(property(get=GetShowScaleLabels,put=PutShowScaleLabels))
    VARIANT_BOOL ShowScaleLabels;
    __declspec(property(get=GetShowValueBar,put=PutShowValueBar))
    VARIANT_BOOL ShowValueBar;
    __declspec(property(get=GetMaximumScale,put=PutMaximumScale))
    int MaximumScale;
    __declspec(property(get=GetMinimumScale,put=PutMinimumScale))
    int MinimumScale;
    __declspec(property(get=GetUpdateInterval,put=PutUpdateInterval))
    float UpdateInterval;
    __declspec(property(get=GetDisplayType,put=PutDisplayType))
    enum DisplayTypeConstants DisplayType;
    __declspec(property(get=GetManualUpdate,put=PutManualUpdate))
    VARIANT_BOOL ManualUpdate;
    __declspec(property(get=GetGraphTitle,put=PutGraphTitle))
    _bstr_t GraphTitle;
    __declspec(property(get=GetYAxisLabel,put=PutYAxisLabel))
    _bstr_t YAxisLabel;
    __declspec(property(get=GetCounters,put=PutCounters))
    ICountersPtr Counters;
    __declspec(property(get=GetBackColorCtl,put=PutBackColorCtl))
    OLE_COLOR BackColorCtl;
    __declspec(property(get=GetLogFileName,put=PutLogFileName))
    _bstr_t LogFileName;
    __declspec(property(get=GetLogViewStart,put=PutLogViewStart))
    DATE LogViewStart;
    __declspec(property(get=GetLogViewStop,put=PutLogViewStop))
    DATE LogViewStop;
    __declspec(property(get=GetGridColor,put=PutGridColor))
    OLE_COLOR GridColor;
    __declspec(property(get=GetTimeBarColor,put=PutTimeBarColor))
    OLE_COLOR TimeBarColor;
    __declspec(property(get=GetHighlight,put=PutHighlight))
    VARIANT_BOOL Highlight;
    __declspec(property(get=GetShowToolbar,put=PutShowToolbar))
    VARIANT_BOOL ShowToolbar;
    __declspec(property(get=GetReadOnly,put=PutReadOnly))
    VARIANT_BOOL ReadOnly;
    __declspec(property(get=GetReportValueType,put=PutReportValueType))
    enum ReportValueTypeConstants ReportValueType;
    __declspec(property(get=GetMonitorDuplicateInstances,put=PutMonitorDuplicateInstances))
    VARIANT_BOOL MonitorDuplicateInstances;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT CollectSample ( );
    HRESULT UpdateGraph ( );
    HRESULT BrowseCounters ( );
    HRESULT DisplayProperties ( );
    HRESULT Paste ( );
    HRESULT Copy ( );
    HRESULT Reset ( );

    // Properties:
    int GetAppearance ( );
    void PutAppearance ( int _val );
    OLE_COLOR GetBackColor ( );
    void PutBackColor ( OLE_COLOR _val );
    int GetBorderStyle ( );
    void PutBorderStyle ( int _val );
    OLE_COLOR GetForeColor ( );
    void PutForeColor ( OLE_COLOR _val );
    IFontDisp * GetFont ( );
    void PutFont ( IFontDisp * _val );
    VARIANT_BOOL GetShowVerticalGrid ( );
    void PutShowVerticalGrid ( VARIANT_BOOL _val );
    VARIANT_BOOL GetShowHorizontalGrid ( );
    void PutShowHorizontalGrid ( VARIANT_BOOL _val );
    VARIANT_BOOL GetShowLegend ( );
    void PutShowLegend ( VARIANT_BOOL _val );
    VARIANT_BOOL GetShowScaleLabels ( );
    void PutShowScaleLabels ( VARIANT_BOOL _val );
    VARIANT_BOOL GetShowValueBar ( );
    void PutShowValueBar ( VARIANT_BOOL _val );
    int GetMaximumScale ( );
    void PutMaximumScale ( int _val );
    int GetMinimumScale ( );
    void PutMinimumScale ( int _val );
    float GetUpdateInterval ( );
    void PutUpdateInterval ( float _val );
    enum DisplayTypeConstants GetDisplayType ( );
    void PutDisplayType ( enum DisplayTypeConstants _val );
    VARIANT_BOOL GetManualUpdate ( );
    void PutManualUpdate ( VARIANT_BOOL _val );
    _bstr_t GetGraphTitle ( );
    void PutGraphTitle ( _bstr_t _val );
    _bstr_t GetYAxisLabel ( );
    void PutYAxisLabel ( _bstr_t _val );
    ICountersPtr GetCounters ( );
    void PutCounters ( struct ICounters * _val );
    OLE_COLOR GetBackColorCtl ( );
    void PutBackColorCtl ( OLE_COLOR _val );
    _bstr_t GetLogFileName ( );
    void PutLogFileName ( _bstr_t _val );
    DATE GetLogViewStart ( );
    void PutLogViewStart ( DATE _val );
    DATE GetLogViewStop ( );
    void PutLogViewStop ( DATE _val );
    OLE_COLOR GetGridColor ( );
    void PutGridColor ( OLE_COLOR _val );
    OLE_COLOR GetTimeBarColor ( );
    void PutTimeBarColor ( OLE_COLOR _val );
    VARIANT_BOOL GetHighlight ( );
    void PutHighlight ( VARIANT_BOOL _val );
    VARIANT_BOOL GetShowToolbar ( );
    void PutShowToolbar ( VARIANT_BOOL _val );
    VARIANT_BOOL GetReadOnly ( );
    void PutReadOnly ( VARIANT_BOOL _val );
    enum ReportValueTypeConstants GetReportValueType ( );
    void PutReportValueType ( enum ReportValueTypeConstants _val );
    VARIANT_BOOL GetMonitorDuplicateInstances ( );
    void PutMonitorDuplicateInstances ( VARIANT_BOOL _val );
};

struct __declspec(uuid("ee660ea0-4abd-11cf-943a-008029004347"))
ISystemMonitorEvents : IUnknown
{
    //
    // Raw methods provided by interface
    //

    virtual void __stdcall OnCounterSelected (
        int index ) = 0;
    virtual void __stdcall OnCounterAdded (
        int index ) = 0;
    virtual void __stdcall OnCounterDeleted (
        int index ) = 0;
    virtual void __stdcall OnSampleCollected ( ) = 0;
    virtual void __stdcall OnDblClick (
        int index ) = 0;
};

struct __declspec(uuid("84979930-4ab3-11cf-943a-008029004347"))
DISystemMonitorEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT OnCounterSelected (
        int iIndex );
    HRESULT OnCounterAdded (
        int iIndex );
    HRESULT OnCounterDeleted (
        int iIndex );
    HRESULT OnSampleCollected ( );
    HRESULT OnDblClick (
        int index );
};

struct __declspec(uuid("c4d2d8e0-d1dd-11ce-940f-008029004347"))
SystemMonitor;
    // [ default ] dispinterface DISystemMonitor
    // interface ISystemMonitor
    // [ default, source ] dispinterface DISystemMonitorEvents

struct __declspec(uuid("c4d2d8e0-d1dd-11ce-940f-008029004348"))
CounterItem;
    // [ default ] dispinterface DICounterItem
    // interface ICounterItem

struct __declspec(uuid("b2b066d2-2aac-11cf-942f-008029004347"))
Counters;
    // [ default ] interface ICounters

//
// Wrapper method implementations
//

#include "sysmon.tli"

} // namespace SystemMonitor

#pragma pack(pop)
