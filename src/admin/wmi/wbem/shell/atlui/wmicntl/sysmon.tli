// Created by Microsoft (R) C/C++ Compiler Version 12.00.8472.0 (07da9fa9).
//
// c:\nt\admin\wmi\wbem\shell\atlui\wmicntl\snapin\obj\i386\sysmon.tli
//
// Wrapper implementations for Win32 type library d:\\winnt\\system32\\sysmon.ocx
// compiler-generated file created 06/20/00 at 11:41:23 - DO NOT EDIT!

#pragma once

//
// interface ICounterItem wrapper method implementations
//

inline double ICounterItem::GetValue ( ) {
    double _result;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ICounterItem::PutColor ( OLE_COLOR pColor ) {
    HRESULT _hr = put_Color(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline OLE_COLOR ICounterItem::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ICounterItem::PutWidth ( int piValue ) {
    HRESULT _hr = put_Width(piValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline int ICounterItem::GetWidth ( ) {
    int _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ICounterItem::PutLineStyle ( int piValue ) {
    HRESULT _hr = put_LineStyle(piValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline int ICounterItem::GetLineStyle ( ) {
    int _result;
    HRESULT _hr = get_LineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ICounterItem::PutScaleFactor ( int piValue ) {
    HRESULT _hr = put_ScaleFactor(piValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline int ICounterItem::GetScaleFactor ( ) {
    int _result;
    HRESULT _hr = get_ScaleFactor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t ICounterItem::GetPath ( ) {
    BSTR _result;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT ICounterItem::GetValue ( double * Value, long * Status ) {
    HRESULT _hr = raw_GetValue(Value, Status);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICounterItem::GetStatistics ( double * Max, double * Min, double * Avg, long * Status ) {
    HRESULT _hr = raw_GetStatistics(Max, Min, Avg, Status);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// dispinterface DICounterItem wrapper method implementations
//

inline double DICounterItem::GetValue ( ) {
    double _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline void DICounterItem::PutColor ( OLE_COLOR _arg1 ) {
    _com_dispatch_method(this, 0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline OLE_COLOR DICounterItem::GetColor ( ) {
    OLE_COLOR _result;
    _com_dispatch_method(this, 0x1, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void DICounterItem::PutWidth ( int _arg1 ) {
    _com_dispatch_method(this, 0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline int DICounterItem::GetWidth ( ) {
    int _result;
    _com_dispatch_method(this, 0x2, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void DICounterItem::PutLineStyle ( int _arg1 ) {
    _com_dispatch_method(this, 0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline int DICounterItem::GetLineStyle ( ) {
    int _result;
    _com_dispatch_method(this, 0x3, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void DICounterItem::PutScaleFactor ( int _arg1 ) {
    _com_dispatch_method(this, 0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline int DICounterItem::GetScaleFactor ( ) {
    int _result;
    _com_dispatch_method(this, 0x4, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline _bstr_t DICounterItem::GetPath ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline HRESULT DICounterItem::GetValue ( double * Value, long * Status ) {
    return _com_dispatch_method(this, 0x6001000a, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4005\x4003", Value, Status);
}

inline HRESULT DICounterItem::GetStatistics ( double * Max, double * Min, double * Avg, long * Status ) {
    return _com_dispatch_method(this, 0x6001000b, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4005\x4005\x4005\x4003", Max, Min, Avg, Status);
}

//
// interface ICounters wrapper method implementations
//

inline long ICounters::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IUnknownPtr ICounters::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline DICounterItemPtr ICounters::GetItem ( const _variant_t & index ) {
    struct DICounterItem * _result;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DICounterItemPtr(_result, false);
}

inline DICounterItemPtr ICounters::Add ( _bstr_t pathname ) {
    struct DICounterItem * _result;
    HRESULT _hr = raw_Add(pathname, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DICounterItemPtr(_result, false);
}

inline HRESULT ICounters::Remove ( const _variant_t & index ) {
    HRESULT _hr = raw_Remove(index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ISystemMonitor wrapper method implementations
//

inline int ISystemMonitor::GetAppearance ( ) {
    int _result;
    HRESULT _hr = get_Appearance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISystemMonitor::PutAppearance ( int iAppearance ) {
    HRESULT _hr = put_Appearance(iAppearance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline OLE_COLOR ISystemMonitor::GetBackColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISystemMonitor::PutBackColor ( OLE_COLOR pColor ) {
    HRESULT _hr = put_BackColor(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline int ISystemMonitor::GetBorderStyle ( ) {
    int _result;
    HRESULT _hr = get_BorderStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISystemMonitor::PutBorderStyle ( int iBorderStyle ) {
    HRESULT _hr = put_BorderStyle(iBorderStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline OLE_COLOR ISystemMonitor::GetForeColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISystemMonitor::PutForeColor ( OLE_COLOR pColor ) {
    HRESULT _hr = put_ForeColor(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IFontDisp * ISystemMonitor::GetFont ( ) {
    IFontDisp * _result;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISystemMonitor::PutRefFont ( IFontDisp * ppFont ) {
    HRESULT _hr = putref_Font(ppFont);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ICountersPtr ISystemMonitor::GetCounters ( ) {
    struct ICounters * _result;
    HRESULT _hr = get_Counters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICountersPtr(_result, false);
}

inline void ISystemMonitor::PutShowVerticalGrid ( VARIANT_BOOL pbState ) {
    HRESULT _hr = put_ShowVerticalGrid(pbState);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ISystemMonitor::GetShowVerticalGrid ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowVerticalGrid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISystemMonitor::PutShowHorizontalGrid ( VARIANT_BOOL pbState ) {
    HRESULT _hr = put_ShowHorizontalGrid(pbState);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ISystemMonitor::GetShowHorizontalGrid ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowHorizontalGrid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISystemMonitor::PutShowLegend ( VARIANT_BOOL pbState ) {
    HRESULT _hr = put_ShowLegend(pbState);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ISystemMonitor::GetShowLegend ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowLegend(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISystemMonitor::PutShowScaleLabels ( VARIANT_BOOL pbState ) {
    HRESULT _hr = put_ShowScaleLabels(pbState);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ISystemMonitor::GetShowScaleLabels ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowScaleLabels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISystemMonitor::PutShowValueBar ( VARIANT_BOOL pbState ) {
    HRESULT _hr = put_ShowValueBar(pbState);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ISystemMonitor::GetShowValueBar ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowValueBar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISystemMonitor::PutMaximumScale ( int piValue ) {
    HRESULT _hr = put_MaximumScale(piValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline int ISystemMonitor::GetMaximumScale ( ) {
    int _result;
    HRESULT _hr = get_MaximumScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISystemMonitor::PutMinimumScale ( int piValue ) {
    HRESULT _hr = put_MinimumScale(piValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline int ISystemMonitor::GetMinimumScale ( ) {
    int _result;
    HRESULT _hr = get_MinimumScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISystemMonitor::PutUpdateInterval ( float pfValue ) {
    HRESULT _hr = put_UpdateInterval(pfValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline float ISystemMonitor::GetUpdateInterval ( ) {
    float _result;
    HRESULT _hr = get_UpdateInterval(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISystemMonitor::PutDisplayType ( enum DisplayTypeConstants peDisplayType ) {
    HRESULT _hr = put_DisplayType(peDisplayType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum DisplayTypeConstants ISystemMonitor::GetDisplayType ( ) {
    enum DisplayTypeConstants _result;
    HRESULT _hr = get_DisplayType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISystemMonitor::PutManualUpdate ( VARIANT_BOOL pbState ) {
    HRESULT _hr = put_ManualUpdate(pbState);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ISystemMonitor::GetManualUpdate ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ManualUpdate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISystemMonitor::PutGraphTitle ( _bstr_t pbsTitle ) {
    HRESULT _hr = put_GraphTitle(pbsTitle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISystemMonitor::GetGraphTitle ( ) {
    BSTR _result;
    HRESULT _hr = get_GraphTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISystemMonitor::PutYAxisLabel ( _bstr_t pbsTitle ) {
    HRESULT _hr = put_YAxisLabel(pbsTitle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISystemMonitor::GetYAxisLabel ( ) {
    BSTR _result;
    HRESULT _hr = get_YAxisLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT ISystemMonitor::CollectSample ( ) {
    HRESULT _hr = raw_CollectSample();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISystemMonitor::UpdateGraph ( ) {
    HRESULT _hr = raw_UpdateGraph();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISystemMonitor::BrowseCounters ( ) {
    HRESULT _hr = raw_BrowseCounters();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISystemMonitor::DisplayProperties ( ) {
    HRESULT _hr = raw_DisplayProperties();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISystemMonitor::Counter ( int iIndex, struct ICounterItem * * ppICounter ) {
    HRESULT _hr = raw_Counter(iIndex, ppICounter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISystemMonitor::AddCounter ( _bstr_t bsPath, struct ICounterItem * * ppICounter ) {
    HRESULT _hr = raw_AddCounter(bsPath, ppICounter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISystemMonitor::DeleteCounter ( struct ICounterItem * pCtr ) {
    HRESULT _hr = raw_DeleteCounter(pCtr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline OLE_COLOR ISystemMonitor::GetBackColorCtl ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BackColorCtl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISystemMonitor::PutBackColorCtl ( OLE_COLOR pColor ) {
    HRESULT _hr = put_BackColorCtl(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void ISystemMonitor::PutLogFileName ( _bstr_t bsFileName ) {
    HRESULT _hr = put_LogFileName(bsFileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISystemMonitor::GetLogFileName ( ) {
    BSTR _result;
    HRESULT _hr = get_LogFileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISystemMonitor::PutLogViewStart ( DATE StartTime ) {
    HRESULT _hr = put_LogViewStart(StartTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline DATE ISystemMonitor::GetLogViewStart ( ) {
    DATE _result;
    HRESULT _hr = get_LogViewStart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISystemMonitor::PutLogViewStop ( DATE StopTime ) {
    HRESULT _hr = put_LogViewStop(StopTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline DATE ISystemMonitor::GetLogViewStop ( ) {
    DATE _result;
    HRESULT _hr = get_LogViewStop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline OLE_COLOR ISystemMonitor::GetGridColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_GridColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISystemMonitor::PutGridColor ( OLE_COLOR pColor ) {
    HRESULT _hr = put_GridColor(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline OLE_COLOR ISystemMonitor::GetTimeBarColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_TimeBarColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISystemMonitor::PutTimeBarColor ( OLE_COLOR pColor ) {
    HRESULT _hr = put_TimeBarColor(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ISystemMonitor::GetHighlight ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Highlight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISystemMonitor::PutHighlight ( VARIANT_BOOL pbState ) {
    HRESULT _hr = put_Highlight(pbState);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ISystemMonitor::GetShowToolbar ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ShowToolbar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISystemMonitor::PutShowToolbar ( VARIANT_BOOL pbState ) {
    HRESULT _hr = put_ShowToolbar(pbState);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT ISystemMonitor::Paste ( ) {
    HRESULT _hr = raw_Paste();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISystemMonitor::Copy ( ) {
    HRESULT _hr = raw_Copy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISystemMonitor::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline void ISystemMonitor::PutReadOnly ( VARIANT_BOOL pbState ) {
    HRESULT _hr = put_ReadOnly(pbState);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ISystemMonitor::GetReadOnly ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISystemMonitor::PutReportValueType ( enum ReportValueTypeConstants peReportValueType ) {
    HRESULT _hr = put_ReportValueType(peReportValueType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum ReportValueTypeConstants ISystemMonitor::GetReportValueType ( ) {
    enum ReportValueTypeConstants _result;
    HRESULT _hr = get_ReportValueType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISystemMonitor::PutMonitorDuplicateInstances ( VARIANT_BOOL pbState ) {
    HRESULT _hr = put_MonitorDuplicateInstances(pbState);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ISystemMonitor::GetMonitorDuplicateInstances ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MonitorDuplicateInstances(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// dispinterface DISystemMonitorInternal wrapper method implementations
//

inline int DISystemMonitorInternal::GetAppearance ( ) {
    int _result;
    _com_dispatch_method(this, DISPID_APPEARANCE, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void DISystemMonitorInternal::PutAppearance ( int _arg1 ) {
    _com_dispatch_method(this, DISPID_APPEARANCE, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline OLE_COLOR DISystemMonitorInternal::GetBackColor ( ) {
    OLE_COLOR _result;
    _com_dispatch_method(this, DISPID_BACKCOLOR, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void DISystemMonitorInternal::PutBackColor ( OLE_COLOR _arg1 ) {
    _com_dispatch_method(this, DISPID_BACKCOLOR, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline int DISystemMonitorInternal::GetBorderStyle ( ) {
    int _result;
    _com_dispatch_method(this, DISPID_BORDERSTYLE, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void DISystemMonitorInternal::PutBorderStyle ( int _arg1 ) {
    _com_dispatch_method(this, DISPID_BORDERSTYLE, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline OLE_COLOR DISystemMonitorInternal::GetForeColor ( ) {
    OLE_COLOR _result;
    _com_dispatch_method(this, DISPID_FORECOLOR, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void DISystemMonitorInternal::PutForeColor ( OLE_COLOR _arg1 ) {
    _com_dispatch_method(this, DISPID_FORECOLOR, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline IFontDisp * DISystemMonitorInternal::GetFont ( ) {
    IFontDisp * _result;
    _com_dispatch_method(this, DISPID_FONT, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return _result;
}

inline void DISystemMonitorInternal::PutRefFont ( IFontDisp * _arg1 ) {
    _com_dispatch_method(this, DISPID_FONT, DISPATCH_PROPERTYPUTREF, VT_EMPTY, NULL, 
        L"\x0009", _arg1);
}

inline ICountersPtr DISystemMonitorInternal::GetCounters ( ) {
    struct ICounters * _result;
    _com_dispatch_method(this, 0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return ICountersPtr(_result, false);
}

inline void DISystemMonitorInternal::PutShowVerticalGrid ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL DISystemMonitorInternal::GetShowVerticalGrid ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void DISystemMonitorInternal::PutShowHorizontalGrid ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL DISystemMonitorInternal::GetShowHorizontalGrid ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void DISystemMonitorInternal::PutShowLegend ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL DISystemMonitorInternal::GetShowLegend ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void DISystemMonitorInternal::PutShowScaleLabels ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL DISystemMonitorInternal::GetShowScaleLabels ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void DISystemMonitorInternal::PutShowValueBar ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL DISystemMonitorInternal::GetShowValueBar ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void DISystemMonitorInternal::PutMaximumScale ( int _arg1 ) {
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline int DISystemMonitorInternal::GetMaximumScale ( ) {
    int _result;
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void DISystemMonitorInternal::PutMinimumScale ( int _arg1 ) {
    _com_dispatch_method(this, 0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline int DISystemMonitorInternal::GetMinimumScale ( ) {
    int _result;
    _com_dispatch_method(this, 0x7, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void DISystemMonitorInternal::PutUpdateInterval ( float _arg1 ) {
    _com_dispatch_method(this, 0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0004", _arg1);
}

inline float DISystemMonitorInternal::GetUpdateInterval ( ) {
    float _result;
    _com_dispatch_method(this, 0x8, DISPATCH_PROPERTYGET, VT_R4, (void*)&_result, NULL);
    return _result;
}

inline void DISystemMonitorInternal::PutDisplayType ( enum DisplayTypeConstants _arg1 ) {
    _com_dispatch_method(this, 0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline enum DisplayTypeConstants DISystemMonitorInternal::GetDisplayType ( ) {
    enum DisplayTypeConstants _result;
    _com_dispatch_method(this, 0x9, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void DISystemMonitorInternal::PutManualUpdate ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0xa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL DISystemMonitorInternal::GetManualUpdate ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0xa, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void DISystemMonitorInternal::PutGraphTitle ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0xb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _bstr_t DISystemMonitorInternal::GetGraphTitle ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0xb, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void DISystemMonitorInternal::PutYAxisLabel ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0xc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _bstr_t DISystemMonitorInternal::GetYAxisLabel ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0xc, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline HRESULT DISystemMonitorInternal::CollectSample ( ) {
    return _com_dispatch_method(this, 0xe, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT DISystemMonitorInternal::UpdateGraph ( ) {
    return _com_dispatch_method(this, 0xf, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT DISystemMonitorInternal::BrowseCounters ( ) {
    return _com_dispatch_method(this, 0x10, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT DISystemMonitorInternal::DisplayProperties ( ) {
    return _com_dispatch_method(this, 0x11, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT DISystemMonitorInternal::Counter ( int iIndex, struct ICounterItem * * ppICounter ) {
    return _com_dispatch_method(this, 0x12, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x400d", iIndex, ppICounter);
}

inline HRESULT DISystemMonitorInternal::AddCounter ( _bstr_t bsPath, struct ICounterItem * * ppICounter ) {
    return _com_dispatch_method(this, 0x13, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008\x400d", (BSTR)bsPath, ppICounter);
}

inline HRESULT DISystemMonitorInternal::DeleteCounter ( struct ICounterItem * pCtr ) {
    return _com_dispatch_method(this, 0x14, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x000d", pCtr);
}

inline OLE_COLOR DISystemMonitorInternal::GetBackColorCtl ( ) {
    OLE_COLOR _result;
    _com_dispatch_method(this, 0x15, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void DISystemMonitorInternal::PutBackColorCtl ( OLE_COLOR _arg1 ) {
    _com_dispatch_method(this, 0x15, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline void DISystemMonitorInternal::PutLogFileName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x16, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline _bstr_t DISystemMonitorInternal::GetLogFileName ( ) {
    BSTR _result;
    _com_dispatch_method(this, 0x16, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void DISystemMonitorInternal::PutLogViewStart ( DATE _arg1 ) {
    _com_dispatch_method(this, 0x17, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0007", _arg1);
}

inline DATE DISystemMonitorInternal::GetLogViewStart ( ) {
    DATE _result;
    _com_dispatch_method(this, 0x17, DISPATCH_PROPERTYGET, VT_DATE, (void*)&_result, NULL);
    return _result;
}

inline void DISystemMonitorInternal::PutLogViewStop ( DATE _arg1 ) {
    _com_dispatch_method(this, 0x18, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0007", _arg1);
}

inline DATE DISystemMonitorInternal::GetLogViewStop ( ) {
    DATE _result;
    _com_dispatch_method(this, 0x18, DISPATCH_PROPERTYGET, VT_DATE, (void*)&_result, NULL);
    return _result;
}

inline OLE_COLOR DISystemMonitorInternal::GetGridColor ( ) {
    OLE_COLOR _result;
    _com_dispatch_method(this, 0x19, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void DISystemMonitorInternal::PutGridColor ( OLE_COLOR _arg1 ) {
    _com_dispatch_method(this, 0x19, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline OLE_COLOR DISystemMonitorInternal::GetTimeBarColor ( ) {
    OLE_COLOR _result;
    _com_dispatch_method(this, 0x1a, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void DISystemMonitorInternal::PutTimeBarColor ( OLE_COLOR _arg1 ) {
    _com_dispatch_method(this, 0x1a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline VARIANT_BOOL DISystemMonitorInternal::GetHighlight ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x1b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void DISystemMonitorInternal::PutHighlight ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x1b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL DISystemMonitorInternal::GetShowToolbar ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x1c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void DISystemMonitorInternal::PutShowToolbar ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x1c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline HRESULT DISystemMonitorInternal::Paste ( ) {
    return _com_dispatch_method(this, 0x1d, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT DISystemMonitorInternal::Copy ( ) {
    return _com_dispatch_method(this, 0x1e, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT DISystemMonitorInternal::Reset ( ) {
    return _com_dispatch_method(this, 0x1f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline void DISystemMonitorInternal::PutReadOnly ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x20, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL DISystemMonitorInternal::GetReadOnly ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x20, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void DISystemMonitorInternal::PutReportValueType ( enum ReportValueTypeConstants _arg1 ) {
    _com_dispatch_method(this, 0x21, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

inline enum ReportValueTypeConstants DISystemMonitorInternal::GetReportValueType ( ) {
    enum ReportValueTypeConstants _result;
    _com_dispatch_method(this, 0x21, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline void DISystemMonitorInternal::PutMonitorDuplicateInstances ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x22, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline VARIANT_BOOL DISystemMonitorInternal::GetMonitorDuplicateInstances ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_method(this, 0x22, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

//
// dispinterface DISystemMonitor wrapper method implementations
//

inline HRESULT DISystemMonitor::CollectSample ( ) {
    return _com_dispatch_method(this, 0xe, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT DISystemMonitor::UpdateGraph ( ) {
    return _com_dispatch_method(this, 0xf, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT DISystemMonitor::BrowseCounters ( ) {
    return _com_dispatch_method(this, 0x10, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT DISystemMonitor::DisplayProperties ( ) {
    return _com_dispatch_method(this, 0x11, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT DISystemMonitor::Paste ( ) {
    return _com_dispatch_method(this, 0x1d, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT DISystemMonitor::Copy ( ) {
    return _com_dispatch_method(this, 0x1e, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT DISystemMonitor::Reset ( ) {
    return _com_dispatch_method(this, 0x1f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline int DISystemMonitor::GetAppearance ( ) {
    int _result;
    _com_dispatch_propget(this, DISPID_APPEARANCE, VT_I4, (void*)&_result);
    return _result;
}

inline void DISystemMonitor::PutAppearance ( int _val ) {
    _com_dispatch_propput(this, DISPID_APPEARANCE, VT_I4, _val);
}

inline OLE_COLOR DISystemMonitor::GetBackColor ( ) {
    OLE_COLOR _result;
    _com_dispatch_propget(this, DISPID_BACKCOLOR, VT_I4, (void*)&_result);
    return _result;
}

inline void DISystemMonitor::PutBackColor ( OLE_COLOR _val ) {
    _com_dispatch_propput(this, DISPID_BACKCOLOR, VT_I4, _val);
}

inline int DISystemMonitor::GetBorderStyle ( ) {
    int _result;
    _com_dispatch_propget(this, DISPID_BORDERSTYLE, VT_I4, (void*)&_result);
    return _result;
}

inline void DISystemMonitor::PutBorderStyle ( int _val ) {
    _com_dispatch_propput(this, DISPID_BORDERSTYLE, VT_I4, _val);
}

inline OLE_COLOR DISystemMonitor::GetForeColor ( ) {
    OLE_COLOR _result;
    _com_dispatch_propget(this, DISPID_FORECOLOR, VT_I4, (void*)&_result);
    return _result;
}

inline void DISystemMonitor::PutForeColor ( OLE_COLOR _val ) {
    _com_dispatch_propput(this, DISPID_FORECOLOR, VT_I4, _val);
}

inline IFontDisp * DISystemMonitor::GetFont ( ) {
    IFontDisp * _result;
    _com_dispatch_propget(this, DISPID_FONT, VT_DISPATCH, (void*)&_result);
    return _result;
}

inline void DISystemMonitor::PutFont ( IFontDisp * _val ) {
    _com_dispatch_propput(this, DISPID_FONT, VT_DISPATCH, _val);
}

inline VARIANT_BOOL DISystemMonitor::GetShowVerticalGrid ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_propget(this, 0x1, VT_BOOL, (void*)&_result);
    return _result;
}

inline void DISystemMonitor::PutShowVerticalGrid ( VARIANT_BOOL _val ) {
    _com_dispatch_propput(this, 0x1, VT_BOOL, _val);
}

inline VARIANT_BOOL DISystemMonitor::GetShowHorizontalGrid ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_propget(this, 0x2, VT_BOOL, (void*)&_result);
    return _result;
}

inline void DISystemMonitor::PutShowHorizontalGrid ( VARIANT_BOOL _val ) {
    _com_dispatch_propput(this, 0x2, VT_BOOL, _val);
}

inline VARIANT_BOOL DISystemMonitor::GetShowLegend ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_propget(this, 0x3, VT_BOOL, (void*)&_result);
    return _result;
}

inline void DISystemMonitor::PutShowLegend ( VARIANT_BOOL _val ) {
    _com_dispatch_propput(this, 0x3, VT_BOOL, _val);
}

inline VARIANT_BOOL DISystemMonitor::GetShowScaleLabels ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_propget(this, 0x4, VT_BOOL, (void*)&_result);
    return _result;
}

inline void DISystemMonitor::PutShowScaleLabels ( VARIANT_BOOL _val ) {
    _com_dispatch_propput(this, 0x4, VT_BOOL, _val);
}

inline VARIANT_BOOL DISystemMonitor::GetShowValueBar ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_propget(this, 0x5, VT_BOOL, (void*)&_result);
    return _result;
}

inline void DISystemMonitor::PutShowValueBar ( VARIANT_BOOL _val ) {
    _com_dispatch_propput(this, 0x5, VT_BOOL, _val);
}

inline int DISystemMonitor::GetMaximumScale ( ) {
    int _result;
    _com_dispatch_propget(this, 0x6, VT_I4, (void*)&_result);
    return _result;
}

inline void DISystemMonitor::PutMaximumScale ( int _val ) {
    _com_dispatch_propput(this, 0x6, VT_I4, _val);
}

inline int DISystemMonitor::GetMinimumScale ( ) {
    int _result;
    _com_dispatch_propget(this, 0x7, VT_I4, (void*)&_result);
    return _result;
}

inline void DISystemMonitor::PutMinimumScale ( int _val ) {
    _com_dispatch_propput(this, 0x7, VT_I4, _val);
}

inline float DISystemMonitor::GetUpdateInterval ( ) {
    float _result;
    _com_dispatch_propget(this, 0x8, VT_R4, (void*)&_result);
    return _result;
}

inline void DISystemMonitor::PutUpdateInterval ( float _val ) {
    _com_dispatch_propput(this, 0x8, VT_R4, _val);
}

inline enum DisplayTypeConstants DISystemMonitor::GetDisplayType ( ) {
    enum DisplayTypeConstants _result;
    _com_dispatch_propget(this, 0x9, VT_I4, (void*)&_result);
    return _result;
}

inline void DISystemMonitor::PutDisplayType ( enum DisplayTypeConstants _val ) {
    _com_dispatch_propput(this, 0x9, VT_I4, _val);
}

inline VARIANT_BOOL DISystemMonitor::GetManualUpdate ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_propget(this, 0xa, VT_BOOL, (void*)&_result);
    return _result;
}

inline void DISystemMonitor::PutManualUpdate ( VARIANT_BOOL _val ) {
    _com_dispatch_propput(this, 0xa, VT_BOOL, _val);
}

inline _bstr_t DISystemMonitor::GetGraphTitle ( ) {
    BSTR _result;
    _com_dispatch_propget(this, 0xb, VT_BSTR, (void*)&_result);
    return _bstr_t(_result, false);
}

inline void DISystemMonitor::PutGraphTitle ( _bstr_t _val ) {
    _com_dispatch_propput(this, 0xb, VT_BSTR, (BSTR)_val);
}

inline _bstr_t DISystemMonitor::GetYAxisLabel ( ) {
    BSTR _result;
    _com_dispatch_propget(this, 0xc, VT_BSTR, (void*)&_result);
    return _bstr_t(_result, false);
}

inline void DISystemMonitor::PutYAxisLabel ( _bstr_t _val ) {
    _com_dispatch_propput(this, 0xc, VT_BSTR, (BSTR)_val);
}

inline ICountersPtr DISystemMonitor::GetCounters ( ) {
    struct ICounters * _result;
    _com_dispatch_propget(this, 0x0, VT_DISPATCH, (void*)&_result);
    return ICountersPtr(_result, false);
}

inline void DISystemMonitor::PutCounters ( struct ICounters * _val ) {
    _com_dispatch_propput(this, 0x0, VT_DISPATCH, _val);
}

inline OLE_COLOR DISystemMonitor::GetBackColorCtl ( ) {
    OLE_COLOR _result;
    _com_dispatch_propget(this, 0x15, VT_I4, (void*)&_result);
    return _result;
}

inline void DISystemMonitor::PutBackColorCtl ( OLE_COLOR _val ) {
    _com_dispatch_propput(this, 0x15, VT_I4, _val);
}

inline _bstr_t DISystemMonitor::GetLogFileName ( ) {
    BSTR _result;
    _com_dispatch_propget(this, 0x16, VT_BSTR, (void*)&_result);
    return _bstr_t(_result, false);
}

inline void DISystemMonitor::PutLogFileName ( _bstr_t _val ) {
    _com_dispatch_propput(this, 0x16, VT_BSTR, (BSTR)_val);
}

inline DATE DISystemMonitor::GetLogViewStart ( ) {
    DATE _result;
    _com_dispatch_propget(this, 0x17, VT_DATE, (void*)&_result);
    return _result;
}

inline void DISystemMonitor::PutLogViewStart ( DATE _val ) {
    _com_dispatch_propput(this, 0x17, VT_DATE, _val);
}

inline DATE DISystemMonitor::GetLogViewStop ( ) {
    DATE _result;
    _com_dispatch_propget(this, 0x18, VT_DATE, (void*)&_result);
    return _result;
}

inline void DISystemMonitor::PutLogViewStop ( DATE _val ) {
    _com_dispatch_propput(this, 0x18, VT_DATE, _val);
}

inline OLE_COLOR DISystemMonitor::GetGridColor ( ) {
    OLE_COLOR _result;
    _com_dispatch_propget(this, 0x19, VT_I4, (void*)&_result);
    return _result;
}

inline void DISystemMonitor::PutGridColor ( OLE_COLOR _val ) {
    _com_dispatch_propput(this, 0x19, VT_I4, _val);
}

inline OLE_COLOR DISystemMonitor::GetTimeBarColor ( ) {
    OLE_COLOR _result;
    _com_dispatch_propget(this, 0x1a, VT_I4, (void*)&_result);
    return _result;
}

inline void DISystemMonitor::PutTimeBarColor ( OLE_COLOR _val ) {
    _com_dispatch_propput(this, 0x1a, VT_I4, _val);
}

inline VARIANT_BOOL DISystemMonitor::GetHighlight ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_propget(this, 0x1b, VT_BOOL, (void*)&_result);
    return _result;
}

inline void DISystemMonitor::PutHighlight ( VARIANT_BOOL _val ) {
    _com_dispatch_propput(this, 0x1b, VT_BOOL, _val);
}

inline VARIANT_BOOL DISystemMonitor::GetShowToolbar ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_propget(this, 0x1c, VT_BOOL, (void*)&_result);
    return _result;
}

inline void DISystemMonitor::PutShowToolbar ( VARIANT_BOOL _val ) {
    _com_dispatch_propput(this, 0x1c, VT_BOOL, _val);
}

inline VARIANT_BOOL DISystemMonitor::GetReadOnly ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_propget(this, 0x20, VT_BOOL, (void*)&_result);
    return _result;
}

inline void DISystemMonitor::PutReadOnly ( VARIANT_BOOL _val ) {
    _com_dispatch_propput(this, 0x20, VT_BOOL, _val);
}

inline enum ReportValueTypeConstants DISystemMonitor::GetReportValueType ( ) {
    enum ReportValueTypeConstants _result;
    _com_dispatch_propget(this, 0x21, VT_I4, (void*)&_result);
    return _result;
}

inline void DISystemMonitor::PutReportValueType ( enum ReportValueTypeConstants _val ) {
    _com_dispatch_propput(this, 0x21, VT_I4, _val);
}

inline VARIANT_BOOL DISystemMonitor::GetMonitorDuplicateInstances ( ) {
    VARIANT_BOOL _result;
    _com_dispatch_propget(this, 0x22, VT_BOOL, (void*)&_result);
    return _result;
}

inline void DISystemMonitor::PutMonitorDuplicateInstances ( VARIANT_BOOL _val ) {
    _com_dispatch_propput(this, 0x22, VT_BOOL, _val);
}

//
// dispinterface DISystemMonitorEvents wrapper method implementations
//

inline HRESULT DISystemMonitorEvents::OnCounterSelected ( int iIndex ) {
    return _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", iIndex);
}

inline HRESULT DISystemMonitorEvents::OnCounterAdded ( int iIndex ) {
    return _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", iIndex);
}

inline HRESULT DISystemMonitorEvents::OnCounterDeleted ( int iIndex ) {
    return _com_dispatch_method(this, 0x3, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", iIndex);
}

inline HRESULT DISystemMonitorEvents::OnSampleCollected ( ) {
    return _com_dispatch_method(this, 0x4, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT DISystemMonitorEvents::OnDblClick ( int index ) {
    return _com_dispatch_method(this, 0x5, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", index);
}
