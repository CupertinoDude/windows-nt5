VERSION 5.00
Begin VB.PropertyPage ppgBrowser 
   Caption         =   "Internet Explorer"
   ClientHeight    =   3600
   ClientLeft      =   0
   ClientTop       =   0
   ClientWidth     =   4800
   PaletteMode     =   0  'Halftone
   ScaleHeight     =   3600
   ScaleWidth      =   4800
   Begin VB.TextBox txtURL 
      Height          =   375
      Left            =   120
      TabIndex        =   1
      Top             =   1080
      Width           =   4455
   End
   Begin VB.Label Label1 
      Caption         =   "Enter a new URL to display in the result pane:"
      Height          =   375
      Left            =   240
      TabIndex        =   0
      Top             =   360
      Width           =   4095
   End
End
Attribute VB_Name = "ppgBrowser"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
'  ===========================================================================
' |    THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF      |
' |    ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO    |
' |    THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A         |
' |    PARTICULAR PURPOSE.                                                    |
' |    Copyright (c) 1998-1999  Microsoft Corporation                         |
'  ===========================================================================

Option Explicit

' Variable to hold a reference to the scope item for which this page displays
' properties

Dim m_ScopeItem As ScopeItem
Dim m_szCurrentURL As String

' =============================================================================
' Method:       PropertyPage_ApplyChanges
' Type:         Event
' Description:  Called when the user clicks the OK or Appply button on the
'               property sheet
'
' Parameters:   None
' Output:       None
' Notes:        This property page notifies the snap-in of the
'               changes by calling ScopeItem.PropertyChanged. Calling this
'               method generates the ScopeItems_PropertyChanged event in the
'               snap-in.
' =============================================================================
Private Sub PropertyPage_ApplyChanges()

    ' Only send the new URL if it is new. The user can keep the property sheet
    ' open and continue switching URLs to use the node as primitive browser.

    If txtURL.Text <> m_szCurrentURL Then
        m_ScopeItem.PropertyChanged txtURL.Text
        m_szCurrentURL = txtURL.Text
    End If

End Sub

' =============================================================================
' Method:       PropertyPage_SelectionChanged
' Type:         Event
' Description:  Called when the property sheet passes the object(s) for which
'               it is being displayed to the property page.
' Parameters:   None
' Output:       None
' Notes:        Unlike a UserControl property page, SelectedControls(0) will
'               contain the ScopeItems and/or ListItems for which the property sheet
'               is being displayed. Changes can be made directly to an item's
'               properties. The property page can notify the snap-in of the
'               changes by calling ScopeItem.PropertyChanged or
'               MMCListItem.PropertyChanged. Calling these methods will
'               generate the ScopeItems_PropertyChanged or
'               ResultViews_PropertyChanged event in the snap-in.
' =============================================================================
Private Sub PropertyPage_SelectionChanged()
    Set m_ScopeItem = SelectedControls(0)
End Sub

' =============================================================================
' Method:       txtURL_Change
' Type:         Event
' Description:  Called when the user types in the URL text box
'
' Parameters:   None
' Output:       None
' Notes:        Set Changed to enable the Apply button.
' =============================================================================
Private Sub txtURL_Change()
    Changed = True
End Sub
