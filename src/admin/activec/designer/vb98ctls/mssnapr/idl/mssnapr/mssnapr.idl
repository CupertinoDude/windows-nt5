// mssnapr.idl
//---------------------------------------------------------------------------
// Copyright (c) 1999, Microsoft Corp.
//                 All Rights Reserved
// Information Contained Herein Is Proprietary and Confidential.
//---------------------------------------------------------------------------
//
// SnapIn Designer Runtime IDL
//
//

#include "help.h"

#include "mssnapr_helpids.h"    // File generated from MSSNAPR.ID
#include "mssnapr_helpstrs.h"   // File generated from MSSNAPR.ID

// Use HELP(devstring) instead of helpcontext/helpstring separately!
// The devstrings are defined in MSSNAPR.ID, and new ones should be
// added there.


#define HELP(devstring) helpcontext(HID_ ## devstring), helpstring(BS_ ## devstring), helpstringcontext(HID_ ## devstring)

#include "dispid.h"
#include "tlver.h"


// Throughout this file there are some properties which have
// both a propput and a propputref entry. This is used when
// the property is a VARIANT and can potentially be set to
// an object. For example, look at IMMCImage::Tag.
// When the user's code is
//      Set Image.Tag = MyObject
// VBA will do a propputref using VT_DISPATCH. If the code has
//      Image.Tag = MyObject
// then VBA will get the default property from MyObject and do
// propput using the VT of that property.



[
    uuid(792BA950-C809-11d1-B443-8EFD9A000000),
    lcid(0x0000),
    version(TLIB_VERSION),
    HELP(mssnapr),
    helpfile(HELP_FILENAME),
    helpstringdll(HELP_DLLFILENAME)
]
library SnapInLib
{
    importlib("stdole2.tlb");

    //--------------------------------------------------------------------
    //                   VB PropertyBag
    //--------------------------------------------------------------------

    // This definition comes from the VB source file vb98\ruby\intl\usa\vbrun.odl
    // While the VB PropertyBag is publicly creatable there is no public place
    // from which to import its defintion.

    [
      odl,
      dual,
      hidden,
      uuid(4495AD01-C993-11d1-A3E4-00A0C90AEA82),
      nonextensible,
    ]
    interface _PropertyBag: IDispatch
    {
        [id(1)]
        HRESULT ReadProperty([in]           BSTR     Name,
                             [in, optional] VARIANT  DefaultValue,
                             [out, retval]  VARIANT *Value);
        [id(2)]
        HRESULT WriteProperty([in] BSTR              Name,
                              [in] VARIANT           Value,
                              [in, optional] VARIANT DefaultValue);
        [id(3), propget]
        HRESULT Contents([out, retval] VARIANT * retval);
        [id(3), propput]
        HRESULT Contents([in] VARIANT Bytes);
    }

    [
        uuid(D5DE8D20-5BB8-11d1-A1E3-00A0C90F2731),
        hidden
    ]
    coclass PropertyBag
    {
        [default] interface _PropertyBag;
    }


    //--------------------------------------------------------------------
    //                       Enumerations
    //--------------------------------------------------------------------

    //
    // SnapInTypeConstants
    //
    typedef
    [
        uuid(332894B0-C8A9-11d1-B445-86A6AA000000),
        HELP(mssnapr_SnapInType)
    ]
    enum SnapInTypeConstants
    {
        [HELP(mssnapr_SnapInType_StandAlone)] siStandAlone = 0,
        [HELP(mssnapr_SnapInType_Extension) ] siExtension  = 1,
        [HELP(mssnapr_SnapInType_Dual)      ] siDualMode   = 2
    } SnapInTypeConstants;

    //
    // SnapInRuntimeModeConstants
    //
    [
        uuid(56283301-09E8-11d2-9792-F43920524153),
        HELP(mssnapr_SnapInRuntimeMode)
    ]
    typedef enum SnapInRuntimeModeConstants
    {
        [HELP(mssnapr_SnapInRuntimeMode_Primary)     ] siRTPrimary     = 0,
        [HELP(mssnapr_SnapInRuntimeMode_Extension)   ] siRTExtension   = 1,
        [HELP(mssnapr_SnapInRuntimeMode_SnapInAbout) ] siRTSnapInAbout = 2,
        [HELP(mssnapr_SnapInRuntimeMode_Unknown)     ] siRTUnknown     = 3
    } SnapInRuntimeModeConstants;

    //
    // SnapInResultViewTypeConstants
    //
    [
        uuid(302961E0-C8E9-11d1-B449-704B8F000000),
        HELP(mssnapr_ResultViewType)
    ]
    typedef enum SnapInResultViewTypeConstants
    {
        [HELP(mssnapr_ResultViewType_ListView)      ] siListView      = 0,
        [HELP(mssnapr_ResultViewType_URLView)       ] siURLView       = 1,
        [HELP(mssnapr_ResultViewType_OCXView)       ] siOCXView       = 2,
        [HELP(mssnapr_ResultViewType_Taskpad)       ] siTaskpad       = 3,
        [HELP(mssnapr_ResultViewType_Listpad)       ] siListpad       = 4,
        [HELP(mssnapr_ResultViewType_CustomTaskpad) ] siCustomTaskpad = 5,
        [HELP(mssnapr_ResultViewType_MessageView)   ] siMessageView   = 6,
        [HELP(mssnapr_ResultViewType_PreDefined)    ] siPreDefined    = 7,
        [HELP(mssnapr_ResultViewType_Unknown)       ] siUnknown       = 8
    } SnapInResultViewTypeConstants;

    //
    // SnapInSortOrderConstants
    //
    [
        uuid(15DC07F0-CC1B-11d1-B44B-86B824000000),
        HELP(mssnapr_SortOrder)
    ]
    typedef enum SnapInSortOrderConstants
    {
        [HELP(mssnapr_SortOrder_Ascending) ] siAscending  = 0,
        [HELP(mssnapr_SortOrder_Descending)] siDescending = 1
    } SnapInSortOrderConstants;

    //
    // SnapInViewModeConstants
    //
    [
        uuid(15DC07F1-CC1B-11d1-B44B-86B824000000),
        HELP(mssnapr_ViewMode)
    ]
    typedef enum SnapInViewModeConstants
    {
        [HELP(mssnapr_ViewMode_Icon)     ] siIcon      = 0,
        [HELP(mssnapr_ViewMode_SmallIcon)] siSmallIcon = 1,
        [HELP(mssnapr_ViewMode_List)     ] siList      = 2,
        [HELP(mssnapr_ViewMode_Report)   ] siReport    = 3,
        [HELP(mssnapr_ViewMode_Filtered) ] siFiltered  = 4
    } SnapInViewModeConstants;

    //
    // SnapInColumnAlignmentConstants
    //
    [
        uuid(91CC37D1-CE2B-11d1-B44D-7E92AF000000),
        HELP(mssnapr_ColumnAlignment)
    ]
    typedef enum SnapInColumnAlignmentConstants
    {
        [HELP(mssnapr_ColumnAlignment_ColumnLeft)   ] siColumnLeft   = 0,
        [HELP(mssnapr_ColumnAlignment_ColumnRight)  ] siColumnRight  = 1,
        [HELP(mssnapr_ColumnAlignment_ColumnCenter) ] siColumnCenter = 2
    } SnapInColumnAlignmentConstants;

    //
    // SnapInColumnWidthConstants
    //
    [
        uuid(8B034111-FBB2-11d1-9785-EAA220524153),
        HELP(mssnapr_ColumnWidth)
    ]
    typedef enum SnapInColumnWidthConstants
    {
        [HELP(mssnapr_ColumnWidth_ColumnAutoWidth)   ] siColumnAutoWidth = -1
    } SnapInColumnWidthConstants;

    //
    // SnapInConsoleVerbConstants
    //
    // There numbers match the MMC verb constants.
    //

    [
        uuid(91CC37DB-CE2B-11d1-B44D-7E92AF000000),
        HELP(mssnapr_ConsoleVerbs)
    ]
    typedef enum SnapInConsoleVerbConstants
    {
        [HELP(mssnapr_ConsoleVerbs_None)       ] siNone       = 0,
        [HELP(mssnapr_ConsoleVerbs_Open)       ] siOpen       = 0x8000,
        [HELP(mssnapr_ConsoleVerbs_Copy)       ] siCopy       = 0x8001,
        [HELP(mssnapr_ConsoleVerbs_Paste)      ] siPaste      = 0x8002,
        [HELP(mssnapr_ConsoleVerbs_Delete)     ] siDelete     = 0x8003,
        [HELP(mssnapr_ConsoleVerbs_Properties) ] siProperties = 0x8004,
        [HELP(mssnapr_ConsoleVerbs_Rename)     ] siRename     = 0x8005,
        [HELP(mssnapr_ConsoleVerbs_Refresh)    ] siRefresh    = 0x8006,
        [HELP(mssnapr_ConsoleVerbs_Print)      ] siPrint      = 0x8007,
        [HELP(mssnapr_ConsoleVerbs_Cut)        ] siCut        = 0x8008
    } SnapInConsoleVerbConstants;

    //
    // SnapInButtonStyleConstants
    //
    [
        uuid(91CC37E4-CE2B-11d1-B44D-7E92AF000000),
        HELP(mssnapr_ButtonStyle)
    ]
    typedef enum SnapInButtonStyleConstants
    {
        [HELP(mssnapr_ButtonStyle_Default)     ] siDefault     = 0x00,
        [HELP(mssnapr_ButtonStyle_Check)       ] siCheck       = 0x01,
        [HELP(mssnapr_ButtonStyle_ButtonGroup) ] siButtonGroup = 0x04,
        [HELP(mssnapr_ButtonStyle_Separator)   ] siSeparator   = 0x08,
        [HELP(mssnapr_ButtonStyle_DropDown)    ] siDropDown    = 0x10
    } SnapInButtonStyleConstants;

    //
    // SnapInButtonValueConstants
    //
    [
        uuid(56283302-09E8-11d2-9792-F43920524153),
        HELP(mssnapr_ButtonValue)
    ]
    typedef enum SnapInButtonValueConstants
    {
        [HELP(mssnapr_ButtonValue_Unpressed) ] siUnpressed = 0,
        [HELP(mssnapr_ButtonValue_Pressed)   ] siPressed   = 1
    } SnapInButtonValueConstants;


    //
    // SnapInActionTypeConstants
    //
    [
        uuid(861481F6-D867-11d1-B450-C43058000000),
        HELP(mssnapr_ActionType)
    ]
    typedef enum SnapInActionTypeConstants
    {
        [HELP(mssnapr_ActionType_Notify) ] siNotify = 0,
        [HELP(mssnapr_ActionType_URL)    ] siURL    = 1,
        [HELP(mssnapr_ActionType_Script) ] siScript = 2
    } SnapInActionTypeConstants;

    //
    // SnapInNodeRelationshipConstants
    //
    [
        uuid(22812B15-F637-11d1-977E-CE9020524153),
        HELP(mssnapr_NodeRelationship)
    ]
    typedef enum SnapInNodeRelationshipConstants
    {
        [HELP(mssnapr_NodeRelationship_Parent)   ] siParent   = 0,
        [HELP(mssnapr_NodeRelationship_Previous) ] siPrevious = 1,
        [HELP(mssnapr_NodeRelationship_Next)     ] siNext     = 2,
        [HELP(mssnapr_NodeRelationship_First)    ] siFirst    = 3
    } SnapInNodeRelationshipConstants;

    //
    // SnapInTaskpadTypeConstants
    //
    [
        uuid(E1A66901-07AE-11d2-9791-50C320524153),
    ]
    typedef enum SnapInTaskpadTypeConstants
    {
        [HELP(mssnapr_ResultViewType_Taskpad)       ] Default = siTaskpad,
        [HELP(mssnapr_ResultViewType_Listpad)       ] Listpad = siListpad,
        [HELP(mssnapr_ResultViewType_CustomTaskpad) ] Custom  = siCustomTaskpad
    } SnapInTaskpadTypeConstants;


    //
    // SnapInTaskpadImageTypeConstants
    //
    [
        uuid(B9CB9E02-5F83-11d2-97C3-00104B880587),
    ]
    typedef enum SnapInTaskpadImageTypeConstants
    {
        [HELP(mssnapr_TaskpadImageType_None)         ] siNoImage      = 0,
        [HELP(mssnapr_TaskpadImageType_Symbol)       ] siSymbol       = 1,
        [HELP(mssnapr_TaskpadImageType_VanillaGIF)   ] siVanillaGIF   = 2,
        [HELP(mssnapr_TaskpadImageType_ChocolateGIF) ] siChocolateGIF = 3,
        [HELP(mssnapr_TaskpadImageType_Bitmap)       ] siBitmap       = 4
    } SnapInTaskpadImageTypeConstants;


    //
    // SnapInNewWindowOptionConstants
    //
    typedef
    [
        uuid(81AF99E1-4660-11d2-97B7-ACFA20524153),
        HELP(mssnapr_NewWindowOption)
    ]
    enum SnapInNewWindowOptionConstants
    {
        [HELP(mssnapr_NewWindowOption_DefaultWindow)] siDefaultWindow = 0x0000,
        [HELP(mssnapr_NewWindowOption_NoScopePane)  ] siNoScopePane   = 0x0001,
        [HELP(mssnapr_NewWindowOption_NoToolbars)   ] siNoToolbars    = 0x0002,
        [HELP(mssnapr_NewWindowOption_ShortTitle)   ] siShortTitle    = 0x0004,
        [HELP(mssnapr_NewWindowOption_CustomTitle)  ] siCustomTitle   = 0x0008,
        [HELP(mssnapr_NewWindowOption_NoPersist)    ] siNoPersist     = 0x0010
    } SnapInNewWindowOptionConstants;


    //
    // WizardPageButtonConstants
    //
    [
        uuid(2E37BF22-827B-11d2-97DB-00104B880587),
        HELP(mssnapr_WizardPageButtons)
    ]
    typedef enum WizardPageButtonConstants
    {
        [HELP(mssnapr_WizardPageButtons_EnabledNext)    ] EnabledNextButton    = 0,
        [HELP(mssnapr_WizardPageButtons_DisabledNext)   ] DisabledNextButton   = 1,
        [HELP(mssnapr_WizardPageButtons_EnabledFinish)  ] EnabledFinishButton  = 2,
        [HELP(mssnapr_WizardPageButtons_DisabledFinish) ] DisabledFinishButton = 3
    } WizardPageButtonConstants;

    //
    // SnapInPropertySheetButtonConstants
    //
    [
        uuid(91FB4575-9CE9-41E8-BEA8-817042BA0A50),
        HELP(mssnapr_PropertySheetButtons)
    ]
    typedef enum SnapInPropertySheetButtonConstants
    {
        [HELP(mssnapr_PropertySheetButton_Apply)   ] siApplyButton   = 0,
        [HELP(mssnapr_PropertySheetButton_Back)    ] siBackButton    = 1,
        [HELP(mssnapr_PropertySheetButton_Cancel)  ] siCancelButton  = 2,
        [HELP(mssnapr_PropertySheetButton_Finish)  ] siFinishButton  = 3,
        [HELP(mssnapr_PropertySheetButton_Help)    ] siHelpButton    = 4,
        [HELP(mssnapr_PropertySheetButton_Next)    ] siNextButton    = 5,
        [HELP(mssnapr_PropertySheetButton_OK)      ] siOKButton      = 6
    } SnapInPropertySheetButtonConstants;

    //
    // SnapInSelectionTypeConstants
    //
    [
        uuid(F84B6182-A332-11d2-97E3-00104B880587),
        HELP(mssnapr_SelectionType)
    ]
    typedef enum SnapInSelectionTypeConstants
    {
        [HELP(mssnapr_SelectionType_SingleScopeItem)   ] siSingleScopeItem   = 0,
        [HELP(mssnapr_SelectionType_SingleListItem)    ] siSingleListItem    = 1,
        [HELP(mssnapr_SelectionType_SingleForeign)     ] siSingleForeign     = 2,
        [HELP(mssnapr_SelectionType_MultiScopeItems)   ] siMultiScopeItems   = 3,
        [HELP(mssnapr_SelectionType_MultiListItems)    ] siMultiListItems    = 4,
        [HELP(mssnapr_SelectionType_MultiMixed)        ] siMultiMixed        = 5,
        [HELP(mssnapr_SelectionType_MultiForeign)      ] siMultiForeign      = 6,
        [HELP(mssnapr_SelectionType_MultiMixedForeign) ] siMultiMixedForeign = 7,
        [HELP(mssnapr_SelectionType_SpecialWeb)        ] siSpecialWeb        = 8,
        [HELP(mssnapr_SelectionType_SpecialOcx)        ] siSpecialOcx        = 9,
        [HELP(mssnapr_SelectionType_Empty)             ] siEmpty             = 10

    } SnapInSelectionTypeConstants;


    //
    // SnapInExtensionTypeConstants
    //
    [
        uuid(63536722-A733-11d2-97E5-00104B880587),
        HELP(mssnapr_ExtensionType)
    ]
    typedef enum SnapInExtensionTypeConstants
    {
        [HELP(mssnapr_ExtensionType_Static)  ] siStatic  = 0,
        [HELP(mssnapr_ExtensionType_Dynamic) ] siDynamic = 1

    } SnapInExtensionTypeConstants;


    //
    // SnapInListpadStyleConstants
    //
    [
        uuid(30B5F432-C2A3-11d2-97EC-00104B880587),
        HELP(mssnapr_ListpadStyle)
    ]
    typedef enum SnapInListpadStyleConstants
    {
        [HELP(mssnapr_ListpadStyle_Horizontal) ] siHorizontal = 0,
        [HELP(mssnapr_ListpadStyle_Vertical)   ] siVertical   = 1

    } SnapInListpadStyleConstants;


    //
    // SnapInFormatConstants
    //
    [
        uuid(630BBA32-C47E-11d2-97EC-00104B880587),
        HELP(mssnapr_Format)
    ]
    typedef enum SnapInFormatConstants
    {
        [HELP(mssnapr_Format_Integer)        ] siInteger        = 0,
        [HELP(mssnapr_Format_Long)           ] siLong           = 1,
        [HELP(mssnapr_Format_Single)         ] siSingle         = 2,
        [HELP(mssnapr_Format_Double)         ] siDouble         = 3,
        [HELP(mssnapr_Format_String)         ] siString         = 4,
        [HELP(mssnapr_Format_MultiString)    ] siMultiString    = 5,
        [HELP(mssnapr_Format_Object)         ] siObject         = 6,
        [HELP(mssnapr_Format_Boolean)        ] siBoolean        = 7,
        [HELP(mssnapr_Format_CBoolean)       ] siCBoolean       = 8,
        [HELP(mssnapr_Format_Date)           ] siDate           = 9,
        [HELP(mssnapr_Format_Currency)       ] siCurrency       = 10,
        [HELP(mssnapr_Format_GUID)           ] siGUID           = 11,
        [HELP(mssnapr_Format_ObjectInstance) ] siObjectInstance = 12

    } SnapInFormatConstants;

    //
    // SnapInObjectFormatConstants
    //
    [
        uuid(F291D028-7A3E-4FBF-88E9-37424C17AB34),
        HELP(mssnapr_ObjectFormat)
    ]
    typedef enum SnapInObjectFormatConstants
    {
        [HELP(mssnapr_ObjectFormat_PersistsedObject)] siPersistedObject = 0,
        [HELP(mssnapr_ObjectFormat_ObjectReference) ] siObjectReference = 1

    } SnapInObjectFormatConstants;


    //
    // SnapInPropertySheetTypeConstants
    //
    [
        uuid(37724C02-E789-11d2-97F1-00104B880587),
        HELP(mssnapr_PropertySheetType)
    ]
    typedef enum SnapInPropertySheetTypeConstants
    {
        [HELP(mssnapr_PropertySheetType_PropertySheet) ] siPropertySheet = 0,
        [HELP(mssnapr_PropertySheetType_Wizard)        ] siWizard        = 1,
        [HELP(mssnapr_PropertySheetType_Wizard97)      ] siWizard97      = 2

    } SnapInPropertySheetTypeConstants;


    //
    // SnapInFilterChangeConstants
    //
    [
        uuid(647B4FF2-FC18-11d2-97FB-00104B880587),
        HELP(mssnapr_FilterChangeType)
    ]
    typedef enum SnapInFilterChangeTypeConstants
    {
        [HELP(mssnapr_FilterChangeType_Enable)      ] siEnable      = 0,
        [HELP(mssnapr_FilterChangeType_Disable)     ] siDisable     = 1,
        [HELP(mssnapr_FilterChangeType_ValueChange) ] siValueChange = 2

    } SnapInFilterChangeTypeConstants;


    //
    // SnapInMessageViewIconTypeConstants
    //
    [
        uuid(F1662F10-2D7D-11D3-AA41-00104B880587),
        HELP(mssnapr_MessageViewIconType)
    ]
    typedef enum SnapInMessageViewIconTypeConstants
    {
        [HELP(mssnapr_MessageViewIconType_None)        ] siIconNone        = 0,
        [HELP(mssnapr_MessageViewIconType_Error)       ] siIconError       = 32513,
        [HELP(mssnapr_MessageViewIconType_Question)    ] siIconQuestion    = 32514,
        [HELP(mssnapr_MessageViewIconType_Warning)     ] siIconWarning     = 32515,
        [HELP(mssnapr_MessageViewIconType_Information) ] siIconInformation = 32516

    } SnapInMessageViewIconTypeConstants;


    //
    // SnapInListItemStateConstants
    //
    [
        uuid(25293458-5B70-477C-A815-B3C85FAA703A),
        HELP(mssnapr_ListItemState)
    ]
    typedef enum SnapInListItemStateConstants
    {
        [HELP(mssnapr_ListItemState_Selected)    ] siSelected        = 0,
        [HELP(mssnapr_ListItemState_DropHilited) ] siDropHilited     = 1,
        [HELP(mssnapr_ListItemState_Focused)     ] siFocused         = 2,
        [HELP(mssnapr_ListItemState_Cut)         ] siCutHilited      = 3

    } SnapInListItemStateConstants;



//=--------------------------------------------------------------------------=
//
//                          Error Constants
//
//=--------------------------------------------------------------------------=

// Use this macro if the error name needs to be changed before exposing it to the programmer
#define DEFINE_ERR_ENUM2(devid, ExternalName) [HELP(mssnapr_err_ ## devid)] siErr ## ExternalName = HID_ ## mssnapr_err_ ## devid


// Use this macro if the error name is good enough to expose as is
#define DEFINE_ERR_ENUM(devid) DEFINE_ERR_ENUM2(devid, devid)

    //
    // SnapInErrorConstants
    //
    typedef
    [
        uuid(6C3E4052-53EF-11d2-97BD-00104B880587),
        HELP(mssnapr_ErrorConstants)
    ]
    enum SnapInErrorConstants
    {
      DEFINE_ERR_ENUM(Exception),
      DEFINE_ERR_ENUM(OutOfMemory),
      DEFINE_ERR_ENUM(InvalidArg),
      DEFINE_ERR_ENUM(ConsoleError),
      DEFINE_ERR_ENUM(UnknownFormat),
      DEFINE_ERR_ENUM(TextSerialzation),
      DEFINE_ERR_ENUM(InternalError),
      DEFINE_ERR_ENUM(UnsupportedStgMedium),
      DEFINE_ERR_ENUM(IncompleteWrite),
      DEFINE_ERR_ENUM(IncompleteRead),
      DEFINE_ERR_ENUM(UnsupportedType),
      DEFINE_ERR_ENUM(KeyNotUnique),
      DEFINE_ERR_ENUM(ElementNotFound),
      DEFINE_ERR_ENUM(ClipformatsNotRegistered),
      DEFINE_ERR_ENUM(InvalidImageType),
      DEFINE_ERR_ENUM(DetachedObject),
      DEFINE_ERR_ENUM(ToolbarHasNoImageList),
      DEFINE_ERR_ENUM(ToolbarHasNoImages),
      DEFINE_ERR_ENUM(ToolbarImageNotFound),
      DEFINE_ERR_ENUM(SystemError),
      DEFINE_ERR_ENUM(TooManyMenuItems),
      DEFINE_ERR_ENUM(ReadOnlyAtRuntime),
      DEFINE_ERR_ENUM(MenuItemDistinct),
      DEFINE_ERR_ENUM(DuplicateMenu),
      DEFINE_ERR_ENUM(InvalidIdentifier),
      DEFINE_ERR_ENUM(InvalidPropertyPageName),
      DEFINE_ERR_ENUM(InvalidVariant),
      DEFINE_ERR_ENUM(ObjectNotPersistable),
      DEFINE_ERR_ENUM(ObjectNotPublicCreatable),
      DEFINE_ERR_ENUM(UnknownListView),
      DEFINE_ERR_ENUM(InvalidRawDataType),
      DEFINE_ERR_ENUM(FormatNotAvailable),
      DEFINE_ERR_ENUM(NotExtensible),
      DEFINE_ERR_ENUM(SerialzationCorrupt),
      DEFINE_ERR_ENUM(CantRemoveStaticNode),
      DEFINE_ERR_ENUM(CantChangeUnownedScopeNode),
      DEFINE_ERR_ENUM(UnsupportedOnVirtualList),
      DEFINE_ERR_ENUM(NoKeyOnVirtualItems),
      DEFINE_ERR_ENUM(IndexOutOfRange),
      DEFINE_ERR_ENUM(NotConnectedToMMC),
      DEFINE_ERR_ENUM(CantDeletePicture),
      DEFINE_ERR_ENUM(ControlbarNotAvailable),
      DEFINE_ERR_ENUM(CollectionReadOnly),
      DEFINE_ERR_ENUM(InvalidColumnSetID),
      DEFINE_ERR_ENUM(MMCFeatureNotAvailable),
      DEFINE_ERR_ENUM(ColumnsNotPersisted),
      DEFINE_ERR_ENUM(IconRequired),
      DEFINE_ERR_ENUM(CantDeleteIcon),
      DEFINE_ERR_ENUM(ToolbarInconsistent),
      DEFINE_ERR_ENUM(UnsupportedDataMedium),
      DEFINE_ERR_ENUM(DataTooLarge),
      DEFINE_ERR_ENUM(MMCVersionNotAvailable),
      DEFINE_ERR_ENUM(SortSettingsNotPersisted),
      DEFINE_ERR_ENUM(ScopeNodeNotConnectedToMMC),
      DEFINE_ERR_ENUM(NoScopeItemsInVirtualList),
      DEFINE_ERR_ENUM(CantAlterPageCount)

    } SnapInErrorConstants;



    //=---------------------------------------------------------------------=
    //                     Interfaces and Coclasses
    //=---------------------------------------------------------------------=

    //--------------------
    // Forward references
    //--------------------

    interface IExtensionSnapIn;
    coclass ExtensionSnapIn;
    interface IScopeItems;
    coclass ScopeItems;
    interface IScopeItem;
    coclass ScopeItem;
    interface IScopeNode;
    coclass ScopeNode;
    interface IViews;
    coclass Views;
    interface IView;
    coclass View;
    interface IScopePaneItems;
    coclass ScopePaneItems;
    interface IScopePaneItem;
    coclass ScopePaneItem;
    interface IResultViews;
    coclass ResultViews;
    interface IResultView;
    coclass ResultView;
    interface IMMCImageList;
    coclass MMCImageList;
    interface IMMCImages;
    coclass MMCImages;
    interface IMMCImage;
    coclass MMCImage;
    interface IMMCListView;
    coclass MMCListView;
    interface IMMCColumnHeaders;
    coclass MMCColumnHeaders;
    interface IMMCColumnHeader;
    coclass MMCColumnHeader;
    interface IMMCListItems;
    coclass MMCListItems;
    interface IMMCListItem;
    coclass MMCListItem;
    interface IMMCListSubItems;
    coclass MMCListSubItems;
    interface IMMCListSubItem;
    coclass MMCListSubItem;
    interface IMMCDataObjects;
    coclass MMCDataObjects;
    interface IMMCDataObject;
    coclass MMCDataObject;
    interface IMMCClipboard;
    coclass MMCClipboard;
#if defined(USING_SNAPINDATA)
    interface ISnapInData;
#endif
    interface IMMCMenu;
    coclass MMCMenu;
    interface IMMCMenus;
    coclass MMCMenus;
    interface IContextMenu;
    coclass ContextMenu;
    interface IMMCPropertySheet;
    coclass MMCPropertySheet;
    interface IMMCPropertyPage;
    interface IMMCControlbar;
    coclass MMCControlbar;
    interface IMMCConsoleVerbs;
    coclass MMCConsoleVerbs;
    interface IMMCConsoleVerb;
    coclass MMCConsoleVerb;
    interface IMMCToolbar;
    interface IMMCButtons;
    coclass MMCButtons;
    interface IMMCButton;
    coclass MMCButton;
    interface IMMCButtonMenus;
    coclass MMCButtonMenus;
    interface IMMCButtonMenu;
    coclass MMCButtonMenu;
    interface IExtensions;
    coclass Extensions;
    interface IExtension;
    coclass Extension;
    interface ITaskpad;
    coclass Taskpad;
    interface ITasks;
    coclass Tasks;
    interface ITask;
    coclass Task;
    interface IMMCMenuDef;
    interface IMMCStringTable;
    coclass MMCStringTable;
    coclass MMCContextMenuProvider;
    coclass MMCPropertySheetProvider;
    coclass MMCMessageView;
    coclass ColumnSettings;
    coclass ColumnSetting;
    coclass SortKeys;
    coclass SortKey;

    //=---------------------------------------------------------------------=
    //                         SnapIn Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(792BA951-C809-11d1-B443-8EFD9A000000),
        dual,
        oleautomation,
        nonextensible,
        hidden,
        HELP(mssnapr_ISnapIn)
    ]
    interface ISnapIn : IDispatch
    {
        // properties:

        //
        // Name
        //
        [
            id(DISPID_VALUE),
            propput,
            HELP(mssnapr_ISnapIn_Name)
        ]
        HRESULT _stdcall Name([in] BSTR bstrName);

        [
            id(DISPID_VALUE),
            propget,
            HELP(mssnapr_ISnapIn_Name)
        ]
        HRESULT _stdcall Name([out, retval] BSTR *pbstrName);

        //
        // NodeTypeName
        //
        [
            id(DISPID_SNAPIN_NODE_TYPE_NAME),
            propput,
            HELP(mssnapr_ISnapIn_NodeTypeName)
        ]
        HRESULT _stdcall NodeTypeName([in] BSTR bstrName);

        [
            id(DISPID_SNAPIN_NODE_TYPE_NAME),
            propget,
            HELP(mssnapr_ISnapIn_NodeTypeName)
        ]
        HRESULT _stdcall NodeTypeName([out, retval] BSTR *pbstrName);

        //
        // NodeTypeGUID
        //
        [
            id(DISPID_SNAPIN_NODE_TYPE_GUID),
            propget,
            nonbrowsable,
            HELP(mssnapr_ISnapIn_NodeTypeGUID)
        ]
        HRESULT _stdcall NodeTypeGUID([out, retval] BSTR *pbstrGUID);

        //
        // DisplayName
        //
        [
            id(DISPID_SNAPIN_DISPLAY_NAME),
            propput,
            HELP(mssnapr_ISnapIn_DisplayName)
        ]
        HRESULT _stdcall DisplayName([in] BSTR bstrName);

        [
            id(DISPID_SNAPIN_DISPLAY_NAME),
            propget,
            HELP(mssnapr_ISnapIn_DisplayName)
        ]
        HRESULT _stdcall DisplayName([out, retval] BSTR *pbstrName);

        //
        // Type
        //
        [
            id(DISPID_SNAPIN_TYPE),
            propput,
            HELP(mssnapr_ISnapIn_Type)
        ]
        HRESULT _stdcall Type([in] SnapInTypeConstants Type);

        [
            id(DISPID_SNAPIN_TYPE),
            propget,
            HELP(mssnapr_ISnapIn_Type)
        ]
        HRESULT _stdcall Type([out, retval] SnapInTypeConstants *pType);

        //
        // HelpFile
        //
        [
            id(DISPID_SNAPIN_HELP_FILE),
            propput,
            HELP(mssnapr_ISnapIn_HelpFile)
        ]
        HRESULT _stdcall HelpFile([in] BSTR bstrFileName);

        [
            id(DISPID_SNAPIN_HELP_FILE),
            propget,
            HELP(mssnapr_ISnapIn_HelpFile)
        ]
        HRESULT _stdcall HelpFile([out, retval] BSTR *pbstrFileName);

        //
        // LinkedTopics
        //
        [
            id(DISPID_SNAPIN_LINKED_TOPICS),
            propput,
            HELP(mssnapr_ISnapIn_LinkedTopics)
        ]
        HRESULT _stdcall LinkedTopics([in] BSTR bstrTopics);

        [
            id(DISPID_SNAPIN_LINKED_TOPICS),
            propget,
            HELP(mssnapr_ISnapIn_LinkedTopics)
        ]
        HRESULT _stdcall LinkedTopics([out, retval] BSTR *pbstrTopics);

        //
        // Description
        //
        [
            id(DISPID_SNAPIN_DESCRIPTION),
            propput,
            HELP(mssnapr_ISnapIn_Description)
        ]
        HRESULT _stdcall Description([in] BSTR bstrDescription);

        [
            id(DISPID_SNAPIN_DESCRIPTION),
            propget,
            HELP(mssnapr_ISnapIn_Description)
        ]
        HRESULT _stdcall Description([out, retval] BSTR *pbstrDescription);

        //
        // Provider
        //
        [
            id(DISPID_SNAPIN_PROVIDER),
            propput,
            HELP(mssnapr_ISnapIn_Provider)
        ]
        HRESULT _stdcall Provider([in] BSTR bstrProvider);

        [
            id(DISPID_SNAPIN_PROVIDER),
            propget,
            HELP(mssnapr_ISnapIn_Provider)
        ]
        HRESULT _stdcall Provider([out, retval] BSTR *pbstrProvider);

        //
        // Version
        //
        [
            id(DISPID_SNAPIN_VERSION),
            propput,
            HELP(mssnapr_ISnapIn_Version)
        ]
        HRESULT _stdcall Version([in] BSTR bstrVersion);

        [
            id(DISPID_SNAPIN_VERSION),
            propget,
            HELP(mssnapr_ISnapIn_Version)
        ]
        HRESULT _stdcall Version([out, retval] BSTR *pbstrVersion);

        //
        // SmallFolders
        //
        [
            id(DISPID_SNAPIN_SMALL_FOLDERS),
            propputref,
            HELP(mssnapr_ISnapIn_SmallFolders)
        ]
        HRESULT _stdcall SmallFolders([in] MMCImageList *pMMCImageList);

        [
            id(DISPID_SNAPIN_SMALL_FOLDERS),
            propget,
            HELP(mssnapr_ISnapIn_SmallFolders)
        ]
        HRESULT _stdcall SmallFolders([out, retval] MMCImageList **ppMMCImageList);

        //
        // SmallFoldersOpen
        //
        [
            id(DISPID_SNAPIN_SMALL_FOLDERS_OPEN),
            propputref,
            HELP(mssnapr_ISnapIn_SmallFoldersOpen)
        ]
        HRESULT _stdcall SmallFoldersOpen([in] MMCImageList *pMMCImageList);

        [
            id(DISPID_SNAPIN_SMALL_FOLDERS_OPEN),
            propget,
            HELP(mssnapr_ISnapIn_SmallFoldersOpen)
        ]
        HRESULT _stdcall SmallFoldersOpen([out, retval] MMCImageList **ppMMCImageList);

        //
        // LargeFolders
        //
        [
            id(DISPID_SNAPIN_LARGE_FOLDERS),
            propputref,
            HELP(mssnapr_ISnapIn_LargeFolders)
        ]
        HRESULT _stdcall LargeFolders([in] MMCImageList *pMMCImageList);

        [
            id(DISPID_SNAPIN_LARGE_FOLDERS),
            propget,
            HELP(mssnapr_ISnapIn_LargeFolders)
        ]
        HRESULT _stdcall LargeFolders([out, retval] MMCImageList **ppMMCImageList);

        //
        // Icon
        //
        [
            id(DISPID_SNAPIN_ICON),
            propputref,
            HELP(mssnapr_ISnapIn_Icon)
        ]
        HRESULT _stdcall Icon([in] IPictureDisp* piPictureDisp);

        [
            id(DISPID_SNAPIN_ICON),
            propget,
            HELP(mssnapr_ISnapIn_Icon)
        ]
        HRESULT _stdcall Icon([out, retval] IPictureDisp **ppiPictureDisp);

        //
        // Watermark
        //
        [
            id(DISPID_SNAPIN_WATERMARK),
            propputref,
            HELP(mssnapr_ISnapIn_Watermark)
        ]
        HRESULT _stdcall Watermark([in] IPictureDisp* piPictureDisp);

        [
            id(DISPID_SNAPIN_WATERMARK),
            propget,
            HELP(mssnapr_ISnapIn_Watermark)
        ]
        HRESULT _stdcall Watermark([out, retval] IPictureDisp **ppiPictureDisp);

        //
        // Header
        //
        [
            id(DISPID_SNAPIN_HEADER),
            propputref,
            HELP(mssnapr_ISnapIn_Header)
        ]
        HRESULT _stdcall Header([in] IPictureDisp* piPictureDisp);

        [
            id(DISPID_SNAPIN_HEADER),
            propget,
            HELP(mssnapr_ISnapIn_Header)
        ]
        HRESULT _stdcall Header([out, retval] IPictureDisp **ppiPictureDisp);

        //
        // Palette
        //
        [
            id(DISPID_SNAPIN_PALETTE),
            propputref,
            HELP(mssnapr_ISnapIn_Palette)
        ]
        HRESULT _stdcall Palette([in] IPictureDisp* piPictureDisp);

        [
            id(DISPID_SNAPIN_PALETTE),
            propget,
            HELP(mssnapr_ISnapIn_Palette)
        ]
        HRESULT _stdcall Palette([out, retval] IPictureDisp **ppiPictureDisp);

        //
        // StretchWatermark
        //
        [
            id(DISPID_SNAPIN_STRETCH_WATERMARK),
            propput,
            HELP(mssnapr_ISnapIn_StretchWatermark)
        ]
        HRESULT _stdcall StretchWatermark([in] VARIANT_BOOL pfvarStretch);

        [
            id(DISPID_SNAPIN_STRETCH_WATERMARK),
            propget,
            HELP(mssnapr_ISnapIn_StretchWatermark)
        ]
        HRESULT _stdcall StretchWatermark([out, retval] VARIANT_BOOL *pfvarStretch);

        //
        // StaticFolder
        //
        [
            id(DISPID_SNAPIN_STATIC_FOLDER),
            propput,
            HELP(mssnapr_ISnapIn_StaticFolder)
        ]
        HRESULT _stdcall StaticFolder([in] VARIANT varIndex);

        [
            id(DISPID_SNAPIN_STATIC_FOLDER),
            propget,
            HELP(mssnapr_ISnapIn_StaticFolder)
        ]
        HRESULT _stdcall StaticFolder([out, retval] VARIANT *pvarIndex);

        //
        // ScopeItems
        //
        [
            id(DISPID_SNAPIN_SCOPEITEMS),
            propget,
            source,
            nonbrowsable,
            HELP(mssnapr_ISnapIn_ScopeItems)
        ]
        HRESULT _stdcall ScopeItems([out, retval] ScopeItems **ppScopeItems);

        //
        // Views
        //
        [
            id(DISPID_SNAPIN_VIEWS),
            propget,
            source,
            nonbrowsable,
            HELP(mssnapr_ISnapIn_Views)
        ]
        HRESULT _stdcall Views([out, retval] Views **ppViews);

        //
        // ExtensionSnapIn
        //
        [
            id(DISPID_SNAPIN_EXTENSION_SNAPIN),
            propget,
            source,
            nonbrowsable,
            HELP(mssnapr_ISnapIn_ExtensionSnapIn)
        ]
        HRESULT _stdcall ExtensionSnapIn([out, retval] ExtensionSnapIn **ppExtensionSnapIn);

        //
        // ScopePaneItems
        //
        [
            id(DISPID_SNAPIN_SCOPE_PANE_ITEMS),
            propget,
            source,
            nonbrowsable,
            hidden
        ]
        HRESULT _stdcall ScopePaneItems([out, retval] ScopePaneItems **ppScopePaneItems);

        //
        // ResultViews
        //
        [
            id(DISPID_SNAPIN_RESULT_VIEWS),
            propget,
            source,
            nonbrowsable,
            hidden
        ]
        HRESULT _stdcall ResultViews([out, retval] ResultViews **ppResultViews);

        //
        // RuntimeMode
        //

        [
            id(DISPID_SNAPIN_RUNTIME_MODE),
            propget,
            nonbrowsable,
            HELP(mssnapr_ISnapIn_RuntimeMode)
        ]
        HRESULT _stdcall RuntimeMode([out, retval] SnapInRuntimeModeConstants *pMode);

        //
        // TaskpadViewPreferred
        //
        [
            id(DISPID_SNAPIN_TASKPAD_VIEW_PREFERRED),
            propget,
            nonbrowsable,
            HELP(mssnapr_ISnapIn_TaskpadViewPreferred)
        ]
        HRESULT _stdcall TaskpadViewPreferred([out, retval] VARIANT_BOOL *pfPreferred);

        //
        // RequiredExtensions
        //
        [
            id(DISPID_SNAPIN_REQUIRED_EXTENSIONS),
            propget,
            nonbrowsable,
            HELP(mssnapr_ISnapIn_RequiredExtensions)
        ]
        HRESULT _stdcall RequiredExtensions([out, retval] Extensions **ppExtensions);

        //
        // Clipboard
        //
        [
            id(DISPID_SNAPIN_CLIPBOARD),
            propget,
            nonbrowsable,
            HELP(mssnapr_ISnapIn_Clipboard)
        ]
        HRESULT _stdcall Clipboard([out, retval] MMCClipboard **ppMMCClipboard);

        //
        // Preload
        //
        [
            id(DISPID_SNAPIN_PRELOAD),
            propput,
            HELP(mssnapr_ISnapIn_Preload)
        ]
        HRESULT _stdcall Preload([in] VARIANT_BOOL fPreload);

        [
            id(DISPID_SNAPIN_PRELOAD),
            propget,
            HELP(mssnapr_ISnapIn_Preload)
        ]
        HRESULT _stdcall Preload([out, retval] VARIANT_BOOL *pfPreload);

        //
        // StringTable
        //
        [
            id(DISPID_SNAPIN_STRINGTABLE),
            propget,
            nonbrowsable,
            HELP(mssnapr_ISnapIn_StringTable)
        ]
        HRESULT _stdcall StringTable([out, retval] MMCStringTable **ppStringTable);

        //
        // CurrentView
        //
        [
            id(DISPID_SNAPIN_CURRENT_VIEW),
            propget,
            nonbrowsable,
            HELP(mssnapr_ISnapIn_CurrentView)
        ]
        HRESULT _stdcall CurrentView([out, retval] View **ppView);

        //
        // CurrentScopePaneItem
        //
        [
            id(DISPID_SNAPIN_CURRENT_SCOPEPANEITEM),
            propget,
            nonbrowsable,
            HELP(mssnapr_ISnapIn_CurrentScopePaneItem)
        ]
        HRESULT _stdcall CurrentScopePaneItem([out, retval] ScopePaneItem **ppScopePaneItem);

        //
        // CurrentScopeItem
        //
        [
            id(DISPID_SNAPIN_CURRENT_SCOPEITEM),
            propget,
            nonbrowsable,
            HELP(mssnapr_ISnapIn_CurrentScopeItem)
        ]
        HRESULT _stdcall CurrentScopeItem([out, retval] ScopeItem **ppScopeItem);

        //
        // CurrentResultView
        //
        [
            id(DISPID_SNAPIN_CURRENT_RESULTVIEW),
            propget,
            nonbrowsable,
            HELP(mssnapr_ISnapIn_CurrentResultView)
        ]
        HRESULT _stdcall CurrentResultView([out, retval] ResultView **ppResultView);

        //
        // CurrentListView
        //
        [
            id(DISPID_SNAPIN_CURRENT_LISTVIEW),
            propget,
            nonbrowsable,
            HELP(mssnapr_ISnapIn_CurrentListView)
        ]
        HRESULT _stdcall CurrentListView([out, retval] MMCListView **ppListView);

        //
        // MMCCommandLine
        //
        [
            id(DISPID_SNAPIN_MMC_COMMAND_LINE),
            propget,
            nonbrowsable,
            HELP(mssnapr_ISnapIn_MMCCommandLine)
        ]
        HRESULT _stdcall MMCCommandLine([out, retval] BSTR *pbstrCmdLine);

        // methods:

        //
        // ConsoleMsgBox
        //
        [
            id(DISPID_SNAPIN_CONSOLE_MSGBOX),
            HELP(mssnapr_ISnapIn_ConsoleMsgBox)
        ]
        HRESULT _stdcall ConsoleMsgBox([in]           BSTR     Prompt,
                                       [in, optional] VARIANT  Buttons,
                                       [in, optional] VARIANT  Title,
                                       [out, retval]  int     *pnResult);

        //
        // ShowHelpTopic
        //
        [
            id(DISPID_SNAPIN_SHOW_HELP_TOPIC),
            HELP(mssnapr_ISnapIn_ShowHelpTopic)
        ]
        HRESULT _stdcall ShowHelpTopic([in] BSTR Topic);

        //
        // Trace
        //
        [
            id(DISPID_SNAPIN_TRACE),
            HELP(mssnapr_ISnapIn_Trace)
        ]
        HRESULT _stdcall Trace([in] BSTR Message);

        //
        // FireConfigComplete
        //
        // This hidden/restricted method is used in the property page wrapper
        // for configuration wizards. The wrapper has a marhsaled IDispatch
        // on the snap-in and it needs a way to tell the snap-in that the user
        // clicked the Finish button.
        //
        [
            id(DISPID_SNAPIN_FIRE_CONFIG_COMPLETE),
            hidden,
            restricted
        ]
        HRESULT _stdcall FireConfigComplete([in] IDispatch *pdispConfigObject);

        //
        // FormatData
        //
        [
            id(DISPID_SNAPIN_FORMAT_DATA),
            HELP(mssnapr_ISnapIn_FormatData)
        ]
        HRESULT _stdcall FormatData(
                   [in]                VARIANT                Data,
                   [in]                long                   StartingIndex,
                   [in]                SnapInFormatConstants  Format,
                   [optional, in, out] VARIANT               *BytesUsed,
                   [out, retval]       VARIANT               *pvarFormattedData);

    };

    [
        uuid(56283303-09E8-11d2-9792-F43920524153),
        hidden,
        HELP(mssnapr_DSnapInEvents)
    ]
    dispinterface DSnapInEvents
    {
        properties:

        methods:

        //
        // Load
        //
        [
            id(DISPID_SNAPIN_EVENT_LOAD),
            HELP(mssnapr_DSnapInEvents_Load)
        ]
        void Load();

        //
        // Unload
        //
        [
            id(DISPID_SNAPIN_EVENT_UNLOAD),
            HELP(mssnapr_DSnapInEvents_Unload)
        ]
        void Unload();

        //
        // Help
        //
        [
            id(DISPID_SNAPIN_EVENT_HELP),
            HELP(mssnapr_DSnapInEvents_Help)
        ]
        void Help();

        //
        // WriteProperties
        //
        [
            id(DISPID_SNAPIN_EVENT_WRITE_PROPERTIES),
            HELP(mssnapr_DSnapInEvents_WriteProperties)
        ]
        void WriteProperties([in] PropertyBag *PropertyBag);

        //
        // ReadProperties
        //
        [
            id(DISPID_SNAPIN_EVENT_READ_PROPERTIES),
            HELP(mssnapr_DSnapInEvents_ReadProperties)
        ]
        void ReadProperties([in] PropertyBag *PropertyBag);

        //
        // QueryConfigurationWizard
        //
        [
            id(DISPID_SNAPIN_EVENT_QUERY_CONFIGURATION_WIZARD),
            HELP(mssnapr_DSnapInEvents_QueryConfigurationWizard)
        ]
        void QueryConfigurationWizard([in, out] VARIANT_BOOL *HaveWizard);

        //
        // CreateConfigurationWizard
        //
        [
            id(DISPID_SNAPIN_EVENT_CREATE_CONFIGURATION_WIZARD),
            HELP(mssnapr_DSnapInEvents_CreateConfigurationWizard)
        ]
        void CreateConfigurationWizard([in] MMCPropertySheet *PropertySheet);

        //
        // ConfigurationComplete
        //
        [
            id(DISPID_SNAPIN_EVENT_CONFIGURATION_COMPLETE),
            HELP(mssnapr_DSnapInEvents_ConfigurationComplete)
        ]
        void ConfigurationComplete([in] IDispatch *ConfigurationObject);

        //
        // Preload
        //
        [
            id(DISPID_SNAPIN_EVENT_PRELOAD),
            HELP(mssnapr_DSnapInEvents_Preload)
        ]
        void Preload();
    };

    [
        uuid(9C415910-C8C1-11d1-B447-2A9646000000),
        HELP(mssnapr_SnapIn)
    ]
    coclass SnapIn
    {
        [default] interface ISnapIn;
        [default, source] dispinterface DSnapInEvents;
    };

    //=---------------------------------------------------------------------=
    //                         ExtensionSnapIn Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(22812B11-F637-11d1-977E-CE9020524153),
        dual,
        oleautomation,
        nonextensible,
        hidden,
        HELP(mssnapr_IExtensionSnapIn)
    ]
    interface IExtensionSnapIn : IDispatch
    {
        // properties:

        // methods:

        // This empty interface is here as a place holder so that VB can sink
        // the object. We need some unique interface to return when VB gets the
        // SnapIn.ExtensionSnapIn property.
    };

    [
        uuid(22812B12-F637-11d1-977E-CE9020524153),
        hidden,
        HELP(mssnapr_DExtensionSnapInEvents)
    ]
    dispinterface DExtensionSnapInEvents
    {
        properties:

        methods:

        //
        // Expand
        //
        [
            id(DISPID_EXTENSIONSNAPIN_EVENT_EXPAND),
            HELP(mssnapr_DExtensionSnapInEvents_Expand)
        ]
        void Expand([in] MMCDataObject *Data,
                    [in] ScopeNode     *ScopeNode);

        //
        // ExpandSync
        //
        [
            id(DISPID_EXTENSIONSNAPIN_EVENT_EXPAND_SYNC),
            HELP(mssnapr_DExtensionSnapInEvents_ExpandSync)
        ]
        void ExpandSync([in] MMCDataObject     *Data,
                        [in] ScopeNode         *ScopeNode,
                        [in, out] VARIANT_BOOL *Handled);

        //
        // Collapse
        //
        [
            id(DISPID_EXTENSIONSNAPIN_EVENT_COLLAPSE),
            HELP(mssnapr_DExtensionSnapInEvents_Collapse)
        ]
        void Collapse([in] MMCDataObject *Data,
                      [in] ScopeNode     *ScopeNode);

        //
        // CollapseSync
        //
        [
            id(DISPID_EXTENSIONSNAPIN_EVENT_COLLAPSE_SYNC),
            HELP(mssnapr_DExtensionSnapInEvents_CollapseSync)
        ]
        void CollapseSync([in] MMCDataObject     *Data,
                          [in] ScopeNode         *ScopeNode,
                          [in, out] VARIANT_BOOL *Handled);

        //
        // SetControlbar
        //
        [
            id(DISPID_EXTENSIONSNAPIN_EVENT_SET_CONTROLBAR),
            HELP(mssnapr_DExtensionSnapInEvents_SetControlbar)
        ]
        void SetControlbar([in] IMMCControlbar *Controlbar);

        //
        // UpdateControlbar
        //
        [
            id(DISPID_EXTENSIONSNAPIN_EVENT_UPDATE_CONTROLBAR),
            HELP(mssnapr_DExtensionSnapInEvents_UpdateControlbar)
        ]
        void UpdateControlbar([in] VARIANT_BOOL     SelectionInScopePane,
                              [in] VARIANT_BOOL     Selected,
                              [in] MMCDataObjects  *DataObjects,
                              [in] MMCControlbar   *Controlbar);

        //
        // AddNewMenuItems
        //
        [
            id(DISPID_EXTENSIONSNAPIN_EVENT_ADD_NEW_MENU_ITEMS),
            HELP(mssnapr_DExtensionSnapInEvents_AddNewMenuItems)
        ]
        void AddNewMenuItems([in] MMCDataObjects *DataObjects,
                             [in] ContextMenu    *ContextMenu);

        //
        // AddTaskMenuItems
        //
        [
            id(DISPID_EXTENSIONSNAPIN_EVENT_ADD_TASK_MENU_ITEMS),
            HELP(mssnapr_DExtensionSnapInEvents_AddTaskMenuItems)
        ]
        void AddTaskMenuItems([in] MMCDataObjects *DataObjects,
                              [in] ContextMenu    *ContextMenu);

        //
        // CreatePropertyPages
        //
        [
            id(DISPID_EXTENSIONSNAPIN_EVENT_CREATE_PROPERTY_PAGES),
            HELP(mssnapr_DExtensionSnapInEvents_CreatePropertyPages)
        ]
        void CreatePropertyPages([in] MMCDataObject    *DataObject,
                                 [in] MMCPropertySheet *PropertySheet);

        //
        // AddTasks
        //
        [
            id(DISPID_EXTENSIONSNAPIN_EVENT_ADD_TASKS),
            HELP(mssnapr_DExtensionSnapInEvents_AddTasks)
        ]
        void AddTasks([in] MMCDataObject *DataObject,
                      [in] BSTR           GroupName,
                      [in] Tasks         *Tasks);

        //
        // TaskClick
        //
        [
            id(DISPID_EXTENSIONSNAPIN_EVENT_TASK_CLICK),
            HELP(mssnapr_DExtensionSnapInEvents_TaskClick)
        ]
        void TaskClick([in] MMCDataObject *DataObject,
                       [in] Task          *Task);
    };

    [
        uuid(22812B13-F637-11d1-977E-CE9020524153),
        HELP(mssnapr_ExtensionSnapIn)
    ]
    coclass ExtensionSnapIn
    {
        [default] interface IExtensionSnapIn;
        [default, source] dispinterface DExtensionSnapInEvents;
    };


    //=---------------------------------------------------------------------=
    //                         ScopeItems Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(9C415911-C8C1-11d1-B447-2A9646000000),
        dual,
        oleautomation,
        nonextensible,
        hidden,
        HELP(mssnapr_IScopeItems)
    ]
    interface IScopeItems : IDispatch
    {
        // properties:

        //
        // Count
        //
        [
            id(DISPID_SCOPEITEMS_COUNT),
            propget,
            HELP(mssnapr_IScopeItems_Count)
        ]
        HRESULT _stdcall Count([out, retval] long *plCount);

        //
        // Item
        //
        [
            id(DISPID_VALUE),
            propget,
            HELP(mssnapr_IScopeItems_Item)
        ]
        HRESULT _stdcall Item([in] VARIANT Index,
                              [out, retval] ScopeItem **ppScopeItem);

        //
        // NewEnum
        //
        [
            id(DISPID_NEWENUM),
            propget,
            hidden
        ]
        HRESULT _NewEnum([out, retval] IUnknown **ppunkEnum);

        // methods:

        //
        // Add
        //
        [
            id(DISPID_SCOPEITEMS_ADD),
            HELP(mssnapr_IScopeItems_Add)
        ]
        HRESULT _stdcall Add([in] BSTR                              Key,
                             [in] ScopeNode                        *ScopeNodeRelative,
                             [in] SnapInNodeRelationshipConstants   RelativeRelationship,
                             [in, optional] VARIANT                 HasChildren,
                             [out, retval] ScopeItem              **ppScopeItem);

        //
        // AddPreDefined
        //
        [
            id(DISPID_SCOPEITEMS_ADD_PREDEFINED),
            HELP(mssnapr_IScopeItems_AddPreDefined)
        ]
        HRESULT _stdcall AddPreDefined([in] BSTR                              NodeTypeName,
                                       [in] BSTR                              Key,
                                       [in] ScopeNode                        *ScopeNodeRelative,
                                       [in] SnapInNodeRelationshipConstants   RelativeRelationship,
                                       [in, optional] VARIANT                 HasChildren,
                                       [out, retval] ScopeItem              **ppScopeItem);

        //
        // Remove
        //
        [
            id(DISPID_SCOPEITEMS_REMOVE),
            HELP(mssnapr_IScopeItems_Remove)
        ]
        HRESULT _stdcall Remove([in] BSTR Key);

    };

    [
        uuid(302961E1-C8E9-11d1-B449-704B8F000000),
        hidden,
        HELP(mssnapr_DScopeItemsEvents),
    ]
    dispinterface DScopeItemsEvents
    {
        properties:

        methods:

        //
        // Initialize
        //
        [
            id(DISPID_SCOPEITEMS_EVENT_INITIALIZE),
            HELP(mssnapr_DScopeItemsEvents_Initialize)
        ]
        void Initialize([in] ScopeItem *ScopeItem);

        //
        // Terminate
        //
        [
            id(DISPID_SCOPEITEMS_EVENT_TERMINATE),
            HELP(mssnapr_DScopeItemsEvents_Terminate)
        ]
        void Terminate([in] ScopeItem *ScopeItem);

        //
        // Expand
        //
        [
            id(DISPID_SCOPEITEMS_EVENT_EXPAND),
            HELP(mssnapr_DScopeItemsEvents_Expand)
        ]
        void Expand([in] ScopeItem *ScopeItem);

        //
        // Collapse
        //
        [
            id(DISPID_SCOPEITEMS_EVENT_COLLAPSE),
            HELP(mssnapr_DScopeItemsEvents_Collapse)
        ]
        void Collapse([in] ScopeItem *ScopeItem);

        //
        // ExpandSync
        //
        [
            id(DISPID_SCOPEITEMS_EVENT_EXPAND_SYNC),
            HELP(mssnapr_DScopeItemsEvents_ExpandSync)
        ]
        void ExpandSync([in] ScopeItem         *ScopeItem,
                        [in, out] VARIANT_BOOL *Handled);

        //
        // CollapseSync
        //
        [
            id(DISPID_SCOPEITEMS_EVENT_COLLAPSE_SYNC),
            HELP(mssnapr_DScopeItemsEvents_CollapseSync)
        ]
        void CollapseSync([in] ScopeItem *ScopeItem);

        //
        // Rename
        //
        [
            id(DISPID_SCOPEITEMS_EVENT_RENAME),
            HELP(mssnapr_DScopeItemsEvents_Rename)
        ]
        void Rename([in] ScopeItem *ScopeItem,
                    [in] BSTR       NewName);

        //
        // RemoveChildren
        //
        [
            id(DISPID_SCOPEITEMS_EVENT_REMOVE_CHILDREN),
            HELP(mssnapr_DScopeItemsEvents_RemoveChildren)
        ]
        void RemoveChildren([in] ScopeNode *ScopeNode);

        //
        // Help
        //
        [
            id(DISPID_SCOPEITEMS_EVENT_HELP),
            HELP(mssnapr_DScopeItemsEvents_Help)
        ]
        void Help([in] ScopeItem *ScopeItem);

        //
        // PropertyChanged
        //
        [
            id(DISPID_SCOPEITEMS_EVENT_PROPERTY_CHANGED),
            HELP(mssnapr_DScopeItemsEvents_PropertyChanged)
        ]
        void PropertyChanged([in] ScopeItem *ScopeItem,
                             [in] VARIANT    Data);
    };

    [
        uuid(302961E2-C8E9-11d1-B449-704B8F000000),
        HELP(mssnapr_ScopeItems)
    ]
    coclass ScopeItems
    {
        [default] interface IScopeItems;
        [default, source] dispinterface DScopeItemsEvents;
    };

    //=---------------------------------------------------------------------=
    //                         ScopeItem Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(87BC1800-C8FB-11d1-B44A-30F4BC000000),
        dual,
        oleautomation,
        nonextensible,
        hidden,
        HELP(mssnapr_IScopeItem)
    ]
    interface IScopeItem : IDispatch
    {
        // properties:

        //
        // Name
        //
        [
            id(DISPID_VALUE),
            propget,
            HELP(mssnapr_IScopeItem_Name)
        ]
        HRESULT _stdcall Name([out, retval] BSTR *pbstrName);

        [
            id(DISPID_VALUE),
            propput,
            HELP(mssnapr_IScopeItem_Name)
        ]
        HRESULT _stdcall Name([in] BSTR bstrName);

        //
        // Index
        //
        [
            id(DISPID_SCOPEITEM_INDEX),
            propget,
            HELP(mssnapr_IScopeItem_Index)
        ]
        HRESULT Index([out, retval] long *plIndex);

        [
            id(DISPID_SCOPEITEM_INDEX),
            propput,
            hidden,
            restricted
        ]
        HRESULT Index([in] long lIndex);

        //
        // Key
        //
        [
            id(DISPID_SCOPEITEM_KEY),
            propget,
            HELP(mssnapr_IScopeItem_Key)
        ]
        HRESULT Key([out, retval] BSTR *pbstrKey);

        [
            id(DISPID_SCOPEITEM_KEY),
            propput,
            HELP(mssnapr_IScopeItem_Key)
        ]
        HRESULT Key([in] BSTR bstrKey);

        //
        // Folder
        //
        [
            id(DISPID_SCOPEITEM_FOLDER),
            propget,
            HELP(mssnapr_IScopeItem_Folder)
        ]
        HRESULT _stdcall Folder([out, retval] VARIANT *pfolder);

        [
            id(DISPID_SCOPEITEM_FOLDER),
            propput,
            HELP(mssnapr_IScopeItem_Folder)
        ]
        HRESULT _stdcall Folder([in] VARIANT folder);

        //
        // Data
        //
        [
            id(DISPID_SCOPEITEM_DATA),
            propget,
            nonbrowsable,
            HELP(mssnapr_IScopeItem_Data)
        ]
        HRESULT _stdcall Data([out, retval] MMCDataObject **ppMMCDataObject);

#if defined(USING_SNAPINDATA)

        //
        // DefaultDataFormat
        //
        [
            id(DISPID_SCOPEITEM_DEFAULT_DATA_FORMAT),
            propget,
            HELP(mssnapr_IScopeItem_DefaultDataFormat)
        ]
        HRESULT _stdcall DefaultDataFormat([out, retval] BSTR *pbstrDefaultDataFormat);

        [
            id(DISPID_SCOPEITEM_DEFAULT_DATA_FORMAT),
            propput,
            HELP(mssnapr_IScopeItem_DefaultDataFormat)
        ]
        HRESULT _stdcall DefaultDataFormat([in] BSTR bstrDefaultDataFormat);

#endif
        //
        // DynamicExtensions
        //
        [
            id(DISPID_SCOPEITEM_DYNAMIC_EXTENSIONS),
            propget,
            nonbrowsable,
            HELP(mssnapr_IScopeItem_DynamicExtensions)
        ]
        HRESULT _stdcall DynamicExtensions([out, retval] Extensions **ppExtensions);


        //
        // SlowRetrieval
        //
        [
            id(DISPID_SCOPEITEM_SLOW_RETRIEVAL),
            propget,
            HELP(mssnapr_IScopeItem_SlowRetrieval)
        ]
        HRESULT _stdcall SlowRetrieval([out, retval] VARIANT_BOOL *pfvarSlowRetrieval);

        [
            id(DISPID_SCOPEITEM_SLOW_RETRIEVAL),
            propput,
            HELP(mssnapr_IScopeItem_SlowRetrieval)
        ]
        HRESULT _stdcall SlowRetrieval([in] VARIANT_BOOL fPreserve);

        //
        // NodeID
        //
        [
            id(DISPID_SCOPEITEM_NODE_ID),
            propget,
            HELP(mssnapr_IScopeItem_NodeID)
        ]
        HRESULT NodeID([out, retval] BSTR *pbstrNodeID);

        [
            id(DISPID_SCOPEITEM_NODE_ID),
            propput,
            HELP(mssnapr_IScopeItem_NodeID)
        ]
        HRESULT NodeID([in] BSTR bstrNodeID);

        //
        // Tag
        //
        [
            id(DISPID_SCOPEITEM_TAG),
            propget,
            nonbrowsable,
            HELP(mssnapr_IScopeItem_Tag)
        ]
        HRESULT Tag([out, retval] VARIANT *pvarTag);

        [
            id(DISPID_SCOPEITEM_TAG),
            propput,
            nonbrowsable,
            HELP(mssnapr_IScopeItem_Tag)
        ]
        HRESULT Tag([in] VARIANT varTag);

        [
            id(DISPID_SCOPEITEM_TAG),
            propputref,
            nonbrowsable,
            HELP(mssnapr_IScopeItem_Tag)
        ]
        HRESULT Tag([in] VARIANT varTag);

        //
        // ScopeNode
        //
        [
            id(DISPID_SCOPEITEM_SCOPENODE),
            propget,
            nonbrowsable,
            HELP(mssnapr_IScopeItem_ScopeNode)
        ]
        HRESULT _stdcall ScopeNode([out, retval] ScopeNode **ppScopeNode);

        //
        // Pasted
        //
        [
            id(DISPID_SCOPEITEM_PASTED),
            propget,
            nonbrowsable,
            HELP(mssnapr_IScopeItem_Pasted)
        ]
        HRESULT _stdcall Pasted([out, retval] VARIANT_BOOL *pfOK);

        [
            id(DISPID_SCOPEITEM_PASTED),
            propput,
            nonbrowsable,
            HELP(mssnapr_IScopeItem_Pasted)
        ]
        HRESULT _stdcall Pasted([in] VARIANT_BOOL fOK);

        //
        // ColumnHeaders
        //
        [
            id(DISPID_SCOPEITEM_COLUMN_HEADERS),
            propget,
            HELP(mssnapr_IScopeItem_ColumnHeaders)
        ]
        HRESULT ColumnHeaders([out, retval] MMCColumnHeaders **ppMMCColumnHeaders);

        [
            id(DISPID_SCOPEITEM_COLUMN_HEADERS),
            propputref,
            HELP(mssnapr_IScopeItem_ColumnHeaders)
        ]
        HRESULT ColumnHeaders([in] MMCColumnHeaders *pMMCColumnHeaders);

        //
        // SubItems
        //
        [
            id(DISPID_SCOPEITEM_SUBITEMS),
            propget,
            HELP(mssnapr_IScopeItem_SubItems)
        ]
        HRESULT SubItems([in]short Index, [out, retval] BSTR *pbstrItem);

        [
            id(DISPID_SCOPEITEM_SUBITEMS),
            propput,
            HELP(mssnapr_IScopeItem_SubItems)
        ]
        HRESULT SubItems([in] short Index, [in] BSTR pbstrItem);

        //
        // ListSubItems
        //
        [
            id(DISPID_SCOPEITEM_LIST_SUBITEMS),
            propget,
            HELP(mssnapr_IScopeItem_ListSubItems)
        ]
        HRESULT ListSubItems([out, retval] MMCListSubItems **ppMMCListSubItems);

        [
            id(DISPID_SCOPEITEM_LIST_SUBITEMS),
            propputref,
            HELP(mssnapr_IScopeItem_ListSubItems)
        ]
        HRESULT ListSubItems([in] MMCListSubItems *pMMCListSubItems);

        //
        // Bold
        //
        [
            id(DISPID_SCOPEITEM_BOLD),
            propget,
            hidden,
            restricted
        ]
        HRESULT _stdcall Bold([out, retval] VARIANT_BOOL *pfBold);

        [
            id(DISPID_SCOPEITEM_BOLD),
            propput,
            hidden,
            restricted
        ]
        HRESULT _stdcall Bold([in] VARIANT_BOOL fBold);

        // methods:

        //
        // PropertyChanged
        //
        [
            id(DISPID_SCOPEITEM_PROPERTY_CHANGED),
            HELP(mssnapr_IScopeItem_PropertyChanged)
        ]
        HRESULT PropertyChanged([in] VARIANT Data);

        //
        // RemoveChildren
        //
        [
            id(DISPID_SCOPEITEM_REMOVE_CHILDREN),
            HELP(mssnapr_IScopeItem_RemoveChildren)
        ]
        HRESULT _stdcall RemoveChildren();
    };

    [
        uuid(87BC1801-C8FB-11d1-B44A-30F4BC000000),
        HELP(mssnapr_ScopeItem),
    ]
    coclass ScopeItem
    {
        [default] interface IScopeItem;
    };


    //=---------------------------------------------------------------------=
    //                         ScopeNode Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(22812B18-F637-11d1-977E-CE9020524153),
        dual,
        oleautomation,
        nonextensible,
        hidden,
        HELP(mssnapr_IScopeNode)
    ]
    interface IScopeNode : IDispatch
    {
        // properties:

        //
        // NodeTypeName
        //
        [
            id(DISPID_SCOPENODE_NODE_TYPE_NAME),
            propget,
            nonbrowsable,
            HELP(mssnapr_IScopeNode_NodeTypeName)
        ]
        HRESULT _stdcall NodeTypeName([out, retval] BSTR *pbstrName);

        [
            id(DISPID_SCOPENODE_NODE_TYPE_NAME),
            propput,
            nonbrowsable,
            HELP(mssnapr_IScopeNode_NodeTypeName)
        ]
        HRESULT _stdcall NodeTypeName([in] BSTR bstrName);

        //
        // NodeTypeGUID
        //
        [
            id(DISPID_SCOPENODE_NODE_TYPE_GUID),
            propget,
            nonbrowsable,
            HELP(mssnapr_IScopeNode_NodeTypeGUID)
        ]
        HRESULT _stdcall NodeTypeGUID([out, retval] BSTR *pbstrGUID);

        [
            id(DISPID_SCOPENODE_NODE_TYPE_GUID),
            propput,
            nonbrowsable
        ]
        HRESULT _stdcall NodeTypeGUID([in] BSTR bstrGUID);

        //
        // DisplayName
        //
        [
            id(DISPID_SCOPENODE_DISPLAY_NAME),
            propget,
            nonbrowsable,
            HELP(mssnapr_IScopeNode_DisplayName)
        ]
        HRESULT _stdcall DisplayName([out, retval] BSTR *pbstrName);

        [
            id(DISPID_SCOPENODE_DISPLAY_NAME),
            propput,
            nonbrowsable,
            HELP(mssnapr_IScopeNode_DisplayName)
        ]
        HRESULT _stdcall DisplayName([in] BSTR bstrName);

        //
        // Parent
        //
        [
            id(DISPID_SCOPENODE_PARENT),
            propget,
            nonbrowsable,
            HELP(mssnapr_IScopeNode_Parent)
        ]
        HRESULT _stdcall Parent([out, retval] ScopeNode **ppScopeNode);

        //
        // HasChildren
        //
        [
            id(DISPID_SCOPENODE_HAS_CHILDREN),
            propget,
            nonbrowsable,
            HELP(mssnapr_IScopeNode_HasChildren)
        ]
        HRESULT _stdcall HasChildren([out, retval] VARIANT_BOOL *pfvarHasChildren);

        //
        // HasChildren
        //
        [
            id(DISPID_SCOPENODE_HAS_CHILDREN),
            propput,
            nonbrowsable,
            HELP(mssnapr_IScopeNode_HasChildren)
        ]
        HRESULT _stdcall HasChildren([in] VARIANT_BOOL fvarHasChildren);

        //
        // Child
        //
        [
            id(DISPID_SCOPENODE_CHILD),
            propget,
            nonbrowsable,
            HELP(mssnapr_IScopeNode_Child)
        ]
        HRESULT _stdcall Child([out, retval] ScopeNode **ppScopeNode);

        //
        // FirstSibling
        //
        [
            id(DISPID_SCOPENODE_FIRST_SIBLING),
            propget,
            nonbrowsable,
            HELP(mssnapr_IScopeNode_FirstSibling)
        ]
        HRESULT _stdcall FirstSibling([out, retval] ScopeNode **ppScopeNode);

        //
        // Next
        //
        [
            id(DISPID_SCOPENODE_NEXT),
            propget,
            nonbrowsable,
            HELP(mssnapr_IScopeNode_Next)
        ]
        HRESULT _stdcall Next([out, retval] ScopeNode **ppScopeNode);

        //
        // LastSibling
        //
        [
            id(DISPID_SCOPENODE_LAST_SIBLING),
            propget,
            nonbrowsable,
            HELP(mssnapr_IScopeNode_LastSibling)
        ]
        HRESULT _stdcall LastSibling([out, retval] ScopeNode **ppScopeNode);

        //
        // ExpandedOnce
        //
        [
            id(DISPID_SCOPENODE_EXPANDEDONCE),
            propget,
            nonbrowsable,
            HELP(mssnapr_IScopeNode_ExpandedOnce)
        ]
        HRESULT _stdcall ExpandedOnce([out, retval] VARIANT_BOOL *pfExpandedOnce);


        //
        // Owned
        //
        [
            id(DISPID_SCOPENODE_OWNED),
            propget,
            HELP(mssnapr_IScopeNode_Owned)
        ]
        HRESULT _stdcall Owned([out, retval] VARIANT_BOOL *pfOwned);

        // methods:

        //
        // ExpandInNameSpace
        //
        [
            id(DISPID_SCOPENODE_EXPAND_IN_NAMESPACE),
            HELP(mssnapr_IScopeNode_ExpandInNameSpace)
        ]
        HRESULT _stdcall ExpandInNameSpace();
    };

    [
        uuid(22812B19-F637-11d1-977E-CE9020524153),
        HELP(mssnapr_ScopeNode),
    ]
    coclass ScopeNode
    {
        [default] interface IScopeNode;
    };



    //=---------------------------------------------------------------------=
    //                         Views Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(425A3A30-E5E8-11d1-B459-22CD70000000),
        dual,
        hidden,
        oleautomation,
        nonextensible,
        HELP(mssnapr_IViews)
    ]
    interface IViews : IDispatch
    {
        // properties:

        //
        // Count
        //
        [
            id(DISPID_VIEWS_COUNT),
            propget,
            HELP(mssnapr_IViews_Count)
        ]
        HRESULT _stdcall Count([out, retval] long *plCount);

        //
        // Item
        //
        [
            id(DISPID_VALUE),
            propget,
            HELP(mssnapr_IViews_Item)
        ]
        HRESULT _stdcall Item([in] VARIANT         Index,
                              [out, retval] View **ppView);

        //
        // CurrentView
        //
        [
            id(DISPID_VIEWS_CURRENT_VIEW),
            propget,
            HELP(mssnapr_IViews_CurrentView)
        ]
        HRESULT _stdcall CurrentView([out, retval] View **ppView);

        //
        // NewEnum
        //
        [
            id(DISPID_NEWENUM),
            propget,
            hidden
        ]
        HRESULT _NewEnum([out, retval] IUnknown **ppunkEnum);


        // methods:

        //
        // Add
        //
        [
            id(DISPID_VIEWS_ADD),
            hidden,
            restricted
        ]
        HRESULT Add([optional, in] VARIANT   Index,
                    [optional, in] VARIANT   Key,
                    [out, retval]  IView   **ppiView);
        //
        // Clear
        //
        [
            id(DISPID_VIEWS_CLEAR),
            hidden,
            restricted
        ]
        HRESULT _stdcall Clear();


        //
        // Remove
        //
        [
            id(DISPID_VIEWS_REMOVE),
            hidden,
            restricted
        ]
        HRESULT _stdcall Remove([in] VARIANT Index);
    };

    [
        uuid(425A3A31-E5E8-11d1-B459-22CD70000000),
        hidden,
        HELP(mssnapr_DViewsEvents),
    ]
    dispinterface DViewsEvents
    {
        properties:

        methods:

        //
        // Initialize
        //
        [
            id(DISPID_VIEWS_EVENT_INITIALIZE),
            HELP(mssnapr_DViewsEvents_Initialize)
        ]
        void Initialize([in] View *View);

        //
        // Terminate
        //
        [
            id(DISPID_VIEWS_EVENT_TERMINATE),
            HELP(mssnapr_DViewsEvents_Terminate)
        ]
        void Terminate([in] View *View);

        //
        // Activate
        //
        [
            id(DISPID_VIEWS_EVENT_ACTIVATE),
            HELP(mssnapr_DViewsEvents_Activate)
        ]
        void Activate([in] View *View);

        //
        // Deactivate
        //
        [
            id(DISPID_VIEWS_EVENT_DEACTIVATE),
            HELP(mssnapr_DViewsEvents_Deactivate)
        ]
        void Deactivate([in] View *View);

        //
        // Minimize
        //
        [
            id(DISPID_VIEWS_EVENT_MINIMIZE),
            HELP(mssnapr_DViewsEvents_Minimize)
        ]
        void Minimize([in] View *View);

        //
        // Maximize
        //
        [
            id(DISPID_VIEWS_EVENT_MAXIMIZE),
            HELP(mssnapr_DViewsEvents_Maximize)
        ]
        void Maximize([in] View *View);

        //
        // SetControlbar
        //
        [
            id(DISPID_VIEWS_EVENT_SET_CONTROL_BAR),
            HELP(mssnapr_DViewsEvents_SetControlbar)
        ]
        void SetControlbar([in] View *View, [in] MMCControlbar *Controlbar);

        //
        // UpdateControlBar
        //
        [
            id(DISPID_VIEWS_EVENT_UPDATE_CONTROLBAR),
            HELP(mssnapr_DViewsEvents_UpdateControlbar)
        ]
        void UpdateControlbar([in] View          *View,
                              [in] MMCClipboard  *Selection,
                              [in] VARIANT_BOOL   Selected,
                              [in] MMCControlbar *Controlbar);

        //
        // Select
        //
        [
            id(DISPID_VIEWS_EVENT_SELECT),
            HELP(mssnapr_DViewsEvents_Select)
        ]
        void Select([in] View             *View,
                    [in] MMCClipboard     *Selection,
                    [in] VARIANT_BOOL      Selected,
                    [in] MMCConsoleVerbs  *ConsoleVerbs);

        //
        // AddTopMenuItems
        //
        [
            id(DISPID_VIEWS_EVENT_ADD_TOP_MENU_ITEMS),
            HELP(mssnapr_DViewsEvents_AddTopMenuItems)
        ]
        void AddTopMenuItems([in] View              *View,
                             [in] MMCClipboard      *Selection,
                             [in] ContextMenu       *ContextMenu,
                             [in, out] VARIANT_BOOL *InsertionAllowed);

        //
        // AddNewMenuItems
        //
        [
            id(DISPID_VIEWS_EVENT_ADD_NEW_MENU_ITEMS),
            HELP(mssnapr_DViewsEvents_AddNewMenuItems)
        ]
        void AddNewMenuItems([in] View              *View,
                             [in] MMCClipboard      *Selection,
                             [in] ContextMenu       *ContextMenu,
                             [in, out] VARIANT_BOOL *InsertionAllowed);

        //
        // AddTaskMenuItems
        //
        [
            id(DISPID_VIEWS_EVENT_ADD_TASK_MENU_ITEMS),
            HELP(mssnapr_DViewsEvents_AddTaskMenuItems)
        ]
        void AddTaskMenuItems([in] View              *View,
                              [in] MMCClipboard      *Selection,
                              [in] ContextMenu       *ContextMenu,
                              [in, out] VARIANT_BOOL *InsertionAllowed);

        //
        // AddViewMenuItems
        //
        [
            id(DISPID_VIEWS_EVENT_ADD_VIEW_MENU_ITEMS),
            HELP(mssnapr_DViewsEvents_AddViewMenuItems)
        ]
        void AddViewMenuItems([in] View              *View,
                              [in] MMCClipboard      *Selection,
                              [in] ContextMenu       *ContextMenu,
                              [in, out] VARIANT_BOOL *InsertionAllowed,
                              [in, out] VARIANT_BOOL *AddPredefinedViews);

        //
        // GetMultiSelectData
        //
        [
            id(DISPID_VIEWS_EVENT_GET_MULTISELECT_DATA),
            HELP(mssnapr_DViewsEvents_GetMultiSelectData)
        ]
        void GetMultiSelectData([in] View          *View,
                                [in] MMCClipboard  *Selection,
                                [in] MMCDataObject *Data);

        //
        // QueryPaste
        //
        [
            id(DISPID_VIEWS_EVENT_QUERY_PASTE),
            HELP(mssnapr_DViewsEvents_QueryPaste)
        ]
        void QueryPaste([in] View              *DestView,
                        [in] MMCClipboard      *SourceItems,
                        [in] ScopeItem         *DestScopeItem,
                        [in, out] VARIANT_BOOL *OKToPaste);

        //
        // Paste
        //
        [
            id(DISPID_VIEWS_EVENT_PASTE),
            HELP(mssnapr_DViewsEvents_Paste)
        ]
        void Paste([in] View             *DestView,
                   [in] MMCClipboard     *SourceItems,
                   [in] ScopeItem        *DestScopeItem,
                   [in] MMCDataObject    *RetToSource,
                   [in] VARIANT_BOOL      Move);

        //
        // Cut
        //
        [
            id(DISPID_VIEWS_EVENT_CUT),
            HELP(mssnapr_DViewsEvents_Cut)
        ]
        void Cut([in] View          *View,
                 [in] MMCClipboard  *ItemsPasted,
                 [in] MMCDataObject *RetFromTarget);


        //
        // Delete
        //
        [
            id(DISPID_VIEWS_EVENT_DELETE),
            HELP(mssnapr_DViewsEvents_Delete)
        ]
        void Delete([in] View         *View,
                    [in] MMCClipboard *Selection);

        //
        // QueryPagesFor
        //
        [
            id(DISPID_VIEWS_EVENT_QUERY_PAGES_FOR),
            HELP(mssnapr_DViewsEvents_QueryPagesFor)
        ]
        void QueryPagesFor([in] View              *View,
                           [in] MMCClipboard      *Selection,
                           [in, out] VARIANT_BOOL *HasPropertyPages);

        //
        // CreatePropertyPages
        //
        [
            id(DISPID_VIEWS_EVENT_CREATE_PROPERTY_PAGES),
            HELP(mssnapr_DViewsEvents_CreatePropertyPages)
        ]
        void CreatePropertyPages([in] View             *View,
                                 [in] MMCClipboard     *Selection,
                                 [in] MMCPropertySheet *PropertySheet);

        //
        // Refresh
        //
        [
            id(DISPID_VIEWS_EVENT_REFRESH),
            HELP(mssnapr_DViewsEvents_Refresh)
        ]
        void Refresh([in] View             *View,
                     [in] MMCClipboard *Selection);


        //
        // Print
        //
        [
            id(DISPID_VIEWS_EVENT_PRINT),
            HELP(mssnapr_DViewsEvents_Print)
        ]
        void Print([in] View             *View,
                   [in] MMCClipboard *Selection);


        //
        // SpecialPropertiesClick
        //
        [
            id(DISPID_VIEWS_EVENT_SPECIAL_PROPERTIES_CLICK),
            HELP(mssnapr_DViewsEvents_SpecialPropertiesClick)
        ]
        void SpecialPropertiesClick([in] View                         *View,
                                    [in] SnapInSelectionTypeConstants  ResultViewType);

        //
        // Load
        //
        [
            id(DISPID_VIEWS_EVENT_LOAD),
            HELP(mssnapr_DViewsEvents_Load)
        ]
        void Load([in] View *View);

        //
        // WriteProperties
        //
        [
            id(DISPID_VIEWS_EVENT_WRITE_PROPERTIES),
            HELP(mssnapr_DViewsEvents_WriteProperties)
        ]
        void WriteProperties([in] View *View, [in] PropertyBag *PropertyBag);

        //
        // ReadProperties
        //
        [
            id(DISPID_VIEWS_EVENT_READ_PROPERTIES),
            HELP(mssnapr_DViewsEvents_ReadProperties)
        ]
        void ReadProperties([in] View *View, [in] PropertyBag *PropertyBag);

    };

    [
        uuid(425A3A33-E5E8-11d1-B459-22CD70000000),
        HELP(mssnapr_Views),
        noncreatable
    ]
    coclass Views
    {
        [default] interface IViews;
        [default, source] dispinterface DViewsEvents;
    };

    //=---------------------------------------------------------------------=
    //                         View Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(425A3A34-E5E8-11d1-B459-22CD70000000),
        dual,
        oleautomation,
        nonextensible,
        hidden,
        HELP(mssnapr_IView)
    ]
    interface IView : IDispatch
    {
        // properties:

        //
        // Name
        //
        [
            id(DISPID_VALUE),
            propget,
            HELP(mssnapr_IView_Name)
        ]
        HRESULT _stdcall Name([out, retval] BSTR *pbstrName);

        [
            id(DISPID_VALUE),
            propput,
            HELP(mssnapr_IView_Name)
        ]
        HRESULT _stdcall Name([in] BSTR bstrName);

        //
        // Index
        //
        [
            id(DISPID_VIEW_INDEX),
            propget,
            HELP(mssnapr_IView_Index)
        ]
        HRESULT Index([out, retval] long *plIndex);

        [
            id(DISPID_VIEW_INDEX),
            propput,
            hidden,
            restricted
        ]
        HRESULT Index([in] long lIndex);

        //
        // Key
        //
        [
            id(DISPID_VIEW_KEY),
            propget,
            HELP(mssnapr_IView_Key)
        ]
        HRESULT Key([out, retval] BSTR *pbstrKey);

        [
            id(DISPID_VIEW_KEY),
            propput,
            HELP(mssnapr_IView_Key)
        ]
        HRESULT Key([in] BSTR bstrKey);

        //
        // ScopePaneItems
        //
        [
            id(DISPID_VIEW_SCOPEPANEITEMS),
            propget,
            HELP(mssnapr_IView_ScopePaneItems)
        ]
        HRESULT _stdcall ScopePaneItems([out, retval] IScopePaneItems **ppiScopePaneItems);

        //
        // Caption
        //
        [
            id(DISPID_VIEW_CAPTION),
            propput,
            HELP(mssnapr_IView_Caption)
        ]
        HRESULT _stdcall Caption([in] BSTR bstrCaption);

        [
            id(DISPID_VIEW_CAPTION),
            propget,
            HELP(mssnapr_IView_Caption)
        ]
        HRESULT _stdcall Caption([out, retval] BSTR *pbstrCaption);

        //
        // Tag
        //
        [
            id(DISPID_VIEW_TAG),
            propget,
            HELP(mssnapr_IView_Tag)
        ]
        HRESULT Tag([out, retval] VARIANT *pvarTag);

        [
            id(DISPID_VIEW_TAG),
            propput,
            HELP(mssnapr_IView_Tag)
        ]
        HRESULT Tag([in] VARIANT varTag);

        [
            id(DISPID_VIEW_TAG),
            propputref,
            HELP(mssnapr_IView_Tag)
        ]
        HRESULT Tag([in] VARIANT varTag);

        //
        // ContextMenuProvider
        //
        // IContextMenuProvider does not work in any version of MMC up to 1.2.
        // This was discovered after the code was written but it is left in here
        // as hidden and restricted in case this feature is ever fixed in a
        // future version of MMC.
        [
            id(DISPID_VIEW_CONTEXT_MENU_PROVIDER),
            propget,
            hidden,
            restricted,
            HELP(mssnapr_IView_ContextMenuProvider)
        ]
        HRESULT _stdcall ContextMenuProvider([out, retval] MMCContextMenuProvider **ppMMCContextMenuProvider);

        //
        // PropertySheetProvider
        //
        [
            id(DISPID_VIEW_PROPERTY_SHEET_PROVIDER),
            propget,
            HELP(mssnapr_IView_PropertySheetProvider)
        ]
        HRESULT _stdcall PropertySheetProvider([out, retval] MMCPropertySheetProvider **ppMMCPropertySheetProvider);

        //
        // MMCMajorVersion
        //
        [
            id(DISPID_VIEW_MMC_MAJOR_VERSION),
            propget,
            HELP(mssnapr_IView_MMCMajorVersion)
        ]
        HRESULT _stdcall MMCMajorVersion([out, retval] long *plVersion);

        //
        // MMCMinorVersion
        //
        [
            id(DISPID_VIEW_MMC_MINOR_VERSION),
            propget,
            HELP(mssnapr_IView_MMCMinorVersion)
        ]
        HRESULT _stdcall MMCMinorVersion([out, retval] long *plVersion);

        //
        // ColumnSettings
        //
        [
            id(DISPID_VIEW_COLUMN_SETTINGS),
            propget,
            HELP(mssnapr_IView_ColumnSettings)
        ]
        HRESULT ColumnSettings([in] BSTR ColumnSetID, [out, retval] ColumnSettings **ppColumnSettings);

        //
        // SortSettings
        //
        [
            id(DISPID_VIEW_SORT_SETTINGS),
            propget,
            HELP(mssnapr_IView_SortSettings)
        ]
        HRESULT SortSettings([in] BSTR ColumnSetID, [out, retval] SortKeys **ppSortKeys);

        // methods:

        //
        // SetStatusBarText
        //
        [
            id(DISPID_VIEW_SET_STATUS_BAR_TEXT),
            HELP(mssnapr_IView_SetStatusBarText)
        ]
        HRESULT SetStatusBarText([in] BSTR Text);

        //
        // SelectScopeItem
        //
        [
            id(DISPID_VIEW_SELECT_SCOPE_ITEM),
            HELP(mssnapr_IView_SelectScopeItem)
        ]
        HRESULT SelectScopeItem([in]           ScopeItem *ScopeItem,
                                [in, optional] VARIANT    ViewType,
                                [in, optional] VARIANT    DisplayString);

        //
        // PopupMenu
        //
        [
            id(DISPID_VIEW_POPUP_MENU),
            HELP(mssnapr_IView_PopupMenu)
        ]
        HRESULT PopupMenu([in] MMCMenu *Menu, long Left, long Top);

        //
        // ExpandInTreeView
        //
        [
            id(DISPID_VIEW_EXPAND_IN_TREEVIEW),
            HELP(mssnapr_IView_ExpandInTreeView)
        ]
        HRESULT _stdcall ExpandInTreeView([in] ScopeNode *ScopeNode);

        //
        // CollapseInTreeView
        //
        [
            id(DISPID_VIEW_COLLAPSE_IN_TREEVIEW),
            HELP(mssnapr_IView_CollapseInTreeView)
        ]
        HRESULT _stdcall CollapseInTreeView([in] ScopeNode *ScopeNode);

        //
        // NewWindow
        //
        [
            id(DISPID_VIEW_NEW_WINDOW),
            HELP(mssnapr_IView_NewWindow)
        ]
        HRESULT _stdcall NewWindow([in] ScopeNode                      *ScopeNode,
                                   [in] SnapInNewWindowOptionConstants  Options,
                                   [in, optional] VARIANT               Caption);
    };

    [
        uuid(425A3A35-E5E8-11d1-B459-22CD70000000),
        HELP(mssnapr_View),
    ]
    coclass View
    {
        [default] interface IView;
    };

    //=---------------------------------------------------------------------=
    //                         ScopePaneItems Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(3ADE74B0-E7AC-11d1-B461-D23A1D000000),
        dual,
        hidden,
        oleautomation,
        nonextensible,
        HELP(mssnapr_IScopePaneItems)
    ]
    interface IScopePaneItems : IDispatch
    {
        // properties:

        //
        // Count
        //
        [
            id(DISPID_SCOPEPANEITEMS_COUNT),
            propget,
            HELP(mssnapr_IScopePaneItems_Count)
        ]
        HRESULT _stdcall Count([out, retval] long *plCount);

        //
        // Item
        //
        [
            id(DISPID_VALUE),
            propget,
            HELP(mssnapr_IScopePaneItems_Item)
        ]
        HRESULT _stdcall Item([in] VARIANT                  Index,
                              [out, retval] ScopePaneItem **ppScopePaneItem);

        //
        // SelectedItem
        //
        [
            id(DISPID_SCOPEPANEITEMS_SELECTED_ITEM),
            propget,
            HELP(mssnapr_IScopePaneItems_SelectedItem)
        ]
        HRESULT _stdcall SelectedItem([out, retval] ScopePaneItem **ppScopePaneItem);

        //
        // Parent
        //
        [
            id(DISPID_SCOPEPANEITEMS_PARENT),
            propget,
            HELP(mssnapr_IScopePaneItems_Parent)
        ]
        HRESULT _stdcall Parent([out, retval] View **ppView);

        //
        // NewEnum
        //
        [
            id(DISPID_NEWENUM),
            propget,
            hidden
        ]
        HRESULT _NewEnum([out, retval] IUnknown **ppunkEnum);

        // methods:

    };

    [
        uuid(3ADE74B1-E7AC-11d1-B461-D23A1D000000),
        hidden,
        HELP(mssnapr_DScopePaneItemsEvents),
    ]
    dispinterface DScopePaneItemsEvents
    {
        properties:

        methods:

        //
        // Initialize
        //
        [
            id(DISPID_SCOPEPANEITEMS_EVENT_INITIALIZE),
            HELP(mssnapr_DScopePaneItemsEvents_Initialize)
        ]
        void Initialize([in] ScopePaneItem *ScopePaneItem);

        //
        // Terminate
        //
        [
            id(DISPID_SCOPEPANEITEMS_EVENT_TERMINATE),
            HELP(mssnapr_DScopePaneItemsEvents_Terminate)
        ]
        void Terminate([in] ScopePaneItem *ScopePaneItem);

        //
        // GetResultViewInfo
        //
        [
            id(DISPID_SCOPEPANEITEMS_EVENT_GET_RESULTVIEW_INFO),
            HELP(mssnapr_DScopePaneItemsEvents_GetResultViewInfo)
        ]
        void GetResultViewInfo([in]      ScopePaneItem                 *ScopePaneItem,
                               [in, out] SnapInResultViewTypeConstants *ViewType,
                               [in, out] BSTR                          *DisplayString);

        //
        // GetResultView
        //
        [
            id(DISPID_SCOPEPANEITEMS_EVENT_GET_RESULTVIEW),
            HELP(mssnapr_DScopePaneItemsEvents_GetResultView)
        ]
        void GetResultView([in]      ScopePaneItem *ScopePaneItem,
                           [in, out] VARIANT       *Index);
    };

    [
        uuid(3ADE74B2-E7AC-11d1-B461-D23A1D000000),
        HELP(mssnapr_ScopePaneItems),
        noncreatable
    ]
    coclass ScopePaneItems
    {
        [default] interface IScopePaneItems;
        [default, source] dispinterface DScopePaneItemsEvents;
    };

    //=---------------------------------------------------------------------=
    //                         ScopePaneItem Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(3ADE74B3-E7AC-11d1-B461-D23A1D000000),
        dual,
        hidden,
        oleautomation,
        nonextensible,
        HELP(mssnapr_IScopePaneItem)
    ]
    interface IScopePaneItem : IDispatch
    {
        // properties:

        //
        // Name
        //
        [
            id(DISPID_VALUE),
            propget,
            HELP(mssnapr_IScopePaneItem_Name)
        ]
        HRESULT _stdcall Name([out, retval] BSTR *pbstrName);

        [
            id(DISPID_VALUE),
            propput,
            hidden,
            restricted
        ]
        HRESULT _stdcall Name([in] BSTR bstrName);

        //
        // Index
        //
        [
            id(DISPID_SCOPEPANEITEM_INDEX),
            propget,
            HELP(mssnapr_IScopePaneItem_Name)
        ]
        HRESULT Index([out, retval] long *plIndex);

        [
            id(DISPID_SCOPEPANEITEM_INDEX),
            propput,
            nonbrowsable,
            hidden,
            restricted
        ]
        HRESULT Index([in] long lIndex);

        //
        // Key
        //
        [
            id(DISPID_SCOPEPANEITEM_KEY),
            propget,
            HELP(mssnapr_IScopePaneItem_Key)
        ]
        HRESULT Key([out, retval] BSTR *pbstrKey);

        [
            id(DISPID_SCOPEPANEITEM_KEY),
            propput,
            HELP(mssnapr_IScopePaneItem_Key)
        ]
        HRESULT Key([in] BSTR bstrKey);

        //
        // ScopeItem
        //
        [
            id(DISPID_SCOPEPANEITEM_SCOPEITEM),
            propget,
            nonbrowsable,
            HELP(mssnapr_IScopePaneItem_ScopeItem)
        ]
        HRESULT _stdcall ScopeItem([out, retval] ScopeItem **ppScopeItem);

        //
        // ResultViewType
        //
        [
            id(DISPID_SCOPEPANEITEM_RESULTVIEW_TYPE),
            propget,
            HELP(mssnapr_IScopePaneItem_ResultViewType)
        ]
        HRESULT _stdcall ResultViewType([out, retval] SnapInResultViewTypeConstants *pType);

        [
            id(DISPID_SCOPEPANEITEM_RESULTVIEW_TYPE),
            propput,
            HELP(mssnapr_IScopePaneItem_ResultViewType)
        ]
        HRESULT _stdcall ResultViewType([in] SnapInResultViewTypeConstants Type);

        //
        // DisplayString
        //
        [
            id(DISPID_SCOPEPANEITEM_DISPLAY_STRING),
            propget,
            HELP(mssnapr_IScopePaneItem_DisplayString)
        ]
        HRESULT _stdcall DisplayString([out, retval] BSTR *pbstrDisplayString);

        [
            id(DISPID_SCOPEPANEITEM_DISPLAY_STRING),
            propput,
            HELP(mssnapr_IScopePaneItem_DisplayString)
        ]
        HRESULT _stdcall DisplayString([in] BSTR bstrDisplayString);

        //
        // HasListViews
        //
        [
            id(DISPID_SCOPEPANEITEM_HAS_LISTVIEWS),
            propget,
            nonbrowsable,
            HELP(mssnapr_IScopePaneItem_HasListViews)
        ]
        HRESULT _stdcall HasListViews([out, retval] VARIANT_BOOL *pfHasListViews);

        [
            id(DISPID_SCOPEPANEITEM_HAS_LISTVIEWS),
            propput,
            nonbrowsable,
            HELP(mssnapr_IScopePaneItem_HasListViews)
        ]
        HRESULT _stdcall HasListViews([in] VARIANT_BOOL fHasListViews);

        //
        // ResultView
        //
        [
            id(DISPID_SCOPEPANEITEM_RESULTVIEW),
            propget,
            HELP(mssnapr_IScopePaneItem_ResultView)
        ]
        HRESULT _stdcall ResultView([out, retval] ResultView **ppResultView);

        //
        // ResultViews
        //
        [
            id(DISPID_SCOPEPANEITEM_RESULTVIEWS),
            propget,
            HELP(mssnapr_IScopePaneItem_ResultViews)
        ]
        HRESULT _stdcall ResultViews([out, retval] ResultViews **ppResultViews);

        //
        // Parent
        //
        [
            id(DISPID_SCOPEPANEITEM_PARENT),
            propget,
            HELP(mssnapr_IScopePaneItem_Parent)
        ]
        HRESULT _stdcall Parent([out, retval] ScopePaneItems **ppScopePaneItems);

        //
        // Tag
        //
        [
            id(DISPID_SCOPEPANEITEM_TAG),
            propget,
            HELP(mssnapr_IScopePaneItem_Tag)
        ]
        HRESULT Tag([out, retval] VARIANT *pvarTag);

        [
            id(DISPID_SCOPEPANEITEM_TAG),
            propput,
            HELP(mssnapr_IScopePaneItem_Tag)
        ]
        HRESULT Tag([in] VARIANT varTag);

        [
            id(DISPID_SCOPEPANEITEM_TAG),
            propputref,
            HELP(mssnapr_IScopePaneItem_Tag)
        ]
        HRESULT Tag([in] VARIANT varTag);

        //
        // ColumnSetID
        //
        [
            id(DISPID_SCOPEPANEITEM_COLUMN_SET_ID),
            nonbrowsable,
            propget,
            HELP(mssnapr_IScopePaneItem_ColumnSetID)
        ]
        HRESULT _stdcall ColumnSetID([out, retval] BSTR *pbstrColumnSetID);

        [
            id(DISPID_SCOPEPANEITEM_COLUMN_SET_ID),
            nonbrowsable,
            propput,
            HELP(mssnapr_IScopePaneItem_ColumnSetID)
        ]
        HRESULT _stdcall ColumnSetID([in] BSTR bstrColumnSetID);

        // methods:

        //
        // DisplayNewResultView
        //
        [
            id(DISPID_SCOPEPANEITEM_DISPLAY_NEW_RESULTVIEW),
            HELP(mssnapr_IScopePaneItem_DisplayNewResultView)
        ]
        HRESULT DisplayNewResultView(
                               [in] BSTR                          DisplayString,
                               [in] SnapInResultViewTypeConstants ViewType);

        //
        // DisplayMessageView
        //
        [
            id(DISPID_SCOPEPANEITEM_DISPLAY_MESSAGEVIEW),
            HELP(mssnapr_IScopePaneItem_DisplayMessageView)
        ]
        HRESULT DisplayMessageView(
                               [in] BSTR                               TitleText,
                               [in] BSTR                               BodyText,
                               [in] SnapInMessageViewIconTypeConstants IconType);

    };

    [
        uuid(3ADE74B4-E7AC-11d1-B461-D23A1D000000),
        HELP(mssnapr_ScopePaneItem),
        noncreatable
    ]
    coclass ScopePaneItem
    {
        [default] interface IScopePaneItem;
    };



    //=---------------------------------------------------------------------=
    //                         ResultViews Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(87BC1802-C8FB-11d1-B44A-30F4BC000000),
        dual,
        hidden,
        oleautomation,
        nonextensible,
        HELP(mssnapr_IResultViews)
    ]
    interface IResultViews : IDispatch
    {
        // properties:

        //
        // Count
        //
        [
            id(DISPID_RESULTVIEWS_COUNT),
            propget,
            HELP(mssnapr_IResultViews_Count)
        ]
        HRESULT _stdcall Count([out, retval] long *plCount);

        //
        // Item
        //
        [
            id(DISPID_VALUE),
            propget,
            HELP(mssnapr_IResultViews_Item)
        ]
        HRESULT _stdcall Item([in] VARIANT               Index,
                              [out, retval] ResultView **ppResultView);

        //
        // NewEnum
        //
        [
            id(DISPID_NEWENUM),
            propget,
            hidden
        ]
        HRESULT _NewEnum([out, retval] IUnknown **ppunkEnum);

        // methods:

        //
        // Add
        //
        [
            id(DISPID_RESULTVIEWS_ADD),
            hidden,
            restricted
        ]
        HRESULT Add([optional, in] VARIANT       Index,
                    [optional, in] VARIANT       Key,
                    [out, retval]  IResultView **ppiView);
        //
        // Clear
        //
        [
            id(DISPID_RESULTVIEWS_CLEAR),
            hidden,
            restricted
        ]
        HRESULT _stdcall Clear();


        //
        // Remove
        //
        [
            id(DISPID_RESULTVIEWS_REMOVE),
            hidden,
            restricted
        ]
        HRESULT _stdcall Remove([in] VARIANT Index);
    };

    [
        uuid(87BC1803-C8FB-11d1-B44A-30F4BC000000),
        hidden,
        HELP(mssnapr_DResultViewsEvents),
    ]
    dispinterface DResultViewsEvents
    {
        properties:

        methods:

        //
        // Initialize
        //
        [
            id(DISPID_RESULTVIEWS_EVENT_INITIALIZE),
            HELP(mssnapr_DResultViewsEvents_Initialize)
        ]
        void Initialize([in] ResultView *ResultView);

        //
        // InitializeControl
        //
        [
            id(DISPID_RESULTVIEWS_EVENT_INITIALIZE_CONTROL),
            HELP(mssnapr_DResultViewsEvents_InitializeControl)
        ]
        void InitializeControl([in] ResultView *ResultView);

        //
        // Terminate
        //
        [
            id(DISPID_RESULTVIEWS_EVENT_TERMINATE),
            HELP(mssnapr_DResultViewsEvents_Terminate)
        ]
        void Terminate([in] ResultView *ResultView);

        //
        // Help
        //
        [
            id(DISPID_RESULTVIEWS_EVENT_HELP),
            HELP(mssnapr_DResultViewsEvents_Help)
        ]
        void Help([in] IResultView *ResultView,
                  [in] MMCListItem *ListItem);

        //
        // ListItemDblClick
        //
        [
            id(DISPID_RESULTVIEWS_EVENT_LISTITEM_DBLCLICK),
            HELP(mssnapr_DResultViewsEvents_ListItemDblClick)
        ]
        void ListItemDblClick([in] ResultView        *ResultView,
                              [in] MMCListItem       *ListItem,
                              [in, out] VARIANT_BOOL *DoDefault);

        //
        // ScopeItemDblClick
        //
        [
            id(DISPID_RESULTVIEWS_EVENT_SCOPEITEM_DBLCLICK),
            HELP(mssnapr_DResultViewsEvents_ScopeItemDblClick)
        ]
        void ScopeItemDblClick([in] ResultView        *ResultView,
                               [in] ScopeItem         *ScopeItem,
                               [in, out] VARIANT_BOOL *DoDefault);

        //
        // ItemRename
        //
        [
            id(DISPID_RESULTVIEWS_EVENT_ITEM_RENAME),
            HELP(mssnapr_DResultViewsEvents_ItemRename)
        ]
        void ItemRename([in] ResultView  *ResultView,
                        [in] MMCListItem *ListItem,
                        [in] BSTR         NewName);

        //
        // Activate
        //
        [
            id(DISPID_RESULTVIEWS_EVENT_ACTIVATE),
            HELP(mssnapr_DResultViewsEvents_Activate)
        ]
        void Activate([in] ResultView *ResultView);

        //
        // Deactivate
        //
        [
            id(DISPID_RESULTVIEWS_EVENT_DEACTIVATE),
            HELP(mssnapr_DResultViewsEvents_Deactivate)
        ]
        void Deactivate([in] ResultView        *ResultView,
                        [in, out] VARIANT_BOOL *Keep);

        //
        // ItemViewChange
        //
        [
            id(DISPID_RESULTVIEWS_EVENT_ITEM_VIEW_CHANGE),
            HELP(mssnapr_DResultViewsEvents_ListItemViewChange)
        ]
        void ItemViewChange([in] ResultView  *ResultView,
                            [in] MMCListItem *ListItem,
                            [in] VARIANT      Hint);

        //
        // ColumnClick
        //
        [
            id(DISPID_RESULTVIEWS_EVENT_COLUMN_CLICK),
            HELP(mssnapr_DResultViewsEvents_ColumnClick)
        ]
        void ColumnClick([in] ResultView               *ResultView,
                         [in] long                      ColumnNumber,
                         [in] SnapInSortOrderConstants  SortOrder);


        //
        // DeselectAll
        //
        [
            id(DISPID_RESULTVIEWS_EVENT_DESELECT_ALL),
            HELP(mssnapr_DResultViewsEvents_DeselectAll)
        ]
        void DeselectAll([in] ResultView      *ResultView,
                         [in] MMCConsoleVerbs *ConsoleVerbs,
                         [in] MMCControlbar   *Controlbar);

        //
        // CompareItems
        //
        [
            id(DISPID_RESULTVIEWS_EVENT_COMPARE_ITEMS),
            HELP(mssnapr_DResultViewsEvents_CompareItems)
        ]
        void CompareItems([in] ResultView    *ResultView,
                          [in] IDispatch     *Object1,
                          [in] IDispatch     *Object2,
                          [in] long           Column,
                          [in, out]  VARIANT *Result);

        //
        // FindItem
        //
        [
            id(DISPID_RESULTVIEWS_EVENT_FIND_ITEM),
            HELP(mssnapr_DResultViewsEvents_FindItem)
        ]
        void FindItem([in] ResultView        *ResultView,
                      [in] BSTR               Name,
                      [in] long               StartingIndex,
                      [in] VARIANT_BOOL       Wrap,
                      [in] VARIANT_BOOL       PartialName,
                      [in, out] VARIANT_BOOL *Found,
                      [in, out] long         *Index);

        //
        // CacheHint
        //
        [
            id(DISPID_RESULTVIEWS_EVENT_CACHE_HINT),
            HELP(mssnapr_DResultViewsEvents_CacheHint)
        ]
        void CacheHint([in] ResultView *ResultView,
                       [in] long        StartingIndex,
                       [in] long        EndingIndex);

        //
        // SortItems
        //
        [
            id(DISPID_RESULTVIEWS_EVENT_SORT_ITEMS),
            HELP(mssnapr_DResultViewsEvents_SortItems)
        ]
        void SortItems([in] ResultView               *ResultView,
                       [in] long                      Column,
                       [in] SnapInSortOrderConstants  SortOrder);
        //
        // TaskClick
        //
        [
            id(DISPID_RESULTVIEWS_EVENT_TASK_CLICK),
            HELP(mssnapr_DResultViewsEvents_TaskClick)
        ]
        void TaskClick([in] ResultView *ResultView,
                       [in] Task       *Task);

        //
        // ListpadButtonClick
        //
        [
            id(DISPID_RESULTVIEWS_EVENT_LISTPAD_BUTTON_CLICK),
            HELP(mssnapr_DResultViewsEvents_ListpadButtonClick)
        ]
        void ListpadButtonClick([in] ResultView *ResultView);

        //
        // TaskNotify
        //
        [
            id(DISPID_RESULTVIEWS_EVENT_TASK_NOTIFY),
            HELP(mssnapr_DResultViewsEvents_TaskNotify)
        ]
        void TaskNotify([in] ResultView *ResultView,
                        [in] VARIANT     Arg,
                        [in] VARIANT     Param);

        //
        // PropertyChanged
        //
        [
            id(DISPID_RESULTVIEWS_EVENT_PROPERTY_CHANGED),
            HELP(mssnapr_DResultViewsEvents_PropertyChanged)
        ]
        void PropertyChanged([in] ResultView  *ResultView,
                             [in] MMCListItem *ListItem,
                             [in] VARIANT      Data);


        //
        // GetVirtualItemData
        //
        [
            id(DISPID_RESULTVIEWS_EVENT_GET_VIRTUAL_ITEM_DATA),
            HELP(mssnapr_DResultViewsEvents_GetVirtualItemData)
        ]
        void GetVirtualItemData([in] ResultView  *ResultView,
                                [in] MMCListItem *ListItem);

        //
        // GetVirtualItemDisplayInfo
        //
        [
            id(DISPID_RESULTVIEWS_EVENT_GET_VIRTUAL_ITEM_DISPLAY_INFO),
            HELP(mssnapr_DResultViewsEvents_GetVirtualItemDisplayInfo)
        ]
        void GetVirtualItemDisplayInfo([in] ResultView  *ResultView,
                                       [in] MMCListItem *ListItem);

        //
        // ColumnsChanged
        //
        [
            id(DISPID_RESULTVIEWS_EVENT_COLUMNS_CHANGED),
            HELP(mssnapr_DResultViewsEvents_ColumnsChanged)
        ]
        void ColumnsChanged([in] ResultView    *ResultView,
                            [in] VARIANT        Columns,
                            [out] VARIANT_BOOL *Persist);

        //
        // FilterChange
        //
        [
            id(DISPID_RESULTVIEWS_EVENT_FILTER_CHANGE),
            HELP(mssnapr_DResultViewsEvents_FilterChange)
        ]
        void FilterChange([in] ResultView                      *ResultView,
                          [in] MMCColumnHeader                 *Column,
                          [in] SnapInFilterChangeTypeConstants  ChangeType);

        //
        // FilterButtonClick
        //
        [
            id(DISPID_RESULTVIEWS_EVENT_FILTER_BUTTON_CLICK),
            HELP(mssnapr_DResultViewsEvents_FilterButtonClick)
        ]
        void FilterButtonClick([in] ResultView       *ResultView,
                               [in] MMCColumnHeader  *Column,
                               [in] long              Left,
                               [in] long              Top,
                               [in] long              Height,
                               [in] long              Width);
    };

    [
        uuid(87BC1804-C8FB-11d1-B44A-30F4BC000000),
        HELP(mssnapr_ResultViews),
        noncreatable
    ]
    coclass ResultViews
    {
        [default] interface IResultViews;
        [default, source] dispinterface DResultViewsEvents;
    };

    //=---------------------------------------------------------------------=
    //                         ResultView Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(87BC1805-C8FB-11d1-B44A-30F4BC000000),
        dual,
        hidden,
        oleautomation,
        nonextensible,
        HELP(mssnapr_IResultView)
    ]
    interface IResultView : IDispatch
    {
        // properties:

        //
        // Name
        //
        [
            id(DISPID_VALUE),
            propget,
            HELP(mssnapr_IResultView_Name)
        ]
        HRESULT _stdcall Name([out, retval] BSTR *pbstrName);

        [
            id(DISPID_VALUE),
            propput,
            HELP(mssnapr_IResultView_Name)
        ]
        HRESULT _stdcall Name([in] BSTR bstrName);

        //
        // Index
        //
        [
            id(DISPID_RESULTVIEW_INDEX),
            propget,
            HELP(mssnapr_IResultView_Index)
        ]
        HRESULT Index([out, retval] long *plIndex);

        [
            id(DISPID_RESULTVIEW_INDEX),
            propput,
            hidden,
            restricted
        ]
        HRESULT Index([in] long lIndex);

        //
        // Key
        //
        [
            id(DISPID_RESULTVIEW_KEY),
            propget,
            HELP(mssnapr_IResultView_Key)
        ]
        HRESULT Key([out, retval] BSTR *pbstrKey);

        [
            id(DISPID_RESULTVIEW_KEY),
            propput,
            HELP(mssnapr_IResultView_Key)
        ]
        HRESULT Key([in] BSTR bstrKey);

        //
        // ScopePaneItem
        //
        [
            id(DISPID_RESULTVIEW_SCOPEPANEITEM),
            propget,
            HELP(mssnapr_IResultView_ScopePaneItem)
        ]
        HRESULT _stdcall ScopePaneItem([out, retval] ScopePaneItem **ppScopePaneItem);

        //
        // Control
        //
        [
            id(DISPID_RESULTVIEW_CONTROL),
            propget,
            nonbrowsable,
            HELP(mssnapr_IResultView_Control)
        ]
        HRESULT _stdcall Control([out, retval] IDispatch **ppiDispatch);

        //
        // Type
        //
        [
            id(DISPID_RESULTVIEW_TYPE),
            propget,
            HELP(mssnapr_IResultView_Type)
        ]
        HRESULT _stdcall Type([out, retval] SnapInResultViewTypeConstants *pType);

        [
            id(DISPID_RESULTVIEW_TYPE),
            propput,
            hidden,
            restricted
        ]
        HRESULT _stdcall Type([in] SnapInResultViewTypeConstants Type);

        //
        // DisplayString
        //
        [
            id(DISPID_RESULTVIEW_DISPLAY_STRING),
            propget,
            HELP(mssnapr_IResultView_DisplayString)
        ]
        HRESULT _stdcall DisplayString([out, retval] BSTR *pbstrString);

        [
            id(DISPID_RESULTVIEW_DISPLAY_STRING),
            propput,
            hidden,
            restricted
        ]
        HRESULT _stdcall DisplayString([in] BSTR bstrString);

        //
        // ListView
        //
        [
            id(DISPID_RESULTVIEW_LISTVIEW),
            propget,
            HELP(mssnapr_IResultView_ListView)
        ]
        HRESULT _stdcall ListView([out, retval] MMCListView **ppMMCListView);

        //
        // Taskpad
        //
        [
            id(DISPID_RESULTVIEW_TASKPAD),
            propget,
            HELP(mssnapr_IResultView_Taskpad)
        ]
        HRESULT _stdcall Taskpad([out, retval] Taskpad **ppTaskpad);


        //
        // MessageView
        //
        [
            id(DISPID_RESULTVIEW_MESSAGEVIEW),
            propget,
            HELP(mssnapr_IResultView_MessageView)
        ]
        HRESULT _stdcall MessageView([out, retval] MMCMessageView **ppMessageView);

        //
        // Tag
        //
        [
            id(DISPID_RESULTVIEW_TAG),
            propget,
            HELP(mssnapr_IResultView_Tag)
        ]
        HRESULT Tag([out, retval] VARIANT *pvarTag);

        [
            id(DISPID_RESULTVIEW_TAG),
            propput,
            HELP(mssnapr_IResultView_Tag)
        ]
        HRESULT Tag([in] VARIANT varTag);

        [
            id(DISPID_RESULTVIEW_TAG),
            propputref,
            HELP(mssnapr_IResultView_Tag)
        ]
        HRESULT Tag([in] VARIANT varTag);

        //
        // DefaultItemTypeGUID
        //
        [
            id(DISPID_RESULTVIEW_DEFAULT_ITEM_TYPE_GUID),
            nonbrowsable,
            propget,
            HELP(mssnapr_IResultView_DefaultItemTypeGUID)
        ]
        HRESULT _stdcall DefaultItemTypeGUID([out, retval] BSTR *pbstrDefaultItemTypeGUID);

        [
            id(DISPID_RESULTVIEW_DEFAULT_ITEM_TYPE_GUID),
            nonbrowsable,
            propput,
            HELP(mssnapr_IResultView_DefaultItemTypeGUID)
        ]
        HRESULT _stdcall DefaultItemTypeGUID([in] BSTR bstrDefaultItemTypeGUID);

#if defined(USING_SNAPINDATA)

        //
        // DefaultDataFormat
        //
        [
            id(DISPID_RESULTVIEW_DEFAULT_DATA_FORMAT),
            propget,
            HELP(mssnapr_IResultView_DefaultDataFormat)
        ]
        HRESULT _stdcall DefaultDataFormat([out, retval] BSTR *pbstrDefaultDataFormat);

        [
            id(DISPID_RESULTVIEW_DEFAULT_DATA_FORMAT),
            propput,
            HELP(mssnapr_IResultView_DefaultDataFormat)
        ]
        HRESULT _stdcall DefaultDataFormat([in] BSTR bstrDefaultDataFormat);

#endif

        //
        // AlwaysCreateNewOCX
        //
        [
            id(DISPID_RESULTVIEW_ALWAYS_CREATE_NEW_OCX),
            propput,
            HELP(mssnapr_IOCXViewDef_AlwaysCreateNewOCX)
        ]
        HRESULT _stdcall AlwaysCreateNewOCX([in] VARIANT_BOOL fAlwaysCreateNewOCX);

        [
            id(DISPID_RESULTVIEW_ALWAYS_CREATE_NEW_OCX),
            propget,
            HELP(mssnapr_IOCXViewDef_AlwaysCreateNewOCX)
        ]
        HRESULT _stdcall AlwaysCreateNewOCX([out, retval] VARIANT_BOOL *pfAlwaysCreateNewOCX);

        // methods:

        //
        // SetDescBarText
        //
        [
            id(DISPID_RESULTVIEW_SET_DESCBAR_TEXT),
            HELP(mssnapr_IResultView_SetDescBarText)
        ]
        HRESULT _stdcall SetDescBarText([in] BSTR Text);
    };

    [
        uuid(87BC1806-C8FB-11d1-B44A-30F4BC000000),
        HELP(mssnapr_ResultView),
    ]
    coclass ResultView
    {
        [default] interface IResultView;
    };


    //=---------------------------------------------------------------------=
    //                      MMC Image List Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(87BC1808-C8FB-11d1-B44A-30F4BC000000),
        dual,
        nonextensible,
        hidden,
        HELP(mssnapr_IMMCImageList)
    ]
    interface IMMCImageList : IDispatch
    {
        // properties:

        //
        // Name
        //
        [
            id(DISPID_VALUE),
            propget,
            HELP(mssnapr_IMMCImageList_Name)
        ]
        HRESULT Name([out, retval] BSTR *pbstrName);

        [
            id(DISPID_VALUE),
            propput,
            HELP(mssnapr_IMMCImageList_Name)
        ]
        HRESULT Name([in] BSTR bstrName);

        //
        // Index - Used at design time only. One based index into
        // IMMCImageLists collection
        //
        [
            id(DISPID_IMAGELIST_INDEX),
            propget,
            nonbrowsable,
            hidden,
            restricted
        ]
        HRESULT Index([out, retval] long *plIndex);

        [
            id(DISPID_IMAGELIST_INDEX),
            propput,
            nonbrowsable,
            hidden,
            restricted
        ]
        HRESULT Index([in] long lIndex);

        //
        // Key - key into IMMCImageLists collection, defaults to Name
        //
        [
            id(DISPID_IMAGELIST_KEY),
            propget,
            nonbrowsable,
            hidden,
            restricted
        ]
        HRESULT Key([out, retval] BSTR *pbstrKey);

        [
            id(DISPID_IMAGELIST_KEY),
            propput,
            nonbrowsable,
            hidden,
            restricted
        ]
        HRESULT Key([in] BSTR bstrKey);

        //
        // Tag
        //
        [
            id(DISPID_IMAGELIST_TAG),
            propget,
            HELP(mssnapr_IMMCImageList_Tag)
        ]
        HRESULT Tag([out, retval] VARIANT *pvarTag);

        [
            id(DISPID_IMAGELIST_TAG),
            propput,
            HELP(mssnapr_IMMCImageList_Tag)
        ]
        HRESULT Tag([in] VARIANT varTag);

        [
            id(DISPID_IMAGELIST_TAG),
            propputref,
            HELP(mssnapr_IMMCImageList_Tag)
        ]
        HRESULT Tag([in] VARIANT varTag);

        //
        // MaskColor
        //
        [
            id(DISPID_IMAGELIST_MASK_COLOR),
            propget,
            HELP(mssnapr_IMMCImageList_MaskColor)
        ]
        HRESULT _stdcall MaskColor([out, retval] OLE_COLOR *pclrMask);

        [
            id(DISPID_IMAGELIST_MASK_COLOR),
            propput,
            HELP(mssnapr_IMMCImageList_MaskColor)
        ]
        HRESULT _stdcall MaskColor([in] OLE_COLOR clrMask);

        //
        // ListImages
        //
        [
            id(DISPID_IMAGELIST_LIST_IMAGES),
            propget,
            HELP(mssnapr_IMMCImageList_ListImages)
        ]
        HRESULT _stdcall ListImages([out, retval] MMCImages **ppMMCImages);

        [
            id(DISPID_IMAGELIST_LIST_IMAGES),
            propputref,
            HELP(mssnapr_IMMCImageList_ListImages)
        ]
        HRESULT _stdcall ListImages([in] MMCImages *pMMCImages);

        // methods:
    };

    [
        uuid(87BC1809-C8FB-11d1-B44A-30F4BC000000),
        HELP(mssnapr_MMCImageList)
    ]
    coclass MMCImageList
    {
        [default] interface IMMCImageList;
    };

    //=---------------------------------------------------------------------=
    //                      MMC Images Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(87BC180A-C8FB-11d1-B44A-30F4BC000000),
        dual,
        hidden,
        oleautomation,
        nonextensible,
        HELP(mssnapr_IMMCImages)
    ]
    interface IMMCImages : IDispatch
    {
        // properties:

        //
        // Count
        //
        [
            id(DISPID_IMAGES_COUNT),
            propget,
            HELP(mssnapr_IMMCImages_Count)
        ]
        HRESULT _stdcall Count([out, retval] long *plCount);

        //
        // Item
        //
        [
            id(DISPID_VALUE),
            propget,
            HELP(mssnapr_IMMCImages_Item)
        ]
        HRESULT _stdcall Item([in] VARIANT Index, [out, retval] MMCImage **ppMMCImage);

        //
        // NewEnum
        //
        [
            id(DISPID_NEWENUM),
            propget,
            hidden
        ]
        HRESULT _NewEnum([out, retval] IUnknown **ppunkEnum);

        // methods:

        //
        // Add
        //
        [
            id(DISPID_IMAGES_ADD),
            HELP(mssnapr_IMMCImages_Add)
        ]
        HRESULT Add([optional, in] VARIANT   Index,
                    [optional, in] VARIANT   Key,
                    [optional, in] VARIANT   Picture,
                    [out, retval] MMCImage **ppMMCImage);

        //
        // Clear
        //
        [
            id(DISPID_IMAGES_CLEAR),
            HELP(mssnapr_IMMCImages_Clear)
        ]
        HRESULT _stdcall Clear();


        //
        // Remove
        //
        [
            id(DISPID_IMAGES_REMOVE),
            HELP(mssnapr_IMMCImages_Remove)
        ]
        HRESULT _stdcall Remove([in] VARIANT Index);
    };

    [
        uuid(87BC180B-C8FB-11d1-B44A-30F4BC000000),
        HELP(mssnapr_MMCImages),
    ]
    coclass MMCImages
    {
        [default] interface IMMCImages;
    };

    //=---------------------------------------------------------------------=
    //                      MMC List Image Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(87BC180C-C8FB-11d1-B44A-30F4BC000000),
        dual,
        hidden,
        oleautomation,
        nonextensible,
        HELP(mssnapr_IMMCImage)
    ]
    interface IMMCImage : IDispatch
    {
        // properties:

        //
        // Index
        //
        [
            id(DISPID_IMAGE_INDEX),
            propget,
            HELP(mssnapr_IMMCImage_Index)
        ]
        HRESULT Index([out, retval] long *plIndex);

        [
            id(DISPID_IMAGE_INDEX),
            propput,
            hidden,
            restricted
        ]
        HRESULT Index([in] long lIndex);

        //
        // Key
        //
        [
            id(DISPID_IMAGE_KEY),
            propget,
            HELP(mssnapr_IMMCImage_Key)
        ]
        HRESULT Key([out, retval] BSTR *pbstrKey);

        [
            id(DISPID_IMAGE_KEY),
            propput,
            HELP(mssnapr_IMMCImage_Key)
        ]
        HRESULT Key([in] BSTR bstrKey);

        //
        // Tag
        //
        [
            id(DISPID_IMAGE_TAG),
            propget,
            HELP(mssnapr_IMMCImage_Tag)
        ]
        HRESULT Tag([out, retval] VARIANT *pvarTag);

        [
            id(DISPID_IMAGE_TAG),
            propput,
            HELP(mssnapr_IMMCImage_Tag)
        ]
        HRESULT Tag([in] VARIANT varTag);

        [
            id(DISPID_IMAGE_TAG),
            propputref,
            HELP(mssnapr_IMMCImage_Tag)
        ]
        HRESULT Tag([in] VARIANT varTag);

        //
        // Picture
        //
        [
            id(DISPID_IMAGE_PICTURE),
            propget,
            HELP(mssnapr_IMMCImage_Picture)
        ]
        HRESULT Picture([out, retval] IPictureDisp **ppPictureDisp);

        [
            id(DISPID_IMAGE_PICTURE),
            propputref,
            HELP(mssnapr_IMMCImage_Picture)
        ]
        HRESULT Picture([in] IPictureDisp *pPictureDisp);

        // methods:
    };

    [
        uuid(87BC180D-C8FB-11d1-B44A-30F4BC000000),
        HELP(mssnapr_MMCImage),
    ]
    coclass MMCImage
    {
        [default] interface IMMCImage;
    };


    //=---------------------------------------------------------------------=
    //                      MMC ListView Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(87BC180E-C8FB-11d1-B44A-30F4BC000000),
        dual,
        hidden,
        oleautomation,
        nonextensible,
        HELP(mssnapr_IMMCListView)
    ]
    interface IMMCListView : IDispatch
    {
        // properties:

        //
        // ColumnHeaders
        //
        [
            id(DISPID_LISTVIEW_COLUMN_HEADERS),
            propget,
            HELP(mssnapr_IMMCListView_ColumnHeaders)
        ]
        HRESULT ColumnHeaders([out, retval] MMCColumnHeaders **ppMMCColumnHeaders);

        [
            id(DISPID_LISTVIEW_COLUMN_HEADERS),
            propputref,
            HELP(mssnapr_IMMCListView_ColumnHeaders)
        ]
        HRESULT ColumnHeaders([in] MMCColumnHeaders *pMMCColumnHeaders);

        //
        // Icons
        //
        [
            id(DISPID_LISTVIEW_ICONS),
            propget,
            HELP(mssnapr_IMMCListView_Icons)
        ]
        HRESULT Icons([out, retval] MMCImageList **ppMMCImageList);

        [
            id(DISPID_LISTVIEW_ICONS),
            propputref,
            HELP(mssnapr_IMMCListView_Icons)
        ]
        HRESULT Icons([in] MMCImageList *pMMCImageList);

        //
        // SmallIcons
        //
        [
            id(DISPID_LISTVIEW_SMALL_ICONS),
            propget,
            HELP(mssnapr_IMMCListView_SmallIcons)
        ]
        HRESULT SmallIcons([out, retval] MMCImageList **ppMMCImageList);

        [
            id(DISPID_LISTVIEW_SMALL_ICONS),
            propputref,
            HELP(mssnapr_IMMCListView_SmallIcons)
        ]
        HRESULT SmallIcons(MMCImageList *pMMCImageList);

        //
        // ListItems
        //
        [
            id(DISPID_LISTVIEW_LIST_ITEMS),
            propget,
            nonbrowsable,
            HELP(mssnapr_IMMCListView_ListItems)
        ]
        HRESULT ListItems([out, retval] MMCListItems **ppMMCListItems);

        //
        // SelectedItems
        //
        [
            id(DISPID_LISTVIEW_SELECTED_ITEMS),
            propget,
            nonbrowsable,
            HELP(mssnapr_IMMCListView_SelectedItems),
        ]
        HRESULT SelectedItems([out, retval] MMCClipboard **ppMMCClipboard);

        //
        // Sorted
        //
        [
            id(DISPID_LISTVIEW_SORTED),
            propget,
            HELP(mssnapr_IMMCListView_Sorted)
        ]
        HRESULT Sorted([out, retval] VARIANT_BOOL *pfSorted);

        [
            id(DISPID_LISTVIEW_SORTED),
            propput,
            HELP(mssnapr_IMMCListView_Sorted)
        ]
        HRESULT Sorted([in] VARIANT_BOOL fSorted);

        //
        // SortKey
        //
        [
            id(DISPID_LISTVIEW_SORT_KEY),
            propget,
            HELP(mssnapr_IMMCListView_SortKey)
        ]
        HRESULT SortKey([out, retval] short *psKey);

        [
            id(DISPID_LISTVIEW_SORT_KEY),
            propput,
            HELP(mssnapr_IMMCListView_SortKey)
        ]
        HRESULT SortKey([in] short sKey);

        //
        // SortOrder
        //
        [
            id(DISPID_LISTVIEW_SORT_ORDER),
            propget,
            HELP(mssnapr_IMMCListView_SortOrder)
        ]
        HRESULT SortOrder([out, retval] SnapInSortOrderConstants *pOrder);

        [
            id(DISPID_LISTVIEW_SORT_ORDER),
            propput,
            HELP(mssnapr_IMMCListView_SortOrder)
        ]
        HRESULT SortOrder([in] SnapInSortOrderConstants Order);

        //
        // View
        //
        [
            id(DISPID_LISTVIEW_VIEW),
            propget,
            HELP(mssnapr_IMMCListView_View)
        ]
        HRESULT View([out, retval] SnapInViewModeConstants *pView);

        [
            id(DISPID_LISTVIEW_VIEW),
            propput,
            HELP(mssnapr_IMMCListView_View)
        ]
        HRESULT View([in] SnapInViewModeConstants View);

        //
        // Virtual
        //
        [
            id(DISPID_LISTVIEW_VIRTUAL),
            propget,
            HELP(mssnapr_IMMCListView_Virtual)
        ]
        HRESULT Virtual([out, retval] VARIANT_BOOL *pfVirtual);

        [
            id(DISPID_LISTVIEW_VIRTUAL),
            propput,
            HELP(mssnapr_IMMCListView_Virtual)
        ]
        HRESULT Virtual([in] VARIANT_BOOL fVirtual);

        //
        // UseFontLinking
        //
        [
            id(DISPID_LISTVIEW_USE_FONT_LINKING),
            propget,
            HELP(mssnapr_IMMCListView_UseFontLinking)
        ]
        HRESULT UseFontLinking([out, retval] VARIANT_BOOL *pfUseFontLinking);

        [
            id(DISPID_LISTVIEW_USE_FONT_LINKING),
            propput,
            HELP(mssnapr_IMMCListView_UseFontLinking)
        ]
        HRESULT UseFontLinking([in] VARIANT_BOOL fUseFontLinking);

        //
        // MultiSelect
        //
        [
            id(DISPID_LISTVIEW_MULTI_SELECT),
            propget,
            HELP(mssnapr_IMMCListView_MultiSelect)
        ]
        HRESULT MultiSelect([out, retval] VARIANT_BOOL *pfMultiSelect);

        [
            id(DISPID_LISTVIEW_MULTI_SELECT),
            propput,
            HELP(mssnapr_IMMCListView_MultiSelect)
        ]
        HRESULT MultiSelect([in] VARIANT_BOOL fMultiSelect);

        //
        // HideSelection
        //
        [
            id(DISPID_LISTVIEW_HIDE_SELECTION),
            propget,
            HELP(mssnapr_IMMCListView_HideSelection)
        ]
        HRESULT HideSelection([out, retval] VARIANT_BOOL *pfHideSelection);

        [
            id(DISPID_LISTVIEW_HIDE_SELECTION),
            propput,
            HELP(mssnapr_IMMCListView_HideSelection)
        ]
        HRESULT HideSelection([in] VARIANT_BOOL fHideSelection);

        //
        // SortHeader
        //
        [
            id(DISPID_LISTVIEW_SORT_HEADER),
            propget,
            HELP(mssnapr_IMMCListView_SortHeader)
        ]
        HRESULT SortHeader([out, retval] VARIANT_BOOL *pfSortHeader);

        [
            id(DISPID_LISTVIEW_SORT_HEADER),
            propput,
            HELP(mssnapr_IMMCListView_SortHeader)
        ]
        HRESULT SortHeader([in] VARIANT_BOOL fSortHeader);

        //
        // SortIcon
        //
        [
            id(DISPID_LISTVIEW_SORT_ICON),
            propget,
            HELP(mssnapr_IMMCListView_SortIcon)
        ]
        HRESULT SortIcon([out, retval] VARIANT_BOOL *pfSortIcon);

        [
            id(DISPID_LISTVIEW_SORT_ICON),
            propput,
            HELP(mssnapr_IMMCListView_SortIcon)
        ]
        HRESULT SortIcon([in] VARIANT_BOOL fSortIcon);

        //
        // FilterChangeTimeOut
        //
        [
            id(DISPID_LISTVIEW_FILTER_CHANGE_TIMEOUT),
            propget,
            HELP(mssnapr_IMMCListView_FilterChangeTimeOut)
        ]
        HRESULT FilterChangeTimeOut([out, retval] long *plTimeout);

        [
            id(DISPID_LISTVIEW_FILTER_CHANGE_TIMEOUT),
            propput,
            HELP(mssnapr_IMMCListView_FilterChangeTimeOut)
        ]
        HRESULT FilterChangeTimeOut([in] long lTimeout);

        //
        // ShowChildScopeItems
        //
        [
            id(DISPID_LISTVIEW_SHOW_CHILD_SCOPEITEMS),
            propget,
            HELP(mssnapr_IMMCListView_ShowChildScopeItems)
        ]
        HRESULT ShowChildScopeItems([out, retval] VARIANT_BOOL *pfShow);

        [
            id(DISPID_LISTVIEW_SHOW_CHILD_SCOPEITEMS),
            propput,
            HELP(mssnapr_IMMCListView_ShowChildScopeItems)
        ]
        HRESULT ShowChildScopeItems([in] VARIANT_BOOL fShow);

        //
        // LexicalSort
        //
        [
            id(DISPID_LISTVIEW_LEXICAL_SORT),
            propget,
            HELP(mssnapr_IMMCListView_LexicalSort)
        ]
        HRESULT LexicalSort([out, retval] VARIANT_BOOL *pfShow);

        [
            id(DISPID_LISTVIEW_LEXICAL_SORT),
            propput,
            HELP(mssnapr_IMMCListView_LexicalSort)
        ]
        HRESULT LexicalSort([in] VARIANT_BOOL fShow);

        //
        // Tag
        //
        [
            id(DISPID_LISTVIEW_TAG),
            propget,
            HELP(mssnapr_IMMCListView_Tag)
        ]
        HRESULT Tag([out, retval] VARIANT *pvarTag);

        [
            id(DISPID_LISTVIEW_TAG),
            propput,
            HELP(mssnapr_IMMCListView_Tag)
        ]
        HRESULT Tag([in] VARIANT varTag);

        [
            id(DISPID_LISTVIEW_TAG),
            propputref,
            HELP(mssnapr_IMMCListView_Tag)
        ]
        HRESULT Tag([in] VARIANT varTag);

        // methods:

        //
        // SetScopeItemSate
        //
        [
            id(DISPID_LISTVIEW_SET_SCOPE_ITEM_STATE),
            HELP(mssnapr_IMMCListView_SetScopeItemState)
        ]
        HRESULT SetScopeItemState([in] ScopeItem                    *ScopeItem,
                                  [in] SnapInListItemStateConstants  State,
                                  [in] VARIANT_BOOL                  Value);
    };

    [
        uuid(87BC180F-C8FB-11d1-B44A-30F4BC000000),
        HELP(mssnapr_MMCListView),
    ]
    coclass MMCListView
    {
        [default] interface IMMCListView;
    };

    //=---------------------------------------------------------------------=
    //                      MMC List Items Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(15DC07F2-CC1B-11d1-B44B-86B824000000),
        dual,
        hidden,
        oleautomation,
        nonextensible,
        HELP(mssnapr_IMMCListItems)
    ]
    interface IMMCListItems : IDispatch
    {
        // properties:

        //
        // Count
        //
        [
            id(DISPID_LISTITEMS_COUNT),
            propget,
            HELP(mssnapr_IMMCListItems_Count)
        ]
        HRESULT _stdcall Count([out, retval] long *plCount);

        //
        // Item
        //
        [
            id(DISPID_VALUE),
            propget,
            HELP(mssnapr_IMMCListItems_Item)
        ]
        HRESULT _stdcall Item([in] VARIANT Index, [out, retval] MMCListItem **ppMMCListItem);

        //
        // NewEnum
        //
        [
            id(DISPID_NEWENUM),
            propget,
            hidden
        ]
        HRESULT _NewEnum([out, retval] IUnknown **ppunkEnum);

        // methods:

        //
        // Add
        //
        [
            id(DISPID_LISTITEMS_ADD),
            HELP(mssnapr_IMMCListItems_Add)
        ]
        HRESULT Add([in, optional] VARIANT       Index,
                    [in, optional] VARIANT       Key,
                    [in, optional] VARIANT       Text,
                    [in, optional] VARIANT       Icon,
                    [out, retval]  MMCListItem **ppMMCListItem);

        //
        // Clear
        //
        [
            id(DISPID_LISTITEMS_CLEAR),
            HELP(mssnapr_IMMCListItems_Clear)
        ]
        HRESULT _stdcall Clear();


        //
        // Remove
        //
        [
            id(DISPID_LISTITEMS_REMOVE),
            HELP(mssnapr_IMMCListItems_Remove)
        ]
        HRESULT _stdcall Remove([in] VARIANT Index);

        //
        // SetItemCount
        //
        [
            id(DISPID_LISTITEMS_SET_ITEM_COUNT),
            HELP(mssnapr_IMMCListItems_SetItemCount)
        ]
        HRESULT SetItemCount([in]           long    Count,
                             [in, optional] VARIANT Repaint,
                             [in, optional] VARIANT Scroll);

    };

    [
        uuid(15DC07F3-CC1B-11d1-B44B-86B824000000),
        HELP(mssnapr_MMCListItems),
    ]
    coclass MMCListItems
    {
        [default] interface IMMCListItems;
    };

    //=---------------------------------------------------------------------=
    //                      MMC List Item Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(15DC07F4-CC1B-11d1-B44B-86B824000000),
        dual,
        hidden,
        oleautomation,
        nonextensible,
        HELP(mssnapr_IMMCListItem)
    ]
    interface IMMCListItem : IDispatch
    {
        // properties:

        //
        // Index
        //
        [
            id(DISPID_LISTITEM_INDEX),
            propget,
            HELP(mssnapr_IMMCListItem_Index)
        ]
        HRESULT Index([out, retval] long *plIndex);

        [
            id(DISPID_LISTITEM_INDEX),
            propput,
            hidden,
            restricted
        ]
        HRESULT Index([in] long lIndex);

        //
        // Key
        //
        [
            id(DISPID_LISTITEM_KEY),
            propget,
            HELP(mssnapr_IMMCListItem_Key)
        ]
        HRESULT Key([out, retval] BSTR *pbstrKey);

        [
            id(DISPID_LISTITEM_KEY),
            propput,
            HELP(mssnapr_IMMCListItem_Key)
        ]
        HRESULT Key([in] BSTR bstrKey);

        //
        // ID
        //
        [
            id(DISPID_LISTITEM_ID),
            propget,
            HELP(mssnapr_IMMCListItem_ID)
        ]
        HRESULT ID([out, retval] BSTR *pbstrID);

        [
            id(DISPID_LISTITEM_ID),
            propput,
            HELP(mssnapr_IMMCListItem_ID)
        ]
        HRESULT ID([in] BSTR bstrID);

        //
        // Tag
        //
        [
            id(DISPID_LISTITEM_TAG),
            propget,
            HELP(mssnapr_IMMCListItem_Tag)
        ]
        HRESULT Tag([out, retval] VARIANT *pvarTag);

        [
            id(DISPID_LISTITEM_TAG),
            propput,
            HELP(mssnapr_IMMCListItem_Tag)
        ]
        HRESULT Tag([in] VARIANT varTag);

        [
            id(DISPID_LISTITEM_TAG),
            propputref,
            HELP(mssnapr_IMMCListItem_Tag)
        ]
        HRESULT Tag([in] VARIANT varTag);

        //
        // Text
        //
        [
            id(DISPID_VALUE),
            propget,
            HELP(mssnapr_IMMCListItem_Text)
        ]
        HRESULT Text([out, retval] BSTR *pbstrText);

        [
            id(DISPID_VALUE),
            propput,
            HELP(mssnapr_IMMCListItem_Text)
        ]
        HRESULT Text([in] BSTR bstrText);

        //
        // Icon
        //
        [
            id(DISPID_LISTITEM_ICON),
            propget,
            HELP(mssnapr_IMMCListItem_Icon)
        ]
        HRESULT Icon([out, retval] VARIANT *pvarIndex);

        [
            id(DISPID_LISTITEM_ICON),
            propput,
            HELP(mssnapr_IMMCListItem_Icon)
        ]
        HRESULT Icon([in] VARIANT varIndex);

        //
        // Selected
        //
        [
            id(DISPID_LISTITEM_SELECTED),
            propget,
            HELP(mssnapr_IMMCListItem_Selected)
        ]
        HRESULT Selected([out, retval] VARIANT_BOOL *pfSelected);

        [
            id(DISPID_LISTITEM_SELECTED),
            propput,
            HELP(mssnapr_IMMCListItem_Selected)
        ]
        HRESULT Selected([in] VARIANT_BOOL fSelected);

        //
        // Focused
        //
        [
            id(DISPID_LISTITEM_FOCUSED),
            propget,
            HELP(mssnapr_IMMCListItem_Focused)
        ]
        HRESULT Focused([out, retval] VARIANT_BOOL *pfFocused);

        [
            id(DISPID_LISTITEM_FOCUSED),
            propput,
            HELP(mssnapr_IMMCListItem_Focused)
        ]
        HRESULT Focused([in] VARIANT_BOOL fFocused);

        //
        // DropHilited
        //
        [
            id(DISPID_LISTITEM_DROPHILITED),
            propget,
            HELP(mssnapr_IMMCListItem_DropHilited)
        ]
        HRESULT DropHilited([out, retval] VARIANT_BOOL *pfDropHilited);

        [
            id(DISPID_LISTITEM_DROPHILITED),
            propput,
            HELP(mssnapr_IMMCListItem_DropHilited)
        ]
        HRESULT DropHilited([in] VARIANT_BOOL fDropHilited);

        //
        // Cut
        //
        [
            id(DISPID_LISTITEM_CUT),
            propget,
            HELP(mssnapr_IMMCListItem_Cut)
        ]
        HRESULT Cut([out, retval] VARIANT_BOOL *pfCut);

        [
            id(DISPID_LISTITEM_CUT),
            propput,
            HELP(mssnapr_IMMCListItem_Cut)
        ]
        HRESULT Cut([in] VARIANT_BOOL fCut);

        //
        // Pasted
        //
        [
            id(DISPID_LISTITEM_PASTED),
            propget,
            nonbrowsable,
            HELP(mssnapr_IMMCListItem_Pasted)
        ]
        HRESULT _stdcall Pasted([out, retval] VARIANT_BOOL *pfOK);

        [
            id(DISPID_LISTITEM_PASTED),
            propput,
            nonbrowsable,
            HELP(mssnapr_IMMCListItem_Pasted)
        ]
        HRESULT _stdcall Pasted([in] VARIANT_BOOL fOK);

        //
        // SubItems
        //
        [
            id(DISPID_LISTITEM_SUBITEMS),
            propget,
            HELP(mssnapr_IMMCListItem_SubItems)
        ]
        HRESULT SubItems([in]short Index, [out, retval] BSTR *pbstrItem);

        [
            id(DISPID_LISTITEM_SUBITEMS),
            propput,
            HELP(mssnapr_IMMCListItem_SubItems)
        ]
        HRESULT SubItems([in] short Index, [in] BSTR pbstrItem);

        //
        // ListSubItems
        //
        [
            id(DISPID_LISTITEM_LIST_SUBITEMS),
            propget,
            HELP(mssnapr_IMMCListItem_ListSubItems)
        ]
        HRESULT ListSubItems([out, retval] MMCListSubItems **ppMMCListSubItems);

        [
            id(DISPID_LISTITEM_LIST_SUBITEMS),
            propputref,
            HELP(mssnapr_IMMCListItem_ListSubItems)
        ]
        HRESULT ListSubItems([in] MMCListSubItems *pMMCListSubItems);

        //
        // DynamicExtensions
        //
        [
            id(DISPID_LISTITEM_DYNAMIC_EXTENSIONS),
            propget,
            nonbrowsable,
            HELP(mssnapr_IMMCListItem_DynamicExtensions)
        ]
        HRESULT _stdcall DynamicExtensions([out, retval] Extensions **ppExtensions);

        //
        // Data
        //
        [
            id(DISPID_LISTITEM_DATA),
            propget,
            nonbrowsable,
            HELP(mssnapr_IMMCListItem_Data)
        ]
        HRESULT _stdcall Data([out, retval] MMCDataObject **ppData);

        //
        // ItemTypeGUID
        //
        [
            id(DISPID_LISTITEM_ITEM_TYPE_GUID),
            propget,
            nonbrowsable,
            HELP(mssnapr_IMMCListItem_ItemTypeGUID)
        ]
        HRESULT _stdcall ItemTypeGUID([out, retval] BSTR *pbstrItemTypeGUID);

        [
            id(DISPID_LISTITEM_ITEM_TYPE_GUID),
            propput,
            nonbrowsable,
            HELP(mssnapr_IMMCListItem_ItemTypeGUID)
        ]
        HRESULT _stdcall ItemTypeGUID([in] BSTR bstrItemTypeGUID);

#if defined(USING_SNAPINDATA)

        //
        // DefaultDataFormat
        //
        [
            id(DISPID_LISTITEM_DEFAULT_DATA_FORMAT),
            propget,
            HELP(mssnapr_IMMCListItem_DefaultDataFormat)
        ]
        HRESULT _stdcall DefaultDataFormat([out, retval] BSTR *pbstrDefaultDataFormat);

        [
            id(DISPID_LISTITEM_DEFAULT_DATA_FORMAT),
            propput,
            HELP(mssnapr_IMMCListItem_DefaultDataFormat)
        ]
        HRESULT _stdcall DefaultDataFormat([in] BSTR bstrDefaultDataFormat);

#endif
        // methods:

        //
        // Update
        //
        [
            id(DISPID_LISTITEM_UPDATE),
            HELP(mssnapr_IMMCListItem_Update)
        ]
        HRESULT Update();

        //
        // UpdateAllViews
        //
        [
            id(DISPID_LISTITEM_UPDATE_ALL_VIEWS),
            HELP(mssnapr_IMMCListItem_UpdateAllViews)
        ]
        HRESULT UpdateAllViews([in, optional] VARIANT Hint);

        //
        // PropertyChanged
        //
        [
            id(DISPID_LISTITEM_PROPERTY_CHANGED),
            HELP(mssnapr_IMMCListItem_PropertyChanged)
        ]
        HRESULT PropertyChanged([in] VARIANT Data);
    };

    [
        uuid(15DC07F5-CC1B-11d1-B44B-86B824000000),
        HELP(mssnapr_MMCListItem),
    ]
    coclass MMCListItem
    {
        [default] interface IMMCListItem;
    };


    //=---------------------------------------------------------------------=
    //                      MMC List Sub-Items Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(15DC07F6-CC1B-11d1-B44B-86B824000000),
        dual,
        hidden,
        oleautomation,
        nonextensible,
        HELP(mssnapr_IMMCListSubItems)
    ]
    interface IMMCListSubItems : IDispatch
    {
        // properties:

        //
        // Count
        //
        [
            id(DISPID_LISTSUBITEMS_COUNT),
            propget,
            HELP(mssnapr_IMMCListSubItems_Count)
        ]
        HRESULT _stdcall Count([out, retval] long *plCount);

        //
        // Item
        //
        [
            id(DISPID_VALUE),
            propget,
            HELP(mssnapr_IMMCListSubItems_Item)
        ]
        HRESULT _stdcall Item([in] VARIANT                   Index,
                              [out, retval] MMCListSubItem **ppMMCListSubItem);

        //
        // NewEnum
        //
        [
            id(DISPID_NEWENUM),
            propget,
            hidden
        ]
        HRESULT _NewEnum([out, retval] IUnknown **ppunkEnum);

        // methods:

        //
        // Add
        //
        [
            id(DISPID_LISTSUBITEMS_ADD),
            HELP(mssnapr_IMMCListSubItems_Add)
        ]
        HRESULT Add([in, optional] VARIANT          Index,
                    [in, optional] VARIANT          Key,
                    [in, optional] VARIANT          Text,
                    [out, retval]  MMCListSubItem **ppMMCListSubItem);

        //
        // Clear
        //
        [
            id(DISPID_LISTSUBITEMS_CLEAR),
            HELP(mssnapr_IMMCListSubItems_Clear)
        ]
        HRESULT _stdcall Clear();

        //
        // Remove
        //
        [
            id(DISPID_LISTSUBITEMS_REMOVE),
            HELP(mssnapr_IMMCListSubItems_Remove)
        ]
        HRESULT _stdcall Remove([in] VARIANT Index);
    };

    [
        uuid(15DC07F8-CC1B-11d1-B44B-86B824000000),
        HELP(mssnapr_MMCListSubItems),
    ]
    coclass MMCListSubItems
    {
        [default] interface IMMCListSubItems;
    };

    //=---------------------------------------------------------------------=
    //                      MMC List Sub-Item Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(15DC07F9-CC1B-11d1-B44B-86B824000000),
        dual,
        hidden,
        oleautomation,
        nonextensible,
        HELP(mssnapr_IMMCListSubItem)
    ]
    interface IMMCListSubItem : IDispatch
    {
        // properties:

        //
        // Index
        //
        [
            id(DISPID_LISTSUBITEM_INDEX),
            propget,
            HELP(mssnapr_IMMCListSubItem_Index)
        ]
        HRESULT Index([out, retval] long *plIndex);

        [
            id(DISPID_LISTSUBITEM_INDEX),
            propput,
            hidden,
            restricted
        ]
        HRESULT Index([in] long lIndex);

        //
        // Key
        //
        [
            id(DISPID_LISTSUBITEM_KEY),
            propget,
            HELP(mssnapr_IMMCListSubItem_Key)
        ]
        HRESULT Key([out, retval] BSTR *pbstrKey);

        [
            id(DISPID_LISTSUBITEM_KEY),
            propput,
            HELP(mssnapr_IMMCListSubItem_Key)
        ]
        HRESULT Key([in] BSTR bstrKey);

        //
        // Tag
        //
        [
            id(DISPID_LISTSUBITEM_TAG),
            propget,
            HELP(mssnapr_IMMCListSubItem_Tag)
        ]
        HRESULT Tag([out, retval] VARIANT *pvarTag);

        [
            id(DISPID_LISTSUBITEM_TAG),
            propput,
            HELP(mssnapr_IMMCListSubItem_Tag)
        ]
        HRESULT Tag([in] VARIANT varTag);

        [
            id(DISPID_LISTSUBITEM_TAG),
            propputref,
            HELP(mssnapr_IMMCListSubItem_Tag)
        ]
        HRESULT Tag([in] VARIANT varTag);

        //
        // Text
        //
        [
            id(DISPID_VALUE),
            propget,
            HELP(mssnapr_IMMCListSubItem_Text)
        ]
        HRESULT Text([out, retval] BSTR *pbstrText);

        [
            id(DISPID_VALUE),
            propput,
            HELP(mssnapr_IMMCListSubItem_Text)
        ]
        HRESULT Text([in] BSTR bstrText);

        // methods:
    };

    [
        uuid(15DC07FA-CC1B-11d1-B44B-86B824000000),
        HELP(mssnapr_MMCListSubItem),
    ]
    coclass MMCListSubItem
    {
        [default] interface IMMCListSubItem;
    };

    //=---------------------------------------------------------------------=
    //                    MMC Columns Headers Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(3B15D610-CD57-11d1-B44C-44750B000000),
        dual,
        hidden,
        oleautomation,
        nonextensible,
        HELP(mssnapr_IMMCColumnHeaders)
    ]
    interface IMMCColumnHeaders : IDispatch
    {
        // properties:

        //
        // Count
        //
        [
            id(DISPID_COLUMNHEADERS_COUNT),
            propget,
            HELP(mssnapr_IMMCColumnHeaders_Count)
        ]
        HRESULT _stdcall Count([out, retval] long *plCount);


        //
        // Item
        //
        [
            id(DISPID_VALUE),
            propget,
            HELP(mssnapr_IMMCColumnHeaders_Item)
        ]
        HRESULT _stdcall Item([in] VARIANT                     Index,
                              [out, retval] MMCColumnHeader **ppMMCColumnHeader);

        //
        // NewEnum
        //
        [
            id(DISPID_NEWENUM),
            propget,
            hidden
        ]
        HRESULT _NewEnum([out, retval] IUnknown **ppunkEnum);

        // methods:

        //
        // Add
        //
        [
            id(DISPID_COLUMNHEADERS_ADD),
            HELP(mssnapr_IMMCColumnHeaders_Add)
        ]
        HRESULT Add([in, optional] VARIANT           Index,
                    [in, optional] VARIANT           Key,
                    [in, optional] VARIANT           Text,
                    [in, optional] VARIANT           Width,
                    [in, optional] VARIANT           Alignment,
                    [out, retval]  MMCColumnHeader **ppMMCColumnHeader);

        //
        // Clear
        //
        [
            id(DISPID_COLUMNHEADERS_CLEAR),
            HELP(mssnapr_IMMCColumnHeaders_Clear)
        ]
        HRESULT _stdcall Clear();

        //
        // Remove
        //
        [
            id(DISPID_COLUMNHEADERS_REMOVE),
            HELP(mssnapr_IMMCColumnHeaders_Remove)
        ]
        HRESULT _stdcall Remove([in] VARIANT Index);
    };

    [
        uuid(3B15D611-CD57-11d1-B44C-44750B000000),
        HELP(mssnapr_MMCColumnHeaders),
    ]
    coclass MMCColumnHeaders
    {
        [default] interface IMMCColumnHeaders;
    };

    //=---------------------------------------------------------------------=
    //                      MMC Column Header Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(3B15D612-CD57-11d1-B44C-44750B000000),
        dual,
        hidden,
        oleautomation,
        nonextensible,
        HELP(mssnapr_IMMCColumnHeader)
    ]
    interface IMMCColumnHeader : IDispatch
    {
        // properties:

        //
        // Index
        //
        [
            id(DISPID_COLUMNHEADER_INDEX),
            propget,
            HELP(mssnapr_IMMCColumnHeader_Index)
        ]
        HRESULT Index([out, retval] long *plIndex);

        [
            id(DISPID_COLUMNHEADER_INDEX),
            propput,
            hidden,
            restricted
        ]
        HRESULT Index([in] long lIndex);

        //
        // Key
        //
        [
            id(DISPID_COLUMNHEADER_KEY),
            propget,
            HELP(mssnapr_IMMCColumnHeader_Key)
        ]
        HRESULT Key([out, retval] BSTR *pbstrKey);

        [
            id(DISPID_COLUMNHEADER_KEY),
            propput,
            HELP(mssnapr_IMMCColumnHeader_Key)
        ]
        HRESULT Key([in] BSTR bstrKey);

        //
        // Tag
        //
        [
            id(DISPID_COLUMNHEADER_TAG),
            propget,
            HELP(mssnapr_IMMCColumnHeader_Tag)
        ]
        HRESULT Tag([out, retval] VARIANT *pvarTag);

        [
            id(DISPID_COLUMNHEADER_TAG),
            propput,
            HELP(mssnapr_IMMCColumnHeader_Tag)
        ]
        HRESULT Tag([in] VARIANT varTag);

        [
            id(DISPID_COLUMNHEADER_TAG),
            propputref,
            HELP(mssnapr_IMMCColumnHeader_Tag)
        ]
        HRESULT Tag([in] VARIANT varTag);

        //
        // Text
        //
        [
            id(DISPID_VALUE),
            propget,
            HELP(mssnapr_IMMCColumnHeader_Text)
        ]
        HRESULT Text([out, retval] BSTR *pbstrText);

        [
            id(DISPID_VALUE),
            propput,
            HELP(mssnapr_IMMCColumnHeader_Text)
        ]
        HRESULT Text([in] BSTR bstrText);

        //
        // Width
        //
        [
            id(DISPID_COLUMNHEADER_WIDTH),
            propget,
            HELP(mssnapr_IMMCColumnHeader_Width)
        ]
        HRESULT Width([out, retval] short *psWidth);

        [
            id(DISPID_COLUMNHEADER_WIDTH),
            propput,
            HELP(mssnapr_IMMCColumnHeader_Width)
        ]
        HRESULT Width([in] short sWidth);

        //
        // Alignment
        //
        [
            id(DISPID_COLUMNHEADER_ALIGNMENT),
            propget,
            HELP(mssnapr_IMMCColumnHeader_Alignment)
        ]
        HRESULT Alignment([out, retval] SnapInColumnAlignmentConstants *pAlignment);

        // put is only used internally when creating a new header
        [
            id(DISPID_COLUMNHEADER_ALIGNMENT),
            propput,
            hidden
        ]
        HRESULT Alignment([in] SnapInColumnAlignmentConstants Alignment);

        //
        // Hidden
        //
        [
            id(DISPID_COLUMNHEADER_HIDDEN),
            propget,
            HELP(mssnapr_IMMCColumnHeader_Hidden)
        ]
        HRESULT Hidden([out, retval] VARIANT_BOOL *pfvarHidden);

        [
            id(DISPID_COLUMNHEADER_HIDDEN),
            propput,
            HELP(mssnapr_IMMCColumnHeader_Hidden)
        ]
        HRESULT Hidden([in] VARIANT_BOOL fvarHidden);

        //
        // TextFilter
        //
        [
            id(DISPID_COLUMNHEADER_TEXT_FILTER),
            propget,
            HELP(mssnapr_IMMCColumnHeader_TextFilter)
        ]
        HRESULT TextFilter([out, retval] VARIANT *pvarTextFilter);

        [
            id(DISPID_COLUMNHEADER_TEXT_FILTER),
            propput,
            HELP(mssnapr_IMMCColumnHeader_TextFilter)
        ]
        HRESULT TextFilter([in] VARIANT varTextFilter);

        //
        // TextFilterMaxLen
        //
        [
            id(DISPID_COLUMNHEADER_TEXT_FILTER_MAX_LEN),
            propget,
            HELP(mssnapr_IMMCColumnHeader_TextFilterMaxLen)
        ]
        HRESULT TextFilterMaxLen([out, retval] long *plTextFilterMaxLen);

        [
            id(DISPID_COLUMNHEADER_TEXT_FILTER_MAX_LEN),
            propput,
            HELP(mssnapr_IMMCColumnHeader_TextFilterMaxLen)
        ]
        HRESULT TextFilterMaxLen([in] long lTextFilterMaxLen);

        //
        // NumericFilter
        //
        [
            id(DISPID_COLUMNHEADER_NUMERIC_FILTER),
            propget,
            HELP(mssnapr_IMMCColumnHeader_NumericFilter)
        ]
        HRESULT NumericFilter([out, retval] VARIANT *pvarFilter);

        [
            id(DISPID_COLUMNHEADER_NUMERIC_FILTER),
            propput,
            HELP(mssnapr_IMMCColumnHeader_NumericFilter)
        ]
        HRESULT NumericFilter([in] VARIANT varFilter);

        // methods:

    };

    [
        uuid(3B15D613-CD57-11d1-B44C-44750B000000),
        HELP(mssnapr_MMCColumnHeader),
    ]
    coclass MMCColumnHeader
    {
        [default] interface IMMCColumnHeader;
    };


    //=---------------------------------------------------------------------=
    //                    ColumnSettings Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(3D4DBB00-9203-45A1-B3D3-531405160DB7),
        dual,
        hidden,
        oleautomation,
        nonextensible,
        HELP(mssnapr_IColumnSettings)
    ]
    interface IColumnSettings : IDispatch
    {
        // properties:

        //
        // ColumnSetID
        //
        [
            id(DISPID_COLUMNSETTINGS_COLUMN_SET_ID),
            propget,
            HELP(mssnapr_IColumnSettings_ColumnSetID)
        ]
        HRESULT _stdcall ColumnSetID([out, retval] BSTR *pbstrColumnSetID);

        //
        // ColumnSetID
        //
        [
            id(DISPID_COLUMNSETTINGS_COLUMN_SET_ID),
            propput,
            HELP(mssnapr_IColumnSettings_ColumnSetID)
        ]
        HRESULT _stdcall ColumnSetID([in] BSTR bstrColumnSetID);

        //
        // Count
        //
        [
            id(DISPID_COLUMNSETTINGS_COUNT),
            propget,
            HELP(mssnapr_IColumnSettings_Count)
        ]
        HRESULT _stdcall Count([out, retval] long *plCount);


        //
        // Item
        //
        [
            id(DISPID_VALUE),
            propget,
            HELP(mssnapr_IColumnSettings_Item)
        ]
        HRESULT _stdcall Item([in] VARIANT                  Index,
                              [out, retval] ColumnSetting **ppColumnSetting);

        //
        // NewEnum
        //
        [
            id(DISPID_NEWENUM),
            propget,
            hidden
        ]
        HRESULT _NewEnum([out, retval] IUnknown **ppunkEnum);

        // methods:

        //
        // Add
        //
        [
            id(DISPID_COLUMNSETTINGS_ADD),
            HELP(mssnapr_IColumnSettings_Add)
        ]
        HRESULT Add([in, optional] VARIANT         Index,
                    [in, optional] VARIANT         Key,
                    [in, optional] VARIANT         Width,
                    [in, optional] VARIANT         Hidden,
                    [in, optional] VARIANT         Position,
                    [out, retval]  ColumnSetting **ppColumnSetting);

        //
        // Clear
        //
        [
            id(DISPID_COLUMNSETTINGS_CLEAR),
            HELP(mssnapr_IColumnSettings_Clear)
        ]
        HRESULT _stdcall Clear();

        //
        // Remove
        //
        [
            id(DISPID_COLUMNSETTINGS_REMOVE),
            HELP(mssnapr_IColumnSettings_Remove)
        ]
        HRESULT _stdcall Remove([in] VARIANT Index);

        //
        // Persist
        //
        [
            id(DISPID_COLUMNSETTINGS_PERSIST),
            HELP(mssnapr_IColumnSettings_Persist)
        ]
        HRESULT _stdcall Persist();
    };

    [
        uuid(7FAFC9B9-B3B4-4A56-810A-B2C72578DFC6),
        HELP(mssnapr_ColumnSettings),
    ]
    coclass ColumnSettings
    {
        [default] interface IColumnSettings;
    };

    //=---------------------------------------------------------------------=
    //                      ColumnSetting Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(61CCA458-28CA-48BE-8D08-BEF0401A5DC4),
        dual,
        hidden,
        oleautomation,
        nonextensible,
        HELP(mssnapr_IColumnSetting)
    ]
    interface IColumnSetting : IDispatch
    {
        // properties:

        //
        // Index
        //
        [
            id(DISPID_COLUMNSETTING_INDEX),
            propget,
            HELP(mssnapr_IColumnSetting_Index)
        ]
        HRESULT Index([out, retval] long *plIndex);

        [
            id(DISPID_COLUMNSETTING_INDEX),
            propput,
            hidden,
            restricted
        ]
        HRESULT Index([in] long lIndex);

        //
        // Key
        //
        [
            id(DISPID_COLUMNSETTING_KEY),
            propget,
            HELP(mssnapr_IColumnSetting_Key)
        ]
        HRESULT Key([out, retval] BSTR *pbstrKey);

        [
            id(DISPID_COLUMNSETTING_KEY),
            propput,
            HELP(mssnapr_IColumnSetting_Key)
        ]
        HRESULT Key([in] BSTR bstrKey);

        //
        // Width
        //
        [
            id(DISPID_COLUMNSETTING_WIDTH),
            propget,
            HELP(mssnapr_IColumnSetting_Width)
        ]
        HRESULT Width([out, retval] long *plWidth);

        [
            id(DISPID_COLUMNSETTING_WIDTH),
            propput,
            HELP(mssnapr_IColumnSetting_Width)
        ]
        HRESULT Width([in] long lWidth);

        //
        // Hidden
        //
        [
            id(DISPID_COLUMNSETTING_HIDDEN),
            propget,
            HELP(mssnapr_IColumnSetting_Hidden)
        ]
        HRESULT Hidden([out, retval] VARIANT_BOOL *pfvarHidden);

        [
            id(DISPID_COLUMNSETTING_HIDDEN),
            propput,
            HELP(mssnapr_IColumnSetting_Hidden)
        ]
        HRESULT Hidden([in] VARIANT_BOOL fvarHidden);

        //
        // Position
        //
        [
            id(DISPID_COLUMNSETTING_POSITION),
            propget,
            HELP(mssnapr_IColumnSetting_Position)
        ]
        HRESULT Position([out, retval] long *plPosition);

        [
            id(DISPID_COLUMNSETTING_POSITION),
            propput,
            HELP(mssnapr_IColumnSetting_Position)
        ]
        HRESULT Position([in] long lPosition);

        // methods:

    };

    [
        uuid(D9F00100-295E-46E1-89F5-1066D6F86BC2),
        HELP(mssnapr_ColumnSetting),
    ]
    coclass ColumnSetting
    {
        [default] interface IColumnSetting;
    };




    //=---------------------------------------------------------------------=
    //                    SortKeys Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(E66C8BAC-AC4E-4652-9857-16AB573720E1),
        dual,
        hidden,
        oleautomation,
        nonextensible,
        HELP(mssnapr_ISortKeys)
    ]
    interface ISortKeys : IDispatch
    {
        // properties:

        //
        // ColumnSetID
        //
        [
            id(DISPID_SORTKEYS_COLUMN_SET_ID),
            propget,
            HELP(mssnapr_ISortKeys_ColumnSetID)
        ]
        HRESULT _stdcall ColumnSetID([out, retval] BSTR *pbstrColumnSetID);

        //
        // ColumnSetID
        //
        [
            id(DISPID_SORTKEYS_COLUMN_SET_ID),
            propput,
            HELP(mssnapr_ISortKeys_ColumnSetID)
        ]
        HRESULT _stdcall ColumnSetID([in] BSTR bstrColumnSetID);

        //
        // Count
        //
        [
            id(DISPID_SORTKEYS_COUNT),
            propget,
            HELP(mssnapr_ISortKeys_Count)
        ]
        HRESULT _stdcall Count([out, retval] long *plCount);


        //
        // Item
        //
        [
            id(DISPID_VALUE),
            propget,
            HELP(mssnapr_ISortKeys_Item)
        ]
        HRESULT _stdcall Item([in] VARIANT                  Index,
                              [out, retval] SortKey **ppSortKey);

        //
        // NewEnum
        //
        [
            id(DISPID_NEWENUM),
            propget,
            hidden
        ]
        HRESULT _NewEnum([out, retval] IUnknown **ppunkEnum);

        // methods:

        //
        // Add
        //
        [
            id(DISPID_SORTKEYS_ADD),
            HELP(mssnapr_ISortKeys_Add)
        ]
        HRESULT Add([in, optional] VARIANT   Index,
                    [in, optional] VARIANT   Key,
                    [in, optional] VARIANT   Column,
                    [in, optional] VARIANT   SortOrder,
                    [in, optional] VARIANT   SortIcon,
                    [out, retval]  SortKey **ppSortKey);

        //
        // Clear
        //
        [
            id(DISPID_SORTKEYS_CLEAR),
            HELP(mssnapr_ISortKeys_Clear)
        ]
        HRESULT _stdcall Clear();

        //
        // Remove
        //
        [
            id(DISPID_SORTKEYS_REMOVE),
            HELP(mssnapr_ISortKeys_Remove)
        ]
        HRESULT _stdcall Remove([in] VARIANT Index);

        //
        // Persist
        //
        [
            id(DISPID_SORTKEYS_PERSIST),
            HELP(mssnapr_ISortKeys_Persist)
        ]
        HRESULT _stdcall Persist();
    };

    [
        uuid(22D886DB-D3FB-4CB0-AD56-65794167C64C),
        HELP(mssnapr_SortKeys),
    ]
    coclass SortKeys
    {
        [default] interface ISortKeys;
    };

    //=---------------------------------------------------------------------=
    //                      SortKey Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(2280DE97-CB50-4838-A7E7-F46BA8C1F479),
        dual,
        hidden,
        oleautomation,
        nonextensible,
        HELP(mssnapr_ISortKey)
    ]
    interface ISortKey : IDispatch
    {
        // properties:

        //
        // Index
        //
        [
            id(DISPID_SORTKEY_INDEX),
            propget,
            HELP(mssnapr_ISortKey_Index)
        ]
        HRESULT Index([out, retval] long *plIndex);

        [
            id(DISPID_SORTKEY_INDEX),
            propput,
            hidden,
            restricted
        ]
        HRESULT Index([in] long lIndex);

        //
        // Key
        //
        [
            id(DISPID_SORTKEY_KEY),
            propget,
            HELP(mssnapr_ISortKey_Key)
        ]
        HRESULT Key([out, retval] BSTR *pbstrKey);

        [
            id(DISPID_SORTKEY_KEY),
            propput,
            HELP(mssnapr_ISortKey_Key)
        ]
        HRESULT Key([in] BSTR bstrKey);

        //
        // Column
        //
        [
            id(DISPID_SORTKEY_COLUMN),
            propget,
            HELP(mssnapr_ISortKey_Column)
        ]
        HRESULT Column([out, retval] long *plColumn);

        [
            id(DISPID_SORTKEY_COLUMN),
            propput,
            HELP(mssnapr_ISortKey_Column)
        ]
        HRESULT Column([in] long lColumn);

        //
        // SortOrder
        //
        [
            id(DISPID_SORTKEY_SORTORDER),
            propget,
            HELP(mssnapr_ISortKey_SortOrder)
        ]
        HRESULT SortOrder([out, retval] SnapInSortOrderConstants *pSortOrder);

        [
            id(DISPID_SORTKEY_SORTORDER),
            propput,
            HELP(mssnapr_ISortKey_SortOrder)
        ]
        HRESULT SortOrder([in] SnapInSortOrderConstants SortOrder);

        //
        // SortIcon
        //
        [
            id(DISPID_SORTKEY_SORTICON),
            propget,
            HELP(mssnapr_ISortKey_SortIcon)
        ]
        HRESULT SortIcon([out, retval] VARIANT_BOOL *pfvarSortIcon);

        [
            id(DISPID_SORTKEY_SORTICON),
            propput,
            HELP(mssnapr_ISortKey_SortIcon)
        ]
        HRESULT SortIcon([in] VARIANT_BOOL fvarSortIcon);

        // methods:
    };

    [
        uuid(9EC0AFA1-5608-4948-A335-98F4BA6C9266),
        HELP(mssnapr_SortKey),
    ]
    coclass SortKey
    {
        [default] interface ISortKey;
    };


#if defined(USING_SNAPINDATA)

    //=---------------------------------------------------------------------=
    //                      SnapIn Data Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(66B409B0-EA78-11d1-B466-10AD50000000),
        dual,
        hidden,
        oleautomation,
        nonextensible,
        hidden,
        HELP(mssnapr_ISnapInData)
    ]
    interface ISnapInData : IDispatch
    {
        // properties:

        //
        // Item
        //
        [
            id(DISPID_VALUE),
            propget,
            HELP(mssnapr_ISnapInData_Item)
        ]
        HRESULT _stdcall Item([in] BSTR              Property,
                              [out, retval] VARIANT *pValue);

        [
            id(DISPID_VALUE),
            propput,
            HELP(mssnapr_ISnapInData_Item)
        ]
        HRESULT _stdcall Item([in] BSTR    Property,
                              [in] VARIANT Value);

        [
            id(DISPID_VALUE),
            propputref,
            HELP(mssnapr_ISnapInData_Item)
        ]
        HRESULT _stdcall Item([in] BSTR    Property,
                              [in] VARIANT Value);

        //
        // NewEnum
        //
        [
            id(DISPID_NEWENUM),
            propget,
            hidden
        ]
        HRESULT _NewEnum([out, retval] IUnknown **ppunkEnum);

        // methods:

        //
        // Clear
        //
        [
            id(DISPID_SNAPINDATA_CLEAR),
            HELP(mssnapr_ISnapInData_Clear)
        ]
        HRESULT _stdcall Clear();

        //
        // Remove
        //
        [
            id(DISPID_SNAPINDATA_REMOVE),
            HELP(mssnapr_ISnapInData_Remove)
        ]
        HRESULT _stdcall Remove([in] BSTR Property);

    };

    [
        uuid(66B409B1-EA78-11d1-B466-10AD50000000),
        HELP(mssnapr_SnapInData)
    ]
    coclass SnapInData
    {
        [default] interface ISnapInData;
    };

#endif

    //=---------------------------------------------------------------------=
    //                   MMC Data Objects Collection
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(1D686372-FA5B-11d1-9783-8A7820524153),
        dual,
        hidden,
        oleautomation,
        nonextensible,
        HELP(mssnapr_IMMCDataObjects)
    ]
    interface IMMCDataObjects : IDispatch
    {
        // properties:

        //
        // Count
        //
        [
            id(DISPID_DATAOBJECTS_COUNT),
            propget,
            HELP(mssnapr_IMMCDataObjects_Count)
        ]
        HRESULT _stdcall Count([out, retval] long *plCount);

        //
        // Item
        //
        [
            id(DISPID_VALUE),
            propget,
            HELP(mssnapr_IMMCDataObjects_Item)
        ]
        HRESULT _stdcall Item([in] VARIANT                  Index,
                              [out, retval] MMCDataObject **ppMMCDataObject);

        // methods:

        //
        // Add
        //
        [
            id(DISPID_DATAOBJECTS_ADD),
            HELP(mssnapr_IMMCDataObjects_Add)
        ]
        HRESULT _stdcall Add([in, optional] VARIANT         Index,
                             [in, optional] VARIANT         Key,
                             [out, retval]  MMCDataObject **ppMMCDataObject);

        //
        // Clear
        //
        [
            id(DISPID_DATAOBJECTS_CLEAR),
            HELP(mssnapr_IMMCDataObjects_Clear)
        ]
        HRESULT _stdcall Clear();

        //
        // Remove
        //
        [
            id(DISPID_DATAOBJECTS_REMOVE),
            HELP(mssnapr_IMMCDataObjects_Remove)
        ]
        HRESULT _stdcall Remove([in] VARIANT Index);

    };

    [
        uuid(1D686373-FA5B-11d1-9783-8A7820524153),
        HELP(mssnapr_MMCDataObjects),
        noncreatable
    ]
    coclass MMCDataObjects
    {
        [default] interface IMMCDataObjects;
    };


    //=---------------------------------------------------------------------=
    //                      MMC Data Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(91CC37D2-CE2B-11d1-B44D-7E92AF000000),
        dual,
        hidden,
        oleautomation,
        nonextensible,
        HELP(mssnapr_IMMCDataObject)
    ]
    interface IMMCDataObject : IDispatch
    {
        // properties:

        //
        // Index
        //
        [
            id(DISPID_DATAOBJECT_INDEX),
            propget,
            HELP(mssnapr_IMMCDataObject_Index)
        ]
        HRESULT Index([out, retval] long *plIndex);

        [
            id(DISPID_DATAOBJECT_INDEX),
            propput,
            hidden,
            restricted
        ]
        HRESULT Index([in] long lIndex);

        //
        // Key
        //
        [
            id(DISPID_DATAOBJECT_KEY),
            propget,
            HELP(mssnapr_IMMCDataObject_Key)
        ]
        HRESULT Key([out, retval] BSTR *pbstrKey);

        [
            id(DISPID_DATAOBJECT_KEY),
            propput,
            HELP(mssnapr_IMMCDataObject_Key)
        ]
        HRESULT Key([in] BSTR bstrKey);

#if defined(USING_SNAPINDATA)

        //
        // DefaultFormat
        //
        [
            id(DISPID_VALUE),
            propget,
            HELP(mssnapr_IMMCDataObject_DefaultFormat)
        ]
        HRESULT _stdcall DefaultFormat([out, retval] ISnapInData **ppiSnapInData);

#endif
        //
        // ObjectTypes
        //
        [
            id(DISPID_DATAOBJECT_OBJECT_TYPES),
            propget,
            HELP(mssnapr_IMMCDataObject_ObjectTypes)
        ]
        HRESULT _stdcall ObjectTypes([out, retval] SAFEARRAY (BSTR) *ppsaObjectTypes);

        // methods:

        //
        // Clear
        //
        [
            id(DISPID_DATAOBJECT_CLEAR),
            HELP(mssnapr_IMMCDataObject_Clear)
        ]
        HRESULT _stdcall Clear();

#if defined(USING_SNAPINDATA)

        //
        // GetData
        //
        [
            id(DISPID_DATAOBJECT_GET_DATA),
            HELP(mssnapr_IMMCDataObject_GetData)
        ]
        HRESULT _stdcall GetData([in] BSTR                   Format,
                                 [out, retval] ISnapInData **ppiSnapInData);

        //
        // GetRawData
        //
        [
            id(DISPID_DATAOBJECT_GET_RAW_DATA),
            HELP(mssnapr_IMMCDataObject_GetRawData)
        ]
        HRESULT _stdcall GetRawData([in] BSTR              Format,
                                    [out, retval] VARIANT *pvarData);

#else
        //
        // GetData
        //
        [
            id(DISPID_DATAOBJECT_GET_DATA),
            HELP(mssnapr_IMMCDataObject_GetData)
        ]
        HRESULT _stdcall GetData([in] BSTR               Format,
                                 [in, optional] VARIANT  MaximumLength,
                                 [out, retval] VARIANT  *pvarData);

#endif
        //
        // GetFormat
        //
        [
            id(DISPID_DATAOBJECT_GET_FORMAT),
            HELP(mssnapr_IMMCDataObject_GetFormat)
        ]
        HRESULT _stdcall GetFormat([in] BSTR                   Format,
                                   [out, retval] VARIANT_BOOL *pfvarHaveFormat);
#if defined(USING_SNAPINDATA)

        //
        // SetData
        //
        [
            id(DISPID_DATAOBJECT_SET_DATA),
            HELP(mssnapr_IMMCDataObject_SetData)
        ]
        HRESULT _stdcall SetData([in] ISnapInData *Data,
                                 [in] BSTR         Format);

        //
        // SetRawData
        //
        [
            id(DISPID_DATAOBJECT_SET_RAW_DATA),
            HELP(mssnapr_IMMCDataObject_SetRawData)
        ]
        HRESULT _stdcall SetRawData([in] VARIANT Data,
                                    [in] BSTR    Format);

#else
        //
        // SetData
        //
        [
            id(DISPID_DATAOBJECT_SET_DATA),
            HELP(mssnapr_IMMCDataObject_SetData)
        ]
        HRESULT _stdcall SetData([in] VARIANT           Data,
                                 [in] BSTR              Format,
                                 [in, optional] VARIANT ObjectType);

#endif

        //
        // FormatData
        //
        [
            id(DISPID_DATAOBJECT_FORMAT_DATA),
            HELP(mssnapr_ISnapIn_FormatData)
        ]
        HRESULT _stdcall FormatData(
                   [in]                VARIANT                Data,
                   [in]                long                   StartingIndex,
                   [in]                SnapInFormatConstants  Format,
                   [optional, in, out] VARIANT               *BytesUsed,
                   [out, retval]       VARIANT               *pvarFormattedData);

    };

    [
        uuid(91CC37D3-CE2B-11d1-B44D-7E92AF000000),
        HELP(mssnapr_MMCDataObject),
    ]
    coclass MMCDataObject
    {
        [default] interface IMMCDataObject;
    };

    //=---------------------------------------------------------------------=
    //                      MMC Clipboard Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(1D686374-FA5B-11d1-9783-8A7820524153),
        dual,
        hidden,
        oleautomation,
        nonextensible,
        HELP(mssnapr_IMMCClipboard)
    ]
    interface IMMCClipboard : IDispatch
    {
        // properties:

        //
        // SelectionType
        //
        [
            id(DISPID_CLIPBOARD_SELECTION_TYPE),
            propget,
            HELP(mssnapr_IMMCClipboard_SelectionType)
        ]
        HRESULT _stdcall SelectionType([out, retval] SnapInSelectionTypeConstants *pType);

        //
        // ScopeItems
        //
        [
            id(DISPID_CLIPBOARD_SCOPEITEMS),
            propget,
            HELP(mssnapr_IMMCClipboard_ScopeItems)
        ]
        HRESULT _stdcall ScopeItems([out, retval] ScopeItems **ppScopeItems);

        //
        // ListItems
        //
        [
            id(DISPID_CLIPBOARD_LISTITEMS),
            propget,
            HELP(mssnapr_IMMCClipboard_ListItems)
        ]
        HRESULT _stdcall ListItems([out, retval] MMCListItems **ppMMCListItems);

        //
        // DataObjects
        //
        [
            id(DISPID_CLIPBOARD_DATAOBJECTS),
            propget,
            HELP(mssnapr_IMMCClipboard_DataObjects)
        ]
        HRESULT _stdcall DataObjects([out, retval] MMCDataObjects **ppMMCDataObjects);

        // methods:
    };

    [
        uuid(1D686375-FA5B-11d1-9783-8A7820524153),
        HELP(mssnapr_MMCClipboard),
        noncreatable
    ]
    coclass MMCClipboard
    {
        [default] interface IMMCClipboard;
    };


    //=---------------------------------------------------------------------=
    //                      MMC Menu Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(91CC37D4-CE2B-11d1-B44D-7E92AF000000),
        dual,
        oleautomation,
        hidden,
        nonextensible,
        HELP(mssnapr_IMMCMenu)
    ]
    interface IMMCMenu : IDispatch
    {
        // properties:

        //
        // Name
        //
        [
            id(DISPID_VALUE),
            propget,
            HELP(mssnapr_IMMCMenu_Name)
        ]
        HRESULT _stdcall Name([out, retval] BSTR *pbstrName);

        [
            id(DISPID_VALUE),
            propput,
            HELP(mssnapr_IMMCMenu_Name)
        ]
        HRESULT _stdcall Name([in] BSTR bstrName);

        //
        // Index
        //
        [
            id(DISPID_MENU_INDEX),
            propget,
            HELP(mssnapr_IMMCMenu_Index)
        ]
        HRESULT Index([out, retval] long *plIndex);

        [
            id(DISPID_MENU_INDEX),
            propput,
            HELP(mssnapr_IMMCMenu_Index)
        ]
        HRESULT Index([in] long lIndex);

        //
        // Key
        //
        [
            id(DISPID_MENU_KEY),
            propget,
            HELP(mssnapr_IMMCMenu_Key)
        ]
        HRESULT Key([out, retval] BSTR *pbstrKey);

        [
            id(DISPID_MENU_KEY),
            propput,
            HELP(mssnapr_IMMCMenu_Key)
        ]
        HRESULT Key([in] BSTR bstrKey);

        //
        //
        // Caption
        //
        [
            id(DISPID_MENU_CAPTION),
            propget,
            HELP(mssnapr_IMMCMenu_Caption)
        ]
        HRESULT _stdcall Caption([out, retval] BSTR *pbstrCaption);

        [
            id(DISPID_MENU_CAPTION),
            propput,
            HELP(mssnapr_IMMCMenu_Caption)
        ]
        HRESULT _stdcall Caption([in] BSTR bstrCaption);

        //
        // Visible
        //
        [
            id(DISPID_MENU_VISIBLE),
            propget,
            HELP(mssnapr_IMMCMenu_Visible)
        ]
        HRESULT _stdcall Visible([out, retval] VARIANT_BOOL *pfVisible);

        [
            id(DISPID_MENU_VISIBLE),
            propput,
            HELP(mssnapr_IMMCMenu_Visible)
        ]
        HRESULT _stdcall Visible([in] VARIANT_BOOL fVisible);


        //
        // Checked
        //
        [
            id(DISPID_MENU_CHECKED),
            propget,
            HELP(mssnapr_IMMCMenu_Checked)
        ]
        HRESULT _stdcall Checked([out, retval] VARIANT_BOOL *pfChecked);

        [
            id(DISPID_MENU_CHECKED),
            propput,
            HELP(mssnapr_IMMCMenu_Checked)
        ]
        HRESULT _stdcall Checked([in] VARIANT_BOOL fChecked);

        //
        // Enabled
        //
        [
            id(DISPID_MENU_ENABLED),
            propget,
            HELP(mssnapr_IMMCMenu_Enabled)
        ]
        HRESULT _stdcall Enabled([out, retval] VARIANT_BOOL *pfEnabled);

        [
            id(DISPID_MENU_ENABLED),
            propput,
            HELP(mssnapr_IMMCMenu_Enabled)
        ]
        HRESULT _stdcall Enabled([in] VARIANT_BOOL fEnabled);

        //
        // Grayed
        //
        [
            id(DISPID_MENU_GRAYED),
            propget,
            HELP(mssnapr_IMMCMenu_Grayed)
        ]
        HRESULT _stdcall Grayed([out, retval] VARIANT_BOOL *pfGrayed);

        [
            id(DISPID_MENU_GRAYED),
            propput,
            HELP(mssnapr_IMMCMenu_Grayed)
        ]
        HRESULT _stdcall Grayed([in] VARIANT_BOOL fGrayed);

        //
        // MenuBreak
        //
        [
            id(DISPID_MENU_MENU_BREAK),
            propget,
            HELP(mssnapr_IMMCMenu_MenuBreak)
        ]
        HRESULT _stdcall MenuBreak([out, retval] VARIANT_BOOL *pfMenuBreak);

        [
            id(DISPID_MENU_MENU_BREAK),
            propput,
            HELP(mssnapr_IMMCMenu_MenuBreak)
        ]
        HRESULT _stdcall MenuBreak([in] VARIANT_BOOL fMenuBreak);

        //
        // MenuBarBreak
        //
        [
            id(DISPID_MENU_MENU_BAR_BREAK),
            propget,
            HELP(mssnapr_IMMCMenu_MenuBarBreak)
        ]
        HRESULT _stdcall MenuBarBreak([out, retval] VARIANT_BOOL *pfMenuBarBreak);

        [
            id(DISPID_MENU_MENU_BAR_BREAK),
            propput,
            HELP(mssnapr_IMMCMenu_MenuBarBreak)
        ]
        HRESULT _stdcall MenuBarBreak([in] VARIANT_BOOL fMenuBarBreak);

        //
        // Default
        //
        [
            id(DISPID_MENU_DEFAULT),
            propget,
            HELP(mssnapr_IMMCMenu_Default)
        ]
        HRESULT _stdcall Default([out, retval] VARIANT_BOOL *pfDefault);

        [
            id(DISPID_MENU_DEFAULT),
            propput,
            HELP(mssnapr_IMMCMenu_Default)
        ]
        HRESULT _stdcall Default([in] VARIANT_BOOL fDefault);

        //
        // Tag
        //
        [
            id(DISPID_MENU_TAG),
            propget,
            HELP(mssnapr_IMMCMenu_Tag)
        ]
        HRESULT Tag([out, retval] VARIANT *pvarTag);

        [
            id(DISPID_MENU_TAG),
            propput,
            HELP(mssnapr_IMMCMenu_Tag)
        ]
        HRESULT Tag([in] VARIANT varTag);

        [
            id(DISPID_MENU_TAG),
            propputref,
            HELP(mssnapr_IMMCMenu_Tag)
        ]
        HRESULT Tag([in] VARIANT varTag);

        //
        // StatusBarText
        //
        [
            id(DISPID_MENU_STATUS_BAR_TEXT),
            propget,
            HELP(mssnapr_IMMCMenu_StatusBarText)
        ]
        HRESULT _stdcall StatusBarText([out, retval] BSTR *pbstrStatusBarText);

        [
            id(DISPID_MENU_STATUS_BAR_TEXT),
            propput,
            HELP(mssnapr_IMMCMenu_StatusBarText)
        ]
        HRESULT _stdcall StatusBarText([in] BSTR bstrStatusBarText);

        //
        // Children
        //
        [
            id(DISPID_MENU_CHILDREN),
            propget,
            nonbrowsable,
            HELP(mssnapr_IMMCMenu_Chldren)
        ]
        HRESULT _stdcall Children([out, retval] MMCMenus **ppMMCMenus);

        // methods:
    };

    [
        uuid(91CC37DE-CE2B-11d1-B44D-7E92AF000000),
        hidden,
        HELP(mssnapr_DMMCMenuEvents)
    ]
    dispinterface DMMCMenuEvents
    {
        properties:

        methods:

        //
        // Click
        //
        [
            id(DISPID_MENU_EVENT_CLICK),
            HELP(mssnapr_DMMCMenuEvents_Click)
        ]
        void Click([in] int           Index,
                   [in] MMCClipboard *Selection);
    };

    [
        uuid(91CC37D5-CE2B-11d1-B44D-7E92AF000000),
        HELP(mssnapr_MMCMenu),
    ]
    coclass MMCMenu
    {
        [default] interface IMMCMenu;
        [default, source] dispinterface DMMCMenuEvents;
    };

    //=---------------------------------------------------------------------=
    //                     MMCMenus Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(B38E6F10-27FD-11D3-AA41-00104B880587),
        dual,
        oleautomation,
        nonextensible,
        hidden,
        HELP(mssnapr_MMCMenus)
    ]
    interface IMMCMenus : IDispatch
    {
        // properties:

        //
        // Count
        //
        [
            id(DISPID_MENUS_COUNT),
            propget,
            HELP(mssnapr_IMMCMenus_Count)
        ]
        HRESULT _stdcall Count([out, retval] long *plCount);

        //
        // Item
        //
        [
            id(DISPID_VALUE),
            propget,
            HELP(mssnapr_IMMCMenus_Item)
        ]
        HRESULT _stdcall Item([in] VARIANT Index,
                              [out, retval] MMCMenu **ppMMCMenu);

        //
        // NewEnum
        //
        [
            id(DISPID_NEWENUM),
            propget,
            hidden
        ]
        HRESULT _NewEnum([out, retval] IUnknown **ppunkEnum);

        // methods:

        //
        // Add
        //
        [
            id(DISPID_MENUS_ADD),
            HELP(mssnapr_IMMCMenus_Add)
        ]
        HRESULT Add([in, optional] VARIANT    Index,
                    [in, optional] VARIANT    Key,
                    [out, retval]  IMMCMenu **ppiMMCMenu);

        //
        // AddExisting
        //
        [
            id(DISPID_MENUS_ADD_EXISTING),
            hidden,
            restricted
        ]
        HRESULT AddExisting(IMMCMenu *piMMCMenu, VARIANT Index);

        //
        // Clear
        //
        [
            id(DISPID_MENUS_CLEAR),
            HELP(mssnapr_IMMCMenus_Clear)
        ]
        HRESULT _stdcall Clear();

        //
        // Remove
        //
        [
            id(DISPID_MENUS_REMOVE),
            HELP(mssnapr_IMMCMenus_Remove)
        ]
        HRESULT _stdcall Remove([in] VARIANT Index);

        //
        // Swap
        //
        [
            id(DISPID_MENUS_SWAP),
            hidden,
            restricted
        ]
        HRESULT _stdcall Swap([in] long Index1, [in] long Index2);

    };

    [
        uuid(11517450-27FE-11D3-AA41-00104B880587),
        HELP(mssnapr_MMCMenus)
    ]
    coclass MMCMenus
    {
        [default] interface IMMCMenus;
    };

    //=---------------------------------------------------------------------=
    //                 IContextMenu Interface
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(91CC37D7-CE2B-11d1-B44D-7E92AF000000),
        dual,
        hidden,
        oleautomation,
        nonextensible,
        HELP(mssnapr_IContextMenu)
    ]
    interface IContextMenu : IDispatch
    {
        // properties:

        // methods:

        //
        // AddMenu
        //
        [
            id(DISPID_CONTEXTMENU_ADD_MENU),
            HELP(mssnapr_IContextMenu_AddMenu)
        ]
        HRESULT _stdcall AddMenu([in] MMCMenu *Menu);
    };

    [
        uuid(4FBFD1D1-12CD-11d3-8136-728B02000000),
        HELP(mssnapr_IContextMenu)
    ]
    coclass ContextMenu
    {
        [default] interface IContextMenu;
    };

    //=---------------------------------------------------------------------=
    //                MMCContextMenuProvider Interface
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(486AAF12-E559-11d2-97F1-00104B880587),
        dual,
        oleautomation,
        nonextensible,
        hidden,
        restricted,
        HELP(mssnapr_IMMCContextMenuProvider)
    ]
    interface IMMCContextMenuProvider : IDispatch
    {
        // properties:

        // methods:

        //
        // AddSnapInItems
        //
        [
            id(DISPID_CONTEXTMENUPROVIDER_ADD_SNAPIN_ITEMS),
            HELP(mssnapr_IMMCContextMenuProvider_AddSnapInItems)
        ]
        HRESULT _stdcall AddSnapInItems([in] VARIANT Objects);

        //
        // AddExtensionItems
        //
        [
            id(DISPID_CONTEXTMENUPROVIDER_ADD_EXTENSION_ITEMS),
            HELP(mssnapr_IMMCContextMenuProvider_AddExtensionItems)
        ]
        HRESULT _stdcall AddExtensionItems([in] VARIANT Objects);

        //
        // ShowContextMenu
        //
        [
            id(DISPID_CONTEXTMENUPROVIDER_ADD_SHOW_CONTEXT_MENU),
            HELP(mssnapr_IMMCContextMenuProvider_ShowContextMenu)
        ]
        HRESULT _stdcall ShowContextMenu([in] VARIANT    Objects,
                                         [in] OLE_HANDLE hwnd,
                                         [in] long       xPos,
                                         [in] long       yPos);

        //
        // Clear
        //
        [
            id(DISPID_CONTEXTMENUPROVIDER_CLEAR),
            HELP(mssnapr_IMMCContextMenuProvider_Clear)
        ]
        HRESULT _stdcall Clear();
    };

    [
        hidden,
        restricted,
        uuid(486AAF13-E559-11d2-97F1-00104B880587),
        HELP(mssnapr_IMMCContextMenuProvider),
    ]
    coclass MMCContextMenuProvider
    {
        [default] interface IMMCContextMenuProvider;
    };


    //=---------------------------------------------------------------------=
    //                 IMMCPropertySheet Interface
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(8B034114-FBB2-11d1-9785-EAA220524153),
        dual,
        hidden,
        oleautomation,
        nonextensible,
        hidden,
        HELP(mssnapr_IMMCPropertySheet)
    ]
    interface IMMCPropertySheet : IDispatch
    {
        // properties:

        // methods:

        //
        // AddPage
        //
        [
            id(DISPID_PROPERTYSHEET_ADD_PAGE),
            HELP(mssnapr_IMMCPropertySheet_AddPage)
        ]
        HRESULT _stdcall AddPage([in]           BSTR    PageName,
                                 [in, optional] VARIANT Caption,
                                 [in, optional] VARIANT UseHelpButton,
                                 [in, optional] VARIANT RightToLeft,
                                 [in, optional] VARIANT InitData);

        //
        // AddWizardPage
        //
        [
            id(DISPID_PROPERTYSHEET_ADD_WIZARD_PAGE),
            HELP(mssnapr_IMMCPropertySheet_AddWizardPage)
        ]
        HRESULT _stdcall AddWizardPage(
                                   [in]           BSTR       PageName,
                                   [in]           IDispatch *ConfigurationObject,
                                   [in, optional] VARIANT    UseHelpButton,
                                   [in, optional] VARIANT    RightToLeft,
                                   [in, optional] VARIANT    InitData,
                                   [in, optional] VARIANT    Caption);

        //
        // AddPageProvider
        //
        [
            id(DISPID_PROPERTYSHEET_ADD_PAGE_PROVIDER),
            HELP(mssnapr_IMMCPropertySheet_AddPageProvider)
        ]
        HRESULT _stdcall AddPageProvider([in] BSTR                 CLSIDPageProvider,
                                         [out] long               *hwndSheet,
                                         [out, retval] IDispatch **PageProvider);
        //
        // ChangeCancelToClose
        //
        [
            id(DISPID_PROPERTYSHEET_CHANGE_CANCEL_TO_CLOSE),
            HELP(mssnapr_IMMCPropertySheet_ChangeCancelToClose)
        ]
        HRESULT _stdcall ChangeCancelToClose();

        //
        // InsertPage
        //
        [
            id(DISPID_PROPERTYSHEET_INSERT_PAGE),
            HELP(mssnapr_IMMCPropertySheet_InsertPage)
        ]
        HRESULT _stdcall InsertPage([in]           short   Position,
                                    [in]           BSTR    PageName,
                                    [in, optional] VARIANT Caption,
                                    [in, optional] VARIANT UseHelpButton,
                                    [in, optional] VARIANT RightToLeft,
                                    [in, optional] VARIANT InitData);

        //
        // PressButton
        //
        [
            id(DISPID_PROPERTYSHEET_PRESS_BUTTON),
            HELP(mssnapr_IMMCPropertySheet_PressButton)
        ]
        HRESULT _stdcall PressButton([in] SnapInPropertySheetButtonConstants Button);

        //
        // RecalcPageSizes
        //
        [
            id(DISPID_PROPERTYSHEET_RECALC_PAGE_SIZES),
            HELP(mssnapr_IMMCPropertySheet_RecalcPageSizes)
        ]
        HRESULT _stdcall RecalcPageSizes();

        //
        // RemovePage
        //
        [
            id(DISPID_PROPERTYSHEET_REMOVE_PAGE),
            HELP(mssnapr_IMMCPropertySheet_RemovePage)
        ]
        HRESULT _stdcall RemovePage([in] short Position);

        //
        // ActivatePage
        //
        [
            id(DISPID_PROPERTYSHEET_ACTIVATE_PAGE),
            HELP(mssnapr_IMMCPropertySheet_ActivatePage)
        ]
        HRESULT _stdcall ActivatePage([in] short Position);

        //
        // SetFinishButtonText
        //
        [
            id(DISPID_PROPERTYSHEET_SET_FINISH_BUTTON_TEXT),
            HELP(mssnapr_IMMCPropertySheet_SetFinishButtonText)
        ]
        HRESULT _stdcall SetFinishButtonText([in] BSTR Text);

        //
        // SetTitle
        //
        [
            id(DISPID_PROPERTYSHEET_SET_TITLE),
            HELP(mssnapr_IMMCPropertySheet_SetTitle)
        ]
        HRESULT _stdcall SetTitle([in] BSTR Text, [in] VARIANT_BOOL UsePropertiesForInTitle);

        //
        // SetWizardButtons
        //
        [
            id(DISPID_PROPERTYSHEET_SET_WIZARD_BUTTONS),
            HELP(mssnapr_IMMCPropertySheet_SetWizardButtons)
        ]
        HRESULT _stdcall SetWizardButtons(
                                  [in] VARIANT_BOOL              EnableBack,
                                  [in] WizardPageButtonConstants NextOrFinish);

        //
        // GetPagePosition
        //
        [
            id(DISPID_PROPERTYSHEET_GET_PAGE_POSITION),
            HELP(mssnapr_IMMCPropertySheet_GetPagePosition)
        ]
        HRESULT _stdcall GetPagePosition([in]          long   hwndPage,
                                         [out, retval] short *psPosition);
        //
        // RestartWindows
        //
        [
            id(DISPID_PROPERTYSHEET_RESTART_WINDOWS),
            HELP(mssnapr_IMMCPropertySheet_RestartWindows)
        ]
        HRESULT _stdcall RestartWindows();

        //
        // RebootSystem
        //
        [
            id(DISPID_PROPERTYSHEET_REBOOT_SYSTEM),
            HELP(mssnapr_IMMCPropertySheet_RebootSystem)
        ]
        HRESULT _stdcall RebootSystem();
    };


    [
        uuid(1F243142-88A7-11d2-97DC-00104B880587),
        HELP(mssnapr_IMMCPropertySheet)
    ]
    coclass MMCPropertySheet
    {
        [default] interface IMMCPropertySheet;
    };


    //=---------------------------------------------------------------------=
    //                        IWizardPage Interface
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(E61BE992-7B4C-11d2-97DB-00104B880587),
        dual,
        oleautomation,
        nonextensible,
        HELP(mssnapr_IWizardPage)
    ]
    interface IWizardPage : IDispatch
    {
        // properties:

        // methods:

        //
        // Activate
        //
        [
            id(DISPID_WIZARD_PAGE_ACTIVATE),
            HELP(mssnapr_IWizardPage_Activate)
        ]
        HRESULT _stdcall Activate(
                              [in, out] VARIANT_BOOL              *EnableBack,
                              [in, out] WizardPageButtonConstants *NextOrFinish,
                              [in, out] BSTR                      *FinishText);

        //
        // Back
        //
        [
            id(DISPID_WIZARD_PAGE_BACK),
            HELP(mssnapr_IWizardPage_Back)
        ]
        HRESULT _stdcall Back([in, out] long *NextPage);

        //
        // Next
        //
        [
            id(DISPID_WIZARD_PAGE_NEXT),
            HELP(mssnapr_IWizardPage_Next)
        ]
        HRESULT _stdcall Next([in, out] long *NextPage);

        //
        // Finish
        //
        [
            id(DISPID_WIZARD_PAGE_FINISH),
            HELP(mssnapr_IWizardPage_Finish)
        ]
        HRESULT _stdcall Finish([in, out] VARIANT_BOOL *Allow);
    };


    //=---------------------------------------------------------------------=
    //                 IMMCPropertyPage Interface
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(558720A2-EB7E-11d2-97F3-00104B880587),
        dual,
        oleautomation,
        nonextensible,
        HELP(mssnapr_IMMCPropertyPage)
    ]
    interface IMMCPropertyPage : IDispatch
    {
        // properties:

        // methods:

        //
        // Initialize
        //
        [
            id(DISPID_PROPERTYPAGE_INITIALIZE),
            HELP(mssnapr_IMMCPropertyPage_Initialize)
        ]
        HRESULT _stdcall Initialize([in] VARIANT Data, MMCPropertySheet *PropertySheet);

        //
        // Help
        //
        [
            id(DISPID_PROPERTYPAGE_HELP),
            HELP(mssnapr_IMMCPropertyPage_Help)
        ]
        HRESULT _stdcall Help();

        //
        // GetDialogUnitSize
        //
        [
            id(DISPID_PROPERTYPAGE_GET_DIALOG_UNIT_SIZE),
            HELP(mssnapr_IMMCPropertyPage_GetDialogUnitSize)
        ]
        HRESULT _stdcall GetDialogUnitSize([in, out] VARIANT *Height,
                                           [in, out] VARIANT *Width);
        //
        // QueryCancel
        //
        [
            id(DISPID_PROPERTYPAGE_PAGE_QUERY_CANCEL),
            HELP(mssnapr_IMMCPropertyPage_QueryCancel)
        ]
        HRESULT _stdcall QueryCancel([in, out] VARIANT_BOOL *Allow);

        //
        // Cancel
        //
        [
            id(DISPID_PROPERTYPAGE_PAGE_CANCEL),
            HELP(mssnapr_IMMCPropertyPage_Cancel)
        ]
        HRESULT _stdcall Cancel();

        //
        // Close
        //
        [
            id(DISPID_PROPERTYPAGE_PAGE_CLOSE),
            HELP(mssnapr_IMMCPropertyPage_Close)
        ]
        HRESULT _stdcall Close();
    };

    //=---------------------------------------------------------------------=
    //                MMCPropertySheetProvider Interface
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(19173E92-E783-11d2-97F1-00104B880587),
        dual,
        hidden,
        oleautomation,
        nonextensible,
        hidden,
        HELP(mssnapr_IMMCPropertySheetProvider)
    ]
    interface IMMCPropertySheetProvider : IDispatch
    {
        // properties:

        // methods:

        //
        // CreatePropertySheet
        //
        [
            id(DISPID_PROPERTYSHEETPROVIDER_CREATE_PROPERTY_SHEET),
            HELP(mssnapr_IMMCPropertySheetProvider_CreatePropertySheet)
        ]
        HRESULT _stdcall CreatePropertySheet(
                   [in] BSTR                              Title,
                   [in] SnapInPropertySheetTypeConstants  Type,
                   [in] VARIANT                           Objects,
                   [in, optional] VARIANT                 UsePropertiesForInTitle,
                   [in, optional] VARIANT                 UseApplyNowButton);

        //
        // AddPrimaryPages
        //
        [
            id(DISPID_PROPERTYSHEETPROVIDER_ADD_PRIMARY_PAGES),
            HELP(mssnapr_IMMCPropertySheetProvider_AddPrimaryPages)
        ]
        HRESULT _stdcall AddPrimaryPages([in] VARIANT_BOOL InScopePane);

        //
        // AddExtensionPages
        //
        [
            id(DISPID_PROPERTYSHEETPROVIDER_ADD_EXTENSION_ITEMS),
            HELP(mssnapr_IMMCPropertySheetProvider_AddExtensionPages)
        ]
        HRESULT _stdcall AddExtensionPages();

        //
        // FindPropertySheet
        //
        [
            id(DISPID_PROPERTYSHEETPROVIDER_FIND_PROPERTY_SHEET),
            HELP(mssnapr_IMMCPropertySheetProvider_FindPropertySheet)
        ]
        HRESULT _stdcall FindPropertySheet([in] VARIANT                Objects,
                                           [out, retval] VARIANT_BOOL *pfvarFound);

        //
        // Show
        //
        [
            id(DISPID_PROPERTYSHEETPROVIDER_SHOW),
            HELP(mssnapr_IMMCPropertySheetProvider_Show)
        ]
        HRESULT _stdcall Show([in] int               Page,
                              [in, optional] VARIANT hwnd);

        //
        // Clear
        //
        [
            id(DISPID_PROPERTYSHEETPROVIDER_CLEAR),
            HELP(mssnapr_IMMCPropertySheetProvider_Clear)
        ]
        HRESULT _stdcall Clear();
    };

    [
        uuid(19173E93-E783-11d2-97F1-00104B880587),
        HELP(mssnapr_IMMCPropertySheetProvider)
    ]
    coclass MMCPropertySheetProvider
    {
        [default] interface IMMCPropertySheetProvider;
    };


    //=---------------------------------------------------------------------=
    //                    IMMCControlbar Interface
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(91CC37D8-CE2B-11d1-B44D-7E92AF000000),
        dual,
        oleautomation,
        nonextensible,
        hidden,
        HELP(mssnapr_IMMCControlbar)
    ]
    interface IMMCControlbar : IDispatch
    {
        // properties:

        // methods:

        //
        // Attach
        //
        [
            id(DISPID_CONTROLBAR_ATTACH),
            HELP(mssnapr_IMMCControlbar_Attach)
        ]
        HRESULT _stdcall Attach([in] IDispatch *Control);

        //
        // Detach
        //
        [
            id(DISPID_CONTROLBAR_DETACH),
            HELP(mssnapr_IMMCControlbar_Detach)
        ]
        HRESULT _stdcall Detach([in] IDispatch *Control);
    };

    [
        uuid(4FBFD1D0-12CD-11d3-8136-728B02000000),
        HELP(mssnapr_IMMCControlbar)
    ]
    coclass MMCControlbar
    {
        [default] interface IMMCControlbar;
    };

    //=---------------------------------------------------------------------=
    //                    ConsoleVerbs Interface
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(91CC37DC-CE2B-11d1-B44D-7E92AF000000),
        dual,
        hidden,
        oleautomation,
        nonextensible,
        HELP(mssnapr_IMMCConsoleVerbs)
    ]
    interface IMMCConsoleVerbs : IDispatch
    {
        // properties:

        //
        // Count
        //
        [
            id(DISPID_CONSOLEVERBS_COUNT),
            propget,
            HELP(mssnapr_IMMCConsoleVerbs_Count)
        ]
        HRESULT _stdcall Count([out, retval] long *plCount);

        //
        // Default property. Used to access individual verbs e.g.
        // ConsoleVerbs(siPrint).Enabled = True
        //
        [
            id(DISPID_VALUE),
            propget,
            hidden
        ]
        HRESULT _stdcall Item([in] VARIANT                   Index,
                              [out, retval] MMCConsoleVerb **ppMMCConsoleVerb);

        //
        // DefaultVerb
        //
        [
            id(DISPID_CONSOLEVERBS_DEFAULT_VERB),
            propget,
            HELP(mssnapr_IMMCConsoleVerb_DefaultVerb)
        ]
        HRESULT _stdcall DefaultVerb([out, retval] SnapInConsoleVerbConstants *pVerb);

        // methods:

        //
        // NewEnum
        //
        [
            id(DISPID_NEWENUM),
            propget,
            hidden
        ]
        HRESULT _NewEnum([out, retval] IUnknown **ppunkEnum);

        // methods:

    };

    [
        uuid(48BEB252-12E2-11d3-AA37-00104B880587),
        HELP(mssnapr_IMMCConsoleVerbs)
    ]
    coclass MMCConsoleVerbs
    {
        [default] interface IMMCConsoleVerbs;
    };

    //=---------------------------------------------------------------------=
    //                    ConsoleVerb Interface
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(91CC37DD-CE2B-11d1-B44D-7E92AF000000),
        dual,
        hidden,
        oleautomation,
        nonextensible,
        HELP(mssnapr_IMMCConsoleVerb)
    ]
    interface IMMCConsoleVerb : IDispatch
    {
        // properties:

        //
        // Index
        //
        [
            id(DISPID_CONSOLEVERB_INDEX),
            propget
        ]
        HRESULT Index([out, retval] long *plIndex);

        [
            id(DISPID_CONSOLEVERB_INDEX),
            propput,
            nonbrowsable,
            hidden,
            restricted
        ]
        HRESULT Index([in] long lIndex);

        //
        // Key - set to text version of verb identifier (e.g. "siProperties")
        //
        [
            id(DISPID_CONSOLEVERB_KEY),
            propget,
        ]
        HRESULT Key([out, retval] BSTR *pbstrKey);

        //
        // Key
        //
        [
            id(DISPID_CONSOLEVERB_KEY),
            propput,
            nonbrowsable,
            hidden,
            restricted
        ]
        HRESULT Key([in] BSTR bstrKey);

        //
        // Verb
        //
        [
            id(DISPID_CONSOLEVERB_VERB),
            propget,
            HELP(mssnapr_IMMCConsoleVerb_Verb)
        ]
        HRESULT _stdcall Verb([out, retval] SnapInConsoleVerbConstants *pVerb);

        [
            id(DISPID_CONSOLEVERB_VERB),
            propput,
            nonbrowsable,
            hidden,
            restricted
        ]
        HRESULT _stdcall Verb([in] SnapInConsoleVerbConstants Verb);


        //
        // Enabled
        //
        [
            id(DISPID_CONSOLEVERB_ENABLED),
            propget,
            HELP(mssnapr_IMMCConsoleVerb_Enabled)
        ]
        HRESULT _stdcall Enabled([out, retval] VARIANT_BOOL *pfEnabled);

        [
            id(DISPID_CONSOLEVERB_ENABLED),
            propput,
            HELP(mssnapr_IMMCConsoleVerb_Enabled)
        ]
        HRESULT _stdcall Enabled([in] VARIANT_BOOL fEnabled);

        //
        // Checked
        //
        [
            id(DISPID_CONSOLEVERB_CHECKED),
            propget,
            HELP(mssnapr_IMMCConsoleVerb_Checked)
        ]
        HRESULT _stdcall Checked([out, retval] VARIANT_BOOL *pfChecked);

        [
            id(DISPID_CONSOLEVERB_CHECKED),
            propput,
            HELP(mssnapr_IMMCConsoleVerb_Checked)
        ]
        HRESULT _stdcall Checked([in] VARIANT_BOOL fChecked);

        //
        // Hidden
        //
        [
            id(DISPID_CONSOLEVERB_HIDDEN),
            propget,
            HELP(mssnapr_IMMCConsoleVerb_Hidden)
        ]
        HRESULT _stdcall Hidden([out, retval] VARIANT_BOOL *pfHidden);

        [
            id(DISPID_CONSOLEVERB_HIDDEN),
            propput,
            HELP(mssnapr_IMMCConsoleVerb_Hidden)
        ]
        HRESULT _stdcall Hidden([in] VARIANT_BOOL fHidden);

        //
        // Indeterminate
        //
        [
            id(DISPID_CONSOLEVERB_INDETERMINATE),
            propget,
            HELP(mssnapr_IMMCConsoleVerb_Indeterminate)
        ]
        HRESULT _stdcall Indeterminate([out, retval] VARIANT_BOOL *pfIndeterminate);

        [
            id(DISPID_CONSOLEVERB_INDETERMINATE),
            propput,
            HELP(mssnapr_IMMCConsoleVerb_Indeterminate)
        ]
        HRESULT _stdcall Indeterminate([in] VARIANT_BOOL fIndeterminate);

        //
        // ButtonPressed
        //
        [
            id(DISPID_CONSOLEVERB_BUTTON_PRESSED),
            propget,
            HELP(mssnapr_IMMCConsoleVerb_ButtonPressed)
        ]
        HRESULT _stdcall ButtonPressed([out, retval] VARIANT_BOOL *pfButtonPressed);

        [
            id(DISPID_CONSOLEVERB_BUTTON_PRESSED),
            propput,
            HELP(mssnapr_IMMCConsoleVerb_ButtonPressed)
        ]
        HRESULT _stdcall ButtonPressed([in] VARIANT_BOOL fButtonPressed);

        //
        // Default
        //
        [
            id(DISPID_CONSOLEVERB_DEFAULT),
            propget,
            HELP(mssnapr_IMMCConsoleVerb_Default)
        ]
        HRESULT _stdcall Default([out, retval] VARIANT_BOOL *pfDefault);

        [
            id(DISPID_CONSOLEVERB_DEFAULT),
            propput,
            HELP(mssnapr_IMMCConsoleVerb_Default)
        ]
        HRESULT _stdcall Default([in] VARIANT_BOOL fDefault);

        // methods:

    };

    [
        uuid(657DE950-12E2-11d3-AA37-00104B880587),
        HELP(mssnapr_IMMCConsoleVerb)
    ]
    coclass MMCConsoleVerb
    {
        [default] interface IMMCConsoleVerb;
    };

    //=---------------------------------------------------------------------=
    //                      MMC Toolbar Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(91CC37DF-CE2B-11d1-B44D-7E92AF000000),
        dual,
        oleautomation,
        hidden,
        nonextensible,
        HELP(mssnapr_IMMCToolbar)
    ]
    interface IMMCToolbar : IDispatch
    {
        // properties:

        //
        // Name
        //
        [
            id(DISPID_VALUE),
            propget,
            HELP(mssnapr_IMMCToolbar_Name)
        ]
        HRESULT Name([out, retval] BSTR *pbstrName);

        [
            id(DISPID_VALUE),
            propput,
            HELP(mssnapr_IMMCToolbar_Name)
        ]
        HRESULT Name(BSTR bstrName);

        //
        // Index - Used at design time only. One based index into
        // IMMCToolbars collection
        //
        [
            id(DISPID_TOOLBAR_INDEX),
            propget,
            nonbrowsable,
            hidden,
            restricted
        ]
        HRESULT Index([out, retval] long *plIndex);

        [
            id(DISPID_TOOLBAR_INDEX),
            propput,
            nonbrowsable,
            hidden,
            restricted
        ]
        HRESULT Index([in] long lIndex);

        //
        // Key - Used at design time only. Key into
        // IMMCToolbars collection
        //
        [
            id(DISPID_TOOLBAR_KEY),
            propget,
            nonbrowsable,
            hidden,
            restricted
        ]
        HRESULT Key([out, retval] BSTR *pbstrKey);

        [
            id(DISPID_TOOLBAR_KEY),
            propput,
            nonbrowsable,
            hidden,
            restricted
        ]
        HRESULT Key([in] BSTR bstrKey);

        //
        // Buttons
        //
        [
            id(DISPID_TOOLBAR_BUTTONS),
            propget,
            HELP(mssnapr_IMMCToolbar_Buttons)
        ]
        HRESULT Buttons([out, retval] MMCButtons **ppMMCButtons);

        //
        // ImageList
        //
        [
            id(DISPID_TOOLBAR_IMAGE_LIST),
            propget,
            HELP(mssnapr_IMMCToolbar_ImageList)
        ]
        HRESULT ImageList([out, retval] MMCImageList **ppMMCImageList);

        [
            id(DISPID_TOOLBAR_IMAGE_LIST),
            propputref,
            HELP(mssnapr_IMMCToolbar_ImageList)
        ]
        HRESULT ImageList([in] MMCImageList *pMMCImageList);

        //
        // Tag
        //
        [
            id(DISPID_TOOLBAR_TAG),
            propget,
            HELP(mssnapr_IMMCToolbar_Tag)
        ]
        HRESULT Tag([out, retval] VARIANT *pvarTag);

        [
            id(DISPID_TOOLBAR_TAG),
            propput,
            HELP(mssnapr_IMMCToolbar_Tag)
        ]
        HRESULT Tag([in] VARIANT varTag);

        [
            id(DISPID_TOOLBAR_TAG),
            propputref,
            HELP(mssnapr_IMMCToolbar_Tag)
        ]
        HRESULT Tag([in] VARIANT varTag);

        // methods:
    };

    [
        uuid(91CC37E2-CE2B-11d1-B44D-7E92AF000000),
        hidden,
        HELP(mssnapr_DMMCToolbarEvents)
    ]
    dispinterface DMMCToolbarEvents
    {
        properties:

        methods:

        //
        // ButtonClick
        //
        [
            id(DISPID_TOOLBAR_EVENT_BUTTON_CLICK),
            HELP(mssnapr_DMMCToolbarEvents_ButtonClick)
        ]
        void ButtonClick([in] MMCClipboard *Selection,
                         [in] MMCButton    *Button);


        //
        // ButtonDropDown
        //
        [
            id(DISPID_TOOLBAR_EVENT_BUTTON_DROPDOWN),
            HELP(mssnapr_DMMCToolbarEvents_ButtonDropDown)
        ]
        void ButtonDropDown([in] MMCClipboard *Selection,
                            [in] MMCButton    *Button);


        //
        // ButtonMenuClick
        //
        [
            id(DISPID_TOOLBAR_EVENT_BUTTON_MENU_CLICK),
            HELP(mssnapr_DMMCToolbarEvents_ButtonMenuClick)
        ]
        void ButtonMenuClick([in] MMCClipboard  *Selection,
                             [in] MMCButtonMenu *ButtonMenu);
    };

    [
        uuid(91CC37E1-CE2B-11d1-B44D-7E92AF000000),
        HELP(mssnapr_MMCToolbar)
    ]
    coclass MMCToolbar
    {
        [default] interface IMMCToolbar;
        [default, source] dispinterface DMMCToolbarEvents;
    };

    //=---------------------------------------------------------------------=
    //                      MMC Buttons Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(91CC37E3-CE2B-11d1-B44D-7E92AF000000),
        dual,
        hidden,
        oleautomation,
        nonextensible,
        HELP(mssnapr_IMMCButtons)
    ]
    interface IMMCButtons : IDispatch
    {
        // properties:

        //
        // Count
        //
        [
            id(DISPID_BUTTONS_COUNT),
            propget,
            HELP(mssnapr_IMMCButtons_Count)
        ]
        HRESULT _stdcall Count([out, retval] long *plCount);


        //
        // Item
        //
        [
            id(DISPID_VALUE),
            propget,
            HELP(mssnapr_IMMCButtons_Item)
        ]
        HRESULT _stdcall Item([in] VARIANT Index, [out, retval] MMCButton **ppMMCButton);

        //
        // NewEnum
        //
        [
            id(DISPID_NEWENUM),
            propget,
            hidden
        ]
        HRESULT _NewEnum([out, retval] IUnknown **ppunkEnum);

        // methods:

        //
        // Add
        //
        [
            id(DISPID_BUTTONS_ADD),
            HELP(mssnapr_IMMCButtons_Add)
        ]
        HRESULT Add([in, optional] VARIANT      Index,
                    [in, optional] VARIANT      Key,
                    [in, optional] VARIANT      Caption,
                    [in, optional] VARIANT      Style,
                    [in, optional] VARIANT      Image,
                    [in, optional] VARIANT      ToolTipText,
                    [out, retval]  MMCButton **ppMMCButton);

        //
        // Clear
        //
        [
            id(DISPID_BUTTONS_CLEAR),
            HELP(mssnapr_IMMCButtons_Clear)
        ]
        HRESULT _stdcall Clear();


        //
        // Remove
        //
        [
            id(DISPID_BUTTONS_REMOVE),
            HELP(mssnapr_IMMCButtons_Remove)
        ]
        HRESULT _stdcall Remove([in] VARIANT Index);
    };

    [
        uuid(8B034115-FBB2-11d1-9785-EAA220524153),
        HELP(mssnapr_MMCButtons),
    ]
    coclass MMCButtons
    {
        [default] interface IMMCButtons;
    };

    //=---------------------------------------------------------------------=
    //                      MMC Button Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(91CC37E5-CE2B-11d1-B44D-7E92AF000000),
        dual,
        hidden,
        oleautomation,
        nonextensible,
        HELP(mssnapr_IMMCButton)
    ]
    interface IMMCButton : IDispatch
    {
        // properties:

        //
        // ButtonMenus
        //
        [
            id(DISPID_BUTTON_BUTTON_MENUS),
            propget,
            HELP(mssnapr_IMMCButton_ButtonMenus)
        ]
        HRESULT ButtonMenus([out, retval] MMCButtonMenus **ppMMCButtonMenus);

        //
        // Caption
        //
        [
            id(DISPID_BUTTON_CAPTION),
            propget,
            HELP(mssnapr_IMMCButton_Caption)
        ]
        HRESULT Caption([out, retval] BSTR *pbstrCaption);

        [
            id(DISPID_BUTTON_CAPTION),
            propput,
            HELP(mssnapr_IMMCButton_Caption)
        ]
        HRESULT Caption(BSTR bstrCaption);

        //
        // Enabled
        //
        [
            id(DISPID_BUTTON_ENABLED),
            propget,
            HELP(mssnapr_IMMCButton_Enabled)
        ]
        HRESULT _stdcall Enabled([out, retval] VARIANT_BOOL *pfEnabled);

        [
            id(DISPID_BUTTON_ENABLED),
            propput,
            HELP(mssnapr_IMMCButton_Enabled)
        ]
        HRESULT _stdcall Enabled([in] VARIANT_BOOL fEnabled);

        //
        // Image
        //
        [
            id(DISPID_BUTTON_IMAGE),
            propget,
            HELP(mssnapr_IMMCButton_Image)
        ]
        HRESULT Image([out, retval] VARIANT *pvarIndex);

        [
            id(DISPID_BUTTON_IMAGE),
            propput,
            HELP(mssnapr_IMMCButton_Image)
        ]
        HRESULT Image([in] VARIANT varIndex);

        //
        // Index
        //
        [
            id(DISPID_BUTTON_INDEX),
            propget,
            HELP(mssnapr_IMMCButton_Index)
        ]
        HRESULT Index([out, retval] long *plIndex);

        [
            id(DISPID_BUTTON_INDEX),
            propput,
            hidden,
            restricted
        ]
        HRESULT Index([in] long lIndex);

        //
        // Key
        //
        [
            id(DISPID_BUTTON_KEY),
            propget,
            HELP(mssnapr_IMMCButton_Key)
        ]
        HRESULT Key([out, retval] BSTR *pbstrKey);

        [
            id(DISPID_BUTTON_KEY),
            propput,
            HELP(mssnapr_IMMCButton_Key)
        ]
        HRESULT Key([in] BSTR bstrKey);

        //
        // MixedState
        //
        [
            id(DISPID_BUTTON_MIXEDSTATE),
            propget,
            HELP(mssnapr_IMMCButton_MixedState)
        ]
        HRESULT _stdcall MixedState([out, retval] VARIANT_BOOL *pfMixedState);

        [
            id(DISPID_BUTTON_MIXEDSTATE),
            propput,
            HELP(mssnapr_IMMCButton_MixedState)
        ]
        HRESULT _stdcall MixedState([in] VARIANT_BOOL fMixedState);


        //
        // Style
        //
        [
            id(DISPID_BUTTON_STYLE),
            propget,
            HELP(mssnapr_IMMCButton_Style)
        ]
        HRESULT Style([out, retval] SnapInButtonStyleConstants *pStyle);

        [
            id(DISPID_BUTTON_STYLE),
            propput,
            HELP(mssnapr_IMMCButton_Style)
        ]
        HRESULT Style([in] SnapInButtonStyleConstants Style);


        //
        // Tag
        //
        [
            id(DISPID_BUTTON_TAG),
            propget,
            HELP(mssnapr_IMMCButton_Tag)
        ]
        HRESULT Tag([out, retval] VARIANT *pvarTag);

        [
            id(DISPID_BUTTON_TAG),
            propput,
            HELP(mssnapr_IMMCButton_Tag)
        ]
        HRESULT Tag([in] VARIANT varTag);

        [
            id(DISPID_BUTTON_TAG),
            propputref,
            HELP(mssnapr_IMMCButton_Tag)
        ]
        HRESULT Tag([in] VARIANT varTag);

        //
        // ToolTipText
        //
        [
            id(DISPID_BUTTON_TOOLTIP_TEXT),
            propget,
            HELP(mssnapr_IMMCButton_ToolTipText)
        ]
        HRESULT ToolTipText([out, retval] BSTR *pbstrToolTipText);

        [
            id(DISPID_BUTTON_TOOLTIP_TEXT),
            propput,
            HELP(mssnapr_IMMCButton_ToolTipText)
        ]
        HRESULT ToolTipText([in] BSTR bstrToolTipText);

        //
        // Value
        //
        [
            id(DISPID_BUTTON_VALUE),
            propget,
            HELP(mssnapr_IMMCButton_Value)
        ]
        HRESULT Value([out, retval] SnapInButtonValueConstants *pValue);

        [
            id(DISPID_BUTTON_VALUE),
            propput,
            HELP(mssnapr_IMMCButton_Value)
        ]
        HRESULT Value([in] SnapInButtonValueConstants Value);

        //
        // Visible
        //
        [
            id(DISPID_BUTTON_VISIBLE),
            propget,
            HELP(mssnapr_IMMCButton_Visible)
        ]
        HRESULT _stdcall Visible([out, retval] VARIANT_BOOL *pfVisible);

        [
            id(DISPID_BUTTON_VISIBLE),
            propput,
            HELP(mssnapr_IMMCButton_Visible)
        ]
        HRESULT _stdcall Visible([in] VARIANT_BOOL fVisible);

        // methods:

    };

    [
        uuid(91CC37E6-CE2B-11d1-B44D-7E92AF000000),
        HELP(mssnapr_MMCButton),
    ]
    coclass MMCButton
    {
        [default] interface IMMCButton;
    };



    //=---------------------------------------------------------------------=
    //                      MMC Button Menus Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(8B034116-FBB2-11d1-9785-EAA220524153),
        dual,
        hidden,
        oleautomation,
        nonextensible,
        HELP(mssnapr_IMMCButtonMenus)
    ]
    interface IMMCButtonMenus : IDispatch
    {
        // properties:

        //
        // Count
        //
        [
            id(DISPID_BUTTONMENUS_COUNT),
            propget,
            HELP(mssnapr_IMMCButtonMenus_Count)
        ]
        HRESULT _stdcall Count([out, retval] long *plCount);

        //
        // Item
        //
        [
            id(DISPID_VALUE),
            propget,
            HELP(mssnapr_IMMCButtonMenus_Item)
        ]
        HRESULT _stdcall Item([in] VARIANT Index, [out, retval] MMCButtonMenu **ppMMCButtonMenu);

        //
        // NewEnum
        //
        [
            id(DISPID_NEWENUM),
            propget,
            hidden
        ]
        HRESULT _NewEnum([out, retval] IUnknown **ppunkEnum);

        //
        // Parent - used internally to set parent button for menu buttons
        //

        [
            id(DISPID_BUTTONMENUS_PARENT),
            propputref,
            hidden,
            restricted
        ]
        HRESULT Parent([in] IMMCButton *piMMCButton);


        // methods:

        //
        // Add
        //
        [
            id(DISPID_BUTTONMENUS_ADD),
            HELP(mssnapr_IMMCButtonMenus_Add)
        ]
        HRESULT Add([in, optional] VARIANT         Index,
                    [in, optional] VARIANT         Key,
                    [in, optional] VARIANT         Text,
                    [out, retval]  MMCButtonMenu **ppMMCButtonMenu);

        //
        // Clear
        //
        [
            id(DISPID_BUTTONMENUS_CLEAR),
            HELP(mssnapr_IMMCButtonMenus_Clear)
        ]
        HRESULT _stdcall Clear();


        //
        // Remove
        //
        [
            id(DISPID_BUTTONMENUS_REMOVE),
            HELP(mssnapr_IMMCButtonMenus_Remove)
        ]
        HRESULT _stdcall Remove([in] VARIANT Index);
    };

    [
        uuid(91CC37E7-CE2B-11d1-B44D-7E92AF000000),
        HELP(mssnapr_MMCButtonMenus),
    ]
    coclass MMCButtonMenus
    {
        [default] interface IMMCButtonMenus;
    };

    //=---------------------------------------------------------------------=
    //                      MMC Button Menu Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(91CC37E8-CE2B-11d1-B44D-7E92AF000000),
        dual,
        hidden,
        oleautomation,
        nonextensible,
        HELP(mssnapr_IMMCButtonMenu)
    ]
    interface IMMCButtonMenu : IDispatch
    {
        // properties:

        //
        // Enabled
        //
        [
            id(DISPID_BUTTONMENU_ENABLED),
            propget,
            HELP(mssnapr_IMMCButtonMenu_Enabled)
        ]
        HRESULT _stdcall Enabled([out, retval] VARIANT_BOOL *pfEnabled);

        [
            id(DISPID_BUTTONMENU_ENABLED),
            propput,
            HELP(mssnapr_IMMCButtonMenu_Enabled)
        ]
        HRESULT _stdcall Enabled([in] VARIANT_BOOL fEnabled);

        //
        // Index
        //
        [
            id(DISPID_BUTTONMENU_INDEX),
            propget,
            HELP(mssnapr_IMMCButtonMenu_Index)
        ]
        HRESULT Index([out, retval] long *plIndex);

        [
            id(DISPID_BUTTONMENU_INDEX),
            propput,
            hidden,
            restricted
        ]
        HRESULT Index([in] long lIndex);

        //
        // Key
        //
        [
            id(DISPID_BUTTONMENU_KEY),
            propget,
            HELP(mssnapr_IMMCButtonMenu_Key)
        ]
        HRESULT Key([out, retval] BSTR *pbstrKey);

        [
            id(DISPID_BUTTONMENU_KEY),
            propput,
            HELP(mssnapr_IMMCButtonMenu_Key)
        ]
        HRESULT Key([in] BSTR bstrKey);


        //
        // Parent
        //
        [
            id(DISPID_BUTTONMENU_PARENT),
            propget,
            HELP(mssnapr_IMMCButtonMenu_Parent)
        ]
        HRESULT Parent([out, retval] MMCButton **ppMMCButton);

        [
            id(DISPID_BUTTONMENU_PARENT),
            propputref,
            hidden,
            restricted
        ]
        HRESULT Parent([in] IMMCButton *piMMCButton);

        //
        // Tag
        //
        [
            id(DISPID_BUTTONMENU_TAG),
            propget,
            HELP(mssnapr_IMMCButtonMenu_Tag)
        ]
        HRESULT Tag([out, retval] VARIANT *pvarTag);

        [
            id(DISPID_BUTTONMENU_TAG),
            propput,
            HELP(mssnapr_IMMCButtonMenu_Tag)
        ]
        HRESULT Tag([in] VARIANT varTag);

        [
            id(DISPID_BUTTONMENU_TAG),
            propputref,
            HELP(mssnapr_IMMCButtonMenu_Tag)
        ]
        HRESULT Tag([in] VARIANT varTag);

        //
        // Text
        //
        [
            id(DISPID_BUTTONMENU_TEXT),
            propget,
            HELP(mssnapr_IMMCButtonMenu_Text)
        ]
        HRESULT Text([out, retval] BSTR *pbstrText);

        [
            id(DISPID_BUTTONMENU_TEXT),
            propput,
            HELP(mssnapr_IMMCButtonMenu_Text)
        ]
        HRESULT Text([in] BSTR bstrText);

        //
        // Visible
        //
        [
            id(DISPID_BUTTONMENU_VISIBLE),
            propget,
            HELP(mssnapr_IMMCButtonMenu_Visible)
        ]
        HRESULT _stdcall Visible([out, retval] VARIANT_BOOL *pfVisible);

        [
            id(DISPID_BUTTONMENU_VISIBLE),
            propput,
            HELP(mssnapr_IMMCButtonMenu_Visible)
        ]
        HRESULT _stdcall Visible([in] VARIANT_BOOL fVisible);

        //
        // Checked
        //
        [
            id(DISPID_BUTTONMENU_CHECKED),
            propget,
            HELP(mssnapr_IMMCButtonMenu_Checked)
        ]
        HRESULT _stdcall Checked([out, retval] VARIANT_BOOL *pfChecked);

        [
            id(DISPID_BUTTONMENU_CHECKED),
            propput,
            HELP(mssnapr_IMMCButtonMenu_Checked)
        ]
        HRESULT _stdcall Checked([in] VARIANT_BOOL fChecked);

        //
        // Grayed
        //
        [
            id(DISPID_BUTTONMENU_GRAYED),
            propget,
            HELP(mssnapr_IMMCButtonMenu_Grayed)
        ]
        HRESULT _stdcall Grayed([out, retval] VARIANT_BOOL *pfGrayed);

        [
            id(DISPID_BUTTONMENU_GRAYED),
            propput,
            HELP(mssnapr_IMMCButtonMenu_Grayed)
        ]
        HRESULT _stdcall Grayed([in] VARIANT_BOOL fGrayed);

        //
        // Separator
        //
        [
            id(DISPID_BUTTONMENU_SEPARATOR),
            propget,
            HELP(mssnapr_IMMCButtonMenu_Separator)
        ]
        HRESULT _stdcall Separator([out, retval] VARIANT_BOOL *pfSeparator);

        [
            id(DISPID_BUTTONMENU_SEPARATOR),
            propput,
            HELP(mssnapr_IMMCButtonMenu_Separator)
        ]
        HRESULT _stdcall Separator([in] VARIANT_BOOL fSeparator);

        //
        // MenuBreak
        //
        [
            id(DISPID_BUTTONMENU_MENU_BREAK),
            propget,
            HELP(mssnapr_IMMCButtonMenu_MenuBreak)
        ]
        HRESULT _stdcall MenuBreak([out, retval] VARIANT_BOOL *pfMenuBreak);

        [
            id(DISPID_BUTTONMENU_MENU_BREAK),
            propput,
            HELP(mssnapr_IMMCButtonMenu_MenuBreak)
        ]
        HRESULT _stdcall MenuBreak([in] VARIANT_BOOL fMenuBreak);

        //
        // MenuBarBreak
        //
        [
            id(DISPID_BUTTONMENU_MENU_BAR_BREAK),
            propget,
            HELP(mssnapr_IMMCButtonMenu_MenuBarBreak)
        ]
        HRESULT _stdcall MenuBarBreak([out, retval] VARIANT_BOOL *pfMenuBarBreak);

        [
            id(DISPID_BUTTONMENU_MENU_BAR_BREAK),
            propput,
            HELP(mssnapr_IMMCButtonMenu_MenuBarBreak)
        ]
        HRESULT _stdcall MenuBarBreak([in] VARIANT_BOOL fMenuBarBreak);

        // methods:

    };

    [
        uuid(91CC37E9-CE2B-11d1-B44D-7E92AF000000),
        HELP(mssnapr_MMCButtonMenu),
    ]
    coclass MMCButtonMenu
    {
        [default] interface IMMCButtonMenu;
    };

    //=---------------------------------------------------------------------=
    //                      TaskPad Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(861481F1-D867-11d1-B450-C43058000000),
        dual,
        hidden,
        oleautomation,
        nonextensible,
        HELP(mssnapr_ITaskpad)
    ]
    interface ITaskpad : IDispatch
    {
        // properties:

        //
        // Name
        //
        [
            id(DISPID_VALUE),
            propget,
            HELP(mssnapr_ITask_Name)
        ]
        HRESULT Name([out, retval] BSTR *pbstrName);

        [
            id(DISPID_VALUE),
            propput,
            HELP(mssnapr_ITask_Name)
        ]
        HRESULT Name([in] BSTR bstrName);


        //
        // Type
        //
        [
            id(DISPID_TASKPAD_TYPE),
            propget,
            HELP(mssnapr_ITaskpad_Type)
        ]
        HRESULT Type([out, retval] SnapInTaskpadTypeConstants *pType);

        [
            id(DISPID_TASKPAD_TYPE),
            propput,
            HELP(mssnapr_ITaskpad_Type)
        ]
        HRESULT Type([in] SnapInTaskpadTypeConstants Type);

        //
        // Title
        //
        [
            id(DISPID_TASKPAD_TITLE),
            propget,
            HELP(mssnapr_ITaskpad_Title)
        ]
        HRESULT Title([out, retval] BSTR *pbstrTitle);

        [
            id(DISPID_TASKPAD_TITLE),
            propput,
            HELP(mssnapr_ITaskpad_Title)
        ]
        HRESULT Title([in] BSTR pbstrTitle);

        //
        // DescriptiveText
        //
        [
            id(DISPID_TASKPAD_DESCRIPTIVE_TEXT),
            propget,
            HELP(mssnapr_ITaskpad_DescriptiveText)
        ]
        HRESULT DescriptiveText([out, retval] BSTR *pbstrDescriptiveText);

        [
            id(DISPID_TASKPAD_DESCRIPTIVE_TEXT),
            propput,
            HELP(mssnapr_ITaskpad_DescriptiveText)
        ]
        HRESULT DescriptiveText([in] BSTR pbstrDescriptiveText);

        //
        // URL
        //
        [
            id(DISPID_TASKPAD_URL),
            propget,
            HELP(mssnapr_ITaskpad_URL)
        ]
        HRESULT URL([out, retval] BSTR *pbstrURL);

        [
            id(DISPID_TASKPAD_URL),
            propput,
            HELP(mssnapr_ITaskpad_URL)
        ]
        HRESULT URL([in] BSTR bstrURL);

        //
        // BackgroundType
        //
        [
            id(DISPID_TASKPAD_BACKGROUND_TYPE),
            propget,
            HELP(mssnapr_ITaskpad_BackgroundType)
        ]
        HRESULT BackgroundType([out, retval] SnapInTaskpadImageTypeConstants *pType);

        [
            id(DISPID_TASKPAD_BACKGROUND_TYPE),
            propput,
            HELP(mssnapr_ITaskpad_BackgroundType)
        ]
        HRESULT BackgroundType([in] SnapInTaskpadImageTypeConstants Type);

        //
        // MouseOverImage
        //
        [
            id(DISPID_TASKPAD_MOUSE_OVER_IMAGE),
            propget,
            HELP(mssnapr_ITaskpad_MouseOverImage)
        ]
        HRESULT MouseOverImage([out, retval] BSTR *pbstrMouseOverImage);

        [
            id(DISPID_TASKPAD_MOUSE_OVER_IMAGE),
            propput,
            HELP(mssnapr_ITaskpad_MouseOverImage)
        ]
        HRESULT MouseOverImage([in] BSTR bstrMouseOverImage);


        //
        // MouseOffImage
        //
        [
            id(DISPID_TASKPAD_MOUSE_OFF_IMAGE),
            propget,
            HELP(mssnapr_ITaskpad_MouseOffImage)
        ]
        HRESULT MouseOffImage([out, retval] BSTR *pbstrMouseOffImage);

        [
            id(DISPID_TASKPAD_MOUSE_OFF_IMAGE),
            propput,
            HELP(mssnapr_ITaskpad_MouseOffImage)
        ]
        HRESULT MouseOffImage([in] BSTR bstrMouseOffImage);


        //
        // FontFamily
        //
        [
            id(DISPID_TASKPAD_FONT_FAMILY),
            propget,
            HELP(mssnapr_ITaskpad_FontFamily)
        ]
        HRESULT FontFamily([out, retval] BSTR *pbstrFontFamily);

        [
            id(DISPID_TASKPAD_FONT_FAMILY),
            propput,
            HELP(mssnapr_ITaskpad_FontFamily)
        ]
        HRESULT FontFamily([in] BSTR bstrFontFamily);


        //
        // EOTFile
        //
        [
            id(DISPID_TASKPAD_EOT_FILE),
            propget,
            HELP(mssnapr_ITaskpad_EOTFile)
        ]
        HRESULT EOTFile([out, retval] BSTR *pbstrEOTFile);

        [
            id(DISPID_TASKPAD_EOT_FILE),
            propput,
            HELP(mssnapr_ITaskpad_EOTFile)
        ]
        HRESULT EOTFile([in] BSTR bstrEOTFile);


        //
        // SymbolString
        //
        [
            id(DISPID_TASKPAD_SYMBOL_STRING),
            propget,
            HELP(mssnapr_ITaskpad_SymbolString)
        ]
        HRESULT SymbolString([out, retval] BSTR *pbstrSymbolString);

        [
            id(DISPID_TASKPAD_SYMBOL_STRING),
            propput,
            HELP(mssnapr_ITaskpad_SymbolString)
        ]
        HRESULT SymbolString([in] BSTR bstrSymbolString);


        //
        // ListpadStyle
        //
        [
            id(DISPID_TASKPAD_LISTPAD_STYLE),
            propget,
            HELP(mssnapr_ITaskpad_ListpadStyle)
        ]
        HRESULT ListpadStyle([out, retval] SnapInListpadStyleConstants *pStyle);

        [
            id(DISPID_TASKPAD_LISTPAD_STYLE),
            propput,
            HELP(mssnapr_ITaskpad_ListpadStyle)
        ]
        HRESULT ListpadStyle([in] SnapInListpadStyleConstants Style);

        //
        // ListpadTitle
        //
        [
            id(DISPID_TASKPAD_LISTPAD_TITLE),
            propget,
            HELP(mssnapr_ITaskpad_ListpadTitle)
        ]
        HRESULT ListpadTitle([out, retval] BSTR *pbstrTitle);

        [
            id(DISPID_TASKPAD_LISTPAD_TITLE),
            propput,
            HELP(mssnapr_ITaskpad_ListpadTitle)
        ]
        HRESULT ListpadTitle([in] BSTR bstrTitle);

        //
        // ListpadHasButton
        //
        [
            id(DISPID_TASKPAD_LISTPAD_HAS_BUTTON),
            propget,
            HELP(mssnapr_ITaskpad_ListpadHasButton)
        ]
        HRESULT ListpadHasButton([out, retval] VARIANT_BOOL *pfHasButton);

        [
            id(DISPID_TASKPAD_LISTPAD_HAS_BUTTON),
            propput,
            HELP(mssnapr_ITaskpad_ListpadHasButton)
        ]
        HRESULT ListpadHasButton([in] VARIANT_BOOL fHasButton);

        //
        // ListpadButtonText
        //
        [
            id(DISPID_TASKPAD_LISTPAD_BUTTON_TEXT),
            propget,
            HELP(mssnapr_ITaskpad_ListpadButtonText)
        ]
        HRESULT ListpadButtonText([out, retval] BSTR *pbstrButtonText);

        [
            id(DISPID_TASKPAD_LISTPAD_BUTTON_TEXT),
            propput,
            HELP(mssnapr_ITaskpad_ListpadButtonText)
        ]
        HRESULT ListpadButtonText([in] BSTR bstrButtonText);

        //
        // ListView
        //
        [
            id(DISPID_TASKPAD_LISTVIEW),
            propget,
            HELP(mssnapr_ITaskpad_ListView)
        ]
        HRESULT ListView([out, retval] BSTR *pbstrListView);

        [
            id(DISPID_TASKPAD_LISTVIEW),
            propput,
            HELP(mssnapr_ITaskpad_ListView)
        ]
        HRESULT ListView([in] BSTR pbstrListView);

        //
        // Tasks
        //
        [
            id(DISPID_TASKPAD_TASKS),
            propget,
            HELP(mssnapr_ITaskpad_Tasks)
        ]
        HRESULT Tasks([out, retval] Tasks **ppTasks);

        // methods:

    };

    [
        uuid(861481F2-D867-11d1-B450-C43058000000),
        HELP(mssnapr_Taskpad)
    ]
    coclass Taskpad
    {
        [default] interface ITaskpad;
    };

    //=---------------------------------------------------------------------=
    //                      Tasks Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(861481F3-D867-11d1-B450-C43058000000),
        dual,
        hidden,
        oleautomation,
        nonextensible,
        HELP(mssnapr_ITasks)
    ]
    interface ITasks : IDispatch
    {
        // properties:

        //
        // Count
        //
        [
            id(DISPID_TASKS_COUNT),
            propget,
            HELP(mssnapr_ITasks_Count)
        ]
        HRESULT _stdcall Count([out, retval] long *plCount);

        //
        // Item
        //
        [
            id(DISPID_VALUE),
            propget,
            HELP(mssnapr_ITasks_Item)
        ]
        HRESULT _stdcall Item([in] VARIANT Index, [out, retval] Task **ppTask);

        //
        // NewEnum
        //
        [
            id(DISPID_NEWENUM),
            propget,
            hidden
        ]
        HRESULT _NewEnum([out, retval] IUnknown **ppunkEnum);

        // methods:

        //
        // Add
        //
        [
            id(DISPID_TASKS_ADD),
            HELP(mssnapr_ITasks_Add)
        ]
        HRESULT Add([in, optional] VARIANT   Index,
                    [in, optional] VARIANT   Key,
                    [in, optional] VARIANT   Text,
                    [out, retval]  Task    **ppTask);

        //
        // Clear
        //
        [
            id(DISPID_TASKS_CLEAR),
            HELP(mssnapr_ITasks_Clear)
        ]
        HRESULT _stdcall Clear();


        //
        // Remove
        //
        [
            id(DISPID_TASKS_REMOVE),
            HELP(mssnapr_ITasks_Remove)
        ]
        HRESULT _stdcall Remove([in] VARIANT Index);
    };

    [
        uuid(861481F4-D867-11d1-B450-C43058000000),
        HELP(mssnapr_Tasks),
    ]
    coclass Tasks
    {
        [default] interface ITasks;
    };

    //=---------------------------------------------------------------------=
    //                      Task Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(861481F5-D867-11d1-B450-C43058000000),
        dual,
        hidden,
        oleautomation,
        nonextensible,
        HELP(mssnapr_ITask)
    ]
    interface ITask : IDispatch
    {
        // properties:

        //
        // Index
        //
        [
            id(DISPID_TASK_INDEX),
            propget,
            HELP(mssnapr_ITask_Index)
        ]
        HRESULT Index([out, retval] long *plIndex);

        [
            id(DISPID_TASK_INDEX),
            propput,
            hidden,
            restricted
        ]
        HRESULT Index([in] long lIndex);

        //
        // Key
        //
        [
            id(DISPID_TASK_KEY),
            propget,
            HELP(mssnapr_ITask_Key)
        ]
        HRESULT Key([out, retval] BSTR *pbstrKey);

        [
            id(DISPID_TASK_KEY),
            propput,
            HELP(mssnapr_ITask_Key)
        ]
        HRESULT Key([in] BSTR bstrKey);

        //
        // Visible
        //
        [
            id(DISPID_TASK_VISIBLE),
            propget,
            HELP(mssnapr_ITask_Visible)
        ]
        HRESULT Visible([out, retval] VARIANT_BOOL *pfvarVisible);

        [
            id(DISPID_TASK_VISIBLE),
            propput,
            HELP(mssnapr_ITask_Visible)
        ]
        HRESULT Visible([in] VARIANT_BOOL fvarVisible);

        //
        // Tag
        //
        [
            id(DISPID_TASK_TAG),
            propget,
            HELP(mssnapr_ITask_Tag)
        ]
        HRESULT Tag([out, retval] VARIANT *pvarTag);

        [
            id(DISPID_TASK_TAG),
            propput,
            HELP(mssnapr_ITask_Tag)
        ]
        HRESULT Tag([in] VARIANT varTag);

        [
            id(DISPID_TASK_TAG),
            propputref,
            HELP(mssnapr_ITask_Tag)
        ]
        HRESULT Tag([in] VARIANT varTag);

        //
        // Text
        //
        [
            id(DISPID_VALUE),
            propget,
            HELP(mssnapr_ITask_Text)
        ]
        HRESULT Text([out, retval] BSTR *pbstrText);

        [
            id(DISPID_VALUE),
            propput,
            HELP(mssnapr_ITask_Text)
        ]
        HRESULT Text([in] BSTR bstrText);

        //
        // ImageType
        //
        [
            id(DISPID_TASK_IMAGE_TYPE),
            propget,
            HELP(mssnapr_ITask_ImageType)
        ]
        HRESULT ImageType([out, retval] SnapInTaskpadImageTypeConstants *pType);

        [
            id(DISPID_TASK_IMAGE_TYPE),
            propput,
            HELP(mssnapr_ITask_ImageType)
        ]
        HRESULT ImageType([in] SnapInTaskpadImageTypeConstants Type);

        //
        // MouseOverImage
        //
        [
            id(DISPID_TASK_MOUSE_OVER_IMAGE),
            propget,
            HELP(mssnapr_ITask_MouseOverImage)
        ]
        HRESULT MouseOverImage([out, retval] BSTR *pbstrMouseOverImage);

        [
            id(DISPID_TASK_MOUSE_OVER_IMAGE),
            propput,
            HELP(mssnapr_ITask_MouseOverImage)
        ]
        HRESULT MouseOverImage([in] BSTR bstrMouseOverImage);


        //
        // MouseOffImage
        //
        [
            id(DISPID_TASK_MOUSE_OFF_IMAGE),
            propget,
            HELP(mssnapr_ITask_MouseOffImage)
        ]
        HRESULT MouseOffImage([out, retval] BSTR *pbstrMouseOffImage);

        [
            id(DISPID_TASK_MOUSE_OFF_IMAGE),
            propput,
            HELP(mssnapr_ITask_MouseOffImage)
        ]
        HRESULT MouseOffImage([in] BSTR bstrMouseOffImage);

        //
        // FontFamily
        //
        [
            id(DISPID_TASK_FONT_FAMILY),
            propget,
            HELP(mssnapr_ITask_FontFamily)
        ]
        HRESULT FontFamily([out, retval] BSTR *pbstrFontFamily);

        [
            id(DISPID_TASK_FONT_FAMILY),
            propput,
            HELP(mssnapr_ITask_FontFamily)
        ]
        HRESULT FontFamily([in] BSTR bstrFontFamily);


        //
        // EOTFile
        //
        [
            id(DISPID_TASK_EOT_FILE),
            propget,
            HELP(mssnapr_ITask_EOTFile)
        ]
        HRESULT EOTFile([out, retval] BSTR *pbstrEOTFile);

        [
            id(DISPID_TASK_EOT_FILE),
            propput,
            HELP(mssnapr_ITask_EOTFile)
        ]
        HRESULT EOTFile([in] BSTR bstrEOTFile);


        //
        // SymbolString
        //
        [
            id(DISPID_TASK_SYMBOL_STRING),
            propget,
            HELP(mssnapr_ITask_SymbolString)
        ]
        HRESULT SymbolString([out, retval] BSTR *pbstrSymbolString);

        [
            id(DISPID_TASK_SYMBOL_STRING),
            propput,
            HELP(mssnapr_ITask_SymbolString)
        ]
        HRESULT SymbolString([in] BSTR bstrSymbolString);


        //
        // HelpString
        //
        [
            id(DISPID_TASK_HELP_STRING),
            propget,
            HELP(mssnapr_ITask_HelpString)
        ]
        HRESULT HelpString([out, retval] BSTR *pbstrHelpString);

        [
            id(DISPID_TASK_HELP_STRING),
            propput,
            HELP(mssnapr_ITask_HelpString)
        ]
        HRESULT HelpString([in] BSTR bstrHelpString);

        //
        //
        //
        [
            id(DISPID_TASK_ACTION_TYPE),
            propget,
            HELP(mssnapr_ITask_ActionType)
        ]
        HRESULT ActionType([out, retval] SnapInActionTypeConstants *pActionType);

        [
            id(DISPID_TASK_ACTION_TYPE),
            propput,
            HELP(mssnapr_ITask_ActionType)
        ]
        HRESULT ActionType([in] SnapInActionTypeConstants ActionType);

        //
        // URL
        //
        [
            id(DISPID_TASK_URL),
            propget,
            HELP(mssnapr_ITask_URL)
        ]
        HRESULT URL([out, retval] BSTR *pbstrURL);

        [
            id(DISPID_TASK_URL),
            propput,
            HELP(mssnapr_ITask_URL)
        ]
        HRESULT URL([in] BSTR bstrURL);

        //
        // Script
        //
        [
            id(DISPID_TASK_SCRIPT),
            propget,
            HELP(mssnapr_ITask_Script)
        ]
        HRESULT Script([out, retval] BSTR *pbstrScript);

        [
            id(DISPID_TASK_SCRIPT),
            propput,
            HELP(mssnapr_ITask_Script)
        ]
        HRESULT Script([in] BSTR bstrScript);

        // methods:
    };

    [
        uuid(861481F7-D867-11d1-B450-C43058000000),
        HELP(mssnapr_Task),
    ]
    coclass Task
    {
        [default] interface ITask;
    };


    //=---------------------------------------------------------------------=
    //                      MessageView Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(3AD37100-2D81-11D3-AA41-00104B880587),
        dual,
        hidden,
        oleautomation,
        nonextensible,
        HELP(mssnapr_MessageView)
    ]
    interface IMMCMessageView : IDispatch
    {

        // properties:

        //
        // TitleText
        //
        [
            id(DISPID_MESSAGEVIEW_TITLE_TEXT),
            propget,
            HELP(mssnapr_IMMCMessageView_TitleText)
        ]
        HRESULT TitleText([out, retval] BSTR *pbstrTitleText);

        [
            id(DISPID_MESSAGEVIEW_TITLE_TEXT),
            propput,
            HELP(mssnapr_IMMCMessageView_TitleText)
        ]
        HRESULT TitleText([in] BSTR bstrTitleText);


        //
        // BodyText
        //
        [
            id(DISPID_MESSAGEVIEW_BODY_TEXT),
            propget,
            HELP(mssnapr_IMMCMessageView_BodyText)
        ]
        HRESULT BodyText([out, retval] BSTR *pbstrBodyText);

        [
            id(DISPID_MESSAGEVIEW_BODY_TEXT),
            propput,
            HELP(mssnapr_IMMCMessageView_BodyText)
        ]
        HRESULT BodyText([in] BSTR bstrBodyText);

        //
        // IconType
        //
        [
            id(DISPID_MESSAGEVIEW_ICON_TYPE),
            propget,
            HELP(mssnapr_IMMCMessageView_IconType)
        ]
        HRESULT IconType([out, retval] SnapInMessageViewIconTypeConstants *pType);

        [
            id(DISPID_MESSAGEVIEW_ICON_TYPE),
            propput,
            HELP(mssnapr_IMMCMessageView_IconType)
        ]
        HRESULT IconType([in] SnapInMessageViewIconTypeConstants Type);

        // methods:

        [
            id(DISPID_MESSAGEVIEW_CLEAR),
            HELP(mssnapr_IMMCMessageView_Clear)
        ]
        HRESULT Clear();

    };

    [
        uuid(215FDB00-2D82-11D3-AA41-00104B880587),
        HELP(mssnapr_MessageView)
    ]
    coclass MMCMessageView
    {
        [default] interface IMMCMessageView;
    };

    //=---------------------------------------------------------------------=
    //                      Extensions Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(861481FA-D867-11d1-B450-C43058000000),
        dual,
        hidden,
        oleautomation,
        nonextensible,
        HELP(mssnapr_IExtensions)
    ]
    interface IExtensions : IDispatch
    {
        // properties:

        //
        // Count
        //
        [
            id(DISPID_EXTENSIONS_COUNT),
            propget,
            HELP(mssnapr_IExtensions_Count)
        ]
        HRESULT _stdcall Count([out, retval] long *plCount);

        //
        // Item
        //
        [
            id(DISPID_VALUE),
            propget,
            HELP(mssnapr_IExtensions_Item)
        ]
        HRESULT _stdcall Item([in] VARIANT Index, [out, retval] Extension **ppExtension);

        //
        // NewEnum
        //
        [
            id(DISPID_NEWENUM),
            propget,
            hidden
        ]
        HRESULT _NewEnum([out, retval] IUnknown **ppunkEnum);

        // methods:

        //
        // EnableAll
        //
        [
            id(DISPID_EXTENSIONS_ENABLE_ALL),
            HELP(mssnapr_IExtensions_EnableAll)
        ]
        HRESULT _stdcall EnableAll(VARIANT_BOOL Enabled);

        //
        // EnableAllStatic
        //
        [
            id(DISPID_EXTENSIONS_ENABLE_ALL_STATIC),
            HELP(mssnapr_IExtensions_EnableAllStatic)
        ]
        HRESULT _stdcall EnableAllStatic(VARIANT_BOOL Enabled);
    };

    [
        uuid(861481FB-D867-11d1-B450-C43058000000),
        HELP(mssnapr_Extensions)
    ]
    coclass Extensions
    {
        [default] interface IExtensions;
    };

    //=---------------------------------------------------------------------=
    //                      Extension Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(861481FD-D867-11d1-B450-C43058000000),
        dual,
        hidden,
        oleautomation,
        nonextensible,
        HELP(mssnapr_IExtension)
    ]
    interface IExtension : IDispatch
    {
        // properties:

        //
        // Index
        //
        [
            id(DISPID_EXTENSION_INDEX),
            propget,
            HELP(mssnapr_IExtension_Index)
        ]
        HRESULT Index([out, retval] long *plIndex);

        [
            id(DISPID_EXTENSION_INDEX),
            propput,
            hidden,
            restricted
        ]
        HRESULT Index([in] long lIndex);

        //
        // Key
        //
        [
            id( DISPID_EXTENSION_KEY),
            propget,
            HELP(mssnapr_IExtension_Key)
        ]
        HRESULT Key([out, retval] BSTR *pbstrKey);

        [
            id( DISPID_EXTENSION_KEY),
            propput,
            hidden,
            restricted
        ]
        HRESULT Key([in] BSTR bstrKey);

        //
        // CLSID
        //
        [
            id(DISPID_EXTENSION_CLSID),
            propget,
            HELP(mssnapr_IExtension_CLSID)
        ]
        HRESULT CLSID([out, retval] BSTR *pbstrCLSID);

        //
        // CLSID
        //
        [
            id(DISPID_EXTENSION_CLSID),
            propput,
            hidden,
            restricted
        ]
        HRESULT CLSID([in] BSTR bstrCLSID);

        //
        // Name
        //
        [
            id(DISPID_EXTENSION_NAME),
            propget,
            HELP(mssnapr_IExtension_Name)
        ]
        HRESULT Name([out, retval] BSTR *pbstrName);

        //
        // Name
        //
        [
            id(DISPID_EXTENSION_NAME),
            propput,
            hidden,
            restricted
        ]
        HRESULT Name([in] BSTR bstrName);

        //
        // Type
        //
        [
            id(DISPID_EXTENSION_TYPE),
            propget,
            HELP(mssnapr_IExtension_Type)
        ]
        HRESULT Type([out, retval] SnapInExtensionTypeConstants *pType);

        [
            id(DISPID_EXTENSION_TYPE),
            propput,
            hidden,
            restricted
        ]
        HRESULT Type([in] SnapInExtensionTypeConstants Type);

        //
        // ExtendsContextMenu
        //
        [
            id(DISPID_EXTENSION_EXTENDS_CONTEXT_MENU),
            propget,
            HELP(mssnapr_IExtension_ExtendsContextMenu)
        ]
        HRESULT ExtendsContextMenu([out, retval] VARIANT_BOOL *pfExtendsContextMenu);

        //
        // ExtendsContextMenu
        //
        [
            id(DISPID_EXTENSION_EXTENDS_CONTEXT_MENU),
            propput,
            hidden,
            restricted
        ]
        HRESULT ExtendsContextMenu([in] VARIANT_BOOL fExtendsContextMenu);


        //
        // ExtendsNameSpace
        //
        [
            id(DISPID_EXTENSION_EXTENDS_NAME_SPACE),
            propget,
            HELP(mssnapr_IExtension_ExtendsNameSpace)
        ]
        HRESULT ExtendsNameSpace([out, retval] VARIANT_BOOL *pfExtendsNameSpace);

        //
        // ExtendsNameSpace
        //
        [
            id(DISPID_EXTENSION_EXTENDS_NAME_SPACE),
            propput,
            hidden,
            restricted
        ]
        HRESULT ExtendsNameSpace([in] VARIANT_BOOL fExtendsNameSpace);

        //
        // ExtendsToolbar
        //
        [
            id(DISPID_EXTENSION_EXTENDS_TOOLBAR),
            propget,
            HELP(mssnapr_IExtension_ExtendsToolbar)
        ]
        HRESULT ExtendsToolbar([out, retval] VARIANT_BOOL *pfExtendsToolbar);

        //
        // ExtendsToolbar
        //
        [
            id(DISPID_EXTENSION_EXTENDS_TOOLBAR),
            propput,
            hidden,
            restricted
        ]
        HRESULT ExtendsToolbar([in] VARIANT_BOOL fExtendsToolbar);

        //
        // ExtendsPropertySheet
        //
        [
            id(DISPID_EXTENSION_EXTENDS_PROPERTY_SHEET),
            propget,
            HELP(mssnapr_IExtension_ExtendsPropertySheet)
        ]
        HRESULT ExtendsPropertySheet([out, retval] VARIANT_BOOL *pfExtendsPropertySheet);


        //
        // ExtendsPropertySheet
        //
        [
            id(DISPID_EXTENSION_EXTENDS_PROPERTY_SHEET),
            propput,
            hidden,
            restricted
        ]
        HRESULT ExtendsPropertySheet([in] VARIANT_BOOL fExtendsPropertySheet);


        //
        // ExtendsTaskpad
        //
        [
            id(DISPID_EXTENSION_EXTENDS_TASKPAD),
            propget,
            HELP(mssnapr_IExtension_ExtendsTaskpad)
        ]
        HRESULT ExtendsTaskpad([out, retval] VARIANT_BOOL *pfExtendsTaskpad);


        //
        // ExtendsTaskpad
        //
        [
            id(DISPID_EXTENSION_EXTENDS_TASKPAD),
            propput,
            hidden,
            restricted
        ]
        HRESULT ExtendsTaskpad([in] VARIANT_BOOL fExtendsTaskpad);


        //
        // Enabled
        //
        [
            id(DISPID_EXTENSION_ENABLED),
            propget,
            HELP(mssnapr_IExtension_Enabled)
        ]
        HRESULT Enabled([out, retval] VARIANT_BOOL *pfEnabled);

        [
            id(DISPID_EXTENSION_ENABLED),
            propput,
            HELP(mssnapr_IExtension_Enabled)
        ]
        HRESULT Enabled([in] VARIANT_BOOL fEnabled);

        //
        // NameSpaceEnabled
        //
        [
            id(DISPID_EXTENSION_NAMESPACE_ENABLED),
            propget,
            HELP(mssnapr_IExtension_NameSpaceEnabled)
        ]
        HRESULT NameSpaceEnabled([out, retval] VARIANT_BOOL *pfNameSpaceEnabled);

        [
            id(DISPID_EXTENSION_NAMESPACE_ENABLED),
            propput,
            HELP(mssnapr_IExtension_NameSpaceEnabled)
        ]
        HRESULT NameSpaceEnabled([in] VARIANT_BOOL fNameSpaceEnabled);

        // methods:
    };

    [
        uuid(861481FF-D867-11d1-B450-C43058000000),
        HELP(mssnapr_Extension)
    ]
    coclass Extension
    {
        [default] interface IExtension;
    };


    //=---------------------------------------------------------------------=
    //                      MMCStringTable Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(2BAEE3E3-BC7C-11d2-97EB-00104B880587),
        dual,
        hidden,
        oleautomation,
        nonextensible,
        HELP(mssnapr_IMMCStringTable)
    ]
    interface IMMCStringTable : IDispatch
    {
        // properties:

        //
        // Item
        //
        [
            id(DISPID_VALUE),
            propget,
            HELP(mssnapr_IMMCStringTable_Item)
        ]
        HRESULT _stdcall Item([in] long ID,
                              [out, retval] BSTR *pbstrString);

        //
        // NewEnum
        //
        [
            id(DISPID_NEWENUM),
            propget,
            hidden
        ]
        HRESULT _NewEnum([out, retval] IUnknown **ppunkEnum);

        // methods:

        //
        // Add
        //
        [
            id(DISPID_MMCSTRINGTABLE_ADD),
            HELP(mssnapr_IMMCStringTable_Add)
        ]
        HRESULT Add([in] BSTR String, [out, retval] long *plID);


        //
        // Find
        //
        [
            id(DISPID_MMCSTRINGTABLE_FIND),
            HELP(mssnapr_IMMCStringTable_Find)
        ]
        HRESULT Find([in] BSTR String, [out, retval] long *plID);


        //
        // Remove
        //
        [
            id(DISPID_MMCSTRINGTABLE_REMOVE),
            HELP(mssnapr_IMMCStringTable_Remove)
        ]
        HRESULT Remove(long ID);

        //
        // Clear
        //
        [
            id(DISPID_MMCSTRINGTABLE_CLEAR),
            HELP(mssnapr_IMMCStringTable_Clear)
        ]
        HRESULT Clear();

    };

    [
        uuid(2BAEE3E2-BC7C-11d2-97EB-00104B880587),
        HELP(mssnapr_MMCStringTable),
        noncreatable
    ]
    coclass MMCStringTable
    {
        [default] interface IMMCStringTable;
    };



//=-------------------------------------------------------------------------=
//
//                      Extensibility Object Model
//
//=-------------------------------------------------------------------------=
// This section is for the internal use of the designer only. These objects
// are used to hold the shared state between the designer and the runtime.
// Some are also used as the objects returned from
// ISelectionContainer::GetObjects() that VB uses to populate the property
// browser. See SnapInDesignerInternalObjectModel.doc for a complete
// explanation of these objects.
//
// Objects and properties that are not used for selection do not have help
// strings. Some properties are copies of programming model object properties
// (e.g. ListViewDef.MutliSelect is the same as ListView.MultiSelect). These
// properties use the help strings of the programming model objects.
//
// Note: if the designer extensibility model is ever exposed then help
// strings must be added to this entire section.
//=-------------------------------------------------------------------------=

    interface ISnapInDef;
    interface IExtensionDefs;
    interface IExtendedSnapIns;
    interface IExtendedSnapIn;
    interface IScopeItemDef;
    interface IScopeItemDefs;
    interface IMMCImageLists;
    interface IMMCMenuDefs;
    interface IMMCToolbars;
    interface IViewDefs;
    interface IListViewDefs;
    interface IListViewDef;
    interface IOCXViewDefs;
    interface IOCXViewDef;
    interface IURLViewDefs;
    interface IURLViewDef;
    interface ITaskpadViewDefs;
    interface ITaskpadViewDef;
    interface INodeType;
    interface INodeTypes;
    interface IRegInfo;
    interface IDataFormats;


    //=---------------------------------------------------------------------=
    //                      SnapInDesignerDef Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(E0899AD1-064D-11D2-9790-46AA20524153),
        dual,
        oleautomation,
        nonextensible,
        hidden
    ]
    interface ISnapInDesignerDef : IDispatch
    {
        // properties:

        //
        // SnapInDef
        //
        [
            id(DISPID_SNAPINDESIGNERDEF_SNAPINDEF),
            propget,
            nonbrowsable,
            hidden
        ]
        HRESULT SnapInDef([out, retval] ISnapInDef **ppiSnapInDef);


        //
        // ExtensionDefs
        //
        [
            id(DISPID_SNAPINDESIGNERDEF_EXTENSIONDEFS),
            propget,
            nonbrowsable,
            hidden
        ]
        HRESULT ExtensionDefs([out, retval] IExtensionDefs **ppiExtensionDefs);


        //
        // AutoCreateNodes
        //
        [
            id(DISPID_SNAPINDESIGNERDEF_AUTOCREATE_NODES),
            propget,
            nonbrowsable,
            hidden
        ]
        HRESULT AutoCreateNodes([out, retval] IScopeItemDefs **ppiScopeItemDefs);

        //
        // OtherNodes
        //
        [
            id(DISPID_SNAPINDESIGNERDEF_OTHER_NODES),
            propget,
            nonbrowsable,
            hidden
        ]
        HRESULT OtherNodes([out, retval] IScopeItemDefs **ppiScopeItemDefs);


        //
        // ImageLists
        //
        [
            id(DISPID_SNAPINDESIGNERDEF_IMAGELISTS),
            propget,
            nonbrowsable,
            hidden
        ]
        HRESULT ImageLists([out, retval] IMMCImageLists **ppiMMCImageLists);


        //
        // Menus
        //
        [
            id(DISPID_SNAPINDESIGNERDEF_MENUS),
            propget,
            nonbrowsable,
            hidden
        ]
        HRESULT Menus([out, retval] IMMCMenus **ppiMMCMenus);


        //
        // Toolbars
        //
        [
            id(DISPID_SNAPINDESIGNERDEF_TOOLBARS),
            propget,
            nonbrowsable,
            hidden
        ]
        HRESULT Toolbars([out, retval] IMMCToolbars **ppiMMCToolbars);


        //
        // ViewDefs
        //
        [
            id(DISPID_SNAPINDESIGNERDEF_VIEWDEFS),
            propget,
            nonbrowsable,
            hidden
        ]
        HRESULT ViewDefs([out, retval] IViewDefs **ppiViewDefs);

        //
        // DataFormats
        //
        [
            id(DISPID_SNAPINDESIGNERDEF_DATA_FORMATS),
            propget,
            nonbrowsable,
            hidden
        ]
        HRESULT DataFormats([out, retval] IDataFormats **ppiDataFormats);

        //
        // RegInfo
        //
        [
            id(DISPID_SNAPINDESIGNERDEF_REGINFO),
            propget,
            nonbrowsable,
            hidden
        ]
        HRESULT RegInfo([out, retval] IRegInfo **ppiRegInfo);

        //
        // TypeinfoCookie
        //
        [
            id(DISPID_SNAPINDESIGNERDEF_TYPEINFO_COOKIE),
            propget,
            nonbrowsable,
            hidden
        ]
        HRESULT TypeinfoCookie([out, retval] long *plTypeinfoCookie);

        [
            id(DISPID_SNAPINDESIGNERDEF_TYPEINFO_COOKIE),
            propput,
            nonbrowsable,
            hidden
        ]
        HRESULT TypeinfoCookie([in] long lTypeinfoCookie);


        //
        // ProjectName
        //
        [
            id(DISPID_SNAPINDESIGNERDEF_PROJECTNAME),
            propget,
            nonbrowsable,
            hidden
        ]
        HRESULT ProjectName([out, retval] BSTR *pbstrProjectName);

        [
            id(DISPID_SNAPINDESIGNERDEF_PROJECTNAME),
            propput,
            nonbrowsable,
            hidden
        ]
        HRESULT ProjectName([in] BSTR bstrProjectName);


        // methods:
    };

    [
        uuid(E0899AD2-064D-11D2-9790-46AA20524153),
        hidden
    ]
    coclass SnapInDesignerDef
    {
        [default] interface ISnapInDesignerDef;
    };


    //=---------------------------------------------------------------------=
    //                      ViewDefs Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(FFF9A8E2-06CB-11D2-9791-50C320524153),
        dual,
        oleautomation,
        nonextensible,
        hidden
    ]
    interface IViewDefs : IDispatch
    {
        // properties:

        //
        // ListViews
        //
        [
            id(DISPID_VIEWDEFS_LIST_VIEWS),
            propget,
            nonbrowsable,
            hidden
        ]
        HRESULT ListViews([out, retval] IListViewDefs **ppiListViewDefs);


        //
        // OCXViews
        //
        [
            id(DISPID_VIEWDEFS_OCX_VIEWS),
            propget,
            nonbrowsable,
            hidden
        ]
        HRESULT OCXViews([out, retval] IOCXViewDefs **ppiOCXViewDefs);


        //
        // URLViews
        //
        [
            id(DISPID_VIEWDEFS_URL_VIEWS),
            propget,
            nonbrowsable,
            hidden
        ]
        HRESULT URLViews([out, retval] IURLViewDefs **ppiURLViewDefs);

        //
        // TaskpadViews
        //
        [
            id(DISPID_VIEWDEFS_TASKPAD_VIEWS),
            propget,
            nonbrowsable,
            hidden
        ]
        HRESULT TaskpadViews([out, retval] ITaskpadViewDefs **ppiTaskpadViewDefs);

        // methods:
    };

    [
        uuid(FFF9A8E1-06CB-11D2-9791-50C320524153),
        hidden
    ]
    coclass ViewDefs
    {
        [default] interface IViewDefs;
    };


    //=---------------------------------------------------------------------=
    //                         SnapInDef Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(FFF9A8E3-06CB-11D2-9791-50C320524153),
        dual,
        oleautomation,
        nonextensible,
        hidden
    ]
    interface ISnapInDef : IDispatch
    {
        // properties:

        //
        // Name
        //
        [
            id(DISPID_VALUE),
            propput,
            HELP(mssnapr_ISnapIn_Name)
        ]
        HRESULT _stdcall Name([in] BSTR bstrName);

        [
            id(DISPID_VALUE),
            propget,
            HELP(mssnapr_ISnapIn_Name)
        ]
        HRESULT _stdcall Name([out, retval] BSTR *pbstrName);

        //
        // NodeTypeName
        //
        [
            id(DISPID_SNAPINDEF_NODE_TYPE_NAME),
            propput,
            nonbrowsable,
            HELP(mssnapr_ISnapIn_NodeTypeName)
        ]
        HRESULT _stdcall NodeTypeName([in] BSTR bstrName);

        [
            id(DISPID_SNAPINDEF_NODE_TYPE_NAME),
            propget,
            nonbrowsable,
            HELP(mssnapr_ISnapIn_NodeTypeName)
        ]
        HRESULT _stdcall NodeTypeName([out, retval] BSTR *pbstrName);

        //
        // NodeTypeGUID
        //
        [
            id(DISPID_SNAPINDEF_NODE_TYPE_GUID),
            propget,
            nonbrowsable,
            HELP(mssnapr_ISnapIn_NodeTypeGUID)
        ]
        HRESULT _stdcall NodeTypeGUID([out, retval] BSTR *pbstrGUID);

        //
        // DisplayName
        //
        [
            id(DISPID_SNAPINDEF_DISPLAY_NAME),
            propput,
            HELP(mssnapr_ISnapIn_DisplayName)
        ]
        HRESULT _stdcall DisplayName([in] BSTR bstrName);

        [
            id(DISPID_SNAPINDEF_DISPLAY_NAME),
            propget,
            HELP(mssnapr_ISnapIn_DisplayName)
        ]
        HRESULT _stdcall DisplayName([out, retval] BSTR *pbstrName);

        //
        // Type
        //
        [
            id(DISPID_SNAPINDEF_TYPE),
            propput,
            nonbrowsable,
            HELP(mssnapr_ISnapIn_Type)
        ]
        HRESULT _stdcall Type([in] SnapInTypeConstants Type);

        [
            id(DISPID_SNAPINDEF_TYPE),
            propget,
            nonbrowsable,
            HELP(mssnapr_ISnapIn_Type)
        ]
        HRESULT _stdcall Type([out, retval] SnapInTypeConstants *pType);

        //
        // HelpFile
        //
        [
            id(DISPID_SNAPINDEF_HELP_FILE),
            propput,
            HELP(mssnapr_ISnapIn_HelpFile)
        ]
        HRESULT _stdcall HelpFile([in] BSTR bstrFileName);

        [
            id(DISPID_SNAPINDEF_HELP_FILE),
            propget,
            HELP(mssnapr_ISnapIn_HelpFile)
        ]
        HRESULT _stdcall HelpFile([out, retval] BSTR *pbstrFileName);

        //
        // LinkedTopics
        //
        [
            id(DISPID_SNAPINDEF_LINKED_TOPICS),
            propput,
            HELP(mssnapr_ISnapIn_LinkedTopics)
        ]
        HRESULT _stdcall LinkedTopics([in] BSTR bstrTopics);

        [
            id(DISPID_SNAPINDEF_LINKED_TOPICS),
            propget,
            HELP(mssnapr_ISnapIn_LinkedTopics)
        ]
        HRESULT _stdcall LinkedTopics([out, retval] BSTR *pbstrTopics);

        //
        // Description
        //
        [
            id(DISPID_SNAPINDEF_DESCRIPTION),
            propput,
            HELP(mssnapr_ISnapIn_Description)
        ]
        HRESULT _stdcall Description([in] BSTR bstrDescription);

        [
            id(DISPID_SNAPINDEF_DESCRIPTION),
            propget,
            HELP(mssnapr_ISnapIn_Description)
        ]
        HRESULT _stdcall Description([out, retval] BSTR *pbstrDescription);

        //
        // Provider
        //
        [
            id(DISPID_SNAPINDEF_PROVIDER),
            propput,
            HELP(mssnapr_ISnapIn_Provider)
        ]
        HRESULT _stdcall Provider([in] BSTR bstrProvider);

        [
            id(DISPID_SNAPINDEF_PROVIDER),
            propget,
            HELP(mssnapr_ISnapIn_Provider)
        ]
        HRESULT _stdcall Provider([out, retval] BSTR *pbstrProvider);

        //
        // Version
        //
        [
            id(DISPID_SNAPINDEF_VERSION),
            propput,
            HELP(mssnapr_ISnapIn_Version)
        ]
        HRESULT _stdcall Version([in] BSTR bstrVersion);

        [
            id(DISPID_SNAPINDEF_VERSION),
            propget,
            HELP(mssnapr_ISnapIn_Version)
        ]
        HRESULT _stdcall Version([out, retval] BSTR *pbstrVersion);

        //
        // SmallFolders
        //
        [
            id(DISPID_SNAPINDEF_SMALL_FOLDERS),
            propputref,
            HELP(mssnapr_ISnapIn_SmallFolders)
        ]
        HRESULT _stdcall SmallFolders([in] IMMCImageList *piMMCImageList);

        [
            id(DISPID_SNAPINDEF_SMALL_FOLDERS),
            propget,
            HELP(mssnapr_ISnapIn_SmallFolders)
        ]
        HRESULT _stdcall SmallFolders([out, retval] IMMCImageList **ppiMMCImageList);

        //
        // SmallFoldersOpen
        //
        [
            id(DISPID_SNAPINDEF_SMALL_FOLDERS_OPEN),
            propputref,
            HELP(mssnapr_ISnapIn_SmallFoldersOpen)
        ]
        HRESULT _stdcall SmallFoldersOpen([in] IMMCImageList *piMMCImageList);

        [
            id(DISPID_SNAPINDEF_SMALL_FOLDERS_OPEN),
            propget,
            HELP(mssnapr_ISnapIn_SmallFoldersOpen)
        ]
        HRESULT _stdcall SmallFoldersOpen([out, retval] IMMCImageList **ppiMMCImageList);

        //
        // LargeFolders
        //
        [
            id(DISPID_SNAPINDEF_LARGE_FOLDERS),
            propputref,
            HELP(mssnapr_ISnapIn_LargeFolders)
        ]
        HRESULT _stdcall LargeFolders([in] IMMCImageList *piMMCImageList);

        [
            id(DISPID_SNAPINDEF_LARGE_FOLDERS),
            propget,
            HELP(mssnapr_ISnapIn_LargeFolders)
        ]
        HRESULT _stdcall LargeFolders([out, retval] IMMCImageList **ppiMMCImageList);

        //
        // Icon
        //
        [
            id(DISPID_SNAPINDEF_ICON),
            propputref,
            HELP(mssnapr_ISnapIn_Icon)
        ]
        HRESULT _stdcall Icon([in] IPictureDisp* piPictureDisp);

        [
            id(DISPID_SNAPINDEF_ICON),
            propget,
            HELP(mssnapr_ISnapIn_Icon)
        ]
        HRESULT _stdcall Icon([out, retval] IPictureDisp **ppiPictureDisp);

        //
        // Watermark
        //
        [
            id(DISPID_SNAPINDEF_WATERMARK),
            propputref,
            nonbrowsable,
            HELP(mssnapr_ISnapIn_Watermark)
        ]
        HRESULT _stdcall Watermark([in] IPictureDisp* piPictureDisp);

        [
            id(DISPID_SNAPINDEF_WATERMARK),
            propget,
            nonbrowsable,
            HELP(mssnapr_ISnapIn_Watermark)
        ]
        HRESULT _stdcall Watermark([out, retval] IPictureDisp **ppiPictureDisp);

        //
        // Header
        //
        [
            id(DISPID_SNAPINDEF_HEADER),
            propputref,
            nonbrowsable,
            HELP(mssnapr_ISnapIn_Header)
        ]
        HRESULT _stdcall Header([in] IPictureDisp* piPictureDisp);

        [
            id(DISPID_SNAPINDEF_HEADER),
            propget,
            nonbrowsable,
            HELP(mssnapr_ISnapIn_Header)
        ]
        HRESULT _stdcall Header([out, retval] IPictureDisp **ppiPictureDisp);

        //
        // Palette
        //
        [
            id(DISPID_SNAPINDEF_PALETTE),
            propputref,
            nonbrowsable,
            HELP(mssnapr_ISnapIn_Palette)
        ]
        HRESULT _stdcall Palette([in] IPictureDisp* piPictureDisp);

        [
            id(DISPID_SNAPINDEF_PALETTE),
            propget,
            nonbrowsable,
            HELP(mssnapr_ISnapIn_Palette)
        ]
        HRESULT _stdcall Palette([out, retval] IPictureDisp **ppiPictureDisp);

        //
        // StretchWatermark
        //
        [
            id(DISPID_SNAPINDEF_STRETCH_WATERMARK),
            propput,
            nonbrowsable,
            HELP(mssnapr_ISnapIn_StretchWatermark)
        ]
        HRESULT _stdcall StretchWatermark([in] VARIANT_BOOL pfvarStretch);

        [
            id(DISPID_SNAPINDEF_STRETCH_WATERMARK),
            propget,
            nonbrowsable,
            HELP(mssnapr_ISnapIn_StretchWatermark)
        ]
        HRESULT _stdcall StretchWatermark([out, retval] VARIANT_BOOL *pfvarStretch);

        //
        // StaticFolder
        //
        [
            id(DISPID_SNAPINDEF_STATIC_FOLDER),
            propput,
            HELP(mssnapr_ISnapIn_StaticFolder)
        ]
        HRESULT _stdcall StaticFolder([in] VARIANT varIndex);

        [
            id(DISPID_SNAPINDEF_STATIC_FOLDER),
            propget,
            HELP(mssnapr_ISnapIn_StaticFolder)
        ]
        HRESULT _stdcall StaticFolder([out, retval] VARIANT *pvarIndex);

        //
        // DefaultView
        //
        [
            id(DISPID_SNAPINDEF_DEFAULTVIEW),
            propput,
            //nonbrowsable,
            //hidden
        ]
        HRESULT _stdcall DefaultView([in] BSTR bstrDefaultView);

        [
            id(DISPID_SNAPINDEF_DEFAULTVIEW),
            propget,
            //nonbrowsable,
            //hidden
        ]
        HRESULT _stdcall DefaultView([out, retval] BSTR *pbstrDefaultView);


        //
        // Extensible
        //
        [
            id(DISPID_SNAPINDEF_EXTENSIBLE),
            propput,
            nonbrowsable,
            HELP(mssnapr_ISnapInDef_Extensible)
        ]
        HRESULT _stdcall Extensible([in] VARIANT_BOOL fExtensible);

        [
            id(DISPID_SNAPINDEF_EXTENSIBLE),
            propget,
            nonbrowsable,
            HELP(mssnapr_ISnapInDef_Extensible)
        ]
        HRESULT _stdcall Extensible([out, retval] VARIANT_BOOL *pfExtensible);


        //
        // ViewDefs
        //
        [
            id(DISPID_SNAPINDEF_VIEWDEFS),
            propget,
            nonbrowsable,
            hidden
        ]
        HRESULT _stdcall ViewDefs([out, retval] IViewDefs **ppiViewDefs);

        //
        // Children
        //
        [
            id(DISPID_SNAPINDEF_CHILDREN),
            propget,
            nonbrowsable,
            hidden
        ]
        HRESULT Children([out, retval] IScopeItemDefs **ppiScopeItemDefs);

        //
        // IID
        //
        [
            id(DISPID_SNAPINDEF_IID),
            propput,
            nonbrowsable,
            hidden
        ]
        HRESULT _stdcall IID([in] BSTR bstrIID);

        [
            id(DISPID_SNAPINDEF_IID),
            propget,
            nonbrowsable,
            hidden
        ]
        HRESULT _stdcall IID([out, retval] BSTR *pbstrIID);


        //
        // Preload
        //
        [
            id(DISPID_SNAPINDEF_PRELOAD),
            propput,
            HELP(mssnapr_ISnapIn_Preload)
        ]
        HRESULT _stdcall Preload([in] VARIANT_BOOL fPreload);

        [
            id(DISPID_SNAPINDEF_PRELOAD),
            propget,
            HELP(mssnapr_ISnapIn_Preload)
        ]
        HRESULT _stdcall Preload([out, retval] VARIANT_BOOL *pfPreload);

        // methods:
    };

    [
        uuid(FFF9A8E4-06CB-11D2-9791-50C320524153),
        hidden
    ]
    coclass SnapInDef
    {
        [default] interface ISnapInDef;
    };

    //=---------------------------------------------------------------------=
    //                      ExtensionDefs Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(FFF9A8E5-06CB-11D2-9791-50C320524153),
        dual,
        oleautomation,
        nonextensible,
        hidden
    ]
    interface IExtensionDefs : IDispatch
    {
        // properties:

        //
        // Name
        //
        [
            id(DISPID_VALUE),
            propget,
            hidden,
        ]
        HRESULT _stdcall Name([out, retval] BSTR *pbstrName);

        //
        // ExtendsNewMenu
        //
        [
            id(DISPID_EXTENSIONDEFS_EXTENDS_NEW_MENU),
            propput,
            HELP(mssnapr_IExtensionDefs_ExtendsNewMenu)
        ]
        HRESULT _stdcall ExtendsNewMenu([in] VARIANT_BOOL fExtendsNewMenu);

        [
            id(DISPID_EXTENSIONDEFS_EXTENDS_NEW_MENU),
            propget,
            HELP(mssnapr_IExtensionDefs_ExtendsNewMenu)
        ]
        HRESULT _stdcall ExtendsNewMenu([out, retval] VARIANT_BOOL *pfExtendsNewMenu);


        //
        // ExtendsTaskMenu
        //
        [
            id(DISPID_EXTENSIONDEFS_EXTENDS_TASK_MENU),
            propput,
            HELP(mssnapr_IExtensionDefs_ExtendsTaskMenu)
        ]
        HRESULT _stdcall ExtendsTaskMenu([in] VARIANT_BOOL fExtendsTaskMenu);

        [
            id(DISPID_EXTENSIONDEFS_EXTENDS_TASK_MENU),
            propget,
            HELP(mssnapr_IExtensionDefs_ExtendsTaskMenu)
        ]
        HRESULT _stdcall ExtendsTaskMenu([out, retval] VARIANT_BOOL *pfExtendsTaskMenu);


        //
        // ExtendsTopMenu
        //
        [
            id(DISPID_EXTENSIONDEFS_EXTENDS_TOP_MENU),
            propput,
            HELP(mssnapr_IExtensionDefs_ExtendsTopMenu)
        ]
        HRESULT _stdcall ExtendsTopMenu([in] VARIANT_BOOL fExtendsTopMenu);

        [
            id(DISPID_EXTENSIONDEFS_EXTENDS_TOP_MENU),
            propget,
            HELP(mssnapr_IExtensionDefs_ExtendsTopMenu)
        ]
        HRESULT _stdcall ExtendsTopMenu([out, retval] VARIANT_BOOL *pfExtendsTopMenu);


        //
        // ExtendsPropertyPages
        //
        [
            id(DISPID_EXTENSIONDEFS_EXTENDS_PROPERTYPAGES),
            propput,
            HELP(mssnapr_IExtensionDefs_ExtendsPropertyPages)
        ]
        HRESULT _stdcall ExtendsPropertyPages([in] VARIANT_BOOL fExtendsPropertyPages);

        [
            id(DISPID_EXTENSIONDEFS_EXTENDS_PROPERTYPAGES),
            propget,
            HELP(mssnapr_IExtensionDefs_ExtendsPropertyPages)
        ]
        HRESULT _stdcall ExtendsPropertyPages([out, retval] VARIANT_BOOL *pfExtendsPropertyPages);


        //
        // ExtendsViewMenu
        //
        [
            id(DISPID_EXTENSIONDEFS_EXTENDS_VIEW_MENU),
            propput,
            HELP(mssnapr_IExtensionDefs_ExtendsViewMenu)
        ]
        HRESULT _stdcall ExtendsViewMenu([in] VARIANT_BOOL fExtendsViewMenu);

        [
            id(DISPID_EXTENSIONDEFS_EXTENDS_VIEW_MENU),
            propget,
            HELP(mssnapr_IExtensionDefs_ExtendsViewMenu)
        ]
        HRESULT _stdcall ExtendsViewMenu([out, retval] VARIANT_BOOL *pfExtendsViewMenu);


        //
        // ExtendsToolbar
        //
        [
            id(DISPID_EXTENSIONDEFS_EXTENDS_TOOLBAR),
            propput,
            HELP(mssnapr_IExtensionDefs_ExtendsToolbar)
        ]
        HRESULT _stdcall ExtendsToolbar([in] VARIANT_BOOL fExtendsToolbar);

        [
            id(DISPID_EXTENSIONDEFS_EXTENDS_TOOLBAR),
            propget,
            HELP(mssnapr_IExtensionDefs_ExtendsToolbar)
        ]
        HRESULT _stdcall ExtendsToolbar([out, retval] VARIANT_BOOL *pfExtendsToolbar);

        //
        // ExtendsNameSpace
        //
        [
            id(DISPID_EXTENSIONDEFS_EXTENDS_NAMESPACE),
            propput,
            HELP(mssnapr_IExtensionDefs_ExtendsNameSpace)
        ]
        HRESULT _stdcall ExtendsNameSpace([in] VARIANT_BOOL fExtendsNameSpace);

        [
            id(DISPID_EXTENSIONDEFS_EXTENDS_NAMESPACE),
            propget,
            HELP(mssnapr_IExtensionDefs_ExtendsNameSpace)
        ]
        HRESULT _stdcall ExtendsNameSpace([out, retval] VARIANT_BOOL *pfExtendsNameSpace);


        //
        // ExtendedSnapIns
        //
        [
            id(DISPID_EXTENSIONDEFS_EXTENDED_SNAPINS),
            propget,
            nonbrowsable,
            hidden
        ]
        HRESULT _stdcall ExtendedSnapIns([out, retval] IExtendedSnapIns **ppiExtendedSnapIns);

        // methods:
    };

    [
        uuid(FFF9A8E6-06CB-11D2-9791-50C320524153),
        hidden
    ]
    coclass ExtensionDefs
    {
        [default] interface IExtensionDefs;
    };


    //=---------------------------------------------------------------------=
    //                    ExtendedSnapIn Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(FFF9A8E7-06CB-11D2-9791-50C320524153),
        dual,
        oleautomation,
        nonextensible,
        hidden
    ]
    interface IExtendedSnapIn : IDispatch
    {
        // properties:

        //
        // Name - needed for VB property browser. Should be the same as
        // NodeTypeName.
        //
        [
            id(DISPID_VALUE),
            propput,
            HELP(mssnapr_IExtendedSnapin_NodeTypeName)
        ]
        HRESULT _stdcall Name([in] BSTR bstrName);

        [
            id(DISPID_VALUE),
            propget,
            HELP(mssnapr_IExtendedSnapin_NodeTypeName)
        ]
        HRESULT _stdcall Name([out, retval] BSTR *pbstrName);

        //
        // Index
        //
        [
            id(DISPID_EXTENDEDSNAPIN_INDEX),
            propget,
            nonbrowsable,
            hidden
        ]
        HRESULT Index([out, retval] long *plIndex);

        [
            id(DISPID_EXTENDEDSNAPIN_INDEX),
            propput,
            nonbrowsable,
            hidden
        ]
        HRESULT Index([in] long lIndex);

        //
        // Key
        //
        [
            id(DISPID_EXTENDEDSNAPIN_KEY),
            propget,
            nonbrowsable,
            hidden
        ]
        HRESULT Key([out, retval] BSTR *pbstrKey);

        [
            id(DISPID_EXTENDEDSNAPIN_KEY),
            propput,
            nonbrowsable,
            hidden
        ]
        HRESULT Key([in] BSTR bstrKey);


        //
        // NodeTypeGUID
        //
        [
            id(DISPID_EXTENDEDSNAPIN_NODE_TYPE_GUID),
            propput,
            nonbrowsable,
            hidden
        ]
        HRESULT _stdcall NodeTypeGUID([in] BSTR bstrNodeTypeGUID);

        [
            id(DISPID_EXTENDEDSNAPIN_NODE_TYPE_GUID),
            propget,
            nonbrowsable,
            hidden
        ]
        HRESULT _stdcall NodeTypeGUID([out, retval] BSTR *pbstrNodeTypeGUID);


        //
        // NodeTypeName
        //
        [
            id(DISPID_EXTENDEDSNAPIN_NODE_TYPE_NAME),
            propput,
            HELP(mssnapr_IExtendedSnapin_NodeTypeName)
        ]
        HRESULT _stdcall NodeTypeName([in] BSTR bstrName);


        //
        // NodeTypeName
        //
        [
            id(DISPID_EXTENDEDSNAPIN_NODE_TYPE_NAME),
            propget,
            HELP(mssnapr_IExtendedSnapin_NodeTypeName)
        ]
        HRESULT _stdcall NodeTypeName([out, retval] BSTR *pbstrName);


        //
        // Dynamic
        //
        [
            id(DISPID_EXTENDEDSNAPIN_DYNAMIC),
            propput,
            HELP(mssnapr_IExtendedSnapIn_Dynamic)
        ]
        HRESULT _stdcall Dynamic([in] VARIANT_BOOL fDynamic);

        [
            id(DISPID_EXTENDEDSNAPIN_DYNAMIC),
            propget,
            HELP(mssnapr_IExtendedSnapIn_Dynamic)
        ]
        HRESULT _stdcall Dynamic([out, retval] VARIANT_BOOL *pfDynamic);


        //
        // ExtendsNameSpace
        //
        [
            id(DISPID_EXTENDEDSNAPIN_EXTENDS_NAMESPACE),
            propput,
            HELP(mssnapr_IExtendedSnapIn_ExtendsNameSpace)
        ]
        HRESULT _stdcall ExtendsNameSpace([in] VARIANT_BOOL fExtendsNameSpace);

        [
            id(DISPID_EXTENDEDSNAPIN_EXTENDS_NAMESPACE),
            propget,
            HELP(mssnapr_IExtendedSnapIn_ExtendsNameSpace)
        ]
        HRESULT _stdcall ExtendsNameSpace([out, retval] VARIANT_BOOL *pfExtendsNameSpace);


        //
        // ExtendsNewMenu
        //
        [
            id(DISPID_EXTENDEDSNAPIN_EXTENDS_NEW_MENU),
            propput,
            HELP(mssnapr_IExtendedSnapIn_ExtendsNewMenu)
        ]
        HRESULT _stdcall ExtendsNewMenu([in] VARIANT_BOOL fExtendsNewMenu);

        [
            id(DISPID_EXTENDEDSNAPIN_EXTENDS_NEW_MENU),
            propget,
            HELP(mssnapr_IExtendedSnapIn_ExtendsNewMenu)
        ]
        HRESULT _stdcall ExtendsNewMenu([out, retval] VARIANT_BOOL *pfExtendsNewMenu);


        //
        // ExtendsTaskMenu
        //
        [
            id(DISPID_EXTENDEDSNAPIN_EXTENDS_TASK_MENU),
            propput,
            HELP(mssnapr_IExtendedSnapIn_ExtendsTaskMenu)
        ]
        HRESULT _stdcall ExtendsTaskMenu([in] VARIANT_BOOL fExtendsTaskMenu);

        [
            id(DISPID_EXTENDEDSNAPIN_EXTENDS_TASK_MENU),
            propget,
            HELP(mssnapr_IExtendedSnapIn_ExtendsTaskMenu)
        ]
        HRESULT _stdcall ExtendsTaskMenu([out, retval] VARIANT_BOOL *pfExtendsTaskMenu);


        //
        // ExtendsPropertyPages
        //
        [
            id(DISPID_EXTENDEDSNAPIN_EXTENDS_PROPERTYPAGES),
            propput,
            HELP(mssnapr_IExtendedSnapIn_ExtendsPropertyPages)
        ]
        HRESULT _stdcall ExtendsPropertyPages([in] VARIANT_BOOL fExtendsPropertyPages);

        [
            id(DISPID_EXTENDEDSNAPIN_EXTENDS_PROPERTYPAGES),
            propget,
            HELP(mssnapr_IExtendedSnapIn_ExtendsPropertyPages)
        ]
        HRESULT _stdcall ExtendsPropertyPages([out, retval] VARIANT_BOOL *pfExtendsPropertyPages);


        //
        // ExtendsToolbar
        //
        [
            id(DISPID_EXTENDEDSNAPIN_EXTENDS_TOOLBAR),
            propput,
            HELP(mssnapr_IExtendedSnapIn_ExtendsToolbar)
        ]
        HRESULT _stdcall ExtendsToolbar([in] VARIANT_BOOL fExtendsToolbar);

        [
            id(DISPID_EXTENDEDSNAPIN_EXTENDS_TOOLBAR),
            propget,
            HELP(mssnapr_IExtendedSnapIn_ExtendsToolbar)
        ]
        HRESULT _stdcall ExtendsToolbar([out, retval] VARIANT_BOOL *pfExtendsToolbar);

        //
        // ExtendsTaskpad
        //
        [
            id(DISPID_EXTENDEDSNAPIN_EXTENDS_TASKPAD),
            propput,
            HELP(mssnapr_IExtendedSnapIn_ExtendsTaskpad)
        ]
        HRESULT _stdcall ExtendsTaskpad([in] VARIANT_BOOL fExtendsTaskpad);

        [
            id(DISPID_EXTENDEDSNAPIN_EXTENDS_TASKPAD),
            propget,
            HELP(mssnapr_IExtendedSnapIn_ExtendsTaskpad)
        ]
        HRESULT _stdcall ExtendsTaskpad([out, retval] VARIANT_BOOL *pfExtendsTaskpad);


        // methods:
    };

    [
        uuid(FFF9A8E8-06CB-11D2-9791-50C320524153),
        hidden
    ]
    coclass ExtendedSnapIn
    {
        [default] interface IExtendedSnapIn;
    };

    //=---------------------------------------------------------------------=
    //                    ScopeItemDef Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(FFF9A8E9-06CB-11d2-9791-50C320524153),
        dual,
        oleautomation,
        nonextensible,
        hidden
    ]
    interface IScopeItemDef : IDispatch
    {
        // properties:

        //
        // Name
        //
        [
            id(DISPID_VALUE),
            propput,
            HELP(mssnapr_IScopeItem_Name)
        ]
        HRESULT _stdcall Name([in] BSTR bstrName);

        [
            id(DISPID_VALUE),
            propget,
            HELP(mssnapr_IScopeItem_Name)
        ]
        HRESULT _stdcall Name([out, retval] BSTR *pbstrName);


        //
        // Index - One based index within IScopeItemDefs collection
        //
        [
            id(DISPID_SCOPEITEMDEF_INDEX),
            propget,
            nonbrowsable,
            hidden
        ]
        HRESULT Index([out, retval] long *plIndex);

        [
            id(DISPID_SCOPEITEMDEF_INDEX),
            propput,
            nonbrowsable,
            hidden
        ]
        HRESULT Index([in] long lIndex);

        //
        // Key - key into IScopeItemDefs collection
        //
        [
            id(DISPID_SCOPEITEMDEF_KEY),
            propget,
            nonbrowsable,
            hidden
        ]
        HRESULT Key([out, retval] BSTR *pbstrKey);

        [
            id(DISPID_SCOPEITEMDEF_KEY),
            propput,
            nonbrowsable,
            hidden
        ]
        HRESULT Key([in] BSTR bstrKey);

        //
        // NodeTypeName
        //
        [
            id(DISPID_SCOPEITEMDEF_NODE_TYPE_NAME),
            propget,
            nonbrowsable,
            HELP(mssnapr_IScopeNode_NodeTypeName)
        ]
        HRESULT _stdcall NodeTypeName([out, retval] BSTR *pbstrName);

        [
            id(DISPID_SCOPEITEMDEF_NODE_TYPE_NAME),
            propput,
            nonbrowsable,
            HELP(mssnapr_IScopeNode_NodeTypeName)
        ]
        HRESULT _stdcall NodeTypeName([in] BSTR bstrName);

        //
        // NodeTypeGUID
        //
        [
            id(DISPID_SCOPEITEMDEF_NODE_TYPE_GUID),
            propget,
            nonbrowsable,
            hidden
        ]
        HRESULT _stdcall NodeTypeGUID([out, retval] BSTR *pbstrGUID);


        //
        // DisplayName
        //
        [
            id(DISPID_SCOPEITEMDEF_DISPLAY_NAME),
            propput,
            HELP(mssnapr_IScopeNode_DisplayName)
        ]
        HRESULT _stdcall DisplayName([in] BSTR bstrName);

        [
            id(DISPID_SCOPEITEMDEF_DISPLAY_NAME),
            propget,
            HELP(mssnapr_IScopeNode_DisplayName)
        ]
        HRESULT _stdcall DisplayName([out, retval] BSTR *pbstrName);

        //
        // Folder
        //
        [
            id(DISPID_SCOPEITEMDEF_FOLDER),
            propget,
            HELP(mssnapr_IScopeItem_Folder)
        ]
        HRESULT _stdcall Folder([out, retval] VARIANT *pfolder);

        [
            id(DISPID_SCOPEITEMDEF_FOLDER),
            propput,
            HELP(mssnapr_IScopeItem_Folder)
        ]
        HRESULT _stdcall Folder([in] VARIANT folder);

#if defined(USING_SNAPINDATA)

        //
        // DefaultDataFormat
        //
        [
            id(DISPID_SCOPEITEMDEF_DEFAULT_DATA_FORMAT),
            propget,
            HELP(mssnapr_IScopeItem_DefaultDataFormat)
        ]
        HRESULT _stdcall DefaultDataFormat([out, retval] BSTR *pbstrDefaultDataFormat);

        [
            id(DISPID_SCOPEITEMDEF_DEFAULT_DATA_FORMAT),
            propput,
            HELP(mssnapr_IScopeItem_DefaultDataFormat)
        ]
        HRESULT _stdcall DefaultDataFormat([in] BSTR bstrDefaultDataFormat);

#endif
        //
        // AutoCreate
        //
        [
            id(DISPID_SCOPEITEMDEF_AUTOCREATE),
            propput,
            HELP(mssnapr_IScopeItemDef_AutoCreate)
        ]
        HRESULT _stdcall AutoCreate([in] VARIANT_BOOL fAutoCreate);

        [
            id(DISPID_SCOPEITEMDEF_AUTOCREATE),
            propget,
            HELP(mssnapr_IScopeItemDef_AutoCreate)
        ]
        HRESULT _stdcall AutoCreate([out, retval] VARIANT_BOOL *pfAutoCreate);


        //
        // DefaultView
        //
        [
            id(DISPID_SCOPEITEMDEF_DEFAULTVIEW),
            propput,
            nonbrowsable,
            hidden
        ]
        HRESULT _stdcall DefaultView([in] BSTR bstrDefaultView);

        [
            id(DISPID_SCOPEITEMDEF_DEFAULTVIEW),
            propget,
            nonbrowsable,
            hidden
        ]
        HRESULT _stdcall DefaultView([out, retval] BSTR *pbstrDefaultView);

        //
        // Extensible
        //
        [
            id(DISPID_SCOPEITEMDEF_EXTENSIBLE),
            propput,
            HELP(mssnapr_IScopeItemDef_Extensible)
        ]
        HRESULT _stdcall Extensible([in] VARIANT_BOOL fExtensible);

        [
            id(DISPID_SCOPEITEMDEF_EXTENSIBLE),
            propget,
            nonbrowsable,
            HELP(mssnapr_IScopeItemDef_Extensible)
        ]
        HRESULT _stdcall Extensible([out, retval] VARIANT_BOOL *pfExtensible);


        //
        // HasChildren
        //
        [
            id(DISPID_SCOPEITEMDEF_HAS_CHILDREN),
            propget,
            HELP(mssnapr_IScopeItemDef_HasChildren)
        ]
        HRESULT _stdcall HasChildren([out, retval] VARIANT_BOOL *pfvarHasChildren);

        //
        // HasChildren
        //
        [
            id(DISPID_SCOPEITEMDEF_HAS_CHILDREN),
            propput,
            HELP(mssnapr_IScopeItemDef_HasChildren)
        ]
        HRESULT _stdcall HasChildren([in] VARIANT_BOOL fvarHasChildren);

        //
        // ViewDefs
        //
        [
            id(DISPID_SCOPEITEMDEF_VIEWDEFS),
            propget,
            nonbrowsable,
            hidden
        ]
        HRESULT _stdcall ViewDefs([out, retval] IViewDefs **ppIViewDefs);

        //
        // Children
        //
        [
            id(DISPID_SCOPEITEMDEF_CHILDREN),
            propget,
            nonbrowsable,
            hidden
        ]
        HRESULT Children([out, retval] IScopeItemDefs **ppiScopeItemDefs);

        //
        // Tag
        //
        [
            id(DISPID_SCOPEITEMDEF_TAG),
            propget,
            HELP(mssnapr_IScopeItem_Tag)
        ]
        HRESULT Tag([out, retval] VARIANT *pvarTag);

        [
            id(DISPID_SCOPEITEMDEF_TAG),
            propput,
            HELP(mssnapr_IScopeItem_Tag)
        ]
        HRESULT Tag([in] VARIANT varTag);


        //
        // ColumnHeaders
        //
        [
            id(DISPID_SCOPEITEMDEF_COLUMN_HEADERS),
            propget,
            HELP(mssnapr_IScopeItem_ColumnHeaders)
        ]
        HRESULT ColumnHeaders([out, retval] IMMCColumnHeaders **ppiMMCColumnHeaders);

        [
            id(DISPID_SCOPEITEMDEF_COLUMN_HEADERS),
            propputref,
            HELP(mssnapr_IScopeItem_ColumnHeaders)
        ]
        HRESULT ColumnHeaders([in] IMMCColumnHeaders *piMMCColumnHeaders);

        // methods:
    };

    [
        uuid(FFF9A8EA-06CB-11d2-9791-50C320524153),
        hidden
    ]
    coclass ScopeItemDef
    {
        [default] interface IScopeItemDef;
    };

    //=---------------------------------------------------------------------=
    //                    NodeType Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(B6994FB2-1DB6-11d2-97A3-E22420524153),
        dual,
        oleautomation,
        nonextensible,
        hidden
    ]
    interface INodeType : IDispatch
    {
        // properties:

        //
        // Index - One based index within INodeTypes collection
        //
        [
            id(DISPID_NODETYPE_INDEX),
            propget,
            nonbrowsable,
            hidden
        ]
        HRESULT Index([out, retval] long *plIndex);

        [
            id(DISPID_NODETYPE_INDEX),
            propput,
            nonbrowsable,
            hidden
        ]
        HRESULT Index([in] long lIndex);

        //
        // Key - key into INodeTypes collection
        //
        [
            id(DISPID_NODETYPE_KEY),
            propget,
            nonbrowsable,
            hidden
        ]
        HRESULT Key([out, retval] BSTR *pbstrKey);

        [
            id(DISPID_NODETYPE_KEY),
            propput,
            nonbrowsable,
            hidden
        ]
        HRESULT Key([in] BSTR bstrKey);

        //
        // Name
        //
        [
            id(DISPID_NODETYPE_NAME),
            propput,
            nonbrowsable,
            hidden
        ]
        HRESULT _stdcall Name([in] BSTR bstrName);

        [
            id(DISPID_NODETYPE_NAME),
            propget,
            nonbrowsable,
            hidden
        ]
        HRESULT _stdcall Name([out, retval] BSTR *pbstrName);

        //
        // GUID
        //
        [
            id(DISPID_NODETYPE_GUID),
            propput,
            nonbrowsable,
            hidden
        ]
        HRESULT _stdcall GUID([in] BSTR bstrGUID);

        [
            id(DISPID_NODETYPE_GUID),
            propget,
            nonbrowsable,
            hidden
        ]
        HRESULT _stdcall GUID([out, retval] BSTR *pbstrGUID);

        // methods:
    };

    [
        uuid(B6994FB3-1DB6-11d2-97A3-E22420524153),
        hidden
    ]
    coclass NodeType
    {
        [default] interface INodeType;
    };


    //=---------------------------------------------------------------------=
    //                     NodeTypes Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(B6994FB4-1DB6-11d2-97A3-E22420524153),
        dual,
        oleautomation,
        nonextensible,
        hidden
    ]
    interface INodeTypes : IDispatch
    {
        // properties:

        //
        // Count
        //
        [
            id(DISPID_NODETYPES_COUNT),
            propget,
            hidden
        ]
        HRESULT _stdcall Count([out, retval] long *plCount);

        //
        // Item
        //
        [
            id(DISPID_VALUE),
            propget,
            hidden
        ]
        HRESULT _stdcall Item([in] VARIANT Index,
                              [out, retval] INodeType **ppINodeType);

        //
        // NewEnum
        //
        [
            id(DISPID_NEWENUM),
            propget,
            hidden
        ]
        HRESULT _NewEnum([out, retval] IUnknown **ppunkEnum);

        // methods:

        //
        // Add
        //
        [
            id(DISPID_NODETYPES_ADD),
            hidden
        ]
        HRESULT Add([in, optional] VARIANT     Index,
                    [in, optional] VARIANT     Key,
                    [out, retval]  INodeType **ppINodeType);

        //
        // Clear
        //
        [
            id(DISPID_NODETYPES_CLEAR),
            hidden
        ]
        HRESULT _stdcall Clear();

        //
        // Remove
        //
        [
            id(DISPID_NODETYPES_REMOVE),
            hidden
        ]
        HRESULT _stdcall Remove([in] VARIANT Index);

    };

    [
        uuid(B6994FB5-1DB6-11d2-97A3-E22420524153),
        hidden
    ]
    coclass NodeTypes
    {
        [default] interface INodeTypes;
    };

    //=---------------------------------------------------------------------=
    //                       RegInfo Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(B6994FB6-1DB6-11d2-97A3-E22420524153),
        dual,
        oleautomation,
        nonextensible,
        hidden
    ]
    interface IRegInfo : IDispatch
    {
        // properties:

        //
        // DisplayName
        //
        [
            id(DISPID_REGINFO_DISPLAY_NAME),
            propput,
            nonbrowsable,
            hidden
        ]
        HRESULT _stdcall DisplayName([in] BSTR bstrName);

        [
            id(DISPID_REGINFO_DISPLAY_NAME),
            propget,
            nonbrowsable,
            hidden
        ]
        HRESULT _stdcall DisplayName([out, retval] BSTR *pbstrName);

        //
        // StaticNodeTypeGUID
        //
        [
            id(DISPID_REGINFO_STATIC_NODE_TYPE_GUID),
            propput,
            nonbrowsable,
            hidden
        ]
        HRESULT _stdcall StaticNodeTypeGUID([in] BSTR bstrGUID);

        [
            id(DISPID_REGINFO_STATIC_NODE_TYPE_GUID),
            propget,
            nonbrowsable,
            hidden
        ]
        HRESULT _stdcall StaticNodeTypeGUID([out, retval] BSTR *pbstrGUID);

        //
        // StandAlone
        //
        [
            id(DISPID_REGINFO_STANDALONE),
            propput,
            nonbrowsable,
            hidden
        ]
        HRESULT _stdcall StandAlone([in] VARIANT_BOOL fStandAlone);

        [
            id(DISPID_REGINFO_STANDALONE),
            propget,
            nonbrowsable,
            hidden
        ]
        HRESULT _stdcall StandAlone([out, retval] VARIANT_BOOL *pfStandAlone);

        //
        // NodeTypes
        //
        [
            id(DISPID_REGINFO_NODETYPES),
            propget,
            nonbrowsable,
            hidden
        ]
        HRESULT _stdcall NodeTypes([out, retval] INodeTypes **ppINodeTypes);

        //
        // ExtendedSnapIns
        //
        [
            id(DISPID_REGINFO_EXTENDED_SNAPINS),
            propget,
            nonbrowsable,
            hidden
        ]
        HRESULT _stdcall ExtendedSnapIns([out, retval] IExtendedSnapIns **ppiExtendedSnapIns);

        [
            id(DISPID_REGINFO_EXTENDED_SNAPINS),
            propputref,
            nonbrowsable,
            hidden
        ]
        HRESULT _stdcall ExtendedSnapIns([in] IExtendedSnapIns *piExtendedSnapIns);

        // methods:
    };

    [
        uuid(B6994FB7-1DB6-11d2-97A3-E22420524153),
        hidden
    ]
    coclass RegInfo
    {
        [default] interface IRegInfo;
    };



    //=---------------------------------------------------------------------=
    //                    ListViewDef Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(FFF9A8EB-06CB-11d2-9791-50C320524153),
        dual,
        oleautomation,
        nonextensible,
        hidden
    ]
    interface IListViewDef : IDispatch
    {
        // properties:

        //
        // Name
        //
        [
            id(DISPID_VALUE),
            propput,
            HELP(mssnapr_IResultView_Name)
        ]
        HRESULT _stdcall Name([in] BSTR bstrName);

        [
            id(DISPID_VALUE),
            propget,
            HELP(mssnapr_IResultView_Name)
        ]
        HRESULT _stdcall Name([out, retval] BSTR *pbstrName);


        //
        // Index - One based index within IListViewDefs collection
        //
        [
            id(DISPID_LISTVIEWDEF_INDEX),
            propget,
            nonbrowsable,
            hidden
        ]
        HRESULT Index([out, retval] long *plIndex);

        [
            id(DISPID_LISTVIEWDEF_INDEX),
            propput,
            nonbrowsable,
            hidden
        ]
        HRESULT Index([in] long lIndex);

        //
        // Key - key into IListViewDefs collection
        //
        [
            id(DISPID_LISTVIEWDEF_KEY),
            propget,
            nonbrowsable,
            hidden
        ]
        HRESULT Key([out, retval] BSTR *pbstrKey);

        [
            id(DISPID_LISTVIEWDEF_KEY),
            propput,
            nonbrowsable,
            hidden
        ]
        HRESULT Key([in] BSTR bstrKey);

        //
        // Tag
        //
        [
            id(DISPID_LISTVIEWDEF_TAG),
            propget,
            HELP(mssnapr_IMMCListView_Tag)
        ]
        HRESULT Tag([out, retval] VARIANT *pvarTag);

        [
            id(DISPID_LISTVIEWDEF_TAG),
            propput,
            HELP(mssnapr_IMMCListView_Tag)
        ]
        HRESULT Tag([in] VARIANT varTag);


        //
        // AddToViewMenu
        //
        [
            id(DISPID_LISTVIEWDEF_ADD_TO_VIEW_MENU),
            propput,
            HELP(mssnapr_ViewDef_AddToViewMenu)
        ]
        HRESULT _stdcall AddToViewMenu([in] VARIANT_BOOL fAddToViewMenu);

        [
            id(DISPID_LISTVIEWDEF_ADD_TO_VIEW_MENU),
            propget,
            HELP(mssnapr_ViewDef_AddToViewMenu)
        ]
        HRESULT _stdcall AddToViewMenu([out, retval] VARIANT_BOOL *pfAddToViewMenu);


        //
        // ViewMenuText
        //
        [
            id(DISPID_LISTVIEWDEF_VIEW_MENU_TEXT),
            propput,
            HELP(mssnapr_ViewDef_ViewMenuText)
        ]
        HRESULT _stdcall ViewMenuText([in] BSTR bstrText);

        [
            id(DISPID_LISTVIEWDEF_VIEW_MENU_TEXT),
            propget,
            HELP(mssnapr_ViewDef_ViewMenuText)
        ]
        HRESULT _stdcall ViewMenuText([out, retval] BSTR *pbstrText);


        //
        // ViewMenuStatusBarText
        //
        [
            id(DISPID_LISTVIEWDEF_VIEW_MENU_STATUS_BAR_TEXT),
            propput,
            HELP(mssnapr_ViewDef_ViewMenuStatusBarText)
        ]
        HRESULT _stdcall ViewMenuStatusBarText([in] BSTR bstrText);

        [
            id(DISPID_LISTVIEWDEF_VIEW_MENU_STATUS_BAR_TEXT),
            propget,
            HELP(mssnapr_ViewDef_ViewMenuStatusBarText)
        ]
        HRESULT _stdcall ViewMenuStatusBarText([out, retval] BSTR *pbstrText);


        //
        // DefaultItemTypeGUID
        //
        [
            id(DISPID_LISTVIEWDEF_DEFAULT_ITEM_TYPE_GUID),
            propget,
            nonbrowsable,
            HELP(mssnapr_IResultView_DefaultItemTypeGUID)
        ]
        HRESULT _stdcall DefaultItemTypeGUID([out, retval] BSTR *pbstrDefaultItemTypeGUID);

        [
            id(DISPID_LISTVIEWDEF_DEFAULT_ITEM_TYPE_GUID),
            propput,
            nonbrowsable,
            HELP(mssnapr_IResultView_DefaultItemTypeGUID)
        ]
        HRESULT _stdcall DefaultItemTypeGUID([in] BSTR bstrDefaultItemTypeGUID);


        //
        // Extensible
        //
        [
            id(DISPID_LISTVIEWDEF_EXTENSIBLE),
            propput,
            HELP(mssnapr_IListViewDef_Extensible)
        ]
        HRESULT _stdcall Extensible([in] VARIANT_BOOL fExtensible);

        [
            id(DISPID_LISTVIEWDEF_EXTENSIBLE),
            propget,
            HELP(mssnapr_IListViewDef_Extensible)
        ]
        HRESULT _stdcall Extensible([out, retval] VARIANT_BOOL *pfExtensible);

        //
        // MultiSelect
        //
        [
            id(DISPID_LISTVIEWDEF_MULTI_SELECT),
            propget,
            HELP(mssnapr_IMMCListView_MultiSelect)
        ]
        HRESULT MultiSelect([out, retval] VARIANT_BOOL *pfMultiSelect);

        [
            id(DISPID_LISTVIEWDEF_MULTI_SELECT),
            propput,
            HELP(mssnapr_IMMCListView_MultiSelect)
        ]
        HRESULT MultiSelect([in] VARIANT_BOOL fMultiSelect);

        //
        // HideSelection
        //
        [
            id(DISPID_LISTVIEWDEF_HIDE_SELECTION),
            propget,
            HELP(mssnapr_IMMCListView_HideSelection)
        ]
        HRESULT HideSelection([out, retval] VARIANT_BOOL *pfHideSelection);

        [
            id(DISPID_LISTVIEWDEF_HIDE_SELECTION),
            propput,
            HELP(mssnapr_IMMCListView_HideSelection)
        ]
        HRESULT HideSelection([in] VARIANT_BOOL fHideSelection);

        //
        // SortHeader
        //
        [
            id(DISPID_LISTVIEWDEF_SORT_HEADER),
            propget,
            HELP(mssnapr_IMMCListView_SortHeader)
        ]
        HRESULT SortHeader([out, retval] VARIANT_BOOL *pfSortHeader);

        [
            id(DISPID_LISTVIEWDEF_SORT_HEADER),
            propput,
            HELP(mssnapr_IMMCListView_SortHeader)
        ]
        HRESULT SortHeader([in] VARIANT_BOOL fSortHeader);

        //
        // SortIcon
        //
        [
            id(DISPID_LISTVIEWDEF_SORT_ICON),
            propget,
            HELP(mssnapr_IMMCListView_SortIcon)
        ]
        HRESULT SortIcon([out, retval] VARIANT_BOOL *pfSortIcon);

        [
            id(DISPID_LISTVIEWDEF_SORT_ICON),
            propput,
            HELP(mssnapr_IMMCListView_SortIcon)
        ]
        HRESULT SortIcon([in] VARIANT_BOOL fSortIcon);

        //
        // Sorted
        //
        [
            id(DISPID_LISTVIEWDEF_SORTED),
            propget,
            HELP(mssnapr_IMMCListView_Sorted)
        ]
        HRESULT Sorted([out, retval] VARIANT_BOOL *pfSorted);

        [
            id(DISPID_LISTVIEWDEF_SORTED),
            propput,
            HELP(mssnapr_IMMCListView_Sorted)
        ]
        HRESULT Sorted([in] VARIANT_BOOL fSorted);

        //
        // SortKey
        //
        [
            id(DISPID_LISTVIEWDEF_SORT_KEY),
            propget,
            HELP(mssnapr_IMMCListView_SortKey)
        ]
        HRESULT SortKey([out, retval] short *psKey);

        [
            id(DISPID_LISTVIEWDEF_SORT_KEY),
            propput,
            HELP(mssnapr_IMMCListView_SortKey)
        ]
        HRESULT SortKey([in] short sKey);

        //
        // SortOrder
        //
        [
            id(DISPID_LISTVIEWDEF_SORT_ORDER),
            propget,
            HELP(mssnapr_IMMCListView_SortOrder)
        ]
        HRESULT SortOrder([out, retval] SnapInSortOrderConstants *pOrder);

        [
            id(DISPID_LISTVIEWDEF_SORT_ORDER),
            propput,
            HELP(mssnapr_IMMCListView_SortOrder)
        ]
        HRESULT SortOrder([in] SnapInSortOrderConstants Order);

        //
        // View
        //
        [
            id(DISPID_LISTVIEWDEF_VIEW),
            propget,
            HELP(mssnapr_IMMCListView_View)
        ]
        HRESULT View([out, retval] SnapInViewModeConstants *pView);

        [
            id(DISPID_LISTVIEWDEF_VIEW),
            propput,
            HELP(mssnapr_IMMCListView_View)
        ]
        HRESULT View([in] SnapInViewModeConstants View);

        //
        // Virtual
        //
        [
            id(DISPID_LISTVIEWDEF_VIRTUAL),
            propget,
            HELP(mssnapr_IMMCListView_Virtual)
        ]
        HRESULT Virtual([out, retval] VARIANT_BOOL *pfVirtual);

        [
            id(DISPID_LISTVIEWDEF_VIRTUAL),
            propput,
            HELP(mssnapr_IMMCListView_Virtual)
        ]
        HRESULT Virtual([in] VARIANT_BOOL fVirtual);


        //
        // UseFontLinking
        //
        [
            id(DISPID_LISTVIEWDEF_USE_FONT_LINKING),
            propget,
            HELP(mssnapr_IMMCListView_UseFontLinking)
        ]
        HRESULT UseFontLinking([out, retval] VARIANT_BOOL *pfUseFontLinking);

        [
            id(DISPID_LISTVIEWDEF_USE_FONT_LINKING),
            propput,
            HELP(mssnapr_IMMCListView_UseFontLinking)
        ]
        HRESULT UseFontLinking([in] VARIANT_BOOL fUseFontLinking);


        //
        // FilterChangeTimeOut
        //
        [
            id(DISPID_LISTVIEWDEF_FILTER_CHANGE_TIMEOUT),
            propget,
            HELP(mssnapr_IMMCListView_FilterChangeTimeOut)
        ]
        HRESULT FilterChangeTimeOut([out, retval] long *plTimeout);

        [
            id(DISPID_LISTVIEWDEF_FILTER_CHANGE_TIMEOUT),
            propput,
            HELP(mssnapr_IMMCListView_FilterChangeTimeOut)
        ]
        HRESULT FilterChangeTimeOut([in] long lTimeout);

        //
        // ShowChildScopeItems
        //
        [
            id(DISPID_LISTVIEWDEF_SHOW_CHILD_SCOPEITEMS),
            propget,
            HELP(mssnapr_IMMCListView_ShowChildScopeItems)
        ]
        HRESULT ShowChildScopeItems([out, retval] VARIANT_BOOL *pfShow);

        [
            id(DISPID_LISTVIEWDEF_SHOW_CHILD_SCOPEITEMS),
            propput,
            HELP(mssnapr_IMMCListView_ShowChildScopeItems)
        ]
        HRESULT ShowChildScopeItems([in] VARIANT_BOOL fShow);

        //
        // LexicalSort
        //
        [
            id(DISPID_LISTVIEWDEF_LEXICAL_SORT),
            propget,
            HELP(mssnapr_IMMCListView_LexicalSort)
        ]
        HRESULT LexicalSort([out, retval] VARIANT_BOOL *pfShow);

        [
            id(DISPID_LISTVIEWDEF_LEXICAL_SORT),
            propput,
            HELP(mssnapr_IMMCListView_LexicalSort)
        ]
        HRESULT LexicalSort([in] VARIANT_BOOL fShow);

        //
        // ListView
        //
        [
            id(DISPID_LISTVIEWDEF_LISTVIEW),
            propget,
            nonbrowsable,
            hidden
        ]
        HRESULT ListView([out, retval] IMMCListView **ppiMMCListView);

        // methods:
    };

    [
        uuid(FFF9A8EC-06CB-11d2-9791-50C320524153),
        hidden
    ]
    coclass ListViewDef
    {
        [default] interface IListViewDef;
    };

    //=---------------------------------------------------------------------=
    //                    OCXViewDef Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(FFF9A8ED-06CB-11d2-9791-50C320524153),
        dual,
        oleautomation,
        nonextensible,
        hidden
    ]
    interface IOCXViewDef : IDispatch
    {
        // properties:

        //
        // Name
        //
        [
            id(DISPID_VALUE),
            propput,
            HELP(mssnapr_IResultView_Name)
        ]
        HRESULT _stdcall Name([in] BSTR bstrName);

        [
            id(DISPID_VALUE),
            propget,
            HELP(mssnapr_IResultView_Name)
        ]
        HRESULT _stdcall Name([out, retval] BSTR *pbstrName);

        //
        // Index - One based index within IOCXViewDefs collection
        //
        [
            id(DISPID_OCXVIEWDEF_INDEX),
            propget,
            nonbrowsable,
            hidden
        ]
        HRESULT Index([out, retval] long *plIndex);

        [
            id(DISPID_OCXVIEWDEF_INDEX),
            propput,
            nonbrowsable,
            hidden
        ]
        HRESULT Index([in] long lIndex);

        //
        // Key - key into IOCXViewDefs collection
        //
        [
            id(DISPID_OCXVIEWDEF_KEY),
            propget,
            nonbrowsable,
            hidden
        ]
        HRESULT Key([out, retval] BSTR *pbstrKey);

        [
            id(DISPID_OCXVIEWDEF_KEY),
            propput,
            nonbrowsable,
            hidden
        ]
        HRESULT Key([in] BSTR bstrKey);

        //
        // Tag
        //
        [
            id(DISPID_OCXVIEWDEF_TAG),
            propget,
            HELP(mssnapr_IResultView_Tag)
        ]
        HRESULT Tag([out, retval] VARIANT *pvarTag);

        [
            id(DISPID_OCXVIEWDEF_TAG),
            propput,
            HELP(mssnapr_IResultView_Tag)
        ]
        HRESULT Tag([in] VARIANT varTag);


        //
        // AddToViewMenu
        //
        [
            id(DISPID_OCXVIEWDEF_ADD_TO_VIEW_MENU),
            propput,
            HELP(mssnapr_ViewDef_AddToViewMenu)
        ]
        HRESULT _stdcall AddToViewMenu([in] VARIANT_BOOL fAddToViewMenu);

        [
            id(DISPID_OCXVIEWDEF_ADD_TO_VIEW_MENU),
            propget,
            HELP(mssnapr_ViewDef_AddToViewMenu)
        ]
        HRESULT _stdcall AddToViewMenu([out, retval] VARIANT_BOOL *pfAddToViewMenu);


        //
        // ViewMenuText
        //
        [
            id(DISPID_OCXVIEWDEF_VIEW_MENU_TEXT),
            propput,
            HELP(mssnapr_ViewDef_ViewMenuText)
        ]
        HRESULT _stdcall ViewMenuText([in] BSTR bstrText);

        [
            id(DISPID_OCXVIEWDEF_VIEW_MENU_TEXT),
            propget,
            HELP(mssnapr_ViewDef_ViewMenuText)
        ]
        HRESULT _stdcall ViewMenuText([out, retval] BSTR *pbstrText);


        //
        // ViewMenuStatusBarText
        //
        [
            id(DISPID_OCXVIEWDEF_VIEW_MENU_STATUS_BAR_TEXT),
            propput,
            HELP(mssnapr_ViewDef_ViewMenuStatusBarText)
        ]
        HRESULT _stdcall ViewMenuStatusBarText([in] BSTR bstrText);

        [
            id(DISPID_OCXVIEWDEF_VIEW_MENU_STATUS_BAR_TEXT),
            propget,
            HELP(mssnapr_ViewDef_ViewMenuStatusBarText)
        ]
        HRESULT _stdcall ViewMenuStatusBarText([out, retval] BSTR *pbstrText);


        //
        // ProgID
        //
        [
            id(DISPID_OCXVIEWDEF_PROGID),
            propput,
            HELP(mssnapr_IOCXViewDef_ProgID)
        ]
        HRESULT _stdcall ProgID([in] BSTR bstrText);

        [
            id(DISPID_OCXVIEWDEF_PROGID),
            propget,
            HELP(mssnapr_IOCXViewDef_ProgID)
        ]
        HRESULT _stdcall ProgID([out, retval] BSTR *pbstrText);


        //
        // AlwaysCreateNewOCX
        //
        [
            id(DISPID_OCXVIEWDEF_ALWAYS_CREATE_NEW_OCX),
            propput,
            HELP(mssnapr_IOCXViewDef_AlwaysCreateNewOCX)
        ]
        HRESULT _stdcall AlwaysCreateNewOCX([in] VARIANT_BOOL fAlwaysCreateNewOCX);

        [
            id(DISPID_OCXVIEWDEF_ALWAYS_CREATE_NEW_OCX),
            propget,
            HELP(mssnapr_IOCXViewDef_AlwaysCreateNewOCX)
        ]
        HRESULT _stdcall AlwaysCreateNewOCX([out, retval] VARIANT_BOOL *pfAlwaysCreateNewOCX);

        // methods:
    };

    [
        uuid(FFF9A8EE-06CB-11d2-9791-50C320524153),
        hidden
    ]
    coclass OCXViewDef
    {
        [default] interface IOCXViewDef;
    };

    //=---------------------------------------------------------------------=
    //                    URLViewDef Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(FFF9A8EF-06CB-11d2-9791-50C320524153),
        dual,
        oleautomation,
        nonextensible,
        hidden
    ]
    interface IURLViewDef : IDispatch
    {
        // properties:

        //
        // Name
        //
        [
            id(DISPID_VALUE),
            propput,
            HELP(mssnapr_IResultView_Name)
        ]
        HRESULT _stdcall Name([in] BSTR bstrName);

        [
            id(DISPID_VALUE),
            propget,
            HELP(mssnapr_IResultView_Name)
        ]
        HRESULT _stdcall Name([out, retval] BSTR *pbstrName);

        //
        // Index - One based index within IURLViewDefs collection
        //
        [
            id(DISPID_URLVIEWDEF_INDEX),
            propget,
            nonbrowsable,
            hidden
        ]
        HRESULT Index([out, retval] long *plIndex);

        [
            id(DISPID_URLVIEWDEF_INDEX),
            propput,
            nonbrowsable,
            hidden
        ]
        HRESULT Index([in] long lIndex);

        //
        // Key - key into IURLViewDefs collection
        //
        [
            id(DISPID_URLVIEWDEF_KEY),
            propget,
            nonbrowsable,
            hidden
        ]
        HRESULT Key([out, retval] BSTR *pbstrKey);

        [
            id(DISPID_URLVIEWDEF_KEY),
            propput,
            nonbrowsable,
            hidden
        ]
        HRESULT Key([in] BSTR bstrKey);

        //
        // Tag
        //
        [
            id(DISPID_URLVIEWDEF_TAG),
            propget,
            HELP(mssnapr_IResultView_Tag)
        ]
        HRESULT Tag([out, retval] VARIANT *pvarTag);

        [
            id(DISPID_URLVIEWDEF_TAG),
            propput,
            HELP(mssnapr_IResultView_Tag)
        ]
        HRESULT Tag([in] VARIANT varTag);


        //
        // AddToViewMenu
        //
        [
            id(DISPID_URLVIEWDEF_ADD_TO_VIEW_MENU),
            propput,
            HELP(mssnapr_ViewDef_AddToViewMenu)
        ]
        HRESULT _stdcall AddToViewMenu([in] VARIANT_BOOL fAddToViewMenu);

        [
            id(DISPID_URLVIEWDEF_ADD_TO_VIEW_MENU),
            propget,
            HELP(mssnapr_ViewDef_AddToViewMenu)
        ]
        HRESULT _stdcall AddToViewMenu([out, retval] VARIANT_BOOL *pfAddToViewMenu);


        //
        // ViewMenuText
        //
        [
            id(DISPID_URLVIEWDEF_VIEW_MENU_TEXT),
            propput,
            HELP(mssnapr_ViewDef_ViewMenuText)
        ]
        HRESULT _stdcall ViewMenuText([in] BSTR bstrText);

        [
            id(DISPID_URLVIEWDEF_VIEW_MENU_TEXT),
            propget,
            HELP(mssnapr_ViewDef_ViewMenuText)
        ]
        HRESULT _stdcall ViewMenuText([out, retval] BSTR *pbstrText);


        //
        // ViewMenuStatusBarText
        //
        [
            id(DISPID_URLVIEWDEF_VIEW_MENU_STATUS_BAR_TEXT),
            propput,
            HELP(mssnapr_ViewDef_ViewMenuStatusBarText)
        ]
        HRESULT _stdcall ViewMenuStatusBarText([in] BSTR bstrText);

        [
            id(DISPID_URLVIEWDEF_VIEW_MENU_STATUS_BAR_TEXT),
            propget,
            HELP(mssnapr_ViewDef_ViewMenuStatusBarText)
        ]
        HRESULT _stdcall ViewMenuStatusBarText([out, retval] BSTR *pbstrText);

        //
        // URL
        //
        [
            id(DISPID_URLVIEWDEF_URL),
            propput,
            HELP(mssnapr_IURLViewDef_URL)
        ]
        HRESULT _stdcall URL([in] BSTR bstrText);

        [
            id(DISPID_URLVIEWDEF_URL),
            propget,
            HELP(mssnapr_IURLViewDef_URL)
        ]
        HRESULT _stdcall URL([out, retval] BSTR *pbstrText);


        // methods:
    };

    [
        uuid(FFF9A8F0-06CB-11d2-9791-50C320524153),
        hidden
    ]
    coclass URLViewDef
    {
        [default] interface IURLViewDef;
    };

    //=---------------------------------------------------------------------=
    //                    TaskpadViewDef Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(FFF9A8F1-06CB-11d2-9791-50C320524153),
        dual,
        oleautomation,
        nonextensible,
        hidden
    ]
    interface ITaskpadViewDef : IDispatch
    {
        // properties:

        //
        // Name
        //
        [
            id(DISPID_VALUE),
            propput,
            HELP(mssnapr_IResultView_Name)
        ]
        HRESULT _stdcall Name([in] BSTR bstrName);

        [
            id(DISPID_VALUE),
            propget,
            HELP(mssnapr_IResultView_Name)
        ]
        HRESULT _stdcall Name([out, retval] BSTR *pbstrName);

        //
        // Index - one based index within ITaskpadViewDefs collection
        //
        [
            id(DISPID_TASKPADVIEWDEF_INDEX),
            propget,
            nonbrowsable,
            hidden
        ]
        HRESULT Index([out, retval] long *plIndex);

        [
            id(DISPID_TASKPADVIEWDEF_INDEX),
            propput,
            nonbrowsable,
            hidden
        ]
        HRESULT Index([in] long lIndex);

        //
        // Key - key into ITaskpadViewDefs collection
        //
        [
            id(DISPID_TASKPADVIEWDEF_KEY),
            propget,
            nonbrowsable,
            hidden
        ]
        HRESULT Key([out, retval] BSTR *pbstrKey);

        [
            id(DISPID_TASKPADVIEWDEF_KEY),
            propput,
            nonbrowsable,
            hidden
        ]
        HRESULT Key([in] BSTR bstrKey);


        //
        // AddToViewMenu
        //
        [
            id(DISPID_TASKPADVIEWDEF_ADD_TO_VIEW_MENU),
            propput,
            HELP(mssnapr_ViewDef_AddToViewMenu)
        ]
        HRESULT _stdcall AddToViewMenu([in] VARIANT_BOOL fAddToViewMenu);

        [
            id(DISPID_TASKPADVIEWDEF_ADD_TO_VIEW_MENU),
            propget,
            HELP(mssnapr_ViewDef_AddToViewMenu)
        ]
        HRESULT _stdcall AddToViewMenu([out, retval] VARIANT_BOOL *pfAddToViewMenu);


        //
        // ViewMenuText
        //
        [
            id(DISPID_TASKPADVIEWDEF_VIEW_MENU_TEXT),
            propput,
            HELP(mssnapr_ViewDef_ViewMenuText)
        ]
        HRESULT _stdcall ViewMenuText([in] BSTR bstrText);

        [
            id(DISPID_TASKPADVIEWDEF_VIEW_MENU_TEXT),
            propget,
            HELP(mssnapr_ViewDef_ViewMenuText)
        ]
        HRESULT _stdcall ViewMenuText([out, retval] BSTR *pbstrText);

        //
        // ViewMenuStatusBarText
        //
        [
            id(DISPID_TASKPADVIEWDEF_VIEW_MENU_STATUS_BAR_TEXT),
            propput,
            HELP(mssnapr_ViewDef_ViewMenuStatusBarText)
        ]
        HRESULT _stdcall ViewMenuStatusBarText([in] BSTR bstrText);

        [
            id(DISPID_TASKPADVIEWDEF_VIEW_MENU_STATUS_BAR_TEXT),
            propget,
            HELP(mssnapr_ViewDef_ViewMenuStatusBarText)
        ]
        HRESULT _stdcall ViewMenuStatusBarText([out, retval] BSTR *pbstrText);

        //
        // UseWhenTaskpadViewPreferred
        //
        // If this is TRUE then this view will be used as the default when
        // the console's taskpad view preferred option is set.
        //
        [
            id(DISPID_TASKPADVIEWDEF_USE_WHEN_TASKPAD_VIEW_PREFERRED),
            propget
        ]
        HRESULT _stdcall UseWhenTaskpadViewPreferred([out, retval] VARIANT_BOOL *pfUseWhenTaskpadViewPreferred);

        [
            id(DISPID_TASKPADVIEWDEF_USE_WHEN_TASKPAD_VIEW_PREFERRED),
            propput
        ]
        HRESULT _stdcall UseWhenTaskpadViewPreferred([in] VARIANT_BOOL fUseWhenTaskpadViewPreferred);

        //
        // Taskpad
        //
        [
            id(DISPID_TASKPADVIEWDEF_TASKPAD),
            propget,
            nonbrowsable,
            hidden
        ]
        HRESULT _stdcall Taskpad([out, retval] ITaskPad **ppiTaskpad);

        // methods:
    };

    [
        uuid(FFF9A8F2-06CB-11d2-9791-50C320524153),
        hidden
    ]
    coclass TaskpadViewDef
    {
        [default] interface ITaskpadViewDef;
    };

    //=---------------------------------------------------------------------=
    //                     ExtendedSnapIns Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(BDA4B9D2-0872-11d2-9791-50C320524153),
        dual,
        oleautomation,
        nonextensible,
        hidden
    ]
    interface IExtendedSnapIns : IDispatch
    {
        // properties:

        //
        // Count
        //
        [
            id(DISPID_EXTENDEDSNAPINS_COUNT),
            propget,
            hidden
        ]
        HRESULT _stdcall Count([out, retval] long *plCount);

        //
        // Item
        //
        [
            id(DISPID_VALUE),
            propget,
            hidden
        ]
        HRESULT _stdcall Item([in] VARIANT Index,
                              [out, retval] IExtendedSnapIn **ppiExtendedSnapIn);

        //
        // NewEnum
        //
        [
            id(DISPID_NEWENUM),
            propget,
            hidden
        ]
        HRESULT _NewEnum([out, retval] IUnknown **ppunkEnum);

        // methods:

        //
        // Add
        //
        [
            id(DISPID_EXTENDEDSNAPINS_ADD),
            hidden
        ]
        HRESULT Add([in, optional] VARIANT           Index,
                    [in, optional] VARIANT           Key,
                    [out, retval]  IExtendedSnapIn **ppiExtendedSnapIn);

        //
        // Clear
        //
        [
            id(DISPID_EXTENDEDSNAPINS_CLEAR),
            hidden
        ]
        HRESULT _stdcall Clear();

        //
        // Remove
        //
        [
            id(DISPID_EXTENDEDSNAPINS_REMOVE),
            hidden
        ]
        HRESULT _stdcall Remove([in] VARIANT Index);

    };

    [
        uuid(BDA4B9D1-0872-11d2-9791-50C320524153),
        hidden
    ]
    coclass ExtendedSnapIns
    {
        [default] interface IExtendedSnapIns;
    };


    //=---------------------------------------------------------------------=
    //                     ScopeItemDefs Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(FFF9A8F3-06CB-11d2-9791-50C320524153),
        dual,
        oleautomation,
        nonextensible,
        hidden
    ]
    interface IScopeItemDefs : IDispatch
    {
        // properties:

        //
        // Count
        //
        [
            id(DISPID_SCOPEITEMDEFS_COUNT),
            propget,
            hidden
        ]
        HRESULT _stdcall Count([out, retval] long *plCount);

        //
        // Item
        //
        [
            id(DISPID_VALUE),
            propget,
            hidden
        ]
        HRESULT _stdcall Item([in] VARIANT Index,
                              [out, retval] IScopeItemDef **ppiScopeItemDef);

        //
        // NewEnum
        //
        [
            id(DISPID_NEWENUM),
            propget,
            hidden
        ]
        HRESULT _NewEnum([out, retval] IUnknown **ppunkEnum);

        // methods:

        //
        // Add
        //
        [
            id(DISPID_SCOPEITEMDEFS_ADD),
            hidden
        ]
        HRESULT Add([in, optional] VARIANT         Index,
                    [in, optional] VARIANT         Key,
                    [out, retval]  IScopeItemDef **ppiScopeItemDef);

        //
        // Clear
        //
        [
            id(DISPID_SCOPEITEMDEFS_CLEAR),
            hidden
        ]
        HRESULT _stdcall Clear();

        //
        // Remove
        //
        [
            id(DISPID_SCOPEITEMDEFS_REMOVE),
            hidden
        ]
        HRESULT _stdcall Remove([in] VARIANT Index);

    };

    [
        uuid(FFF9A8F4-06CB-11d2-9791-50C320524153),
        hidden
    ]
    coclass ScopeItemDefs
    {
        [default] interface IScopeItemDefs;
    };

    //=---------------------------------------------------------------------=
    //                     MMCImageLists Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(FFF9A8F5-06CB-11d2-9791-50C320524153),
        dual,
        oleautomation,
        nonextensible,
        hidden
    ]
    interface IMMCImageLists : IDispatch
    {
        // properties:

        //
        // Count
        //
        [
            id(DISPID_MMCIMAGELISTS_COUNT),
            propget,
            hidden
        ]
        HRESULT _stdcall Count([out, retval] long *plCount);

        //
        // Item
        //
        [
            id(DISPID_VALUE),
            propget,
            hidden
        ]
        HRESULT _stdcall Item([in] VARIANT Index,
                              [out, retval] IMMCImageList **ppiMMCImageList);

        //
        // NewEnum
        //
        [
            id(DISPID_NEWENUM),
            propget,
            hidden
        ]
        HRESULT _NewEnum([out, retval] IUnknown **ppunkEnum);

        // methods:

        //
        // Add
        //
        [
            id(DISPID_MMCIMAGELISTS_ADD),
            hidden
        ]
        HRESULT Add([in, optional] VARIANT         Index,
                    [in, optional] VARIANT         Key,
                    [out, retval]  IMMCImageList **ppiMMCImageList);

        //
        // Clear
        //
        [
            id(DISPID_MMCIMAGELISTS_CLEAR),
            hidden
        ]
        HRESULT _stdcall Clear();

        //
        // Remove
        //
        [
            id(DISPID_MMCIMAGELISTS_REMOVE),
            hidden
        ]
        HRESULT _stdcall Remove([in] VARIANT Index);

    };

    [
        uuid(FFF9A8F6-06CB-11d2-9791-50C320524153),
        hidden
    ]
    coclass MMCImageLists
    {
        [default] interface IMMCImageLists;
    };

    //=---------------------------------------------------------------------=
    //                     MMCMenuDef Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(E39FA142-57D2-11d2-97BE-00104B880587),
        dual,
        oleautomation,
        nonextensible,
        hidden
    ]
    interface IMMCMenuDef : IDispatch
    {
        // properties:

        //
        // Index
        //
        [
            id(DISPID_MMCMENUDEF_INDEX),
            propget,
            nonbrowsable,
            hidden
        ]
        HRESULT Index([out, retval] long *plIndex);

        [
            id(DISPID_MMCMENUDEF_INDEX),
            propput,
            nonbrowsable,
            hidden
        ]
        HRESULT Index([in] long lIndex);

        //
        // Key
        //
        [
            id(DISPID_MMCMENUDEF_KEY),
            propget,
            nonbrowsable,
            hidden
        ]
        HRESULT Key([out, retval] BSTR *pbstrKey);

        [
            id(DISPID_MMCMENUDEF_KEY),
            propput,
            nonbrowsable,
            hidden
        ]
        HRESULT Key([in] BSTR bstrKey);

        //
        // Menu
        //
        [
            id(DISPID_MMCMENUDEF_MENU),
            propget,
            hidden
        ]
        HRESULT _stdcall Menu([out, retval] IMMCMenu **ppiMMCMenu);

        //
        // Children
        //
        [
            id(DISPID_MMCMENUDEF_CHILDREN),
            propget,
            hidden
        ]
        HRESULT _stdcall Children([out, retval] IMMCMenuDefs **ppiMMCMenuDefs);
    };

    [
        uuid(E39FA143-57D2-11d2-97BE-00104B880587),
        hidden
    ]
    coclass MMCMenuDef
    {
        [default] interface IMMCMenuDef;
    };

    //=---------------------------------------------------------------------=
    //                     MMCMenuDefs Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(FFF9A8F7-06CB-11d2-9791-50C320524153),
        dual,
        oleautomation,
        nonextensible,
        hidden
    ]
    interface IMMCMenuDefs : IDispatch
    {
        // properties:

        //
        // Count
        //
        [
            id(DISPID_MMCMENUDEFS_COUNT),
            propget,
            hidden
        ]
        HRESULT _stdcall Count([out, retval] long *plCount);

        //
        // Item
        //
        [
            id(DISPID_VALUE),
            propget,
            hidden
        ]
        HRESULT _stdcall Item([in] VARIANT Index,
                              [out, retval] IMMCMenuDef **ppiMMCMenuDef);

        //
        // NewEnum
        //
        [
            id(DISPID_NEWENUM),
            propget,
            hidden
        ]
        HRESULT _NewEnum([out, retval] IUnknown **ppunkEnum);

        // methods:

        //
        // Add
        //
        [
            id(DISPID_MMCMENUDEFS_ADD),
            hidden
        ]
        HRESULT Add([in, optional] VARIANT       Index,
                    [in, optional] VARIANT       Key,
                    [out, retval]  IMMCMenuDef **ppiMMCMenuDef);

        //
        // AddExisting
        //
        [
            id(DISPID_MMCMENUDEFS_ADD_EXISTING),
            hidden
        ]
        HRESULT AddExisting(IMMCMenuDef *piMMCMenuDef, VARIANT Index);

        //
        // Clear
        //
        [
            id(DISPID_MMCMENUDEFS_CLEAR),
            hidden
        ]
        HRESULT _stdcall Clear();

        //
        // Remove
        //
        [
            id(DISPID_MMCMENUDEFS_REMOVE),
            hidden
        ]
        HRESULT _stdcall Remove([in] VARIANT Index);

        //
        // Swap
        //
        [
            id(DISPID_MMCMENUDEFS_SWAP),
            hidden
        ]
        HRESULT _stdcall Swap([in] long lIndex1, [in] long lIndex2);

    };

    [
        uuid(FFF9A8F8-06CB-11d2-9791-50C320524153),
        hidden
    ]
    coclass MMCMenuDefs
    {
        [default] interface IMMCMenuDefs;
    };


    //=---------------------------------------------------------------------=
    //                     MMCToolbars Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(FFF9A8F9-06CB-11d2-9791-50C320524153),
        dual,
        oleautomation,
        nonextensible,
        hidden
    ]
    interface IMMCToolbars : IDispatch
    {
        // properties:

        //
        // Count
        //
        [
            id(DISPID_MMCTOOLBARS_COUNT),
            propget,
            hidden
        ]
        HRESULT _stdcall Count([out, retval] long *plCount);

        //
        // Item
        //
        [
            id(DISPID_VALUE),
            propget,
            hidden
        ]
        HRESULT _stdcall Item([in] VARIANT Index,
                              [out, retval] IMMCToolbar **ppiMMCToolbar);

        //
        // NewEnum
        //
        [
            id(DISPID_NEWENUM),
            propget,
            hidden
        ]
        HRESULT _NewEnum([out, retval] IUnknown **ppunkEnum);

        // methods:

        //
        // Add
        //
        [
            id(DISPID_MMCTOOLBARS_ADD),
            hidden
        ]
        HRESULT Add([in, optional] VARIANT       Index,
                    [in, optional] VARIANT       Key,
                    [out, retval]  IMMCToolbar **ppiMMCToolbar);

        //
        // Clear
        //
        [
            id(DISPID_MMCTOOLBARS_CLEAR),
            hidden
        ]
        HRESULT _stdcall Clear();

        //
        // Remove
        //
        [
            id(DISPID_MMCTOOLBARS_REMOVE),
            hidden
        ]
        HRESULT _stdcall Remove([in] VARIANT Index);

    };

    [
        uuid(FFF9A8FA-06CB-11d2-9791-50C320524153),
        hidden
    ]
    coclass MMCToolbars
    {
        [default] interface IMMCToolbars;
    };


    //=---------------------------------------------------------------------=
    //                     ListViewDefs Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(FFF9A8FB-06CB-11d2-9791-50C320524153),
        dual,
        oleautomation,
        nonextensible,
        hidden
    ]
    interface IListViewDefs : IDispatch
    {
        // properties:

        //
        // Count
        //
        [
            id(DISPID_LISTVIEWDEFS_COUNT),
            propget,
            hidden
        ]
        HRESULT _stdcall Count([out, retval] long *plCount);

        //
        // Item
        //
        [
            id(DISPID_VALUE),
            propget,
            hidden
        ]
        HRESULT _stdcall Item([in] VARIANT Index,
                              [out, retval] IListViewDef **ppiListViewDef);

        //
        // NewEnum
        //
        [
            id(DISPID_NEWENUM),
            propget,
            hidden
        ]
        HRESULT _NewEnum([out, retval] IUnknown **ppunkEnum);

        // methods:

        //
        // Add
        //
        [
            id(DISPID_LISTVIEWDEFS_ADD),
            hidden
        ]
        HRESULT Add([in, optional] VARIANT        Index,
                    [in, optional] VARIANT        Key,
                    [out, retval]  IListViewDef **ppiListViewDef);

        //
        // AddFromMaster
        //
        [
            id(DISPID_LISTVIEWDEFS_ADD_FROM_MASTER),
            hidden
        ]
        HRESULT AddFromMaster(IListViewDef *piListViewDef);

        //
        // Clear
        //
        [
            id(DISPID_LISTVIEWDEFS_CLEAR),
            hidden
        ]
        HRESULT _stdcall Clear();

        //
        // Remove
        //
        [
            id(DISPID_LISTVIEWDEFS_REMOVE),
            hidden
        ]
        HRESULT _stdcall Remove([in] VARIANT Index);

    };

    [
        uuid(FFF9A8FC-06CB-11d2-9791-50C320524153),
        hidden
    ]
    coclass ListViewDefs
    {
        [default] interface IListViewDefs;
    };


    //=---------------------------------------------------------------------=
    //                     OCXViewDefs Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(FFF9A8FE-06CB-11d2-9791-50C320524153),
        dual,
        oleautomation,
        nonextensible,
        hidden
    ]
    interface IOCXViewDefs : IDispatch
    {
        // properties:

        //
        // Count
        //
        [
            id(DISPID_OCXVIEWDEFS_COUNT),
            propget,
            hidden
        ]
        HRESULT _stdcall Count([out, retval] long *plCount);

        //
        // Item
        //
        [
            id(DISPID_VALUE),
            propget,
            hidden
        ]
        HRESULT _stdcall Item([in] VARIANT Index,
                              [out, retval] IOCXViewDef **ppiOCXViewDef);

        //
        // NewEnum
        //
        [
            id(DISPID_NEWENUM),
            propget,
            hidden
        ]
        HRESULT _NewEnum([out, retval] IUnknown **ppunkEnum);

        // methods:

        //
        // Add
        //
        [
            id(DISPID_OCXVIEWDEFS_ADD),
            hidden
        ]
        HRESULT Add([in, optional] VARIANT       Index,
                    [in, optional] VARIANT       Key,
                    [out, retval]  IOCXViewDef **ppiOCXViewDef);

        //
        // AddFromMaster
        //
        [
            id(DISPID_OCXVIEWDEFS_ADD_FROM_MASTER),
            hidden
        ]
        HRESULT AddFromMaster(IOCXViewDef *piOCXViewDef);

        //
        // Clear
        //
        [
            id(DISPID_OCXVIEWDEFS_CLEAR),
            hidden
        ]
        HRESULT _stdcall Clear();

        //
        // Remove
        //
        [
            id(DISPID_OCXVIEWDEFS_REMOVE),
            hidden
        ]
        HRESULT _stdcall Remove([in] VARIANT Index);

    };

    [
        uuid(FFF9A8FF-06CB-11d2-9791-50C320524153),
        hidden
    ]
    coclass OCXViewDefs
    {
        [default] interface IOCXViewDefs;
    };

    //=---------------------------------------------------------------------=
    //                     URLViewDefs Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(FFF9A900-06CB-11d2-9791-50C320524153),
        dual,
        oleautomation,
        nonextensible,
        hidden
    ]
    interface IURLViewDefs : IDispatch
    {
        // properties:

        //
        // Count
        //
        [
            id(DISPID_URLVIEWDEFS_COUNT),
            propget,
            hidden
        ]
        HRESULT _stdcall Count([out, retval] long *plCount);

        //
        // Item
        //
        [
            id(DISPID_VALUE),
            propget,
            hidden
        ]
        HRESULT _stdcall Item([in] VARIANT Index,
                              [out, retval] IURLViewDef **ppiURLViewDef);

        //
        // NewEnum
        //
        [
            id(DISPID_NEWENUM),
            propget,
            hidden
        ]
        HRESULT _NewEnum([out, retval] IUnknown **ppunkEnum);

        // methods:

        //
        // Add
        //
        [
            id(DISPID_URLVIEWDEFS_ADD),
            hidden
        ]
        HRESULT Add([in, optional] VARIANT       Index,
                    [in, optional] VARIANT       Key,
                    [out, retval]  IURLViewDef **ppiURLViewDef);

        //
        // AddFromMaster
        //
        [
            id(DISPID_URLVIEWDEFS_ADD_FROM_MASTER),
            hidden
        ]
        HRESULT AddFromMaster(IURLViewDef *piURLViewDef);


        //
        // Clear
        //
        [
            id(DISPID_URLVIEWDEFS_CLEAR),
            hidden
        ]
        HRESULT _stdcall Clear();

        //
        // Remove
        //
        [
            id(DISPID_URLVIEWDEFS_REMOVE),
            hidden
        ]
        HRESULT _stdcall Remove([in] VARIANT Index);

    };

    [
        uuid(FFF9A902-06CB-11d2-9791-50C320524153),
        hidden
    ]
    coclass URLViewDefs
    {
        [default] interface IURLViewDefs;
    };

    //=---------------------------------------------------------------------=
    //                     TaskpadViewDefs Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(FFF9A903-06CB-11d2-9791-50C320524153),
        dual,
        oleautomation,
        nonextensible,
        hidden
    ]
    interface ITaskpadViewDefs : IDispatch
    {
        // properties:

        //
        // Count
        //
        [
            id(DISPID_TASKPADVIEWDEFS_COUNT),
            propget,
            hidden
        ]
        HRESULT _stdcall Count([out, retval] long *plCount);

        //
        // Item
        //
        [
            id(DISPID_VALUE),
            propget,
            hidden
        ]
        HRESULT _stdcall Item([in] VARIANT Index,
                              [out, retval] ITaskpadViewDef **ppiTaskpadViewDef);

        //
        // NewEnum
        //
        [
            id(DISPID_NEWENUM),
            propget,
            hidden
        ]
        HRESULT _NewEnum([out, retval] IUnknown **ppunkEnum);

        // methods:

        //
        // Add
        //
        [
            id(DISPID_TASKPADVIEWDEFS_ADD),
            hidden
        ]
        HRESULT Add([in, optional] VARIANT           Index,
                    [in, optional] VARIANT           Key,
                    [out, retval]  ITaskpadViewDef **ppiTaskpadViewDef);

        //
        // AddFromMaster
        //
        [
            id(DISPID_TASKPADVIEWDEFS_ADD_FROM_MASTER),
            hidden
        ]
        HRESULT AddFromMaster(ITaskpadViewDef *piTaskpadViewDef);


        //
        // Clear
        //
        [
            id(DISPID_TASKPADVIEWDEFS_CLEAR),
            hidden
        ]
        HRESULT _stdcall Clear();

        //
        // Remove
        //
        [
            id(DISPID_TASKPADVIEWDEFS_REMOVE),
            hidden
        ]
        HRESULT _stdcall Remove([in] VARIANT Index);

    };

    [
        uuid(FFF9A904-06CB-11d2-9791-50C320524153),
        hidden
    ]
    coclass TaskpadViewDefs
    {
        [default] interface ITaskpadViewDefs;
    };


    //=---------------------------------------------------------------------=
    //                     DataFormat Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(91FE14C2-7370-11d2-97D8-00104B880587),
        dual,
        oleautomation,
        nonextensible,
        hidden
    ]
    interface IDataFormat : IDispatch
    {
        // properties:

        //
        // Name
        //
        [
            id(DISPID_DATAFORMAT_NAME),
            propget,
            HELP(mssnapr_IDataFormat_Name)
        ]
        HRESULT Name([out, retval] BSTR *pbstrName);

        [
            id(DISPID_DATAFORMAT_NAME),
            propput,
            HELP(mssnapr_IDataFormat_Name)
        ]
        HRESULT Name([in] BSTR bstrName);

        //
        // Index
        //
        [
            id(DISPID_DATAFORMAT_INDEX),
            propget,
            nonbrowsable,
            hidden
        ]
        HRESULT Index([out, retval] long *plIndex);

        [
            id(DISPID_DATAFORMAT_INDEX),
            propput,
            nonbrowsable,
            hidden
        ]
        HRESULT Index([in] long lIndex);

        //
        // Key
        //
        [
            id(DISPID_DATAFORMAT_KEY),
            propget,
            nonbrowsable,
            hidden
        ]
        HRESULT Key([out, retval] BSTR *pbstrKey);

        [
            id(DISPID_DATAFORMAT_KEY),
            propput,
            nonbrowsable,
            hidden
        ]
        HRESULT Key([in] BSTR bstrKey);

        //
        // FileName
        //
        [
            id(DISPID_DATAFORMAT_FILENAME),
            propget,
            HELP(mssnapr_IDataFormat_FileName)
        ]
        HRESULT FileName([out, retval] BSTR *pbstrFileName);

        [
            id(DISPID_DATAFORMAT_FILENAME),
            propput,
            HELP(mssnapr_IDataFormat_FileName)
        ]
        HRESULT FileName([in] BSTR bstrFileName);

    };

    [
        uuid(91FE14C3-7370-11d2-97D8-00104B880587),
        hidden
    ]
    coclass DataFormat
    {
        [default] interface IDataFormat;
    };

    //=---------------------------------------------------------------------=
    //                     DataFormats Object
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(91FE14C4-7370-11d2-97D8-00104B880587),
        dual,
        oleautomation,
        nonextensible,
        hidden
    ]
    interface IDataFormats : IDispatch
    {
        // properties:

        //
        // Count
        //
        [
            id(DISPID_DATAFORMATS_COUNT),
            propget,
            hidden
        ]
        HRESULT _stdcall Count([out, retval] long *plCount);

        //
        // Item
        //
        [
            id(DISPID_VALUE),
            propget,
            hidden
        ]
        HRESULT _stdcall Item([in] VARIANT Index,
                              [out, retval] IDataFormat **ppiDataFormat);

        //
        // NewEnum
        //
        [
            id(DISPID_NEWENUM),
            propget,
            hidden
        ]
        HRESULT _NewEnum([out, retval] IUnknown **ppunkEnum);

        // methods:

        //
        // Add
        //
        [
            id(DISPID_DATAFORMATS_ADD),
            hidden
        ]
        HRESULT Add([in, optional] VARIANT       Index,
                    [in, optional] VARIANT       Key,
                    [in, optional] VARIANT       FileName,
                    [out, retval]  IDataFormat **ppiDataFormat);

        //
        // Clear
        //
        [
            id(DISPID_DATAFORMATS_CLEAR),
            hidden
        ]
        HRESULT _stdcall Clear();

        //
        // Remove
        //
        [
            id(DISPID_DATAFORMATS_REMOVE),
            hidden
        ]
        HRESULT _stdcall Remove([in] VARIANT Index);

    };

    [
        uuid(91FE14C5-7370-11d2-97D8-00104B880587),
        hidden
    ]
    coclass DataFormats
    {
        [default] interface IDataFormats;
    };





    //=---------------------------------------------------------------------=
    //                     IObjectModelHost Interface
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(BDA4B9D3-0872-11d2-9791-50C320524153),
        nonextensible,
        hidden
    ]
    interface IObjectModelHost : IUnknown
    {
        //
        // Update - called when a property has been changed
        //
        [
            hidden
        ]
        HRESULT _stdcall Update(long ObjectCookie, IUnknown *punkObject, DISPID dispid);

        //
        // Add - called when an item has been added to a collection
        //
        [
            hidden
        ]
        HRESULT _stdcall Add(long CollectionCookie, IUnknown *punkNewObject);

        //
        // Delete - called when an item has been removed from a collection
        //
        [
            hidden
        ]
        HRESULT _stdcall Delete(long ObjectCookie, IUnknown *punkObject);

        //
        // GetSnapInDesignerDef - returns the ISnapInDesignerDef that is at
        // at the top of the object model. Allows lower level objects to
        // access image lists, view definitions etc.
        //
        [
            hidden
        ]
        HRESULT _stdcall GetSnapInDesignerDef(ISnapInDesignerDef **ppiSnapInDesignerDef);

        //
        // Runtime - determines whether the host is the runtime or the designer
        //
        [
            hidden
        ]
        HRESULT _stdcall GetRuntime([out, retval] BOOL *pfRuntime);
    };

    //=---------------------------------------------------------------------=
    //                     IObjectModel Interface
    //=---------------------------------------------------------------------=

    [
        odl,
        uuid(BDA4B9D4-0872-11d2-9791-50C320524153),
        nonextensible,
        hidden
    ]
    interface IObjectModel : IUnknown
    {
        //
        // SetHost
        //
        [
            hidden
        ]
        HRESULT _stdcall SetHost(IObjectModelHost *pIObjectModelHost);

        //
        // SetCookie
        //
        [
            hidden
        ]
        HRESULT _stdcall SetCookie(long Cookie);

        //
        // GetCookie
        //
        [
            hidden
        ]
        HRESULT _stdcall GetCookie(long *pCookie);

        //
        // IncrementUsageCount
        //
        [
            hidden
        ]
        HRESULT _stdcall IncrementUsageCount();


        //
        // DecrementUsageCount
        //
        [
            hidden
        ]
        HRESULT _stdcall DecrementUsageCount();


        //
        // GetUsageCount
        //
        [
            hidden
        ]
        HRESULT _stdcall GetUsageCount(long *plCount);

        //
        // SetDISPID
        //
        [
            hidden
        ]
        HRESULT _stdcall SetDISPID(DISPID dispid);

        //
        // GetDISPID
        //
        [
            hidden
        ]
        HRESULT _stdcall GetDISPID(DISPID *pdispid);

        //
        // SerializeKeysOnly
        //
        [
            hidden
        ]
        HRESULT _stdcall SerializeKeysOnly(BOOL fKeysOnly);

        //
        // GetThisPointer
        //
        [
            hidden
        ]
        void *_stdcall GetThisPointer();

        //
        // SnapInDesignerDef
        //
        [
            hidden
        ]
        HRESULT _stdcall GetSnapInDesignerDef([out, retval] ISnapInDesignerDef **ppiSnapInDesignerDef);
    };

}; // end of library
