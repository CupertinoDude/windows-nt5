//+-------------------------------------------------------------------------
//
//  Microsoft Windows
//
//  Copyright (C) Microsoft Corporation, 1999 - 1999
//
//  File:       cic.idl
//
//--------------------------------------------------------------------------

#include <olectl.h>
// cic.idl : IDL source for cic.dll
//

// This file will be processed by the MIDL tool to
// produce the type library (cic.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";

    [
        object,
        uuid(3D5905ED-523C-11D1-9FEA-00600832DB4A),
        dual,
        helpstring("IMMCCtrl Interface"),
        pointer_default(unique)
    ]
    interface IMMCCtrl : IDispatch
    {
        [id(1), helpstring("method TaskNotify")]
        HRESULT TaskNotify   ([in] BSTR szClsid, [in] VARIANT* pvArg, [in] VARIANT* pvParam);

        [id(2), helpstring("method GetFirstTask")]
        HRESULT GetFirstTask ([in] BSTR szGroupText, [out,retval] IDispatch** retval);

        [id(3), helpstring("method GetNextTask")]
        HRESULT GetNextTask  ([out,retval] IDispatch** retval);

        [id(4), helpstring("method GetTitle")]
        HRESULT GetTitle     ([in] BSTR szGroupText, [out,retval] BSTR* retval);

        [id(5), helpstring("method GetDescriptiveText")]
        HRESULT GetDescriptiveText ([in] BSTR szGroupText, [out,retval] BSTR* retval);

        [id(6), helpstring("method GetBackground")]
        HRESULT GetBackground([in] BSTR szGroupText, [out,retval] IDispatch** pDispatch);

        [id(7), helpstring("method GetListPadInfo")]
        HRESULT GetListPadInfo([in] BSTR szGroupText, [out,retval] IDispatch** pDispatch);

//      [id(8), helpstring("method GetBranding")]
//      HRESULT GetBranding([in] BSTR szGroupText, [out,retval] IDispatch** pDispatch);
    };

    [
        object,
        uuid(69C7C394-905C-11d2-91AD-00C04FA37E1F),
        helpstring("IMMCCtrlEvent Interface"),
        dual,
        pointer_default(unique)
    ]
    interface IMMCCtrlEvent : IDispatch
    {
        [id(1), helpstring("Enable/disable task")]
        HRESULT TaskEnable([in] long lTaskIndex, [in] BOOL bEnable);
    };

    [
        object,
        uuid(3D112E21-62B2-11D1-9FEF-00600832DB4A),
        dual,
        helpstring("IMMCTask Interface"),
        pointer_default(unique)
    ]
    interface IMMCTask : IDispatch
    {
        [propget, id(1), helpstring("property DisplayObject")]
        HRESULT DisplayObject([out, retval] IDispatch** pDispatch);

        [propget, id(2), helpstring("property Text")]
        HRESULT Text([out, retval] BSTR* pVal);

        [propget, id(3), helpstring("property Help")]
        HRESULT Help([out, retval] BSTR* pVal);

        [propget, id(4), helpstring("property ActionType")]
        HRESULT ActionType([out, retval] long* pVal);

        [propget, id(5), helpstring("property CommandID")]
        HRESULT CommandID([out, retval] LONG_PTR* pVal);

        [propget, id(6), helpstring("property ActionURL")]
        HRESULT ActionURL([out, retval] BSTR* pVal);

        [propget, id(7), helpstring("property Script")]
        HRESULT Script([out, retval] BSTR* pVal);

        [propget, id(8), helpstring("property Clsid")]
        HRESULT Clsid([out, retval] BSTR* pVal);

        [propget, id(9), helpstring("property ScriptLanguage")]
        HRESULT ScriptLanguage([out, retval] BSTR* pVal);
    };

    [
        object,
        uuid(995A890B-F4C9-11D1-A1BF-0000F875B132),
        dual,
        helpstring("IMMCDisplayObject Interface"),
        pointer_default(unique)
    ]
    interface IMMCDisplayObject : IDispatch
    {
        [propget, id(1), helpstring("property:  DisplayObject type")]
        HRESULT DisplayObjectType([out, retval] long* pVal);

        [propget, id(2), helpstring("property: name of font family")]
        HRESULT FontFamilyName([out, retval] BSTR* pVal);

        [propget, id(3), helpstring("property: URL to EOT file")]
        HRESULT URLtoEOT([out, retval] BSTR* pVal);

        [propget, id(4), helpstring("property: symbol string")]
        HRESULT SymbolString([out, retval] BSTR* pVal);

        [propget, id(5), helpstring("property: mouseover Bitmap")]
        HRESULT MouseOverBitmap([out, retval] BSTR* pVal);

        [propget, id(6), helpstring("property: mouseoff Bitmap")]
        HRESULT MouseOffBitmap([out, retval] BSTR* pVal);
    };

    [
        object,
        uuid(09474571-b2fb-11d1-a1a1-0000f875b132),
        dual,
        helpstring("IMMCListPadInfo Interface"),
        pointer_default(unique)
    ]
    interface IMMCListPadInfo : IDispatch
    {
        [propget, id(1), helpstring("property Title")]
        HRESULT Title([out, retval] BSTR* pVal);

        [propget, id(2), helpstring("property Text")]
        HRESULT Text([out, retval] BSTR* pVal);

        [propget, id(3), helpstring("property NotifyID")]
        HRESULT NotifyID([out, retval] LONG_PTR* pVal);

        [propget, id(4), helpstring("property Clsid")]
        HRESULT Clsid([out, retval] BSTR* pVal);

        [propget, id(5), helpstring("property HasButton")]
        HRESULT HasButton([out, retval] BOOL* pVal);
    };

    [
        object,
        uuid(5D00F5B1-A357-11D1-A19C-0000F875B132),
        dual,
        helpstring("IListPad Interface"),
        pointer_default(unique)
    ]
    interface IListPad : IDispatch
    {   // don't need any methods!!!
    };

    [
        object,
        uuid(C47195EB-CD7A-11D1-8EA3-00C04F9900D7),
        dual,
        helpstring("ISysColorCtrl Interface"),
        pointer_default(unique)
    ]
    interface ISysColorCtrl : IDispatch
    {
        [propget, id(1), helpstring("property HEXactiveborder")] HRESULT HEXactiveborder([out, retval] BSTR *pVal);
        [propget, id(2), helpstring("property RGBactiveborder")] HRESULT RGBactiveborder([out, retval] long *pVal);
        [propget, id(3), helpstring("property HEXactivecaption")] HRESULT HEXactivecaption([out, retval] BSTR *pVal);
        [propget, id(4), helpstring("property RGBactivecaption")] HRESULT RGBactivecaption([out, retval] long *pVal);
        [propget, id(5), helpstring("property HEXappworkspace")] HRESULT HEXappworkspace([out, retval] BSTR *pVal);
        [propget, id(6), helpstring("property RGBappworkspace")] HRESULT RGBappworkspace([out, retval] long *pVal);
        [propget, id(7), helpstring("property HEXbackground")] HRESULT HEXbackground([out, retval] BSTR *pVal);
        [propget, id(8), helpstring("property RGBbackground")] HRESULT RGBbackground([out, retval] long *pVal);
        [propget, id(9), helpstring("property HEXbuttonface")] HRESULT HEXbuttonface([out, retval] BSTR *pVal);
        [propget, id(10), helpstring("property RGBbuttonface")] HRESULT RGBbuttonface([out, retval] long *pVal);
        [propget, id(11), helpstring("property HEXbuttonhighlight")] HRESULT HEXbuttonhighlight([out, retval] BSTR *pVal);
        [propget, id(12), helpstring("property RGBbuttonhighlight")] HRESULT RGBbuttonhighlight([out, retval] long *pVal);
        [propget, id(13), helpstring("property HEXbuttonshadow")] HRESULT HEXbuttonshadow([out, retval] BSTR *pVal);
        [propget, id(14), helpstring("property RGBbuttonshadow")] HRESULT RGBbuttonshadow([out, retval] long *pVal);
        [propget, id(15), helpstring("property HEXbuttontext")] HRESULT HEXbuttontext([out, retval] BSTR *pVal);
        [propget, id(16), helpstring("property RGBbuttontext")] HRESULT RGBbuttontext([out, retval] long *pVal);
        [propget, id(17), helpstring("property HEXcaptiontext")] HRESULT HEXcaptiontext([out, retval] BSTR *pVal);
        [propget, id(18), helpstring("property RGBcaptiontext")] HRESULT RGBcaptiontext([out, retval] long *pVal);
        [propget, id(19), helpstring("property HEXgraytext")] HRESULT HEXgraytext([out, retval] BSTR *pVal);
        [propget, id(20), helpstring("property RGBgraytext")] HRESULT RGBgraytext([out, retval] long *pVal);
        [propget, id(21), helpstring("property HEXhighlight")] HRESULT HEXhighlight([out, retval] BSTR *pVal);
        [propget, id(22), helpstring("property RGBhighlight")] HRESULT RGBhighlight([out, retval] long *pVal);
        [propget, id(23), helpstring("property HEXhighlighttext")] HRESULT HEXhighlighttext([out, retval] BSTR *pVal);
        [propget, id(24), helpstring("property RGBhighlighttext")] HRESULT RGBhighlighttext([out, retval] long *pVal);
        [propget, id(25), helpstring("property HEXinactiveborder")] HRESULT HEXinactiveborder([out, retval] BSTR *pVal);
        [propget, id(26), helpstring("property RGBinactiveborder")] HRESULT RGBinactiveborder([out, retval] long *pVal);
        [propget, id(27), helpstring("property HEXinactivecaption")] HRESULT HEXinactivecaption([out, retval] BSTR *pVal);
        [propget, id(28), helpstring("property RGBinactivecaption")] HRESULT RGBinactivecaption([out, retval] long *pVal);
        [propget, id(29), helpstring("property HEXinactivecaptiontext")] HRESULT HEXinactivecaptiontext([out, retval] BSTR *pVal);
        [propget, id(30), helpstring("property RGBinactivecaptiontext")] HRESULT RGBinactivecaptiontext([out, retval] long *pVal);
        [propget, id(31), helpstring("property HEXinfobackground")] HRESULT HEXinfobackground([out, retval] BSTR *pVal);
        [propget, id(32), helpstring("property RGBinfobackground")] HRESULT RGBinfobackground([out, retval] long *pVal);
        [propget, id(33), helpstring("property HEXinfotext")] HRESULT HEXinfotext([out, retval] BSTR *pVal);
        [propget, id(34), helpstring("property RGBinfotext")] HRESULT RGBinfotext([out, retval] long *pVal);
        [propget, id(35), helpstring("property HEXmenu")] HRESULT HEXmenu([out, retval] BSTR *pVal);
        [propget, id(36), helpstring("property RGBmenu")] HRESULT RGBmenu([out, retval] long *pVal);
        [propget, id(37), helpstring("property HEXmenutext")] HRESULT HEXmenutext([out, retval] BSTR *pVal);
        [propget, id(38), helpstring("property RGBmenutext")] HRESULT RGBmenutext([out, retval] long *pVal);
        [propget, id(39), helpstring("property HEXscrollbar")] HRESULT HEXscrollbar([out, retval] BSTR *pVal);
        [propget, id(40), helpstring("property RGBscrollbar")] HRESULT RGBscrollbar([out, retval] long *pVal);
        [propget, id(41), helpstring("property HEXthreeddarkshadow")] HRESULT HEXthreeddarkshadow([out, retval] BSTR *pVal);
        [propget, id(42), helpstring("property RGBthreeddarkshadow")] HRESULT RGBthreeddarkshadow([out, retval] long *pVal);
        [propget, id(43), helpstring("property HEXthreedface")] HRESULT HEXthreedface([out, retval] BSTR *pVal);
        [propget, id(44), helpstring("property RGBthreedface")] HRESULT RGBthreedface([out, retval] long *pVal);
        [propget, id(45), helpstring("property HEXthreedhighlight")] HRESULT HEXthreedhighlight([out, retval] BSTR *pVal);
        [propget, id(46), helpstring("property RGBthreedhighlight")] HRESULT RGBthreedhighlight([out, retval] long *pVal);
        [propget, id(47), helpstring("property HEXthreedlightshadow")] HRESULT HEXthreedlightshadow([out, retval] BSTR *pVal);
        [propget, id(48), helpstring("property RGBthreedlightshadow")] HRESULT RGBthreedlightshadow([out, retval] long *pVal);
        [propget, id(49), helpstring("property HEXthreedshadow")] HRESULT HEXthreedshadow([out, retval] BSTR *pVal);
        [propget, id(50), helpstring("property RGBthreedshadow")] HRESULT RGBthreedshadow([out, retval] long *pVal);
        [propget, id(51), helpstring("property HEXwindow")] HRESULT HEXwindow([out, retval] BSTR *pVal);
        [propget, id(52), helpstring("property RGBwindow")] HRESULT RGBwindow([out, retval] long *pVal);
        [propget, id(53), helpstring("property HEXwindowframe")] HRESULT HEXwindowframe([out, retval] BSTR *pVal);
        [propget, id(54), helpstring("property RGBwindowframe")] HRESULT RGBwindowframe([out, retval] long *pVal);
        [propget, id(55), helpstring("property HEXwindowtext")] HRESULT HEXwindowtext([out, retval] BSTR *pVal);
        [propget, id(56), helpstring("property RGBwindowtext")] HRESULT RGBwindowtext([out, retval] long *pVal);
        [id(57), helpstring("method ConvertRGBToHex")] HRESULT ConvertRGBToHex([in] long rgb, [out, retval] BSTR * pszHex);
        [id(58), helpstring("method ConvertHexToRGB")] HRESULT ConvertHexToRGB([in] BSTR szHex, [out, retval] long * pRGB);
        [id(59), helpstring("method GetRedFromRGB")] HRESULT GetRedFromRGB([in] long rgb, [out, retval] short * pVal);
        [id(60), helpstring("method GetGreenFromRGB")] HRESULT GetGreenFromRGB([in] long rgb, [out, retval] short * pVal);
        [id(61), helpstring("method GetBlueFromRGB")] HRESULT GetBlueFromRGB([in] long rgb, [out, retval] short * pVal);
        [id(62), helpstring("method GetDerivedRGB")] HRESULT GetDerivedRGB([in] BSTR pszFrom, [in] BSTR pszTo, [in] BSTR pszFormat, [in] short nPercent, [out, retval] long * pVal);
        [id(63), helpstring("method GetDerivedHex")] HRESULT GetDerivedHex([in] BSTR pszFrom, [in] BSTR pszTo, [in] BSTR pszFormat, [in] short nPercent, [out, retval] BSTR * pVal);
        [id(64), helpstring("method Get3QuarterLightRGB")] HRESULT Get3QuarterLightRGB([in] BSTR pszFrom, [in] BSTR pszFormat, [out, retval] long * pVal);
        [id(65), helpstring("method Get3QuarterLightHex")] HRESULT Get3QuarterLightHex([in] BSTR pszFrom, [in] BSTR pszFormat, [out, retval] BSTR * pVal);
        [id(66), helpstring("method GetHalfLightRGB")] HRESULT GetHalfLightRGB([in] BSTR pszFrom, [in] BSTR pszFormat, [out, retval] long * pVal);
        [id(67), helpstring("method GetHalfLightHex")] HRESULT GetHalfLightHex([in] BSTR pszFrom, [in] BSTR pszFormat, [out, retval] BSTR * pVal);
        [id(68), helpstring("method GetQuarterLightRGB")] HRESULT GetQuarterLightRGB([in] BSTR pszFrom, [in] BSTR pszFormat, [out, retval] long * pVal);
        [id(69), helpstring("method GetQuarterLightHex")] HRESULT GetQuarterLightHex([in] BSTR pszFrom, [in] BSTR pszFormat, [out, retval] BSTR * pVal);
        [id(70), helpstring("method Get3QuarterDarkRGB")] HRESULT Get3QuarterDarkRGB([in] BSTR pszFrom, [in] BSTR pszFormat, [out, retval] long * pVal);
        [id(71), helpstring("method Get3QuarterDarkHex")] HRESULT Get3QuarterDarkHex([in] BSTR pszFrom, [in] BSTR pszFormat, [out, retval] BSTR * pVal);
        [id(72), helpstring("method GetHalfDarkRGB")] HRESULT GetHalfDarkRGB([in] BSTR pszFrom, [in] BSTR pszFormat, [out, retval] long * pVal);
        [id(73), helpstring("method GetHalfDarkHex")] HRESULT GetHalfDarkHex([in] BSTR pszFrom, [in] BSTR pszFormat, [out, retval] BSTR * pVal);
        [id(74), helpstring("method GetQuarterDarkRGB")] HRESULT GetQuarterDarkRGB([in] BSTR pszFrom, [in] BSTR pszFormat, [out, retval] long * pVal);
        [id(75), helpstring("method GetQuarterDarkHex")] HRESULT GetQuarterDarkHex([in] BSTR pszFrom, [in] BSTR pszFormat, [out, retval] BSTR * pVal);
    };

[
    uuid(3D5905E0-523C-11D1-9FEA-00600832DB4A),
    version(1.0),
    helpstring("cic 1.0 Type Library")
]
library CICLib
{
    importlib("stdole32.tlb");
    importlib("stdole2.tlb");

    [
        uuid(545AE700-50BF-11D1-9FE9-00600832DB4A),
        helpstring("MMCCtrl Class")
    ]
    coclass MMCCtrl
    {
        [default] interface IMMCCtrl;
        [default, source] dispinterface IMMCCtrlEvent;
    };

    [
        uuid(3D112E22-62B2-11D1-9FEF-00600832DB4A),
        helpstring("MMCTask Class")
    ]
    coclass MMCTask
    {
        [default] interface IMMCTask;
    };

    [
        uuid(995A890C-F4C9-11D1-A1BF-0000F875B132),
        helpstring("MMCDisplayObject Class")
    ]
    coclass MMCDisplayObject
    {
        [default] interface IMMCDisplayObject;
    };

    [
        uuid(09474572-b2fb-11d1-a1a1-0000f875b132),
        helpstring("MMCListPadInfo Class")
    ]
    coclass MMCListPadInfo
    {
        [default] interface IMMCListPadInfo;
    };

    [
        uuid(289228DE-A31E-11D1-A19C-0000F875B132),
        helpstring("ListPad Class")
    ]
    coclass ListPad
    {
        [default] interface IListPad;
    };

        [
        uuid(C47195ED-CD7A-11D1-8EA3-00C04F9900D7),
        helpstring("Event interface for SysColorCtrl")
    ]
    dispinterface _SysColorEvents
    {
        properties:
        methods:
        [id(1)] void SysColorChange();
    };
    [
        uuid(C47195EC-CD7A-11D1-8EA3-00C04F9900D7),
        helpstring("SysColorCtrl Class")
    ]
    coclass SysColorCtrl
    {
        [default] interface ISysColorCtrl;
        [default, source] dispinterface _SysColorEvents;
    };

};
