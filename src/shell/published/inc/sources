!IF 0

Copyright (c) Microsoft Corporation. All rights reserved.

Module Name:

    sources.

Abstract:

    This file specifies the target component being built and the list of
    sources files needed to build that component.  Also specifies optional
    compiler switches and libraries that are unique for the component being
    built.

History:    6-05-96   scousens  (Scott Cousens)   Created
            2-25-98   scotth    cleaned up and commented the heck out of it
            1-21-00   reinerf   moved to source depot
!ENDIF

TARGETPATH=obj
TARGETTYPE=LIBRARY
TARGETNAME=shlproxy

PASS1_PUBLISH={$(O)\shlproxy.lib=$(PROJECT_LIB_PATH)\shlproxy.lib}

PASS0_PUBLISH=\
    $(IDL_PUBLISH_TARGETS) \
    $(HEADER_PUBLISH_TARGETS)

NO_BROWSER_FILE=1

# These are used in makefile.def when building the idl files.
PASS0_HEADERDIR=$(O)
PASS0_SOURCEDIR=$(O)
MIDL_UUIDDIR=$(O)
MIDL_TLBDIR=$(O)

MIDL_NO_ROBUST  = 1
# needs to run on Win95 and NT 3.51
# specify -Oicf once
MIDL_OPTIMIZATION=$(MIDL_OPTIMIZATION:-Oicf=) -Oicf

C_DEFINES       = -DWIN32=300 -D_CAIRO_=300 -DREGISTER_PROXY_DLL

INCLUDES=.;$(INCLUDES);$(SDK_LIB_PATH)

# HOW TO ADD A FILE:
#
# You should simply add your files to the lists below according
# to these instructions.  In most cases, you should not need to
# add anything to makefile.inc.  The inference rules there cover
# almost everything but the hole in the ozone layer.
#
# IDL FILES
#
#  To add foo.idl to the build (as an example):
#
#  1) add foo.idl to the IDL_SOURCES list.  This will create foo.tlb and obj\*\foo.h.
#
#  2) ONLY IF NECESSARY should you publish foo.idl, $O\foo.tlb, or $O\foo.h to other directories so external
#     projects can use them. If only things in the shell project are using the interfaces then
#     you should publish the files in a private location (eg: $(PROJECT_INC_PATH) for .h's and .idl's or 
#     $(PROJECT_ROOT)\lib\$(O) for .tlb's). Simply add the correct publish rule to IDL_PUBLISH_TARGETS to accomplish this.
#
#  3) Optional: to add your object library to ActxPrxy.dll, add an entries for the $(O)\foo_p.c file
#     to the PROXY_SOURCES list below and update $(BASEDIR)\MergedComponents\ActxPrxy\dlldatax.c as appropriate.
#
#  4) Optional: to add your GUIDs to shuuid.lib (and thus sdk\lib\uuid.lib), add an entry to
#     ..\uuid\makefile.inc and ..\uuid\sources
#

# (Notice this is in alphabetical order.  Hint. Hint.)
IDL_SOURCES= \
    accore.idl      \
    brdispp.idl     \
    chanmgr.idl     \
    CommonControls.idl\
    emptyvc.idl     \
    hliface.idl     \
    iepriv.idl      \
    imapi.idl       \
    mlang.idl       \
    msident.idl     \
    msieftp.idl     \
    opsprof.idl     \
    shappmgr.idl    \
    shgina.idl      \
    shimgdata.idl   \
    shimgvw.idl     \
    shldisp.idl     \
    shobjidl.idl    \
    shpriv.idl      \
    shtypes.idl     \
    tlog.idl        \
    tlogstg.idl     \
    theme.idl       \
    vrsscan.idl     \
    webvw.idl

# files generated from .idl's that are published
#
# NOTE: PUBLIC only files go here, if it is under $(PROJECT_ROOT) then
# it belongs in the PRIVATE_TARGETS list
IDL_PUBLISH_TARGETS= \
    {chanmgr.idl=$(SDK_INC_PATH)\chanmgr.idl} \
    {CommonControls.idl=$(SDK_INC_PATH)\CommonControls.idl} \
    {$O\CommonControls.h=$(SDK_INC_PATH)\CommonControls.h} \
    {$O\chanmgr.h=$(SDK_INC_PATH)\chanmgr.h} \
    {emptyvc.idl=$(SDK_INC_PATH)\emptyvc.idl} \
    {$O\emptyvc.h=$(SDK_INC_PATH)\emptyvc.h} \
    {hliface.idl=$(SDK_INC_PATH)\hliface.idl} \
    {$O\hliface.h=$(SDK_INC_PATH)\hliface.h} \
    {iepriv.idl=$(PROJECT_INC_PATH)\iepriv.idl} \
    {$O\iepriv.h=$(PROJECT_INC_PATH)\iepriv.h} \
    {$O\imapi.h=$(SDK_INC_PATH)\imapi.h} \
    {mlang.idl=$(SDK_INC_PATH)\mlang.idl} \
    {$O\mlang.h=$(SDK_INC_PATH)\mlang.h} \
    {$O\msident.h=$(SHELL_INC_PATH)\msident.h} \
    {shappmgr.idl=$(SDK_INC_PATH)\shappmgr.idl} \
    {$O\shappmgr.h=$(SDK_INC_PATH)\shappmgr.h} \
    {$O\shgina.h=$(PROJECT_INC_PATH)\shgina.h} \
    {shimgdata.idl=$(PROJECT_INC_PATH)\shimgdata.idl} \
    {$O\shimgdata.h=$(PROJECT_INC_PATH)\shimgdata.h} \
    {shldisp.idl=$(SDK_INC_PATH)\shldisp.idl} \
    {$O\shldisp.h=$(SDK_INC_PATH)\shldisp.h} \
    {$O\shobjidl_pub.idl=$(SDK_INC_PATH)\shobjidl.idl} \
    {$O\shobjidl_pub.h=$(SDK_INC_PATH)\shobjidl.h} \
    {shpriv.idl=$(PROJECT_INC_PATH)\shpriv.idl} \
    {$O\shpriv.h=$(PROJECT_INC_PATH)\shpriv.h} \
    {shtypes.idl=$(SDK_INC_PATH)\shtypes.idl} \
    {$O\shtypes.h=$(SDK_INC_PATH)\shtypes.h} \
    {tlog.idl=$(PROJECT_INC_PATH)\tlog.idl} \
    {$O\tlog.h=$(PROJECT_INC_PATH)\tlog.h} \
    {tlogstg.idl=$(PROJECT_INC_PATH)\tlogstg.idl} \
    {$O\tlogstg.h=$(PROJECT_INC_PATH)\tlogstg.h} \
    {$O\vrsscan.h=$(PROJECT_INC_PATH)\vrsscan.h}

# proxy stubs that are part of ActxPrxy.dll
PROXY_SOURCES= \
    $(O)\iepriv_p.c    \
    $(O)\shpriv_p.c    \
    $(O)\shldisp_p.c    \
    $(O)\shobjidl_p.c   \
    $(O)\imapi_p.c     \
    wire_mar.c

#
# This list is used to publish all the non-idl generated PUBLIC header files.
#
# NOTE: If you want to add a header to this list and it is a generated
#       file, then you may have to add the file to the NTTARGETFILE0 list 
#       as well as rules for its generation in makefile.inc.
#
HEADER_PUBLISH_TARGETS= \
    {aclui.h=$(SDK_INC_PATH)\aclui.h} \
    {badapps.h=$(PROJECT_INC_PATH)\badapps.h} \
    {$O\cmnquery.h=$(SDK_INC_PATH)\cmnquery.h} \
    {$O\cmnqueryp.h=$(PROJECT_INC_PATH)\cmnquryp.h} \
    {cleanoc.h=$(SHELL_INC_PATH)\cleanoc.h} \
    {color.dlg=$(SDK_INC_PATH)\color.dlg} \
    {$O\commctrl.h=$(SDK_INC_PATH)\commctrl.h} \
    {$O\commctrl.rh=$(SDK_INC_PATH)\commctrl.rh} \
    {$O\commctrlp.h=$(PROJECT_INC_PATH)\comctrlp.h} \
    {$O\commdlg.h=$(SDK_INC_PATH)\commdlg.h} \
    {$O\commdlgp.h=$(PROJECT_INC_PATH)\commdlgp.h} \
    {cplext.h=$(SDK_INC_PATH)\cplext.h} \
    {$O\cpl.h=$(SDK_INC_PATH)\cpl.h} \
    {$O\cplp.h=$(PROJECT_INC_PATH)\cplp.h} \
    {dlgs.h=$(SDK_INC_PATH)\dlgs.h} \
    {$O\dsclient.h=$(SDK_INC_PATH)\dsclient.h} \
    {$O\dsclientp.h=$(PROJECT_INC_PATH)\dsclintp.h} \
    {$O\dsquery.h=$(SDK_INC_PATH)\dsquery.h} \
    {$O\dsqueryp.h=$(PROJECT_INC_PATH)\dsqueryp.h} \
    {dssec.w=$(PROJECT_INC_PATH)\dssec.h} \
    {fileopen.dlg=$(SDK_INC_PATH)\fileopen.dlg} \
    {findtext.dlg=$(SDK_INC_PATH)\findtext.dlg} \
    {font.dlg=$(SDK_INC_PATH)\font.dlg} \
    {ginabmps.rc=$(PROJECT_INC_PATH)\ginabmps.rc} \
    {ginadlgs.rc=$(PROJECT_INC_PATH)\ginadlgs.rc} \
    {ginarcid.h=$(PROJECT_INC_PATH)\ginarcid.h} \
    {ginastrs.rc=$(PROJECT_INC_PATH)\ginastrs.rc} \
    {help.h=$(PROJECT_INC_PATH)\help.h} \
    {ieguidp.h=$(PROJECT_INC_PATH)\ieguidp.h} \
    {inetcpl.h=$(SHELL_INC_PATH)\inetcpl.h} \
    {$O\intshcut.h=$(SDK_INC_PATH)\intshcut.h} \
    {isguids.h=$(SDK_INC_PATH)\isguids.h} \
    {lpcfus.h=$(PROJECT_INC_PATH)\lpcfus.h} \
    {lpcgeneric.h=$(PROJECT_INC_PATH)\lpcgeneric.h} \
    {lpcthemes.h=$(PROJECT_INC_PATH)\lpcthemes.h} \
    {msluapi.h=$(SHELL_INC_PATH)\msluapi.h} \
    {msluguid.h=$(SHELL_INC_PATH)\msluguid.h} \
    {msprintx.h=$(PROJECT_INC_PATH)\msprintx.h} \
    {msshrui.h=$(PROJECT_INC_PATH)\msshrui.h} \
    {$O\multimon.h=$(SDK_INC_PATH)\multimon.h} \
    {$O\multimonp.h=$(PROJECT_INC_PATH)\multimop.h} \
    {pif.h=$(PROJECT_INC_PATH)\pif.h} \
    {$O\powrprof.h=$(SDK_INC_PATH)\powrprof.h} \
    {$O\powrprofp.h=$(PROJECT_INC_PATH)\powrprofp.h} \
    {prnsetup.dlg=$(SDK_INC_PATH)\prnsetup.dlg} \
    {$O\prsht.h=$(SDK_INC_PATH)\prsht.h} \
    {$O\prshtp.h=$(PROJECT_INC_PATH)\prshtp.h} \
    {ratings.h=$(SDK_INC_PATH)\ratings.h} \
    {schemadef.h=$(SDK_INC_PATH)\schemadef.h} \
    {shdispid.h=$(SDK_INC_PATH)\shdispid.h} \
    {$O\shellapi.h=$(SDK_INC_PATH)\shellapi.h} \
    {$O\shellapip.h=$(PROJECT_INC_PATH)\shlapip.h} \
    {shellids.h=$(PROJECT_INC_PATH)\shellids.h} \
    {shfolder.h=$(SDK_INC_PATH)\shfolder.h} \
    {shfusion.h=$(PROJECT_INC_PATH)\shfusion.h} \
    {$O\shlguid.h=$(SDK_INC_PATH)\shlguid.h} \
    {$O\shlguidp.h=$(PROJECT_INC_PATH)\shlguidp.h} \
    {$O\shlobj.h=$(SDK_INC_PATH)\shlobj.h} \
    {$O\shlobjp.h=$(PROJECT_INC_PATH)\shlobjp.h} \
    {$O\shlwapi.h=$(SDK_INC_PATH)\shlwapi.h} \
    {$O\shlwapip.h=$(PROJECT_INC_PATH)\shlwapip.h} \
    {systrayp.h=$(PROJECT_INC_PATH)\systrayp.h} \
    {tmschema.h=$(SDK_INC_PATH)\tmschema.h} \
    {uxtheme.h=$(SDK_INC_PATH)\uxtheme.h} \
    {uxthemep.h=$(PROJECT_INC_PATH)\uxthemep.h} \
    {uastrfnc.h=$(PROJECT_INC_PATH)\uastrfnc.h} \
    {webvwid.h=$(SDK_INC_PATH)\webvwid.h} \
    {winfoldr.w=$(PROJECT_INC_PATH)\winfoldr.h} \
    {$O\winver.h=$(SDK_INC_PATH)\winver.h} \
    {w95wraps.h=$(PROJECT_INC_PATH)\w95wraps.h} \
    {imapi\burnsys.w=$(PROJECT_INC_PATH)\imapi\burnsys.h} \
    {imapi\burnV.w=$(PROJECT_INC_PATH)\imapi\burnV.h} \
    {imapi\imagefile.w=$(PROJECT_INC_PATH)\imapi\imagefile.h} \
    {imapi\imapipub.w=$(PROJECT_INC_PATH)\imapi\imapipub.h} \
    {imapi\imapiRegistry.w=$(PROJECT_INC_PATH)\imapi\imapiRegistry.h} \
    {imapi\mmcThings.w=$(PROJECT_INC_PATH)\imapi\mmcThings.h} \
    {imapi\scsiThings.w=$(PROJECT_INC_PATH)\imapi\scsiThings.h} \
    {imapi\imapierror.w=$(SDK_INC_PATH)\imapierror.h}
    

#
# This list is used to copy all the PRIVATE shell files. You cannot use publishing
# for private files since published files must be under \nt\public
#
# NOTE: If you want to add a file to this list and it is a generated
#       file, then you may have to add rules for its generation in makefile.inc.
#
PRIVATE_TARGETS= \
    $(PROJECT_ROOT)\lib\$(O)\brdispp.tlb    \
    $(PROJECT_ROOT)\inc\$(O)\brdispp.h      \
    $(PROJECT_ROOT)\lib\$(O)\brdispp_i.c    \
    $(PROJECT_ROOT)\inc\$(O)\intshctp.h     \
    $(PROJECT_ROOT)\lib\$(O)\iepriv_i.c     \
    $(PROJECT_ROOT)\lib\$(O)\msieftp.tlb    \
    $(PROJECT_ROOT)\inc\$(O)\msieftp.h      \
    $(PROJECT_ROOT)\lib\$(O)\msieftp_i.c    \
    $(PROJECT_ROOT)\lib\$(O)\shgina.tlb     \
    $(PROJECT_ROOT)\lib\$(O)\shldisp.tlb    \
    $(PROJECT_ROOT)\inc\$(O)\shobjidlp.h    \
    $(PROJECT_ROOT)\lib\$(O)\shpriv_i.c     \
    $(PROJECT_ROOT)\lib\$(O)\theme.tlb      \
    $(PROJECT_ROOT)\inc\$(O)\theme.h        \
    $(PROJECT_ROOT)\lib\$(O)\theme_i.c      \
    $(PROJECT_ROOT)\lib\$(O)\webvw.tlb      \
    $(PROJECT_ROOT)\inc\$(O)\webvw.h        \
    $(PROJECT_ROOT)\lib\$(O)\webvw_i.c      \
    $(PROJECT_ROOT)\lib\$(O)\shimgvw.tlb    \
    $(PROJECT_ROOT)\inc\$(O)\shimgvw.h      \
    $(PROJECT_ROOT)\lib\$(O)\shimgvw_i.c    \
    $(PROJECT_ROOT)\inc\$(O)\opsprof.h

SOURCES= \
    $(IDL_SOURCES)  \
    $(PROXY_SOURCES)

# Note: PRIVATE_TARGETS goes at the end because we want to build
# shellapi.h *before* building the private targets (since some
# private targets depend on shellapi.h)
#
# Note: shobjidl_priv.h comes after shobjidl_pub.h because it is
# shobjidl_pub.h that triggers the creation of shobjidl_priv.h.
# (We don't have a separate rule for shobjidl_priv.h because that
# causes the rule to fire twice.)
#
NTTARGETFILE0=\
    $O\shobjidl_pub.h   \
    $O\shobjidl_priv.h  \
    $O\cmnquery.h       \
    $O\commctrl.h       \
    $O\commctrl.rh      \
    $O\commdlg.h        \
    $O\cpl.h            \
    $O\dsclient.h       \
    $O\dsquery.h        \
    $O\dsqueryp.h       \
    $O\intshcut.h       \
    $O\intshcutp.h      \
    $O\multimon.h       \
    $O\powrprof.h       \
    $O\prsht.h          \
    $O\shellapi.h       \
    $O\shlguid.h        \
    $O\shlobj.h         \
    $O\shlwapi.h        \
    $O\winver.h         \
    $(PRIVATE_TARGETS)

        

