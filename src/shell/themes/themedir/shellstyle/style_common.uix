
<style resid=main>

    DUIListView [id=atom(listview)]
    {
        contentalign: middlecenter;
        fontsize: sysmetric(DSM_ICONFONTSIZE);
        fontweight: sysmetric(DSM_ICONFONTWEIGHT);
        fontstyle: sysmetric(DSM_ICONFONTSTYLE);
        fontface: sysmetricstr(DSMS_ICONFONTFACE);
    }

    DUIAxHost [id=atom(preview)]
    {
        contentalign: middlecenter;
        borderthickness: rect(5rp,5rp,5rp,5rp);
        bordercolor: PREVIEW_BORDERCOLOR;
    }

    Element
    {
        background: argb(0,0,0,0);
    }

    Element [id=atom(blockade)]
    {
        background: BLOCKADE_BACKGROUND;
#ifndef CLASSIC_THEME
        borderthickness: rect(0rp,0rp,1rp,1rp);
        bordercolor: BLOCKADE_BORDERCOLOR;
#endif
    }

#ifndef CLASSIC_THEME
    Element [id=atom(blockadeaccent)]
    {
        background: BLOCKADE_ACCENT;
    }
#endif

    Element [id=atom(blockadeclient)]
    {
        contentalign:  bottomright;
        padding: rect (10rp,0rp,0rp,0rp);
    }

    Element [id=atom(blockadetitle)]
    {
        fontface: BLOCKADE_TITLE_FONTFACE;
        fontsize: BLOCKADE_TITE_FONTSIZE;
        fontweight: BLOCKADE_TITLE_FONTWEIGHT;
        foreground: BLOCKADE_TITLE;
        background: argb(0,0,0,0);
        padding: rect (0rp,20rp,10rp,0rp);
        contentalign: wrapleft;
    }

    Element [id=atom(blockademessage)]
    {
        fontface: BLOCKADE_MESSAGE_FONTFACE;
        fontsize: BLOCKADE_MESSAGE_FONTSIZE;
        fontweight: BLOCKADE_MESSAGE_FONTWEIGHT;
        foreground: BLOCKADE_MESSAGE;
        background: argb(0,0,0,0);
        padding: rect (1rp,15rp,10rp,0rp);
        contentalign: wrapleft;
    }

    Element [id=atom(blockadeclear)]
    {
        margin: rect(0rp,20rp,0rp,0rp);
    }

    Button [id=atom(blockadeclearbutton)][keyfocused]
    {
        contentalign: focusrect;
    }

    Element [id=atom(blockadecleartext)]
    {
        fontface: BLOCKADE_CLEAR_FONTFACE;
        fontsize: BLOCKADE_CLEAR_FONTSIZE;
        fontweight: BLOCKADE_CLEAR_WEIGHT;
        foreground: BLOCKADE_CLEAR;
        background: argb(0,0,0,0);
        contentalign: wrapleft;
        padding: rect (3rp,0rp,0rp,0rp);
    }

    Element [id=atom(blockadecleartext)][mousefocused]
    {
        cursor: hand;
        fontstyle: underline;
    }

</style>

<style resid=mainsectionss>

    element
    {
        background: argb(0,0,0,0);
    }

    expando
    {
        fontface: SS_EXPANDO_FONTFACE;
        fontsize: SS_EXPANDO_FONTSIZE;
#ifdef CLASSIC_THEME
        fontweight: SS_EXPANDO_FONTWEIGHT;
        fontstyle:  SS_EXPANDO_FONTSTYLE;
#endif
        margin: rect(0rp,5rp,0rp,0rp);
        animation: rectanglev | s | fast;
        background: argb(0,0,0,0);
    }

    button
    {
        cursor: hand;
#ifdef CLASSIC_THEME
        background: argb(0,0,0,0);
#endif
    }

    button [keyfocused]
    {
	contentalign: focusrect;
    }

    button [id=atom(header)]
    {
        background: SS_EXPANDO_HEADER_BACKGROUND;
#ifndef CLASSIC_THEME
        borderthickness: rect(2,2,2,0);
#endif
        foreground: SS_EXPANDO_HEADER;
        fontweight: SS_EXPANDO_HEADER_FONTWEIGHT;
#ifdef CLASSIC_THEME
        padding: rect(10,2,3,2);
#else
        padding: rect(10,0,0,0);
#endif
        animation: rectanglev | s | fast;
    }

    element [id=atom(title)]
    {
        contentalign: middleleft;
#ifdef CLASSIC_THEME
        padding: rect(3rp,0rp,4rp,0rp);
#else
        padding: rect(0rp,0rp,4rp,0rp);
#endif
        animation: rectanglev | s | fast;
    }

#ifndef CLASSIC_THEME
    element [id=atom(title)][keyfocused]
    {
        foreground: SS_EXPANDO_TITLE_KEYFOCUSED;
    }

    element [id=atom(title)][mousefocused]
    {
        foreground: SS_EXPANDO_TITLE_MOUSEFOCUSED;
    }
#endif

    element [id=atom(arrow)]
    {
#ifdef CLASSIC_THEME
        content: rcbmp(IDB_DOWNMAIN);
#else
        content: rcbmp(IDB_DOWNMAIN,2,255,0,0,0,0);
#endif
        animation: rectanglev | s | fast;
    }

    element [id=atom(arrow)][selected]
    {
#ifdef  CLASSIC_THEME
        content: rcbmp(IDB_UPMAIN);
#else
        content: rcbmp(IDB_UPMAIN,2,255,0,0,0,0);
#endif
    }

    element [id=atom(arrow)][mousefocused]
    {
#ifdef CLASSIC_THEME
        content: rcbmp(IDB_DOWNHOTMAIN);
#else
        content: rcbmp(IDB_DOWNHOTMAIN,2,255,0,0,0,0);
#endif
    }

    element [id=atom(arrow)][selected][mousefocused]
    {
#ifdef CLASSIC_THEME
        content: rcbmp(IDB_UPHOTMAIN);
#else
        content: rcbmp(IDB_UPHOTMAIN,2,255,0,0,0,0);
#endif
    }

    clipper
    {
        alpha: 0;
#ifdef CLASSIC_THEME
        background: SS_EXPANDO_CLIPPER;
#else
        background: argb(0,0,0,0);
#endif
        animation: alpha | rectanglev | s | fast;
    }

    clipper [selected]
    {
        alpha: 255;
    }

#ifndef CLASSIC_THEME
    element [id=atom(watermark)]
    {
        background: SS_EXPANDO_WATERMARK;
        contentalign: bottomright;
        animation: rectanglev | s | fast;
    }
#endif

    tasklist [id=atom(tasklist)]
    {
#ifdef CLASSIC_THEME
        background: SS_EXPANDO_TASKLIST;
#else
        background: argb(0,0,0,0);
#endif
        borderthickness: rect(1,0,1,1);
        bordercolor: SS_EXPANDO_TASKLIST_BORDERCOLOR;
        padding: rect(12rp,10rp,12rp,10rp);
        animation: rectanglev | s | fast;
    }

</style>

<style resid=mainsectiontaskss>

    destinationtask
    {
        margin: rect(0rp,4rp,0rp,0rp);
    }

    actiontask
    {
        margin: rect(0rp,4rp,0rp,0rp);
    }

    button
    {
        background: argb(0,0,0,0);
        foreground: SS_TASK_BUTTON;
        contentalign: wrapleft;
        margin: rect(0rp,4rp,0rp,0rp);
    }

    button [keyfocused]
    {
	contentalign: focusrect;
    }

    button [mousefocused]
    {
        cursor: hand;
        fontstyle: underline;
    }

    element
    {
        background: argb(0,0,0,0);
    }

    element [id=atom(title)]
    {
        contentalign: wrapleft;
        padding: rect(6rp,0rp,4rp,0rp);
    }

#ifndef CLASSIC_THEME
    element [id=atom(title)][mousefocused]
    {
        foreground: SS_TASK_TITLE_MOUSEFOCUSED;
    }
#endif

</style>

//
// Section style sheet
//

<style resid=sectionss>

    expando
    {
        fontface: NS_EXPANDO_FONTFACE;
        fontsize: NS_EXPANDO_FONTSIZE;
#ifdef CLASSIC_THEME
        fontweight: NS_EXPANDO_FONTWEIGHT;
        fontstyle:  NS_EXPANDO_FONTSTYLE;
#endif
        margin: rect(0rp,15rp,0rp,15rp);
        animation: rectanglev | s | fast;
        background: argb(0,0,0,0);
    }

    button
    {
        background: NS_EXPANDO_BUTTON_BACKGROUND;
        foreground: NS_EXPANDO_BUTTON;
        fontweight: NS_EXPANDO_BUTTON_FONTWEIGHT;
        padding: rect(10rp,0rp,1rp,0rp);
        borderthickness: rect(2,2,2,0);
        bordercolor: NS_EXPANDO_BUTTON_BORDERCOLOR;
        cursor: hand;
        animation: rectanglev | s | fast;
    }

    button [keyfocused]
    {
	contentalign: focusrect;
    }

    element
    {
        background: argb(0,0,0,0);
    }

    element [id=atom(title)]
    {
        contentalign: middleleft;
        animation: rectanglev | s | fast;
    }

#ifndef CLASSIC_THEME
    element [id=atom(title)][mousefocused]
    {
        foreground: NS_EXPANDO_TITLE_MOUSEFOCUSED;
    }
#endif

    element [id=atom(arrow)]
    {
#ifdef CLASSIC_THEME
        content: rcbmp(IDB_DOWN);
#else
        content: rcbmp(IDB_DOWN,2,255,0,0,0,0);
#endif
        animation: rectanglev | s | fast;
    }

    element [id=atom(arrow)][selected]
    {
#ifdef CLASSIC_THEME
        content: rcbmp(IDB_UP);
#else
        content: rcbmp(IDB_UP,2,255,0,0,0,0);
#endif
    }

    element [id=atom(arrow)][mousefocused]
    {
#ifdef CLASSIC_THEME
        content: rcbmp(IDB_DOWNHOT);
#else
        content: rcbmp(IDB_DOWNHOT,2,255,0,0,0,0);
#endif
    }

    element [id=atom(arrow)][selected][mousefocused]
    {
#ifdef CLASSIC_THEME
        content: rcbmp(IDB_UPHOT);
#else
        content: rcbmp(IDB_UPHOT,2,255,0,0,0,0);
#endif
    }

    clipper
    {
        alpha: 0;
#ifdef CLASSIC_THEME
        background: NS_EXPANDO_CLIPPER;
#else
        background: argb(0,0,0,0);
#endif
        animation: alpha | rectanglev | s | fast;
    }

    clipper [selected]
    {
        alpha: 255;
    }

    tasklist [id=atom(tasklist)]
    {
        background: NS_EXPANDO_TASKLIST;
        borderthickness: rect(1,0,1,1);
        bordercolor: NS_EXPANDO_TASKLIST_BORDERCOLOR;
        padding: rect(12rp,10rp,12rp,10rp);
        animation: rectanglev | s | fast;
    }

</style>

<style resid=sectiontaskss>

    destinationtask
    {
        margin: rect(0rp,4rp,0rp,0rp);
    }

    actiontask
    {
        margin: rect(0rp,4rp,0rp,0rp);
    }

    button
    {
        contentalign: wrapleft;
        foreground: NS_TASK_BUTTON;
        background: argb(0,0,0,0);
    }

    button [keyfocused]
    {
	contentalign: focusrect;
    }

    button [mousefocused]
    {
        cursor: hand;
        fontstyle: underline;
    }

    element
    {
        background: argb(0,0,0,0);
    }

    element [id=atom(title)]
    {
        contentalign: wrapleft;
        padding: rect(6rp,0rp,4rp,0rp);
    }

#ifndef CLASSIC_THEME
    element [id=atom(title)][mousefocused]
    {
        foreground: NS_TASK_TITLE_MOUSEFOCUSED;
    }
#endif

</style>

<style resid=taskpane>

    element [id=atom(sectionlist)]
    {
        background: TASKPANE_BACKGROUND;
        padding: rect(12rp,12rp,12rp,12rp);
#ifndef CLASSIC_THEME
        borderthickness: rect(1,0,0,1);
        bordercolor: TASKPANE_BORDERCOLOR;
#endif
    }

#ifdef CLASSIC_THEME
#include "..\scrollbar_win32.uix"
#else
#include "..\scrollbar_themed.uix"
#endif

</style>

<style resid=NameSpaceItemInfoList>

    NameSpaceItemInfo
    {
        contentalign: wrapleft;
#ifdef CLASSIC_THEME
        background: NAMESPACE_BACKGROUND;
        foreground: NAMESPACE_FOREGROUND;
#else
        background: argb(0,0,0,0);
#endif
        margin: rect(0rp,5rp,0rp,0rp);
    }

    NameSpaceItemInfo [id=atom(InfoName)]
    {
        fontweight: NAMESPACE_NAME_FONTWEIGHT;
    }

    NameSpaceItemInfo [id=atom(InfoType)]
    {
        margin: rect(0rp,0rp,0rp,0rp);
    }

</style>
