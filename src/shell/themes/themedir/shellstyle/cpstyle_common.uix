//
// cpstyle.uix
//
//
// Banner stylesheet
//
<style resid=BannerSS>

    element [id=atom(banner)]
    {
        background: argb(0,0,0,0);
    }

    element [id=atom(iconsite)]
    {
        padding: rect(10rp, 7rp, 0, 0);
    }

    element [id=atom(icon)]
    {
        background: argb(0,0,0,0);
    }

    element [id=atom(header)]
    {
        background: BannerBkgnd;
        padding: rect(50rp, 1rp, 3rp, 1rp);
    }

    element [id=atom(title)]
    {
        foreground:     BannerFontColor;
        fontface:       BannerFont;
        fontsize:       BannerFontSize;
        fontweight:     BannerFontWeight;
        contentalign:   middleleft;
        margin:         rect(0, 4rp, 0, 4rp);
    }

</style>


//
// Style for the 'directive' text used in both the category
// choice and category views.
//
<style resid=DirectiveSS>

    element
    {
        background: argb(0,0,0,0);
    }

    element
    {
        foreground: DirectiveFontColor;
        fontface:   DirectiveFont;
        fontsize:   DirectiveFontSize;
        fontweight: DirectiveFontWeight;
        contentalign: wrapleft;
        margin: rect(0, 30rp, 0, 0);
    }
</style>



//
// Style for the list of category choices.
//
<style resid=CategoryListSS>

    element
    {
        background: argb(0,0,0,0);
    }

    element [id=atom(view)]
    {
        background: CategoryListBkgnd;
        borderthickness: rect(0,0,0,1);
        bordercolor: white;
    }

    element [id=atom(separator)]
    {
        background: SeparatorColor;
    }

    element [id=atom(container)]
    {
        padding: rect(20rp,20rp,20rp,20rp);
    }

    element [id=atom(categorylist)]
    {
        margin: rect(0,12rp,0,0);
    }

</style>


//
// Style for a single item in the category list.
// This style is applied programmatically to each item
// at item creation in cpview.cpp.
//
<style resid=CategoryListItemSS>

    linkelement
    {
        fontsize:    CategoryLinkFontSize;
        fontface:    CategoryLinkFont;
        foreground:  CategoryLinkFontColor;
        fontweight:  CategoryLinkFontWeight;
        background: argb(0,0,0,0);
        margin: rect(12rp,12rp,12rp,12rp);
        padding: rect(1,1,1,1);  // For focus rect
    }

    linkelement [keyfocused]
    {
        contentalign: focusrect;
        foreground: CategoryLinkFontColorHot;
    }

    linkelement [mousefocused]
    {
        cursor: hand;
        foreground: CategoryLinkFontColorHot;
        fontstyle: CategoryLinkFontStyleHot;
    }

    element
    {
        background: argb(0,0,0,0);
    }

    element [id=atom(icon)]
    {
        contentalign: middleleft;
    }

    element [id=atom(title)]
    {
        contentalign: wrapleft;
        padding:      rect(5rp,0,0,0);
    }

</style>





//
// Style for the view of a given category.
//
<style resid=CategoryViewSS>

    element
    {
        background: argb(0,0,0,0);
    }

    element [id=atom(view)]
    {
        borderthickness: rect(0,0,0,1);
        bordercolor: white;
        background: CategoryViewBkgnd;
    }

    element [id=atom(separator)]
    {
        background: SeparatorColor;
    }

    element [id=atom(container)]
    {
        padding: rect(20rp,20rp,20rp,20rp);
    }

    element [id=atom(categorytasklist)]
    {
        margin: rect(0,12rp,0,0);
    }

    element [id=atom(appletlist)]
    {
        margin: rect(0,12rp,0,0);
    }

</style>



//
// Style for a single item in a category's list of tasks.
// This style is applied programmatically to each item
// at item creation in cpview.cpp.
//
<style resid=CategoryTaskListItemSS>

    linkelement
    {
        fontsize:     TaskLinkFontSize;
        fontface:     TaskLinkFont;
        foreground:   TaskLinkFontColor;
        fontweight:   TaskLinkFontWeight;
        background: argb(0,0,0,0);
        margin: rect(12rp,12rp,12rp,12rp);
        padding: rect(1,1,1,1);  // For focus rect
        cursor: hand; 
    }

    linkelement [keyfocused]
    {
        contentalign: focusrect;
        foreground: TaskLinkFontColorHot;
    }

    linkelement [mousefocused]
    {
        cursor: hand; 
        foreground: TaskLinkFontColorHot;
        fontstyle:  TaskLinkFontStyleHot;
    }


    element
    {
        background: argb(0,0,0,0);
    }

    element [id=atom(icon)]
    {
        contentalign: middleleft;
    }

    element [id=atom(title)]
    {
        contentalign: wrapleft;
        padding:       rect(5rp,0,0,0);
    }

</style>

//
// This style is applied to the 'barricade' text displayed when
// there are no tasks or CPL applets available for a particular
// Control Panel category.
//
<style resid=BarricadeSS>

    element [id=atom(barricadetitle)]
    {
        fontface: BarricadeTitleFont;
        fontsize: BarricadeTitleFontSize;
        fontweight: BarricadeTitleFontWeight;
        foreground: BarricadeTitleFontColor;
        background: argb(0,0,0,0);
        padding: rect (10rp,20rp,10rp,0rp);
        contentalign: wrapleft;
    }

    element [id=atom(barricademsg)]
    {
        fontface: BarricadeMsgFont;
        fontsize: BarricadeMsgFontSize;
        fontweight: BarricadeMsgFontWeight;
        foreground: BarricadeMsgFontColor;
        background: argb(0,0,0,0);
        padding: rect (10rp,15rp,10rp,0rp);
        contentalign: wrapleft;
    }

</style>