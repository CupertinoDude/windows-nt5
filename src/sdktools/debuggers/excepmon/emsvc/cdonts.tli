// Created by Microsoft (R) C/C++ Compiler Version 13.00.9176 (eef4f361).
//
// g:\src\sdktools\debuggers\excepmon\emsvc\obj\i386\cdonts.tli
//
// Wrapper implementations for Win32 type library cdonts.dll
// compiler-generated file created 05/06/01 at 03:49:51 - DO NOT EDIT!

#pragma once

//
// interface INewMail wrapper method implementations
//

inline void INewMail::PutValue ( _bstr_t bstrHeader, _bstr_t _arg2 ) {
    HRESULT _hr = put_Value(bstrHeader, _arg2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void INewMail::PutTo ( _bstr_t _arg1 ) {
    HRESULT _hr = put_To(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void INewMail::PutCc ( _bstr_t _arg1 ) {
    HRESULT _hr = put_Cc(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void INewMail::PutBcc ( _bstr_t _arg1 ) {
    HRESULT _hr = put_Bcc(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void INewMail::PutBody ( const _variant_t & _arg1 ) {
    HRESULT _hr = put_Body(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void INewMail::PutImportance ( long _arg1 ) {
    HRESULT _hr = put_Importance(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void INewMail::PutBodyFormat ( long _arg1 ) {
    HRESULT _hr = put_BodyFormat(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void INewMail::PutMailFormat ( long _arg1 ) {
    HRESULT _hr = put_MailFormat(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void INewMail::PutSubject ( _bstr_t _arg1 ) {
    HRESULT _hr = put_Subject(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void INewMail::PutFrom ( _bstr_t _arg1 ) {
    HRESULT _hr = put_From(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT INewMail::Send ( const _variant_t & From, const _variant_t & To, const _variant_t & Subject, const _variant_t & Body, const _variant_t & Importance ) {
    HRESULT _hr = raw_Send(From, To, Subject, Body, Importance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT INewMail::AttachFile ( const _variant_t & Source, const _variant_t & FileName, const _variant_t & EncodingMethod ) {
    HRESULT _hr = raw_AttachFile(Source, FileName, EncodingMethod);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT INewMail::AttachURL ( const _variant_t & Source, const _variant_t & ContentLocation, const _variant_t & ContentBase, const _variant_t & EncodingMethod ) {
    HRESULT _hr = raw_AttachURL(Source, ContentLocation, ContentBase, EncodingMethod);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT INewMail::SetLocaleIDs ( long CodePageID ) {
    HRESULT _hr = raw_SetLocaleIDs(CodePageID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline void INewMail::PutContentLocation ( _bstr_t _arg1 ) {
    HRESULT _hr = put_ContentLocation(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void INewMail::PutContentBase ( _bstr_t _arg1 ) {
    HRESULT _hr = put_ContentBase(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t INewMail::GetVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Version(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface ISession wrapper method implementations
//

inline _variant_t ISession::GetApplication ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ISession::GetParent ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ISession::GetSession ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline long ISession::GetClass ( ) {
    long _result = 0;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t ISession::GetVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Version(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ISession::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _variant_t ISession::GetInbox ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Inbox(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ISession::GetOutbox ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Outbox(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline long ISession::GetMessageFormat ( ) {
    long _result = 0;
    HRESULT _hr = get_MessageFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISession::PutMessageFormat ( long pMessageFormat ) {
    HRESULT _hr = put_MessageFormat(pMessageFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT ISession::LogonSMTP ( const _variant_t & DisplayName, const _variant_t & Address ) {
    HRESULT _hr = raw_LogonSMTP(DisplayName, Address);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISession::Logoff ( ) {
    HRESULT _hr = raw_Logoff();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _variant_t ISession::GetDefaultFolder ( const _variant_t & Type ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetDefaultFolder(Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ISession::GetMessageCDOEm ( const _variant_t & MessageID, const _variant_t & StoreID ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetMessageCDOEm(MessageID, StoreID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline HRESULT ISession::SetLocaleIDs ( long CodePageID ) {
    HRESULT _hr = raw_SetLocaleIDs(CodePageID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISession::SetReserved ( const _variant_t & var1, const _variant_t & var2 ) {
    HRESULT _hr = raw_SetReserved(var1, var2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface AddressEntry wrapper method implementations
//

inline _variant_t AddressEntry::GetApplication ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t AddressEntry::GetParent ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t AddressEntry::GetSession ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline long AddressEntry::GetClass ( ) {
    long _result = 0;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t AddressEntry::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t AddressEntry::GetAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Address(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t AddressEntry::GetType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface Attachment wrapper method implementations
//

inline _variant_t Attachment::GetApplication ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t Attachment::GetParent ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t Attachment::GetSession ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline long Attachment::GetClass ( ) {
    long _result = 0;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t Attachment::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void Attachment::PutName ( _bstr_t pbstrName ) {
    HRESULT _hr = put_Name(pbstrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long Attachment::GetType ( ) {
    long _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void Attachment::PutType ( long pType ) {
    HRESULT _hr = put_Type(pType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t Attachment::GetSource ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Source(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void Attachment::PutSource ( const _variant_t & varSource ) {
    HRESULT _hr = put_Source(varSource);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t Attachment::GetContentLocation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ContentLocation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t Attachment::GetContentBase ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ContentBase(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t Attachment::GetContentID ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ContentID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline HRESULT Attachment::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT Attachment::ReadFromFile ( _bstr_t FileName ) {
    HRESULT _hr = raw_ReadFromFile(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT Attachment::WriteToFile ( _bstr_t FileName ) {
    HRESULT _hr = raw_WriteToFile(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Attachments wrapper method implementations
//

inline _variant_t Attachments::GetApplication ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t Attachments::GetParent ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t Attachments::GetSession ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline long Attachments::GetClass ( ) {
    long _result = 0;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _variant_t Attachments::GetItem ( VARIANT * var ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Item(var, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline long Attachments::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IUnknownPtr Attachments::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline _variant_t Attachments::Add ( const _variant_t & Name, const _variant_t & Type, const _variant_t & Source, const _variant_t & ContentLocation, const _variant_t & ContentBase ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Add(Name, Type, Source, ContentLocation, ContentBase, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline HRESULT Attachments::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Folder wrapper method implementations
//

inline _variant_t Folder::GetApplication ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t Folder::GetParent ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t Folder::GetSession ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline long Folder::GetClass ( ) {
    long _result = 0;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t Folder::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _variant_t Folder::GetMessages ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Messages(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface Messages wrapper method implementations
//

inline _variant_t Messages::GetApplication ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t Messages::GetParent ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t Messages::GetSession ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline long Messages::GetClass ( ) {
    long _result = 0;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long Messages::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _variant_t Messages::GetItem ( VARIANT * var ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Item(var, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline IUnknownPtr Messages::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline _variant_t Messages::Add ( const _variant_t & Subject, const _variant_t & Text, const _variant_t & Importance ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Add(Subject, Text, Importance, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline HRESULT Messages::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _variant_t Messages::GetFirst ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetFirst(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t Messages::GetNext ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetNext(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t Messages::GetLast ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetLast(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t Messages::GetPrevious ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetPrevious(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface Message wrapper method implementations
//

inline _variant_t Message::GetApplication ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t Message::GetParent ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t Message::GetSession ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline long Message::GetClass ( ) {
    long _result = 0;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long Message::GetSize ( ) {
    long _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long Message::GetImportance ( ) {
    long _result = 0;
    HRESULT _hr = get_Importance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void Message::PutImportance ( long pImportance ) {
    HRESULT _hr = put_Importance(pImportance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t Message::GetSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void Message::PutSubject ( _bstr_t pSubject ) {
    HRESULT _hr = put_Subject(pSubject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t Message::GetSender ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Sender(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t Message::GetTimeSent ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_TimeSent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void Message::PutTimeSent ( const _variant_t & varTimeSent ) {
    HRESULT _hr = put_TimeSent(varTimeSent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t Message::GetTimeReceived ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_TimeReceived(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void Message::PutTimeReceived ( const _variant_t & varTimeReceived ) {
    HRESULT _hr = put_TimeReceived(varTimeReceived);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t Message::GetText ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void Message::PutText ( const _variant_t & varText ) {
    HRESULT _hr = put_Text(varText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t Message::GetHTMLText ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HTMLText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void Message::PutHTMLText ( const _variant_t & varHTMLText ) {
    HRESULT _hr = put_HTMLText(varHTMLText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t Message::GetRecipients ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Recipients(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void Message::PutRecipients ( const _variant_t & varRecipients ) {
    HRESULT _hr = put_Recipients(varRecipients);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t Message::GetAttachments ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Attachments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void Message::PutMessageFormat ( long _arg1 ) {
    HRESULT _hr = put_MessageFormat(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t Message::GetContentLocation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ContentLocation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void Message::PutContentLocation ( const _variant_t & varContentLocation ) {
    HRESULT _hr = put_ContentLocation(varContentLocation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t Message::GetContentBase ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ContentBase(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void Message::PutContentBase ( const _variant_t & varContentBase ) {
    HRESULT _hr = put_ContentBase(varContentBase);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t Message::GetContentID ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ContentID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void Message::PutContentID ( const _variant_t & varContentID ) {
    HRESULT _hr = put_ContentID(varContentID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT Message::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT Message::Send ( ) {
    HRESULT _hr = raw_Send();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Recipient wrapper method implementations
//

inline _variant_t Recipient::GetApplication ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t Recipient::GetParent ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t Recipient::GetSession ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline long Recipient::GetClass ( ) {
    long _result = 0;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t Recipient::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void Recipient::PutName ( _bstr_t pbstrName ) {
    HRESULT _hr = put_Name(pbstrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long Recipient::GetType ( ) {
    long _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void Recipient::PutType ( long pType ) {
    HRESULT _hr = put_Type(pType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t Recipient::GetAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Address(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void Recipient::PutAddress ( _bstr_t pAddress ) {
    HRESULT _hr = put_Address(pAddress);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT Recipient::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Recipients wrapper method implementations
//

inline _variant_t Recipients::GetApplication ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t Recipients::GetParent ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t Recipients::GetSession ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline long Recipients::GetClass ( ) {
    long _result = 0;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _variant_t Recipients::GetItem ( VARIANT * var ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Item(var, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline long Recipients::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IUnknownPtr Recipients::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline _variant_t Recipients::Add ( const _variant_t & Name, const _variant_t & Address, const _variant_t & Type ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Add(Name, Address, Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline HRESULT Recipients::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}
